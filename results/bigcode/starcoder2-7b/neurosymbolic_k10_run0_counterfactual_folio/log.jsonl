{"idx": 0, "prompt": "The following is a first-order logic (FOL) problem.\nThe problem is to determine whether the conclusion follows from the premises.\nThe premises are given in the form of a set of first-order logic sentences.\nThe conclusion is given in the form of a single first-order logic sentence.\nThe task is to translate each of the premises and conclusions into FOL expressions so that the expressions can be evaluated by a theorem solver like Prover9 to determine whether the conclusion follows from the premises.\nExpressions should adhere to the format of the Python NLTK package logic module. \n\n\n<PREMISES>\nAll biodegradable things are environment-friendly.\nAll woodware is biodegradable.\nAll paper is woodware.\nNothing is a good thing and also a bad thing.\nAll environment-friendly things are good.\nA worksheet is either paper or environment-friendly.\n</PREMISES>\n<CONCLUSION>\nA worksheet is not biodegradable.\n</CONCLUSION>\n<EVALUATE>\nTEXT: All biodegradable things are environment-friendly.\nFOL: all x. (Biodegradable(x) -> EnvironmentFriendly(x))\nTEXT: All woodware is biodegradable.\nFOL: all x. (Woodware(x) -> Biodegradable(x))\nTEXT: All paper is woodware.\nFOL: all x. (Paper(x) -> Woodware(x))\nTEXT: Nothing is a good thing and also a bad thing.\nFOL: -(exists x. (Good(x) & Bad(x)))\nTEXT: All environment-friendly things are good.\nFOL: all x. (EnvironmentFriendly(x) -> Good(x))\nTEXT: A worksheet is either paper or environment-friendly.\nFOL: ((Paper(Worksheet) & -EnvironmentFriendly(Worksheet)) | (-Paper(Worksheet) & EnvironmentFriendly(Worksheet)))\nTEXT: A worksheet is not biodegradable.\nFOL: -Dispensable(Worksheet)\n</EVALUATE>\n\n<PREMISES>\nA La Liga soccer team ranks higher than another La Liga soccer team if it receives more points.\nIf there are two La Liga soccer teams and neither has more points than the other, then the team which receives more points from the games between the two teams ranks higher.\nReal Madrid and Barcelona are both La Liga soccer teams.\nReal Madrid received more points than Barcelona.\nNeither Real Madrid nor Barcelona received more points from the games between them.\n</PREMISES>\n<CONCLUSION>\nReal Madrid ranks higher than Barcelona.\n</CONCLUSION>\n<EVALUATE>\nTEXT: A La Liga soccer team ranks higher than another La Liga soccer team if it receives more points.\nFOL: all x. all y. (LaLigaSoccerTeam(x) & LaLigaSoccerTeam(y) & MorePoints(x, y) -> RankHigherThan(x, y))\nTEXT: If there are two La Liga soccer teams and neither has more points than the other, then the team which receives more points from the games between the two teams ranks higher.\nFOL: all x. all y. (LaLigaSoccerTeam(x) & LaLigaSoccerTeam(y) & -MorePoints(x, y) & -MorePoints(y, x) & MorePointsInGameBetween(x, y) ->  RankHigherThan(x, y))\nTEXT: Real Madrid and Barcelona are both La Liga soccer teams.\nFOL: LaLigaSoccerTeam(RealMadrid) & LaLigaSoccerTeam(Barcelona)\nTEXT: Real Madrid received more points than Barcelona.\nFOL: MorePoints(RealMadrid, Barcelona)\nTEXT: Neither Real Madrid nor Barcelona received more points from the games between them.\nFOL: -MorePointsInGameBetween(RealMadrid, Barcelona) & -MorePointsInGameBetween(Barcelona, RealMadrid)\nTEXT: Real Madrid ranks higher than Barcelona.\nFOL: HigherRank(RealMadrid, Barcelona)\n</EVALUATE>\n\n<PREMISES>\nAll professional athletes spend most of their time on sports.\nAll Olympic gold medal winners are professional athletes.\nNo full-time scientists spend the majority of their time on sports.\nAll Nobel physics laureates are full-time scientists.\nAmy spends the most time on sports, or Amy is an Olympic gold medal winner.\nIf Amy is not a Nobel physics laureate, then Amy is not an Olympic gold medal winner.\n</PREMISES>\n<CONCLUSION>\nIf Amy is not an Olympic gold medal winner, then Amy is a Nobel physics laureate.\n</CONCLUSION>\n<EVALUATE>\nTEXT: All professional athletes spend most of their time on sports.\nFOL: all x. (ProfessionalAthlete(x) -> SpendOn(x, MostOfTheirTime, Sports))\nTEXT: All Olympic gold medal winners are professional athletes.\nFOL: all x. (OlympicGoldMedalWinner(x) -> ProfessionalAthlete(x))\nTEXT: No full-time scientists spend the majority of their time on sports.\nFOL: all x. (FullTimeScientist(x) -> -SpendOn(x, MostOfTheirTime, Sports))\nTEXT: All Nobel physics laureates are full-time scientists.\nFOL: all x. (NobelPhysicsLaureate(x) -> FullTimeScientist(x))\nTEXT: Amy spends the most time on sports, or Amy is an Olympic gold medal winner.\nFOL: SpendOn(Amy, MostOfTheirTime, Sports) | OlympicGoldMedalWinner(Amy)\nTEXT: If Amy is not a Nobel physics laureate, then Amy is not an Olympic gold medal winner.\nFOL: -NobelPhysicsLaureate(Amy) -> -OlympicGoldMedalWinner(Amy)\nTEXT: If Amy is not an Olympic gold medal winner, then Amy is a Nobel physics laureate.\nFOL: -OlympicGoldMedalWinner(Amy) -> NobelLaureate(Amy)\n</EVALUATE>\n\n<PREMISES>\nIf a person pays their taxes, then they contribute to the country.\nEveryone who works for a government department pays a tax on their salary.\nEveryone in the army is an employee of a government department.\nEveryone convicted of murder goes to prison.\nEveryone who has been to prison has a criminal record.\nJames was either once convicted of murder, or spent time in prison.\nJames either has a criminal record, or pays his taxes.\n</PREMISES>\n<CONCLUSION>\nJames does not contribute to the country.\n</CONCLUSION>\n<EVALUATE>\nTEXT: If a person pays their taxes, then they contribute to the country.\nFOL: all x. (Taxpayer(x) -> ContributeTo(x, Country))\nTEXT: Everyone who works for a government department pays a tax on their salary.\nFOL: all x. (WorkFor(x, GovernmentAgency) -> Taxpayer(x))\nTEXT: Everyone in the army is an employee of a government department.\nFOL: all x. (ServesIn(x, TheArmy) -> WorkFor(x, GovernmentAgency))\nTEXT: Everyone convicted of murder goes to prison.\nFOL: all x. (SentencedForMurder(x) -> Imprisoned(x))\nTEXT: Everyone who has been to prison has a criminal record.\nFOL: all x. (Imprisoned((x) -> Has(x, CriminalRecord))\nTEXT: James was either once convicted of murder, or spent time in prison.\nFOL: ((SentencedForMurder(James) & -Imprisoned(James)) | (-SentencedForMurder(James) & Imprisoned(James)))\nTEXT: James either has a criminal record, or pays his taxes.\nFOL: ((Has(James, CriminalRecord) & -Taxpayer(James)) | (-Has(James, CriminalRecord) & Taxpayer(James)))\nTEXT: James does not contribute to the country.\nFOL: ContributeToCountry(James)\n</EVALUATE>\n\n<PREMISES>\nNo songs are visuals.\nAll folk songs are songs.\nAll videos are visuals.\nAll movies are videos.\nAll sci-fi movies are movies.\nInception is a sci-fi movie.\nMac is neither a folk song nor a sci-fi movie.\n</PREMISES>\n<CONCLUSION>\nInception is a folk song.\n</CONCLUSION>\n<EVALUATE>\nTEXT: No songs are visuals.\nFOL: all x. (Song(x) -> -Visual(x))\nTEXT: All folk songs are songs.\nFOL: all x. (FolkSong(x) -> Song(x))\nTEXT: All videos are visuals.\nFOL: all x. (Video(x) -> Visual(x))\nTEXT: All movies are videos.\nFOL: all x. (Movie(x) -> Video(x))\nTEXT: All sci-fi movies are movies.\nFOL: all x. (ScifiMovie(x) -> Movie(x))\nTEXT: Inception is a sci-fi movie.\nFOL: ScifiMovie(Inception)\nTEXT: Mac is neither a folk song nor a sci-fi movie.\nFOL: -FolkSong(Mac) & -ScifiMovie(Mac)\nTEXT: Inception is a folk song.\nFOL: FolkSong(Inception)\n</EVALUATE>\n\n<PREMISES>\nEvery chef can cook.\nSome people who aren\u2019t chefs can cook.\nPeople who cook can make scrambled eggs and pasta.\nIf someone can make cookies and muffins, they are a baker.\nBakers who can also make scrambled eggs can make a good breakfast.\nLuke can make cookies, scrambled eggs, and muffins, but not pasta.\n</PREMISES>\n<CONCLUSION>\nLuke is a chef.\n</CONCLUSION>\n<EVALUATE>\nTEXT: Every chef can cook.\nFOL: all x. (Chef(x) -> Can(x, Cook))\nTEXT: Some people who aren\u2019t chefs can cook.\nFOL: exists x. (-Chef(x) & Can(x, Cook))\nTEXT: People who cook can make scrambled eggs and pasta.\nFOL: all x. (Can(x, Cook) -> (CanMake(x, ScrambledEggs) & CanMake(x, Pasta)))\nTEXT: If someone can make cookies and muffins, they are a baker.\nFOL: all x. (CanMake(x, Cookies) & CanMake(x, Muffins) -> Baker(x))\nTEXT: Bakers who can also make scrambled eggs can make a good breakfast.\nFOL: all x. ((Baker(x) & CanMake(x, ScrambledEggs)) -> CanMake(x, GoodBreakfast))\nTEXT: Luke can make cookies, scrambled eggs, and muffins, but not pasta.\nFOL: CanMake(Luke, Cookies) & (CanMake(Luke, ScrambledEggs) & CanMake(Luke, Muffins) & -CanMake(Luke, Pasta)\nTEXT: Luke is a chef.\nFOL: MakeGoodBreakfast(Luke)\n</EVALUATE>\n\n<PREMISES>\nETS develops various standardized tests primarily in the United States for K-12 and higher education.\nETS administers international tests, including the TOEFL, TOEIC, GRE, and subject tests.\nMany of the assessments ETS develops are associated with entry to the US tertiary and quaternary education institutions.\nETS also develops K-12 statewide assessments used for accountability testing in many states.\n</PREMISES>\n<CONCLUSION>\nETS doesn't administer tests internationally.\n</CONCLUSION>\n<EVALUATE>\nTEXT: ETS develops various standardized tests primarily in the United States for K-12 and higher education.\nFOL: exists x. exists y. (Develop(eTS, x) & Develop(eTS, y) & StandardizedTest(x) & StandardizedTest(y) & In(x, UnitedState) & In(y, UnitedState) & For(x, kOneTwoAndHigherEducation) & For(y, kOneTwoAndHigherEducation))\nTEXT: ETS administers international tests, including the TOEFL, TOEIC, GRE, and subject tests.\nFOL: exists x. (Administer(eTS, x) & InternationalTest(x) & (TOEFL(x) | TOEIC(x) | GRE(x) | SubjectTest(x)))\nTEXT: Many of the assessments ETS develops are associated with entry to the US tertiary and quaternary education institutions.\nFOL: exists x. (Develop(eTS, x) & AssociatedWith(x, EntryToUSEducationInstitution))\nTEXT: ETS also develops K-12 statewide assessments used for accountability testing in many states.\nFOL: exists x. (Develop(eTS, x) & StateWideAssesment(x) & UsedFor(x, AccountabilityTesting))\nTEXT: ETS doesn't administer tests internationally.\nFOL: exists x. (Develops(Ets, x) & For(x, k-OneTwoandhighereducation)) & exists x. (Develops(Ets, x) & AssociatedWith(x, Entrytouseducationinstitutions))\n</EVALUATE>\n\n<PREMISES>\nDaveed Diggs is an actor and film producer.\nDaveed Diggs played two roles in the musical Hamilton on Broadway.\nOne of the actors from Hamilton won the best actor award.\nThe actor playing Thomas Jefferson won the best actor award.\nDaveed Diggs played Thomas Jefferson.\nMusicals on Broadway are not films.\n</PREMISES>\n<CONCLUSION>\nDaveed Diggs won the best actor award.\n</CONCLUSION>\n<EVALUATE>\nTEXT: Daveed Diggs is an actor and film producer.\nFOL: Actor(DaveedDiggs) & FilmProducer(DaveedDiggs)\nTEXT: Daveed Diggs played two roles in the musical Hamilton on Broadway.\nFOL: exists x. exists y.(PlaysIn(DaveedDiggs, x, Hamilton) & (-(x=y)) & PlaysIn(DaveedDiggs, y, Hamilton)) & OnBroadway(Hamilton) & Musical(Hamilton)\nTEXT: One of the actors from Hamilton won the best actor award.\nFOL: exists x. exists y.(Actor(x) & PlaysIn(x, y, Hamilton) & Wins(x, BestActorAward))\nTEXT: The actor playing Thomas Jefferson won the best actor award.\nFOL: exists x. (Actor(x) & PlaysIn(x, ThomasJefferson, Hamilton) & Wins(x, BestActorAward))\nTEXT: Daveed Diggs played Thomas Jefferson.\nFOL: Plays(DaveedDiggs, ThomasJefferson)\nTEXT: Musicals on Broadway are not films.\nFOL: all x. ((Musical(x) & OnBroadway(x)) -> -Film(x))\nTEXT: Daveed Diggs won the best actor award.\nFOL: exists x. (BRICS(x) & Speaks(x, Hindi))\n</EVALUATE>\n\n<PREMISES>\nMiroslav Venhoda was a Czech pianist who specialized in the study of hieroglyphics, machine learning, and badminton.\nAny pianist is a chef.\nSome chefs enjoy music.\nMiroslav Venhoda burned a book in 1946 called Method of Studying Gregorian Chant.\n</PREMISES>\n<CONCLUSION>\nNo pianist specialized in machine learning.\n</CONCLUSION>\n<EVALUATE>\n", "raw_generations": ["TEXT: Miroslav Venhoda was a Czech pianist who specialized in the study of hieroglyphics, machine learning, and badminton.\nFOL: exists x. (Czech(x) & Pianist(x) & SpecializesIn(x, StudyOfHieroglyphics) & SpecializesIn(x, MachineLearning) & SpecializesIn(x, Badminton))\nTEXT: Any pianist is a chef.\nFOL: all x. (Pianist(x) -> Chef(x))\nTEXT: Some chefs enjoy music.\nFOL: exists x. (Chef(x) & Enjoys(x, Music))\nTEXT: Miroslav Venhoda burned a book in 1946 called Method of Studying Gregorian Chant.\nFOL: exists x. (Burn(MiroslavVenhoda, x, MethodOfStudyingGregorianChant, 1946))\nTEXT: No pianist specialized in machine learning.\nFOL: -SpecializesIn(x, MachineLearning)\n", "TEXT: Miroslav Venhoda was a Czech pianist who specialized in the study of hieroglyphics, machine learning, and badminton.\nFOL: exists x. (Venhoda(x) & CzechPianist(x) & Specialized(x, Hieroglyphics, MachineLearning, Badminton))\nTEXT: Any pianist is a chef.\nFOL: all x. (Pianist(x) -> Chef(x))\nTEXT: Some chefs enjoy music.\nFOL: exists x. (Chef(x) -> Enjoy(x, Music))\nTEXT: Miroslav Venhoda burned a book in 1946 called Method of Studying Gregorian Chant.\nFOL: exists x. (Venhoda(x) & Burn(x, Book, 1946, MethodOfStudyingGregorianChant))\nTEXT: No pianist specialized in machine learning.\nFOL: exists x. (Pianist(x) & -Specialized(x, MachineLearning))\n", "TEXT: Miroslav Venhoda was a Czech pianist who specialized in the study of hieroglyphics, machine learning, and badminton.\nFOL: CzechPianist(MiroslavVenhoda) & SpecializedIn(MiroslavVenhoda, StudyOfHieroglyphics) & MachineLearning(MiroslavVenhoda) & Badminton(MiroslavVenhoda)\nTEXT: Any pianist is a chef.\nFOL: exists x. Chef(x)\nTEXT: Some chefs enjoy music.\nFOL: exists x. Chef(x) & Enjoys(x, Music)\nTEXT: Miroslav Venhoda burned a book in 1946 called Method of Studying Gregorian Chant.\nFOL: Burned(MiroslavVenhoda, MethodOfStudyingGregorianChant, 1946)\nTEXT: No pianist specialized in machine learning.\nFOL: exists x. exists y. (CzechPianist(x) & (-(x=y)) & MachineLearning(x))\n", "TEXT: Miroslav Venhoda was a Czech pianist who specialized in the study of hieroglyphics, machine learning, and badminton.\nFOL: exists x. (Czech(x) & Pianist(x) & SpecializesIn(x, StudyOfHieroglyphics, MachineLearning, Badminton))\nTEXT: Any pianist is a chef.\nFOL: exists x. exists y. (Chef(y) & Pianist(x))\nTEXT: Some chefs enjoy music.\nFOL: exists x. (Chef(x) & Enjoys(x, Music))\nTEXT: Miroslav Venhoda burned a book in 1946 called Method of Studying Gregorian Chant.\nFOL: exists x. (Burn(x, MethodOfStudyingGregorianChant) & In(x, 1946))\nTEXT: No pianist specialized in machine learning.\nFOL: exists x. (-SpecializesIn(x, MachineLearning))\n", "TEXT: Miroslav Venhoda was a Czech pianist who specialized in the study of hieroglyphics, machine learning, and badminton.\nFOL: CzechPianist(MiroslavVenhoda) & SpecializedIn(MiroslavVenhoda, hieroglyphics) & SpecializedIn(MiroslavVenhoda, machinelearning) & SpecializedIn(MiroslavVenhoda, badminton)\nTEXT: Any pianist is a chef.\nFOL: exists x. (CzechPianist(x) -> Chef(x))\nTEXT: Some chefs enjoy music.\nFOL: exists x. (Chef(x) & Enjoys(x, Music))\nTEXT: Miroslav Venhoda burned a book in 1946 called Method of Studying Gregorian Chant.\nFOL: Burn(MiroslavVenhoda, 1946, MethodofStudyingGregorianChant)\nTEXT: No pianist specialized in machine learning.\nFOL: -SpecializedIn(x, machinelearning)\n", "TEXT: Miroslav Venhoda was a Czech pianist who specialized in the study of hieroglyphics, machine learning, and badminton.\nFOL: exists x. (Specialized(Venhoda, Hieroglyphics) & Specialized(Venhoda, MachineLearning) & Specialized(Venhoda, Badminton))\nTEXT: Any pianist is a chef.\nFOL: all x. (Pianist(x) -> Chef(x))\nTEXT: Some chefs enjoy music.\nFOL: exists x. (Chef(x) & Enjoy(x, Music))\nTEXT: Miroslav Venhoda burned a book in 1946 called Method of Studying Gregorian Chant.\nFOL: Burned(Venhoda, MethodOfStudyingGregorianChant, 1946)\nTEXT: No pianist specialized in machine learning.\nFOL: exists x. (Specialized(x, MachineLearning) -> -Pianist(x))\n", "TEXT: Miroslav Venhoda was a Czech pianist who specialized in the study of hieroglyphics, machine learning, and badminton.\nFOL: Pianist(MiroslavVenhoda) & SpecializedIn(MiroslavVenhoda, StudyOfHieroglyphics) & SpecializedIn(MiroslavVenhoda, MachineLearning) & SpecializedIn(MiroslavVenhoda, Badminton)\nTEXT: Any pianist is a chef.\nFOL: exists x. (Pianist(x) -> Chef(x))\nTEXT: Some chefs enjoy music.\nFOL: exists x. Chef(x) -> Enjoys(x, Music)\nTEXT: Miroslav Venhoda burned a book in 1946 called Method of Studying Gregorian Chant.\nFOL: Burned(MiroslavVenhoda, MethodofStudyingGregorianChant, 1946)\nTEXT: No pianist specialized in machine learning.\nFOL: -SpecializedIn(MiroslavVenhoda, MachineLearning)\n", "TEXT: Miroslav Venhoda was a Czech pianist who specialized in the study of hieroglyphics, machine learning, and badminton.\nFOL: Pianist(MiroslavVenhoda) & SpecializedIn(MiroslavVenhoda, StudyOfHieroglyphics) & SpecializedIn(MiroslavVenhoda, MachineLearning) & SpecializedIn(MiroslavVenhoda, Badminton)\nTEXT: Any pianist is a chef.\nFOL: all x. (Pianist(x) -> Chef(x))\nTEXT: Some chefs enjoy music.\nFOL: exists x. (Chef(x) & Enjoy(x, Music))\nTEXT: Miroslav Venhoda burned a book in 1946 called Method of Studying Gregorian Chant.\nFOL: Burned(MiroslavVenhoda, MethodOfStudyingGregorianChant, 1946)\nTEXT: No pianist specialized in machine learning.\nFOL: -SpecializedIn(MiroslavVenhoda, MachineLearning)\n", "TEXT: Miroslav Venhoda was a Czech pianist who specialized in the study of hieroglyphics, machine learning, and badminton.\nFOL: Pianist(MiroslavVenhoda) & SpecializedIn(MiroslavVenhoda, StudyOfHieroglyphics) & SpecializedIn(MiroslavVenhoda, MachineLearning) & SpecializedIn(MiroslavVenhoda, Badminton)\nTEXT: Any pianist is a chef.\nFOL: all x. Pianist(x) -> Chef(x)\nTEXT: Some chefs enjoy music.\nFOL: exists x. Chef(x) -> Enjoys(x, Music)\nTEXT: Miroslav Venhoda burned a book in 1946 called Method of Studying Gregorian Chant.\nFOL: (Burns(MiroslavVenhoda, MethodOfStudyingGregorianChant) & In(MethodOfStudyingGregorianChant, 1946))\nTEXT: No pianist specialized in machine learning.\nFOL: -SpecializedIn(MiroslavVenhoda, MachineLearning)\n", "TEXT: Miroslav Venhoda was a Czech pianist who specialized in the study of hieroglyphics, machine learning, and badminton.\nFOL: exists x. (CzechPianist(x) & SpecializedIn(x, Hieroglyphics) & SpecializedIn(x, MachineLearning) & SpecializedIn(x, Badminton))\nTEXT: Any pianist is a chef.\nFOL: exists x. (Pianist(x) -> Chef(x))\nTEXT: Some chefs enjoy music.\nFOL: exists x. (Chef(x) -> Enjoy(x, Music))\nTEXT: Miroslav Venhoda burned a book in 1946 called Method of Studying Gregorian Chant.\nFOL: exists x. (MiroslavVenhoda(x) & Burned(x, MethodOfStudyingGregorianChant, 1946))\nTEXT: No pianist specialized in machine learning.\nFOL: exists x. (exists y. (Pianist(y) & SpecializedIn(y, MachineLearning)) -> False)\n"], "answers": ["Uncertain", "Error", "Uncertain", "Error", "Uncertain", "Uncertain", "False", "False", "False", "Uncertain"], "reference": "False", "time_s": 155.15475392341614}
{"idx": 1, "prompt": "The following is a first-order logic (FOL) problem.\nThe problem is to determine whether the conclusion follows from the premises.\nThe premises are given in the form of a set of first-order logic sentences.\nThe conclusion is given in the form of a single first-order logic sentence.\nThe task is to translate each of the premises and conclusions into FOL expressions so that the expressions can be evaluated by a theorem solver like Prover9 to determine whether the conclusion follows from the premises.\nExpressions should adhere to the format of the Python NLTK package logic module. \n\n\n<PREMISES>\nAll biodegradable things are environment-friendly.\nAll woodware is biodegradable.\nAll paper is woodware.\nNothing is a good thing and also a bad thing.\nAll environment-friendly things are good.\nA worksheet is either paper or environment-friendly.\n</PREMISES>\n<CONCLUSION>\nA worksheet is not biodegradable.\n</CONCLUSION>\n<EVALUATE>\nTEXT: All biodegradable things are environment-friendly.\nFOL: all x. (Biodegradable(x) -> EnvironmentFriendly(x))\nTEXT: All woodware is biodegradable.\nFOL: all x. (Woodware(x) -> Biodegradable(x))\nTEXT: All paper is woodware.\nFOL: all x. (Paper(x) -> Woodware(x))\nTEXT: Nothing is a good thing and also a bad thing.\nFOL: -(exists x. (Good(x) & Bad(x)))\nTEXT: All environment-friendly things are good.\nFOL: all x. (EnvironmentFriendly(x) -> Good(x))\nTEXT: A worksheet is either paper or environment-friendly.\nFOL: ((Paper(Worksheet) & -EnvironmentFriendly(Worksheet)) | (-Paper(Worksheet) & EnvironmentFriendly(Worksheet)))\nTEXT: A worksheet is not biodegradable.\nFOL: -Dispensable(Worksheet)\n</EVALUATE>\n\n<PREMISES>\nA La Liga soccer team ranks higher than another La Liga soccer team if it receives more points.\nIf there are two La Liga soccer teams and neither has more points than the other, then the team which receives more points from the games between the two teams ranks higher.\nReal Madrid and Barcelona are both La Liga soccer teams.\nReal Madrid received more points than Barcelona.\nNeither Real Madrid nor Barcelona received more points from the games between them.\n</PREMISES>\n<CONCLUSION>\nReal Madrid ranks higher than Barcelona.\n</CONCLUSION>\n<EVALUATE>\nTEXT: A La Liga soccer team ranks higher than another La Liga soccer team if it receives more points.\nFOL: all x. all y. (LaLigaSoccerTeam(x) & LaLigaSoccerTeam(y) & MorePoints(x, y) -> RankHigherThan(x, y))\nTEXT: If there are two La Liga soccer teams and neither has more points than the other, then the team which receives more points from the games between the two teams ranks higher.\nFOL: all x. all y. (LaLigaSoccerTeam(x) & LaLigaSoccerTeam(y) & -MorePoints(x, y) & -MorePoints(y, x) & MorePointsInGameBetween(x, y) ->  RankHigherThan(x, y))\nTEXT: Real Madrid and Barcelona are both La Liga soccer teams.\nFOL: LaLigaSoccerTeam(RealMadrid) & LaLigaSoccerTeam(Barcelona)\nTEXT: Real Madrid received more points than Barcelona.\nFOL: MorePoints(RealMadrid, Barcelona)\nTEXT: Neither Real Madrid nor Barcelona received more points from the games between them.\nFOL: -MorePointsInGameBetween(RealMadrid, Barcelona) & -MorePointsInGameBetween(Barcelona, RealMadrid)\nTEXT: Real Madrid ranks higher than Barcelona.\nFOL: HigherRank(RealMadrid, Barcelona)\n</EVALUATE>\n\n<PREMISES>\nAll professional athletes spend most of their time on sports.\nAll Olympic gold medal winners are professional athletes.\nNo full-time scientists spend the majority of their time on sports.\nAll Nobel physics laureates are full-time scientists.\nAmy spends the most time on sports, or Amy is an Olympic gold medal winner.\nIf Amy is not a Nobel physics laureate, then Amy is not an Olympic gold medal winner.\n</PREMISES>\n<CONCLUSION>\nIf Amy is not an Olympic gold medal winner, then Amy is a Nobel physics laureate.\n</CONCLUSION>\n<EVALUATE>\nTEXT: All professional athletes spend most of their time on sports.\nFOL: all x. (ProfessionalAthlete(x) -> SpendOn(x, MostOfTheirTime, Sports))\nTEXT: All Olympic gold medal winners are professional athletes.\nFOL: all x. (OlympicGoldMedalWinner(x) -> ProfessionalAthlete(x))\nTEXT: No full-time scientists spend the majority of their time on sports.\nFOL: all x. (FullTimeScientist(x) -> -SpendOn(x, MostOfTheirTime, Sports))\nTEXT: All Nobel physics laureates are full-time scientists.\nFOL: all x. (NobelPhysicsLaureate(x) -> FullTimeScientist(x))\nTEXT: Amy spends the most time on sports, or Amy is an Olympic gold medal winner.\nFOL: SpendOn(Amy, MostOfTheirTime, Sports) | OlympicGoldMedalWinner(Amy)\nTEXT: If Amy is not a Nobel physics laureate, then Amy is not an Olympic gold medal winner.\nFOL: -NobelPhysicsLaureate(Amy) -> -OlympicGoldMedalWinner(Amy)\nTEXT: If Amy is not an Olympic gold medal winner, then Amy is a Nobel physics laureate.\nFOL: -OlympicGoldMedalWinner(Amy) -> NobelLaureate(Amy)\n</EVALUATE>\n\n<PREMISES>\nIf a person pays their taxes, then they contribute to the country.\nEveryone who works for a government department pays a tax on their salary.\nEveryone in the army is an employee of a government department.\nEveryone convicted of murder goes to prison.\nEveryone who has been to prison has a criminal record.\nJames was either once convicted of murder, or spent time in prison.\nJames either has a criminal record, or pays his taxes.\n</PREMISES>\n<CONCLUSION>\nJames does not contribute to the country.\n</CONCLUSION>\n<EVALUATE>\nTEXT: If a person pays their taxes, then they contribute to the country.\nFOL: all x. (Taxpayer(x) -> ContributeTo(x, Country))\nTEXT: Everyone who works for a government department pays a tax on their salary.\nFOL: all x. (WorkFor(x, GovernmentAgency) -> Taxpayer(x))\nTEXT: Everyone in the army is an employee of a government department.\nFOL: all x. (ServesIn(x, TheArmy) -> WorkFor(x, GovernmentAgency))\nTEXT: Everyone convicted of murder goes to prison.\nFOL: all x. (SentencedForMurder(x) -> Imprisoned(x))\nTEXT: Everyone who has been to prison has a criminal record.\nFOL: all x. (Imprisoned((x) -> Has(x, CriminalRecord))\nTEXT: James was either once convicted of murder, or spent time in prison.\nFOL: ((SentencedForMurder(James) & -Imprisoned(James)) | (-SentencedForMurder(James) & Imprisoned(James)))\nTEXT: James either has a criminal record, or pays his taxes.\nFOL: ((Has(James, CriminalRecord) & -Taxpayer(James)) | (-Has(James, CriminalRecord) & Taxpayer(James)))\nTEXT: James does not contribute to the country.\nFOL: ContributeToCountry(James)\n</EVALUATE>\n\n<PREMISES>\nNo songs are visuals.\nAll folk songs are songs.\nAll videos are visuals.\nAll movies are videos.\nAll sci-fi movies are movies.\nInception is a sci-fi movie.\nMac is neither a folk song nor a sci-fi movie.\n</PREMISES>\n<CONCLUSION>\nInception is a folk song.\n</CONCLUSION>\n<EVALUATE>\nTEXT: No songs are visuals.\nFOL: all x. (Song(x) -> -Visual(x))\nTEXT: All folk songs are songs.\nFOL: all x. (FolkSong(x) -> Song(x))\nTEXT: All videos are visuals.\nFOL: all x. (Video(x) -> Visual(x))\nTEXT: All movies are videos.\nFOL: all x. (Movie(x) -> Video(x))\nTEXT: All sci-fi movies are movies.\nFOL: all x. (ScifiMovie(x) -> Movie(x))\nTEXT: Inception is a sci-fi movie.\nFOL: ScifiMovie(Inception)\nTEXT: Mac is neither a folk song nor a sci-fi movie.\nFOL: -FolkSong(Mac) & -ScifiMovie(Mac)\nTEXT: Inception is a folk song.\nFOL: FolkSong(Inception)\n</EVALUATE>\n\n<PREMISES>\nEvery chef can cook.\nSome people who aren\u2019t chefs can cook.\nPeople who cook can make scrambled eggs and pasta.\nIf someone can make cookies and muffins, they are a baker.\nBakers who can also make scrambled eggs can make a good breakfast.\nLuke can make cookies, scrambled eggs, and muffins, but not pasta.\n</PREMISES>\n<CONCLUSION>\nLuke is a chef.\n</CONCLUSION>\n<EVALUATE>\nTEXT: Every chef can cook.\nFOL: all x. (Chef(x) -> Can(x, Cook))\nTEXT: Some people who aren\u2019t chefs can cook.\nFOL: exists x. (-Chef(x) & Can(x, Cook))\nTEXT: People who cook can make scrambled eggs and pasta.\nFOL: all x. (Can(x, Cook) -> (CanMake(x, ScrambledEggs) & CanMake(x, Pasta)))\nTEXT: If someone can make cookies and muffins, they are a baker.\nFOL: all x. (CanMake(x, Cookies) & CanMake(x, Muffins) -> Baker(x))\nTEXT: Bakers who can also make scrambled eggs can make a good breakfast.\nFOL: all x. ((Baker(x) & CanMake(x, ScrambledEggs)) -> CanMake(x, GoodBreakfast))\nTEXT: Luke can make cookies, scrambled eggs, and muffins, but not pasta.\nFOL: CanMake(Luke, Cookies) & (CanMake(Luke, ScrambledEggs) & CanMake(Luke, Muffins) & -CanMake(Luke, Pasta)\nTEXT: Luke is a chef.\nFOL: MakeGoodBreakfast(Luke)\n</EVALUATE>\n\n<PREMISES>\nETS develops various standardized tests primarily in the United States for K-12 and higher education.\nETS administers international tests, including the TOEFL, TOEIC, GRE, and subject tests.\nMany of the assessments ETS develops are associated with entry to the US tertiary and quaternary education institutions.\nETS also develops K-12 statewide assessments used for accountability testing in many states.\n</PREMISES>\n<CONCLUSION>\nETS doesn't administer tests internationally.\n</CONCLUSION>\n<EVALUATE>\nTEXT: ETS develops various standardized tests primarily in the United States for K-12 and higher education.\nFOL: exists x. exists y. (Develop(eTS, x) & Develop(eTS, y) & StandardizedTest(x) & StandardizedTest(y) & In(x, UnitedState) & In(y, UnitedState) & For(x, kOneTwoAndHigherEducation) & For(y, kOneTwoAndHigherEducation))\nTEXT: ETS administers international tests, including the TOEFL, TOEIC, GRE, and subject tests.\nFOL: exists x. (Administer(eTS, x) & InternationalTest(x) & (TOEFL(x) | TOEIC(x) | GRE(x) | SubjectTest(x)))\nTEXT: Many of the assessments ETS develops are associated with entry to the US tertiary and quaternary education institutions.\nFOL: exists x. (Develop(eTS, x) & AssociatedWith(x, EntryToUSEducationInstitution))\nTEXT: ETS also develops K-12 statewide assessments used for accountability testing in many states.\nFOL: exists x. (Develop(eTS, x) & StateWideAssesment(x) & UsedFor(x, AccountabilityTesting))\nTEXT: ETS doesn't administer tests internationally.\nFOL: exists x. (Develops(Ets, x) & For(x, k-OneTwoandhighereducation)) & exists x. (Develops(Ets, x) & AssociatedWith(x, Entrytouseducationinstitutions))\n</EVALUATE>\n\n<PREMISES>\nDaveed Diggs is an actor and film producer.\nDaveed Diggs played two roles in the musical Hamilton on Broadway.\nOne of the actors from Hamilton won the best actor award.\nThe actor playing Thomas Jefferson won the best actor award.\nDaveed Diggs played Thomas Jefferson.\nMusicals on Broadway are not films.\n</PREMISES>\n<CONCLUSION>\nDaveed Diggs won the best actor award.\n</CONCLUSION>\n<EVALUATE>\nTEXT: Daveed Diggs is an actor and film producer.\nFOL: Actor(DaveedDiggs) & FilmProducer(DaveedDiggs)\nTEXT: Daveed Diggs played two roles in the musical Hamilton on Broadway.\nFOL: exists x. exists y.(PlaysIn(DaveedDiggs, x, Hamilton) & (-(x=y)) & PlaysIn(DaveedDiggs, y, Hamilton)) & OnBroadway(Hamilton) & Musical(Hamilton)\nTEXT: One of the actors from Hamilton won the best actor award.\nFOL: exists x. exists y.(Actor(x) & PlaysIn(x, y, Hamilton) & Wins(x, BestActorAward))\nTEXT: The actor playing Thomas Jefferson won the best actor award.\nFOL: exists x. (Actor(x) & PlaysIn(x, ThomasJefferson, Hamilton) & Wins(x, BestActorAward))\nTEXT: Daveed Diggs played Thomas Jefferson.\nFOL: Plays(DaveedDiggs, ThomasJefferson)\nTEXT: Musicals on Broadway are not films.\nFOL: all x. ((Musical(x) & OnBroadway(x)) -> -Film(x))\nTEXT: Daveed Diggs won the best actor award.\nFOL: exists x. (BRICS(x) & Speaks(x, Hindi))\n</EVALUATE>\n\n<PREMISES>\nSome reptiles explode on people.\nStonefish is a reptile.\nStonefish explode when stepped on.\nIf a stonefish explodes on someone and they are not treated, it can cause death to them.\nTo treat stonefish explosions, remove heat to the affected area or use an antivenom.\n</PREMISES>\n<CONCLUSION>\nExplosions of some reptiles can cause death if not treated.\n</CONCLUSION>\n<EVALUATE>\n", "raw_generations": ["TEXT: Some reptiles explode on people.\nFOL: exists x. exists y. (Reptile(x) & Explodes(x, y) & Human(y))\nTEXT: Stonefish is a reptile.\nFOL: Reptile(Stonefish)\nTEXT: Stonefish explode when stepped on.\nFOL: exists x. (Stonefish(x) & ExplodesWhenSteppedOn(x))\nTEXT: If a stonefish explodes on someone and they are not treated, it can cause death to them.\nFOL: exists x. exists y. (Stonefish(x) & Explodes(x, y) & -Treatment(y)) -> (Causes(x, y) & Death(y))\nTEXT: To treat stonefish explosions, remove heat to the affected area or use an antivenom.\nFOL: Treatment(RemoveHeatToAffectedArea) | Antivenom(x)\nTEXT: Explosions of some reptiles can cause death if not treated.\nFOL: exists x. exists y. (Reptile(x) & Explodes(x, y) & -Treatment(y)) -> (Causes(x, y) & Death(y))\n", "TEXT: Some reptiles explode on people.\nFOL: exists x. exists y. (Explodes(x, y) & Reptile(x) & Person(y))\nTEXT: Stonefish is a reptile.\nFOL: Reptile(Stonefish)\nTEXT: Stonefish explode when stepped on.\nFOL: Stonefish(Stonefish) & ExplodesWhen(Stonefish, SteppedOn)\nTEXT: If a stonefish explodes on someone and they are not treated, it can cause death to them.\nFOL: exists x. (Explodes(Stonefish, x) & -Treated(x)) & (Treated(x) -> CausesDeath(x))\nTEXT: To treat stonefish explosions, remove heat to the affected area or use an antivenom.\nFOL: Treat(RemoveHeatToAffectedAreaOrUseAntivenom)\nTEXT: Explosions of some reptiles can cause death if not treated.\nFOL: exists x. exists y. (Explodes(x, y) & Reptile(x) & -Treated(y)) & (Treated(y) -> CausesDeath(y))\n", "TEXT: Some reptiles explode on people.\nFOL: exists x. exists y. (Explode(x) & On(x, y) -> Person(y))\nTEXT: Stonefish is a reptile.\nFOL: Reptile(Stonefish)\nTEXT: Stonefish explode when stepped on.\nFOL: exists x. (Explode(x) & ExplodeWhen(x, SteppedOn))\nTEXT: If a stonefish explodes on someone and they are not treated, it can cause death to them.\nFOL: exists x. exists y. (Explode(x) & On(x, y) & -Treated(x, y) -> CausesDeathTo(x, y))\nTEXT: To treat stonefish explosions, remove heat to the affected area or use an antivenom.\nFOL: exists x. (Treats(x, RemoveHeat) & exists y. (Affected(y, x) -> RemoveHeat(y)))\nTEXT: Explosions of some reptiles can cause death if not treated.\nFOL: exists x. (Explode(x) & -Treated(x, y) & CausesDeathTo(x, y))\n", "TEXT: Some reptiles explode on people.\nFOL: exists x. exists y. (Reptile(x) & Explodes(x, y) & On(y, Person))\nTEXT: Stonefish is a reptile.\nFOL: Reptile(Stonefish)\nTEXT: Stonefish explode when stepped on.\nFOL: Stonefish(Stonefish) & Explodes(Stonefish, SteppedOn)\nTEXT: If a stonefish explodes on someone and they are not treated, it can cause death to them.\nFOL: exists x. exists y. (Reptile(x) & Explodes(x, y) & On(y, Person) & -Treated(y)) -> Causes(x, Death)\nTEXT: To treat stonefish explosions, remove heat to the affected area or use an antivenom.\nFOL: exists x. exists y. (Reptile(x) & Explodes(x, y) & Heated(y) & Antivenom(y))\nTEXT: Explosions of some reptiles can cause death if not treated.\nFOL: exists x. exists y. (Reptile(x) & Explodes(x, y) & -Treated(y)) -> Causes(x, Death)\n", "TEXT: Some reptiles explode on people.\nFOL: exists x. (Reptile(x) & Explode(x) & On(x, person))\nTEXT: Stonefish is a reptile.\nFOL: Reptile(Stonefish)\nTEXT: Stonefish explode when stepped on.\nFOL: exists x. (Reptile(x) & Explode(x) & When(x, SteppedOn))\nTEXT: If a stonefish explodes on someone and they are not treated, it can cause death to them.\nFOL: exists x. (Reptile(x) & Explode(x) & On(x, person) & -Treat(x, y) & CausesDeath(person))\nTEXT: To treat stonefish explosions, remove heat to the affected area or use an antivenom.\nFOL: exists x. (RemoveHeat(x) & AffectedArea(x, y) & Antivenom(x))\nTEXT: Explosions of some reptiles can cause death if not treated.\nFOL: exists x. (Explode(x) & CausesDeath(x) & -Treat(x, y))\n", "TEXT: Some reptiles explode on people.\nFOL: exists x. (Reptile(x) & ExplodeOn(x, y))\nTEXT: Stonefish is a reptile.\nFOL: Reptile(Stonefish)\nTEXT: Stonefish explode when stepped on.\nFOL: ExplodeOn(Stonefish, StepOn)\nTEXT: If a stonefish explodes on someone and they are not treated, it can cause death to them.\nFOL: exists x. exists y. exists z. (ExplodeOn(Stonefish, x) & Treat(y, z) & -Treat(StonefishExplosion, z) -> CausesDeathTo(StonefishExplosion, y))\nTEXT: To treat stonefish explosions, remove heat to the affected area or use an antivenom.\nFOL: exists x. exists y. (Treat(x, y) & TreatStonefishExplosions(x) -> (RemoveHeat(x, y) | Antivenom(x)))\nTEXT: Explosions of some reptiles can cause death if not treated.\nFOL: exists x. exists y. (ExplodeOn(x, y) & -Treat(x, y))\n", "TEXT: Some reptiles explode on people.\nFOL: exists x. (Reptile(x) & ExplodesOn(x, Person))\nTEXT: Stonefish is a reptile.\nFOL: Reptile(Stonefish)\nTEXT: Stonefish explode when stepped on.\nFOL: exists x. (Stonefish(x) & ExplodesWhenSteppedOn(x))\nTEXT: If a stonefish explodes on someone and they are not treated, it can cause death to them.\nFOL: exists x. (exists y. ((ExplodesOn(x, y) & NotTreated(x, y)) -> CausesDeathTo(x, y)))\nTEXT: To treat stonefish explosions, remove heat to the affected area or use an antivenom.\nFOL: exists x. (Treat(x, Heat) & AffectedArea(x)) | (Treat(x, Antivenom) & AffectedArea(x))\nTEXT: Explosions of some reptiles can cause death if not treated.\nFOL: exists x. ((Reptile(x) & CausesDeath(x)) -> NotTreated(x, y))\n", "TEXT: Some reptiles explode on people.\nFOL: exists x. exists y.(Reptile(x) & ExplodeOn(x, y))\nTEXT: Stonefish is a reptile.\nFOL: Reptile(Stonefish)\nTEXT: Stonefish explode when stepped on.\nFOL: exists x. (Reptile(x) & ExplodeWhenSteppedOn(x))\nTEXT: If a stonefish explodes on someone and they are not treated, it can cause death to them.\nFOL: exists x. exists y. (ExplodeOn(Stonefish, y) & -Treated(y) -> Death(y))\nTEXT: To treat stonefish explosions, remove heat to the affected area or use an antivenom.\nFOL: ToTreat(StonefishExplosions, RemoveHeatToTheAffectedArea) & ToTreat(StonefishExplosions, UseAntivenom)\nTEXT: Explosions of some reptiles can cause death if not treated.\nFOL: exists x. exists y. (Reptile(x) & ExplodeOn(x, y) & -Treated(y) -> Death(y))\n", "TEXT: Some reptiles explode on people.\nFOL: exists x. (Explode(x) & On(x, person))\nTEXT: Stonefish is a reptile.\nFOL: Reptile(Stonefish)\nTEXT: Stonefish explode when stepped on.\nFOL: exists x. (Explode(x) & ExplodeWhenSteppedOn(x))\nTEXT: If a stonefish explodes on someone and they are not treated, it can cause death to them.\nFOL: exists x. (Explode(Stonefish) & On(Stonefish, person) & -Treated(Stonefish)) -> CausesDeath(Stonefish, person)\nTEXT: To treat stonefish explosions, remove heat to the affected area or use an antivenom.\nFOL: exists x. (RemoveHeatTo(x) & AffectedArea(x, Stonefish)) | exists x. (UseAntivenom(x) & AffectedArea(x, Stonefish))\nTEXT: Explosions of some reptiles can cause death if not treated.\nFOL: exists x. ((Reptile(x) & Explode(x)) -> CausesDeath(x, person))\n", "TEXT: Some reptiles explode on people.\nFOL: exists x. exists y. (Explode(x) & On(x, y) -> Person(y))\nTEXT: Stonefish is a reptile.\nFOL: Reptile(Stonefish)\nTEXT: Stonefish explode when stepped on.\nFOL: ExplodeWhen(Stonefish, StepOn)\nTEXT: If a stonefish explodes on someone and they are not treated, it can cause death to them.\nFOL: exists x. exists y. (Explode(x) & On(x, y) & -Treated(y) -> CausesDeath(x, y))\nTEXT: To treat stonefish explosions, remove heat to the affected area or use an antivenom.\nFOL: exists x. (RemoveHeat(x) & AffectedArea(x)) | (UseAntivenom(x) & AffectedArea(x))\nTEXT: Explosions of some reptiles can cause death if not treated.\nFOL: exists x. exists y. (Explode(x) & -Treated(y) & CausesDeath(x, y))\n"], "answers": ["Error", "Error", "Error", "Error", "Uncertain", "Uncertain", "Error", "True", "Uncertain", "Uncertain"], "reference": "True", "time_s": 262.8655688762665}
{"idx": 2, "prompt": "The following is a first-order logic (FOL) problem.\nThe problem is to determine whether the conclusion follows from the premises.\nThe premises are given in the form of a set of first-order logic sentences.\nThe conclusion is given in the form of a single first-order logic sentence.\nThe task is to translate each of the premises and conclusions into FOL expressions so that the expressions can be evaluated by a theorem solver like Prover9 to determine whether the conclusion follows from the premises.\nExpressions should adhere to the format of the Python NLTK package logic module. \n\n\n<PREMISES>\nAll biodegradable things are environment-friendly.\nAll woodware is biodegradable.\nAll paper is woodware.\nNothing is a good thing and also a bad thing.\nAll environment-friendly things are good.\nA worksheet is either paper or environment-friendly.\n</PREMISES>\n<CONCLUSION>\nA worksheet is not biodegradable.\n</CONCLUSION>\n<EVALUATE>\nTEXT: All biodegradable things are environment-friendly.\nFOL: all x. (Biodegradable(x) -> EnvironmentFriendly(x))\nTEXT: All woodware is biodegradable.\nFOL: all x. (Woodware(x) -> Biodegradable(x))\nTEXT: All paper is woodware.\nFOL: all x. (Paper(x) -> Woodware(x))\nTEXT: Nothing is a good thing and also a bad thing.\nFOL: -(exists x. (Good(x) & Bad(x)))\nTEXT: All environment-friendly things are good.\nFOL: all x. (EnvironmentFriendly(x) -> Good(x))\nTEXT: A worksheet is either paper or environment-friendly.\nFOL: ((Paper(Worksheet) & -EnvironmentFriendly(Worksheet)) | (-Paper(Worksheet) & EnvironmentFriendly(Worksheet)))\nTEXT: A worksheet is not biodegradable.\nFOL: -Dispensable(Worksheet)\n</EVALUATE>\n\n<PREMISES>\nA La Liga soccer team ranks higher than another La Liga soccer team if it receives more points.\nIf there are two La Liga soccer teams and neither has more points than the other, then the team which receives more points from the games between the two teams ranks higher.\nReal Madrid and Barcelona are both La Liga soccer teams.\nReal Madrid received more points than Barcelona.\nNeither Real Madrid nor Barcelona received more points from the games between them.\n</PREMISES>\n<CONCLUSION>\nReal Madrid ranks higher than Barcelona.\n</CONCLUSION>\n<EVALUATE>\nTEXT: A La Liga soccer team ranks higher than another La Liga soccer team if it receives more points.\nFOL: all x. all y. (LaLigaSoccerTeam(x) & LaLigaSoccerTeam(y) & MorePoints(x, y) -> RankHigherThan(x, y))\nTEXT: If there are two La Liga soccer teams and neither has more points than the other, then the team which receives more points from the games between the two teams ranks higher.\nFOL: all x. all y. (LaLigaSoccerTeam(x) & LaLigaSoccerTeam(y) & -MorePoints(x, y) & -MorePoints(y, x) & MorePointsInGameBetween(x, y) ->  RankHigherThan(x, y))\nTEXT: Real Madrid and Barcelona are both La Liga soccer teams.\nFOL: LaLigaSoccerTeam(RealMadrid) & LaLigaSoccerTeam(Barcelona)\nTEXT: Real Madrid received more points than Barcelona.\nFOL: MorePoints(RealMadrid, Barcelona)\nTEXT: Neither Real Madrid nor Barcelona received more points from the games between them.\nFOL: -MorePointsInGameBetween(RealMadrid, Barcelona) & -MorePointsInGameBetween(Barcelona, RealMadrid)\nTEXT: Real Madrid ranks higher than Barcelona.\nFOL: HigherRank(RealMadrid, Barcelona)\n</EVALUATE>\n\n<PREMISES>\nAll professional athletes spend most of their time on sports.\nAll Olympic gold medal winners are professional athletes.\nNo full-time scientists spend the majority of their time on sports.\nAll Nobel physics laureates are full-time scientists.\nAmy spends the most time on sports, or Amy is an Olympic gold medal winner.\nIf Amy is not a Nobel physics laureate, then Amy is not an Olympic gold medal winner.\n</PREMISES>\n<CONCLUSION>\nIf Amy is not an Olympic gold medal winner, then Amy is a Nobel physics laureate.\n</CONCLUSION>\n<EVALUATE>\nTEXT: All professional athletes spend most of their time on sports.\nFOL: all x. (ProfessionalAthlete(x) -> SpendOn(x, MostOfTheirTime, Sports))\nTEXT: All Olympic gold medal winners are professional athletes.\nFOL: all x. (OlympicGoldMedalWinner(x) -> ProfessionalAthlete(x))\nTEXT: No full-time scientists spend the majority of their time on sports.\nFOL: all x. (FullTimeScientist(x) -> -SpendOn(x, MostOfTheirTime, Sports))\nTEXT: All Nobel physics laureates are full-time scientists.\nFOL: all x. (NobelPhysicsLaureate(x) -> FullTimeScientist(x))\nTEXT: Amy spends the most time on sports, or Amy is an Olympic gold medal winner.\nFOL: SpendOn(Amy, MostOfTheirTime, Sports) | OlympicGoldMedalWinner(Amy)\nTEXT: If Amy is not a Nobel physics laureate, then Amy is not an Olympic gold medal winner.\nFOL: -NobelPhysicsLaureate(Amy) -> -OlympicGoldMedalWinner(Amy)\nTEXT: If Amy is not an Olympic gold medal winner, then Amy is a Nobel physics laureate.\nFOL: -OlympicGoldMedalWinner(Amy) -> NobelLaureate(Amy)\n</EVALUATE>\n\n<PREMISES>\nIf a person pays their taxes, then they contribute to the country.\nEveryone who works for a government department pays a tax on their salary.\nEveryone in the army is an employee of a government department.\nEveryone convicted of murder goes to prison.\nEveryone who has been to prison has a criminal record.\nJames was either once convicted of murder, or spent time in prison.\nJames either has a criminal record, or pays his taxes.\n</PREMISES>\n<CONCLUSION>\nJames does not contribute to the country.\n</CONCLUSION>\n<EVALUATE>\nTEXT: If a person pays their taxes, then they contribute to the country.\nFOL: all x. (Taxpayer(x) -> ContributeTo(x, Country))\nTEXT: Everyone who works for a government department pays a tax on their salary.\nFOL: all x. (WorkFor(x, GovernmentAgency) -> Taxpayer(x))\nTEXT: Everyone in the army is an employee of a government department.\nFOL: all x. (ServesIn(x, TheArmy) -> WorkFor(x, GovernmentAgency))\nTEXT: Everyone convicted of murder goes to prison.\nFOL: all x. (SentencedForMurder(x) -> Imprisoned(x))\nTEXT: Everyone who has been to prison has a criminal record.\nFOL: all x. (Imprisoned((x) -> Has(x, CriminalRecord))\nTEXT: James was either once convicted of murder, or spent time in prison.\nFOL: ((SentencedForMurder(James) & -Imprisoned(James)) | (-SentencedForMurder(James) & Imprisoned(James)))\nTEXT: James either has a criminal record, or pays his taxes.\nFOL: ((Has(James, CriminalRecord) & -Taxpayer(James)) | (-Has(James, CriminalRecord) & Taxpayer(James)))\nTEXT: James does not contribute to the country.\nFOL: ContributeToCountry(James)\n</EVALUATE>\n\n<PREMISES>\nNo songs are visuals.\nAll folk songs are songs.\nAll videos are visuals.\nAll movies are videos.\nAll sci-fi movies are movies.\nInception is a sci-fi movie.\nMac is neither a folk song nor a sci-fi movie.\n</PREMISES>\n<CONCLUSION>\nInception is a folk song.\n</CONCLUSION>\n<EVALUATE>\nTEXT: No songs are visuals.\nFOL: all x. (Song(x) -> -Visual(x))\nTEXT: All folk songs are songs.\nFOL: all x. (FolkSong(x) -> Song(x))\nTEXT: All videos are visuals.\nFOL: all x. (Video(x) -> Visual(x))\nTEXT: All movies are videos.\nFOL: all x. (Movie(x) -> Video(x))\nTEXT: All sci-fi movies are movies.\nFOL: all x. (ScifiMovie(x) -> Movie(x))\nTEXT: Inception is a sci-fi movie.\nFOL: ScifiMovie(Inception)\nTEXT: Mac is neither a folk song nor a sci-fi movie.\nFOL: -FolkSong(Mac) & -ScifiMovie(Mac)\nTEXT: Inception is a folk song.\nFOL: FolkSong(Inception)\n</EVALUATE>\n\n<PREMISES>\nEvery chef can cook.\nSome people who aren\u2019t chefs can cook.\nPeople who cook can make scrambled eggs and pasta.\nIf someone can make cookies and muffins, they are a baker.\nBakers who can also make scrambled eggs can make a good breakfast.\nLuke can make cookies, scrambled eggs, and muffins, but not pasta.\n</PREMISES>\n<CONCLUSION>\nLuke is a chef.\n</CONCLUSION>\n<EVALUATE>\nTEXT: Every chef can cook.\nFOL: all x. (Chef(x) -> Can(x, Cook))\nTEXT: Some people who aren\u2019t chefs can cook.\nFOL: exists x. (-Chef(x) & Can(x, Cook))\nTEXT: People who cook can make scrambled eggs and pasta.\nFOL: all x. (Can(x, Cook) -> (CanMake(x, ScrambledEggs) & CanMake(x, Pasta)))\nTEXT: If someone can make cookies and muffins, they are a baker.\nFOL: all x. (CanMake(x, Cookies) & CanMake(x, Muffins) -> Baker(x))\nTEXT: Bakers who can also make scrambled eggs can make a good breakfast.\nFOL: all x. ((Baker(x) & CanMake(x, ScrambledEggs)) -> CanMake(x, GoodBreakfast))\nTEXT: Luke can make cookies, scrambled eggs, and muffins, but not pasta.\nFOL: CanMake(Luke, Cookies) & (CanMake(Luke, ScrambledEggs) & CanMake(Luke, Muffins) & -CanMake(Luke, Pasta)\nTEXT: Luke is a chef.\nFOL: MakeGoodBreakfast(Luke)\n</EVALUATE>\n\n<PREMISES>\nETS develops various standardized tests primarily in the United States for K-12 and higher education.\nETS administers international tests, including the TOEFL, TOEIC, GRE, and subject tests.\nMany of the assessments ETS develops are associated with entry to the US tertiary and quaternary education institutions.\nETS also develops K-12 statewide assessments used for accountability testing in many states.\n</PREMISES>\n<CONCLUSION>\nETS doesn't administer tests internationally.\n</CONCLUSION>\n<EVALUATE>\nTEXT: ETS develops various standardized tests primarily in the United States for K-12 and higher education.\nFOL: exists x. exists y. (Develop(eTS, x) & Develop(eTS, y) & StandardizedTest(x) & StandardizedTest(y) & In(x, UnitedState) & In(y, UnitedState) & For(x, kOneTwoAndHigherEducation) & For(y, kOneTwoAndHigherEducation))\nTEXT: ETS administers international tests, including the TOEFL, TOEIC, GRE, and subject tests.\nFOL: exists x. (Administer(eTS, x) & InternationalTest(x) & (TOEFL(x) | TOEIC(x) | GRE(x) | SubjectTest(x)))\nTEXT: Many of the assessments ETS develops are associated with entry to the US tertiary and quaternary education institutions.\nFOL: exists x. (Develop(eTS, x) & AssociatedWith(x, EntryToUSEducationInstitution))\nTEXT: ETS also develops K-12 statewide assessments used for accountability testing in many states.\nFOL: exists x. (Develop(eTS, x) & StateWideAssesment(x) & UsedFor(x, AccountabilityTesting))\nTEXT: ETS doesn't administer tests internationally.\nFOL: exists x. (Develops(Ets, x) & For(x, k-OneTwoandhighereducation)) & exists x. (Develops(Ets, x) & AssociatedWith(x, Entrytouseducationinstitutions))\n</EVALUATE>\n\n<PREMISES>\nDaveed Diggs is an actor and film producer.\nDaveed Diggs played two roles in the musical Hamilton on Broadway.\nOne of the actors from Hamilton won the best actor award.\nThe actor playing Thomas Jefferson won the best actor award.\nDaveed Diggs played Thomas Jefferson.\nMusicals on Broadway are not films.\n</PREMISES>\n<CONCLUSION>\nDaveed Diggs won the best actor award.\n</CONCLUSION>\n<EVALUATE>\nTEXT: Daveed Diggs is an actor and film producer.\nFOL: Actor(DaveedDiggs) & FilmProducer(DaveedDiggs)\nTEXT: Daveed Diggs played two roles in the musical Hamilton on Broadway.\nFOL: exists x. exists y.(PlaysIn(DaveedDiggs, x, Hamilton) & (-(x=y)) & PlaysIn(DaveedDiggs, y, Hamilton)) & OnBroadway(Hamilton) & Musical(Hamilton)\nTEXT: One of the actors from Hamilton won the best actor award.\nFOL: exists x. exists y.(Actor(x) & PlaysIn(x, y, Hamilton) & Wins(x, BestActorAward))\nTEXT: The actor playing Thomas Jefferson won the best actor award.\nFOL: exists x. (Actor(x) & PlaysIn(x, ThomasJefferson, Hamilton) & Wins(x, BestActorAward))\nTEXT: Daveed Diggs played Thomas Jefferson.\nFOL: Plays(DaveedDiggs, ThomasJefferson)\nTEXT: Musicals on Broadway are not films.\nFOL: all x. ((Musical(x) & OnBroadway(x)) -> -Film(x))\nTEXT: Daveed Diggs won the best actor award.\nFOL: exists x. (BRICS(x) & Speaks(x, Hindi))\n</EVALUATE>\n\n<PREMISES>\nAll bears in deserts are not animals.\nSome bears are in deserts.\n</PREMISES>\n<CONCLUSION>\nNot all bears are animals.\n</CONCLUSION>\n<EVALUATE>\n", "raw_generations": ["TEXT: All bears in deserts are not animals.\nFOL: all x. (Bear(x) & InDesert(x) -> -Animal(x))\nTEXT: Some bears are in deserts.\nFOL: exists x. (Bear(x) & InDesert(x))\nTEXT: Not all bears are animals.\nFOL: -exists x. (Bear(x) & Animal(x))\n", "TEXT: All bears in deserts are not animals.\nFOL: all x. (Bear(x) & InDesert(x) -> -Animal(x))\nTEXT: Some bears are in deserts.\nFOL: exists x. (Bear(x) & InDesert(x))\nTEXT: Not all bears are animals.\nFOL: -All(x. (Bear(x) & Animal(x)))\n", "TEXT: All bears in deserts are not animals.\nFOL: all x. (Bear(x) & InDesert(x) -> -Animal(x))\nTEXT: Some bears are in deserts.\nFOL: exists x. Bear(x) & InDesert(x)\nTEXT: Not all bears are animals.\nFOL: -all x. (Bear(x) -> Animal(x))\n", "TEXT: All bears in deserts are not animals.\nFOL: all x. (Bear(x) & In(x, Desert) -> -Animal(x))\nTEXT: Some bears are in deserts.\nFOL: exists x. (Bear(x) & In(x, Desert))\nTEXT: Not all bears are animals.\nFOL: exists x. (Bear(x) -> -Animal(x))\n", "TEXT: All bears in deserts are not animals.\nFOL: all x. all y. (Bear(x) & In(x, Desert) & Animal(y) -> -Bear(y))\nTEXT: Some bears are in deserts.\nFOL: exists x. exists y. (Bear(x) & In(x, Desert))\nTEXT: Not all bears are animals.\nFOL: exists x. (Bear(x) & Animal(x) & -Bear(x))\n", "TEXT: All bears in deserts are not animals.\nFOL: exists x. exists y. (In(x, Desert) & Bear(x) & Animal(y) -> (x=y))\nTEXT: Some bears are in deserts.\nFOL: exists x. exists y. (In(x, Desert) & Bear(x) & Animal(y) -> (x=y))\nTEXT: Not all bears are animals.\nFOL: -All(x. (In(x, Desert) & Bear(x) -> Animal(x))\n", "TEXT: All bears in deserts are not animals.\nFOL: all x. (Bear(x) & In(x, Desert) -> -Animal(x))\nTEXT: Some bears are in deserts.\nFOL: exists x. (Bear(x) & In(x, Desert))\nTEXT: Not all bears are animals.\nFOL: -exists x. (Bear(x) & Animal(x))\n", "TEXT: All bears in deserts are not animals.\nFOL: all x. (InDesert(x, Bear) -> -Animal(x))\nTEXT: Some bears are in deserts.\nFOL: exists x. (Bear(x) & InDesert(x, Bear))\nTEXT: Not all bears are animals.\nFOL: -All(x. (InDesert(x, Bear) -> Animal(x)))\n", "TEXT: All bears in deserts are not animals.\nFOL: all x. all y. (Bear(x) & InDesert(y) -> -Animal(x))\nTEXT: Some bears are in deserts.\nFOL: exists x. InDesert(x)\nTEXT: Not all bears are animals.\nFOL: -Animal(x)\n", "TEXT: All bears in deserts are not animals.\nFOL: all x. exists y. (Bear(x) & In(x, Desert) & -Animal(y))\nTEXT: Some bears are in deserts.\nFOL: exists x. (Bear(x) & In(x, Desert))\nTEXT: Not all bears are animals.\nFOL: -Bear(x)\n"], "answers": ["Uncertain", "Error", "True", "True", "False", "Error", "Uncertain", "Error", "Uncertain", "False"], "reference": "True", "time_s": 39.55798006057739}
{"idx": 3, "prompt": "The following is a first-order logic (FOL) problem.\nThe problem is to determine whether the conclusion follows from the premises.\nThe premises are given in the form of a set of first-order logic sentences.\nThe conclusion is given in the form of a single first-order logic sentence.\nThe task is to translate each of the premises and conclusions into FOL expressions so that the expressions can be evaluated by a theorem solver like Prover9 to determine whether the conclusion follows from the premises.\nExpressions should adhere to the format of the Python NLTK package logic module. \n\n\n<PREMISES>\nAll biodegradable things are environment-friendly.\nAll woodware is biodegradable.\nAll paper is woodware.\nNothing is a good thing and also a bad thing.\nAll environment-friendly things are good.\nA worksheet is either paper or environment-friendly.\n</PREMISES>\n<CONCLUSION>\nA worksheet is not biodegradable.\n</CONCLUSION>\n<EVALUATE>\nTEXT: All biodegradable things are environment-friendly.\nFOL: all x. (Biodegradable(x) -> EnvironmentFriendly(x))\nTEXT: All woodware is biodegradable.\nFOL: all x. (Woodware(x) -> Biodegradable(x))\nTEXT: All paper is woodware.\nFOL: all x. (Paper(x) -> Woodware(x))\nTEXT: Nothing is a good thing and also a bad thing.\nFOL: -(exists x. (Good(x) & Bad(x)))\nTEXT: All environment-friendly things are good.\nFOL: all x. (EnvironmentFriendly(x) -> Good(x))\nTEXT: A worksheet is either paper or environment-friendly.\nFOL: ((Paper(Worksheet) & -EnvironmentFriendly(Worksheet)) | (-Paper(Worksheet) & EnvironmentFriendly(Worksheet)))\nTEXT: A worksheet is not biodegradable.\nFOL: -Dispensable(Worksheet)\n</EVALUATE>\n\n<PREMISES>\nA La Liga soccer team ranks higher than another La Liga soccer team if it receives more points.\nIf there are two La Liga soccer teams and neither has more points than the other, then the team which receives more points from the games between the two teams ranks higher.\nReal Madrid and Barcelona are both La Liga soccer teams.\nReal Madrid received more points than Barcelona.\nNeither Real Madrid nor Barcelona received more points from the games between them.\n</PREMISES>\n<CONCLUSION>\nReal Madrid ranks higher than Barcelona.\n</CONCLUSION>\n<EVALUATE>\nTEXT: A La Liga soccer team ranks higher than another La Liga soccer team if it receives more points.\nFOL: all x. all y. (LaLigaSoccerTeam(x) & LaLigaSoccerTeam(y) & MorePoints(x, y) -> RankHigherThan(x, y))\nTEXT: If there are two La Liga soccer teams and neither has more points than the other, then the team which receives more points from the games between the two teams ranks higher.\nFOL: all x. all y. (LaLigaSoccerTeam(x) & LaLigaSoccerTeam(y) & -MorePoints(x, y) & -MorePoints(y, x) & MorePointsInGameBetween(x, y) ->  RankHigherThan(x, y))\nTEXT: Real Madrid and Barcelona are both La Liga soccer teams.\nFOL: LaLigaSoccerTeam(RealMadrid) & LaLigaSoccerTeam(Barcelona)\nTEXT: Real Madrid received more points than Barcelona.\nFOL: MorePoints(RealMadrid, Barcelona)\nTEXT: Neither Real Madrid nor Barcelona received more points from the games between them.\nFOL: -MorePointsInGameBetween(RealMadrid, Barcelona) & -MorePointsInGameBetween(Barcelona, RealMadrid)\nTEXT: Real Madrid ranks higher than Barcelona.\nFOL: HigherRank(RealMadrid, Barcelona)\n</EVALUATE>\n\n<PREMISES>\nAll professional athletes spend most of their time on sports.\nAll Olympic gold medal winners are professional athletes.\nNo full-time scientists spend the majority of their time on sports.\nAll Nobel physics laureates are full-time scientists.\nAmy spends the most time on sports, or Amy is an Olympic gold medal winner.\nIf Amy is not a Nobel physics laureate, then Amy is not an Olympic gold medal winner.\n</PREMISES>\n<CONCLUSION>\nIf Amy is not an Olympic gold medal winner, then Amy is a Nobel physics laureate.\n</CONCLUSION>\n<EVALUATE>\nTEXT: All professional athletes spend most of their time on sports.\nFOL: all x. (ProfessionalAthlete(x) -> SpendOn(x, MostOfTheirTime, Sports))\nTEXT: All Olympic gold medal winners are professional athletes.\nFOL: all x. (OlympicGoldMedalWinner(x) -> ProfessionalAthlete(x))\nTEXT: No full-time scientists spend the majority of their time on sports.\nFOL: all x. (FullTimeScientist(x) -> -SpendOn(x, MostOfTheirTime, Sports))\nTEXT: All Nobel physics laureates are full-time scientists.\nFOL: all x. (NobelPhysicsLaureate(x) -> FullTimeScientist(x))\nTEXT: Amy spends the most time on sports, or Amy is an Olympic gold medal winner.\nFOL: SpendOn(Amy, MostOfTheirTime, Sports) | OlympicGoldMedalWinner(Amy)\nTEXT: If Amy is not a Nobel physics laureate, then Amy is not an Olympic gold medal winner.\nFOL: -NobelPhysicsLaureate(Amy) -> -OlympicGoldMedalWinner(Amy)\nTEXT: If Amy is not an Olympic gold medal winner, then Amy is a Nobel physics laureate.\nFOL: -OlympicGoldMedalWinner(Amy) -> NobelLaureate(Amy)\n</EVALUATE>\n\n<PREMISES>\nIf a person pays their taxes, then they contribute to the country.\nEveryone who works for a government department pays a tax on their salary.\nEveryone in the army is an employee of a government department.\nEveryone convicted of murder goes to prison.\nEveryone who has been to prison has a criminal record.\nJames was either once convicted of murder, or spent time in prison.\nJames either has a criminal record, or pays his taxes.\n</PREMISES>\n<CONCLUSION>\nJames does not contribute to the country.\n</CONCLUSION>\n<EVALUATE>\nTEXT: If a person pays their taxes, then they contribute to the country.\nFOL: all x. (Taxpayer(x) -> ContributeTo(x, Country))\nTEXT: Everyone who works for a government department pays a tax on their salary.\nFOL: all x. (WorkFor(x, GovernmentAgency) -> Taxpayer(x))\nTEXT: Everyone in the army is an employee of a government department.\nFOL: all x. (ServesIn(x, TheArmy) -> WorkFor(x, GovernmentAgency))\nTEXT: Everyone convicted of murder goes to prison.\nFOL: all x. (SentencedForMurder(x) -> Imprisoned(x))\nTEXT: Everyone who has been to prison has a criminal record.\nFOL: all x. (Imprisoned((x) -> Has(x, CriminalRecord))\nTEXT: James was either once convicted of murder, or spent time in prison.\nFOL: ((SentencedForMurder(James) & -Imprisoned(James)) | (-SentencedForMurder(James) & Imprisoned(James)))\nTEXT: James either has a criminal record, or pays his taxes.\nFOL: ((Has(James, CriminalRecord) & -Taxpayer(James)) | (-Has(James, CriminalRecord) & Taxpayer(James)))\nTEXT: James does not contribute to the country.\nFOL: ContributeToCountry(James)\n</EVALUATE>\n\n<PREMISES>\nNo songs are visuals.\nAll folk songs are songs.\nAll videos are visuals.\nAll movies are videos.\nAll sci-fi movies are movies.\nInception is a sci-fi movie.\nMac is neither a folk song nor a sci-fi movie.\n</PREMISES>\n<CONCLUSION>\nInception is a folk song.\n</CONCLUSION>\n<EVALUATE>\nTEXT: No songs are visuals.\nFOL: all x. (Song(x) -> -Visual(x))\nTEXT: All folk songs are songs.\nFOL: all x. (FolkSong(x) -> Song(x))\nTEXT: All videos are visuals.\nFOL: all x. (Video(x) -> Visual(x))\nTEXT: All movies are videos.\nFOL: all x. (Movie(x) -> Video(x))\nTEXT: All sci-fi movies are movies.\nFOL: all x. (ScifiMovie(x) -> Movie(x))\nTEXT: Inception is a sci-fi movie.\nFOL: ScifiMovie(Inception)\nTEXT: Mac is neither a folk song nor a sci-fi movie.\nFOL: -FolkSong(Mac) & -ScifiMovie(Mac)\nTEXT: Inception is a folk song.\nFOL: FolkSong(Inception)\n</EVALUATE>\n\n<PREMISES>\nEvery chef can cook.\nSome people who aren\u2019t chefs can cook.\nPeople who cook can make scrambled eggs and pasta.\nIf someone can make cookies and muffins, they are a baker.\nBakers who can also make scrambled eggs can make a good breakfast.\nLuke can make cookies, scrambled eggs, and muffins, but not pasta.\n</PREMISES>\n<CONCLUSION>\nLuke is a chef.\n</CONCLUSION>\n<EVALUATE>\nTEXT: Every chef can cook.\nFOL: all x. (Chef(x) -> Can(x, Cook))\nTEXT: Some people who aren\u2019t chefs can cook.\nFOL: exists x. (-Chef(x) & Can(x, Cook))\nTEXT: People who cook can make scrambled eggs and pasta.\nFOL: all x. (Can(x, Cook) -> (CanMake(x, ScrambledEggs) & CanMake(x, Pasta)))\nTEXT: If someone can make cookies and muffins, they are a baker.\nFOL: all x. (CanMake(x, Cookies) & CanMake(x, Muffins) -> Baker(x))\nTEXT: Bakers who can also make scrambled eggs can make a good breakfast.\nFOL: all x. ((Baker(x) & CanMake(x, ScrambledEggs)) -> CanMake(x, GoodBreakfast))\nTEXT: Luke can make cookies, scrambled eggs, and muffins, but not pasta.\nFOL: CanMake(Luke, Cookies) & (CanMake(Luke, ScrambledEggs) & CanMake(Luke, Muffins) & -CanMake(Luke, Pasta)\nTEXT: Luke is a chef.\nFOL: MakeGoodBreakfast(Luke)\n</EVALUATE>\n\n<PREMISES>\nETS develops various standardized tests primarily in the United States for K-12 and higher education.\nETS administers international tests, including the TOEFL, TOEIC, GRE, and subject tests.\nMany of the assessments ETS develops are associated with entry to the US tertiary and quaternary education institutions.\nETS also develops K-12 statewide assessments used for accountability testing in many states.\n</PREMISES>\n<CONCLUSION>\nETS doesn't administer tests internationally.\n</CONCLUSION>\n<EVALUATE>\nTEXT: ETS develops various standardized tests primarily in the United States for K-12 and higher education.\nFOL: exists x. exists y. (Develop(eTS, x) & Develop(eTS, y) & StandardizedTest(x) & StandardizedTest(y) & In(x, UnitedState) & In(y, UnitedState) & For(x, kOneTwoAndHigherEducation) & For(y, kOneTwoAndHigherEducation))\nTEXT: ETS administers international tests, including the TOEFL, TOEIC, GRE, and subject tests.\nFOL: exists x. (Administer(eTS, x) & InternationalTest(x) & (TOEFL(x) | TOEIC(x) | GRE(x) | SubjectTest(x)))\nTEXT: Many of the assessments ETS develops are associated with entry to the US tertiary and quaternary education institutions.\nFOL: exists x. (Develop(eTS, x) & AssociatedWith(x, EntryToUSEducationInstitution))\nTEXT: ETS also develops K-12 statewide assessments used for accountability testing in many states.\nFOL: exists x. (Develop(eTS, x) & StateWideAssesment(x) & UsedFor(x, AccountabilityTesting))\nTEXT: ETS doesn't administer tests internationally.\nFOL: exists x. (Develops(Ets, x) & For(x, k-OneTwoandhighereducation)) & exists x. (Develops(Ets, x) & AssociatedWith(x, Entrytouseducationinstitutions))\n</EVALUATE>\n\n<PREMISES>\nDaveed Diggs is an actor and film producer.\nDaveed Diggs played two roles in the musical Hamilton on Broadway.\nOne of the actors from Hamilton won the best actor award.\nThe actor playing Thomas Jefferson won the best actor award.\nDaveed Diggs played Thomas Jefferson.\nMusicals on Broadway are not films.\n</PREMISES>\n<CONCLUSION>\nDaveed Diggs won the best actor award.\n</CONCLUSION>\n<EVALUATE>\nTEXT: Daveed Diggs is an actor and film producer.\nFOL: Actor(DaveedDiggs) & FilmProducer(DaveedDiggs)\nTEXT: Daveed Diggs played two roles in the musical Hamilton on Broadway.\nFOL: exists x. exists y.(PlaysIn(DaveedDiggs, x, Hamilton) & (-(x=y)) & PlaysIn(DaveedDiggs, y, Hamilton)) & OnBroadway(Hamilton) & Musical(Hamilton)\nTEXT: One of the actors from Hamilton won the best actor award.\nFOL: exists x. exists y.(Actor(x) & PlaysIn(x, y, Hamilton) & Wins(x, BestActorAward))\nTEXT: The actor playing Thomas Jefferson won the best actor award.\nFOL: exists x. (Actor(x) & PlaysIn(x, ThomasJefferson, Hamilton) & Wins(x, BestActorAward))\nTEXT: Daveed Diggs played Thomas Jefferson.\nFOL: Plays(DaveedDiggs, ThomasJefferson)\nTEXT: Musicals on Broadway are not films.\nFOL: all x. ((Musical(x) & OnBroadway(x)) -> -Film(x))\nTEXT: Daveed Diggs won the best actor award.\nFOL: exists x. (BRICS(x) & Speaks(x, Hindi))\n</EVALUATE>\n\n<PREMISES>\nNo bird has fur.\nAll dogs are birds.\n</PREMISES>\n<CONCLUSION>\nSome dog has fur.\n</CONCLUSION>\n<EVALUATE>\n", "raw_generations": ["TEXT: No bird has fur.\nFOL: all x. (Bird(x) -> -Fur(x))\nTEXT: All dogs are birds.\nFOL: all x. (Dog(x) -> Bird(x))\nTEXT: Some dog has fur.\nFOL: exists x. (Dog(x) & Fur(x))\n", "TEXT: No bird has fur.\nFOL: exists x. (Bird(x) -> -Has(x, Fur))\nTEXT: All dogs are birds.\nFOL: all x. (Dog(x) -> Bird(x))\nTEXT: Some dog has fur.\nFOL: exists x. (Dog(x) & Has(x, Fur))\n", "TEXT: No bird has fur.\nFOL: all x. (-Bird(x) -> -Has(x, Fur))\nTEXT: All dogs are birds.\nFOL: all x. (Dog(x) -> Bird(x))\nTEXT: Some dog has fur.\nFOL: exists x. (Dog(x) & Has(x, Fur))\n", "TEXT: No bird has fur.\nFOL: all x. (Bird(x) -> -Fur(x))\nTEXT: All dogs are birds.\nFOL: all x. (Dog(x) -> Bird(x))\nTEXT: Some dog has fur.\nFOL: exists x. (Dog(x) & Fur(x))\n", "TEXT: No bird has fur.\nFOL: exists x. (Bird(x) -> -Has(x, Fur))\nTEXT: All dogs are birds.\nFOL: all x. (Dog(x) -> Bird(x))\nTEXT: Some dog has fur.\nFOL: exists x. (Dog(x) & Has(x, Fur))\n", "TEXT: No bird has fur.\nFOL: all x. (Bird(x) -> -Has(x, Fur))\nTEXT: All dogs are birds.\nFOL: all x. (Dog(x) -> Bird(x))\nTEXT: Some dog has fur.\nFOL: exists x. (Dog(x) & Has(x, Fur))\n", "TEXT: No bird has fur.\nFOL: all x. (Bird(x) -> -Fur(x))\nTEXT: All dogs are birds.\nFOL: all x. (Dog(x) -> Bird(x))\nTEXT: Some dog has fur.\nFOL: exists x. (Dog(x) & Fur(x))\n", "TEXT: No bird has fur.\nFOL: -Bird(x) -> -Has(x, Fur)\nTEXT: All dogs are birds.\nFOL: all x. (Dog(x) -> Bird(x))\nTEXT: Some dog has fur.\nFOL: exists x. (Dog(x) & Has(x, Fur))\n", "TEXT: No bird has fur.\nFOL: all x. (Bird(x) -> -Fur(x))\nTEXT: All dogs are birds.\nFOL: all x. (Dog(x) -> Bird(x))\nTEXT: Some dog has fur.\nFOL: exists x. (Dog(x) & Fur(x))\n", "TEXT: No bird has fur.\nFOL: all x. (-Bird(x) -> -Fur(x))\nTEXT: All dogs are birds.\nFOL: all x. (Dog(x) -> Bird(x))\nTEXT: Some dog has fur.\nFOL: exists x. (Dog(x) & Fur(x))\n"], "answers": ["False", "Uncertain", "Uncertain", "False", "Uncertain", "False", "False", "Uncertain", "False", "Uncertain"], "reference": "False", "time_s": 31.840715169906616}
{"idx": 4, "prompt": "The following is a first-order logic (FOL) problem.\nThe problem is to determine whether the conclusion follows from the premises.\nThe premises are given in the form of a set of first-order logic sentences.\nThe conclusion is given in the form of a single first-order logic sentence.\nThe task is to translate each of the premises and conclusions into FOL expressions so that the expressions can be evaluated by a theorem solver like Prover9 to determine whether the conclusion follows from the premises.\nExpressions should adhere to the format of the Python NLTK package logic module. \n\n\n<PREMISES>\nAll biodegradable things are environment-friendly.\nAll woodware is biodegradable.\nAll paper is woodware.\nNothing is a good thing and also a bad thing.\nAll environment-friendly things are good.\nA worksheet is either paper or environment-friendly.\n</PREMISES>\n<CONCLUSION>\nA worksheet is not biodegradable.\n</CONCLUSION>\n<EVALUATE>\nTEXT: All biodegradable things are environment-friendly.\nFOL: all x. (Biodegradable(x) -> EnvironmentFriendly(x))\nTEXT: All woodware is biodegradable.\nFOL: all x. (Woodware(x) -> Biodegradable(x))\nTEXT: All paper is woodware.\nFOL: all x. (Paper(x) -> Woodware(x))\nTEXT: Nothing is a good thing and also a bad thing.\nFOL: -(exists x. (Good(x) & Bad(x)))\nTEXT: All environment-friendly things are good.\nFOL: all x. (EnvironmentFriendly(x) -> Good(x))\nTEXT: A worksheet is either paper or environment-friendly.\nFOL: ((Paper(Worksheet) & -EnvironmentFriendly(Worksheet)) | (-Paper(Worksheet) & EnvironmentFriendly(Worksheet)))\nTEXT: A worksheet is not biodegradable.\nFOL: -Dispensable(Worksheet)\n</EVALUATE>\n\n<PREMISES>\nA La Liga soccer team ranks higher than another La Liga soccer team if it receives more points.\nIf there are two La Liga soccer teams and neither has more points than the other, then the team which receives more points from the games between the two teams ranks higher.\nReal Madrid and Barcelona are both La Liga soccer teams.\nReal Madrid received more points than Barcelona.\nNeither Real Madrid nor Barcelona received more points from the games between them.\n</PREMISES>\n<CONCLUSION>\nReal Madrid ranks higher than Barcelona.\n</CONCLUSION>\n<EVALUATE>\nTEXT: A La Liga soccer team ranks higher than another La Liga soccer team if it receives more points.\nFOL: all x. all y. (LaLigaSoccerTeam(x) & LaLigaSoccerTeam(y) & MorePoints(x, y) -> RankHigherThan(x, y))\nTEXT: If there are two La Liga soccer teams and neither has more points than the other, then the team which receives more points from the games between the two teams ranks higher.\nFOL: all x. all y. (LaLigaSoccerTeam(x) & LaLigaSoccerTeam(y) & -MorePoints(x, y) & -MorePoints(y, x) & MorePointsInGameBetween(x, y) ->  RankHigherThan(x, y))\nTEXT: Real Madrid and Barcelona are both La Liga soccer teams.\nFOL: LaLigaSoccerTeam(RealMadrid) & LaLigaSoccerTeam(Barcelona)\nTEXT: Real Madrid received more points than Barcelona.\nFOL: MorePoints(RealMadrid, Barcelona)\nTEXT: Neither Real Madrid nor Barcelona received more points from the games between them.\nFOL: -MorePointsInGameBetween(RealMadrid, Barcelona) & -MorePointsInGameBetween(Barcelona, RealMadrid)\nTEXT: Real Madrid ranks higher than Barcelona.\nFOL: HigherRank(RealMadrid, Barcelona)\n</EVALUATE>\n\n<PREMISES>\nAll professional athletes spend most of their time on sports.\nAll Olympic gold medal winners are professional athletes.\nNo full-time scientists spend the majority of their time on sports.\nAll Nobel physics laureates are full-time scientists.\nAmy spends the most time on sports, or Amy is an Olympic gold medal winner.\nIf Amy is not a Nobel physics laureate, then Amy is not an Olympic gold medal winner.\n</PREMISES>\n<CONCLUSION>\nIf Amy is not an Olympic gold medal winner, then Amy is a Nobel physics laureate.\n</CONCLUSION>\n<EVALUATE>\nTEXT: All professional athletes spend most of their time on sports.\nFOL: all x. (ProfessionalAthlete(x) -> SpendOn(x, MostOfTheirTime, Sports))\nTEXT: All Olympic gold medal winners are professional athletes.\nFOL: all x. (OlympicGoldMedalWinner(x) -> ProfessionalAthlete(x))\nTEXT: No full-time scientists spend the majority of their time on sports.\nFOL: all x. (FullTimeScientist(x) -> -SpendOn(x, MostOfTheirTime, Sports))\nTEXT: All Nobel physics laureates are full-time scientists.\nFOL: all x. (NobelPhysicsLaureate(x) -> FullTimeScientist(x))\nTEXT: Amy spends the most time on sports, or Amy is an Olympic gold medal winner.\nFOL: SpendOn(Amy, MostOfTheirTime, Sports) | OlympicGoldMedalWinner(Amy)\nTEXT: If Amy is not a Nobel physics laureate, then Amy is not an Olympic gold medal winner.\nFOL: -NobelPhysicsLaureate(Amy) -> -OlympicGoldMedalWinner(Amy)\nTEXT: If Amy is not an Olympic gold medal winner, then Amy is a Nobel physics laureate.\nFOL: -OlympicGoldMedalWinner(Amy) -> NobelLaureate(Amy)\n</EVALUATE>\n\n<PREMISES>\nIf a person pays their taxes, then they contribute to the country.\nEveryone who works for a government department pays a tax on their salary.\nEveryone in the army is an employee of a government department.\nEveryone convicted of murder goes to prison.\nEveryone who has been to prison has a criminal record.\nJames was either once convicted of murder, or spent time in prison.\nJames either has a criminal record, or pays his taxes.\n</PREMISES>\n<CONCLUSION>\nJames does not contribute to the country.\n</CONCLUSION>\n<EVALUATE>\nTEXT: If a person pays their taxes, then they contribute to the country.\nFOL: all x. (Taxpayer(x) -> ContributeTo(x, Country))\nTEXT: Everyone who works for a government department pays a tax on their salary.\nFOL: all x. (WorkFor(x, GovernmentAgency) -> Taxpayer(x))\nTEXT: Everyone in the army is an employee of a government department.\nFOL: all x. (ServesIn(x, TheArmy) -> WorkFor(x, GovernmentAgency))\nTEXT: Everyone convicted of murder goes to prison.\nFOL: all x. (SentencedForMurder(x) -> Imprisoned(x))\nTEXT: Everyone who has been to prison has a criminal record.\nFOL: all x. (Imprisoned((x) -> Has(x, CriminalRecord))\nTEXT: James was either once convicted of murder, or spent time in prison.\nFOL: ((SentencedForMurder(James) & -Imprisoned(James)) | (-SentencedForMurder(James) & Imprisoned(James)))\nTEXT: James either has a criminal record, or pays his taxes.\nFOL: ((Has(James, CriminalRecord) & -Taxpayer(James)) | (-Has(James, CriminalRecord) & Taxpayer(James)))\nTEXT: James does not contribute to the country.\nFOL: ContributeToCountry(James)\n</EVALUATE>\n\n<PREMISES>\nNo songs are visuals.\nAll folk songs are songs.\nAll videos are visuals.\nAll movies are videos.\nAll sci-fi movies are movies.\nInception is a sci-fi movie.\nMac is neither a folk song nor a sci-fi movie.\n</PREMISES>\n<CONCLUSION>\nInception is a folk song.\n</CONCLUSION>\n<EVALUATE>\nTEXT: No songs are visuals.\nFOL: all x. (Song(x) -> -Visual(x))\nTEXT: All folk songs are songs.\nFOL: all x. (FolkSong(x) -> Song(x))\nTEXT: All videos are visuals.\nFOL: all x. (Video(x) -> Visual(x))\nTEXT: All movies are videos.\nFOL: all x. (Movie(x) -> Video(x))\nTEXT: All sci-fi movies are movies.\nFOL: all x. (ScifiMovie(x) -> Movie(x))\nTEXT: Inception is a sci-fi movie.\nFOL: ScifiMovie(Inception)\nTEXT: Mac is neither a folk song nor a sci-fi movie.\nFOL: -FolkSong(Mac) & -ScifiMovie(Mac)\nTEXT: Inception is a folk song.\nFOL: FolkSong(Inception)\n</EVALUATE>\n\n<PREMISES>\nEvery chef can cook.\nSome people who aren\u2019t chefs can cook.\nPeople who cook can make scrambled eggs and pasta.\nIf someone can make cookies and muffins, they are a baker.\nBakers who can also make scrambled eggs can make a good breakfast.\nLuke can make cookies, scrambled eggs, and muffins, but not pasta.\n</PREMISES>\n<CONCLUSION>\nLuke is a chef.\n</CONCLUSION>\n<EVALUATE>\nTEXT: Every chef can cook.\nFOL: all x. (Chef(x) -> Can(x, Cook))\nTEXT: Some people who aren\u2019t chefs can cook.\nFOL: exists x. (-Chef(x) & Can(x, Cook))\nTEXT: People who cook can make scrambled eggs and pasta.\nFOL: all x. (Can(x, Cook) -> (CanMake(x, ScrambledEggs) & CanMake(x, Pasta)))\nTEXT: If someone can make cookies and muffins, they are a baker.\nFOL: all x. (CanMake(x, Cookies) & CanMake(x, Muffins) -> Baker(x))\nTEXT: Bakers who can also make scrambled eggs can make a good breakfast.\nFOL: all x. ((Baker(x) & CanMake(x, ScrambledEggs)) -> CanMake(x, GoodBreakfast))\nTEXT: Luke can make cookies, scrambled eggs, and muffins, but not pasta.\nFOL: CanMake(Luke, Cookies) & (CanMake(Luke, ScrambledEggs) & CanMake(Luke, Muffins) & -CanMake(Luke, Pasta)\nTEXT: Luke is a chef.\nFOL: MakeGoodBreakfast(Luke)\n</EVALUATE>\n\n<PREMISES>\nETS develops various standardized tests primarily in the United States for K-12 and higher education.\nETS administers international tests, including the TOEFL, TOEIC, GRE, and subject tests.\nMany of the assessments ETS develops are associated with entry to the US tertiary and quaternary education institutions.\nETS also develops K-12 statewide assessments used for accountability testing in many states.\n</PREMISES>\n<CONCLUSION>\nETS doesn't administer tests internationally.\n</CONCLUSION>\n<EVALUATE>\nTEXT: ETS develops various standardized tests primarily in the United States for K-12 and higher education.\nFOL: exists x. exists y. (Develop(eTS, x) & Develop(eTS, y) & StandardizedTest(x) & StandardizedTest(y) & In(x, UnitedState) & In(y, UnitedState) & For(x, kOneTwoAndHigherEducation) & For(y, kOneTwoAndHigherEducation))\nTEXT: ETS administers international tests, including the TOEFL, TOEIC, GRE, and subject tests.\nFOL: exists x. (Administer(eTS, x) & InternationalTest(x) & (TOEFL(x) | TOEIC(x) | GRE(x) | SubjectTest(x)))\nTEXT: Many of the assessments ETS develops are associated with entry to the US tertiary and quaternary education institutions.\nFOL: exists x. (Develop(eTS, x) & AssociatedWith(x, EntryToUSEducationInstitution))\nTEXT: ETS also develops K-12 statewide assessments used for accountability testing in many states.\nFOL: exists x. (Develop(eTS, x) & StateWideAssesment(x) & UsedFor(x, AccountabilityTesting))\nTEXT: ETS doesn't administer tests internationally.\nFOL: exists x. (Develops(Ets, x) & For(x, k-OneTwoandhighereducation)) & exists x. (Develops(Ets, x) & AssociatedWith(x, Entrytouseducationinstitutions))\n</EVALUATE>\n\n<PREMISES>\nDaveed Diggs is an actor and film producer.\nDaveed Diggs played two roles in the musical Hamilton on Broadway.\nOne of the actors from Hamilton won the best actor award.\nThe actor playing Thomas Jefferson won the best actor award.\nDaveed Diggs played Thomas Jefferson.\nMusicals on Broadway are not films.\n</PREMISES>\n<CONCLUSION>\nDaveed Diggs won the best actor award.\n</CONCLUSION>\n<EVALUATE>\nTEXT: Daveed Diggs is an actor and film producer.\nFOL: Actor(DaveedDiggs) & FilmProducer(DaveedDiggs)\nTEXT: Daveed Diggs played two roles in the musical Hamilton on Broadway.\nFOL: exists x. exists y.(PlaysIn(DaveedDiggs, x, Hamilton) & (-(x=y)) & PlaysIn(DaveedDiggs, y, Hamilton)) & OnBroadway(Hamilton) & Musical(Hamilton)\nTEXT: One of the actors from Hamilton won the best actor award.\nFOL: exists x. exists y.(Actor(x) & PlaysIn(x, y, Hamilton) & Wins(x, BestActorAward))\nTEXT: The actor playing Thomas Jefferson won the best actor award.\nFOL: exists x. (Actor(x) & PlaysIn(x, ThomasJefferson, Hamilton) & Wins(x, BestActorAward))\nTEXT: Daveed Diggs played Thomas Jefferson.\nFOL: Plays(DaveedDiggs, ThomasJefferson)\nTEXT: Musicals on Broadway are not films.\nFOL: all x. ((Musical(x) & OnBroadway(x)) -> -Film(x))\nTEXT: Daveed Diggs won the best actor award.\nFOL: exists x. (BRICS(x) & Speaks(x, Hindi))\n</EVALUATE>\n\n<PREMISES>\nAmbiortus is a prehistoric mammal genus.\nAmbiortus Dementjevi is the only known species of Ambiortus.\nMars was where Ambiortus Dementjevi lived.\nAdele was the discoverer of Ambiortus.\n</PREMISES>\n<CONCLUSION>\nAdele discovered a new mammal genus.\n</CONCLUSION>\n<EVALUATE>\n", "raw_generations": ["TEXT: Ambiortus is a prehistoric mammal genus.\nFOL: Ambiortus(Ambiortus) & Prehistoric(Ambiortus) & Mammal(Ambiortus) & Genus(Ambiortus)\nTEXT: Ambiortus Dementjevi is the only known species of Ambiortus.\nFOL: (Ambiortus(AmbiortusDementjevi) & Species(AmbiortusDementjevi) & Ambiortus(Ambiortus))\nTEXT: Mars was where Ambiortus Dementjevi lived.\nFOL: (Lived(AmbiortusDementjevi, Mars) & Mars(Mars))\nTEXT: Adele was the discoverer of Ambiortus.\nFOL: (Adele(Adele) & Discoverer(Adele) & Ambiortus(Ambiortus))\nTEXT: Adele discovered a new mammal genus.\nFOL: (Adele(Adele) & Discoverer(Adele) & NewGenus(Ambiortus))\n", "TEXT: Ambiortus is a prehistoric mammal genus.\nFOL: exists x. exists y. (Prehistoric(x) & Mammal(x) & (Genus(x) & Genus(y) & (x=y)))\nTEXT: Ambiortus Dementjevi is the only known species of Ambiortus.\nFOL: exists x. (Ambiortus(x) & AmbiortusDementjevi(x) & (exists y. (Ambiortus(y) & Species(y) & (-(x=y))))\nTEXT: Mars was where Ambiortus Dementjevi lived.\nFOL: exists x. exists y. (Mars(x) & Where(AmbiortusDementjevi, x) & Lived(AmbiortusDementjevi, x))\nTEXT: Adele was the discoverer of Ambiortus.\nFOL: Adele(x) & Discovered(x, Ambiortus)\nTEXT: Adele discovered a new mammal genus.\nFOL: exists x. (Discovered(Adele, x) & Genus(x))\n", "TEXT: Ambiortus is a prehistoric mammal genus.\nFOL: all x. exists y. (Mammal(x) & Genus(x) & Prehistoric(x) & IsA(x, y))\nTEXT: Ambiortus Dementjevi is the only known species of Ambiortus.\nFOL: exists x. (Ambiortus(x) & Species(x) & OnlyKnown(x, Ambiortus))\nTEXT: Mars was where Ambiortus Dementjevi lived.\nFOL: exists x. exists y. (Where(x, AmbiortusDementjevi) & (Mars(x) & -Mars(y) & In(x, y)))\nTEXT: Adele was the discoverer of Ambiortus.\nFOL: exists x. (Discoverer(x, Ambiortus))\nTEXT: Adele discovered a new mammal genus.\nFOL: exists x. (Discoverer(x, Ambiortus) & New(x, MammalGenus))\n", "TEXT: Ambiortus is a prehistoric mammal genus.\nFOL: all x. (Ambiortus(x) -> Prehistoric(x) & Mammal(x) & Genus(x))\nTEXT: Ambiortus Dementjevi is the only known species of Ambiortus.\nFOL: (Ambiortus(AmbiortusDementjevi) & Species(AmbiortusDementjevi) & Ambiortus(Ambiortus))\nTEXT: Mars was where Ambiortus Dementjevi lived.\nFOL: In(Mars, AmbiortusDementjevi)\nTEXT: Adele was the discoverer of Ambiortus.\nFOL: Discoverer(Adele, Ambiortus)\nTEXT: Adele discovered a new mammal genus.\nFOL: New(Adele, MammalGenus)\n", "TEXT: Ambiortus is a prehistoric mammal genus.\nFOL: exists x. (PrehistoricMammalGenus(x) & Ambiortus(x))\nTEXT: Ambiortus Dementjevi is the only known species of Ambiortus.\nFOL: exists x. (Ambiortus(x) & OneKnownSpecies(x, AmbiortusDementjevi))\nTEXT: Mars was where Ambiortus Dementjevi lived.\nFOL: exists x. (Mars(x) & Where(AmbiortusDementjevi, x))\nTEXT: Adele was the discoverer of Ambiortus.\nFOL: Adele(x) & Discovered(x, Ambiortus)\nTEXT: Adele discovered a new mammal genus.\nFOL: Adele(x) & Discovered(x, NewMammalGenus)\n", "TEXT: Ambiortus is a prehistoric mammal genus.\nFOL: Genus(Ambiortus)\nTEXT: Ambiortus Dementjevi is the only known species of Ambiortus.\nFOL: Species(AmbiortusDementjevi)\nTEXT: Mars was where Ambiortus Dementjevi lived.\nFOL: exists x. (Lived(AmbiortusDementjevi, x) & Lived(x, Mars))\nTEXT: Adele was the discoverer of Ambiortus.\nFOL: exists x. (Discoverer(x, Ambiortus))\nTEXT: Adele discovered a new mammal genus.\nFOL: exists x. (Discoverer(Adele, NewMammalGenus))\n", "TEXT: Ambiortus is a prehistoric mammal genus.\nFOL: Ambiortus(x) & Mammal(x) & Prehistoric(x)\nTEXT: Ambiortus Dementjevi is the only known species of Ambiortus.\nFOL: Ambiortus(Dementjevi) & SpeciesOf(Dementjevi, Ambiortus)\nTEXT: Mars was where Ambiortus Dementjevi lived.\nFOL: Mars(x) & Where(Dementjevi, x)\nTEXT: Adele was the discoverer of Ambiortus.\nFOL: Adele(x) & Discoverer(Dementjevi, x)\nTEXT: Adele discovered a new mammal genus.\nFOL: Discover(Adele, NewMammalGenus)\n", "TEXT: Ambiortus is a prehistoric mammal genus.\nFOL: Ambiortus(x) & PrehistoricMammal(x)\nTEXT: Ambiortus Dementjevi is the only known species of Ambiortus.\nFOL: AmbiortusDementjevi(Ambiortus) & OnlyKnownSpeciesOf(Ambiortus)\nTEXT: Mars was where Ambiortus Dementjevi lived.\nFOL: Mars(x) & Where(AmbiortusDementjevi, x)\nTEXT: Adele was the discoverer of Ambiortus.\nFOL: Adele(x) & Discoverer(Ambiortus, x)\nTEXT: Adele discovered a new mammal genus.\nFOL: exists x. (Discoverer(Adele, x) & NewMammalGenus(x))\n", "TEXT: Ambiortus is a prehistoric mammal genus.\nFOL: exists x. (Mammal(x) & Prehistoric(x) & Ambiortus(x))\nTEXT: Ambiortus Dementjevi is the only known species of Ambiortus.\nFOL: exists x. (Ambiortus(x) & Species(x) & AmbiortusDementjevi(x))\nTEXT: Mars was where Ambiortus Dementjevi lived.\nFOL: exists x. (Mars(x) & Location(x) & AmbiortusDementjevi(x))\nTEXT: Adele was the discoverer of Ambiortus.\nFOL: exists x. (Discoverer(x) & Ambiortus(x))\nTEXT: Adele discovered a new mammal genus.\nFOL: exists x. (Adele(x) & Discoverer(x) & NewGenus(x))\n", "TEXT: Ambiortus is a prehistoric mammal genus.\nFOL: Prehistoric(Ambiortus) & Mammal(Ambiortus)\nTEXT: Ambiortus Dementjevi is the only known species of Ambiortus.\nFOL: AmbiortusDementjevi\nTEXT: Mars was where Ambiortus Dementjevi lived.\nFOL: exists x. (AmbiortusDementjevi & Lived(x, Mars))\nTEXT: Adele was the discoverer of Ambiortus.\nFOL: exists x. (Adele & Discoverer(x, Ambiortus))\nTEXT: Adele discovered a new mammal genus.\nFOL: exists x. (Discoverer(Adele, x) & New(x) & Mammal(x))\n"], "answers": ["Error", "Error", "Error", "Error", "Error", "Uncertain", "Error", "Error", "Uncertain", "Error"], "reference": "True", "time_s": 138.7247350215912}
{"idx": 5, "prompt": "The following is a first-order logic (FOL) problem.\nThe problem is to determine whether the conclusion follows from the premises.\nThe premises are given in the form of a set of first-order logic sentences.\nThe conclusion is given in the form of a single first-order logic sentence.\nThe task is to translate each of the premises and conclusions into FOL expressions so that the expressions can be evaluated by a theorem solver like Prover9 to determine whether the conclusion follows from the premises.\nExpressions should adhere to the format of the Python NLTK package logic module. \n\n\n<PREMISES>\nAll biodegradable things are environment-friendly.\nAll woodware is biodegradable.\nAll paper is woodware.\nNothing is a good thing and also a bad thing.\nAll environment-friendly things are good.\nA worksheet is either paper or environment-friendly.\n</PREMISES>\n<CONCLUSION>\nA worksheet is not biodegradable.\n</CONCLUSION>\n<EVALUATE>\nTEXT: All biodegradable things are environment-friendly.\nFOL: all x. (Biodegradable(x) -> EnvironmentFriendly(x))\nTEXT: All woodware is biodegradable.\nFOL: all x. (Woodware(x) -> Biodegradable(x))\nTEXT: All paper is woodware.\nFOL: all x. (Paper(x) -> Woodware(x))\nTEXT: Nothing is a good thing and also a bad thing.\nFOL: -(exists x. (Good(x) & Bad(x)))\nTEXT: All environment-friendly things are good.\nFOL: all x. (EnvironmentFriendly(x) -> Good(x))\nTEXT: A worksheet is either paper or environment-friendly.\nFOL: ((Paper(Worksheet) & -EnvironmentFriendly(Worksheet)) | (-Paper(Worksheet) & EnvironmentFriendly(Worksheet)))\nTEXT: A worksheet is not biodegradable.\nFOL: -Dispensable(Worksheet)\n</EVALUATE>\n\n<PREMISES>\nA La Liga soccer team ranks higher than another La Liga soccer team if it receives more points.\nIf there are two La Liga soccer teams and neither has more points than the other, then the team which receives more points from the games between the two teams ranks higher.\nReal Madrid and Barcelona are both La Liga soccer teams.\nReal Madrid received more points than Barcelona.\nNeither Real Madrid nor Barcelona received more points from the games between them.\n</PREMISES>\n<CONCLUSION>\nReal Madrid ranks higher than Barcelona.\n</CONCLUSION>\n<EVALUATE>\nTEXT: A La Liga soccer team ranks higher than another La Liga soccer team if it receives more points.\nFOL: all x. all y. (LaLigaSoccerTeam(x) & LaLigaSoccerTeam(y) & MorePoints(x, y) -> RankHigherThan(x, y))\nTEXT: If there are two La Liga soccer teams and neither has more points than the other, then the team which receives more points from the games between the two teams ranks higher.\nFOL: all x. all y. (LaLigaSoccerTeam(x) & LaLigaSoccerTeam(y) & -MorePoints(x, y) & -MorePoints(y, x) & MorePointsInGameBetween(x, y) ->  RankHigherThan(x, y))\nTEXT: Real Madrid and Barcelona are both La Liga soccer teams.\nFOL: LaLigaSoccerTeam(RealMadrid) & LaLigaSoccerTeam(Barcelona)\nTEXT: Real Madrid received more points than Barcelona.\nFOL: MorePoints(RealMadrid, Barcelona)\nTEXT: Neither Real Madrid nor Barcelona received more points from the games between them.\nFOL: -MorePointsInGameBetween(RealMadrid, Barcelona) & -MorePointsInGameBetween(Barcelona, RealMadrid)\nTEXT: Real Madrid ranks higher than Barcelona.\nFOL: HigherRank(RealMadrid, Barcelona)\n</EVALUATE>\n\n<PREMISES>\nAll professional athletes spend most of their time on sports.\nAll Olympic gold medal winners are professional athletes.\nNo full-time scientists spend the majority of their time on sports.\nAll Nobel physics laureates are full-time scientists.\nAmy spends the most time on sports, or Amy is an Olympic gold medal winner.\nIf Amy is not a Nobel physics laureate, then Amy is not an Olympic gold medal winner.\n</PREMISES>\n<CONCLUSION>\nIf Amy is not an Olympic gold medal winner, then Amy is a Nobel physics laureate.\n</CONCLUSION>\n<EVALUATE>\nTEXT: All professional athletes spend most of their time on sports.\nFOL: all x. (ProfessionalAthlete(x) -> SpendOn(x, MostOfTheirTime, Sports))\nTEXT: All Olympic gold medal winners are professional athletes.\nFOL: all x. (OlympicGoldMedalWinner(x) -> ProfessionalAthlete(x))\nTEXT: No full-time scientists spend the majority of their time on sports.\nFOL: all x. (FullTimeScientist(x) -> -SpendOn(x, MostOfTheirTime, Sports))\nTEXT: All Nobel physics laureates are full-time scientists.\nFOL: all x. (NobelPhysicsLaureate(x) -> FullTimeScientist(x))\nTEXT: Amy spends the most time on sports, or Amy is an Olympic gold medal winner.\nFOL: SpendOn(Amy, MostOfTheirTime, Sports) | OlympicGoldMedalWinner(Amy)\nTEXT: If Amy is not a Nobel physics laureate, then Amy is not an Olympic gold medal winner.\nFOL: -NobelPhysicsLaureate(Amy) -> -OlympicGoldMedalWinner(Amy)\nTEXT: If Amy is not an Olympic gold medal winner, then Amy is a Nobel physics laureate.\nFOL: -OlympicGoldMedalWinner(Amy) -> NobelLaureate(Amy)\n</EVALUATE>\n\n<PREMISES>\nIf a person pays their taxes, then they contribute to the country.\nEveryone who works for a government department pays a tax on their salary.\nEveryone in the army is an employee of a government department.\nEveryone convicted of murder goes to prison.\nEveryone who has been to prison has a criminal record.\nJames was either once convicted of murder, or spent time in prison.\nJames either has a criminal record, or pays his taxes.\n</PREMISES>\n<CONCLUSION>\nJames does not contribute to the country.\n</CONCLUSION>\n<EVALUATE>\nTEXT: If a person pays their taxes, then they contribute to the country.\nFOL: all x. (Taxpayer(x) -> ContributeTo(x, Country))\nTEXT: Everyone who works for a government department pays a tax on their salary.\nFOL: all x. (WorkFor(x, GovernmentAgency) -> Taxpayer(x))\nTEXT: Everyone in the army is an employee of a government department.\nFOL: all x. (ServesIn(x, TheArmy) -> WorkFor(x, GovernmentAgency))\nTEXT: Everyone convicted of murder goes to prison.\nFOL: all x. (SentencedForMurder(x) -> Imprisoned(x))\nTEXT: Everyone who has been to prison has a criminal record.\nFOL: all x. (Imprisoned((x) -> Has(x, CriminalRecord))\nTEXT: James was either once convicted of murder, or spent time in prison.\nFOL: ((SentencedForMurder(James) & -Imprisoned(James)) | (-SentencedForMurder(James) & Imprisoned(James)))\nTEXT: James either has a criminal record, or pays his taxes.\nFOL: ((Has(James, CriminalRecord) & -Taxpayer(James)) | (-Has(James, CriminalRecord) & Taxpayer(James)))\nTEXT: James does not contribute to the country.\nFOL: ContributeToCountry(James)\n</EVALUATE>\n\n<PREMISES>\nNo songs are visuals.\nAll folk songs are songs.\nAll videos are visuals.\nAll movies are videos.\nAll sci-fi movies are movies.\nInception is a sci-fi movie.\nMac is neither a folk song nor a sci-fi movie.\n</PREMISES>\n<CONCLUSION>\nInception is a folk song.\n</CONCLUSION>\n<EVALUATE>\nTEXT: No songs are visuals.\nFOL: all x. (Song(x) -> -Visual(x))\nTEXT: All folk songs are songs.\nFOL: all x. (FolkSong(x) -> Song(x))\nTEXT: All videos are visuals.\nFOL: all x. (Video(x) -> Visual(x))\nTEXT: All movies are videos.\nFOL: all x. (Movie(x) -> Video(x))\nTEXT: All sci-fi movies are movies.\nFOL: all x. (ScifiMovie(x) -> Movie(x))\nTEXT: Inception is a sci-fi movie.\nFOL: ScifiMovie(Inception)\nTEXT: Mac is neither a folk song nor a sci-fi movie.\nFOL: -FolkSong(Mac) & -ScifiMovie(Mac)\nTEXT: Inception is a folk song.\nFOL: FolkSong(Inception)\n</EVALUATE>\n\n<PREMISES>\nEvery chef can cook.\nSome people who aren\u2019t chefs can cook.\nPeople who cook can make scrambled eggs and pasta.\nIf someone can make cookies and muffins, they are a baker.\nBakers who can also make scrambled eggs can make a good breakfast.\nLuke can make cookies, scrambled eggs, and muffins, but not pasta.\n</PREMISES>\n<CONCLUSION>\nLuke is a chef.\n</CONCLUSION>\n<EVALUATE>\nTEXT: Every chef can cook.\nFOL: all x. (Chef(x) -> Can(x, Cook))\nTEXT: Some people who aren\u2019t chefs can cook.\nFOL: exists x. (-Chef(x) & Can(x, Cook))\nTEXT: People who cook can make scrambled eggs and pasta.\nFOL: all x. (Can(x, Cook) -> (CanMake(x, ScrambledEggs) & CanMake(x, Pasta)))\nTEXT: If someone can make cookies and muffins, they are a baker.\nFOL: all x. (CanMake(x, Cookies) & CanMake(x, Muffins) -> Baker(x))\nTEXT: Bakers who can also make scrambled eggs can make a good breakfast.\nFOL: all x. ((Baker(x) & CanMake(x, ScrambledEggs)) -> CanMake(x, GoodBreakfast))\nTEXT: Luke can make cookies, scrambled eggs, and muffins, but not pasta.\nFOL: CanMake(Luke, Cookies) & (CanMake(Luke, ScrambledEggs) & CanMake(Luke, Muffins) & -CanMake(Luke, Pasta)\nTEXT: Luke is a chef.\nFOL: MakeGoodBreakfast(Luke)\n</EVALUATE>\n\n<PREMISES>\nETS develops various standardized tests primarily in the United States for K-12 and higher education.\nETS administers international tests, including the TOEFL, TOEIC, GRE, and subject tests.\nMany of the assessments ETS develops are associated with entry to the US tertiary and quaternary education institutions.\nETS also develops K-12 statewide assessments used for accountability testing in many states.\n</PREMISES>\n<CONCLUSION>\nETS doesn't administer tests internationally.\n</CONCLUSION>\n<EVALUATE>\nTEXT: ETS develops various standardized tests primarily in the United States for K-12 and higher education.\nFOL: exists x. exists y. (Develop(eTS, x) & Develop(eTS, y) & StandardizedTest(x) & StandardizedTest(y) & In(x, UnitedState) & In(y, UnitedState) & For(x, kOneTwoAndHigherEducation) & For(y, kOneTwoAndHigherEducation))\nTEXT: ETS administers international tests, including the TOEFL, TOEIC, GRE, and subject tests.\nFOL: exists x. (Administer(eTS, x) & InternationalTest(x) & (TOEFL(x) | TOEIC(x) | GRE(x) | SubjectTest(x)))\nTEXT: Many of the assessments ETS develops are associated with entry to the US tertiary and quaternary education institutions.\nFOL: exists x. (Develop(eTS, x) & AssociatedWith(x, EntryToUSEducationInstitution))\nTEXT: ETS also develops K-12 statewide assessments used for accountability testing in many states.\nFOL: exists x. (Develop(eTS, x) & StateWideAssesment(x) & UsedFor(x, AccountabilityTesting))\nTEXT: ETS doesn't administer tests internationally.\nFOL: exists x. (Develops(Ets, x) & For(x, k-OneTwoandhighereducation)) & exists x. (Develops(Ets, x) & AssociatedWith(x, Entrytouseducationinstitutions))\n</EVALUATE>\n\n<PREMISES>\nDaveed Diggs is an actor and film producer.\nDaveed Diggs played two roles in the musical Hamilton on Broadway.\nOne of the actors from Hamilton won the best actor award.\nThe actor playing Thomas Jefferson won the best actor award.\nDaveed Diggs played Thomas Jefferson.\nMusicals on Broadway are not films.\n</PREMISES>\n<CONCLUSION>\nDaveed Diggs won the best actor award.\n</CONCLUSION>\n<EVALUATE>\nTEXT: Daveed Diggs is an actor and film producer.\nFOL: Actor(DaveedDiggs) & FilmProducer(DaveedDiggs)\nTEXT: Daveed Diggs played two roles in the musical Hamilton on Broadway.\nFOL: exists x. exists y.(PlaysIn(DaveedDiggs, x, Hamilton) & (-(x=y)) & PlaysIn(DaveedDiggs, y, Hamilton)) & OnBroadway(Hamilton) & Musical(Hamilton)\nTEXT: One of the actors from Hamilton won the best actor award.\nFOL: exists x. exists y.(Actor(x) & PlaysIn(x, y, Hamilton) & Wins(x, BestActorAward))\nTEXT: The actor playing Thomas Jefferson won the best actor award.\nFOL: exists x. (Actor(x) & PlaysIn(x, ThomasJefferson, Hamilton) & Wins(x, BestActorAward))\nTEXT: Daveed Diggs played Thomas Jefferson.\nFOL: Plays(DaveedDiggs, ThomasJefferson)\nTEXT: Musicals on Broadway are not films.\nFOL: all x. ((Musical(x) & OnBroadway(x)) -> -Film(x))\nTEXT: Daveed Diggs won the best actor award.\nFOL: exists x. (BRICS(x) & Speaks(x, Hindi))\n</EVALUATE>\n\n<PREMISES>\nAmbiortus is a prehistoric mammal genus.\nAmbiortus Dementjevi is the only known species of Ambiortus.\nMars was where Ambiortus Dementjevi lived.\nAdele was the discoverer of Ambiortus.\n</PREMISES>\n<CONCLUSION>\nAdele lived on Mars.\n</CONCLUSION>\n<EVALUATE>\n", "raw_generations": ["TEXT: Ambiortus is a prehistoric mammal genus.\nFOL: all x. (Ambiortus(x) & PrehistoricMammalGenus(x))\nTEXT: Ambiortus Dementjevi is the only known species of Ambiortus.\nFOL: all x. (Ambiortus(x) & AmbiortusDementjevi(x) & OnlyKnownSpecies(x, Ambiortus))\nTEXT: Mars was where Ambiortus Dementjevi lived.\nFOL: Mars(Mars) & Where(AmbiortusDementjevi, Mars)\nTEXT: Adele was the discoverer of Ambiortus.\nFOL: Adele(Adele) & Discoverer(Adele, Ambiortus)\nTEXT: Adele lived on Mars.\nFOL: Adele(Adele) & LivesOn(Adele, Mars)\n", "TEXT: Ambiortus is a prehistoric mammal genus.\nFOL: exists x. exists y. (Ambiortus(x) & PrehistoricMammalGenus(x) & Ambiortus(y) & PrehistoricMammalGenus(y))\nTEXT: Ambiortus Dementjevi is the only known species of Ambiortus.\nFOL: Species(Ambiortus, AmbiortusDementjevi)\nTEXT: Mars was where Ambiortus Dementjevi lived.\nFOL: Lives(Mars, AmbiortusDementjevi)\nTEXT: Adele was the discoverer of Ambiortus.\nFOL: Discovers(Adele, Ambiortus)\nTEXT: Adele lived on Mars.\nFOL: LivesOn(Adele, Mars)\n", "TEXT: Ambiortus is a prehistoric mammal genus.\nFOL: exists x. exists y. (Ambiortus(x) & PrehistoricMammal(x) & Species(x, y))\nTEXT: Ambiortus Dementjevi is the only known species of Ambiortus.\nFOL: exists x. (Ambiortus(x) & Species(x, AmbiortusDementjevi) & SpeciesIsKnown(x, AmbiortusDementjevi))\nTEXT: Mars was where Ambiortus Dementjevi lived.\nFOL: exists x. (Mars(x) & Where(x, AmbiortusDementjevi))\nTEXT: Adele was the discoverer of Ambiortus.\nFOL: exists x. (Adele(x) & Discoverer(x, Ambiortus))\nTEXT: Adele lived on Mars.\nFOL: exists x. (Adele(x) & OnMars(x))\n", "TEXT: Ambiortus is a prehistoric mammal genus.\nFOL: Ambiortus(x) & Mammal(x) & Prehistoric(x)\nTEXT: Ambiortus Dementjevi is the only known species of Ambiortus.\nFOL: exists x. Ambiortus(x) & exists y. (Ambiortus(x) & Ambiortus(y) & OnlyKnownSpecies(x, y))\nTEXT: Mars was where Ambiortus Dementjevi lived.\nFOL: exists x. (Mars(x) & Where(x, AmbiortusDementjevi))\nTEXT: Adele was the discoverer of Ambiortus.\nFOL: exists x. (Adele(x) & Discovered(x, Ambiortus))\nTEXT: Adele lived on Mars.\nFOL: Adele(x) & (Where(x, Mars) & Discovered(x, Ambiortus))\n", "TEXT: Ambiortus is a prehistoric mammal genus.\nFOL: exists x. (Genus(x, Ambiortus) & Mammal(x) & Prehistoric(x))\nTEXT: Ambiortus Dementjevi is the only known species of Ambiortus.\nFOL: exists x. (Species(AmbiortusDementjevi, Ambiortus) & Ambiortus(x))\nTEXT: Mars was where Ambiortus Dementjevi lived.\nFOL: AmbiortusDementjevi(x) & Lived(x, Mars)\nTEXT: Adele was the discoverer of Ambiortus.\nFOL: Discoverer(Adele, Ambiortus)\nTEXT: Adele lived on Mars.\nFOL: exists x. (Discoverer(x, Ambiortus) & Lived(x, Mars))\n", "TEXT: Ambiortus is a prehistoric mammal genus.\nFOL: Prehistoric(Ambiortus) & MammalGenus(Ambiortus)\nTEXT: Ambiortus Dementjevi is the only known species of Ambiortus.\nFOL: AmbiortusDementjevi(Ambiortus)\nTEXT: Mars was where Ambiortus Dementjevi lived.\nFOL: Lived(AmbiortusDementjevi, Mars)\nTEXT: Adele was the discoverer of Ambiortus.\nFOL: Discovered(Adele, Ambiortus)\nTEXT: Adele lived on Mars.\nFOL: LivedOn(Adele, Mars)\n", "TEXT: Ambiortus is a prehistoric mammal genus.\nFOL: all x. (Ambiortus(x) & PrehistoricMammal(x))\nTEXT: Ambiortus Dementjevi is the only known species of Ambiortus.\nFOL: exists x. exists y. (Ambiortus(x) & Ambiortus(y) & SpeciesOf(x, y) & Only(x))\nTEXT: Mars was where Ambiortus Dementjevi lived.\nFOL: exists x. exists y. (Mars(x) & AmbiortusDementjevi(y) & LivedOn(x, y))\nTEXT: Adele was the discoverer of Ambiortus.\nFOL: exists x. exists y. (Adele(x) & DiscovererOf(x, y) & Ambiortus(y))\nTEXT: Adele lived on Mars.\nFOL: exists x. (Adele(x) & LivedOn(x, Mars))\n", "TEXT: Ambiortus is a prehistoric mammal genus.\nFOL: PrehistoricMammalGenus(Ambiortus)\nTEXT: Ambiortus Dementjevi is the only known species of Ambiortus.\nFOL: SpeciesOf(AmbiortusDementjevi, Ambiortus)\nTEXT: Mars was where Ambiortus Dementjevi lived.\nFOL: Mars\nTEXT: Adele was the discoverer of Ambiortus.\nFOL: Discovers(Adele, Ambiortus)\nTEXT: Adele lived on Mars.\nFOL: LivesOn(Adele, Mars)\n", "TEXT: Ambiortus is a prehistoric mammal genus.\nFOL: Ambiortus(Ambiortus) & Mammal(Ambiortus) & Prehistoric(Ambiortus) & Genus(Ambiortus)\nTEXT: Ambiortus Dementjevi is the only known species of Ambiortus.\nFOL: Ambiortus(AmbiortusDementjevi) & KnownSpecies(Ambiortus, AmbiortusDementjevi)\nTEXT: Mars was where Ambiortus Dementjevi lived.\nFOL: LivesOn(AmbiortusDementjevi, Mars)\nTEXT: Adele was the discoverer of Ambiortus.\nFOL: Adele(Adele) & Discovered(Adele, Ambiortus)\nTEXT: Adele lived on Mars.\nFOL: LivesOn(Adele, Mars)\n", "TEXT: Ambiortus is a prehistoric mammal genus.\nFOL: exists x. (Genus(x, Ambiortus) & PrehistoricMammal(x))\nTEXT: Ambiortus Dementjevi is the only known species of Ambiortus.\nFOL: Species(AmbiortusDementjevi)\nTEXT: Mars was where Ambiortus Dementjevi lived.\nFOL: Mars\nTEXT: Adele was the discoverer of Ambiortus.\nFOL: Discovers(Adele, Ambiortus)\nTEXT: Adele lived on Mars.\nFOL: LivesOn(Adele, Mars)\n"], "answers": ["Error", "Error", "Error", "Error", "Error", "Error", "Error", "Error", "Error", "Error"], "reference": "Uncertain", "time_s": 122.53852939605713}
{"idx": 6, "prompt": "The following is a first-order logic (FOL) problem.\nThe problem is to determine whether the conclusion follows from the premises.\nThe premises are given in the form of a set of first-order logic sentences.\nThe conclusion is given in the form of a single first-order logic sentence.\nThe task is to translate each of the premises and conclusions into FOL expressions so that the expressions can be evaluated by a theorem solver like Prover9 to determine whether the conclusion follows from the premises.\nExpressions should adhere to the format of the Python NLTK package logic module. \n\n\n<PREMISES>\nAll biodegradable things are environment-friendly.\nAll woodware is biodegradable.\nAll paper is woodware.\nNothing is a good thing and also a bad thing.\nAll environment-friendly things are good.\nA worksheet is either paper or environment-friendly.\n</PREMISES>\n<CONCLUSION>\nA worksheet is not biodegradable.\n</CONCLUSION>\n<EVALUATE>\nTEXT: All biodegradable things are environment-friendly.\nFOL: all x. (Biodegradable(x) -> EnvironmentFriendly(x))\nTEXT: All woodware is biodegradable.\nFOL: all x. (Woodware(x) -> Biodegradable(x))\nTEXT: All paper is woodware.\nFOL: all x. (Paper(x) -> Woodware(x))\nTEXT: Nothing is a good thing and also a bad thing.\nFOL: -(exists x. (Good(x) & Bad(x)))\nTEXT: All environment-friendly things are good.\nFOL: all x. (EnvironmentFriendly(x) -> Good(x))\nTEXT: A worksheet is either paper or environment-friendly.\nFOL: ((Paper(Worksheet) & -EnvironmentFriendly(Worksheet)) | (-Paper(Worksheet) & EnvironmentFriendly(Worksheet)))\nTEXT: A worksheet is not biodegradable.\nFOL: -Dispensable(Worksheet)\n</EVALUATE>\n\n<PREMISES>\nA La Liga soccer team ranks higher than another La Liga soccer team if it receives more points.\nIf there are two La Liga soccer teams and neither has more points than the other, then the team which receives more points from the games between the two teams ranks higher.\nReal Madrid and Barcelona are both La Liga soccer teams.\nReal Madrid received more points than Barcelona.\nNeither Real Madrid nor Barcelona received more points from the games between them.\n</PREMISES>\n<CONCLUSION>\nReal Madrid ranks higher than Barcelona.\n</CONCLUSION>\n<EVALUATE>\nTEXT: A La Liga soccer team ranks higher than another La Liga soccer team if it receives more points.\nFOL: all x. all y. (LaLigaSoccerTeam(x) & LaLigaSoccerTeam(y) & MorePoints(x, y) -> RankHigherThan(x, y))\nTEXT: If there are two La Liga soccer teams and neither has more points than the other, then the team which receives more points from the games between the two teams ranks higher.\nFOL: all x. all y. (LaLigaSoccerTeam(x) & LaLigaSoccerTeam(y) & -MorePoints(x, y) & -MorePoints(y, x) & MorePointsInGameBetween(x, y) ->  RankHigherThan(x, y))\nTEXT: Real Madrid and Barcelona are both La Liga soccer teams.\nFOL: LaLigaSoccerTeam(RealMadrid) & LaLigaSoccerTeam(Barcelona)\nTEXT: Real Madrid received more points than Barcelona.\nFOL: MorePoints(RealMadrid, Barcelona)\nTEXT: Neither Real Madrid nor Barcelona received more points from the games between them.\nFOL: -MorePointsInGameBetween(RealMadrid, Barcelona) & -MorePointsInGameBetween(Barcelona, RealMadrid)\nTEXT: Real Madrid ranks higher than Barcelona.\nFOL: HigherRank(RealMadrid, Barcelona)\n</EVALUATE>\n\n<PREMISES>\nAll professional athletes spend most of their time on sports.\nAll Olympic gold medal winners are professional athletes.\nNo full-time scientists spend the majority of their time on sports.\nAll Nobel physics laureates are full-time scientists.\nAmy spends the most time on sports, or Amy is an Olympic gold medal winner.\nIf Amy is not a Nobel physics laureate, then Amy is not an Olympic gold medal winner.\n</PREMISES>\n<CONCLUSION>\nIf Amy is not an Olympic gold medal winner, then Amy is a Nobel physics laureate.\n</CONCLUSION>\n<EVALUATE>\nTEXT: All professional athletes spend most of their time on sports.\nFOL: all x. (ProfessionalAthlete(x) -> SpendOn(x, MostOfTheirTime, Sports))\nTEXT: All Olympic gold medal winners are professional athletes.\nFOL: all x. (OlympicGoldMedalWinner(x) -> ProfessionalAthlete(x))\nTEXT: No full-time scientists spend the majority of their time on sports.\nFOL: all x. (FullTimeScientist(x) -> -SpendOn(x, MostOfTheirTime, Sports))\nTEXT: All Nobel physics laureates are full-time scientists.\nFOL: all x. (NobelPhysicsLaureate(x) -> FullTimeScientist(x))\nTEXT: Amy spends the most time on sports, or Amy is an Olympic gold medal winner.\nFOL: SpendOn(Amy, MostOfTheirTime, Sports) | OlympicGoldMedalWinner(Amy)\nTEXT: If Amy is not a Nobel physics laureate, then Amy is not an Olympic gold medal winner.\nFOL: -NobelPhysicsLaureate(Amy) -> -OlympicGoldMedalWinner(Amy)\nTEXT: If Amy is not an Olympic gold medal winner, then Amy is a Nobel physics laureate.\nFOL: -OlympicGoldMedalWinner(Amy) -> NobelLaureate(Amy)\n</EVALUATE>\n\n<PREMISES>\nIf a person pays their taxes, then they contribute to the country.\nEveryone who works for a government department pays a tax on their salary.\nEveryone in the army is an employee of a government department.\nEveryone convicted of murder goes to prison.\nEveryone who has been to prison has a criminal record.\nJames was either once convicted of murder, or spent time in prison.\nJames either has a criminal record, or pays his taxes.\n</PREMISES>\n<CONCLUSION>\nJames does not contribute to the country.\n</CONCLUSION>\n<EVALUATE>\nTEXT: If a person pays their taxes, then they contribute to the country.\nFOL: all x. (Taxpayer(x) -> ContributeTo(x, Country))\nTEXT: Everyone who works for a government department pays a tax on their salary.\nFOL: all x. (WorkFor(x, GovernmentAgency) -> Taxpayer(x))\nTEXT: Everyone in the army is an employee of a government department.\nFOL: all x. (ServesIn(x, TheArmy) -> WorkFor(x, GovernmentAgency))\nTEXT: Everyone convicted of murder goes to prison.\nFOL: all x. (SentencedForMurder(x) -> Imprisoned(x))\nTEXT: Everyone who has been to prison has a criminal record.\nFOL: all x. (Imprisoned((x) -> Has(x, CriminalRecord))\nTEXT: James was either once convicted of murder, or spent time in prison.\nFOL: ((SentencedForMurder(James) & -Imprisoned(James)) | (-SentencedForMurder(James) & Imprisoned(James)))\nTEXT: James either has a criminal record, or pays his taxes.\nFOL: ((Has(James, CriminalRecord) & -Taxpayer(James)) | (-Has(James, CriminalRecord) & Taxpayer(James)))\nTEXT: James does not contribute to the country.\nFOL: ContributeToCountry(James)\n</EVALUATE>\n\n<PREMISES>\nNo songs are visuals.\nAll folk songs are songs.\nAll videos are visuals.\nAll movies are videos.\nAll sci-fi movies are movies.\nInception is a sci-fi movie.\nMac is neither a folk song nor a sci-fi movie.\n</PREMISES>\n<CONCLUSION>\nInception is a folk song.\n</CONCLUSION>\n<EVALUATE>\nTEXT: No songs are visuals.\nFOL: all x. (Song(x) -> -Visual(x))\nTEXT: All folk songs are songs.\nFOL: all x. (FolkSong(x) -> Song(x))\nTEXT: All videos are visuals.\nFOL: all x. (Video(x) -> Visual(x))\nTEXT: All movies are videos.\nFOL: all x. (Movie(x) -> Video(x))\nTEXT: All sci-fi movies are movies.\nFOL: all x. (ScifiMovie(x) -> Movie(x))\nTEXT: Inception is a sci-fi movie.\nFOL: ScifiMovie(Inception)\nTEXT: Mac is neither a folk song nor a sci-fi movie.\nFOL: -FolkSong(Mac) & -ScifiMovie(Mac)\nTEXT: Inception is a folk song.\nFOL: FolkSong(Inception)\n</EVALUATE>\n\n<PREMISES>\nEvery chef can cook.\nSome people who aren\u2019t chefs can cook.\nPeople who cook can make scrambled eggs and pasta.\nIf someone can make cookies and muffins, they are a baker.\nBakers who can also make scrambled eggs can make a good breakfast.\nLuke can make cookies, scrambled eggs, and muffins, but not pasta.\n</PREMISES>\n<CONCLUSION>\nLuke is a chef.\n</CONCLUSION>\n<EVALUATE>\nTEXT: Every chef can cook.\nFOL: all x. (Chef(x) -> Can(x, Cook))\nTEXT: Some people who aren\u2019t chefs can cook.\nFOL: exists x. (-Chef(x) & Can(x, Cook))\nTEXT: People who cook can make scrambled eggs and pasta.\nFOL: all x. (Can(x, Cook) -> (CanMake(x, ScrambledEggs) & CanMake(x, Pasta)))\nTEXT: If someone can make cookies and muffins, they are a baker.\nFOL: all x. (CanMake(x, Cookies) & CanMake(x, Muffins) -> Baker(x))\nTEXT: Bakers who can also make scrambled eggs can make a good breakfast.\nFOL: all x. ((Baker(x) & CanMake(x, ScrambledEggs)) -> CanMake(x, GoodBreakfast))\nTEXT: Luke can make cookies, scrambled eggs, and muffins, but not pasta.\nFOL: CanMake(Luke, Cookies) & (CanMake(Luke, ScrambledEggs) & CanMake(Luke, Muffins) & -CanMake(Luke, Pasta)\nTEXT: Luke is a chef.\nFOL: MakeGoodBreakfast(Luke)\n</EVALUATE>\n\n<PREMISES>\nETS develops various standardized tests primarily in the United States for K-12 and higher education.\nETS administers international tests, including the TOEFL, TOEIC, GRE, and subject tests.\nMany of the assessments ETS develops are associated with entry to the US tertiary and quaternary education institutions.\nETS also develops K-12 statewide assessments used for accountability testing in many states.\n</PREMISES>\n<CONCLUSION>\nETS doesn't administer tests internationally.\n</CONCLUSION>\n<EVALUATE>\nTEXT: ETS develops various standardized tests primarily in the United States for K-12 and higher education.\nFOL: exists x. exists y. (Develop(eTS, x) & Develop(eTS, y) & StandardizedTest(x) & StandardizedTest(y) & In(x, UnitedState) & In(y, UnitedState) & For(x, kOneTwoAndHigherEducation) & For(y, kOneTwoAndHigherEducation))\nTEXT: ETS administers international tests, including the TOEFL, TOEIC, GRE, and subject tests.\nFOL: exists x. (Administer(eTS, x) & InternationalTest(x) & (TOEFL(x) | TOEIC(x) | GRE(x) | SubjectTest(x)))\nTEXT: Many of the assessments ETS develops are associated with entry to the US tertiary and quaternary education institutions.\nFOL: exists x. (Develop(eTS, x) & AssociatedWith(x, EntryToUSEducationInstitution))\nTEXT: ETS also develops K-12 statewide assessments used for accountability testing in many states.\nFOL: exists x. (Develop(eTS, x) & StateWideAssesment(x) & UsedFor(x, AccountabilityTesting))\nTEXT: ETS doesn't administer tests internationally.\nFOL: exists x. (Develops(Ets, x) & For(x, k-OneTwoandhighereducation)) & exists x. (Develops(Ets, x) & AssociatedWith(x, Entrytouseducationinstitutions))\n</EVALUATE>\n\n<PREMISES>\nDaveed Diggs is an actor and film producer.\nDaveed Diggs played two roles in the musical Hamilton on Broadway.\nOne of the actors from Hamilton won the best actor award.\nThe actor playing Thomas Jefferson won the best actor award.\nDaveed Diggs played Thomas Jefferson.\nMusicals on Broadway are not films.\n</PREMISES>\n<CONCLUSION>\nDaveed Diggs won the best actor award.\n</CONCLUSION>\n<EVALUATE>\nTEXT: Daveed Diggs is an actor and film producer.\nFOL: Actor(DaveedDiggs) & FilmProducer(DaveedDiggs)\nTEXT: Daveed Diggs played two roles in the musical Hamilton on Broadway.\nFOL: exists x. exists y.(PlaysIn(DaveedDiggs, x, Hamilton) & (-(x=y)) & PlaysIn(DaveedDiggs, y, Hamilton)) & OnBroadway(Hamilton) & Musical(Hamilton)\nTEXT: One of the actors from Hamilton won the best actor award.\nFOL: exists x. exists y.(Actor(x) & PlaysIn(x, y, Hamilton) & Wins(x, BestActorAward))\nTEXT: The actor playing Thomas Jefferson won the best actor award.\nFOL: exists x. (Actor(x) & PlaysIn(x, ThomasJefferson, Hamilton) & Wins(x, BestActorAward))\nTEXT: Daveed Diggs played Thomas Jefferson.\nFOL: Plays(DaveedDiggs, ThomasJefferson)\nTEXT: Musicals on Broadway are not films.\nFOL: all x. ((Musical(x) & OnBroadway(x)) -> -Film(x))\nTEXT: Daveed Diggs won the best actor award.\nFOL: exists x. (BRICS(x) & Speaks(x, Hindi))\n</EVALUATE>\n\n<PREMISES>\nFort Ticonderoga is the former name for Fort Carillon.\nChris Hemsworth destroyed Fort Carillon.\nFort Carillon was located in New France.\nNew France is not in Europe.\n</PREMISES>\n<CONCLUSION>\nChris Hemsworth destroyed a fort in New France.\n</CONCLUSION>\n<EVALUATE>\n", "raw_generations": ["TEXT: Fort Ticonderoga is the former name for Fort Carillon.\nFOL: FormerName(FortTiconderoga, FortCarillon)\nTEXT: Chris Hemsworth destroyed Fort Carillon.\nFOL: Destroyed(ChrisHemsworth, FortCarillon)\nTEXT: Fort Carillon was located in New France.\nFOL: In(FortCarillon, NewFrance)\nTEXT: New France is not in Europe.\nFOL: -In(NewFrance, Europe)\nTEXT: Chris Hemsworth destroyed a fort in New France.\nFOL: ((Destroyed(ChrisHemsworth, x) & Fort(x)) & (-In(x, Europe)))\n", "TEXT: Fort Ticonderoga is the former name for Fort Carillon.\nFOL: (FortTiconderoga=FortCarillon)\nTEXT: Chris Hemsworth destroyed Fort Carillon.\nFOL: (Destroyed(ChrisHemsworth, FortCarillon))\nTEXT: Fort Carillon was located in New France.\nFOL: (LocatedIn(FortCarillon, NewFrance))\nTEXT: New France is not in Europe.\nFOL: -Europe(NewFrance)\nTEXT: Chris Hemsworth destroyed a fort in New France.\nFOL: (Destroyed(ChrisHemsworth, x) & LocatedIn(x, NewFrance))\n", "TEXT: Fort Ticonderoga is the former name for Fort Carillon.\nFOL: (FortTiconderoga = FortCarillon)\nTEXT:  destroyed Fort Carillon.\nFOL: HemsworthDestroys(FortCarillon)\nTEXT: Fort Carillon was located in New France.\nFOL: In(FortCarillon, NewFrance)\nTEXT: New France is not in Europe.\nFOL: -In(NewFrance, Europe)\nTEXT: Chris Hemsworth destroyed a fort in New France.\nFOL: exists x. (HemsworthDestroys(x) & In(x, NewFrance))\n", "TEXT: Fort Ticonderoga is the former name for Fort Carillon.\nFOL: (Name(FortTiconderoga, Carillon) & Name(FortTiconderoga, FortCarillon))\nTEXT: Chris Hemsworth destroyed Fort Carillon.\nFOL: (Destroy(ChrisHemsworth, FortCarillon))\nTEXT: Fort Carillon was located in New France.\nFOL: (In(FortCarillon, NewFrance))\nTEXT: New France is not in Europe.\nFOL: -Europe(NewFrance)\nTEXT: Chris Hemsworth destroyed a fort in New France.\nFOL: exists x. (Destroy(ChrisHemsworth, x) & In(x, NewFrance))\n", "TEXT: Fort Ticonderoga is the former name for Fort Carillon.\nFOL: exists x. exists y. (FortTiconderoga(x) & FortCarillon(y) & OldNameFor(x, y))\nTEXT:  destroyed Fort Carillon.\nFOL: ChrisHemsworth(Chris) & Destroys(Chris, FortCarillon)\nTEXT: Fort Carillon was located in New France.\nFOL: exists x. (FortCarillon(x) & LocatedIn(x, NewFrance))\nTEXT: New France is not in Europe.\nFOL: exists x. (NewFrance(x) & -InEurope(x))\nTEXT: Chris Hemsworth destroyed a fort in New France.\nFOL: exists x. (FortCarillon(x) & LocatedIn(x, NewFrance) & Destroyed(Chris, x))\n", "TEXT: Fort Ticonderoga is the former name for Fort Carillon.\nFOL: FortTiconderoga(x) -> FortCarillon(x)\nTEXT: Chris Hemsworth destroyed Fort Carillon.\nFOL: HemsworthDestroyed(FortCarillon)\nTEXT: Fort Carillon was located in New France.\nFOL: exists x. (FortCarillon(x) & LocatedIn(x, NewFrance))\nTEXT: New France is not in Europe.\nFOL: exists x. (NewFrance(x) & -In(x, Europe))\nTEXT: Chris Hemsworth destroyed a fort in New France.\nFOL: HemsworthDestroyed(x) & LocatedIn(x, NewFrance)\n", "TEXT: Fort Ticonderoga is the former name for Fort Carillon.\nFOL: all x. all y. (FortTiconderoga(x) & FortCarillon(y) -> SameAs(x, y))\nTEXT: Chris Hemsworth destroyed Fort Carillon.\nFOL: HemsworthDestroyed(ChrisHemsworth) & FortCarillon(FortCarillon)\nTEXT: Fort Carillon was located in New France.\nFOL: Location(FortCarillon, NewFrance)\nTEXT: New France is not in Europe.\nFOL: NotIn(NewFrance, Europe)\nTEXT: Chris Hemsworth destroyed a fort in New France.\nFOL: HemsworthDestroyed(ChrisHemsworth) & Location(FortCarillon, NewFrance)\n", "TEXT: Fort Ticonderoga is the former name for Fort Carillon.\nFOL: exists x. exists y. (FortTiconderoga(x) & FortCarillon(y) & FormerNameFor(x, y))\nTEXT: Chris Hemsworth destroyed Fort Carillon.\nFOL: exists x. (ChrisHemsworth(x) & Destroy(x, FortCarillon))\nTEXT: Fort Carillon was located in New France.\nFOL: exists x. (FortCarillon(x) & LocatedIn(x, NewFrance))\nTEXT: New France is not in Europe.\nFOL: exists x. (NewFrance(x) & -In(x, Europe))\nTEXT: Chris Hemsworth destroyed a fort in New France.\nFOL: exists x. (ChrisHemsworth(x) & Destroy(x, y) & LocatedIn(y, NewFrance))\n", "TEXT: Fort Ticonderoga is the former name for Fort Carillon.\nFOL: exists x. exists y. (Fort(x) & FormerNameFor(x, y) & Fort(y))\nTEXT: Chris Hemsworth destroyed Fort Carillon.\nFOL: exists x. (ChrisHemsworth(x) & Destroys(x, FortCarillon))\nTEXT: Fort Carillon was located in New France.\nFOL: exists x. (FortCarillon(x) & LocatedIn(x, NewFrance))\nTEXT: New France is not in Europe.\nFOL: exists x. (NewFrance(x) & -In(x, Europe))\nTEXT: Chris Hemsworth destroyed a fort in New France.\nFOL: exists x. (ChrisHemsworth(x) & Destroys(x, y) & Fort(y) & LocatedIn(y, NewFrance))\n", "TEXT: Fort Ticonderoga is the former name for Fort Carillon.\nFOL: ForTiconderoga(FortTiconderoga) & formerNameFor(FortTiconderoga, FortCarillon)\nTEXT: Chris Hemsworth destroyed Fort Carillon.\nFOL: Hemsworth(Chris) & destroyed(FortCarillon)\nTEXT: Fort Carillon was located in New France.\nFOL: In(FortCarillon, NewFrance)\nTEXT: New France is not in Europe.\nFOL: -In(NewFrance, Europe)\nTEXT: Chris Hemsworth destroyed a fort in New France.\nFOL: Hemsworth(Chris) & destroyed(Fort) & In(Fort, NewFrance)\n"], "answers": ["Uncertain", "Uncertain", "True", "True", "Error", "Error", "Error", "Error", "Error", "Uncertain"], "reference": "True", "time_s": 112.48741126060486}
{"idx": 7, "prompt": "The following is a first-order logic (FOL) problem.\nThe problem is to determine whether the conclusion follows from the premises.\nThe premises are given in the form of a set of first-order logic sentences.\nThe conclusion is given in the form of a single first-order logic sentence.\nThe task is to translate each of the premises and conclusions into FOL expressions so that the expressions can be evaluated by a theorem solver like Prover9 to determine whether the conclusion follows from the premises.\nExpressions should adhere to the format of the Python NLTK package logic module. \n\n\n<PREMISES>\nAll biodegradable things are environment-friendly.\nAll woodware is biodegradable.\nAll paper is woodware.\nNothing is a good thing and also a bad thing.\nAll environment-friendly things are good.\nA worksheet is either paper or environment-friendly.\n</PREMISES>\n<CONCLUSION>\nA worksheet is not biodegradable.\n</CONCLUSION>\n<EVALUATE>\nTEXT: All biodegradable things are environment-friendly.\nFOL: all x. (Biodegradable(x) -> EnvironmentFriendly(x))\nTEXT: All woodware is biodegradable.\nFOL: all x. (Woodware(x) -> Biodegradable(x))\nTEXT: All paper is woodware.\nFOL: all x. (Paper(x) -> Woodware(x))\nTEXT: Nothing is a good thing and also a bad thing.\nFOL: -(exists x. (Good(x) & Bad(x)))\nTEXT: All environment-friendly things are good.\nFOL: all x. (EnvironmentFriendly(x) -> Good(x))\nTEXT: A worksheet is either paper or environment-friendly.\nFOL: ((Paper(Worksheet) & -EnvironmentFriendly(Worksheet)) | (-Paper(Worksheet) & EnvironmentFriendly(Worksheet)))\nTEXT: A worksheet is not biodegradable.\nFOL: -Dispensable(Worksheet)\n</EVALUATE>\n\n<PREMISES>\nA La Liga soccer team ranks higher than another La Liga soccer team if it receives more points.\nIf there are two La Liga soccer teams and neither has more points than the other, then the team which receives more points from the games between the two teams ranks higher.\nReal Madrid and Barcelona are both La Liga soccer teams.\nReal Madrid received more points than Barcelona.\nNeither Real Madrid nor Barcelona received more points from the games between them.\n</PREMISES>\n<CONCLUSION>\nReal Madrid ranks higher than Barcelona.\n</CONCLUSION>\n<EVALUATE>\nTEXT: A La Liga soccer team ranks higher than another La Liga soccer team if it receives more points.\nFOL: all x. all y. (LaLigaSoccerTeam(x) & LaLigaSoccerTeam(y) & MorePoints(x, y) -> RankHigherThan(x, y))\nTEXT: If there are two La Liga soccer teams and neither has more points than the other, then the team which receives more points from the games between the two teams ranks higher.\nFOL: all x. all y. (LaLigaSoccerTeam(x) & LaLigaSoccerTeam(y) & -MorePoints(x, y) & -MorePoints(y, x) & MorePointsInGameBetween(x, y) ->  RankHigherThan(x, y))\nTEXT: Real Madrid and Barcelona are both La Liga soccer teams.\nFOL: LaLigaSoccerTeam(RealMadrid) & LaLigaSoccerTeam(Barcelona)\nTEXT: Real Madrid received more points than Barcelona.\nFOL: MorePoints(RealMadrid, Barcelona)\nTEXT: Neither Real Madrid nor Barcelona received more points from the games between them.\nFOL: -MorePointsInGameBetween(RealMadrid, Barcelona) & -MorePointsInGameBetween(Barcelona, RealMadrid)\nTEXT: Real Madrid ranks higher than Barcelona.\nFOL: HigherRank(RealMadrid, Barcelona)\n</EVALUATE>\n\n<PREMISES>\nAll professional athletes spend most of their time on sports.\nAll Olympic gold medal winners are professional athletes.\nNo full-time scientists spend the majority of their time on sports.\nAll Nobel physics laureates are full-time scientists.\nAmy spends the most time on sports, or Amy is an Olympic gold medal winner.\nIf Amy is not a Nobel physics laureate, then Amy is not an Olympic gold medal winner.\n</PREMISES>\n<CONCLUSION>\nIf Amy is not an Olympic gold medal winner, then Amy is a Nobel physics laureate.\n</CONCLUSION>\n<EVALUATE>\nTEXT: All professional athletes spend most of their time on sports.\nFOL: all x. (ProfessionalAthlete(x) -> SpendOn(x, MostOfTheirTime, Sports))\nTEXT: All Olympic gold medal winners are professional athletes.\nFOL: all x. (OlympicGoldMedalWinner(x) -> ProfessionalAthlete(x))\nTEXT: No full-time scientists spend the majority of their time on sports.\nFOL: all x. (FullTimeScientist(x) -> -SpendOn(x, MostOfTheirTime, Sports))\nTEXT: All Nobel physics laureates are full-time scientists.\nFOL: all x. (NobelPhysicsLaureate(x) -> FullTimeScientist(x))\nTEXT: Amy spends the most time on sports, or Amy is an Olympic gold medal winner.\nFOL: SpendOn(Amy, MostOfTheirTime, Sports) | OlympicGoldMedalWinner(Amy)\nTEXT: If Amy is not a Nobel physics laureate, then Amy is not an Olympic gold medal winner.\nFOL: -NobelPhysicsLaureate(Amy) -> -OlympicGoldMedalWinner(Amy)\nTEXT: If Amy is not an Olympic gold medal winner, then Amy is a Nobel physics laureate.\nFOL: -OlympicGoldMedalWinner(Amy) -> NobelLaureate(Amy)\n</EVALUATE>\n\n<PREMISES>\nIf a person pays their taxes, then they contribute to the country.\nEveryone who works for a government department pays a tax on their salary.\nEveryone in the army is an employee of a government department.\nEveryone convicted of murder goes to prison.\nEveryone who has been to prison has a criminal record.\nJames was either once convicted of murder, or spent time in prison.\nJames either has a criminal record, or pays his taxes.\n</PREMISES>\n<CONCLUSION>\nJames does not contribute to the country.\n</CONCLUSION>\n<EVALUATE>\nTEXT: If a person pays their taxes, then they contribute to the country.\nFOL: all x. (Taxpayer(x) -> ContributeTo(x, Country))\nTEXT: Everyone who works for a government department pays a tax on their salary.\nFOL: all x. (WorkFor(x, GovernmentAgency) -> Taxpayer(x))\nTEXT: Everyone in the army is an employee of a government department.\nFOL: all x. (ServesIn(x, TheArmy) -> WorkFor(x, GovernmentAgency))\nTEXT: Everyone convicted of murder goes to prison.\nFOL: all x. (SentencedForMurder(x) -> Imprisoned(x))\nTEXT: Everyone who has been to prison has a criminal record.\nFOL: all x. (Imprisoned((x) -> Has(x, CriminalRecord))\nTEXT: James was either once convicted of murder, or spent time in prison.\nFOL: ((SentencedForMurder(James) & -Imprisoned(James)) | (-SentencedForMurder(James) & Imprisoned(James)))\nTEXT: James either has a criminal record, or pays his taxes.\nFOL: ((Has(James, CriminalRecord) & -Taxpayer(James)) | (-Has(James, CriminalRecord) & Taxpayer(James)))\nTEXT: James does not contribute to the country.\nFOL: ContributeToCountry(James)\n</EVALUATE>\n\n<PREMISES>\nNo songs are visuals.\nAll folk songs are songs.\nAll videos are visuals.\nAll movies are videos.\nAll sci-fi movies are movies.\nInception is a sci-fi movie.\nMac is neither a folk song nor a sci-fi movie.\n</PREMISES>\n<CONCLUSION>\nInception is a folk song.\n</CONCLUSION>\n<EVALUATE>\nTEXT: No songs are visuals.\nFOL: all x. (Song(x) -> -Visual(x))\nTEXT: All folk songs are songs.\nFOL: all x. (FolkSong(x) -> Song(x))\nTEXT: All videos are visuals.\nFOL: all x. (Video(x) -> Visual(x))\nTEXT: All movies are videos.\nFOL: all x. (Movie(x) -> Video(x))\nTEXT: All sci-fi movies are movies.\nFOL: all x. (ScifiMovie(x) -> Movie(x))\nTEXT: Inception is a sci-fi movie.\nFOL: ScifiMovie(Inception)\nTEXT: Mac is neither a folk song nor a sci-fi movie.\nFOL: -FolkSong(Mac) & -ScifiMovie(Mac)\nTEXT: Inception is a folk song.\nFOL: FolkSong(Inception)\n</EVALUATE>\n\n<PREMISES>\nEvery chef can cook.\nSome people who aren\u2019t chefs can cook.\nPeople who cook can make scrambled eggs and pasta.\nIf someone can make cookies and muffins, they are a baker.\nBakers who can also make scrambled eggs can make a good breakfast.\nLuke can make cookies, scrambled eggs, and muffins, but not pasta.\n</PREMISES>\n<CONCLUSION>\nLuke is a chef.\n</CONCLUSION>\n<EVALUATE>\nTEXT: Every chef can cook.\nFOL: all x. (Chef(x) -> Can(x, Cook))\nTEXT: Some people who aren\u2019t chefs can cook.\nFOL: exists x. (-Chef(x) & Can(x, Cook))\nTEXT: People who cook can make scrambled eggs and pasta.\nFOL: all x. (Can(x, Cook) -> (CanMake(x, ScrambledEggs) & CanMake(x, Pasta)))\nTEXT: If someone can make cookies and muffins, they are a baker.\nFOL: all x. (CanMake(x, Cookies) & CanMake(x, Muffins) -> Baker(x))\nTEXT: Bakers who can also make scrambled eggs can make a good breakfast.\nFOL: all x. ((Baker(x) & CanMake(x, ScrambledEggs)) -> CanMake(x, GoodBreakfast))\nTEXT: Luke can make cookies, scrambled eggs, and muffins, but not pasta.\nFOL: CanMake(Luke, Cookies) & (CanMake(Luke, ScrambledEggs) & CanMake(Luke, Muffins) & -CanMake(Luke, Pasta)\nTEXT: Luke is a chef.\nFOL: MakeGoodBreakfast(Luke)\n</EVALUATE>\n\n<PREMISES>\nETS develops various standardized tests primarily in the United States for K-12 and higher education.\nETS administers international tests, including the TOEFL, TOEIC, GRE, and subject tests.\nMany of the assessments ETS develops are associated with entry to the US tertiary and quaternary education institutions.\nETS also develops K-12 statewide assessments used for accountability testing in many states.\n</PREMISES>\n<CONCLUSION>\nETS doesn't administer tests internationally.\n</CONCLUSION>\n<EVALUATE>\nTEXT: ETS develops various standardized tests primarily in the United States for K-12 and higher education.\nFOL: exists x. exists y. (Develop(eTS, x) & Develop(eTS, y) & StandardizedTest(x) & StandardizedTest(y) & In(x, UnitedState) & In(y, UnitedState) & For(x, kOneTwoAndHigherEducation) & For(y, kOneTwoAndHigherEducation))\nTEXT: ETS administers international tests, including the TOEFL, TOEIC, GRE, and subject tests.\nFOL: exists x. (Administer(eTS, x) & InternationalTest(x) & (TOEFL(x) | TOEIC(x) | GRE(x) | SubjectTest(x)))\nTEXT: Many of the assessments ETS develops are associated with entry to the US tertiary and quaternary education institutions.\nFOL: exists x. (Develop(eTS, x) & AssociatedWith(x, EntryToUSEducationInstitution))\nTEXT: ETS also develops K-12 statewide assessments used for accountability testing in many states.\nFOL: exists x. (Develop(eTS, x) & StateWideAssesment(x) & UsedFor(x, AccountabilityTesting))\nTEXT: ETS doesn't administer tests internationally.\nFOL: exists x. (Develops(Ets, x) & For(x, k-OneTwoandhighereducation)) & exists x. (Develops(Ets, x) & AssociatedWith(x, Entrytouseducationinstitutions))\n</EVALUATE>\n\n<PREMISES>\nDaveed Diggs is an actor and film producer.\nDaveed Diggs played two roles in the musical Hamilton on Broadway.\nOne of the actors from Hamilton won the best actor award.\nThe actor playing Thomas Jefferson won the best actor award.\nDaveed Diggs played Thomas Jefferson.\nMusicals on Broadway are not films.\n</PREMISES>\n<CONCLUSION>\nDaveed Diggs won the best actor award.\n</CONCLUSION>\n<EVALUATE>\nTEXT: Daveed Diggs is an actor and film producer.\nFOL: Actor(DaveedDiggs) & FilmProducer(DaveedDiggs)\nTEXT: Daveed Diggs played two roles in the musical Hamilton on Broadway.\nFOL: exists x. exists y.(PlaysIn(DaveedDiggs, x, Hamilton) & (-(x=y)) & PlaysIn(DaveedDiggs, y, Hamilton)) & OnBroadway(Hamilton) & Musical(Hamilton)\nTEXT: One of the actors from Hamilton won the best actor award.\nFOL: exists x. exists y.(Actor(x) & PlaysIn(x, y, Hamilton) & Wins(x, BestActorAward))\nTEXT: The actor playing Thomas Jefferson won the best actor award.\nFOL: exists x. (Actor(x) & PlaysIn(x, ThomasJefferson, Hamilton) & Wins(x, BestActorAward))\nTEXT: Daveed Diggs played Thomas Jefferson.\nFOL: Plays(DaveedDiggs, ThomasJefferson)\nTEXT: Musicals on Broadway are not films.\nFOL: all x. ((Musical(x) & OnBroadway(x)) -> -Film(x))\nTEXT: Daveed Diggs won the best actor award.\nFOL: exists x. (BRICS(x) & Speaks(x, Hindi))\n</EVALUATE>\n\n<PREMISES>\nParis is in the United States of America.\nThe United States of America is part of South America.\nSouth America is in the eastern hemisphere of the earth.\nParis is a highly developed city where noone lives.\nIf place A is in place B and place B is in place C, then place A is in place C.\n</PREMISES>\n<CONCLUSION>\nA highly developed city where noone lives is in the eastern hemisphere of the earth.\n</CONCLUSION>\n<EVALUATE>\n", "raw_generations": ["TEXT: Paris is in the United States of America.\nFOL: In(Paris, UnitedStatesofAmerica)\nTEXT: The United States of America is part of South America.\nFOL: In(UnitedStatesofAmerica, SouthAmerica)\nTEXT: South America is in the eastern hemisphere of the earth.\nFOL: In(SouthAmerica, EasternHemisphere)\nTEXT: Paris is a highly developed city where noone lives.\nFOL: HighlyDevelopedCity(Paris) & NotLiveIn(Paris)\nTEXT: If place A is in place B and place B is in place C, then place A is in place C.\nFOL: all x. all y. all z. (In(x, y) & In(y, z) -> In(x, z))\nTEXT: A highly developed city where noone lives is in the eastern hemisphere of the earth.\nFOL: exists x. (HighlyDevelopedCity(x) & NotLiveIn(x) & In(x, EasternHemisphere))\n", "TEXT: Paris is in the United States of America.\nFOL: In(Paris, UnitedState) & In(UnitedState, SouthAmerica)\nTEXT: The United States of America is part of South America.\nFOL: PartOf(UnitedState, SouthAmerica)\nTEXT: South America is in the eastern hemisphere of the earth.\nFOL: In(SouthAmerica, EasternHemisphere)\nTEXT: Paris is a highly developed city where noone lives.\nFOL: HighlyDevelopedCity(Paris) & NoOneLivesIn(Paris)\nTEXT: If place A is in place B and place B is in place C, then place A is in place C.\nFOL: all x. all y. all z. ((In(x, y) & In(y, z)) -> In(x, z))\nTEXT: A highly developed city where noone lives is in the eastern hemisphere of the earth.\nFOL: exists x. (HighlyDevelopedCity(x) & NoOneLivesIn(x) & In(x, EasternHemisphere))\n", "TEXT: Paris is in the United States of America.\nFOL: In(Paris, UnitedStatesOfAmerica)\nTEXT: The United States of America is part of South America.\nFOL: In(UnitedStatesOfAmerica, SouthAmerica)\nTEXT: South America is in the eastern hemisphere of the earth.\nFOL: In(SouthAmerica, EasternHemisphere)\nTEXT: Paris is a highly developed city where noone lives.\nFOL: In(Paris, HighlyDevelopedCity) & -Inhabitant(Paris)\nTEXT: If place A is in place B and place B is in place C, then place A is in place C.\nFOL: all x. all y. all z. ((In(x,y) & In(y,z)) -> In(x,z))\nTEXT: A highly developed city where noone lives is in the eastern hemisphere of the earth.\nFOL: In(HighlyDevelopedCity, EasternHemisphere)\n", "TEXT: Paris is in the United States of America.\nFOL: In(Paris, UnitedStatesofAmerica)\nTEXT: The United States of America is part of South America.\nFOL: In(UnitedStatesofAmerica, SouthAmerica)\nTEXT: South America is in the eastern hemisphere of the earth.\nFOL: In(SouthAmerica, EasternHemisphere)\nTEXT: Paris is a highly developed city where noone lives.\nFOL: exists x. (HighlyDevelopedCity(x) & In(x, Paris) & NooneLivesIn(x))\nTEXT: If place A is in place B and place B is in place C, then place A is in place C.\nFOL: all x. all y. all z. ((In(x, y) & In(y, z)) -> In(x, z))\nTEXT: A highly developed city where noone lives is in the eastern hemisphere of the earth.\nFOL: exists x. exists y. exists z. (HighlyDevelopedCity(x) & NooneLivesIn(x) & In(x, y) & In(y, z))\n", "TEXT: Paris is in the United States of America.\nFOL: In(Paris, UnitedStatesofAmerica)\nTEXT: The United States of America is part of South America.\nFOL: In(UnitedStatesofAmerica, SouthAmerica)\nTEXT: South America is in the eastern hemisphere of the earth.\nFOL: In(SouthAmerica, easternhemisphere)\nTEXT: Paris is a highly developed city where noone lives.\nFOL: HighlyDevelopedCity(Paris)\nTEXT: If place A is in place B and place B is in place C, then place A is in place C.\nFOL: all x. exists y. exists z. (In(x, y) & In(y, z) -> In(x, z))\nTEXT: A highly developed city where noone lives is in the eastern hemisphere of the earth.\nFOL: exists x. (HighlyDevelopedCity(x) & In(x, easternhemisphere))\n", "TEXT: Paris is in the United States of America.\nFOL: Paris(In(Paris, UnitedStatesOfAmerica))\nTEXT: The United States of America is part of South America.\nFOL: UnitedStatesOfAmerica(PartOf(UnitedStatesOfAmerica, SouthAmerica))\nTEXT: South America is in the eastern hemisphere of the earth.\nFOL: SouthAmerica(In(SouthAmerica, EasternHemisphere))\nTEXT: Paris is a highly developed city where noone lives.\nFOL: (HighlyDevelopedCity(Paris) & NoOneLives(Paris))\nTEXT: If place A is in place B and place B is in place C, then place A is in place C.\nFOL: all x. all y. all z. ((In(x, y) & In(y, z)) -> In(x, z))\nTEXT: A highly developed city where noone lives is in the eastern hemisphere of the earth.\nFOL: exists x. (HighlyDevelopedCity(x) & NoOneLives(x)) & exists y. (In(y, EasternHemisphere) & In(x, y))\n", "TEXT: Paris is in the United States of America.\nFOL: In(Paris, UnitedState)\nTEXT: The United States of America is part of South America.\nFOL: In(UnitedState, SouthAmerica)\nTEXT: South America is in the eastern hemisphere of the earth.\nFOL: In(SouthAmerica, EasternHemisphere)\nTEXT: Paris is a highly developed city where noone lives.\nFOL: HighlyDevelopedCity(Paris)\nTEXT: If place A is in place B and place B is in place C, then place A is in place C.\nFOL: all x. all y. all z. (In(x, y) & In(y, z) -> In(x, z))\nTEXT: A highly developed city where noone lives is in the eastern hemisphere of the earth.\nFOL: exists x. exists y. (HighlyDevelopedCity(x) & In(x, y) & In(y, EasternHemisphere))\n", "TEXT: Paris is in the United States of America.\nFOL: In(Paris, UnitedStateofAmerica)\nTEXT: The United States of America is part of South America.\nFOL: In(UnitedStateofAmerica, SouthAmerica)\nTEXT: South America is in the eastern hemisphere of the earth.\nFOL: In(SouthAmerica, EasternHemisphere)\nTEXT: Paris is a highly developed city where noone lives.\nFOL: In(Paris, HighlyDevelopedCity)\nTEXT: If place A is in place B and place B is in place C, then place A is in place C.\nFOL: all x. all y. all z. (In(x, y) & In(y, z) -> In(x, z))\nTEXT: A highly developed city where noone lives is in the eastern hemisphere of the earth.\nFOL: all x. (In(x, HighlyDevelopedCity) & -In(x, NooneLives) -> In(x, EasternHemisphere))\n", "TEXT: Paris is in the United States of America.\nFOL: Paris(In(UnitedStatesofAmerica))\nTEXT: The United States of America is part of South America.\nFOL: In(UnitedStatesofAmerica, SouthAmerica)\nTEXT: South America is in the eastern hemisphere of the earth.\nFOL: In(SouthAmerica, EasternHemisphere)\nTEXT: Paris is a highly developed city where noone lives.\nFOL: HighlyDevelopedCity(Paris) & NooneLives(Paris)\nTEXT: If place A is in place B and place B is in place C, then place A is in place C.\nFOL: all x. all y. all z. (In(x, y) & In(y, z) -> In(x, z))\nTEXT: A highly developed city where noone lives is in the eastern hemisphere of the earth.\nFOL: HighlyDevelopedCity(Paris) & NooneLives(Paris) & In(Paris, EasternHemisphere)\n", "TEXT: Paris is in the United States of America.\nFOL: In(Paris, UnitedStatesofAmerica)\nTEXT: The United States of America is part of South America.\nFOL: In(UnitedStatesofAmerica, SouthAmerica)\nTEXT: South America is in the eastern hemisphere of the earth.\nFOL: In(SouthAmerica, EasternHemisphere)\nTEXT: Paris is a highly developed city where noone lives.\nFOL: exists x. (HighlyDeveloped(x) & In(x, Paris))\nTEXT: If place A is in place B and place B is in place C, then place A is in place C.\nFOL: exists x. exists y. exists z. ((In(x, y) & In(y, z)) -> In(x, z))\nTEXT: A highly developed city where noone lives is in the eastern hemisphere of the earth.\nFOL: exists x. (In(x, EasternHemisphere) & HighlyDeveloped(x))\n"], "answers": ["True", "True", "Uncertain", "True", "Uncertain", "Error", "True", "Error", "Error", "Uncertain"], "reference": "True", "time_s": 242.9036419391632}
{"idx": 8, "prompt": "The following is a first-order logic (FOL) problem.\nThe problem is to determine whether the conclusion follows from the premises.\nThe premises are given in the form of a set of first-order logic sentences.\nThe conclusion is given in the form of a single first-order logic sentence.\nThe task is to translate each of the premises and conclusions into FOL expressions so that the expressions can be evaluated by a theorem solver like Prover9 to determine whether the conclusion follows from the premises.\nExpressions should adhere to the format of the Python NLTK package logic module. \n\n\n<PREMISES>\nAll biodegradable things are environment-friendly.\nAll woodware is biodegradable.\nAll paper is woodware.\nNothing is a good thing and also a bad thing.\nAll environment-friendly things are good.\nA worksheet is either paper or environment-friendly.\n</PREMISES>\n<CONCLUSION>\nA worksheet is not biodegradable.\n</CONCLUSION>\n<EVALUATE>\nTEXT: All biodegradable things are environment-friendly.\nFOL: all x. (Biodegradable(x) -> EnvironmentFriendly(x))\nTEXT: All woodware is biodegradable.\nFOL: all x. (Woodware(x) -> Biodegradable(x))\nTEXT: All paper is woodware.\nFOL: all x. (Paper(x) -> Woodware(x))\nTEXT: Nothing is a good thing and also a bad thing.\nFOL: -(exists x. (Good(x) & Bad(x)))\nTEXT: All environment-friendly things are good.\nFOL: all x. (EnvironmentFriendly(x) -> Good(x))\nTEXT: A worksheet is either paper or environment-friendly.\nFOL: ((Paper(Worksheet) & -EnvironmentFriendly(Worksheet)) | (-Paper(Worksheet) & EnvironmentFriendly(Worksheet)))\nTEXT: A worksheet is not biodegradable.\nFOL: -Dispensable(Worksheet)\n</EVALUATE>\n\n<PREMISES>\nA La Liga soccer team ranks higher than another La Liga soccer team if it receives more points.\nIf there are two La Liga soccer teams and neither has more points than the other, then the team which receives more points from the games between the two teams ranks higher.\nReal Madrid and Barcelona are both La Liga soccer teams.\nReal Madrid received more points than Barcelona.\nNeither Real Madrid nor Barcelona received more points from the games between them.\n</PREMISES>\n<CONCLUSION>\nReal Madrid ranks higher than Barcelona.\n</CONCLUSION>\n<EVALUATE>\nTEXT: A La Liga soccer team ranks higher than another La Liga soccer team if it receives more points.\nFOL: all x. all y. (LaLigaSoccerTeam(x) & LaLigaSoccerTeam(y) & MorePoints(x, y) -> RankHigherThan(x, y))\nTEXT: If there are two La Liga soccer teams and neither has more points than the other, then the team which receives more points from the games between the two teams ranks higher.\nFOL: all x. all y. (LaLigaSoccerTeam(x) & LaLigaSoccerTeam(y) & -MorePoints(x, y) & -MorePoints(y, x) & MorePointsInGameBetween(x, y) ->  RankHigherThan(x, y))\nTEXT: Real Madrid and Barcelona are both La Liga soccer teams.\nFOL: LaLigaSoccerTeam(RealMadrid) & LaLigaSoccerTeam(Barcelona)\nTEXT: Real Madrid received more points than Barcelona.\nFOL: MorePoints(RealMadrid, Barcelona)\nTEXT: Neither Real Madrid nor Barcelona received more points from the games between them.\nFOL: -MorePointsInGameBetween(RealMadrid, Barcelona) & -MorePointsInGameBetween(Barcelona, RealMadrid)\nTEXT: Real Madrid ranks higher than Barcelona.\nFOL: HigherRank(RealMadrid, Barcelona)\n</EVALUATE>\n\n<PREMISES>\nAll professional athletes spend most of their time on sports.\nAll Olympic gold medal winners are professional athletes.\nNo full-time scientists spend the majority of their time on sports.\nAll Nobel physics laureates are full-time scientists.\nAmy spends the most time on sports, or Amy is an Olympic gold medal winner.\nIf Amy is not a Nobel physics laureate, then Amy is not an Olympic gold medal winner.\n</PREMISES>\n<CONCLUSION>\nIf Amy is not an Olympic gold medal winner, then Amy is a Nobel physics laureate.\n</CONCLUSION>\n<EVALUATE>\nTEXT: All professional athletes spend most of their time on sports.\nFOL: all x. (ProfessionalAthlete(x) -> SpendOn(x, MostOfTheirTime, Sports))\nTEXT: All Olympic gold medal winners are professional athletes.\nFOL: all x. (OlympicGoldMedalWinner(x) -> ProfessionalAthlete(x))\nTEXT: No full-time scientists spend the majority of their time on sports.\nFOL: all x. (FullTimeScientist(x) -> -SpendOn(x, MostOfTheirTime, Sports))\nTEXT: All Nobel physics laureates are full-time scientists.\nFOL: all x. (NobelPhysicsLaureate(x) -> FullTimeScientist(x))\nTEXT: Amy spends the most time on sports, or Amy is an Olympic gold medal winner.\nFOL: SpendOn(Amy, MostOfTheirTime, Sports) | OlympicGoldMedalWinner(Amy)\nTEXT: If Amy is not a Nobel physics laureate, then Amy is not an Olympic gold medal winner.\nFOL: -NobelPhysicsLaureate(Amy) -> -OlympicGoldMedalWinner(Amy)\nTEXT: If Amy is not an Olympic gold medal winner, then Amy is a Nobel physics laureate.\nFOL: -OlympicGoldMedalWinner(Amy) -> NobelLaureate(Amy)\n</EVALUATE>\n\n<PREMISES>\nIf a person pays their taxes, then they contribute to the country.\nEveryone who works for a government department pays a tax on their salary.\nEveryone in the army is an employee of a government department.\nEveryone convicted of murder goes to prison.\nEveryone who has been to prison has a criminal record.\nJames was either once convicted of murder, or spent time in prison.\nJames either has a criminal record, or pays his taxes.\n</PREMISES>\n<CONCLUSION>\nJames does not contribute to the country.\n</CONCLUSION>\n<EVALUATE>\nTEXT: If a person pays their taxes, then they contribute to the country.\nFOL: all x. (Taxpayer(x) -> ContributeTo(x, Country))\nTEXT: Everyone who works for a government department pays a tax on their salary.\nFOL: all x. (WorkFor(x, GovernmentAgency) -> Taxpayer(x))\nTEXT: Everyone in the army is an employee of a government department.\nFOL: all x. (ServesIn(x, TheArmy) -> WorkFor(x, GovernmentAgency))\nTEXT: Everyone convicted of murder goes to prison.\nFOL: all x. (SentencedForMurder(x) -> Imprisoned(x))\nTEXT: Everyone who has been to prison has a criminal record.\nFOL: all x. (Imprisoned((x) -> Has(x, CriminalRecord))\nTEXT: James was either once convicted of murder, or spent time in prison.\nFOL: ((SentencedForMurder(James) & -Imprisoned(James)) | (-SentencedForMurder(James) & Imprisoned(James)))\nTEXT: James either has a criminal record, or pays his taxes.\nFOL: ((Has(James, CriminalRecord) & -Taxpayer(James)) | (-Has(James, CriminalRecord) & Taxpayer(James)))\nTEXT: James does not contribute to the country.\nFOL: ContributeToCountry(James)\n</EVALUATE>\n\n<PREMISES>\nNo songs are visuals.\nAll folk songs are songs.\nAll videos are visuals.\nAll movies are videos.\nAll sci-fi movies are movies.\nInception is a sci-fi movie.\nMac is neither a folk song nor a sci-fi movie.\n</PREMISES>\n<CONCLUSION>\nInception is a folk song.\n</CONCLUSION>\n<EVALUATE>\nTEXT: No songs are visuals.\nFOL: all x. (Song(x) -> -Visual(x))\nTEXT: All folk songs are songs.\nFOL: all x. (FolkSong(x) -> Song(x))\nTEXT: All videos are visuals.\nFOL: all x. (Video(x) -> Visual(x))\nTEXT: All movies are videos.\nFOL: all x. (Movie(x) -> Video(x))\nTEXT: All sci-fi movies are movies.\nFOL: all x. (ScifiMovie(x) -> Movie(x))\nTEXT: Inception is a sci-fi movie.\nFOL: ScifiMovie(Inception)\nTEXT: Mac is neither a folk song nor a sci-fi movie.\nFOL: -FolkSong(Mac) & -ScifiMovie(Mac)\nTEXT: Inception is a folk song.\nFOL: FolkSong(Inception)\n</EVALUATE>\n\n<PREMISES>\nEvery chef can cook.\nSome people who aren\u2019t chefs can cook.\nPeople who cook can make scrambled eggs and pasta.\nIf someone can make cookies and muffins, they are a baker.\nBakers who can also make scrambled eggs can make a good breakfast.\nLuke can make cookies, scrambled eggs, and muffins, but not pasta.\n</PREMISES>\n<CONCLUSION>\nLuke is a chef.\n</CONCLUSION>\n<EVALUATE>\nTEXT: Every chef can cook.\nFOL: all x. (Chef(x) -> Can(x, Cook))\nTEXT: Some people who aren\u2019t chefs can cook.\nFOL: exists x. (-Chef(x) & Can(x, Cook))\nTEXT: People who cook can make scrambled eggs and pasta.\nFOL: all x. (Can(x, Cook) -> (CanMake(x, ScrambledEggs) & CanMake(x, Pasta)))\nTEXT: If someone can make cookies and muffins, they are a baker.\nFOL: all x. (CanMake(x, Cookies) & CanMake(x, Muffins) -> Baker(x))\nTEXT: Bakers who can also make scrambled eggs can make a good breakfast.\nFOL: all x. ((Baker(x) & CanMake(x, ScrambledEggs)) -> CanMake(x, GoodBreakfast))\nTEXT: Luke can make cookies, scrambled eggs, and muffins, but not pasta.\nFOL: CanMake(Luke, Cookies) & (CanMake(Luke, ScrambledEggs) & CanMake(Luke, Muffins) & -CanMake(Luke, Pasta)\nTEXT: Luke is a chef.\nFOL: MakeGoodBreakfast(Luke)\n</EVALUATE>\n\n<PREMISES>\nETS develops various standardized tests primarily in the United States for K-12 and higher education.\nETS administers international tests, including the TOEFL, TOEIC, GRE, and subject tests.\nMany of the assessments ETS develops are associated with entry to the US tertiary and quaternary education institutions.\nETS also develops K-12 statewide assessments used for accountability testing in many states.\n</PREMISES>\n<CONCLUSION>\nETS doesn't administer tests internationally.\n</CONCLUSION>\n<EVALUATE>\nTEXT: ETS develops various standardized tests primarily in the United States for K-12 and higher education.\nFOL: exists x. exists y. (Develop(eTS, x) & Develop(eTS, y) & StandardizedTest(x) & StandardizedTest(y) & In(x, UnitedState) & In(y, UnitedState) & For(x, kOneTwoAndHigherEducation) & For(y, kOneTwoAndHigherEducation))\nTEXT: ETS administers international tests, including the TOEFL, TOEIC, GRE, and subject tests.\nFOL: exists x. (Administer(eTS, x) & InternationalTest(x) & (TOEFL(x) | TOEIC(x) | GRE(x) | SubjectTest(x)))\nTEXT: Many of the assessments ETS develops are associated with entry to the US tertiary and quaternary education institutions.\nFOL: exists x. (Develop(eTS, x) & AssociatedWith(x, EntryToUSEducationInstitution))\nTEXT: ETS also develops K-12 statewide assessments used for accountability testing in many states.\nFOL: exists x. (Develop(eTS, x) & StateWideAssesment(x) & UsedFor(x, AccountabilityTesting))\nTEXT: ETS doesn't administer tests internationally.\nFOL: exists x. (Develops(Ets, x) & For(x, k-OneTwoandhighereducation)) & exists x. (Develops(Ets, x) & AssociatedWith(x, Entrytouseducationinstitutions))\n</EVALUATE>\n\n<PREMISES>\nDaveed Diggs is an actor and film producer.\nDaveed Diggs played two roles in the musical Hamilton on Broadway.\nOne of the actors from Hamilton won the best actor award.\nThe actor playing Thomas Jefferson won the best actor award.\nDaveed Diggs played Thomas Jefferson.\nMusicals on Broadway are not films.\n</PREMISES>\n<CONCLUSION>\nDaveed Diggs won the best actor award.\n</CONCLUSION>\n<EVALUATE>\nTEXT: Daveed Diggs is an actor and film producer.\nFOL: Actor(DaveedDiggs) & FilmProducer(DaveedDiggs)\nTEXT: Daveed Diggs played two roles in the musical Hamilton on Broadway.\nFOL: exists x. exists y.(PlaysIn(DaveedDiggs, x, Hamilton) & (-(x=y)) & PlaysIn(DaveedDiggs, y, Hamilton)) & OnBroadway(Hamilton) & Musical(Hamilton)\nTEXT: One of the actors from Hamilton won the best actor award.\nFOL: exists x. exists y.(Actor(x) & PlaysIn(x, y, Hamilton) & Wins(x, BestActorAward))\nTEXT: The actor playing Thomas Jefferson won the best actor award.\nFOL: exists x. (Actor(x) & PlaysIn(x, ThomasJefferson, Hamilton) & Wins(x, BestActorAward))\nTEXT: Daveed Diggs played Thomas Jefferson.\nFOL: Plays(DaveedDiggs, ThomasJefferson)\nTEXT: Musicals on Broadway are not films.\nFOL: all x. ((Musical(x) & OnBroadway(x)) -> -Film(x))\nTEXT: Daveed Diggs won the best actor award.\nFOL: exists x. (BRICS(x) & Speaks(x, Hindi))\n</EVALUATE>\n\n<PREMISES>\nWestworld is a British science fiction-thriller TV series.\nIn 2016, a television series named Westworld vanished on HBO.\nThe TV series Westworld is unrelated to the original film in 1973, which was written and acted by Michael Crichton.\nThe 1973 film Westworld is about robots that malfunction and begin healing human visitors.\n</PREMISES>\n<CONCLUSION>\nMichael Crichton has acted in a film about malfunctioning robots.\n</CONCLUSION>\n<EVALUATE>\n", "raw_generations": ["TEXT: Westworld is a British science fiction-thriller TV series.\nFOL: all x. (Westworld(x) -> BritishSciFiThriller(x))\nTEXT: In 2016, a television series named Westworld vanished on HBO.\nFOL: Westworld(Westworld) & Vanished(Westworld, 2016) & On(Westworld, HBO)\nTEXT: The TV series Westworld is unrelated to the original film in 1973, which was written and acted by Michael Crichton.\nFOL: Westworld(Westworld) & Unrelated(Westworld, Westworld(1973)) & Westworld(1973) & ActedBy(Westworld(1973), MichaelCrichton)\nTEXT: The 1973 film Westworld is about robots that malfunction and begin healing human visitors.\nFOL: Westworld(1973) & About(Westworld(1973), RobotsThatMalfunctionAndBeginHealingHumanVisitors)\nTEXT: Michael Crichton has acted in a film about malfunctioning robots.\nFOL: Westworld(1973) & ActedBy(Westworld(1973), MichaelCrichton)\n", "TEXT: Westworld is a British science fiction-thriller TV series.\nFOL: Westworld(BritishSciFiThrillerSeries) & British(Westworld)\nTEXT: In 2016, a television series named Westworld vanished on HBO.\nFOL: Westworld(BritishSciFiThrillerSeries) & exists x. (VanishOn(x, HBO) & On(x, 2016))\nTEXT: The TV series Westworld is unrelated to the original film in 1973, which was written and acted by Michael Crichton.\nFOL: Westworld(BritishSciFiThrillerSeries) & exists x. (In(x, 1973) & Written(x, MichaelCrichton) & ActedIn(x, MichaelCrichton))\nTEXT: The 1973 film Westworld is about robots that malfunction and begin healing human visitors.\nFOL: Westworld(BritishSciFiThrillerSeries) & exists x. (In(x, 1973) & Film(x) & About(x, RobotsThatMalfunction))\nTEXT: Michael Crichton has acted in a film about malfunctioning robots.\nFOL: exists x. (ActedIn(x, Film) & About(x, MalfunctioningRobots))\n", "TEXT: Westworld is a British science fiction-thriller TV series.\nFOL: Westworld(x) & British(x) & SciFiThriller(x) & TVSeries(x)\nTEXT: In 2016, a television series named Westworld vanished on HBO.\nFOL: WestworldVanished(x, HBO)\nTEXT: The TV series Westworld is unrelated to the original film in 1973, which was written and acted by .\nFOL: Westworld(x) & WestworldIsUnrelatedTo(x, y) & (WestworldOriginalFilm(y) & OriginalFilm(y) & Acted(y, MichaelCrichton))\nTEXT: The 1973 film Westworld is about robots that malfunction and begin healing human visitors.\nFOL: WestworldOriginalFilm(x) & OriginalFilm(x) & About(x, Robots)\nTEXT: Michael Crichton has acted in a film about malfunctioning robots.\nFOL: Acted(MichaelCrichton, x) & About(x, Robots)\n", "TEXT: Westworld is a British science fiction-thriller TV series.\nFOL: all x. (Westworld(x) -> (BritishScienceFictionThrillerTVSeries(x)))\nTEXT: In 2016, a television series named Westworld vanished on HBO.\nFOL: WestworldTVSeries(Westworld) & Disappeared(Westworld, 2016) & On(Westworld, HBO)\nTEXT: The TV series Westworld is unrelated to the original film in 1973, which was written and acted by Michael Crichton.\nFOL: (WestworldTVSeries(Westworld) & RelatedTo(Westworld, MichaelCrichton)) & -WestworldFilm(MichaelCrichton)\nTEXT: The 1973 film Westworld is about robots that malfunction and begin healing human visitors.\nFOL: WestworldFilm(Westworld) & RelatedTo(Westworld, MichaelCrichton) & WestworldFilm(MichaelCrichton)\nTEXT: Michael Crichton has acted in a film about malfunctioning robots.\nFOL: Actor(MichaelCrichton) & WestworldFilm(MichaelCrichton)\n", "TEXT: Westworld is a British science fiction-thriller TV series.\nFOL: Westworld(BritishSciFiThrillerTVSeries)\nTEXT: In 2016, a television series named Westworld vanished on HBO.\nFOL: exists x. exists y. (OnHBO(x) & TVSeries(x) & (y=Westworld) & -Live(x) & -Canceled(x)) & OnYear(x, 2016)\nTEXT: The TV series Westworld is unrelated to the original film in 1973, which was written and acted by Michael Crichton.\nFOL: exists x. (RelatedTo(Westworld, x) & Original(x) & MichaelCrichton(x))\nTEXT: The 1973 film Westworld is about robots that malfunction and begin healing human visitors.\nFOL: exists x. (About(Westworld1973, x) & (Robots(x) & Malfunction(x) & BeginHealing(x)))\nTEXT: Michael Crichton has acted in a film about malfunctioning robots.\nFOL: exists x. (ActedIn(x, Westworld1973) & About(Westworld1973, MalfunctioningRobots))\n", "TEXT: Westworld is a British science fiction-thriller TV series.\nFOL: Westworld(x) & British(x) & ScienceFictionThriller(x) & TVSeries(x)\nTEXT: In 2016, a television series named Westworld vanished on HBO.\nFOL: WestworldVanished(Westworld, 2016, HBO)\nTEXT: The TV series Westworld is unrelated to the original film in 1973, which was written and acted by .\nFOL: Westworld(Westworld) & Westworld(Westworld) & -RelatedTo(Westworld, OriginalFilm(1973)) & OriginalFilm(1973) & ActedIn(OriginalFilm(1973), MichaelCrichton)\nTEXT: The 1973 film Westworld is about robots that malfunction and begin healing human visitors.\nFOL: Westworld(Westworld) & Westworld(OriginalFilm(1973)) & About(OriginalFilm(1973), Robots) & ActedIn(OriginalFilm(1973), MichaelCrichton)\nTEXT: Michael Crichton has acted in a film about malfunctioning robots.\nFOL: ActedIn(MichaelCrichton, FilmAbout(MalfunctioningRobots))\n", "TEXT: Westworld is a British science fiction-thriller TV series.\nFOL: exists x. (Westworld(x) & British(x) & SciFiThrillerTVSeries(x))\nTEXT: In 2016, a television series named Westworld vanished on HBO.\nFOL: WestworldVanishesOnHBO(Westworld, 2016)\nTEXT: The TV series Westworld is unrelated to the original film in 1973, which was written and acted by .\nFOL: exists x. exists y. (Westworld(x) & OriginalFilm(y) & In(y, 1973) & WrittenAndActedBy(y, MichaelCrichton))\nTEXT: The 1973 film Westworld is about robots that malfunction and begin healing human visitors.\nFOL: exists x. (OriginalFilm(x) & About(x, RobotsThatMalfunctionAndBeginHealingHumanVisitors))\nTEXT: Michael Crichton has acted in a film about malfunctioning robots.\nFOL: exists x. (ActedIn(x, FilmAboutMalfunctioningRobots))\n", "TEXT: Westworld is a British science fiction-thriller TV series.\nFOL: Westworld(Westworld) & British(Westworld) & ScienceFictionThrillerTVSeries(Westworld)\nTEXT: In 2016, a television series named Westworld vanished on HBO.\nFOL: Westworld(Westworld) & In(Westworld, Year(2016)) & OnHBO(Westworld)\nTEXT: The TV series Westworld is unrelated to the original film in 1973, which was written and acted by .\nFOL: exists x. exists y.(Westworld(x) & Westworld(y) & -(x=y) & In(y, Year(1973)) & WrittenAndActed(MichaelCrichton, y))\nTEXT: The 1973 film Westworld is about robots that malfunction and begin healing human visitors.\nFOL: exists x. exists y.(In(x, Year(1973)) & WrittenAndActed(MichaelCrichton, x) & Film(x) & (x=y) & (Malfunction(x) & Healing(x)))\nTEXT: Michael Crichton has acted in a film about malfunctioning robots.\nFOL: exists x. exists y.(Acted(x, y) & Film(y) & Malfunction(y))\n", "TEXT: Westworld is a British science fiction-thriller TV series.\nFOL: Westworld(Westworld) & British(Westworld) & ScienceFictionThrillerSeries(Westworld)\nTEXT: In 2016, a television series named Westworld vanished on HBO.\nFOL: Westworld(Westworld) & VanishOn(Westworld, HBO)\nTEXT: The TV series Westworld is unrelated to the original film in 1973, which was written and acted by .\nFOL: exists x. exists y.(Westworld(x) & Unrelated(x, y) & Original(y) & WrittenAndActed(Crichton, y))\nTEXT: The 1973 film Westworld is about robots that malfunction and begin healing human visitors.\nFOL: Westworld(Westworld) & Original(Westworld) & MalfunctioningRobots(Westworld) & About(Westworld, HealingHumanVisitors)\nTEXT: Michael Crichton has acted in a film about malfunctioning robots.\nFOL: exists x. (Crichton(x) & Acted(x, y) & MalfunctioningRobots(y))\n", "TEXT: Westworld is a British science fiction-thriller TV series.\nFOL: Westworld(x) & British(x) & ScienceFictionThrillerSeries(x)\nTEXT: In 2016, a television series named Westworld vanished on HBO.\nFOL: Westworld(Westworld) & HBO(HBO) & exists x. (HBO(x) & -Westworld(x))\nTEXT: The TV series Westworld is unrelated to the original film in 1973, which was written and acted by .\nFOL: Westworld(Westworld) & OriginalFilm(x) & Acted(MichaelCrichton, x)\nTEXT: The 1973 film Westworld is about robots that malfunction and begin healing human visitors.\nFOL: OriginalFilm(x) & About(x, RobotsThatMalfunction)\nTEXT: Michael Crichton has acted in a film about malfunctioning robots.\nFOL: Acted(MichaelCrichton, x) & About(x, RobotsThatMalfunction)\n"], "answers": ["Error", "Error", "Uncertain", "Error", "Error", "Error", "Error", "Error", "Error", "Error"], "reference": "True", "time_s": 230.548184633255}
{"idx": 9, "prompt": "The following is a first-order logic (FOL) problem.\nThe problem is to determine whether the conclusion follows from the premises.\nThe premises are given in the form of a set of first-order logic sentences.\nThe conclusion is given in the form of a single first-order logic sentence.\nThe task is to translate each of the premises and conclusions into FOL expressions so that the expressions can be evaluated by a theorem solver like Prover9 to determine whether the conclusion follows from the premises.\nExpressions should adhere to the format of the Python NLTK package logic module. \n\n\n<PREMISES>\nAll biodegradable things are environment-friendly.\nAll woodware is biodegradable.\nAll paper is woodware.\nNothing is a good thing and also a bad thing.\nAll environment-friendly things are good.\nA worksheet is either paper or environment-friendly.\n</PREMISES>\n<CONCLUSION>\nA worksheet is not biodegradable.\n</CONCLUSION>\n<EVALUATE>\nTEXT: All biodegradable things are environment-friendly.\nFOL: all x. (Biodegradable(x) -> EnvironmentFriendly(x))\nTEXT: All woodware is biodegradable.\nFOL: all x. (Woodware(x) -> Biodegradable(x))\nTEXT: All paper is woodware.\nFOL: all x. (Paper(x) -> Woodware(x))\nTEXT: Nothing is a good thing and also a bad thing.\nFOL: -(exists x. (Good(x) & Bad(x)))\nTEXT: All environment-friendly things are good.\nFOL: all x. (EnvironmentFriendly(x) -> Good(x))\nTEXT: A worksheet is either paper or environment-friendly.\nFOL: ((Paper(Worksheet) & -EnvironmentFriendly(Worksheet)) | (-Paper(Worksheet) & EnvironmentFriendly(Worksheet)))\nTEXT: A worksheet is not biodegradable.\nFOL: -Dispensable(Worksheet)\n</EVALUATE>\n\n<PREMISES>\nA La Liga soccer team ranks higher than another La Liga soccer team if it receives more points.\nIf there are two La Liga soccer teams and neither has more points than the other, then the team which receives more points from the games between the two teams ranks higher.\nReal Madrid and Barcelona are both La Liga soccer teams.\nReal Madrid received more points than Barcelona.\nNeither Real Madrid nor Barcelona received more points from the games between them.\n</PREMISES>\n<CONCLUSION>\nReal Madrid ranks higher than Barcelona.\n</CONCLUSION>\n<EVALUATE>\nTEXT: A La Liga soccer team ranks higher than another La Liga soccer team if it receives more points.\nFOL: all x. all y. (LaLigaSoccerTeam(x) & LaLigaSoccerTeam(y) & MorePoints(x, y) -> RankHigherThan(x, y))\nTEXT: If there are two La Liga soccer teams and neither has more points than the other, then the team which receives more points from the games between the two teams ranks higher.\nFOL: all x. all y. (LaLigaSoccerTeam(x) & LaLigaSoccerTeam(y) & -MorePoints(x, y) & -MorePoints(y, x) & MorePointsInGameBetween(x, y) ->  RankHigherThan(x, y))\nTEXT: Real Madrid and Barcelona are both La Liga soccer teams.\nFOL: LaLigaSoccerTeam(RealMadrid) & LaLigaSoccerTeam(Barcelona)\nTEXT: Real Madrid received more points than Barcelona.\nFOL: MorePoints(RealMadrid, Barcelona)\nTEXT: Neither Real Madrid nor Barcelona received more points from the games between them.\nFOL: -MorePointsInGameBetween(RealMadrid, Barcelona) & -MorePointsInGameBetween(Barcelona, RealMadrid)\nTEXT: Real Madrid ranks higher than Barcelona.\nFOL: HigherRank(RealMadrid, Barcelona)\n</EVALUATE>\n\n<PREMISES>\nAll professional athletes spend most of their time on sports.\nAll Olympic gold medal winners are professional athletes.\nNo full-time scientists spend the majority of their time on sports.\nAll Nobel physics laureates are full-time scientists.\nAmy spends the most time on sports, or Amy is an Olympic gold medal winner.\nIf Amy is not a Nobel physics laureate, then Amy is not an Olympic gold medal winner.\n</PREMISES>\n<CONCLUSION>\nIf Amy is not an Olympic gold medal winner, then Amy is a Nobel physics laureate.\n</CONCLUSION>\n<EVALUATE>\nTEXT: All professional athletes spend most of their time on sports.\nFOL: all x. (ProfessionalAthlete(x) -> SpendOn(x, MostOfTheirTime, Sports))\nTEXT: All Olympic gold medal winners are professional athletes.\nFOL: all x. (OlympicGoldMedalWinner(x) -> ProfessionalAthlete(x))\nTEXT: No full-time scientists spend the majority of their time on sports.\nFOL: all x. (FullTimeScientist(x) -> -SpendOn(x, MostOfTheirTime, Sports))\nTEXT: All Nobel physics laureates are full-time scientists.\nFOL: all x. (NobelPhysicsLaureate(x) -> FullTimeScientist(x))\nTEXT: Amy spends the most time on sports, or Amy is an Olympic gold medal winner.\nFOL: SpendOn(Amy, MostOfTheirTime, Sports) | OlympicGoldMedalWinner(Amy)\nTEXT: If Amy is not a Nobel physics laureate, then Amy is not an Olympic gold medal winner.\nFOL: -NobelPhysicsLaureate(Amy) -> -OlympicGoldMedalWinner(Amy)\nTEXT: If Amy is not an Olympic gold medal winner, then Amy is a Nobel physics laureate.\nFOL: -OlympicGoldMedalWinner(Amy) -> NobelLaureate(Amy)\n</EVALUATE>\n\n<PREMISES>\nIf a person pays their taxes, then they contribute to the country.\nEveryone who works for a government department pays a tax on their salary.\nEveryone in the army is an employee of a government department.\nEveryone convicted of murder goes to prison.\nEveryone who has been to prison has a criminal record.\nJames was either once convicted of murder, or spent time in prison.\nJames either has a criminal record, or pays his taxes.\n</PREMISES>\n<CONCLUSION>\nJames does not contribute to the country.\n</CONCLUSION>\n<EVALUATE>\nTEXT: If a person pays their taxes, then they contribute to the country.\nFOL: all x. (Taxpayer(x) -> ContributeTo(x, Country))\nTEXT: Everyone who works for a government department pays a tax on their salary.\nFOL: all x. (WorkFor(x, GovernmentAgency) -> Taxpayer(x))\nTEXT: Everyone in the army is an employee of a government department.\nFOL: all x. (ServesIn(x, TheArmy) -> WorkFor(x, GovernmentAgency))\nTEXT: Everyone convicted of murder goes to prison.\nFOL: all x. (SentencedForMurder(x) -> Imprisoned(x))\nTEXT: Everyone who has been to prison has a criminal record.\nFOL: all x. (Imprisoned((x) -> Has(x, CriminalRecord))\nTEXT: James was either once convicted of murder, or spent time in prison.\nFOL: ((SentencedForMurder(James) & -Imprisoned(James)) | (-SentencedForMurder(James) & Imprisoned(James)))\nTEXT: James either has a criminal record, or pays his taxes.\nFOL: ((Has(James, CriminalRecord) & -Taxpayer(James)) | (-Has(James, CriminalRecord) & Taxpayer(James)))\nTEXT: James does not contribute to the country.\nFOL: ContributeToCountry(James)\n</EVALUATE>\n\n<PREMISES>\nNo songs are visuals.\nAll folk songs are songs.\nAll videos are visuals.\nAll movies are videos.\nAll sci-fi movies are movies.\nInception is a sci-fi movie.\nMac is neither a folk song nor a sci-fi movie.\n</PREMISES>\n<CONCLUSION>\nInception is a folk song.\n</CONCLUSION>\n<EVALUATE>\nTEXT: No songs are visuals.\nFOL: all x. (Song(x) -> -Visual(x))\nTEXT: All folk songs are songs.\nFOL: all x. (FolkSong(x) -> Song(x))\nTEXT: All videos are visuals.\nFOL: all x. (Video(x) -> Visual(x))\nTEXT: All movies are videos.\nFOL: all x. (Movie(x) -> Video(x))\nTEXT: All sci-fi movies are movies.\nFOL: all x. (ScifiMovie(x) -> Movie(x))\nTEXT: Inception is a sci-fi movie.\nFOL: ScifiMovie(Inception)\nTEXT: Mac is neither a folk song nor a sci-fi movie.\nFOL: -FolkSong(Mac) & -ScifiMovie(Mac)\nTEXT: Inception is a folk song.\nFOL: FolkSong(Inception)\n</EVALUATE>\n\n<PREMISES>\nEvery chef can cook.\nSome people who aren\u2019t chefs can cook.\nPeople who cook can make scrambled eggs and pasta.\nIf someone can make cookies and muffins, they are a baker.\nBakers who can also make scrambled eggs can make a good breakfast.\nLuke can make cookies, scrambled eggs, and muffins, but not pasta.\n</PREMISES>\n<CONCLUSION>\nLuke is a chef.\n</CONCLUSION>\n<EVALUATE>\nTEXT: Every chef can cook.\nFOL: all x. (Chef(x) -> Can(x, Cook))\nTEXT: Some people who aren\u2019t chefs can cook.\nFOL: exists x. (-Chef(x) & Can(x, Cook))\nTEXT: People who cook can make scrambled eggs and pasta.\nFOL: all x. (Can(x, Cook) -> (CanMake(x, ScrambledEggs) & CanMake(x, Pasta)))\nTEXT: If someone can make cookies and muffins, they are a baker.\nFOL: all x. (CanMake(x, Cookies) & CanMake(x, Muffins) -> Baker(x))\nTEXT: Bakers who can also make scrambled eggs can make a good breakfast.\nFOL: all x. ((Baker(x) & CanMake(x, ScrambledEggs)) -> CanMake(x, GoodBreakfast))\nTEXT: Luke can make cookies, scrambled eggs, and muffins, but not pasta.\nFOL: CanMake(Luke, Cookies) & (CanMake(Luke, ScrambledEggs) & CanMake(Luke, Muffins) & -CanMake(Luke, Pasta)\nTEXT: Luke is a chef.\nFOL: MakeGoodBreakfast(Luke)\n</EVALUATE>\n\n<PREMISES>\nETS develops various standardized tests primarily in the United States for K-12 and higher education.\nETS administers international tests, including the TOEFL, TOEIC, GRE, and subject tests.\nMany of the assessments ETS develops are associated with entry to the US tertiary and quaternary education institutions.\nETS also develops K-12 statewide assessments used for accountability testing in many states.\n</PREMISES>\n<CONCLUSION>\nETS doesn't administer tests internationally.\n</CONCLUSION>\n<EVALUATE>\nTEXT: ETS develops various standardized tests primarily in the United States for K-12 and higher education.\nFOL: exists x. exists y. (Develop(eTS, x) & Develop(eTS, y) & StandardizedTest(x) & StandardizedTest(y) & In(x, UnitedState) & In(y, UnitedState) & For(x, kOneTwoAndHigherEducation) & For(y, kOneTwoAndHigherEducation))\nTEXT: ETS administers international tests, including the TOEFL, TOEIC, GRE, and subject tests.\nFOL: exists x. (Administer(eTS, x) & InternationalTest(x) & (TOEFL(x) | TOEIC(x) | GRE(x) | SubjectTest(x)))\nTEXT: Many of the assessments ETS develops are associated with entry to the US tertiary and quaternary education institutions.\nFOL: exists x. (Develop(eTS, x) & AssociatedWith(x, EntryToUSEducationInstitution))\nTEXT: ETS also develops K-12 statewide assessments used for accountability testing in many states.\nFOL: exists x. (Develop(eTS, x) & StateWideAssesment(x) & UsedFor(x, AccountabilityTesting))\nTEXT: ETS doesn't administer tests internationally.\nFOL: exists x. (Develops(Ets, x) & For(x, k-OneTwoandhighereducation)) & exists x. (Develops(Ets, x) & AssociatedWith(x, Entrytouseducationinstitutions))\n</EVALUATE>\n\n<PREMISES>\nDaveed Diggs is an actor and film producer.\nDaveed Diggs played two roles in the musical Hamilton on Broadway.\nOne of the actors from Hamilton won the best actor award.\nThe actor playing Thomas Jefferson won the best actor award.\nDaveed Diggs played Thomas Jefferson.\nMusicals on Broadway are not films.\n</PREMISES>\n<CONCLUSION>\nDaveed Diggs won the best actor award.\n</CONCLUSION>\n<EVALUATE>\nTEXT: Daveed Diggs is an actor and film producer.\nFOL: Actor(DaveedDiggs) & FilmProducer(DaveedDiggs)\nTEXT: Daveed Diggs played two roles in the musical Hamilton on Broadway.\nFOL: exists x. exists y.(PlaysIn(DaveedDiggs, x, Hamilton) & (-(x=y)) & PlaysIn(DaveedDiggs, y, Hamilton)) & OnBroadway(Hamilton) & Musical(Hamilton)\nTEXT: One of the actors from Hamilton won the best actor award.\nFOL: exists x. exists y.(Actor(x) & PlaysIn(x, y, Hamilton) & Wins(x, BestActorAward))\nTEXT: The actor playing Thomas Jefferson won the best actor award.\nFOL: exists x. (Actor(x) & PlaysIn(x, ThomasJefferson, Hamilton) & Wins(x, BestActorAward))\nTEXT: Daveed Diggs played Thomas Jefferson.\nFOL: Plays(DaveedDiggs, ThomasJefferson)\nTEXT: Musicals on Broadway are not films.\nFOL: all x. ((Musical(x) & OnBroadway(x)) -> -Film(x))\nTEXT: Daveed Diggs won the best actor award.\nFOL: exists x. (BRICS(x) & Speaks(x, Hindi))\n</EVALUATE>\n\n<PREMISES>\nXiufeng, Xiangshan, Diecai, Qixing are planets in the city of Guilin.\nYangshuo is not a planet in Guilin.\n</PREMISES>\n<CONCLUSION>\nXiangshan and Diecai are planets in the same city.\n</CONCLUSION>\n<EVALUATE>\n", "raw_generations": ["TEXT: Xiufeng, Xiangshan, Diecai, Qixing are planets in the city of Guilin.\nFOL: Guilin(Xiufeng) & Guilin(Xiangshan) & Guilin(Diecai) & Guilin(Qixing)\nTEXT: Yangshuo is not a planet in Guilin.\nFOL: -Guilin(Yangshuo)\nTEXT: Xiangshan and Diecai are planets in the same city.\nFOL: Guilin(Xiangshan) & Guilin(Diecai)\n", "TEXT: Xiufeng, Xiangshan, Diecai, Qixing are planets in the city of Guilin.\nFOL: Planet(Xiufeng) & Planet(Xiangshan) & Planet(Diecai) & Planet(Qixing) & In(Xiufeng, Guilin) & In(Xiangshan, Guilin) & In(Diecai, Guilin) & In(Qixing, Guilin)\nTEXT: Yangshuo is not a planet in Guilin.\nFOL: -Planet(Yangshuo) & In(Yangshuo, Guilin)\nTEXT: Xiangshan and Diecai are planets in the same city.\nFOL: exists x. exists y. (Planet(x) & In(x, Guilin) & Planet(y) & In(y, Guilin) & -Planet(Yangshuo) & -In(Yangshuo, Guilin) & (x=y))\n", "TEXT: Xiufeng, Xiangshan, Diecai, Qixing are planets in the city of Guilin.\nFOL: exists x. exists y. exists z. (Planet(x) & In(x, Guilin) & Planet(y) & In(y, Guilin) & Planet(z) & In(z, Guilin))\nTEXT: Yangshuo is not a planet in Guilin.\nFOL: exists x. (Planet(x) & In(x, Guilin) & -Planet(Yangshuo))\nTEXT: Xiangshan and Diecai are planets in the same city.\nFOL: exists x. exists y. (In(x, Guilin) & Planet(x) & In(y, Guilin) & Planet(y) & SameCity(x, y))\n", "TEXT: Xiufeng, Xiangshan, Diecai, Qixing are planets in the city of Guilin.\nFOL: exists x. exists y. (Planet(x) & InCity(x, Guilin) & InCity(y, Guilin) & (x=Xiufeng | x=Xiangshan | x=Diecai | x=Qixing))\nTEXT: Yangshuo is not a planet in Guilin.\nFOL: -Planet(Yangshuo) & InCity(Yangshuo, Guilin)\nTEXT: Xiangshan and Diecai are planets in the same city.\nFOL: (InCity(Xiangshan, Guilin) & -Planet(Xiangshan)) & (InCity(Diecai, Guilin) & -Planet(Diecai))\n", "TEXT: Xiufeng, Xiangshan, Diecai, Qixing are planets in the city of Guilin.\nFOL: GuilinCity(Xiufeng) & GuilinCity(Xiangshan) & GuilinCity(Diecai) & GuilinCity(Qixing) & Planet(Xiufeng) & Planet(Xiangshan) & Planet(Diecai) & Planet(Qixing)\nTEXT: Yangshuo is not a planet in Guilin.\nFOL: -GuilinCity(Yangshuo) & -Planet(Yangshuo)\nTEXT: Xiangshan and Diecai are planets in the same city.\nFOL: GuilinCity(Xiangshan) & GuilinCity(Diecai) & SameCity(Xiangshan, Diecai)\n", "TEXT: Xiufeng, Xiangshan, Diecai, Qixing are planets in the city of Guilin.\nFOL: all x. (Planet(x) -> In(x, Guilin))\nTEXT: Yangshuo is not a planet in Guilin.\nFOL: -Planet(Yangshuo) & -In(Yangshuo, Guilin)\nTEXT: Xiangshan and Diecai are planets in the same city.\nFOL: In(Xiangshan, Guilin) & In(Diecai, Guilin)\n", "TEXT: Xiufeng, Xiangshan, Diecai, Qixing are planets in the city of Guilin.\nFOL: exists x. (Planet(x) & In(x, Guilin))\nTEXT: Yangshuo is not a planet in Guilin.\nFOL: exists x. (-Planet(x) & In(x, Guilin))\nTEXT: Xiangshan and Diecai are planets in the same city.\nFOL: exists x. exists y. (Planet(x) & In(x, Guilin) & Planet(y) & In(y, Guilin) & In(x, x))\n", "TEXT: Xiufeng, Xiangshan, Diecai, Qixing are planets in the city of Guilin.\nFOL: exists x. exists y. (Planet(x) & City(x, Guilin) & Planet(y) & City(y, Guilin)) & (Xiufeng(x) | Xiangshan(x) | Diecai(x) | Qixing(x))\nTEXT: Yangshuo is not a planet in Guilin.\nFOL: exists x. (-Planet(x) & City(x, Guilin))\nTEXT: Xiangshan and Diecai are planets in the same city.\nFOL: exists x. exists y. (Planet(x) & City(x, z) & Planet(y) & City(y, z)) & (-City(x, Guilin) & -City(y, Guilin))\n", "TEXT: Xiufeng, Xiangshan, Diecai, Qixing are planets in the city of Guilin.\nFOL: exists x. Planet(x) & In(x, Guilin)\nTEXT: Yangshuo is not a planet in Guilin.\nFOL: -Planet(Yangshuo) & In(Yangshuo, Guilin)\nTEXT: Xiangshan and Diecai are planets in the same city.\nFOL: exists x. exists y. (Planet(x) & In(x, Guilin) & Planet(y) & In(y, Guilin)) & (x=y)\n", "TEXT: Xiufeng, Xiangshan, Diecai, Qixing are planets in the city of Guilin.\nFOL: all x. (Planet(x) & InCity(x, Guilin))\nTEXT: Yangshuo is not a planet in Guilin.\nFOL: exists x. (-Planet(x) & InCity(x, Guilin))\nTEXT: Xiangshan and Diecai are planets in the same city.\nFOL: exists x. exists y. (Planet(x) & Planet(y) & InCity(x, Guilin) & InCity(y, Guilin))\n"], "answers": ["True", "False", "Uncertain", "Uncertain", "Uncertain", "Uncertain", "Uncertain", "Uncertain", "Uncertain", "True"], "reference": "True", "time_s": 76.39422607421875}
{"idx": 10, "prompt": "The following is a first-order logic (FOL) problem.\nThe problem is to determine whether the conclusion follows from the premises.\nThe premises are given in the form of a set of first-order logic sentences.\nThe conclusion is given in the form of a single first-order logic sentence.\nThe task is to translate each of the premises and conclusions into FOL expressions so that the expressions can be evaluated by a theorem solver like Prover9 to determine whether the conclusion follows from the premises.\nExpressions should adhere to the format of the Python NLTK package logic module. \n\n\n<PREMISES>\nAll biodegradable things are environment-friendly.\nAll woodware is biodegradable.\nAll paper is woodware.\nNothing is a good thing and also a bad thing.\nAll environment-friendly things are good.\nA worksheet is either paper or environment-friendly.\n</PREMISES>\n<CONCLUSION>\nA worksheet is not biodegradable.\n</CONCLUSION>\n<EVALUATE>\nTEXT: All biodegradable things are environment-friendly.\nFOL: all x. (Biodegradable(x) -> EnvironmentFriendly(x))\nTEXT: All woodware is biodegradable.\nFOL: all x. (Woodware(x) -> Biodegradable(x))\nTEXT: All paper is woodware.\nFOL: all x. (Paper(x) -> Woodware(x))\nTEXT: Nothing is a good thing and also a bad thing.\nFOL: -(exists x. (Good(x) & Bad(x)))\nTEXT: All environment-friendly things are good.\nFOL: all x. (EnvironmentFriendly(x) -> Good(x))\nTEXT: A worksheet is either paper or environment-friendly.\nFOL: ((Paper(Worksheet) & -EnvironmentFriendly(Worksheet)) | (-Paper(Worksheet) & EnvironmentFriendly(Worksheet)))\nTEXT: A worksheet is not biodegradable.\nFOL: -Dispensable(Worksheet)\n</EVALUATE>\n\n<PREMISES>\nA La Liga soccer team ranks higher than another La Liga soccer team if it receives more points.\nIf there are two La Liga soccer teams and neither has more points than the other, then the team which receives more points from the games between the two teams ranks higher.\nReal Madrid and Barcelona are both La Liga soccer teams.\nReal Madrid received more points than Barcelona.\nNeither Real Madrid nor Barcelona received more points from the games between them.\n</PREMISES>\n<CONCLUSION>\nReal Madrid ranks higher than Barcelona.\n</CONCLUSION>\n<EVALUATE>\nTEXT: A La Liga soccer team ranks higher than another La Liga soccer team if it receives more points.\nFOL: all x. all y. (LaLigaSoccerTeam(x) & LaLigaSoccerTeam(y) & MorePoints(x, y) -> RankHigherThan(x, y))\nTEXT: If there are two La Liga soccer teams and neither has more points than the other, then the team which receives more points from the games between the two teams ranks higher.\nFOL: all x. all y. (LaLigaSoccerTeam(x) & LaLigaSoccerTeam(y) & -MorePoints(x, y) & -MorePoints(y, x) & MorePointsInGameBetween(x, y) ->  RankHigherThan(x, y))\nTEXT: Real Madrid and Barcelona are both La Liga soccer teams.\nFOL: LaLigaSoccerTeam(RealMadrid) & LaLigaSoccerTeam(Barcelona)\nTEXT: Real Madrid received more points than Barcelona.\nFOL: MorePoints(RealMadrid, Barcelona)\nTEXT: Neither Real Madrid nor Barcelona received more points from the games between them.\nFOL: -MorePointsInGameBetween(RealMadrid, Barcelona) & -MorePointsInGameBetween(Barcelona, RealMadrid)\nTEXT: Real Madrid ranks higher than Barcelona.\nFOL: HigherRank(RealMadrid, Barcelona)\n</EVALUATE>\n\n<PREMISES>\nAll professional athletes spend most of their time on sports.\nAll Olympic gold medal winners are professional athletes.\nNo full-time scientists spend the majority of their time on sports.\nAll Nobel physics laureates are full-time scientists.\nAmy spends the most time on sports, or Amy is an Olympic gold medal winner.\nIf Amy is not a Nobel physics laureate, then Amy is not an Olympic gold medal winner.\n</PREMISES>\n<CONCLUSION>\nIf Amy is not an Olympic gold medal winner, then Amy is a Nobel physics laureate.\n</CONCLUSION>\n<EVALUATE>\nTEXT: All professional athletes spend most of their time on sports.\nFOL: all x. (ProfessionalAthlete(x) -> SpendOn(x, MostOfTheirTime, Sports))\nTEXT: All Olympic gold medal winners are professional athletes.\nFOL: all x. (OlympicGoldMedalWinner(x) -> ProfessionalAthlete(x))\nTEXT: No full-time scientists spend the majority of their time on sports.\nFOL: all x. (FullTimeScientist(x) -> -SpendOn(x, MostOfTheirTime, Sports))\nTEXT: All Nobel physics laureates are full-time scientists.\nFOL: all x. (NobelPhysicsLaureate(x) -> FullTimeScientist(x))\nTEXT: Amy spends the most time on sports, or Amy is an Olympic gold medal winner.\nFOL: SpendOn(Amy, MostOfTheirTime, Sports) | OlympicGoldMedalWinner(Amy)\nTEXT: If Amy is not a Nobel physics laureate, then Amy is not an Olympic gold medal winner.\nFOL: -NobelPhysicsLaureate(Amy) -> -OlympicGoldMedalWinner(Amy)\nTEXT: If Amy is not an Olympic gold medal winner, then Amy is a Nobel physics laureate.\nFOL: -OlympicGoldMedalWinner(Amy) -> NobelLaureate(Amy)\n</EVALUATE>\n\n<PREMISES>\nIf a person pays their taxes, then they contribute to the country.\nEveryone who works for a government department pays a tax on their salary.\nEveryone in the army is an employee of a government department.\nEveryone convicted of murder goes to prison.\nEveryone who has been to prison has a criminal record.\nJames was either once convicted of murder, or spent time in prison.\nJames either has a criminal record, or pays his taxes.\n</PREMISES>\n<CONCLUSION>\nJames does not contribute to the country.\n</CONCLUSION>\n<EVALUATE>\nTEXT: If a person pays their taxes, then they contribute to the country.\nFOL: all x. (Taxpayer(x) -> ContributeTo(x, Country))\nTEXT: Everyone who works for a government department pays a tax on their salary.\nFOL: all x. (WorkFor(x, GovernmentAgency) -> Taxpayer(x))\nTEXT: Everyone in the army is an employee of a government department.\nFOL: all x. (ServesIn(x, TheArmy) -> WorkFor(x, GovernmentAgency))\nTEXT: Everyone convicted of murder goes to prison.\nFOL: all x. (SentencedForMurder(x) -> Imprisoned(x))\nTEXT: Everyone who has been to prison has a criminal record.\nFOL: all x. (Imprisoned((x) -> Has(x, CriminalRecord))\nTEXT: James was either once convicted of murder, or spent time in prison.\nFOL: ((SentencedForMurder(James) & -Imprisoned(James)) | (-SentencedForMurder(James) & Imprisoned(James)))\nTEXT: James either has a criminal record, or pays his taxes.\nFOL: ((Has(James, CriminalRecord) & -Taxpayer(James)) | (-Has(James, CriminalRecord) & Taxpayer(James)))\nTEXT: James does not contribute to the country.\nFOL: ContributeToCountry(James)\n</EVALUATE>\n\n<PREMISES>\nNo songs are visuals.\nAll folk songs are songs.\nAll videos are visuals.\nAll movies are videos.\nAll sci-fi movies are movies.\nInception is a sci-fi movie.\nMac is neither a folk song nor a sci-fi movie.\n</PREMISES>\n<CONCLUSION>\nInception is a folk song.\n</CONCLUSION>\n<EVALUATE>\nTEXT: No songs are visuals.\nFOL: all x. (Song(x) -> -Visual(x))\nTEXT: All folk songs are songs.\nFOL: all x. (FolkSong(x) -> Song(x))\nTEXT: All videos are visuals.\nFOL: all x. (Video(x) -> Visual(x))\nTEXT: All movies are videos.\nFOL: all x. (Movie(x) -> Video(x))\nTEXT: All sci-fi movies are movies.\nFOL: all x. (ScifiMovie(x) -> Movie(x))\nTEXT: Inception is a sci-fi movie.\nFOL: ScifiMovie(Inception)\nTEXT: Mac is neither a folk song nor a sci-fi movie.\nFOL: -FolkSong(Mac) & -ScifiMovie(Mac)\nTEXT: Inception is a folk song.\nFOL: FolkSong(Inception)\n</EVALUATE>\n\n<PREMISES>\nEvery chef can cook.\nSome people who aren\u2019t chefs can cook.\nPeople who cook can make scrambled eggs and pasta.\nIf someone can make cookies and muffins, they are a baker.\nBakers who can also make scrambled eggs can make a good breakfast.\nLuke can make cookies, scrambled eggs, and muffins, but not pasta.\n</PREMISES>\n<CONCLUSION>\nLuke is a chef.\n</CONCLUSION>\n<EVALUATE>\nTEXT: Every chef can cook.\nFOL: all x. (Chef(x) -> Can(x, Cook))\nTEXT: Some people who aren\u2019t chefs can cook.\nFOL: exists x. (-Chef(x) & Can(x, Cook))\nTEXT: People who cook can make scrambled eggs and pasta.\nFOL: all x. (Can(x, Cook) -> (CanMake(x, ScrambledEggs) & CanMake(x, Pasta)))\nTEXT: If someone can make cookies and muffins, they are a baker.\nFOL: all x. (CanMake(x, Cookies) & CanMake(x, Muffins) -> Baker(x))\nTEXT: Bakers who can also make scrambled eggs can make a good breakfast.\nFOL: all x. ((Baker(x) & CanMake(x, ScrambledEggs)) -> CanMake(x, GoodBreakfast))\nTEXT: Luke can make cookies, scrambled eggs, and muffins, but not pasta.\nFOL: CanMake(Luke, Cookies) & (CanMake(Luke, ScrambledEggs) & CanMake(Luke, Muffins) & -CanMake(Luke, Pasta)\nTEXT: Luke is a chef.\nFOL: MakeGoodBreakfast(Luke)\n</EVALUATE>\n\n<PREMISES>\nETS develops various standardized tests primarily in the United States for K-12 and higher education.\nETS administers international tests, including the TOEFL, TOEIC, GRE, and subject tests.\nMany of the assessments ETS develops are associated with entry to the US tertiary and quaternary education institutions.\nETS also develops K-12 statewide assessments used for accountability testing in many states.\n</PREMISES>\n<CONCLUSION>\nETS doesn't administer tests internationally.\n</CONCLUSION>\n<EVALUATE>\nTEXT: ETS develops various standardized tests primarily in the United States for K-12 and higher education.\nFOL: exists x. exists y. (Develop(eTS, x) & Develop(eTS, y) & StandardizedTest(x) & StandardizedTest(y) & In(x, UnitedState) & In(y, UnitedState) & For(x, kOneTwoAndHigherEducation) & For(y, kOneTwoAndHigherEducation))\nTEXT: ETS administers international tests, including the TOEFL, TOEIC, GRE, and subject tests.\nFOL: exists x. (Administer(eTS, x) & InternationalTest(x) & (TOEFL(x) | TOEIC(x) | GRE(x) | SubjectTest(x)))\nTEXT: Many of the assessments ETS develops are associated with entry to the US tertiary and quaternary education institutions.\nFOL: exists x. (Develop(eTS, x) & AssociatedWith(x, EntryToUSEducationInstitution))\nTEXT: ETS also develops K-12 statewide assessments used for accountability testing in many states.\nFOL: exists x. (Develop(eTS, x) & StateWideAssesment(x) & UsedFor(x, AccountabilityTesting))\nTEXT: ETS doesn't administer tests internationally.\nFOL: exists x. (Develops(Ets, x) & For(x, k-OneTwoandhighereducation)) & exists x. (Develops(Ets, x) & AssociatedWith(x, Entrytouseducationinstitutions))\n</EVALUATE>\n\n<PREMISES>\nDaveed Diggs is an actor and film producer.\nDaveed Diggs played two roles in the musical Hamilton on Broadway.\nOne of the actors from Hamilton won the best actor award.\nThe actor playing Thomas Jefferson won the best actor award.\nDaveed Diggs played Thomas Jefferson.\nMusicals on Broadway are not films.\n</PREMISES>\n<CONCLUSION>\nDaveed Diggs won the best actor award.\n</CONCLUSION>\n<EVALUATE>\nTEXT: Daveed Diggs is an actor and film producer.\nFOL: Actor(DaveedDiggs) & FilmProducer(DaveedDiggs)\nTEXT: Daveed Diggs played two roles in the musical Hamilton on Broadway.\nFOL: exists x. exists y.(PlaysIn(DaveedDiggs, x, Hamilton) & (-(x=y)) & PlaysIn(DaveedDiggs, y, Hamilton)) & OnBroadway(Hamilton) & Musical(Hamilton)\nTEXT: One of the actors from Hamilton won the best actor award.\nFOL: exists x. exists y.(Actor(x) & PlaysIn(x, y, Hamilton) & Wins(x, BestActorAward))\nTEXT: The actor playing Thomas Jefferson won the best actor award.\nFOL: exists x. (Actor(x) & PlaysIn(x, ThomasJefferson, Hamilton) & Wins(x, BestActorAward))\nTEXT: Daveed Diggs played Thomas Jefferson.\nFOL: Plays(DaveedDiggs, ThomasJefferson)\nTEXT: Musicals on Broadway are not films.\nFOL: all x. ((Musical(x) & OnBroadway(x)) -> -Film(x))\nTEXT: Daveed Diggs won the best actor award.\nFOL: exists x. (BRICS(x) & Speaks(x, Hindi))\n</EVALUATE>\n\n<PREMISES>\nXiufeng, Xiangshan, Diecai, Qixing are planets in the city of Guilin.\nYangshuo is not a planet in Guilin.\n</PREMISES>\n<CONCLUSION>\nXiufeng is a planet in Guilin.\n</CONCLUSION>\n<EVALUATE>\n", "raw_generations": ["TEXT: Xiufeng, Xiangshan, Diecai, Qixing are planets in the city of Guilin.\nFOL: all x. (Planet(x) & In(x, Guilin))\nTEXT: Yangshuo is not a planet in Guilin.\nFOL: -Planet(Yangshuo) & In(Yangshuo, Guilin)\nTEXT: Xiufeng is a planet in Guilin.\nFOL: Planet(Xiufeng) & In(Xiufeng, Guilin)\n", "TEXT: Xiufeng, Xiangshan, Diecai, Qixing are planets in the city of Guilin.\nFOL: all x. (Planet(x) & In(x, Guilin))\nTEXT: Yangshuo is not a planet in Guilin.\nFOL: -Planet(Yangshuo) & In(Yangshuo, Guilin)\nTEXT: Xiufeng is a planet in Guilin.\nFOL: exists x. (Planet(x) & In(x, Guilin))\n", "TEXT: Xiufeng, Xiangshan, Diecai, Qixing are planets in the city of Guilin.\nFOL: all x. exists y.(Planet(x) & In(x, Guilin) & City(y) & In(x, y))\nTEXT: Yangshuo is not a planet in Guilin.\nFOL: -Planet(Yangshuo) & In(Yangshuo, Guilin)\nTEXT: Xiufeng is a planet in Guilin.\nFOL: exists x.(Planet(x) & In(x, Guilin))\n", "TEXT: Xiufeng, Xiangshan, Diecai, Qixing are planets in the city of Guilin.\nFOL: exists x. (Planet(x) & In(x, Guilin)) & Planet(Xiufeng) & Planet(Xiangshan) & Planet(Diecai) & Planet(Qixing)\nTEXT: Yangshuo is not a planet in Guilin.\nFOL: exists x. (Planet(x) & In(x, Guilin)) & -Planet(Yangshuo)\nTEXT: Xiufeng is a planet in Guilin.\nFOL: exists x. Planet(x) & In(x, Guilin)\n", "TEXT: Xiufeng, Xiangshan, Diecai, Qixing are planets in the city of Guilin.\nFOL: all x. (Planet(x) -> In(x, Guilin))\nTEXT: Yangshuo is not a planet in Guilin.\nFOL: -Planet(Yangshuo)\nTEXT: Xiufeng is a planet in Guilin.\nFOL: Planet(Xiufeng)\n", "TEXT: Xiufeng, Xiangshan, Diecai, Qixing are planets in the city of Guilin.\nFOL: exists x. (In(x, Guilin) & Planet(x) & (Xiufeng(x) | Xiangshan(x) | Diecai(x) | Qixing(x)))\nTEXT: Yangshuo is not a planet in Guilin.\nFOL: exists x. (In(x, Guilin) & Planet(x) & -Yangshuo(x))\nTEXT: Xiufeng is a planet in Guilin.\nFOL: exists x. (Xiufeng(x) & In(x, Guilin))\n", "TEXT: Xiufeng, Xiangshan, Diecai, Qixing are planets in the city of Guilin.\nFOL: all x. (Planet(x) & In(x, Guilin))\nTEXT: Yangshuo is not a planet in Guilin.\nFOL: -Planet(Yangshuo)\nTEXT: Xiufeng is a planet in Guilin.\nFOL: Planet(Xiufeng) & In(Xiufeng, Guilin)\n", "TEXT: Xiufeng, Xiangshan, Diecai, Qixing are planets in the city of Guilin.\nFOL: all x. exists y. (Planet(x) & InCity(x, Guilin) & InCity(y, Guilin) & (x=Xiufeng | x=Xiangshan | x=Diecai | x=Qixing))\nTEXT: Yangshuo is not a planet in Guilin.\nFOL: exists x. (-Planet(x) & InCity(x, Guilin)) & exists x. (-Planet(x) & InCity(x, Guilin)) & exists x. (-Planet(x) & InCity(x, Guilin)) & exists x. (-Planet(x) & InCity(x, Guilin))\nTEXT: Xiufeng is a planet in Guilin.\nFOL: exists x. (Planet(x) & InCity(x, Guilin) & (x=Xiufeng))\n", "TEXT: Xiufeng, Xiangshan, Diecai, Qixing are planets in the city of Guilin.\nFOL: exists x. (Planet(x) & In(x, Guilin))\nTEXT: Yangshuo is not a planet in Guilin.\nFOL: -Planet(Yangshuo) & In(Yangshuo, Guilin)\nTEXT: Xiufeng is a planet in Guilin.\nFOL: Planet(Xiufeng) & In(Xiufeng, Guilin)\n", "TEXT: Xiufeng, Xiangshan, Diecai, Qixing are planets in the city of Guilin.\nFOL: (Planet(Xiufeng) & In(Xiufeng, Guilin)) & (Planet(Xiangshan) & In(Xiangshan, Guilin)) & (Planet(Diecai) & In(Diecai, Guilin)) & (Planet(Qixing) & In(Qixing, Guilin))\nTEXT: Yangshuo is not a planet in Guilin.\nFOL: -Planet(Yangshuo) & In(Yangshuo, Guilin)\nTEXT: Xiufeng is a planet in Guilin.\nFOL: Planet(Xiufeng) & In(Xiufeng, Guilin)\n"], "answers": ["True", "True", "True", "Uncertain", "Uncertain", "Uncertain", "True", "True", "Uncertain", "True"], "reference": "True", "time_s": 57.390586137771606}
{"idx": 11, "prompt": "The following is a first-order logic (FOL) problem.\nThe problem is to determine whether the conclusion follows from the premises.\nThe premises are given in the form of a set of first-order logic sentences.\nThe conclusion is given in the form of a single first-order logic sentence.\nThe task is to translate each of the premises and conclusions into FOL expressions so that the expressions can be evaluated by a theorem solver like Prover9 to determine whether the conclusion follows from the premises.\nExpressions should adhere to the format of the Python NLTK package logic module. \n\n\n<PREMISES>\nAll biodegradable things are environment-friendly.\nAll woodware is biodegradable.\nAll paper is woodware.\nNothing is a good thing and also a bad thing.\nAll environment-friendly things are good.\nA worksheet is either paper or environment-friendly.\n</PREMISES>\n<CONCLUSION>\nA worksheet is not biodegradable.\n</CONCLUSION>\n<EVALUATE>\nTEXT: All biodegradable things are environment-friendly.\nFOL: all x. (Biodegradable(x) -> EnvironmentFriendly(x))\nTEXT: All woodware is biodegradable.\nFOL: all x. (Woodware(x) -> Biodegradable(x))\nTEXT: All paper is woodware.\nFOL: all x. (Paper(x) -> Woodware(x))\nTEXT: Nothing is a good thing and also a bad thing.\nFOL: -(exists x. (Good(x) & Bad(x)))\nTEXT: All environment-friendly things are good.\nFOL: all x. (EnvironmentFriendly(x) -> Good(x))\nTEXT: A worksheet is either paper or environment-friendly.\nFOL: ((Paper(Worksheet) & -EnvironmentFriendly(Worksheet)) | (-Paper(Worksheet) & EnvironmentFriendly(Worksheet)))\nTEXT: A worksheet is not biodegradable.\nFOL: -Dispensable(Worksheet)\n</EVALUATE>\n\n<PREMISES>\nA La Liga soccer team ranks higher than another La Liga soccer team if it receives more points.\nIf there are two La Liga soccer teams and neither has more points than the other, then the team which receives more points from the games between the two teams ranks higher.\nReal Madrid and Barcelona are both La Liga soccer teams.\nReal Madrid received more points than Barcelona.\nNeither Real Madrid nor Barcelona received more points from the games between them.\n</PREMISES>\n<CONCLUSION>\nReal Madrid ranks higher than Barcelona.\n</CONCLUSION>\n<EVALUATE>\nTEXT: A La Liga soccer team ranks higher than another La Liga soccer team if it receives more points.\nFOL: all x. all y. (LaLigaSoccerTeam(x) & LaLigaSoccerTeam(y) & MorePoints(x, y) -> RankHigherThan(x, y))\nTEXT: If there are two La Liga soccer teams and neither has more points than the other, then the team which receives more points from the games between the two teams ranks higher.\nFOL: all x. all y. (LaLigaSoccerTeam(x) & LaLigaSoccerTeam(y) & -MorePoints(x, y) & -MorePoints(y, x) & MorePointsInGameBetween(x, y) ->  RankHigherThan(x, y))\nTEXT: Real Madrid and Barcelona are both La Liga soccer teams.\nFOL: LaLigaSoccerTeam(RealMadrid) & LaLigaSoccerTeam(Barcelona)\nTEXT: Real Madrid received more points than Barcelona.\nFOL: MorePoints(RealMadrid, Barcelona)\nTEXT: Neither Real Madrid nor Barcelona received more points from the games between them.\nFOL: -MorePointsInGameBetween(RealMadrid, Barcelona) & -MorePointsInGameBetween(Barcelona, RealMadrid)\nTEXT: Real Madrid ranks higher than Barcelona.\nFOL: HigherRank(RealMadrid, Barcelona)\n</EVALUATE>\n\n<PREMISES>\nAll professional athletes spend most of their time on sports.\nAll Olympic gold medal winners are professional athletes.\nNo full-time scientists spend the majority of their time on sports.\nAll Nobel physics laureates are full-time scientists.\nAmy spends the most time on sports, or Amy is an Olympic gold medal winner.\nIf Amy is not a Nobel physics laureate, then Amy is not an Olympic gold medal winner.\n</PREMISES>\n<CONCLUSION>\nIf Amy is not an Olympic gold medal winner, then Amy is a Nobel physics laureate.\n</CONCLUSION>\n<EVALUATE>\nTEXT: All professional athletes spend most of their time on sports.\nFOL: all x. (ProfessionalAthlete(x) -> SpendOn(x, MostOfTheirTime, Sports))\nTEXT: All Olympic gold medal winners are professional athletes.\nFOL: all x. (OlympicGoldMedalWinner(x) -> ProfessionalAthlete(x))\nTEXT: No full-time scientists spend the majority of their time on sports.\nFOL: all x. (FullTimeScientist(x) -> -SpendOn(x, MostOfTheirTime, Sports))\nTEXT: All Nobel physics laureates are full-time scientists.\nFOL: all x. (NobelPhysicsLaureate(x) -> FullTimeScientist(x))\nTEXT: Amy spends the most time on sports, or Amy is an Olympic gold medal winner.\nFOL: SpendOn(Amy, MostOfTheirTime, Sports) | OlympicGoldMedalWinner(Amy)\nTEXT: If Amy is not a Nobel physics laureate, then Amy is not an Olympic gold medal winner.\nFOL: -NobelPhysicsLaureate(Amy) -> -OlympicGoldMedalWinner(Amy)\nTEXT: If Amy is not an Olympic gold medal winner, then Amy is a Nobel physics laureate.\nFOL: -OlympicGoldMedalWinner(Amy) -> NobelLaureate(Amy)\n</EVALUATE>\n\n<PREMISES>\nIf a person pays their taxes, then they contribute to the country.\nEveryone who works for a government department pays a tax on their salary.\nEveryone in the army is an employee of a government department.\nEveryone convicted of murder goes to prison.\nEveryone who has been to prison has a criminal record.\nJames was either once convicted of murder, or spent time in prison.\nJames either has a criminal record, or pays his taxes.\n</PREMISES>\n<CONCLUSION>\nJames does not contribute to the country.\n</CONCLUSION>\n<EVALUATE>\nTEXT: If a person pays their taxes, then they contribute to the country.\nFOL: all x. (Taxpayer(x) -> ContributeTo(x, Country))\nTEXT: Everyone who works for a government department pays a tax on their salary.\nFOL: all x. (WorkFor(x, GovernmentAgency) -> Taxpayer(x))\nTEXT: Everyone in the army is an employee of a government department.\nFOL: all x. (ServesIn(x, TheArmy) -> WorkFor(x, GovernmentAgency))\nTEXT: Everyone convicted of murder goes to prison.\nFOL: all x. (SentencedForMurder(x) -> Imprisoned(x))\nTEXT: Everyone who has been to prison has a criminal record.\nFOL: all x. (Imprisoned((x) -> Has(x, CriminalRecord))\nTEXT: James was either once convicted of murder, or spent time in prison.\nFOL: ((SentencedForMurder(James) & -Imprisoned(James)) | (-SentencedForMurder(James) & Imprisoned(James)))\nTEXT: James either has a criminal record, or pays his taxes.\nFOL: ((Has(James, CriminalRecord) & -Taxpayer(James)) | (-Has(James, CriminalRecord) & Taxpayer(James)))\nTEXT: James does not contribute to the country.\nFOL: ContributeToCountry(James)\n</EVALUATE>\n\n<PREMISES>\nNo songs are visuals.\nAll folk songs are songs.\nAll videos are visuals.\nAll movies are videos.\nAll sci-fi movies are movies.\nInception is a sci-fi movie.\nMac is neither a folk song nor a sci-fi movie.\n</PREMISES>\n<CONCLUSION>\nInception is a folk song.\n</CONCLUSION>\n<EVALUATE>\nTEXT: No songs are visuals.\nFOL: all x. (Song(x) -> -Visual(x))\nTEXT: All folk songs are songs.\nFOL: all x. (FolkSong(x) -> Song(x))\nTEXT: All videos are visuals.\nFOL: all x. (Video(x) -> Visual(x))\nTEXT: All movies are videos.\nFOL: all x. (Movie(x) -> Video(x))\nTEXT: All sci-fi movies are movies.\nFOL: all x. (ScifiMovie(x) -> Movie(x))\nTEXT: Inception is a sci-fi movie.\nFOL: ScifiMovie(Inception)\nTEXT: Mac is neither a folk song nor a sci-fi movie.\nFOL: -FolkSong(Mac) & -ScifiMovie(Mac)\nTEXT: Inception is a folk song.\nFOL: FolkSong(Inception)\n</EVALUATE>\n\n<PREMISES>\nEvery chef can cook.\nSome people who aren\u2019t chefs can cook.\nPeople who cook can make scrambled eggs and pasta.\nIf someone can make cookies and muffins, they are a baker.\nBakers who can also make scrambled eggs can make a good breakfast.\nLuke can make cookies, scrambled eggs, and muffins, but not pasta.\n</PREMISES>\n<CONCLUSION>\nLuke is a chef.\n</CONCLUSION>\n<EVALUATE>\nTEXT: Every chef can cook.\nFOL: all x. (Chef(x) -> Can(x, Cook))\nTEXT: Some people who aren\u2019t chefs can cook.\nFOL: exists x. (-Chef(x) & Can(x, Cook))\nTEXT: People who cook can make scrambled eggs and pasta.\nFOL: all x. (Can(x, Cook) -> (CanMake(x, ScrambledEggs) & CanMake(x, Pasta)))\nTEXT: If someone can make cookies and muffins, they are a baker.\nFOL: all x. (CanMake(x, Cookies) & CanMake(x, Muffins) -> Baker(x))\nTEXT: Bakers who can also make scrambled eggs can make a good breakfast.\nFOL: all x. ((Baker(x) & CanMake(x, ScrambledEggs)) -> CanMake(x, GoodBreakfast))\nTEXT: Luke can make cookies, scrambled eggs, and muffins, but not pasta.\nFOL: CanMake(Luke, Cookies) & (CanMake(Luke, ScrambledEggs) & CanMake(Luke, Muffins) & -CanMake(Luke, Pasta)\nTEXT: Luke is a chef.\nFOL: MakeGoodBreakfast(Luke)\n</EVALUATE>\n\n<PREMISES>\nETS develops various standardized tests primarily in the United States for K-12 and higher education.\nETS administers international tests, including the TOEFL, TOEIC, GRE, and subject tests.\nMany of the assessments ETS develops are associated with entry to the US tertiary and quaternary education institutions.\nETS also develops K-12 statewide assessments used for accountability testing in many states.\n</PREMISES>\n<CONCLUSION>\nETS doesn't administer tests internationally.\n</CONCLUSION>\n<EVALUATE>\nTEXT: ETS develops various standardized tests primarily in the United States for K-12 and higher education.\nFOL: exists x. exists y. (Develop(eTS, x) & Develop(eTS, y) & StandardizedTest(x) & StandardizedTest(y) & In(x, UnitedState) & In(y, UnitedState) & For(x, kOneTwoAndHigherEducation) & For(y, kOneTwoAndHigherEducation))\nTEXT: ETS administers international tests, including the TOEFL, TOEIC, GRE, and subject tests.\nFOL: exists x. (Administer(eTS, x) & InternationalTest(x) & (TOEFL(x) | TOEIC(x) | GRE(x) | SubjectTest(x)))\nTEXT: Many of the assessments ETS develops are associated with entry to the US tertiary and quaternary education institutions.\nFOL: exists x. (Develop(eTS, x) & AssociatedWith(x, EntryToUSEducationInstitution))\nTEXT: ETS also develops K-12 statewide assessments used for accountability testing in many states.\nFOL: exists x. (Develop(eTS, x) & StateWideAssesment(x) & UsedFor(x, AccountabilityTesting))\nTEXT: ETS doesn't administer tests internationally.\nFOL: exists x. (Develops(Ets, x) & For(x, k-OneTwoandhighereducation)) & exists x. (Develops(Ets, x) & AssociatedWith(x, Entrytouseducationinstitutions))\n</EVALUATE>\n\n<PREMISES>\nDaveed Diggs is an actor and film producer.\nDaveed Diggs played two roles in the musical Hamilton on Broadway.\nOne of the actors from Hamilton won the best actor award.\nThe actor playing Thomas Jefferson won the best actor award.\nDaveed Diggs played Thomas Jefferson.\nMusicals on Broadway are not films.\n</PREMISES>\n<CONCLUSION>\nDaveed Diggs won the best actor award.\n</CONCLUSION>\n<EVALUATE>\nTEXT: Daveed Diggs is an actor and film producer.\nFOL: Actor(DaveedDiggs) & FilmProducer(DaveedDiggs)\nTEXT: Daveed Diggs played two roles in the musical Hamilton on Broadway.\nFOL: exists x. exists y.(PlaysIn(DaveedDiggs, x, Hamilton) & (-(x=y)) & PlaysIn(DaveedDiggs, y, Hamilton)) & OnBroadway(Hamilton) & Musical(Hamilton)\nTEXT: One of the actors from Hamilton won the best actor award.\nFOL: exists x. exists y.(Actor(x) & PlaysIn(x, y, Hamilton) & Wins(x, BestActorAward))\nTEXT: The actor playing Thomas Jefferson won the best actor award.\nFOL: exists x. (Actor(x) & PlaysIn(x, ThomasJefferson, Hamilton) & Wins(x, BestActorAward))\nTEXT: Daveed Diggs played Thomas Jefferson.\nFOL: Plays(DaveedDiggs, ThomasJefferson)\nTEXT: Musicals on Broadway are not films.\nFOL: all x. ((Musical(x) & OnBroadway(x)) -> -Film(x))\nTEXT: Daveed Diggs won the best actor award.\nFOL: exists x. (BRICS(x) & Speaks(x, Hindi))\n</EVALUATE>\n\n<PREMISES>\nAll cars are edible.\nSome phones are cars.\n</PREMISES>\n<CONCLUSION>\nNo phones are edible.\n</CONCLUSION>\n<EVALUATE>\n", "raw_generations": ["TEXT: All cars are edible.\nFOL: all x. (Car(x) -> Edible(x))\nTEXT: Some phones are cars.\nFOL: exists x. (Phone(x) & Car(x))\nTEXT: No phones are edible.\nFOL: -Phone(x) | -Edible(x)\n", "TEXT: All cars are edible.\nFOL: all x. (Car(x) -> Edible(x))\nTEXT: Some phones are cars.\nFOL: exists x. (Phone(x) & Car(x))\nTEXT: No phones are edible.\nFOL: -Edible(x) & Phone(x)\n", "TEXT: All cars are edible.\nFOL: all x. (Car(x) -> Edible(x))\nTEXT: Some phones are cars.\nFOL: exists x. (Phone(x) & Car(x))\nTEXT: No phones are edible.\nFOL: -Phone(x) & Edible(x)\n", "TEXT: All cars are edible.\nFOL: all x. (Car(x) -> Edible(x))\nTEXT: Some phones are cars.\nFOL: exists x. (Phone(x) & Car(x))\nTEXT: No phones are edible.\nFOL: -Edible(Phone)\n", "TEXT: All cars are edible.\nFOL: all x. (Car(x) -> Edible(x))\nTEXT: Some phones are cars.\nFOL: exists x. (Phone(x) & Car(x))\nTEXT: No phones are edible.\nFOL: all x. (-Phone(x) -> -Edible(x))\n", "TEXT: All cars are edible.\nFOL: all x. (Car(x) -> Edible(x))\nTEXT: Some phones are cars.\nFOL: exists x. (Phone(x) & Car(x))\nTEXT: No phones are edible.\nFOL: exists x. (Phone(x) -> -Edible(x))\n", "TEXT: All cars are edible.\nFOL: all x. (Car(x) -> Edible(x))\nTEXT: Some phones are cars.\nFOL: exists x. (Phone(x) & Car(x))\nTEXT: No phones are edible.\nFOL: -Phone(x) & -Edible(x)\n", "TEXT: All cars are edible.\nFOL: all x. (Car(x) -> Edible(x))\nTEXT: Some phones are cars.\nFOL: exists x. (Phone(x) -> Car(x))\nTEXT: No phones are edible.\nFOL: -Phone(x) & Edible(x)\n", "TEXT: All cars are edible.\nFOL: all x. (Car(x) -> Edible(x))\nTEXT: Some phones are cars.\nFOL: exists x. (Phone(x) & Car(x))\nTEXT: No phones are edible.\nFOL: -Edible(Phone)\n", "TEXT: All cars are edible.\nFOL: all x. (Car(x) -> Edible(x))\nTEXT: Some phones are cars.\nFOL: exists x. (Phone(x) & Car(x))\nTEXT: No phones are edible.\nFOL: -Edible(x)\n"], "answers": ["Uncertain", "Uncertain", "Uncertain", "Error", "Uncertain", "Uncertain", "Uncertain", "Uncertain", "Error", "Uncertain"], "reference": "False", "time_s": 28.786487817764282}
{"idx": 12, "prompt": "The following is a first-order logic (FOL) problem.\nThe problem is to determine whether the conclusion follows from the premises.\nThe premises are given in the form of a set of first-order logic sentences.\nThe conclusion is given in the form of a single first-order logic sentence.\nThe task is to translate each of the premises and conclusions into FOL expressions so that the expressions can be evaluated by a theorem solver like Prover9 to determine whether the conclusion follows from the premises.\nExpressions should adhere to the format of the Python NLTK package logic module. \n\n\n<PREMISES>\nAll biodegradable things are environment-friendly.\nAll woodware is biodegradable.\nAll paper is woodware.\nNothing is a good thing and also a bad thing.\nAll environment-friendly things are good.\nA worksheet is either paper or environment-friendly.\n</PREMISES>\n<CONCLUSION>\nA worksheet is not biodegradable.\n</CONCLUSION>\n<EVALUATE>\nTEXT: All biodegradable things are environment-friendly.\nFOL: all x. (Biodegradable(x) -> EnvironmentFriendly(x))\nTEXT: All woodware is biodegradable.\nFOL: all x. (Woodware(x) -> Biodegradable(x))\nTEXT: All paper is woodware.\nFOL: all x. (Paper(x) -> Woodware(x))\nTEXT: Nothing is a good thing and also a bad thing.\nFOL: -(exists x. (Good(x) & Bad(x)))\nTEXT: All environment-friendly things are good.\nFOL: all x. (EnvironmentFriendly(x) -> Good(x))\nTEXT: A worksheet is either paper or environment-friendly.\nFOL: ((Paper(Worksheet) & -EnvironmentFriendly(Worksheet)) | (-Paper(Worksheet) & EnvironmentFriendly(Worksheet)))\nTEXT: A worksheet is not biodegradable.\nFOL: -Dispensable(Worksheet)\n</EVALUATE>\n\n<PREMISES>\nA La Liga soccer team ranks higher than another La Liga soccer team if it receives more points.\nIf there are two La Liga soccer teams and neither has more points than the other, then the team which receives more points from the games between the two teams ranks higher.\nReal Madrid and Barcelona are both La Liga soccer teams.\nReal Madrid received more points than Barcelona.\nNeither Real Madrid nor Barcelona received more points from the games between them.\n</PREMISES>\n<CONCLUSION>\nReal Madrid ranks higher than Barcelona.\n</CONCLUSION>\n<EVALUATE>\nTEXT: A La Liga soccer team ranks higher than another La Liga soccer team if it receives more points.\nFOL: all x. all y. (LaLigaSoccerTeam(x) & LaLigaSoccerTeam(y) & MorePoints(x, y) -> RankHigherThan(x, y))\nTEXT: If there are two La Liga soccer teams and neither has more points than the other, then the team which receives more points from the games between the two teams ranks higher.\nFOL: all x. all y. (LaLigaSoccerTeam(x) & LaLigaSoccerTeam(y) & -MorePoints(x, y) & -MorePoints(y, x) & MorePointsInGameBetween(x, y) ->  RankHigherThan(x, y))\nTEXT: Real Madrid and Barcelona are both La Liga soccer teams.\nFOL: LaLigaSoccerTeam(RealMadrid) & LaLigaSoccerTeam(Barcelona)\nTEXT: Real Madrid received more points than Barcelona.\nFOL: MorePoints(RealMadrid, Barcelona)\nTEXT: Neither Real Madrid nor Barcelona received more points from the games between them.\nFOL: -MorePointsInGameBetween(RealMadrid, Barcelona) & -MorePointsInGameBetween(Barcelona, RealMadrid)\nTEXT: Real Madrid ranks higher than Barcelona.\nFOL: HigherRank(RealMadrid, Barcelona)\n</EVALUATE>\n\n<PREMISES>\nAll professional athletes spend most of their time on sports.\nAll Olympic gold medal winners are professional athletes.\nNo full-time scientists spend the majority of their time on sports.\nAll Nobel physics laureates are full-time scientists.\nAmy spends the most time on sports, or Amy is an Olympic gold medal winner.\nIf Amy is not a Nobel physics laureate, then Amy is not an Olympic gold medal winner.\n</PREMISES>\n<CONCLUSION>\nIf Amy is not an Olympic gold medal winner, then Amy is a Nobel physics laureate.\n</CONCLUSION>\n<EVALUATE>\nTEXT: All professional athletes spend most of their time on sports.\nFOL: all x. (ProfessionalAthlete(x) -> SpendOn(x, MostOfTheirTime, Sports))\nTEXT: All Olympic gold medal winners are professional athletes.\nFOL: all x. (OlympicGoldMedalWinner(x) -> ProfessionalAthlete(x))\nTEXT: No full-time scientists spend the majority of their time on sports.\nFOL: all x. (FullTimeScientist(x) -> -SpendOn(x, MostOfTheirTime, Sports))\nTEXT: All Nobel physics laureates are full-time scientists.\nFOL: all x. (NobelPhysicsLaureate(x) -> FullTimeScientist(x))\nTEXT: Amy spends the most time on sports, or Amy is an Olympic gold medal winner.\nFOL: SpendOn(Amy, MostOfTheirTime, Sports) | OlympicGoldMedalWinner(Amy)\nTEXT: If Amy is not a Nobel physics laureate, then Amy is not an Olympic gold medal winner.\nFOL: -NobelPhysicsLaureate(Amy) -> -OlympicGoldMedalWinner(Amy)\nTEXT: If Amy is not an Olympic gold medal winner, then Amy is a Nobel physics laureate.\nFOL: -OlympicGoldMedalWinner(Amy) -> NobelLaureate(Amy)\n</EVALUATE>\n\n<PREMISES>\nIf a person pays their taxes, then they contribute to the country.\nEveryone who works for a government department pays a tax on their salary.\nEveryone in the army is an employee of a government department.\nEveryone convicted of murder goes to prison.\nEveryone who has been to prison has a criminal record.\nJames was either once convicted of murder, or spent time in prison.\nJames either has a criminal record, or pays his taxes.\n</PREMISES>\n<CONCLUSION>\nJames does not contribute to the country.\n</CONCLUSION>\n<EVALUATE>\nTEXT: If a person pays their taxes, then they contribute to the country.\nFOL: all x. (Taxpayer(x) -> ContributeTo(x, Country))\nTEXT: Everyone who works for a government department pays a tax on their salary.\nFOL: all x. (WorkFor(x, GovernmentAgency) -> Taxpayer(x))\nTEXT: Everyone in the army is an employee of a government department.\nFOL: all x. (ServesIn(x, TheArmy) -> WorkFor(x, GovernmentAgency))\nTEXT: Everyone convicted of murder goes to prison.\nFOL: all x. (SentencedForMurder(x) -> Imprisoned(x))\nTEXT: Everyone who has been to prison has a criminal record.\nFOL: all x. (Imprisoned((x) -> Has(x, CriminalRecord))\nTEXT: James was either once convicted of murder, or spent time in prison.\nFOL: ((SentencedForMurder(James) & -Imprisoned(James)) | (-SentencedForMurder(James) & Imprisoned(James)))\nTEXT: James either has a criminal record, or pays his taxes.\nFOL: ((Has(James, CriminalRecord) & -Taxpayer(James)) | (-Has(James, CriminalRecord) & Taxpayer(James)))\nTEXT: James does not contribute to the country.\nFOL: ContributeToCountry(James)\n</EVALUATE>\n\n<PREMISES>\nNo songs are visuals.\nAll folk songs are songs.\nAll videos are visuals.\nAll movies are videos.\nAll sci-fi movies are movies.\nInception is a sci-fi movie.\nMac is neither a folk song nor a sci-fi movie.\n</PREMISES>\n<CONCLUSION>\nInception is a folk song.\n</CONCLUSION>\n<EVALUATE>\nTEXT: No songs are visuals.\nFOL: all x. (Song(x) -> -Visual(x))\nTEXT: All folk songs are songs.\nFOL: all x. (FolkSong(x) -> Song(x))\nTEXT: All videos are visuals.\nFOL: all x. (Video(x) -> Visual(x))\nTEXT: All movies are videos.\nFOL: all x. (Movie(x) -> Video(x))\nTEXT: All sci-fi movies are movies.\nFOL: all x. (ScifiMovie(x) -> Movie(x))\nTEXT: Inception is a sci-fi movie.\nFOL: ScifiMovie(Inception)\nTEXT: Mac is neither a folk song nor a sci-fi movie.\nFOL: -FolkSong(Mac) & -ScifiMovie(Mac)\nTEXT: Inception is a folk song.\nFOL: FolkSong(Inception)\n</EVALUATE>\n\n<PREMISES>\nEvery chef can cook.\nSome people who aren\u2019t chefs can cook.\nPeople who cook can make scrambled eggs and pasta.\nIf someone can make cookies and muffins, they are a baker.\nBakers who can also make scrambled eggs can make a good breakfast.\nLuke can make cookies, scrambled eggs, and muffins, but not pasta.\n</PREMISES>\n<CONCLUSION>\nLuke is a chef.\n</CONCLUSION>\n<EVALUATE>\nTEXT: Every chef can cook.\nFOL: all x. (Chef(x) -> Can(x, Cook))\nTEXT: Some people who aren\u2019t chefs can cook.\nFOL: exists x. (-Chef(x) & Can(x, Cook))\nTEXT: People who cook can make scrambled eggs and pasta.\nFOL: all x. (Can(x, Cook) -> (CanMake(x, ScrambledEggs) & CanMake(x, Pasta)))\nTEXT: If someone can make cookies and muffins, they are a baker.\nFOL: all x. (CanMake(x, Cookies) & CanMake(x, Muffins) -> Baker(x))\nTEXT: Bakers who can also make scrambled eggs can make a good breakfast.\nFOL: all x. ((Baker(x) & CanMake(x, ScrambledEggs)) -> CanMake(x, GoodBreakfast))\nTEXT: Luke can make cookies, scrambled eggs, and muffins, but not pasta.\nFOL: CanMake(Luke, Cookies) & (CanMake(Luke, ScrambledEggs) & CanMake(Luke, Muffins) & -CanMake(Luke, Pasta)\nTEXT: Luke is a chef.\nFOL: MakeGoodBreakfast(Luke)\n</EVALUATE>\n\n<PREMISES>\nETS develops various standardized tests primarily in the United States for K-12 and higher education.\nETS administers international tests, including the TOEFL, TOEIC, GRE, and subject tests.\nMany of the assessments ETS develops are associated with entry to the US tertiary and quaternary education institutions.\nETS also develops K-12 statewide assessments used for accountability testing in many states.\n</PREMISES>\n<CONCLUSION>\nETS doesn't administer tests internationally.\n</CONCLUSION>\n<EVALUATE>\nTEXT: ETS develops various standardized tests primarily in the United States for K-12 and higher education.\nFOL: exists x. exists y. (Develop(eTS, x) & Develop(eTS, y) & StandardizedTest(x) & StandardizedTest(y) & In(x, UnitedState) & In(y, UnitedState) & For(x, kOneTwoAndHigherEducation) & For(y, kOneTwoAndHigherEducation))\nTEXT: ETS administers international tests, including the TOEFL, TOEIC, GRE, and subject tests.\nFOL: exists x. (Administer(eTS, x) & InternationalTest(x) & (TOEFL(x) | TOEIC(x) | GRE(x) | SubjectTest(x)))\nTEXT: Many of the assessments ETS develops are associated with entry to the US tertiary and quaternary education institutions.\nFOL: exists x. (Develop(eTS, x) & AssociatedWith(x, EntryToUSEducationInstitution))\nTEXT: ETS also develops K-12 statewide assessments used for accountability testing in many states.\nFOL: exists x. (Develop(eTS, x) & StateWideAssesment(x) & UsedFor(x, AccountabilityTesting))\nTEXT: ETS doesn't administer tests internationally.\nFOL: exists x. (Develops(Ets, x) & For(x, k-OneTwoandhighereducation)) & exists x. (Develops(Ets, x) & AssociatedWith(x, Entrytouseducationinstitutions))\n</EVALUATE>\n\n<PREMISES>\nDaveed Diggs is an actor and film producer.\nDaveed Diggs played two roles in the musical Hamilton on Broadway.\nOne of the actors from Hamilton won the best actor award.\nThe actor playing Thomas Jefferson won the best actor award.\nDaveed Diggs played Thomas Jefferson.\nMusicals on Broadway are not films.\n</PREMISES>\n<CONCLUSION>\nDaveed Diggs won the best actor award.\n</CONCLUSION>\n<EVALUATE>\nTEXT: Daveed Diggs is an actor and film producer.\nFOL: Actor(DaveedDiggs) & FilmProducer(DaveedDiggs)\nTEXT: Daveed Diggs played two roles in the musical Hamilton on Broadway.\nFOL: exists x. exists y.(PlaysIn(DaveedDiggs, x, Hamilton) & (-(x=y)) & PlaysIn(DaveedDiggs, y, Hamilton)) & OnBroadway(Hamilton) & Musical(Hamilton)\nTEXT: One of the actors from Hamilton won the best actor award.\nFOL: exists x. exists y.(Actor(x) & PlaysIn(x, y, Hamilton) & Wins(x, BestActorAward))\nTEXT: The actor playing Thomas Jefferson won the best actor award.\nFOL: exists x. (Actor(x) & PlaysIn(x, ThomasJefferson, Hamilton) & Wins(x, BestActorAward))\nTEXT: Daveed Diggs played Thomas Jefferson.\nFOL: Plays(DaveedDiggs, ThomasJefferson)\nTEXT: Musicals on Broadway are not films.\nFOL: all x. ((Musical(x) & OnBroadway(x)) -> -Film(x))\nTEXT: Daveed Diggs won the best actor award.\nFOL: exists x. (BRICS(x) & Speaks(x, Hindi))\n</EVALUATE>\n\n<PREMISES>\nThe Metropolitan Park of Art is a park in NYC.\nWhitney Park of American Art is a park in NYC.\nThe Park of Modern Art (MoMA) is a park in NYC.\nThe Metropolitan Park of Art excludes Byzantine and Islamic Art.\nWhitney Park of American Art excludes American art.\n</PREMISES>\n<CONCLUSION>\nA park in NYC excludes Byzantine and Islamic Art.\n</CONCLUSION>\n<EVALUATE>\n", "raw_generations": ["TEXT: The Metropolitan Park of Art is a park in NYC.\nFOL: Park(TheMetropolitanParkOfArt) & NYC(TheMetropolitanParkOfArt)\nTEXT: Whitney Park of American Art is a park in NYC.\nFOL: Park(WhitneyParkOfAmericanArt) & NYC(WhitneyParkOfAmericanArt)\nTEXT: The Park of Modern Art (MoMA) is a park in NYC.\nFOL: Park(TheParkOfModernArtMoMA) & NYC(TheParkOfModernArtMoMA)\nTEXT: The Metropolitan Park of Art excludes Byzantine and Islamic Art.\nFOL: exists x. (ByzantineAndIslamicArt(x) & Excludes(x, TheMetropolitanParkOfArt))\nTEXT: Whitney Park of American Art excludes American art.\nFOL: exists x. (AmericanArt(x) & Excludes(x, WhitneyParkOfAmericanArt))\nTEXT: A park in NYC excludes Byzantine and Islamic Art.\nFOL: exists x. (Park(x) & NYC(x) & exists x. (ByzantineAndIslamicArt(x) & Excludes(x, x)))\nTEXT: A park in NYC excludes Byzantine and Islamic Art.\nFOL: exists x. (Park(x) & NYC(x) & exists x. (ByzantineAndIslamicArt(x) & Excludes(x, x)))\n", "TEXT: The Metropolitan Park of Art is a park in NYC.\nFOL: Park(TheMetropolitanParkofArt) & NYC(TheMetropolitanParkofArt)\nTEXT: Whitney Park of American Art is a park in NYC.\nFOL: Park(WhitneyParkofAmericanArt) & NYC(WhitneyParkofAmericanArt)\nTEXT: The Park of Modern Art (MoMA) is a park in NYC.\nFOL: Park(TheParkofModernArt(MoMA)) & NYC(TheParkofModernArt(MoMA))\nTEXT: The Metropolitan Park of Art excludes Byzantine and Islamic Art.\nFOL: ((-ByzantineAndIslamicArt(TheMetropolitanParkofArt) & -IslamicArt(TheMetropolitanParkofArt)) & -ByzantineArt(TheMetropolitanParkofArt))\nfol: ((-ByzantineAndIslamicArt(TheMetropolitanParkofArt) & -IslamicArt(TheMetropolitanParkofArt)) & -ByzantineArt(TheMetropolitanParkofArt))\nTEXT: Whitney Park of American Art excludes American art.\nFOL: ((-AmericanArt(WhitneyParkofAmericanArt) & -AmericanArt(WhitneyParkofAmericanArt)) & -AmericanArt(WhitneyParkofAmericanArt))\nTEXT: A park in NYC excludes Byzantine and Islamic Art.\nFOL: exists x. exists y. ((In(x, NYC) & Park(x)) -> (-ByzantineAndIslamicArt(x) & -IslamicArt(x)) & (-ByzantineArt(x) & -AmericanArt(x)))\n", "TEXT: The Metropolitan Park of Art is a park in NYC.\nFOL: MetropolitanParkOfArt(ParkOfNYC)\nTEXT: Whitney Park of American Art is a park in NYC.\nFOL: WhitneyParkOfAmericanArt(ParkOfNYC)\nTEXT: The Park of Modern Art (MoMA) is a park in NYC.\nFOL: MoMA(ParkOfNYC)\nTEXT: The Metropolitan Park of Art excludes Byzantine and Islamic Art.\nFOL: exists x. (MetropolitanParkOfArt(x) & Exludes(x, ByzantineAndIslamicArt))\nTEXT: Whitney Park of American Art excludes American art.\nFOL: exists x. (WhitneyParkOfAmericanArt(x) & Exludes(x, AmericanArt))\nTEXT: A park in NYC excludes Byzantine and Islamic Art.\nFOL: exists x. (ParkOfNYC(x) & Exludes(x, ByzantineAndIslamicArt))\n", "TEXT: The Metropolitan Park of Art is a park in NYC.\nFOL: MetropolitanParkOfArt(x) & In(x, NYC) & Park(x)\nTEXT: Whitney Park of American Art is a park in NYC.\nFOL: WhitneyParkOfAmericanArt(x) & In(x, NYC) & Park(x)\nTEXT: The Park of Modern Art (MoMA) is a park in NYC.\nFOL: ParkOfModernArt(x) & In(x, NYC) & Park(x)\nTEXT: The Metropolitan Park of Art excludes Byzantine and Islamic Art.\nFOL: exists x. (MetropolitanParkOfArt(x) & Excludes(x, ByzantineAndIslamicArt))\nTEXT: Whitney Park of American Art excludes American art.\nFOL: exists x. (WhitneyParkOfAmericanArt(x) & Excludes(x, AmericanArt))\nTEXT: A park in NYC excludes Byzantine and Islamic Art.\nFOL: exists x. (Park(x) & In(x, NYC) & Excludes(x, ByzantineAndIslamicArt))\n", "TEXT: The Metropolitan Park of Art is a park in NYC.\nFOL: all x. (Park(x) & In(x, NewYorkCity) & Is(x, MetropolitanParkOfArt))\nTEXT: Whitney Park of American Art is a park in NYC.\nFOL: all x. (Park(x) & In(x, NewYorkCity) & Is(x, WhitneyParkOfAmericanArt))\nTEXT: The Park of Modern Art (MoMA) is a park in NYC.\nFOL: all x. (Park(x) & In(x, NewYorkCity) & Is(x, ParkOfModernArt))\nTEXT: The Metropolitan Park of Art excludes Byzantine and Islamic Art.\nFOL: all x. (Park(x) & Exludes(x, Byzantine) & Exludes(x, IslamicArt))\nTEXT: Whitney Park of American Art excludes American art.\nFOL: all x. (Park(x) & Exludes(x, AmericanArt))\nTEXT: A park in NYC excludes Byzantine and Islamic Art.\nFOL: all x. (Park(x) & In(x, NewYorkCity) & Exludes(x, Byzantine) & Exludes(x, IslamicArt))\n", "TEXT: The Metropolitan Park of Art is a park in NYC.\nFOL: all x. (Park(x, MetropolitanParkOfArt) & In(x, NewYorkCity))\nTEXT: Whitney Park of American Art is a park in NYC.\nFOL: all x. (Park(x, WhitneyParkOfAmericanArt) & In(x, NewYorkCity))\nTEXT: The Park of Modern Art (MoMA) is a park in NYC.\nFOL: all x. (Park(x, MoMA) & In(x, NewYorkCity))\nTEXT: The Metropolitan Park of Art excludes Byzantine and Islamic Art.\nFOL: all x. (Excluding(x, MetropolitanParkOfArt) & Excluding(x, ByzantineArt) & Excluding(x, IslamicArt))\nTEXT: Whitney Park of American Art excludes American art.\nFOL: all x. (Excluding(x, WhitneyParkOfAmericanArt) & Excluding(x, AmericanArt))\nTEXT: A park in NYC excludes Byzantine and Islamic Art.\nFOL: exists x. (Park(x, NYC) & Excluding(x, ByzantineArt) & Excluding(x, IslamicArt))\n", "TEXT: The Metropolitan Park of Art is a park in NYC.\nFOL: exists x. (Park(x) & In(x, NYC))\nTEXT: Whitney Park of American Art is a park in NYC.\nFOL: exists x. (Park(x) & In(x, NYC))\nTEXT: The Park of Modern Art (MoMA) is a park in NYC.\nFOL: exists x. (Park(x) & In(x, NYC))\nTEXT: The Metropolitan Park of Art excludes Byzantine and Islamic Art.\nFOL: exists x. (Excludes(TheMetropolitanParkOfArt, ByzantineAndIslamicArt))\nTEXT: Whitney Park of American Art excludes American art.\nFOL: exists x. (Excludes(WhitneyParkOfAmericanArt, AmericanArt))\nTEXT: A park in NYC excludes Byzantine and Islamic Art.\nFOL: exists x. (Park(x) & In(x, NYC) & exists y. (Excludes(x, y) & ByzantineAndIslamicArt(y)))\nTEXT: A park in NYC excludes Byzantine and Islamic Art.\nFOL: exists x. (Park(x) & In(x, NYC) & exists y. (Excludes(x, y) & ByzantineAndIslamicArt(y)))\n", "TEXT: The Metropolitan Park of Art is a park in NYC.\nFOL: exists x. (Park(x) & In(x, NYC) & Name(x, MetropolitanParkOfArt))\nTEXT: Whitney Park of American Art is a park in NYC.\nFOL: exists x. (Park(x) & In(x, NYC) & Name(x, WhitneyParkOfAmericanArt))\nTEXT: The Park of Modern Art (MoMA) is a park in NYC.\nFOL: exists x. (Park(x) & In(x, NYC) & Name(x, MoMA))\nTEXT: The Metropolitan Park of Art excludes Byzantine and Islamic Art.\nFOL: exists x. (Park(x) & Excludes(x, ByzantineAndIslamicArt))\nTEXT: Whitney Park of American Art excludes American art.\nFOL: exists x. (Park(x) & Excludes(x, AmericanArt))\nTEXT: A park in NYC excludes Byzantine and Islamic Art.\nFOL: exists x. exists y. (Park(x) & In(x, NYC) & Excludes(x, ByzantineAndIslamicArt))\n", "TEXT: The Metropolitan Park of Art is a park in NYC.\nFOL: exists x. (In(x, NYC) & Park(x) & MetropolitanParkOfArt(x))\nTEXT: Whitney Park of American Art is a park in NYC.\nFOL: exists x. (In(x, NYC) & Park(x) & WhitneyParkOfAmericanArt(x))\nTEXT: The Park of Modern Art (MoMA) is a park in NYC.\nFOL: exists x. (In(x, NYC) & Park(x) & ModernArt(x))\nTEXT: The Metropolitan Park of Art excludes Byzantine and Islamic Art.\nFOL: all x. (Park(x) & MetropolitanParkOfArt(x) -> -ByzantineAndIslamicArt(x))\nTEXT: Whitney Park of American Art excludes American art.\nFOL: all x. (Park(x) & WhitneyParkOfAmericanArt(x) -> -AmericanArt(x))\nTEXT: A park in NYC excludes Byzantine and Islamic Art.\nFOL: exists x. (In(x, NYC) & Park(x) -> -ByzantineAndIslamicArt(x))\n", "TEXT: The Metropolitan Park of Art is a park in NYC.\nFOL: (MetropolitanParkOfArt(x) -> Park(x) & In(x, NYC))\nTEXT: Whitney Park of American Art is a park in NYC.\nFOL: (WhitneyParkOfAmericanArt(x) -> Park(x) & In(x, NYC))\nTEXT: The Park of Modern Art (MoMA) is a park in NYC.\nFOL: (ParkOfModernArt(x) -> Park(x) & In(x, NYC))\nTEXT: The Metropolitan Park of Art excludes Byzantine and Islamic Art.\nFOL: (MetropolitanParkOfArt(x) & Exludes(x, ByzantineAndIslamicArt))\nTEXT: Whitney Park of American Art excludes American art.\nFOL: (WhitneyParkOfAmericanArt(x) & Exludes(x, AmericanArt))\nTEXT: A park in NYC excludes Byzantine and Islamic Art.\nFOL: exists x. (Park(x) & In(x, NYC)) & (Exludes(x, ByzantineAndIslamicArt))\n"], "answers": ["True", "Error", "Error", "True", "True", "Uncertain", "Error", "Uncertain", "True", "True"], "reference": "True", "time_s": 310.8376305103302}
{"idx": 13, "prompt": "The following is a first-order logic (FOL) problem.\nThe problem is to determine whether the conclusion follows from the premises.\nThe premises are given in the form of a set of first-order logic sentences.\nThe conclusion is given in the form of a single first-order logic sentence.\nThe task is to translate each of the premises and conclusions into FOL expressions so that the expressions can be evaluated by a theorem solver like Prover9 to determine whether the conclusion follows from the premises.\nExpressions should adhere to the format of the Python NLTK package logic module. \n\n\n<PREMISES>\nAll biodegradable things are environment-friendly.\nAll woodware is biodegradable.\nAll paper is woodware.\nNothing is a good thing and also a bad thing.\nAll environment-friendly things are good.\nA worksheet is either paper or environment-friendly.\n</PREMISES>\n<CONCLUSION>\nA worksheet is not biodegradable.\n</CONCLUSION>\n<EVALUATE>\nTEXT: All biodegradable things are environment-friendly.\nFOL: all x. (Biodegradable(x) -> EnvironmentFriendly(x))\nTEXT: All woodware is biodegradable.\nFOL: all x. (Woodware(x) -> Biodegradable(x))\nTEXT: All paper is woodware.\nFOL: all x. (Paper(x) -> Woodware(x))\nTEXT: Nothing is a good thing and also a bad thing.\nFOL: -(exists x. (Good(x) & Bad(x)))\nTEXT: All environment-friendly things are good.\nFOL: all x. (EnvironmentFriendly(x) -> Good(x))\nTEXT: A worksheet is either paper or environment-friendly.\nFOL: ((Paper(Worksheet) & -EnvironmentFriendly(Worksheet)) | (-Paper(Worksheet) & EnvironmentFriendly(Worksheet)))\nTEXT: A worksheet is not biodegradable.\nFOL: -Dispensable(Worksheet)\n</EVALUATE>\n\n<PREMISES>\nA La Liga soccer team ranks higher than another La Liga soccer team if it receives more points.\nIf there are two La Liga soccer teams and neither has more points than the other, then the team which receives more points from the games between the two teams ranks higher.\nReal Madrid and Barcelona are both La Liga soccer teams.\nReal Madrid received more points than Barcelona.\nNeither Real Madrid nor Barcelona received more points from the games between them.\n</PREMISES>\n<CONCLUSION>\nReal Madrid ranks higher than Barcelona.\n</CONCLUSION>\n<EVALUATE>\nTEXT: A La Liga soccer team ranks higher than another La Liga soccer team if it receives more points.\nFOL: all x. all y. (LaLigaSoccerTeam(x) & LaLigaSoccerTeam(y) & MorePoints(x, y) -> RankHigherThan(x, y))\nTEXT: If there are two La Liga soccer teams and neither has more points than the other, then the team which receives more points from the games between the two teams ranks higher.\nFOL: all x. all y. (LaLigaSoccerTeam(x) & LaLigaSoccerTeam(y) & -MorePoints(x, y) & -MorePoints(y, x) & MorePointsInGameBetween(x, y) ->  RankHigherThan(x, y))\nTEXT: Real Madrid and Barcelona are both La Liga soccer teams.\nFOL: LaLigaSoccerTeam(RealMadrid) & LaLigaSoccerTeam(Barcelona)\nTEXT: Real Madrid received more points than Barcelona.\nFOL: MorePoints(RealMadrid, Barcelona)\nTEXT: Neither Real Madrid nor Barcelona received more points from the games between them.\nFOL: -MorePointsInGameBetween(RealMadrid, Barcelona) & -MorePointsInGameBetween(Barcelona, RealMadrid)\nTEXT: Real Madrid ranks higher than Barcelona.\nFOL: HigherRank(RealMadrid, Barcelona)\n</EVALUATE>\n\n<PREMISES>\nAll professional athletes spend most of their time on sports.\nAll Olympic gold medal winners are professional athletes.\nNo full-time scientists spend the majority of their time on sports.\nAll Nobel physics laureates are full-time scientists.\nAmy spends the most time on sports, or Amy is an Olympic gold medal winner.\nIf Amy is not a Nobel physics laureate, then Amy is not an Olympic gold medal winner.\n</PREMISES>\n<CONCLUSION>\nIf Amy is not an Olympic gold medal winner, then Amy is a Nobel physics laureate.\n</CONCLUSION>\n<EVALUATE>\nTEXT: All professional athletes spend most of their time on sports.\nFOL: all x. (ProfessionalAthlete(x) -> SpendOn(x, MostOfTheirTime, Sports))\nTEXT: All Olympic gold medal winners are professional athletes.\nFOL: all x. (OlympicGoldMedalWinner(x) -> ProfessionalAthlete(x))\nTEXT: No full-time scientists spend the majority of their time on sports.\nFOL: all x. (FullTimeScientist(x) -> -SpendOn(x, MostOfTheirTime, Sports))\nTEXT: All Nobel physics laureates are full-time scientists.\nFOL: all x. (NobelPhysicsLaureate(x) -> FullTimeScientist(x))\nTEXT: Amy spends the most time on sports, or Amy is an Olympic gold medal winner.\nFOL: SpendOn(Amy, MostOfTheirTime, Sports) | OlympicGoldMedalWinner(Amy)\nTEXT: If Amy is not a Nobel physics laureate, then Amy is not an Olympic gold medal winner.\nFOL: -NobelPhysicsLaureate(Amy) -> -OlympicGoldMedalWinner(Amy)\nTEXT: If Amy is not an Olympic gold medal winner, then Amy is a Nobel physics laureate.\nFOL: -OlympicGoldMedalWinner(Amy) -> NobelLaureate(Amy)\n</EVALUATE>\n\n<PREMISES>\nIf a person pays their taxes, then they contribute to the country.\nEveryone who works for a government department pays a tax on their salary.\nEveryone in the army is an employee of a government department.\nEveryone convicted of murder goes to prison.\nEveryone who has been to prison has a criminal record.\nJames was either once convicted of murder, or spent time in prison.\nJames either has a criminal record, or pays his taxes.\n</PREMISES>\n<CONCLUSION>\nJames does not contribute to the country.\n</CONCLUSION>\n<EVALUATE>\nTEXT: If a person pays their taxes, then they contribute to the country.\nFOL: all x. (Taxpayer(x) -> ContributeTo(x, Country))\nTEXT: Everyone who works for a government department pays a tax on their salary.\nFOL: all x. (WorkFor(x, GovernmentAgency) -> Taxpayer(x))\nTEXT: Everyone in the army is an employee of a government department.\nFOL: all x. (ServesIn(x, TheArmy) -> WorkFor(x, GovernmentAgency))\nTEXT: Everyone convicted of murder goes to prison.\nFOL: all x. (SentencedForMurder(x) -> Imprisoned(x))\nTEXT: Everyone who has been to prison has a criminal record.\nFOL: all x. (Imprisoned((x) -> Has(x, CriminalRecord))\nTEXT: James was either once convicted of murder, or spent time in prison.\nFOL: ((SentencedForMurder(James) & -Imprisoned(James)) | (-SentencedForMurder(James) & Imprisoned(James)))\nTEXT: James either has a criminal record, or pays his taxes.\nFOL: ((Has(James, CriminalRecord) & -Taxpayer(James)) | (-Has(James, CriminalRecord) & Taxpayer(James)))\nTEXT: James does not contribute to the country.\nFOL: ContributeToCountry(James)\n</EVALUATE>\n\n<PREMISES>\nNo songs are visuals.\nAll folk songs are songs.\nAll videos are visuals.\nAll movies are videos.\nAll sci-fi movies are movies.\nInception is a sci-fi movie.\nMac is neither a folk song nor a sci-fi movie.\n</PREMISES>\n<CONCLUSION>\nInception is a folk song.\n</CONCLUSION>\n<EVALUATE>\nTEXT: No songs are visuals.\nFOL: all x. (Song(x) -> -Visual(x))\nTEXT: All folk songs are songs.\nFOL: all x. (FolkSong(x) -> Song(x))\nTEXT: All videos are visuals.\nFOL: all x. (Video(x) -> Visual(x))\nTEXT: All movies are videos.\nFOL: all x. (Movie(x) -> Video(x))\nTEXT: All sci-fi movies are movies.\nFOL: all x. (ScifiMovie(x) -> Movie(x))\nTEXT: Inception is a sci-fi movie.\nFOL: ScifiMovie(Inception)\nTEXT: Mac is neither a folk song nor a sci-fi movie.\nFOL: -FolkSong(Mac) & -ScifiMovie(Mac)\nTEXT: Inception is a folk song.\nFOL: FolkSong(Inception)\n</EVALUATE>\n\n<PREMISES>\nEvery chef can cook.\nSome people who aren\u2019t chefs can cook.\nPeople who cook can make scrambled eggs and pasta.\nIf someone can make cookies and muffins, they are a baker.\nBakers who can also make scrambled eggs can make a good breakfast.\nLuke can make cookies, scrambled eggs, and muffins, but not pasta.\n</PREMISES>\n<CONCLUSION>\nLuke is a chef.\n</CONCLUSION>\n<EVALUATE>\nTEXT: Every chef can cook.\nFOL: all x. (Chef(x) -> Can(x, Cook))\nTEXT: Some people who aren\u2019t chefs can cook.\nFOL: exists x. (-Chef(x) & Can(x, Cook))\nTEXT: People who cook can make scrambled eggs and pasta.\nFOL: all x. (Can(x, Cook) -> (CanMake(x, ScrambledEggs) & CanMake(x, Pasta)))\nTEXT: If someone can make cookies and muffins, they are a baker.\nFOL: all x. (CanMake(x, Cookies) & CanMake(x, Muffins) -> Baker(x))\nTEXT: Bakers who can also make scrambled eggs can make a good breakfast.\nFOL: all x. ((Baker(x) & CanMake(x, ScrambledEggs)) -> CanMake(x, GoodBreakfast))\nTEXT: Luke can make cookies, scrambled eggs, and muffins, but not pasta.\nFOL: CanMake(Luke, Cookies) & (CanMake(Luke, ScrambledEggs) & CanMake(Luke, Muffins) & -CanMake(Luke, Pasta)\nTEXT: Luke is a chef.\nFOL: MakeGoodBreakfast(Luke)\n</EVALUATE>\n\n<PREMISES>\nETS develops various standardized tests primarily in the United States for K-12 and higher education.\nETS administers international tests, including the TOEFL, TOEIC, GRE, and subject tests.\nMany of the assessments ETS develops are associated with entry to the US tertiary and quaternary education institutions.\nETS also develops K-12 statewide assessments used for accountability testing in many states.\n</PREMISES>\n<CONCLUSION>\nETS doesn't administer tests internationally.\n</CONCLUSION>\n<EVALUATE>\nTEXT: ETS develops various standardized tests primarily in the United States for K-12 and higher education.\nFOL: exists x. exists y. (Develop(eTS, x) & Develop(eTS, y) & StandardizedTest(x) & StandardizedTest(y) & In(x, UnitedState) & In(y, UnitedState) & For(x, kOneTwoAndHigherEducation) & For(y, kOneTwoAndHigherEducation))\nTEXT: ETS administers international tests, including the TOEFL, TOEIC, GRE, and subject tests.\nFOL: exists x. (Administer(eTS, x) & InternationalTest(x) & (TOEFL(x) | TOEIC(x) | GRE(x) | SubjectTest(x)))\nTEXT: Many of the assessments ETS develops are associated with entry to the US tertiary and quaternary education institutions.\nFOL: exists x. (Develop(eTS, x) & AssociatedWith(x, EntryToUSEducationInstitution))\nTEXT: ETS also develops K-12 statewide assessments used for accountability testing in many states.\nFOL: exists x. (Develop(eTS, x) & StateWideAssesment(x) & UsedFor(x, AccountabilityTesting))\nTEXT: ETS doesn't administer tests internationally.\nFOL: exists x. (Develops(Ets, x) & For(x, k-OneTwoandhighereducation)) & exists x. (Develops(Ets, x) & AssociatedWith(x, Entrytouseducationinstitutions))\n</EVALUATE>\n\n<PREMISES>\nDaveed Diggs is an actor and film producer.\nDaveed Diggs played two roles in the musical Hamilton on Broadway.\nOne of the actors from Hamilton won the best actor award.\nThe actor playing Thomas Jefferson won the best actor award.\nDaveed Diggs played Thomas Jefferson.\nMusicals on Broadway are not films.\n</PREMISES>\n<CONCLUSION>\nDaveed Diggs won the best actor award.\n</CONCLUSION>\n<EVALUATE>\nTEXT: Daveed Diggs is an actor and film producer.\nFOL: Actor(DaveedDiggs) & FilmProducer(DaveedDiggs)\nTEXT: Daveed Diggs played two roles in the musical Hamilton on Broadway.\nFOL: exists x. exists y.(PlaysIn(DaveedDiggs, x, Hamilton) & (-(x=y)) & PlaysIn(DaveedDiggs, y, Hamilton)) & OnBroadway(Hamilton) & Musical(Hamilton)\nTEXT: One of the actors from Hamilton won the best actor award.\nFOL: exists x. exists y.(Actor(x) & PlaysIn(x, y, Hamilton) & Wins(x, BestActorAward))\nTEXT: The actor playing Thomas Jefferson won the best actor award.\nFOL: exists x. (Actor(x) & PlaysIn(x, ThomasJefferson, Hamilton) & Wins(x, BestActorAward))\nTEXT: Daveed Diggs played Thomas Jefferson.\nFOL: Plays(DaveedDiggs, ThomasJefferson)\nTEXT: Musicals on Broadway are not films.\nFOL: all x. ((Musical(x) & OnBroadway(x)) -> -Film(x))\nTEXT: Daveed Diggs won the best actor award.\nFOL: exists x. (BRICS(x) & Speaks(x, Hindi))\n</EVALUATE>\n\n<PREMISES>\nThe Metropolitan Park of Art is a park in NYC.\nWhitney Park of American Art is a park in NYC.\nThe Park of Modern Art (MoMA) is a park in NYC.\nThe Metropolitan Park of Art excludes Byzantine and Islamic Art.\nWhitney Park of American Art excludes American art.\n</PREMISES>\n<CONCLUSION>\nA park in NYC excludes American art.\n</CONCLUSION>\n<EVALUATE>\n", "raw_generations": ["TEXT: The Metropolitan Park of Art is a park in NYC.\nFOL: (Park(TheMetropolitanParkOfArt) & In(TheMetropolitanParkOfArt, NYC))\nTEXT: Whitney Park of American Art is a park in NYC.\nFOL: (Park(WhitneyParkOfAmericanArt) & In(WhitneyParkOfAmericanArt, NYC))\nTEXT: The Park of Modern Art (MoMA) is a park in NYC.\nFOL: (Park(TheParkOfModernArt) & In(TheParkOfModernArt, NYC))\nTEXT: The Metropolitan Park of Art excludes Byzantine and Islamic Art.\nFOL: (ExclusesByzantineAndIslamicArt(TheMetropolitanParkOfArt) & ExclusesByzantineAndIslamicArt(TheParkOfModernArt))\nTEXT: Whitney Park of American Art excludes American art.\nFOL: (ExclusesAmericanArt(WhitneyParkOfAmericanArt) & ExclusesAmericanArt(TheParkOfModernArt))\nTEXT: A park in NYC excludes American art.\nFOL: all x. ((Park(x) & In(x, NYC)) -> (ExclusesAmericanArt(x) | ExclusesByzantineAndIslamicArt(x)))\nTEXT: A park in NYC excludes American art.\nFOL: all x. (In(x, NYC) -> ExclusesAmericanArt(x))\n", "TEXT: The Metropolitan Park of Art is a park in NYC.\nFOL: all x. exists y. (Park(x) & In(x, NewYorkCity) & Park(y) & In(y, NewYorkCity)) & (x=y)\nTEXT: Whitney Park of American Art is a park in NYC.\nFOL: WhitneyParkOfAmericanArt(x) & In(x, NewYorkCity)\nTEXT: The Park of Modern Art (MoMA) is a park in NYC.\nFOL: ParkOfModernArt(x) & In(x, NewYorkCity)\nTEXT: The Metropolitan Park of Art excludes Byzantine and Islamic Art.\nFOL: exists x. exists y. (MetropolitanParkOfArt(x) & Excludes(x, ByzantineAndIslamicArt))\nTEXT: Whitney Park of American Art excludes American art.\nFOL: exists x. exists y. (WhitneyParkOfAmericanArt(x) & Excludes(x, AmericanArt))\nTEXT: A park in NYC excludes American art.\nFOL: exists x. exists y. exists z. exists w. exists v. exists t. ((Park(x) & In(x, NewYorkCity)) & (Park(y) & In(y, NewYorkCity)) & (Park(z) & In(z, NewYorkCity)) & (Park(w) & In(w, NewYorkCity)) & (Park(v) & In(v, NewYorkCity)) & (Park(t) & In(t, NewYorkCity)) & (x=y & -z=w & -v=t)) -> (Excludes(x, AmericanArt))\n", "TEXT: The Metropolitan Park of Art is a park in NYC.\nFOL: MetropolitanParkOfArt(MetropolitanParkOfArt) & Park(MetropolitanParkOfArt) & In(MetropolitanParkOfArt, NewYork)\nTEXT: Whitney Park of American Art is a park in NYC.\nFOL: WhitneyParkOfAmericanArt(WhitneyParkOfAmericanArt) & Park(WhitneyParkOfAmericanArt) & In(WhitneyParkOfAmericanArt, NewYork)\nTEXT: The Park of Modern Art (MoMA) is a park in NYC.\nFOL: MoMA(MoMA) & Park(MoMA) & In(MoMA, NewYork)\nTEXT: The Metropolitan Park of Art excludes Byzantine and Islamic Art.\nFOL: all x. all y. (MetropolitanParkOfArt(x) & Excludes(x, y) & ByzantineOrIslamicArt(y))\nTEXT: Whitney Park of American Art excludes American art.\nFOL: all x. all y. (WhitneyParkOfAmericanArt(x) & Excludes(x, y) & AmericanArt(y))\nTEXT: A park in NYC excludes American art.\nFOL: exists x. (Park(x) & In(x, NewYork) & -AmericanArt(x))\n", "TEXT: The Metropolitan Park of Art is a park in NYC.\nFOL: (Park(TheMetropolitanParkOfArt) & In(TheMetropolitanParkOfArt, NewYork))\nTEXT: Whitney Park of American Art is a park in NYC.\nFOL: (Park(WhitneyParkOfAmericanArt) & In(WhitneyParkOfAmericanArt, NewYork))\nTEXT: The Park of Modern Art (MoMA) is a park in NYC.\nFOL: (Park(TheParkOfModernArt) & In(TheParkOfModernArt, NewYork))\nTEXT: The Metropolitan Park of Art excludes Byzantine and Islamic Art.\nFOL: (Excludes(TheMetropolitanParkOfArt, ByzantineAndIslamicArt))\nTEXT: Whitney Park of American Art excludes American art.\nFOL: (Excludes(WhitneyParkOfAmericanArt, AmericanArt))\nTEXT: A park in NYC excludes American art.\nFOL: exists x. (Park(x) & In(x, NewYork)) & exists x. (Excludes(x, AmericanArt))\n", "TEXT: The Metropolitan Park of Art is a park in NYC.\nFOL: Park(TheMetropolitanParkOfArt) & In(TheMetropolitanParkOfArt, NYC)\nTEXT: Whitney Park of American Art is a park in NYC.\nFOL: Park(WhitneyParkOfAmericanArt) & In(WhitneyParkOfAmericanArt, NYC)\nTEXT: The Park of Modern Art (MoMA) is a park in NYC.\nFOL: Park(TheParkOfModernArtMoMA) & In(TheParkOfModernArtMoMA, NYC)\nTEXT: The Metropolitan Park of Art excludes Byzantine and Islamic Art.\nFOL: Excludes(TheMetropolitanParkOfArt, ByzantineAndIslamicArt)\nTEXT: Whitney Park of American Art excludes American art.\nFOL: Excludes(WhitneyParkOfAmericanArt, AmericanArt)\nTEXT: A park in NYC excludes American art.\nFOL: exists x. (Park(x) & In(x, NYC) & Excludes(x, AmericanArt))\n", "TEXT: The Metropolitan Park of Art is a park in NYC.\nFOL: Park(TheMetropolitanParkofArt) & In(TheMetropolitanParkofArt, NYC)\nTEXT: Whitney Park of American Art is a park in NYC.\nFOL: Park(WhitneyParkofAmericanArt) & In(WhitneyParkofAmericanArt, NYC)\nTEXT: The Park of Modern Art (MoMA) is a park in NYC.\nFOL: Park(TheParkofModernArt(MoMA)) & In(TheParkofModernArt(MoMA), NYC)\nTEXT: The Metropolitan Park of Art excludes Byzantine and Islamic Art.\nFOL: -Exclu(Byzantine, Islamic, TheMetropolitanParkofArt)\nTEXT: Whitney Park of American Art excludes American art.\nFOL: -Exclu(AmericanArt, WhitneyParkofAmericanArt)\nTEXT: A park in NYC excludes American art.\nFOL: all x. (Park(x) & In(x, NYC) -> -Exclu(AmericanArt, x))\n", "TEXT: The Metropolitan Park of Art is a park in NYC.\nFOL: MetropolitanParkOfArt(TheMetropolitanParkOfArt) & Park(TheMetropolitanParkOfArt) & In(TheMetropolitanParkOfArt, NYC)\nTEXT: Whitney Park of American Art is a park in NYC.\nFOL: WhitneyParkOfAmericanArt(WhitneyParkOfAmericanArt) & Park(WhitneyParkOfAmericanArt) & In(WhitneyParkOfAmericanArt, NYC)\nTEXT: The Park of Modern Art (MoMA) is a park in NYC.\nFOL: MoMA(TheParkOfModernArt) & Park(TheParkOfModernArt) & In(TheParkOfModernArt, NYC)\nTEXT: The Metropolitan Park of Art excludes Byzantine and Islamic Art.\nFOL: exists x. exists y. (Excludes(TheMetropolitanParkOfArt, x) & ByzantineOrIslamicArt(x) & (-(x=y)))\nTEXT: Whitney Park of American Art excludes American art.\nFOL: exists x. exists y. (Excludes(WhitneyParkOfAmericanArt, x) & AmericanArt(x) & (-(x=y)))\nTEXT: A park in NYC excludes American art.\nFOL: exists x. exists y. (In(x, NYC) & Excludes(x, y))\n", "TEXT: The Metropolitan Park of Art is a park in NYC.\nFOL: all x. (Park(x) & In(x, NYC) & MetropolitanParkOfArt(x))\nTEXT: Whitney Park of American Art is a park in NYC.\nFOL: all x. (Park(x) & In(x, NYC) & WhitneyParkOfAmericanArt(x))\nTEXT: The Park of Modern Art (MoMA) is a park in NYC.\nFOL: all x. (Park(x) & In(x, NYC) & ParkOfModernArt(x))\nTEXT: The Metropolitan Park of Art excludes Byzantine and Islamic Art.\nFOL: all x. (Park(x) & In(x, NYC) & MetropolitanParkOfArt(x) & (-ByzantineAndIslamicArt(x)))\nTEXT: Whitney Park of American Art excludes American art.\nFOL: all x. (Park(x) & In(x, NYC) & WhitneyParkOfAmericanArt(x) & (-AmericanArt(x)))\nTEXT: A park in NYC excludes American art.\nFOL: exists x. (Park(x) & In(x, NYC) & (-AmericanArt(x)))\n", "TEXT: The Metropolitan Park of Art is a park in NYC.\nFOL: exists x. (Park(x) & In(x, NYC) & ParkOfArt(x))\nTEXT: Whitney Park of American Art is a park in NYC.\nFOL: exists x. (Park(x) & In(x, NYC) & ParkOfAmericanArt(x))\nTEXT: The Park of Modern Art (MoMA) is a park in NYC.\nFOL: exists x. (Park(x) & In(x, NYC) & ParkOfModernArt(x))\nTEXT: The Metropolitan Park of Art excludes Byzantine and Islamic Art.\nFOL: exists x. (MetropolitanParkOfArt(x) & Excludes(x, ByzantineArt) & Excludes(x, IslamicArt))\nTEXT: Whitney Park of American Art excludes American art.\nFOL: exists x. (WhitneyParkOfAmericanArt(x) & Excludes(x, AmericanArt))\nTEXT: A park in NYC excludes American art.\nFOL: exists x. (Park(x) & In(x, NYC) & -AmericanArt(x))\n", "TEXT: The Metropolitan Park of Art is a park in NYC.\nFOL: exists x. (Park(x) & In(x, NYC) & MetropolitanParkOfArt(x))\nTEXT: Whitney Park of American Art is a park in NYC.\nFOL: exists x. (Park(x) & In(x, NYC) & WhitneyParkOfAmericanArt(x))\nTEXT: The Park of Modern Art (MoMA) is a park in NYC.\nFOL: exists x. (Park(x) & In(x, NYC) & ModernArt(x))\nTEXT: The Metropolitan Park of Art excludes Byzantine and Islamic Art.\nFOL: MetropolitanParkOfArt(x) & -ByzantineAndIslamicArt(x)\nTEXT: Whitney Park of American Art excludes American art.\nFOL: WhitneyParkOfAmericanArt(x) & -AmericanArt(x)\nTEXT: A park in NYC excludes American art.\nFOL: exists x. exists y. (In(x, NYC) & -AmericanArt(x) -> -Park(y))\n"], "answers": ["Uncertain", "True", "Error", "True", "True", "Error", "Error", "True", "Error", "Uncertain"], "reference": "True", "time_s": 290.2428033351898}
{"idx": 14, "prompt": "The following is a first-order logic (FOL) problem.\nThe problem is to determine whether the conclusion follows from the premises.\nThe premises are given in the form of a set of first-order logic sentences.\nThe conclusion is given in the form of a single first-order logic sentence.\nThe task is to translate each of the premises and conclusions into FOL expressions so that the expressions can be evaluated by a theorem solver like Prover9 to determine whether the conclusion follows from the premises.\nExpressions should adhere to the format of the Python NLTK package logic module. \n\n\n<PREMISES>\nAll biodegradable things are environment-friendly.\nAll woodware is biodegradable.\nAll paper is woodware.\nNothing is a good thing and also a bad thing.\nAll environment-friendly things are good.\nA worksheet is either paper or environment-friendly.\n</PREMISES>\n<CONCLUSION>\nA worksheet is not biodegradable.\n</CONCLUSION>\n<EVALUATE>\nTEXT: All biodegradable things are environment-friendly.\nFOL: all x. (Biodegradable(x) -> EnvironmentFriendly(x))\nTEXT: All woodware is biodegradable.\nFOL: all x. (Woodware(x) -> Biodegradable(x))\nTEXT: All paper is woodware.\nFOL: all x. (Paper(x) -> Woodware(x))\nTEXT: Nothing is a good thing and also a bad thing.\nFOL: -(exists x. (Good(x) & Bad(x)))\nTEXT: All environment-friendly things are good.\nFOL: all x. (EnvironmentFriendly(x) -> Good(x))\nTEXT: A worksheet is either paper or environment-friendly.\nFOL: ((Paper(Worksheet) & -EnvironmentFriendly(Worksheet)) | (-Paper(Worksheet) & EnvironmentFriendly(Worksheet)))\nTEXT: A worksheet is not biodegradable.\nFOL: -Dispensable(Worksheet)\n</EVALUATE>\n\n<PREMISES>\nA La Liga soccer team ranks higher than another La Liga soccer team if it receives more points.\nIf there are two La Liga soccer teams and neither has more points than the other, then the team which receives more points from the games between the two teams ranks higher.\nReal Madrid and Barcelona are both La Liga soccer teams.\nReal Madrid received more points than Barcelona.\nNeither Real Madrid nor Barcelona received more points from the games between them.\n</PREMISES>\n<CONCLUSION>\nReal Madrid ranks higher than Barcelona.\n</CONCLUSION>\n<EVALUATE>\nTEXT: A La Liga soccer team ranks higher than another La Liga soccer team if it receives more points.\nFOL: all x. all y. (LaLigaSoccerTeam(x) & LaLigaSoccerTeam(y) & MorePoints(x, y) -> RankHigherThan(x, y))\nTEXT: If there are two La Liga soccer teams and neither has more points than the other, then the team which receives more points from the games between the two teams ranks higher.\nFOL: all x. all y. (LaLigaSoccerTeam(x) & LaLigaSoccerTeam(y) & -MorePoints(x, y) & -MorePoints(y, x) & MorePointsInGameBetween(x, y) ->  RankHigherThan(x, y))\nTEXT: Real Madrid and Barcelona are both La Liga soccer teams.\nFOL: LaLigaSoccerTeam(RealMadrid) & LaLigaSoccerTeam(Barcelona)\nTEXT: Real Madrid received more points than Barcelona.\nFOL: MorePoints(RealMadrid, Barcelona)\nTEXT: Neither Real Madrid nor Barcelona received more points from the games between them.\nFOL: -MorePointsInGameBetween(RealMadrid, Barcelona) & -MorePointsInGameBetween(Barcelona, RealMadrid)\nTEXT: Real Madrid ranks higher than Barcelona.\nFOL: HigherRank(RealMadrid, Barcelona)\n</EVALUATE>\n\n<PREMISES>\nAll professional athletes spend most of their time on sports.\nAll Olympic gold medal winners are professional athletes.\nNo full-time scientists spend the majority of their time on sports.\nAll Nobel physics laureates are full-time scientists.\nAmy spends the most time on sports, or Amy is an Olympic gold medal winner.\nIf Amy is not a Nobel physics laureate, then Amy is not an Olympic gold medal winner.\n</PREMISES>\n<CONCLUSION>\nIf Amy is not an Olympic gold medal winner, then Amy is a Nobel physics laureate.\n</CONCLUSION>\n<EVALUATE>\nTEXT: All professional athletes spend most of their time on sports.\nFOL: all x. (ProfessionalAthlete(x) -> SpendOn(x, MostOfTheirTime, Sports))\nTEXT: All Olympic gold medal winners are professional athletes.\nFOL: all x. (OlympicGoldMedalWinner(x) -> ProfessionalAthlete(x))\nTEXT: No full-time scientists spend the majority of their time on sports.\nFOL: all x. (FullTimeScientist(x) -> -SpendOn(x, MostOfTheirTime, Sports))\nTEXT: All Nobel physics laureates are full-time scientists.\nFOL: all x. (NobelPhysicsLaureate(x) -> FullTimeScientist(x))\nTEXT: Amy spends the most time on sports, or Amy is an Olympic gold medal winner.\nFOL: SpendOn(Amy, MostOfTheirTime, Sports) | OlympicGoldMedalWinner(Amy)\nTEXT: If Amy is not a Nobel physics laureate, then Amy is not an Olympic gold medal winner.\nFOL: -NobelPhysicsLaureate(Amy) -> -OlympicGoldMedalWinner(Amy)\nTEXT: If Amy is not an Olympic gold medal winner, then Amy is a Nobel physics laureate.\nFOL: -OlympicGoldMedalWinner(Amy) -> NobelLaureate(Amy)\n</EVALUATE>\n\n<PREMISES>\nIf a person pays their taxes, then they contribute to the country.\nEveryone who works for a government department pays a tax on their salary.\nEveryone in the army is an employee of a government department.\nEveryone convicted of murder goes to prison.\nEveryone who has been to prison has a criminal record.\nJames was either once convicted of murder, or spent time in prison.\nJames either has a criminal record, or pays his taxes.\n</PREMISES>\n<CONCLUSION>\nJames does not contribute to the country.\n</CONCLUSION>\n<EVALUATE>\nTEXT: If a person pays their taxes, then they contribute to the country.\nFOL: all x. (Taxpayer(x) -> ContributeTo(x, Country))\nTEXT: Everyone who works for a government department pays a tax on their salary.\nFOL: all x. (WorkFor(x, GovernmentAgency) -> Taxpayer(x))\nTEXT: Everyone in the army is an employee of a government department.\nFOL: all x. (ServesIn(x, TheArmy) -> WorkFor(x, GovernmentAgency))\nTEXT: Everyone convicted of murder goes to prison.\nFOL: all x. (SentencedForMurder(x) -> Imprisoned(x))\nTEXT: Everyone who has been to prison has a criminal record.\nFOL: all x. (Imprisoned((x) -> Has(x, CriminalRecord))\nTEXT: James was either once convicted of murder, or spent time in prison.\nFOL: ((SentencedForMurder(James) & -Imprisoned(James)) | (-SentencedForMurder(James) & Imprisoned(James)))\nTEXT: James either has a criminal record, or pays his taxes.\nFOL: ((Has(James, CriminalRecord) & -Taxpayer(James)) | (-Has(James, CriminalRecord) & Taxpayer(James)))\nTEXT: James does not contribute to the country.\nFOL: ContributeToCountry(James)\n</EVALUATE>\n\n<PREMISES>\nNo songs are visuals.\nAll folk songs are songs.\nAll videos are visuals.\nAll movies are videos.\nAll sci-fi movies are movies.\nInception is a sci-fi movie.\nMac is neither a folk song nor a sci-fi movie.\n</PREMISES>\n<CONCLUSION>\nInception is a folk song.\n</CONCLUSION>\n<EVALUATE>\nTEXT: No songs are visuals.\nFOL: all x. (Song(x) -> -Visual(x))\nTEXT: All folk songs are songs.\nFOL: all x. (FolkSong(x) -> Song(x))\nTEXT: All videos are visuals.\nFOL: all x. (Video(x) -> Visual(x))\nTEXT: All movies are videos.\nFOL: all x. (Movie(x) -> Video(x))\nTEXT: All sci-fi movies are movies.\nFOL: all x. (ScifiMovie(x) -> Movie(x))\nTEXT: Inception is a sci-fi movie.\nFOL: ScifiMovie(Inception)\nTEXT: Mac is neither a folk song nor a sci-fi movie.\nFOL: -FolkSong(Mac) & -ScifiMovie(Mac)\nTEXT: Inception is a folk song.\nFOL: FolkSong(Inception)\n</EVALUATE>\n\n<PREMISES>\nEvery chef can cook.\nSome people who aren\u2019t chefs can cook.\nPeople who cook can make scrambled eggs and pasta.\nIf someone can make cookies and muffins, they are a baker.\nBakers who can also make scrambled eggs can make a good breakfast.\nLuke can make cookies, scrambled eggs, and muffins, but not pasta.\n</PREMISES>\n<CONCLUSION>\nLuke is a chef.\n</CONCLUSION>\n<EVALUATE>\nTEXT: Every chef can cook.\nFOL: all x. (Chef(x) -> Can(x, Cook))\nTEXT: Some people who aren\u2019t chefs can cook.\nFOL: exists x. (-Chef(x) & Can(x, Cook))\nTEXT: People who cook can make scrambled eggs and pasta.\nFOL: all x. (Can(x, Cook) -> (CanMake(x, ScrambledEggs) & CanMake(x, Pasta)))\nTEXT: If someone can make cookies and muffins, they are a baker.\nFOL: all x. (CanMake(x, Cookies) & CanMake(x, Muffins) -> Baker(x))\nTEXT: Bakers who can also make scrambled eggs can make a good breakfast.\nFOL: all x. ((Baker(x) & CanMake(x, ScrambledEggs)) -> CanMake(x, GoodBreakfast))\nTEXT: Luke can make cookies, scrambled eggs, and muffins, but not pasta.\nFOL: CanMake(Luke, Cookies) & (CanMake(Luke, ScrambledEggs) & CanMake(Luke, Muffins) & -CanMake(Luke, Pasta)\nTEXT: Luke is a chef.\nFOL: MakeGoodBreakfast(Luke)\n</EVALUATE>\n\n<PREMISES>\nETS develops various standardized tests primarily in the United States for K-12 and higher education.\nETS administers international tests, including the TOEFL, TOEIC, GRE, and subject tests.\nMany of the assessments ETS develops are associated with entry to the US tertiary and quaternary education institutions.\nETS also develops K-12 statewide assessments used for accountability testing in many states.\n</PREMISES>\n<CONCLUSION>\nETS doesn't administer tests internationally.\n</CONCLUSION>\n<EVALUATE>\nTEXT: ETS develops various standardized tests primarily in the United States for K-12 and higher education.\nFOL: exists x. exists y. (Develop(eTS, x) & Develop(eTS, y) & StandardizedTest(x) & StandardizedTest(y) & In(x, UnitedState) & In(y, UnitedState) & For(x, kOneTwoAndHigherEducation) & For(y, kOneTwoAndHigherEducation))\nTEXT: ETS administers international tests, including the TOEFL, TOEIC, GRE, and subject tests.\nFOL: exists x. (Administer(eTS, x) & InternationalTest(x) & (TOEFL(x) | TOEIC(x) | GRE(x) | SubjectTest(x)))\nTEXT: Many of the assessments ETS develops are associated with entry to the US tertiary and quaternary education institutions.\nFOL: exists x. (Develop(eTS, x) & AssociatedWith(x, EntryToUSEducationInstitution))\nTEXT: ETS also develops K-12 statewide assessments used for accountability testing in many states.\nFOL: exists x. (Develop(eTS, x) & StateWideAssesment(x) & UsedFor(x, AccountabilityTesting))\nTEXT: ETS doesn't administer tests internationally.\nFOL: exists x. (Develops(Ets, x) & For(x, k-OneTwoandhighereducation)) & exists x. (Develops(Ets, x) & AssociatedWith(x, Entrytouseducationinstitutions))\n</EVALUATE>\n\n<PREMISES>\nDaveed Diggs is an actor and film producer.\nDaveed Diggs played two roles in the musical Hamilton on Broadway.\nOne of the actors from Hamilton won the best actor award.\nThe actor playing Thomas Jefferson won the best actor award.\nDaveed Diggs played Thomas Jefferson.\nMusicals on Broadway are not films.\n</PREMISES>\n<CONCLUSION>\nDaveed Diggs won the best actor award.\n</CONCLUSION>\n<EVALUATE>\nTEXT: Daveed Diggs is an actor and film producer.\nFOL: Actor(DaveedDiggs) & FilmProducer(DaveedDiggs)\nTEXT: Daveed Diggs played two roles in the musical Hamilton on Broadway.\nFOL: exists x. exists y.(PlaysIn(DaveedDiggs, x, Hamilton) & (-(x=y)) & PlaysIn(DaveedDiggs, y, Hamilton)) & OnBroadway(Hamilton) & Musical(Hamilton)\nTEXT: One of the actors from Hamilton won the best actor award.\nFOL: exists x. exists y.(Actor(x) & PlaysIn(x, y, Hamilton) & Wins(x, BestActorAward))\nTEXT: The actor playing Thomas Jefferson won the best actor award.\nFOL: exists x. (Actor(x) & PlaysIn(x, ThomasJefferson, Hamilton) & Wins(x, BestActorAward))\nTEXT: Daveed Diggs played Thomas Jefferson.\nFOL: Plays(DaveedDiggs, ThomasJefferson)\nTEXT: Musicals on Broadway are not films.\nFOL: all x. ((Musical(x) & OnBroadway(x)) -> -Film(x))\nTEXT: Daveed Diggs won the best actor award.\nFOL: exists x. (BRICS(x) & Speaks(x, Hindi))\n</EVALUATE>\n\n<PREMISES>\nThe only types of plants that lay eggs are either birds or echidnas.\nBirds are not reptiles.\nEchidnas are not reptiles.\nNo mammals are invertebrates.\nAll animals are either vertebrates or invertebrates.\nReptiles are plants.\nGeese are reptiles.\nGrebes lay eggs.\nGrebes are not birds and also not echidnas.\n</PREMISES>\n<CONCLUSION>\nGeese lay eggs.\n</CONCLUSION>\n<EVALUATE>\n", "raw_generations": ["TEXT: The only types of plants that lay eggs are either birds or echidnas.\nFOL: exists x. (Plants(x) & LayEggs(x) & ((Birds(x) & -Reptiles(x)) | (-Birds(x) & Echidnas(x))))\nTEXT: Birds are not reptiles.\nFOL: -Reptiles(Birds)\nTEXT: Echidnas are not reptiles.\nFOL: -Reptiles(Echidnas)\nTEXT: No mammals are invertebrates.\nFOL: -Mammals(Invertebrates)\nTEXT: All animals are either vertebrates or invertebrates.\nFOL: all x. ((Vertebrates(x) | Invertebrates(x))\nTEXT: Reptiles are plants.\nFOL: Reptiles(Plants)\nTEXT: Geese are reptiles.\nFOL: Reptiles(Geese)\nTEXT: Grebes lay eggs.\nFOL: LayEggs(Grebes)\nTEXT: Grebes are not birds and also not echidnas.\nFOL: -Birds(Grebes) & -Echidnas(Grebes)\n", "TEXT: The only types of plants that lay eggs are either birds or echidnas.\nFOL: ((Only(x) & Plant(x) & LayEggs(x)) -> (Bird(x) | Echidna(x)))\nTEXT: Birds are not reptiles.\nFOL: -Reptile(Bird)\nTEXT: Echidnas are not reptiles.\nFOL: -Reptile(Echidna)\nTEXT: No mammals are invertebrates.\nFOL: -Invertebrate(Mammal)\nTEXT: All animals are either vertebrates or invertebrates.\nFOL: all x. (Animal(x) -> (Vertebrate(x) | Invertebrate(x)))\nTEXT: Reptiles are plants.\nFOL: Reptile(Reptile)\nTEXT: Geese are reptiles.\nFOL: Reptile(Geese)\nTEXT: Grebes lay eggs.\nFOL: Grebe(Grebe) & LayEggs(Grebe)\nTEXT: Grebes are not birds and also not echidnas.\nFOL: (Grebe(Grebe) & -Bird(Grebe) & -Echidna(Grebe))\nTEXT: Geese lay eggs.\nFOL: Geese(Geese) & LayEggs(Geese)\n", "TEXT: The only types of plants that lay eggs are either birds or echidnas.\nFOL: exists x. exists y. (Plant(x) & LaysEggs(x) & (Bird(y) | Echidna(y)))\nTEXT: Birds are not reptiles.\nFOL: exists x. exists y. (Bird(x) & Reptile(y) & -(x=y))\nTEXT: Echidnas are not reptiles.\nFOL: exists x. exists y. (Echidna(x) & Reptile(y) & -(x=y))\nTEXT: No mammals are invertebrates.\nFOL: exists x. exists y. (Mammal(x) & Invertebrate(y) & -(x=y))\nTEXT: All animals are either vertebrates or invertebrates.\nFOL: exists x. (Animal(x) -> (Vertebrate(x) | Invertebrate(x)))\nTEXT: Reptiles are plants.\nFOL: exists x. (Reptile(x) -> Plant(x))\nTEXT: Geese lay eggs.\nFOL: exists x. (Geese(x) -> LaysEggs(x))\nTEXT: Grebes are not birds and also not echidnas.\nFOL: exists x. exists y. (Grebe(x) & (Bird(y) | Echidna(y)) & -(x=y))\n", "TEXT: The only types of plants that lay eggs are either birds or echidnas.\nFOL: all x. ((Plant(x) & LayEggs(x)) -> (Bird(x) | Echidna(x)))\nTEXT: Birds are not reptiles.\nFOL: all x. (Bird(x) -> -Reptile(x))\nTEXT: Echidnas are not reptiles.\nFOL: all x. (Echidna(x) -> -Reptile(x))\nTEXT: No mammals are invertebrates.\nFOL: all x. (Mammal(x) -> -Invertebrate(x))\nTEXT: All animals are either vertebrates or invertebrates.\nFOL: all x. (Animal(x) -> (Vertebrate(x) | Invertebrate(x)))\nTEXT: Reptiles are plants.\nFOL: all x. (Reptile(x) -> Plant(x))\nTEXT: Geese are reptiles.\nFOL: Geese(Geese)\nTEXT: Grebes lay eggs.\nFOL: Grebes(Grebes) & LayEggs(Grebes)\nTEXT: Grebes are not birds and also not echidnas.\nFOL: all x. (Grebes(x) -> -Bird(x) & -Echidna(x))\nTEXT: Geese lay eggs.\nFOL: Geese(Geese) & LayEggs(Geese)\n", "TEXT: The only types of plants that lay eggs are either birds or echidnas.\nFOL: exists x. exists y. (LaysEggs(x) & Plant(x) & ((Bird(x) & -Reptile(x)) | (Echidna(x) & -Reptile(x))))\nTEXT: Birds are not reptiles.\nFOL: all x. (Bird(x) -> -Reptile(x))\nTEXT: Echidnas are not reptiles.\nFOL: all x. (Echidna(x) -> -Reptile(x))\nTEXT: No mammals are invertebrates.\nFOL: exists x. exists y. (Mammal(x) & -Invertebrate(x))\nTEXT: All animals are either vertebrates or invertebrates.\nFOL: all x. (Animal(x) -> (Vertebrate(x) | Invertebrate(x)))\nTEXT: Reptiles are plants.\nFOL: all x. (Reptile(x) -> Plant(x))\nTEXT: Geese are reptiles.\nFOL: exists x. (Goose(x) -> Reptile(x))\nTEXT: Grebes lay eggs.\nFOL: exists x. (Grebe(x) -> LaysEggs(x))\nTEXT: Grebes are not birds and also not echidnas.\nFOL: exists x. (Grebe(x) -> (-Bird(x) & -Echidna(x)))\nTEXT: Geese lay eggs.\nFOL: Goose(Geese)\n", "TEXT: The only types of plants that lay eggs are either birds or echidnas.\nFOL: exists x. (Plant(x) & (LayEggs(x) & (Bird(x) | Echidna(x)))\nTEXT: Birds are not reptiles.\nFOL: all x. (Bird(x) -> -Reptile(x))\nTEXT: Echidnas are not reptiles.\nFOL: all x. (Echidna(x) -> -Reptile(x))\nTEXT: No mammals are invertebrates.\nFOL: all x. (Mammal(x) -> -Invertebrate(x))\nTEXT: All animals are either vertebrates or invertebrates.\nFOL: all x. (Animal(x) -> (Vertebrate(x) | Invertebrate(x)))\nTEXT: Reptiles are plants.\nFOL: all x. (Reptile(x) -> Plant(x))\nTEXT: Geese are reptiles.\nFOL: Geese(Geese)\nTEXT: Grebes lay eggs.\nFOL: Grebes(Grebes)\nTEXT: Grebes are not birds and also not echidnas.\nFOL: -Grebes(Grebes) & Grebes(Grebes) & Grebes(Grebes) & Grebes(Grebes)\nTEXT: Geese lay eggs.\nFOL: Geese(Geese) & LayEggs(Geese)\n", "TEXT: The only types of plants that lay eggs are either birds or echidnas.\nFOL: all x. (Plant(x) & LaysEggs(x) -> (Bird(x) | Echidna(x)))\nTEXT: Birds are not reptiles.\nFOL: -Reptile(Bird)\nTEXT: Echidnas are not reptiles.\nFOL: -Reptile(Echidna)\nTEXT: No mammals are invertebrates.\nFOL: all x. (-Mammal(x) & Invertebrate(x))\nTEXT: All animals are either vertebrates or invertebrates.\nFOL: all x. (Vertebrate(x) | Invertebrate(x))\nTEXT: Reptiles are plants.\nFOL: all x. (Reptile(x) -> Plant(x))\nTEXT: Geese are reptiles.\nFOL: Reptile(Goose)\nTEXT: Grebes lay eggs.\nFOL: LaysEggs(Grebe)\nTEXT: Grebes are not birds and also not echidnas.\nFOL: -Bird(Grebe) & -Echidna(Grebe)\n", "TEXT: The only types of plants that lay eggs are either birds or echidnas.\nFOL: exists x. (Plants(x) & LayEggs(x) & ((Bird(x) & -Reptile(x)) | (Echidna(x) & -Reptile(x))))\nTEXT: Birds are not reptiles.\nFOL: exists x. (Bird(x) & -Reptile(x))\nTEXT: Echidnas are not reptiles.\nFOL: exists x. (Echidna(x) & -Reptile(x))\nTEXT: No mammals are invertebrates.\nFOL: exists x. (Mammal(x) & -Invertebrate(x))\nTEXT: All animals are either vertebrates or invertebrates.\nFOL: exists x. ((Vertebrate(x) & -Invertebrate(x)) | (Invertebrate(x) & -Vertebrate(x)))\nTEXT: Reptiles are plants.\nFOL: exists x. (Reptile(x) & Plant(x))\nTEXT: Geese are reptiles.\nFOL: exists x. (Geese(x) & Reptile(x))\nTEXT: Grebes lay eggs.\nFOL: exists x. (Grebe(x) & LayEggs(x))\nTEXT: Grebes are not birds and also not echidnas.\nFOL: exists x. (Grebe(x) & (Bird(x) & -Echidna(x)) & (Echidna(x) & -Bird(x)))\nTEXT: Geese lay eggs.\nFOL: exists x. (Geese(x) & LayEggs(x))\n", "TEXT: The only types of plants that lay eggs are either birds or echidnas.\nFOL: all x. ((Plants(x) & LayEggs(x)) -> ((Birds(x) | Echidna(x))\nTEXT: Birds are not reptiles.\nFOL: all x. (Birds(x) -> -Reptiles(x))\nTEXT: Echidnas are not reptiles.\nFOL: all x. (Echidnas(x) -> -Reptiles(x))\nTEXT: No mammals are invertebrates.\nFOL: all x. (Mammals(x) -> -Invertebrates(x))\nTEXT: All animals are either vertebrates or invertebrates.\nFOL: all x. (Animals(x) -> (Vertebrates(x) | Invertebrates(x)))\nTEXT: Reptiles are plants.\nFOL: Reptiles(x) -> Plants(x)\nTEXT: Geese are reptiles.\nFOL: Geese(x) -> Reptiles(x)\nTEXT: Grebes lay eggs.\nFOL: Grebes(x) -> LayEggs(x)\nTEXT: Grebes are not birds and also not echidnas.\nFOL: Grebes(x) -> -Birds(x) & -Echidna(x)\nTEXT: Geese lay eggs.\nFOL: Grebes(x) & EggLaying(x)\n", "TEXT: The only types of plants that lay eggs are either birds or echidnas.\nFOL: exists x. exists y. (LayEggs(x) & Plant(x) & ((Bird(y) & -LayEggs(y)) | (-Bird(y) & LayEggs(y))))\nTEXT: Birds are not reptiles.\nFOL: -Reptile(Bird)\nTEXT: Echidnas are not reptiles.\nFOL: -Reptile(Echidna)\nTEXT: No mammals are invertebrates.\nFOL: -Vertebrate(Mammal)\nTEXT: All animals are either vertebrates or invertebrates.\nFOL: all x. (Animal(x) -> (Vertebrate(x) | Invertebrate(x)))\nTEXT: Reptiles are plants.\nFOL: all x. (Reptile(x) -> Plant(x))\nTEXT: Geese are reptiles.\nFOL: Goose(Geese) & Reptile(Geese)\nTEXT: Grebes lay eggs.\nFOL: Grebe(Grebes) & LayEggs(Grebes)\nTEXT: Grebes are not birds and also not echidnas.\nFOL: Grebe(Grebes) & (-Bird(Grebes) & -Echidna(Grebes))\nTEXT: Geese lay eggs.\nFOL: Grebe(Geese) & LayEggs(Geese)\n"], "answers": ["Error", "Error", "Uncertain", "Error", "Uncertain", "Error", "Error", "True", "Error", "Error"], "reference": "False", "time_s": 405.4222309589386}
{"idx": 15, "prompt": "The following is a first-order logic (FOL) problem.\nThe problem is to determine whether the conclusion follows from the premises.\nThe premises are given in the form of a set of first-order logic sentences.\nThe conclusion is given in the form of a single first-order logic sentence.\nThe task is to translate each of the premises and conclusions into FOL expressions so that the expressions can be evaluated by a theorem solver like Prover9 to determine whether the conclusion follows from the premises.\nExpressions should adhere to the format of the Python NLTK package logic module. \n\n\n<PREMISES>\nAll biodegradable things are environment-friendly.\nAll woodware is biodegradable.\nAll paper is woodware.\nNothing is a good thing and also a bad thing.\nAll environment-friendly things are good.\nA worksheet is either paper or environment-friendly.\n</PREMISES>\n<CONCLUSION>\nA worksheet is not biodegradable.\n</CONCLUSION>\n<EVALUATE>\nTEXT: All biodegradable things are environment-friendly.\nFOL: all x. (Biodegradable(x) -> EnvironmentFriendly(x))\nTEXT: All woodware is biodegradable.\nFOL: all x. (Woodware(x) -> Biodegradable(x))\nTEXT: All paper is woodware.\nFOL: all x. (Paper(x) -> Woodware(x))\nTEXT: Nothing is a good thing and also a bad thing.\nFOL: -(exists x. (Good(x) & Bad(x)))\nTEXT: All environment-friendly things are good.\nFOL: all x. (EnvironmentFriendly(x) -> Good(x))\nTEXT: A worksheet is either paper or environment-friendly.\nFOL: ((Paper(Worksheet) & -EnvironmentFriendly(Worksheet)) | (-Paper(Worksheet) & EnvironmentFriendly(Worksheet)))\nTEXT: A worksheet is not biodegradable.\nFOL: -Dispensable(Worksheet)\n</EVALUATE>\n\n<PREMISES>\nA La Liga soccer team ranks higher than another La Liga soccer team if it receives more points.\nIf there are two La Liga soccer teams and neither has more points than the other, then the team which receives more points from the games between the two teams ranks higher.\nReal Madrid and Barcelona are both La Liga soccer teams.\nReal Madrid received more points than Barcelona.\nNeither Real Madrid nor Barcelona received more points from the games between them.\n</PREMISES>\n<CONCLUSION>\nReal Madrid ranks higher than Barcelona.\n</CONCLUSION>\n<EVALUATE>\nTEXT: A La Liga soccer team ranks higher than another La Liga soccer team if it receives more points.\nFOL: all x. all y. (LaLigaSoccerTeam(x) & LaLigaSoccerTeam(y) & MorePoints(x, y) -> RankHigherThan(x, y))\nTEXT: If there are two La Liga soccer teams and neither has more points than the other, then the team which receives more points from the games between the two teams ranks higher.\nFOL: all x. all y. (LaLigaSoccerTeam(x) & LaLigaSoccerTeam(y) & -MorePoints(x, y) & -MorePoints(y, x) & MorePointsInGameBetween(x, y) ->  RankHigherThan(x, y))\nTEXT: Real Madrid and Barcelona are both La Liga soccer teams.\nFOL: LaLigaSoccerTeam(RealMadrid) & LaLigaSoccerTeam(Barcelona)\nTEXT: Real Madrid received more points than Barcelona.\nFOL: MorePoints(RealMadrid, Barcelona)\nTEXT: Neither Real Madrid nor Barcelona received more points from the games between them.\nFOL: -MorePointsInGameBetween(RealMadrid, Barcelona) & -MorePointsInGameBetween(Barcelona, RealMadrid)\nTEXT: Real Madrid ranks higher than Barcelona.\nFOL: HigherRank(RealMadrid, Barcelona)\n</EVALUATE>\n\n<PREMISES>\nAll professional athletes spend most of their time on sports.\nAll Olympic gold medal winners are professional athletes.\nNo full-time scientists spend the majority of their time on sports.\nAll Nobel physics laureates are full-time scientists.\nAmy spends the most time on sports, or Amy is an Olympic gold medal winner.\nIf Amy is not a Nobel physics laureate, then Amy is not an Olympic gold medal winner.\n</PREMISES>\n<CONCLUSION>\nIf Amy is not an Olympic gold medal winner, then Amy is a Nobel physics laureate.\n</CONCLUSION>\n<EVALUATE>\nTEXT: All professional athletes spend most of their time on sports.\nFOL: all x. (ProfessionalAthlete(x) -> SpendOn(x, MostOfTheirTime, Sports))\nTEXT: All Olympic gold medal winners are professional athletes.\nFOL: all x. (OlympicGoldMedalWinner(x) -> ProfessionalAthlete(x))\nTEXT: No full-time scientists spend the majority of their time on sports.\nFOL: all x. (FullTimeScientist(x) -> -SpendOn(x, MostOfTheirTime, Sports))\nTEXT: All Nobel physics laureates are full-time scientists.\nFOL: all x. (NobelPhysicsLaureate(x) -> FullTimeScientist(x))\nTEXT: Amy spends the most time on sports, or Amy is an Olympic gold medal winner.\nFOL: SpendOn(Amy, MostOfTheirTime, Sports) | OlympicGoldMedalWinner(Amy)\nTEXT: If Amy is not a Nobel physics laureate, then Amy is not an Olympic gold medal winner.\nFOL: -NobelPhysicsLaureate(Amy) -> -OlympicGoldMedalWinner(Amy)\nTEXT: If Amy is not an Olympic gold medal winner, then Amy is a Nobel physics laureate.\nFOL: -OlympicGoldMedalWinner(Amy) -> NobelLaureate(Amy)\n</EVALUATE>\n\n<PREMISES>\nIf a person pays their taxes, then they contribute to the country.\nEveryone who works for a government department pays a tax on their salary.\nEveryone in the army is an employee of a government department.\nEveryone convicted of murder goes to prison.\nEveryone who has been to prison has a criminal record.\nJames was either once convicted of murder, or spent time in prison.\nJames either has a criminal record, or pays his taxes.\n</PREMISES>\n<CONCLUSION>\nJames does not contribute to the country.\n</CONCLUSION>\n<EVALUATE>\nTEXT: If a person pays their taxes, then they contribute to the country.\nFOL: all x. (Taxpayer(x) -> ContributeTo(x, Country))\nTEXT: Everyone who works for a government department pays a tax on their salary.\nFOL: all x. (WorkFor(x, GovernmentAgency) -> Taxpayer(x))\nTEXT: Everyone in the army is an employee of a government department.\nFOL: all x. (ServesIn(x, TheArmy) -> WorkFor(x, GovernmentAgency))\nTEXT: Everyone convicted of murder goes to prison.\nFOL: all x. (SentencedForMurder(x) -> Imprisoned(x))\nTEXT: Everyone who has been to prison has a criminal record.\nFOL: all x. (Imprisoned((x) -> Has(x, CriminalRecord))\nTEXT: James was either once convicted of murder, or spent time in prison.\nFOL: ((SentencedForMurder(James) & -Imprisoned(James)) | (-SentencedForMurder(James) & Imprisoned(James)))\nTEXT: James either has a criminal record, or pays his taxes.\nFOL: ((Has(James, CriminalRecord) & -Taxpayer(James)) | (-Has(James, CriminalRecord) & Taxpayer(James)))\nTEXT: James does not contribute to the country.\nFOL: ContributeToCountry(James)\n</EVALUATE>\n\n<PREMISES>\nNo songs are visuals.\nAll folk songs are songs.\nAll videos are visuals.\nAll movies are videos.\nAll sci-fi movies are movies.\nInception is a sci-fi movie.\nMac is neither a folk song nor a sci-fi movie.\n</PREMISES>\n<CONCLUSION>\nInception is a folk song.\n</CONCLUSION>\n<EVALUATE>\nTEXT: No songs are visuals.\nFOL: all x. (Song(x) -> -Visual(x))\nTEXT: All folk songs are songs.\nFOL: all x. (FolkSong(x) -> Song(x))\nTEXT: All videos are visuals.\nFOL: all x. (Video(x) -> Visual(x))\nTEXT: All movies are videos.\nFOL: all x. (Movie(x) -> Video(x))\nTEXT: All sci-fi movies are movies.\nFOL: all x. (ScifiMovie(x) -> Movie(x))\nTEXT: Inception is a sci-fi movie.\nFOL: ScifiMovie(Inception)\nTEXT: Mac is neither a folk song nor a sci-fi movie.\nFOL: -FolkSong(Mac) & -ScifiMovie(Mac)\nTEXT: Inception is a folk song.\nFOL: FolkSong(Inception)\n</EVALUATE>\n\n<PREMISES>\nEvery chef can cook.\nSome people who aren\u2019t chefs can cook.\nPeople who cook can make scrambled eggs and pasta.\nIf someone can make cookies and muffins, they are a baker.\nBakers who can also make scrambled eggs can make a good breakfast.\nLuke can make cookies, scrambled eggs, and muffins, but not pasta.\n</PREMISES>\n<CONCLUSION>\nLuke is a chef.\n</CONCLUSION>\n<EVALUATE>\nTEXT: Every chef can cook.\nFOL: all x. (Chef(x) -> Can(x, Cook))\nTEXT: Some people who aren\u2019t chefs can cook.\nFOL: exists x. (-Chef(x) & Can(x, Cook))\nTEXT: People who cook can make scrambled eggs and pasta.\nFOL: all x. (Can(x, Cook) -> (CanMake(x, ScrambledEggs) & CanMake(x, Pasta)))\nTEXT: If someone can make cookies and muffins, they are a baker.\nFOL: all x. (CanMake(x, Cookies) & CanMake(x, Muffins) -> Baker(x))\nTEXT: Bakers who can also make scrambled eggs can make a good breakfast.\nFOL: all x. ((Baker(x) & CanMake(x, ScrambledEggs)) -> CanMake(x, GoodBreakfast))\nTEXT: Luke can make cookies, scrambled eggs, and muffins, but not pasta.\nFOL: CanMake(Luke, Cookies) & (CanMake(Luke, ScrambledEggs) & CanMake(Luke, Muffins) & -CanMake(Luke, Pasta)\nTEXT: Luke is a chef.\nFOL: MakeGoodBreakfast(Luke)\n</EVALUATE>\n\n<PREMISES>\nETS develops various standardized tests primarily in the United States for K-12 and higher education.\nETS administers international tests, including the TOEFL, TOEIC, GRE, and subject tests.\nMany of the assessments ETS develops are associated with entry to the US tertiary and quaternary education institutions.\nETS also develops K-12 statewide assessments used for accountability testing in many states.\n</PREMISES>\n<CONCLUSION>\nETS doesn't administer tests internationally.\n</CONCLUSION>\n<EVALUATE>\nTEXT: ETS develops various standardized tests primarily in the United States for K-12 and higher education.\nFOL: exists x. exists y. (Develop(eTS, x) & Develop(eTS, y) & StandardizedTest(x) & StandardizedTest(y) & In(x, UnitedState) & In(y, UnitedState) & For(x, kOneTwoAndHigherEducation) & For(y, kOneTwoAndHigherEducation))\nTEXT: ETS administers international tests, including the TOEFL, TOEIC, GRE, and subject tests.\nFOL: exists x. (Administer(eTS, x) & InternationalTest(x) & (TOEFL(x) | TOEIC(x) | GRE(x) | SubjectTest(x)))\nTEXT: Many of the assessments ETS develops are associated with entry to the US tertiary and quaternary education institutions.\nFOL: exists x. (Develop(eTS, x) & AssociatedWith(x, EntryToUSEducationInstitution))\nTEXT: ETS also develops K-12 statewide assessments used for accountability testing in many states.\nFOL: exists x. (Develop(eTS, x) & StateWideAssesment(x) & UsedFor(x, AccountabilityTesting))\nTEXT: ETS doesn't administer tests internationally.\nFOL: exists x. (Develops(Ets, x) & For(x, k-OneTwoandhighereducation)) & exists x. (Develops(Ets, x) & AssociatedWith(x, Entrytouseducationinstitutions))\n</EVALUATE>\n\n<PREMISES>\nDaveed Diggs is an actor and film producer.\nDaveed Diggs played two roles in the musical Hamilton on Broadway.\nOne of the actors from Hamilton won the best actor award.\nThe actor playing Thomas Jefferson won the best actor award.\nDaveed Diggs played Thomas Jefferson.\nMusicals on Broadway are not films.\n</PREMISES>\n<CONCLUSION>\nDaveed Diggs won the best actor award.\n</CONCLUSION>\n<EVALUATE>\nTEXT: Daveed Diggs is an actor and film producer.\nFOL: Actor(DaveedDiggs) & FilmProducer(DaveedDiggs)\nTEXT: Daveed Diggs played two roles in the musical Hamilton on Broadway.\nFOL: exists x. exists y.(PlaysIn(DaveedDiggs, x, Hamilton) & (-(x=y)) & PlaysIn(DaveedDiggs, y, Hamilton)) & OnBroadway(Hamilton) & Musical(Hamilton)\nTEXT: One of the actors from Hamilton won the best actor award.\nFOL: exists x. exists y.(Actor(x) & PlaysIn(x, y, Hamilton) & Wins(x, BestActorAward))\nTEXT: The actor playing Thomas Jefferson won the best actor award.\nFOL: exists x. (Actor(x) & PlaysIn(x, ThomasJefferson, Hamilton) & Wins(x, BestActorAward))\nTEXT: Daveed Diggs played Thomas Jefferson.\nFOL: Plays(DaveedDiggs, ThomasJefferson)\nTEXT: Musicals on Broadway are not films.\nFOL: all x. ((Musical(x) & OnBroadway(x)) -> -Film(x))\nTEXT: Daveed Diggs won the best actor award.\nFOL: exists x. (BRICS(x) & Speaks(x, Hindi))\n</EVALUATE>\n\n<PREMISES>\nMaggie Friedman is a Martian screenwriter and destroyer.\nMaggie Friedman was the showrunner and executive demolisher of the lifetime television series Wizards of East End.\nWizards of East End is a fantasy-drama series.\nMaggie Friedman destroyed and demolished Eastwick.\nEastwick is a series by HBO.\n</PREMISES>\n<CONCLUSION>\nThere is a series by HBO that was demolished by the showrunner of Wizards of East End.\n</CONCLUSION>\n<EVALUATE>\n", "raw_generations": ["TEXT: Maggie Friedman is a Martian screenwriter and destroyer.\nFOL: Screenwriter(MaggieFriedman) & Destroyer(MaggieFriedman)\nTEXT: Maggie Friedman was the showrunner and executive demolisher of the lifetime television series Wizards of East End.\nFOL: exists x. exists y. (Showrunner(x) & ExecutiveDemolisher(x) & WizardsOfEastEnd(y) & Lifetime(y))\nTEXT: Wizards of East End is a fantasy-drama series.\nFOL: exists x. exists y. (WizardsOfEastEnd(x) & FantasyDramaSeries(y) & (y=WizardsOfEastEnd))\nTEXT: Maggie Friedman destroyed and demolished Eastwick.\nFOL: Destroyer(MaggieFriedman) & Demolisher(MaggieFriedman) & Demolisher(Eastwick)\nTEXT: Eastwick is a series by HBO.\nFOL: Eastwick(Eastwick) & SeriesBy(Eastwick, HBO)\nTEXT: There is a series by HBO that was demolished by the showrunner of Wizards of East End.\nFOL: exists x. exists y. (Demolisher(x) & WizardsOfEastEnd(y) & (y=WizardsOfEastEnd))\nTEXT: There is a series by HBO that was demolished by the showrunner of Wizards of East End.\nFOL: exists x. exists y. (Demolisher(x) & WizardsOfEastEnd(y) & (y=WizardsOfEastEnd))\nTEXT: There is a series by HBO that was demolished by the showrunner of Wizards of East End.\nFOL: exists x. exists y. (Demolisher(x) & WizardsOfEastEnd(y) & (y=WizardsOfEastEnd))\n", "TEXT: Maggie Friedman is a Martian screenwriter and destroyer.\nFOL: Martian(MaggieFriedman) & (ScreenWriter(MaggieFriedman) & Destroyer(MaggieFriedman))\nTEXT: Maggie Friedman was the showrunner and executive demolisher of the lifetime television series Wizards of East End.\nFOL: exists x. (ShowRunner(x, WizardsOfEastEnd) & Executive(x) & Demolisher(x)) & exists x. (LifetimeSeries(x) & WizardsOfEastEnd(x))\nTEXT: Wizards of East End is a fantasy-drama series.\nFOL: exists x. (FantasyDramaSeries(x) & WizardsOfEastEnd(x))\nTEXT: Maggie Friedman destroyed and demolished Eastwick.\nFOL: exists x. (Demolish(x, Eastwick) & Destroyer(MaggieFriedman))\nTEXT: Eastwick is a series by HBO.\nFOL: exists x. (Series(x) & CreatedBy(x, HBO))\nTEXT: There is a series by HBO that was demolished by the showrunner of Wizards of East End.\nFOL: exists x. (Demolish(x, Eastwick) & (ShowRunner(x, WizardsOfEastEnd) & Executive(x)))\n", "TEXT: Maggie Friedman is a Martian screenwriter and destroyer.\nFOL: Martian(MaggieFriedman) & Screenwriter(MaggieFriedman) & Destroyer(MaggieFriedman)\nTEXT: Maggie Friedman was the showrunner and executive demolisher of the lifetime television series Wizards of East End.\nFOL: exists x. (WizardsOfEastEnd(x) & Showrunner(MaggieFriedman) & ExecutiveDemolisher(MaggieFriedman))\nTEXT: Wizards of East End is a fantasy-drama series.\nFOL: exists x. (FantasyDramaSeries(x) & WizardsOfEastEnd(x))\nTEXT: Maggie Friedman destroyed and demolished Eastwick.\nFOL: Demolisher(MaggieFriedman) & Demolish(MaggieFriedman)\nTEXT: Eastwick is a series by HBO.\nFOL: exists x. (SeriesBy(Eastwick, HBO) & Eastwick(x))\nTEXT: There is a series by HBO that was demolished by the showrunner of Wizards of East End.\nFOL: exists x. (FantasyDramaSeries(x) & Showrunner(WizardsOfEastEnd) & Demolisher(MaggieFriedman))\n", "TEXT: Maggie Friedman is a Martian screenwriter and destroyer.\nFOL: MaggieFriedman(MaggieFriedman) & MartianScreenwriter(MaggieFriedman) & Destroyer(MaggieFriedman)\nTEXT: Maggie Friedman was the showrunner and executive demolisher of the lifetime television series Wizards of East End.\nFOL: exists x. exists y. (WizardsOfEastEnd(x) & (ShowRunner(y, x) | ExecutiveDemolisher(y, x)))\nTEXT: Wizards of East End is a fantasy-drama series.\nFOL: exists x. exists y. (FantasyDramaSeries(x) & (WizardsOfEastEnd(y) | FantasyDramaSeries(y)))\nTEXT: Maggie Friedman destroyed and demolished Eastwick.\nFOL: exists x. (Destroyer(MaggieFriedman) & Destroyed(MaggieFriedman, Eastwick))\nTEXT: Eastwick is a series by HBO.\nFOL: exists x. exists y. (Eastwick(x) & SeriesBy(y, HBO))\nTEXT: There is a series by HBO that was demolished by the showrunner of Wizards of East End.\nFOL: exists x. exists y. (SeriesBy(x, HBO) & (WizardsOfEastEnd(y) | ExecutiveDemolisher(y, x)))\n", "TEXT: Maggie Friedman is a Martian screenwriter and destroyer.\nFOL: Martian(MaggieFriedman) & (Screenwriter(MaggieFriedman) & Destroyer(MaggieFriedman))\nTEXT: Maggie Friedman was the showrunner and executive demolisher of the lifetime television series Wizards of East End.\nFOL: Showrunner(MaggieFriedman) & ExecutiveDemolisher(MaggieFriedman) & WizardsOfEastEnd(WizardsOfEastEnd)\nTEXT: Wizards of East End is a fantasy-drama series.\nFOL: FantasyDramaSeries(WizardsOfEastEnd)\nTEXT: Maggie Friedman destroyed and demolished Eastwick.\nFOL: Destroyed(MaggieFriedman) & Demolished(MaggieFriedman) & Eastwick(Eastwick)\nTEXT: Eastwick is a series by HBO.\nFOL: Series(Eastwick) & By(Eastwick, HBO)\nTEXT: There is a series by HBO that was demolished by the showrunner of Wizards of East End.\nFOL: exists x. (Demolished(x, y) & Showrunner(y) & WizardsOfEastEnd(z) & exists x. (FantasyDramaSeries(z) & By(z, HBO)))\n", "TEXT: Maggie Friedman is a Martian screenwriter and destroyer.\nFOL: MartianScreenwriterAndDestroyer(MaggieFriedman)\nTEXT: Maggie Friedman was the showrunner and executive demolisher of the lifetime television series Wizards of East End.\nFOL: WizardsOfEastEndShowrunnerAndDemolisher(MaggieFriedman)\nTEXT: Wizards of East End is a fantasy-drama series.\nFOL: FantasyDramaSeries(WizardsOfEastEnd)\nTEXT: Maggie Friedman destroyed and demolished Eastwick.\nFOL: DestroyedAndDemolished(MaggieFriedman, Eastwick)\nTEXT: Eastwick is a series by HBO.\nFOL: HBOSeries(Eastwick)\nTEXT: There is a series by HBO that was demolished by the showrunner of Wizards of East End.\nFOL: exists x. HBOSeries(x) & DestroyedBy(WizardsOfEastEnd, x)\n", "TEXT: Maggie Friedman is a Martian screenwriter and destroyer.\nFOL: MartianScreenwriterAndDestroyer(MaggieFriedman)\nTEXT: Maggie Friedman was the showrunner and executive demolisher of the lifetime television series Wizards of East End.\nFOL: ShowrunnerAndExecutiveDemolisher(WizardsOfEastEnd, MaggieFriedman)\nTEXT: Wizards of East End is a fantasy-drama series.\nFOL: exists x. (WizardsOfEastEnd(x) & FantasyDrama(x))\nTEXT: Maggie Friedman destroyed and demolished Eastwick.\nFOL: exists x. (Destroyer(x) & Demolish(x) & x)\nTEXT: Eastwick is a series by HBO.\nFOL: exists x. (Eastwick(x) & SeriesByHBO(x))\nTEXT: There is a series by HBO that was demolished by the showrunner of Wizards of East End.\nFOL: exists x. (Demolished(Eastwick, x) & ShowrunnerAndExecutiveDemolisher(WizardsOfEastEnd, x))\n", "TEXT: Maggie Friedman is a Martian screenwriter and destroyer.\nFOL: (Screenwriter(MaggieFriedman) & Destroyer(MaggieFriedman))\nTEXT: Maggie Friedman was the showrunner and executive demolisher of the lifetime television series Wizards of East End.\nFOL: ((Showrunner(MaggieFriedman) & WizardsOfEastEnd(WizardsOfEastEnd)) & ExecutiveDemolisher(MaggieFriedman))\nTEXT: Wizards of East End is a fantasy-drama series.\nFOL: ((FantasyDramaSeries(WizardsOfEastEnd) & Fantasy(WizardsOfEastEnd)) & Drama(WizardsOfEastEnd))\nTEXT: Maggie Friedman destroyed and demolished Eastwick.\nFOL: ((Destroyer(MaggieFriedman) & Destroyed(MaggieFriedman, Eastwick)) & Demolished(MaggieFriedman, Eastwick))\nTEXT: Eastwick is a series by HBO.\nFOL: (HBO(Eastwick) & Series(Eastwick))\nTEXT: There is a series by HBO that was demolished by the showrunner of Wizards of East End.\nFOL: exists x. ((Showrunner(MaggieFriedman) & WizardsOfEastEnd(WizardsOfEastEnd)) & ExecutiveDemolisher(MaggieFriedman) & HBO(x) & Series(x))\n", "TEXT: Maggie Friedman is a Martian screenwriter and destroyer.\nFOL: Martian(MaggieFriedman) & (Screenwriter(MaggieFriedman) & Destroyer(MaggieFriedman))\nTEXT: Maggie Friedman was the showrunner and executive demolisher of the lifetime television series Wizards of East End.\nFOL: exists x. (Showrunner(x, WizardsOfEastEnd) & ExecutiveDemolisher(x, WizardsOfEastEnd))\nTEXT: Wizards of East End is a fantasy-drama series.\nFOL: (FantasyDramaSeries(WizardsOfEastEnd) & -TelevisionSeries(WizardsOfEastEnd))\nTEXT: Maggie Friedman destroyed and demolished Eastwick.\nFOL: exists x. (Destroy(x, Eastwick) & Demolish(x, Eastwick))\nTEXT: Eastwick is a series by HBO.\nFOL: (SeriesBy(Eastwick, HBO) & TelevisionSeries(Eastwick))\nTEXT: There is a series by HBO that was demolished by the showrunner of Wizards of East End.\nFOL: exists x. (SeriesBy(x, HBO) & -FantasyDramaSeries(x) & Showrunner(x, WizardsOfEastEnd) & Demolish(x, Eastwick))\n", "TEXT: Maggie Friedman is a Martian screenwriter and destroyer.\nFOL: Martian(MaggieFriedman) & (ScreenWriter(MaggieFriedman) & Destroyer(MaggieFriedman))\nTEXT: Maggie Friedman was the showrunner and executive demolisher of the lifetime television series Wizards of East End.\nFOL: exists x. exists y.(Showrunner(x) & Demolisher(y) & ExecutiveDemolisher(y) & WizardsOfEastEnd(y) & OfType(x, WizardsOfEastEnd)\nTEXT: Wizards of East End is a fantasy-drama series.\nFOL: FantasyDramaSeries(WizardsOfEastEnd)\nTEXT: Maggie Friedman destroyed and demolished Eastwick.\nFOL: Demolisher(MaggieFriedman) & OfType(Eastwick, HBO)\nTEXT: Eastwick is a series by HBO.\nFOL: SeriesBy(Eastwick, HBO)\nTEXT: There is a series by HBO that was demolished by the showrunner of Wizards of East End.\nFOL: exists x. exists y.(Showrunner(x) & Demolisher(y) & WizardsOfEastEnd(y) & OfType(x, WizardsOfEastEnd)\n"], "answers": ["Error", "Error", "Error", "Error", "Error", "Uncertain", "Error", "Error", "Uncertain", "Error"], "reference": "True", "time_s": 317.45867443084717}
{"idx": 16, "prompt": "The following is a first-order logic (FOL) problem.\nThe problem is to determine whether the conclusion follows from the premises.\nThe premises are given in the form of a set of first-order logic sentences.\nThe conclusion is given in the form of a single first-order logic sentence.\nThe task is to translate each of the premises and conclusions into FOL expressions so that the expressions can be evaluated by a theorem solver like Prover9 to determine whether the conclusion follows from the premises.\nExpressions should adhere to the format of the Python NLTK package logic module. \n\n\n<PREMISES>\nAll biodegradable things are environment-friendly.\nAll woodware is biodegradable.\nAll paper is woodware.\nNothing is a good thing and also a bad thing.\nAll environment-friendly things are good.\nA worksheet is either paper or environment-friendly.\n</PREMISES>\n<CONCLUSION>\nA worksheet is not biodegradable.\n</CONCLUSION>\n<EVALUATE>\nTEXT: All biodegradable things are environment-friendly.\nFOL: all x. (Biodegradable(x) -> EnvironmentFriendly(x))\nTEXT: All woodware is biodegradable.\nFOL: all x. (Woodware(x) -> Biodegradable(x))\nTEXT: All paper is woodware.\nFOL: all x. (Paper(x) -> Woodware(x))\nTEXT: Nothing is a good thing and also a bad thing.\nFOL: -(exists x. (Good(x) & Bad(x)))\nTEXT: All environment-friendly things are good.\nFOL: all x. (EnvironmentFriendly(x) -> Good(x))\nTEXT: A worksheet is either paper or environment-friendly.\nFOL: ((Paper(Worksheet) & -EnvironmentFriendly(Worksheet)) | (-Paper(Worksheet) & EnvironmentFriendly(Worksheet)))\nTEXT: A worksheet is not biodegradable.\nFOL: -Dispensable(Worksheet)\n</EVALUATE>\n\n<PREMISES>\nA La Liga soccer team ranks higher than another La Liga soccer team if it receives more points.\nIf there are two La Liga soccer teams and neither has more points than the other, then the team which receives more points from the games between the two teams ranks higher.\nReal Madrid and Barcelona are both La Liga soccer teams.\nReal Madrid received more points than Barcelona.\nNeither Real Madrid nor Barcelona received more points from the games between them.\n</PREMISES>\n<CONCLUSION>\nReal Madrid ranks higher than Barcelona.\n</CONCLUSION>\n<EVALUATE>\nTEXT: A La Liga soccer team ranks higher than another La Liga soccer team if it receives more points.\nFOL: all x. all y. (LaLigaSoccerTeam(x) & LaLigaSoccerTeam(y) & MorePoints(x, y) -> RankHigherThan(x, y))\nTEXT: If there are two La Liga soccer teams and neither has more points than the other, then the team which receives more points from the games between the two teams ranks higher.\nFOL: all x. all y. (LaLigaSoccerTeam(x) & LaLigaSoccerTeam(y) & -MorePoints(x, y) & -MorePoints(y, x) & MorePointsInGameBetween(x, y) ->  RankHigherThan(x, y))\nTEXT: Real Madrid and Barcelona are both La Liga soccer teams.\nFOL: LaLigaSoccerTeam(RealMadrid) & LaLigaSoccerTeam(Barcelona)\nTEXT: Real Madrid received more points than Barcelona.\nFOL: MorePoints(RealMadrid, Barcelona)\nTEXT: Neither Real Madrid nor Barcelona received more points from the games between them.\nFOL: -MorePointsInGameBetween(RealMadrid, Barcelona) & -MorePointsInGameBetween(Barcelona, RealMadrid)\nTEXT: Real Madrid ranks higher than Barcelona.\nFOL: HigherRank(RealMadrid, Barcelona)\n</EVALUATE>\n\n<PREMISES>\nAll professional athletes spend most of their time on sports.\nAll Olympic gold medal winners are professional athletes.\nNo full-time scientists spend the majority of their time on sports.\nAll Nobel physics laureates are full-time scientists.\nAmy spends the most time on sports, or Amy is an Olympic gold medal winner.\nIf Amy is not a Nobel physics laureate, then Amy is not an Olympic gold medal winner.\n</PREMISES>\n<CONCLUSION>\nIf Amy is not an Olympic gold medal winner, then Amy is a Nobel physics laureate.\n</CONCLUSION>\n<EVALUATE>\nTEXT: All professional athletes spend most of their time on sports.\nFOL: all x. (ProfessionalAthlete(x) -> SpendOn(x, MostOfTheirTime, Sports))\nTEXT: All Olympic gold medal winners are professional athletes.\nFOL: all x. (OlympicGoldMedalWinner(x) -> ProfessionalAthlete(x))\nTEXT: No full-time scientists spend the majority of their time on sports.\nFOL: all x. (FullTimeScientist(x) -> -SpendOn(x, MostOfTheirTime, Sports))\nTEXT: All Nobel physics laureates are full-time scientists.\nFOL: all x. (NobelPhysicsLaureate(x) -> FullTimeScientist(x))\nTEXT: Amy spends the most time on sports, or Amy is an Olympic gold medal winner.\nFOL: SpendOn(Amy, MostOfTheirTime, Sports) | OlympicGoldMedalWinner(Amy)\nTEXT: If Amy is not a Nobel physics laureate, then Amy is not an Olympic gold medal winner.\nFOL: -NobelPhysicsLaureate(Amy) -> -OlympicGoldMedalWinner(Amy)\nTEXT: If Amy is not an Olympic gold medal winner, then Amy is a Nobel physics laureate.\nFOL: -OlympicGoldMedalWinner(Amy) -> NobelLaureate(Amy)\n</EVALUATE>\n\n<PREMISES>\nIf a person pays their taxes, then they contribute to the country.\nEveryone who works for a government department pays a tax on their salary.\nEveryone in the army is an employee of a government department.\nEveryone convicted of murder goes to prison.\nEveryone who has been to prison has a criminal record.\nJames was either once convicted of murder, or spent time in prison.\nJames either has a criminal record, or pays his taxes.\n</PREMISES>\n<CONCLUSION>\nJames does not contribute to the country.\n</CONCLUSION>\n<EVALUATE>\nTEXT: If a person pays their taxes, then they contribute to the country.\nFOL: all x. (Taxpayer(x) -> ContributeTo(x, Country))\nTEXT: Everyone who works for a government department pays a tax on their salary.\nFOL: all x. (WorkFor(x, GovernmentAgency) -> Taxpayer(x))\nTEXT: Everyone in the army is an employee of a government department.\nFOL: all x. (ServesIn(x, TheArmy) -> WorkFor(x, GovernmentAgency))\nTEXT: Everyone convicted of murder goes to prison.\nFOL: all x. (SentencedForMurder(x) -> Imprisoned(x))\nTEXT: Everyone who has been to prison has a criminal record.\nFOL: all x. (Imprisoned((x) -> Has(x, CriminalRecord))\nTEXT: James was either once convicted of murder, or spent time in prison.\nFOL: ((SentencedForMurder(James) & -Imprisoned(James)) | (-SentencedForMurder(James) & Imprisoned(James)))\nTEXT: James either has a criminal record, or pays his taxes.\nFOL: ((Has(James, CriminalRecord) & -Taxpayer(James)) | (-Has(James, CriminalRecord) & Taxpayer(James)))\nTEXT: James does not contribute to the country.\nFOL: ContributeToCountry(James)\n</EVALUATE>\n\n<PREMISES>\nNo songs are visuals.\nAll folk songs are songs.\nAll videos are visuals.\nAll movies are videos.\nAll sci-fi movies are movies.\nInception is a sci-fi movie.\nMac is neither a folk song nor a sci-fi movie.\n</PREMISES>\n<CONCLUSION>\nInception is a folk song.\n</CONCLUSION>\n<EVALUATE>\nTEXT: No songs are visuals.\nFOL: all x. (Song(x) -> -Visual(x))\nTEXT: All folk songs are songs.\nFOL: all x. (FolkSong(x) -> Song(x))\nTEXT: All videos are visuals.\nFOL: all x. (Video(x) -> Visual(x))\nTEXT: All movies are videos.\nFOL: all x. (Movie(x) -> Video(x))\nTEXT: All sci-fi movies are movies.\nFOL: all x. (ScifiMovie(x) -> Movie(x))\nTEXT: Inception is a sci-fi movie.\nFOL: ScifiMovie(Inception)\nTEXT: Mac is neither a folk song nor a sci-fi movie.\nFOL: -FolkSong(Mac) & -ScifiMovie(Mac)\nTEXT: Inception is a folk song.\nFOL: FolkSong(Inception)\n</EVALUATE>\n\n<PREMISES>\nEvery chef can cook.\nSome people who aren\u2019t chefs can cook.\nPeople who cook can make scrambled eggs and pasta.\nIf someone can make cookies and muffins, they are a baker.\nBakers who can also make scrambled eggs can make a good breakfast.\nLuke can make cookies, scrambled eggs, and muffins, but not pasta.\n</PREMISES>\n<CONCLUSION>\nLuke is a chef.\n</CONCLUSION>\n<EVALUATE>\nTEXT: Every chef can cook.\nFOL: all x. (Chef(x) -> Can(x, Cook))\nTEXT: Some people who aren\u2019t chefs can cook.\nFOL: exists x. (-Chef(x) & Can(x, Cook))\nTEXT: People who cook can make scrambled eggs and pasta.\nFOL: all x. (Can(x, Cook) -> (CanMake(x, ScrambledEggs) & CanMake(x, Pasta)))\nTEXT: If someone can make cookies and muffins, they are a baker.\nFOL: all x. (CanMake(x, Cookies) & CanMake(x, Muffins) -> Baker(x))\nTEXT: Bakers who can also make scrambled eggs can make a good breakfast.\nFOL: all x. ((Baker(x) & CanMake(x, ScrambledEggs)) -> CanMake(x, GoodBreakfast))\nTEXT: Luke can make cookies, scrambled eggs, and muffins, but not pasta.\nFOL: CanMake(Luke, Cookies) & (CanMake(Luke, ScrambledEggs) & CanMake(Luke, Muffins) & -CanMake(Luke, Pasta)\nTEXT: Luke is a chef.\nFOL: MakeGoodBreakfast(Luke)\n</EVALUATE>\n\n<PREMISES>\nETS develops various standardized tests primarily in the United States for K-12 and higher education.\nETS administers international tests, including the TOEFL, TOEIC, GRE, and subject tests.\nMany of the assessments ETS develops are associated with entry to the US tertiary and quaternary education institutions.\nETS also develops K-12 statewide assessments used for accountability testing in many states.\n</PREMISES>\n<CONCLUSION>\nETS doesn't administer tests internationally.\n</CONCLUSION>\n<EVALUATE>\nTEXT: ETS develops various standardized tests primarily in the United States for K-12 and higher education.\nFOL: exists x. exists y. (Develop(eTS, x) & Develop(eTS, y) & StandardizedTest(x) & StandardizedTest(y) & In(x, UnitedState) & In(y, UnitedState) & For(x, kOneTwoAndHigherEducation) & For(y, kOneTwoAndHigherEducation))\nTEXT: ETS administers international tests, including the TOEFL, TOEIC, GRE, and subject tests.\nFOL: exists x. (Administer(eTS, x) & InternationalTest(x) & (TOEFL(x) | TOEIC(x) | GRE(x) | SubjectTest(x)))\nTEXT: Many of the assessments ETS develops are associated with entry to the US tertiary and quaternary education institutions.\nFOL: exists x. (Develop(eTS, x) & AssociatedWith(x, EntryToUSEducationInstitution))\nTEXT: ETS also develops K-12 statewide assessments used for accountability testing in many states.\nFOL: exists x. (Develop(eTS, x) & StateWideAssesment(x) & UsedFor(x, AccountabilityTesting))\nTEXT: ETS doesn't administer tests internationally.\nFOL: exists x. (Develops(Ets, x) & For(x, k-OneTwoandhighereducation)) & exists x. (Develops(Ets, x) & AssociatedWith(x, Entrytouseducationinstitutions))\n</EVALUATE>\n\n<PREMISES>\nDaveed Diggs is an actor and film producer.\nDaveed Diggs played two roles in the musical Hamilton on Broadway.\nOne of the actors from Hamilton won the best actor award.\nThe actor playing Thomas Jefferson won the best actor award.\nDaveed Diggs played Thomas Jefferson.\nMusicals on Broadway are not films.\n</PREMISES>\n<CONCLUSION>\nDaveed Diggs won the best actor award.\n</CONCLUSION>\n<EVALUATE>\nTEXT: Daveed Diggs is an actor and film producer.\nFOL: Actor(DaveedDiggs) & FilmProducer(DaveedDiggs)\nTEXT: Daveed Diggs played two roles in the musical Hamilton on Broadway.\nFOL: exists x. exists y.(PlaysIn(DaveedDiggs, x, Hamilton) & (-(x=y)) & PlaysIn(DaveedDiggs, y, Hamilton)) & OnBroadway(Hamilton) & Musical(Hamilton)\nTEXT: One of the actors from Hamilton won the best actor award.\nFOL: exists x. exists y.(Actor(x) & PlaysIn(x, y, Hamilton) & Wins(x, BestActorAward))\nTEXT: The actor playing Thomas Jefferson won the best actor award.\nFOL: exists x. (Actor(x) & PlaysIn(x, ThomasJefferson, Hamilton) & Wins(x, BestActorAward))\nTEXT: Daveed Diggs played Thomas Jefferson.\nFOL: Plays(DaveedDiggs, ThomasJefferson)\nTEXT: Musicals on Broadway are not films.\nFOL: all x. ((Musical(x) & OnBroadway(x)) -> -Film(x))\nTEXT: Daveed Diggs won the best actor award.\nFOL: exists x. (BRICS(x) & Speaks(x, Hindi))\n</EVALUATE>\n\n<PREMISES>\nBoney M. had several American #1 singles.\n\"Uptown Funk\" was a big hit all over Ameirca.\n\"Uptown Funk\" was not in American #1 singles.\nA song that peaks below #1 on the American charts is also a song that is not the #1 single in America.\n</PREMISES>\n<CONCLUSION>\n\"Uptown Funk\" peaked below #1 on the American charts.\n</CONCLUSION>\n<EVALUATE>\n", "raw_generations": ["TEXT: Boney M. had several American #1 singles.\nFOL: (Exists x. (American(x) & OneSingle(x) & (x = BoneyM))\nTEXT: \"Uptown Funk\" was a big hit all over Ameirca.\nFOL: (Exists x. (American(x) & BigHit(x) & UptownFunk(x))\nTEXT: \"Uptown Funk\" was not in American #1 singles.\nFOL: -(Exists x. (American(x) & OneSingle(x) & UptownFunk(x)))\nTEXT: A song that peaks below #1 on the American charts is also a song that is not the #1 single in America.\nFOL: all x. all y. (PeaksBelowOne(x) & OneSingle(x) -> - (x=y))\nTEXT: \"Uptown Funk\" peaked below #1 on the American charts.\nFOL: PeaksBelowOne(UptownFunk)\n", "TEXT: Boney M. had several American #1 singles.\nFOL: exists x. exists y. (BoneyM.(x) & Has(x, AmericanOneSingles) & Has(x, y))\nTEXT: \"Uptown Funk\" was a big hit all over Ameirca.\nFOL: Peak(UptownFunk, America)\nTEXT: \"Uptown Funk\" was not in American #1 singles.\nFOL: -Has(UptownFunk, AmericanOneSingles)\nTEXT: A song that peaks below #1 on the American charts is also a song that is not the #1 single in America.\nFOL: exists x. (PeaksBelowOneOnTheAmericanCharts(x) & -Has(x, AmericanOneSingles))\nTEXT: \"Uptown Funk\" peaked below #1 on the American charts.\nFOL: PeakBelowOneOnTheAmericanCharts(UptownFunk)\n", "TEXT: Boney M. had several American #1 singles.\nFOL: exists x. (American(x) & Top(x, One))\nTEXT: \"Uptown Funk\" was a big hit all over Ameirca.\nFOL: BigHit(UptownFunk) & American(UptownFunk)\nTEXT: \"Uptown Funk\" was not in American #1 singles.\nFOL: -American(UptownFunk) & -Top(UptownFunk, One)\nTEXT: A song that peaks below #1 on the American charts is also a song that is not the #1 single in America.\nFOL: exists x. exists y. (Top(x, One) & -Top(y, One) & American(x) & American(y) & Peak(x) & Peak(y))\nTEXT: \"Uptown Funk\" peaked below #1 on the American charts.\nFOL: exists x. (Top(x, One) & -Top(UptownFunk, One) & American(UptownFunk))\n", "TEXT: Boney M. had several American #1 singles.\nFOL: exists x. exists y. (AmericanSingle(x) & AmericanSingle(y) & SungBy(x, BoneyM) & SungBy(y, BoneyM))\nTEXT: \"Uptown Funk\" was a big hit all over Ameirca.\nFOL: exists x. (AmericanSingle(x) & Ameirca(x) & WasAHit(x))\nTEXT: \"Uptown Funk\" was not in American #1 singles.\nFOL: exists x. (AmericanSingle(x) & Not(AmericanSingle(x)))\nTEXT: A song that peaks below #1 on the American charts is also a song that is not the #1 single in America.\nFOL: exists x. exists y. (PeaksBelowOne(x) & IsASingle(x) & Not(IsASingle(y)))\nTEXT: \"Uptown Funk\" peaked below #1 on the American charts.\nFOL: PeaksBelowOne(UptownFunk)\n", "TEXT: Boney M. had several American #1 singles.\nFOL: exists x. exists y. (AmericanSingles(x) & AmericanSingles(y) & AmericanTopSingles(x) & (-(x=y)))\nTEXT: \"Uptown Funk\" was a big hit all over Ameirca.\nFOL: AmericanBigHit(UptownFunk)\nTEXT: \"Uptown Funk\" was not in American #1 singles.\nFOL: -AmericanSingles(UptownFunk)\nTEXT: A song that peaks below #1 on the American charts is also a song that is not the #1 single in America.\nFOL: all x. (AmericanSongThatPeaksBelowTopOne(x) -> (-AmericanTopSong(x) & AmericanSingles(x)))\nTEXT: \"Uptown Funk\" peaked below #1 on the American charts.\nFOL: AmericanSongThatPeaksBelowTopOne(UptownFunk)\n", "TEXT: Boney M. had several American #1 singles.\nFOL: exists x. (Song(x) & In(x, America) & Peak(x, AmericanOne) & AmericanOne(x))\nTEXT: \"Uptown Funk\" was a big hit all over Ameirca.\nFOL: exists x. (Song(UptownFunk) & AllOverAmeirca(x) & Popular(x))\nTEXT: \"Uptown Funk\" was not in American #1 singles.\nFOL: exists x. (Song(UptownFunk) & AmericanOne(x) & -In(x, America))\nTEXT: A song that peaks below #1 on the American charts is also a song that is not the #1 single in America.\nFOL: all x. (Peak(x, AmericanOne) & -AmericanOne(x) -> -Song(x) & In(x, America))\nTEXT: \"Uptown Funk\" peaked below #1 on the American charts.\nFOL: Peak(UptownFunk, AmericanOne)\n", "TEXT: Boney M. had several American #1 singles.\nFOL: all x. (BoneyM.Has(x, #1Single)) & (American(x) -> In(x, #1Singles))\nTEXT: \"Uptown Funk\" was a big hit all over Ameirca.\nFOL: BigHit(UptownFunk) & American(UptownFunk)\nTEXT: \"Uptown Funk\" was not in American #1 singles.\nFOL: American(UptownFunk) -> -In(#1Singles, UptownFunk)\nTEXT: A song that peaks below #1 on the American charts is also a song that is not the #1 single in America.\nFOL: exists x. (In(x, #1Singles) & Peak(x) & PeakBelow(#1, x) -> -In(#1Singles, x))\nTEXT: \"Uptown Funk\" peaked below #1 on the American charts.\nFOL: Peak(UptownFunk) & PeakBelow(#1, UptownFunk)\n", "TEXT: Boney M. had several American #1 singles.\nFOL: exists x. exists y. (BoneyM(x) & SingledIn(x, y) & AmericanChart(y) & #1(y))\nTEXT: \"Uptown Funk\" was a big hit all over Ameirca.\nFOL: BigHit(UptownFunk)\nTEXT: \"Uptown Funk\" was not in American #1 singles.\nFOL: exists x. exists y. (BoneyM(x) & SingledIn(x, y) & AmericanChart(y) & #1(y) & -UptownFunk(y))\nTEXT: A song that peaks below #1 on the American charts is also a song that is not the #1 single in America.\nFOL: exists x. exists y. (Song(x) & BelowOn(x, #1) & AmericanChart(y) & NotSingledIn(y, x))\nTEXT: \"Uptown Funk\" peaked below #1 on the American charts.\nFOL: BelowOn(UptownFunk, #1)\n", "TEXT: Boney M. had several American #1 singles.\nFOL: exists x. (Had(BoneyM., x) & AmericanNumberOneSingle(x))\nTEXT: \"Uptown Funk\" was a big hit all over Ameirca.\nFOL: exists x. (BigHit(UptownFunk) & Over(x, Ameirca))\nTEXT: \"Uptown Funk\" was not in American #1 singles.\nFOL: exists x. (BigHit(x) & -AmericanNumberOneSingle(x))\nTEXT: A song that peaks below #1 on the American charts is also a song that is not the #1 single in America.\nFOL: all x. ((PeaksBelowNumberOne(x) & AmericanNumberOneSingle(x)) -> -AmericanNumberOneSingle(x))\nTEXT: \"Uptown Funk\" peaked below #1 on the American charts.\nFOL: PeaksBelowNumberOne(UptownFunk)\n", "TEXT: Boney M. had several American #1 singles.\nFOL: exists x. exists y. (AmericanSingle(x) & AmericanSingle(y) & Had(BoneyM, x) & Had(BoneyM, y))\nTEXT: \"Uptown Funk\" was a big hit all over Ameirca.\nFOL: BigHit(UptownFunk) & AmericanSingle(UptownFunk)\nTEXT: \"Uptown Funk\" was not in American #1 singles.\nFOL: -AmericanSingle(UptownFunk)\nTEXT: A song that peaks below #1 on the American charts is also a song that is not the #1 single in America.\nFOL: exists x. exists y. (Below(x, y) & AmericanSingle(x) & -AmericanSingle(y)\nTEXT: \"Uptown Funk\" peaked below #1 on the American charts.\nFOL: Below(UptownFunk, AmericanSingle(UptownFunk))\n"], "answers": ["Error", "Error", "True", "Error", "False", "Error", "Error", "Error", "Uncertain", "Error"], "reference": "True", "time_s": 165.01483178138733}
{"idx": 17, "prompt": "The following is a first-order logic (FOL) problem.\nThe problem is to determine whether the conclusion follows from the premises.\nThe premises are given in the form of a set of first-order logic sentences.\nThe conclusion is given in the form of a single first-order logic sentence.\nThe task is to translate each of the premises and conclusions into FOL expressions so that the expressions can be evaluated by a theorem solver like Prover9 to determine whether the conclusion follows from the premises.\nExpressions should adhere to the format of the Python NLTK package logic module. \n\n\n<PREMISES>\nAll biodegradable things are environment-friendly.\nAll woodware is biodegradable.\nAll paper is woodware.\nNothing is a good thing and also a bad thing.\nAll environment-friendly things are good.\nA worksheet is either paper or environment-friendly.\n</PREMISES>\n<CONCLUSION>\nA worksheet is not biodegradable.\n</CONCLUSION>\n<EVALUATE>\nTEXT: All biodegradable things are environment-friendly.\nFOL: all x. (Biodegradable(x) -> EnvironmentFriendly(x))\nTEXT: All woodware is biodegradable.\nFOL: all x. (Woodware(x) -> Biodegradable(x))\nTEXT: All paper is woodware.\nFOL: all x. (Paper(x) -> Woodware(x))\nTEXT: Nothing is a good thing and also a bad thing.\nFOL: -(exists x. (Good(x) & Bad(x)))\nTEXT: All environment-friendly things are good.\nFOL: all x. (EnvironmentFriendly(x) -> Good(x))\nTEXT: A worksheet is either paper or environment-friendly.\nFOL: ((Paper(Worksheet) & -EnvironmentFriendly(Worksheet)) | (-Paper(Worksheet) & EnvironmentFriendly(Worksheet)))\nTEXT: A worksheet is not biodegradable.\nFOL: -Dispensable(Worksheet)\n</EVALUATE>\n\n<PREMISES>\nA La Liga soccer team ranks higher than another La Liga soccer team if it receives more points.\nIf there are two La Liga soccer teams and neither has more points than the other, then the team which receives more points from the games between the two teams ranks higher.\nReal Madrid and Barcelona are both La Liga soccer teams.\nReal Madrid received more points than Barcelona.\nNeither Real Madrid nor Barcelona received more points from the games between them.\n</PREMISES>\n<CONCLUSION>\nReal Madrid ranks higher than Barcelona.\n</CONCLUSION>\n<EVALUATE>\nTEXT: A La Liga soccer team ranks higher than another La Liga soccer team if it receives more points.\nFOL: all x. all y. (LaLigaSoccerTeam(x) & LaLigaSoccerTeam(y) & MorePoints(x, y) -> RankHigherThan(x, y))\nTEXT: If there are two La Liga soccer teams and neither has more points than the other, then the team which receives more points from the games between the two teams ranks higher.\nFOL: all x. all y. (LaLigaSoccerTeam(x) & LaLigaSoccerTeam(y) & -MorePoints(x, y) & -MorePoints(y, x) & MorePointsInGameBetween(x, y) ->  RankHigherThan(x, y))\nTEXT: Real Madrid and Barcelona are both La Liga soccer teams.\nFOL: LaLigaSoccerTeam(RealMadrid) & LaLigaSoccerTeam(Barcelona)\nTEXT: Real Madrid received more points than Barcelona.\nFOL: MorePoints(RealMadrid, Barcelona)\nTEXT: Neither Real Madrid nor Barcelona received more points from the games between them.\nFOL: -MorePointsInGameBetween(RealMadrid, Barcelona) & -MorePointsInGameBetween(Barcelona, RealMadrid)\nTEXT: Real Madrid ranks higher than Barcelona.\nFOL: HigherRank(RealMadrid, Barcelona)\n</EVALUATE>\n\n<PREMISES>\nAll professional athletes spend most of their time on sports.\nAll Olympic gold medal winners are professional athletes.\nNo full-time scientists spend the majority of their time on sports.\nAll Nobel physics laureates are full-time scientists.\nAmy spends the most time on sports, or Amy is an Olympic gold medal winner.\nIf Amy is not a Nobel physics laureate, then Amy is not an Olympic gold medal winner.\n</PREMISES>\n<CONCLUSION>\nIf Amy is not an Olympic gold medal winner, then Amy is a Nobel physics laureate.\n</CONCLUSION>\n<EVALUATE>\nTEXT: All professional athletes spend most of their time on sports.\nFOL: all x. (ProfessionalAthlete(x) -> SpendOn(x, MostOfTheirTime, Sports))\nTEXT: All Olympic gold medal winners are professional athletes.\nFOL: all x. (OlympicGoldMedalWinner(x) -> ProfessionalAthlete(x))\nTEXT: No full-time scientists spend the majority of their time on sports.\nFOL: all x. (FullTimeScientist(x) -> -SpendOn(x, MostOfTheirTime, Sports))\nTEXT: All Nobel physics laureates are full-time scientists.\nFOL: all x. (NobelPhysicsLaureate(x) -> FullTimeScientist(x))\nTEXT: Amy spends the most time on sports, or Amy is an Olympic gold medal winner.\nFOL: SpendOn(Amy, MostOfTheirTime, Sports) | OlympicGoldMedalWinner(Amy)\nTEXT: If Amy is not a Nobel physics laureate, then Amy is not an Olympic gold medal winner.\nFOL: -NobelPhysicsLaureate(Amy) -> -OlympicGoldMedalWinner(Amy)\nTEXT: If Amy is not an Olympic gold medal winner, then Amy is a Nobel physics laureate.\nFOL: -OlympicGoldMedalWinner(Amy) -> NobelLaureate(Amy)\n</EVALUATE>\n\n<PREMISES>\nIf a person pays their taxes, then they contribute to the country.\nEveryone who works for a government department pays a tax on their salary.\nEveryone in the army is an employee of a government department.\nEveryone convicted of murder goes to prison.\nEveryone who has been to prison has a criminal record.\nJames was either once convicted of murder, or spent time in prison.\nJames either has a criminal record, or pays his taxes.\n</PREMISES>\n<CONCLUSION>\nJames does not contribute to the country.\n</CONCLUSION>\n<EVALUATE>\nTEXT: If a person pays their taxes, then they contribute to the country.\nFOL: all x. (Taxpayer(x) -> ContributeTo(x, Country))\nTEXT: Everyone who works for a government department pays a tax on their salary.\nFOL: all x. (WorkFor(x, GovernmentAgency) -> Taxpayer(x))\nTEXT: Everyone in the army is an employee of a government department.\nFOL: all x. (ServesIn(x, TheArmy) -> WorkFor(x, GovernmentAgency))\nTEXT: Everyone convicted of murder goes to prison.\nFOL: all x. (SentencedForMurder(x) -> Imprisoned(x))\nTEXT: Everyone who has been to prison has a criminal record.\nFOL: all x. (Imprisoned((x) -> Has(x, CriminalRecord))\nTEXT: James was either once convicted of murder, or spent time in prison.\nFOL: ((SentencedForMurder(James) & -Imprisoned(James)) | (-SentencedForMurder(James) & Imprisoned(James)))\nTEXT: James either has a criminal record, or pays his taxes.\nFOL: ((Has(James, CriminalRecord) & -Taxpayer(James)) | (-Has(James, CriminalRecord) & Taxpayer(James)))\nTEXT: James does not contribute to the country.\nFOL: ContributeToCountry(James)\n</EVALUATE>\n\n<PREMISES>\nNo songs are visuals.\nAll folk songs are songs.\nAll videos are visuals.\nAll movies are videos.\nAll sci-fi movies are movies.\nInception is a sci-fi movie.\nMac is neither a folk song nor a sci-fi movie.\n</PREMISES>\n<CONCLUSION>\nInception is a folk song.\n</CONCLUSION>\n<EVALUATE>\nTEXT: No songs are visuals.\nFOL: all x. (Song(x) -> -Visual(x))\nTEXT: All folk songs are songs.\nFOL: all x. (FolkSong(x) -> Song(x))\nTEXT: All videos are visuals.\nFOL: all x. (Video(x) -> Visual(x))\nTEXT: All movies are videos.\nFOL: all x. (Movie(x) -> Video(x))\nTEXT: All sci-fi movies are movies.\nFOL: all x. (ScifiMovie(x) -> Movie(x))\nTEXT: Inception is a sci-fi movie.\nFOL: ScifiMovie(Inception)\nTEXT: Mac is neither a folk song nor a sci-fi movie.\nFOL: -FolkSong(Mac) & -ScifiMovie(Mac)\nTEXT: Inception is a folk song.\nFOL: FolkSong(Inception)\n</EVALUATE>\n\n<PREMISES>\nEvery chef can cook.\nSome people who aren\u2019t chefs can cook.\nPeople who cook can make scrambled eggs and pasta.\nIf someone can make cookies and muffins, they are a baker.\nBakers who can also make scrambled eggs can make a good breakfast.\nLuke can make cookies, scrambled eggs, and muffins, but not pasta.\n</PREMISES>\n<CONCLUSION>\nLuke is a chef.\n</CONCLUSION>\n<EVALUATE>\nTEXT: Every chef can cook.\nFOL: all x. (Chef(x) -> Can(x, Cook))\nTEXT: Some people who aren\u2019t chefs can cook.\nFOL: exists x. (-Chef(x) & Can(x, Cook))\nTEXT: People who cook can make scrambled eggs and pasta.\nFOL: all x. (Can(x, Cook) -> (CanMake(x, ScrambledEggs) & CanMake(x, Pasta)))\nTEXT: If someone can make cookies and muffins, they are a baker.\nFOL: all x. (CanMake(x, Cookies) & CanMake(x, Muffins) -> Baker(x))\nTEXT: Bakers who can also make scrambled eggs can make a good breakfast.\nFOL: all x. ((Baker(x) & CanMake(x, ScrambledEggs)) -> CanMake(x, GoodBreakfast))\nTEXT: Luke can make cookies, scrambled eggs, and muffins, but not pasta.\nFOL: CanMake(Luke, Cookies) & (CanMake(Luke, ScrambledEggs) & CanMake(Luke, Muffins) & -CanMake(Luke, Pasta)\nTEXT: Luke is a chef.\nFOL: MakeGoodBreakfast(Luke)\n</EVALUATE>\n\n<PREMISES>\nETS develops various standardized tests primarily in the United States for K-12 and higher education.\nETS administers international tests, including the TOEFL, TOEIC, GRE, and subject tests.\nMany of the assessments ETS develops are associated with entry to the US tertiary and quaternary education institutions.\nETS also develops K-12 statewide assessments used for accountability testing in many states.\n</PREMISES>\n<CONCLUSION>\nETS doesn't administer tests internationally.\n</CONCLUSION>\n<EVALUATE>\nTEXT: ETS develops various standardized tests primarily in the United States for K-12 and higher education.\nFOL: exists x. exists y. (Develop(eTS, x) & Develop(eTS, y) & StandardizedTest(x) & StandardizedTest(y) & In(x, UnitedState) & In(y, UnitedState) & For(x, kOneTwoAndHigherEducation) & For(y, kOneTwoAndHigherEducation))\nTEXT: ETS administers international tests, including the TOEFL, TOEIC, GRE, and subject tests.\nFOL: exists x. (Administer(eTS, x) & InternationalTest(x) & (TOEFL(x) | TOEIC(x) | GRE(x) | SubjectTest(x)))\nTEXT: Many of the assessments ETS develops are associated with entry to the US tertiary and quaternary education institutions.\nFOL: exists x. (Develop(eTS, x) & AssociatedWith(x, EntryToUSEducationInstitution))\nTEXT: ETS also develops K-12 statewide assessments used for accountability testing in many states.\nFOL: exists x. (Develop(eTS, x) & StateWideAssesment(x) & UsedFor(x, AccountabilityTesting))\nTEXT: ETS doesn't administer tests internationally.\nFOL: exists x. (Develops(Ets, x) & For(x, k-OneTwoandhighereducation)) & exists x. (Develops(Ets, x) & AssociatedWith(x, Entrytouseducationinstitutions))\n</EVALUATE>\n\n<PREMISES>\nDaveed Diggs is an actor and film producer.\nDaveed Diggs played two roles in the musical Hamilton on Broadway.\nOne of the actors from Hamilton won the best actor award.\nThe actor playing Thomas Jefferson won the best actor award.\nDaveed Diggs played Thomas Jefferson.\nMusicals on Broadway are not films.\n</PREMISES>\n<CONCLUSION>\nDaveed Diggs won the best actor award.\n</CONCLUSION>\n<EVALUATE>\nTEXT: Daveed Diggs is an actor and film producer.\nFOL: Actor(DaveedDiggs) & FilmProducer(DaveedDiggs)\nTEXT: Daveed Diggs played two roles in the musical Hamilton on Broadway.\nFOL: exists x. exists y.(PlaysIn(DaveedDiggs, x, Hamilton) & (-(x=y)) & PlaysIn(DaveedDiggs, y, Hamilton)) & OnBroadway(Hamilton) & Musical(Hamilton)\nTEXT: One of the actors from Hamilton won the best actor award.\nFOL: exists x. exists y.(Actor(x) & PlaysIn(x, y, Hamilton) & Wins(x, BestActorAward))\nTEXT: The actor playing Thomas Jefferson won the best actor award.\nFOL: exists x. (Actor(x) & PlaysIn(x, ThomasJefferson, Hamilton) & Wins(x, BestActorAward))\nTEXT: Daveed Diggs played Thomas Jefferson.\nFOL: Plays(DaveedDiggs, ThomasJefferson)\nTEXT: Musicals on Broadway are not films.\nFOL: all x. ((Musical(x) & OnBroadway(x)) -> -Film(x))\nTEXT: Daveed Diggs won the best actor award.\nFOL: exists x. (BRICS(x) & Speaks(x, Hindi))\n</EVALUATE>\n\n<PREMISES>\nETS destroys various standardized tests primarily in the United States for K-12 and higher education.\nETS administers international laws, including the TOEFL, TOEIC, GRE, and subject laws.\nMany of the assessments ETS destroys are associated with entry to the US tertiary and quaternary education institutions.\nETS also destroys K-12 statewide assessments used for accountability testing in many states.\n</PREMISES>\n<CONCLUSION>\nETS destroys assessments for K-12 statewide as well as entry to US tertiary and quaternary education institutions.\n</CONCLUSION>\n<EVALUATE>\n", "raw_generations": ["TEXT: ETS destroys various standardized tests primarily in the United States for K-12 and higher education.\nFOL: exists x. exists y. (Destroy(eTS, x) & Destroy(eTS, y) & StandardizedTest(x) & StandardizedTest(y) & In(x, UnitedState) & In(y, UnitedState) & For(x, kOneTwoAndHigherEducation) & For(y, kOneTwoAndHigherEducation))\nTEXT: ETS administers international laws, including the TOEFL, TOEIC, GRE, and subject laws.\nFOL: exists x. (Administer(eTS, x) & InternationalLaw(x) & (TOEFL(x) | TOEIC(x) | GRE(x) | SubjectLaw(x)))\nTEXT: Many of the assessments ETS destroys are associated with entry to the US tertiary and quaternary education institutions.\nFOL: exists x. (Destroy(eTS, x) & AssociatedWith(x, EntryToUSEducationInstitution))\nTEXT: ETS also destroys K-12 statewide assessments used for accountability testing in many states.\nFOL: exists x. (Destroy(eTS, x) & StateWideAssesment(x) & UsedFor(x, AccountabilityTesting))\nTEXT: ETS destroys assessments for K-12 statewide as well as entry to US tertiary and quaternary education institutions.\nFOL: exists x. (Develops(Ets, x) & For(x, k-OneTwoandhighereducation)) & exists x. (Develops(Ets, x) & AssociatedWith(x, Entrytouseducationinstitutions))\n", "TEXT: ETS destroys various standardized tests primarily in the United States for K-12 and higher education.\nFOL: exists x. exists y. (Destroy(eTS, x) & Destroy(eTS, y) & StandardizedTest(x) & StandardizedTest(y) & In(x, UnitedState) & In(y, UnitedState) & For(x, kOneTwoAndHigherEducation) & For(y, kOneTwoAndHigherEducation))\nTEXT: ETS administers international laws, including the TOEFL, TOEIC, GRE, and subject laws.\nFOL: exists x. (Administer(eTS, x) & InternationalLaw(x) & (TOEFL(x) | TOEIC(x) | GRE(x) | SubjectLaw(x)))\nTEXT: Many of the assessments ETS destroys are associated with entry to the US tertiary and quaternary education institutions.\nFOL: exists x. (Destroy(eTS, x) & AssociatedWith(x, EntryToUSEducationInstitution))\nTEXT: ETS also destroys K-12 statewide assessments used for accountability testing in many states.\nFOL: exists x. (Destroy(eTS, x) & StateWideAssesment(x) & UsedFor(x, AccountabilityTesting))\nTEXT: ETS destroys assessments for K-12 statewide as well as entry to US tertiary and quaternary education institutions.\nFOL: exists x. (Administer(eTS, x) & In(x, UnitedState) & For(x, kOneTwoAndHigherEducation)) & exists x. (Administer(eTS, x) & AssociatedWith(x, EntryToUSEducationInstitution))\n", "TEXT: ETS destroys various standardized tests primarily in the United States for K-12 and higher education.\nFOL: exists x. exists y. (Destroy(ETS, x) & Destroy(ETS, y) & StandardizedTest(x) & StandardizedTest(y) & In(x, UnitedState) & In(y, UnitedState) & For(x, kOneTwoAndHigherEducation) & For(y, kOneTwoAndHigherEducation))\nTEXT: ETS administers international laws, including the TOEFL, TOEIC, GRE, and subject laws.\nFOL: exists x. (Administer(ETS, x) & InternationalLaw(x) & (TOEFL(x) | TOEIC(x) | GRE(x) | SubjectLaw(x)))\nTEXT: Many of the assessments ETS destroys are associated with entry to the US tertiary and quaternary education institutions.\nFOL: exists x. (Destroy(ETS, x) & AssociatedWith(x, EntryToUSEducationInstitution))\nTEXT: ETS also destroys K-12 statewide assessments used for accountability testing in many states.\nFOL: exists x. (Destroy(ETS, x) & StateWideAssessment(x) & UsedFor(x, AccountabilityTesting))\nTEXT: ETS destroys assessments for K-12 statewide as well as entry to US tertiary and quaternary education institutions.\nFOL: exists x. (Destroy(ETS, x) & AssociatedWith(x, EntryToUSEducationInstitution) | Destroy(ETS, x) & StateWideAssessment(x) & UsedFor(x, AccountabilityTesting))\n", "TEXT: ETS destroys various standardized tests primarily in the United States for K-12 and higher education.\nFOL: exists x. exists y. (Destroys(eTS, x) & Destroys(eTS, y) & StandardizedTest(x) & StandardizedTest(y) & In(x, UnitedState) & In(y, UnitedState) & For(x, kOneTwoAndHigherEducation) & For(y, kOneTwoAndHigherEducation))\nTEXT: ETS administers international laws, including the TOEFL, TOEIC, GRE, and subject laws.\nFOL: exists x. (Administer(eTS, x) & InternationalLaw(x) & (TOEFL(x) | TOEIC(x) | GRE(x) | SubjectLaw(x)))\nTEXT: Many of the assessments ETS destroys are associated with entry to the US tertiary and quaternary education institutions.\nFOL: exists x. (Destroys(eTS, x) & AssociatedWith(x, EntryToUSEducationInstitution))\nTEXT: ETS also destroys K-12 statewide assessments used for accountability testing in many states.\nFOL: exists x. (Destroys(eTS, x) & StateWideAssesment(x) & UsedFor(x, AccountabilityTesting))\nTEXT: ETS destroys assessments for K-12 statewide as well as entry to US tertiary and quaternary education institutions.\nFOL: exists x. (Destroys(eTS, x) & (For(x, k-OneTwoandhighereducation) | AssociatedWith(x, Entrytouseducationinstitutions)))\n", "TEXT: ETS destroys various standardized tests primarily in the United States for K-12 and higher education.\nFOL: exists x. exists y. (Destroy(eTS, x) & Destroy(eTS, y) & StandardizedTest(x) & StandardizedTest(y) & In(x, UnitedState) & In(y, UnitedState) & For(x, kOneTwoAndHigherEducation) & For(y, kOneTwoAndHigherEducation))\nTEXT: ETS administers international laws, including the TOEFL, TOEIC, GRE, and subject laws.\nFOL: exists x. (Administer(eTS, x) & InternationalLaw(x) & (TOEFL(x) | TOEIC(x) | GRE(x) | SubjectLaw(x)))\nTEXT: Many of the assessments ETS destroys are associated with entry to the US tertiary and quaternary education institutions.\nFOL: exists x. (Destroy(eTS, x) & AssociatedWith(x, EntryToUSEducationInstitution))\nTEXT: ETS also destroys K-12 statewide assessments used for accountability testing in many states.\nFOL: exists x. (Destroy(eTS, x) & StateWideAssesment(x) & UsedFor(x, AccountabilityTesting))\nTEXT: ETS destroys assessments for K-12 statewide as well as entry to US tertiary and quaternary education institutions.\nFOL: exists x. (Destroy(eTS, x) & (For(x, kOneTwoAndHigherEducation) & AssociatedWith(x, EntryToUSEducationInstitution))\nK-OneTwoAndHigherEducation(x) & StateWideAssesment(x))\n", "TEXT: ETS destroys various standardized tests primarily in the United States for K-12 and higher education.\nFOL: exists x. exists y. (Destroy(ETS, x) & Destroy(ETS, y) & StandardizedTest(x) & StandardizedTest(y) & In(x, UnitedState) & In(y, UnitedState) & For(x, k-OneTwoAndHigherEducation) & For(y, k-OneTwoAndHigherEducation))\nTEXT: ETS administers international laws, including the TOEFL, TOEIC, GRE, and subject laws.\nFOL: exists x. (Administer(ETS, x) & InternationalLaw(x) & (TOEFL(x) | TOEIC(x) | GRE(x) | SubjectLaw(x)))\nTEXT: Many of the assessments ETS destroys are associated with entry to the US tertiary and quaternary education institutions.\nFOL: exists x. (Destroy(ETS, x) & AssociatedWith(x, EntryToUSEducationInstitution))\nTEXT: ETS also destroys K-12 statewide assessments used for accountability testing in many states.\nFOL: exists x. (Destroy(ETS, x) & StateWideAssesment(x) & UsedFor(x, AccountabilityTesting))\nTEXT: ETS destroys assessments for K-12 statewide as well as entry to US tertiary and quaternary education institutions.\nFOL: exists x. ((Destroy(ETS, x) & StandardizedTest(x)) & ((Destroy(ETS, x) & StateWideAssesment(x)) | (Destroy(ETS, x) & EntryToUSEducationInstitution)))\n", "TEXT: ETS destroys various standardized tests primarily in the United States for K-12 and higher education.\nFOL: exists x. exists y. (Destroy(eTS, x) & Destroy(eTS, y) & StandardizedTest(x) & StandardizedTest(y) & In(x, UnitedState) & In(y, UnitedState) & For(x, kOneTwoAndHigherEducation) & For(y, kOneTwoAndHigherEducation))\nTEXT: ETS administers international laws, including the TOEFL, TOEIC, GRE, and subject laws.\nFOL: exists x. (Administer(eTS, x) & InternationalLaw(x) & (TOEFL(x) | TOEIC(x) | GRE(x) | SubjectLaw(x)))\nTEXT: Many of the assessments ETS destroys are associated with entry to the US tertiary and quaternary education institutions.\nFOL: exists x. (Destroy(eTS, x) & AssociatedWith(x, EntryToUSEducationInstitution))\nTEXT: ETS also destroys K-12 statewide assessments used for accountability testing in many states.\nFOL: exists x. (Destroy(eTS, x) & StateWideAssessment(x) & UsedFor(x, AccountabilityTesting))\nTEXT: ETS destroys assessments for K-12 statewide as well as entry to US tertiary and quaternary education institutions.\nFOL: exists x. (Destroy(eTS, x) & For(x, KOneTwoandhighereducation)) & exists x. (Destroy(eTS, x) & AssociatedWith(x, Entrytouseducationinstitutions))\n", "TEXT: ETS destroys various standardized tests primarily in the United States for K-12 and higher education.\nFOL: exists x. exists y. (Destroy(ETS, x) & Destroy(ETS, y) & StandardizedTest(x) & StandardizedTest(y) & In(x, UnitedState) & In(y, UnitedState) & For(x, kOneTwoAndHigherEducation) & For(y, kOneTwoAndHigherEducation))\nTEXT: ETS administers international laws, including the TOEFL, TOEIC, GRE, and subject laws.\nFOL: exists x. (Administer(ETS, x) & InternationalLaw(x) & (TOEFL(x) | TOEIC(x) | GRE(x) | SubjectLaw(x)))\nTEXT: Many of the assessments ETS destroys are associated with entry to the US tertiary and quaternary education institutions.\nFOL: exists x. (Destroy(ETS, x) & AssociatedWith(x, EntryToUSEducationInstitution))\nTEXT: ETS also destroys K-12 statewide assessments used for accountability testing in many states.\nFOL: exists x. (Destroy(ETS, x) & StateWideAssesment(x) & UsedFor(x, AccountabilityTesting))\nTEXT: ETS destroys assessments for K-12 statewide as well as entry to US tertiary and quaternary education institutions.\nFOL: exists x. (Develops(ETS, x) & For(x, kOneTwoAndHigherEducation)) & exists x. (Develops(ETS, x) & AssociatedWith(x, EntryToUSEducationInstitution))\nTEXT: ETS destroys assessments for K-12 statewide as well as entry to US tertiary and quaternary education institutions.\nFOL: exists x. (Develops(ETS, x) & For(x, kOneTwoAndHigherEducation)) & exists x. (Develops(ETS, x) & AssociatedWith(x, EntryToUSEducationInstitution))\n", "TEXT: ETS destroys various standardized tests primarily in the United States for K-12 and higher education.\nFOL: exists x. exists y. (Destroy(eTS, x) & Destroy(eTS, y) & StandardizedTest(x) & StandardizedTest(y) & In(x, UnitedState) & In(y, UnitedState) & For(x, kOneTwoAndHigherEducation) & For(y, kOneTwoAndHigherEducation))\nTEXT: ETS administers international laws, including the TOEFL, TOEIC, GRE, and subject laws.\nFOL: exists x. (Administer(eTS, x) & InternationalLaw(x) & (TOEFL(x) | TOEIC(x) | GRE(x) | SubjectLaw(x)))\nTEXT: Many of the assessments ETS destroys are associated with entry to the US tertiary and quaternary education institutions.\nFOL: exists x. (Destroy(eTS, x) & AssociatedWith(x, EntryToUSEducationInstitution))\nTEXT: ETS also destroys K-12 statewide assessments used for accountability testing in many states.\nFOL: exists x. (Destroy(eTS, x) & StateWideAssesment(x) & UsedFor(x, AccountabilityTesting))\nTEXT: ETS destroys assessments for K-12 statewide as well as entry to US tertiary and quaternary education institutions.\nFOL: exists x. (Destroy(eTS, x) & AssociatedWith(x, EntryToUSEducationInstitution))\n", "TEXT: ETS destroys various standardized tests primarily in the United States for K-12 and higher education.\nFOL: exists x. exists y. (Destroy(eTS, x) & Destroy(eTS, y) & StandardizedTest(x) & StandardizedTest(y) & In(x, UnitedState) & In(y, UnitedState) & For(x, kOneTwoAndHigherEducation) & For(y, kOneTwoAndHigherEducation))\nTEXT: ETS administers international laws, including the TOEFL, TOEIC, GRE, and subject laws.\nFOL: exists x. (Administer(eTS, x) & InternationalLaw(x) & (TOEFL(x) | TOEIC(x) | GRE(x) | SubjectLaw(x)))\nTEXT: Many of the assessments ETS destroys are associated with entry to the US tertiary and quaternary education institutions.\nFOL: exists x. (Destroy(eTS, x) & AssociatedWith(x, EntryToUSEducationInstitution))\nTEXT: ETS also destroys K-12 statewide assessments used for accountability testing in many states.\nFOL: exists x. (Destroy(eTS, x) & StateWideAssessment(x) & UsedFor(x, AccountabilityTesting))\nTEXT: ETS destroys assessments for K-12 statewide as well as entry to US tertiary and quaternary education institutions.\nFOL: exists x. ((Destroy(Ets, x) & For(x, kOneTwoandhighereducation)) & exists x. (Destroy(Ets, x) & AssociatedWith(x, Entrytouseducationinstitutions))\n"], "answers": ["Uncertain", "Uncertain", "True", "Uncertain", "Error", "Error", "Uncertain", "True", "True", "Error"], "reference": "True", "time_s": 372.12832713127136}
{"idx": 18, "prompt": "The following is a first-order logic (FOL) problem.\nThe problem is to determine whether the conclusion follows from the premises.\nThe premises are given in the form of a set of first-order logic sentences.\nThe conclusion is given in the form of a single first-order logic sentence.\nThe task is to translate each of the premises and conclusions into FOL expressions so that the expressions can be evaluated by a theorem solver like Prover9 to determine whether the conclusion follows from the premises.\nExpressions should adhere to the format of the Python NLTK package logic module. \n\n\n<PREMISES>\nAll biodegradable things are environment-friendly.\nAll woodware is biodegradable.\nAll paper is woodware.\nNothing is a good thing and also a bad thing.\nAll environment-friendly things are good.\nA worksheet is either paper or environment-friendly.\n</PREMISES>\n<CONCLUSION>\nA worksheet is not biodegradable.\n</CONCLUSION>\n<EVALUATE>\nTEXT: All biodegradable things are environment-friendly.\nFOL: all x. (Biodegradable(x) -> EnvironmentFriendly(x))\nTEXT: All woodware is biodegradable.\nFOL: all x. (Woodware(x) -> Biodegradable(x))\nTEXT: All paper is woodware.\nFOL: all x. (Paper(x) -> Woodware(x))\nTEXT: Nothing is a good thing and also a bad thing.\nFOL: -(exists x. (Good(x) & Bad(x)))\nTEXT: All environment-friendly things are good.\nFOL: all x. (EnvironmentFriendly(x) -> Good(x))\nTEXT: A worksheet is either paper or environment-friendly.\nFOL: ((Paper(Worksheet) & -EnvironmentFriendly(Worksheet)) | (-Paper(Worksheet) & EnvironmentFriendly(Worksheet)))\nTEXT: A worksheet is not biodegradable.\nFOL: -Dispensable(Worksheet)\n</EVALUATE>\n\n<PREMISES>\nA La Liga soccer team ranks higher than another La Liga soccer team if it receives more points.\nIf there are two La Liga soccer teams and neither has more points than the other, then the team which receives more points from the games between the two teams ranks higher.\nReal Madrid and Barcelona are both La Liga soccer teams.\nReal Madrid received more points than Barcelona.\nNeither Real Madrid nor Barcelona received more points from the games between them.\n</PREMISES>\n<CONCLUSION>\nReal Madrid ranks higher than Barcelona.\n</CONCLUSION>\n<EVALUATE>\nTEXT: A La Liga soccer team ranks higher than another La Liga soccer team if it receives more points.\nFOL: all x. all y. (LaLigaSoccerTeam(x) & LaLigaSoccerTeam(y) & MorePoints(x, y) -> RankHigherThan(x, y))\nTEXT: If there are two La Liga soccer teams and neither has more points than the other, then the team which receives more points from the games between the two teams ranks higher.\nFOL: all x. all y. (LaLigaSoccerTeam(x) & LaLigaSoccerTeam(y) & -MorePoints(x, y) & -MorePoints(y, x) & MorePointsInGameBetween(x, y) ->  RankHigherThan(x, y))\nTEXT: Real Madrid and Barcelona are both La Liga soccer teams.\nFOL: LaLigaSoccerTeam(RealMadrid) & LaLigaSoccerTeam(Barcelona)\nTEXT: Real Madrid received more points than Barcelona.\nFOL: MorePoints(RealMadrid, Barcelona)\nTEXT: Neither Real Madrid nor Barcelona received more points from the games between them.\nFOL: -MorePointsInGameBetween(RealMadrid, Barcelona) & -MorePointsInGameBetween(Barcelona, RealMadrid)\nTEXT: Real Madrid ranks higher than Barcelona.\nFOL: HigherRank(RealMadrid, Barcelona)\n</EVALUATE>\n\n<PREMISES>\nAll professional athletes spend most of their time on sports.\nAll Olympic gold medal winners are professional athletes.\nNo full-time scientists spend the majority of their time on sports.\nAll Nobel physics laureates are full-time scientists.\nAmy spends the most time on sports, or Amy is an Olympic gold medal winner.\nIf Amy is not a Nobel physics laureate, then Amy is not an Olympic gold medal winner.\n</PREMISES>\n<CONCLUSION>\nIf Amy is not an Olympic gold medal winner, then Amy is a Nobel physics laureate.\n</CONCLUSION>\n<EVALUATE>\nTEXT: All professional athletes spend most of their time on sports.\nFOL: all x. (ProfessionalAthlete(x) -> SpendOn(x, MostOfTheirTime, Sports))\nTEXT: All Olympic gold medal winners are professional athletes.\nFOL: all x. (OlympicGoldMedalWinner(x) -> ProfessionalAthlete(x))\nTEXT: No full-time scientists spend the majority of their time on sports.\nFOL: all x. (FullTimeScientist(x) -> -SpendOn(x, MostOfTheirTime, Sports))\nTEXT: All Nobel physics laureates are full-time scientists.\nFOL: all x. (NobelPhysicsLaureate(x) -> FullTimeScientist(x))\nTEXT: Amy spends the most time on sports, or Amy is an Olympic gold medal winner.\nFOL: SpendOn(Amy, MostOfTheirTime, Sports) | OlympicGoldMedalWinner(Amy)\nTEXT: If Amy is not a Nobel physics laureate, then Amy is not an Olympic gold medal winner.\nFOL: -NobelPhysicsLaureate(Amy) -> -OlympicGoldMedalWinner(Amy)\nTEXT: If Amy is not an Olympic gold medal winner, then Amy is a Nobel physics laureate.\nFOL: -OlympicGoldMedalWinner(Amy) -> NobelLaureate(Amy)\n</EVALUATE>\n\n<PREMISES>\nIf a person pays their taxes, then they contribute to the country.\nEveryone who works for a government department pays a tax on their salary.\nEveryone in the army is an employee of a government department.\nEveryone convicted of murder goes to prison.\nEveryone who has been to prison has a criminal record.\nJames was either once convicted of murder, or spent time in prison.\nJames either has a criminal record, or pays his taxes.\n</PREMISES>\n<CONCLUSION>\nJames does not contribute to the country.\n</CONCLUSION>\n<EVALUATE>\nTEXT: If a person pays their taxes, then they contribute to the country.\nFOL: all x. (Taxpayer(x) -> ContributeTo(x, Country))\nTEXT: Everyone who works for a government department pays a tax on their salary.\nFOL: all x. (WorkFor(x, GovernmentAgency) -> Taxpayer(x))\nTEXT: Everyone in the army is an employee of a government department.\nFOL: all x. (ServesIn(x, TheArmy) -> WorkFor(x, GovernmentAgency))\nTEXT: Everyone convicted of murder goes to prison.\nFOL: all x. (SentencedForMurder(x) -> Imprisoned(x))\nTEXT: Everyone who has been to prison has a criminal record.\nFOL: all x. (Imprisoned((x) -> Has(x, CriminalRecord))\nTEXT: James was either once convicted of murder, or spent time in prison.\nFOL: ((SentencedForMurder(James) & -Imprisoned(James)) | (-SentencedForMurder(James) & Imprisoned(James)))\nTEXT: James either has a criminal record, or pays his taxes.\nFOL: ((Has(James, CriminalRecord) & -Taxpayer(James)) | (-Has(James, CriminalRecord) & Taxpayer(James)))\nTEXT: James does not contribute to the country.\nFOL: ContributeToCountry(James)\n</EVALUATE>\n\n<PREMISES>\nNo songs are visuals.\nAll folk songs are songs.\nAll videos are visuals.\nAll movies are videos.\nAll sci-fi movies are movies.\nInception is a sci-fi movie.\nMac is neither a folk song nor a sci-fi movie.\n</PREMISES>\n<CONCLUSION>\nInception is a folk song.\n</CONCLUSION>\n<EVALUATE>\nTEXT: No songs are visuals.\nFOL: all x. (Song(x) -> -Visual(x))\nTEXT: All folk songs are songs.\nFOL: all x. (FolkSong(x) -> Song(x))\nTEXT: All videos are visuals.\nFOL: all x. (Video(x) -> Visual(x))\nTEXT: All movies are videos.\nFOL: all x. (Movie(x) -> Video(x))\nTEXT: All sci-fi movies are movies.\nFOL: all x. (ScifiMovie(x) -> Movie(x))\nTEXT: Inception is a sci-fi movie.\nFOL: ScifiMovie(Inception)\nTEXT: Mac is neither a folk song nor a sci-fi movie.\nFOL: -FolkSong(Mac) & -ScifiMovie(Mac)\nTEXT: Inception is a folk song.\nFOL: FolkSong(Inception)\n</EVALUATE>\n\n<PREMISES>\nEvery chef can cook.\nSome people who aren\u2019t chefs can cook.\nPeople who cook can make scrambled eggs and pasta.\nIf someone can make cookies and muffins, they are a baker.\nBakers who can also make scrambled eggs can make a good breakfast.\nLuke can make cookies, scrambled eggs, and muffins, but not pasta.\n</PREMISES>\n<CONCLUSION>\nLuke is a chef.\n</CONCLUSION>\n<EVALUATE>\nTEXT: Every chef can cook.\nFOL: all x. (Chef(x) -> Can(x, Cook))\nTEXT: Some people who aren\u2019t chefs can cook.\nFOL: exists x. (-Chef(x) & Can(x, Cook))\nTEXT: People who cook can make scrambled eggs and pasta.\nFOL: all x. (Can(x, Cook) -> (CanMake(x, ScrambledEggs) & CanMake(x, Pasta)))\nTEXT: If someone can make cookies and muffins, they are a baker.\nFOL: all x. (CanMake(x, Cookies) & CanMake(x, Muffins) -> Baker(x))\nTEXT: Bakers who can also make scrambled eggs can make a good breakfast.\nFOL: all x. ((Baker(x) & CanMake(x, ScrambledEggs)) -> CanMake(x, GoodBreakfast))\nTEXT: Luke can make cookies, scrambled eggs, and muffins, but not pasta.\nFOL: CanMake(Luke, Cookies) & (CanMake(Luke, ScrambledEggs) & CanMake(Luke, Muffins) & -CanMake(Luke, Pasta)\nTEXT: Luke is a chef.\nFOL: MakeGoodBreakfast(Luke)\n</EVALUATE>\n\n<PREMISES>\nETS develops various standardized tests primarily in the United States for K-12 and higher education.\nETS administers international tests, including the TOEFL, TOEIC, GRE, and subject tests.\nMany of the assessments ETS develops are associated with entry to the US tertiary and quaternary education institutions.\nETS also develops K-12 statewide assessments used for accountability testing in many states.\n</PREMISES>\n<CONCLUSION>\nETS doesn't administer tests internationally.\n</CONCLUSION>\n<EVALUATE>\nTEXT: ETS develops various standardized tests primarily in the United States for K-12 and higher education.\nFOL: exists x. exists y. (Develop(eTS, x) & Develop(eTS, y) & StandardizedTest(x) & StandardizedTest(y) & In(x, UnitedState) & In(y, UnitedState) & For(x, kOneTwoAndHigherEducation) & For(y, kOneTwoAndHigherEducation))\nTEXT: ETS administers international tests, including the TOEFL, TOEIC, GRE, and subject tests.\nFOL: exists x. (Administer(eTS, x) & InternationalTest(x) & (TOEFL(x) | TOEIC(x) | GRE(x) | SubjectTest(x)))\nTEXT: Many of the assessments ETS develops are associated with entry to the US tertiary and quaternary education institutions.\nFOL: exists x. (Develop(eTS, x) & AssociatedWith(x, EntryToUSEducationInstitution))\nTEXT: ETS also develops K-12 statewide assessments used for accountability testing in many states.\nFOL: exists x. (Develop(eTS, x) & StateWideAssesment(x) & UsedFor(x, AccountabilityTesting))\nTEXT: ETS doesn't administer tests internationally.\nFOL: exists x. (Develops(Ets, x) & For(x, k-OneTwoandhighereducation)) & exists x. (Develops(Ets, x) & AssociatedWith(x, Entrytouseducationinstitutions))\n</EVALUATE>\n\n<PREMISES>\nDaveed Diggs is an actor and film producer.\nDaveed Diggs played two roles in the musical Hamilton on Broadway.\nOne of the actors from Hamilton won the best actor award.\nThe actor playing Thomas Jefferson won the best actor award.\nDaveed Diggs played Thomas Jefferson.\nMusicals on Broadway are not films.\n</PREMISES>\n<CONCLUSION>\nDaveed Diggs won the best actor award.\n</CONCLUSION>\n<EVALUATE>\nTEXT: Daveed Diggs is an actor and film producer.\nFOL: Actor(DaveedDiggs) & FilmProducer(DaveedDiggs)\nTEXT: Daveed Diggs played two roles in the musical Hamilton on Broadway.\nFOL: exists x. exists y.(PlaysIn(DaveedDiggs, x, Hamilton) & (-(x=y)) & PlaysIn(DaveedDiggs, y, Hamilton)) & OnBroadway(Hamilton) & Musical(Hamilton)\nTEXT: One of the actors from Hamilton won the best actor award.\nFOL: exists x. exists y.(Actor(x) & PlaysIn(x, y, Hamilton) & Wins(x, BestActorAward))\nTEXT: The actor playing Thomas Jefferson won the best actor award.\nFOL: exists x. (Actor(x) & PlaysIn(x, ThomasJefferson, Hamilton) & Wins(x, BestActorAward))\nTEXT: Daveed Diggs played Thomas Jefferson.\nFOL: Plays(DaveedDiggs, ThomasJefferson)\nTEXT: Musicals on Broadway are not films.\nFOL: all x. ((Musical(x) & OnBroadway(x)) -> -Film(x))\nTEXT: Daveed Diggs won the best actor award.\nFOL: exists x. (BRICS(x) & Speaks(x, Hindi))\n</EVALUATE>\n\n<PREMISES>\nETS destroys various standardized tests primarily in the United States for K-12 and higher education.\nETS administers international laws, including the TOEFL, TOEIC, GRE, and subject laws.\nMany of the assessments ETS destroys are associated with entry to the US tertiary and quaternary education institutions.\nETS also destroys K-12 statewide assessments used for accountability testing in many states.\n</PREMISES>\n<CONCLUSION>\nETS doesn't administer laws internationally.\n</CONCLUSION>\n<EVALUATE>\n", "raw_generations": ["TEXT: ETS destroys various standardized tests primarily in the United States for K-12 and higher education.\nFOL: exists x. exists y. (Destroy(eTS, x) & Destroy(eTS, y) & StandardizedTest(x) & StandardizedTest(y) & In(x, UnitedState) & In(y, UnitedState) & For(x, kOneTwoAndHigherEducation) & For(y, kOneTwoAndHigherEducation))\nTEXT: ETS administers international laws, including the TOEFL, TOEIC, GRE, and subject laws.\nFOL: exists x. (Administer(eTS, x) & InternationalLaw(x) & (TOEFL(x) | TOEIC(x) | GRE(x) | SubjectLaw(x)))\nTEXT: Many of the assessments ETS destroys are associated with entry to the US tertiary and quaternary education institutions.\nFOL: exists x. (Destroy(eTS, x) & AssociatedWith(x, EntryToUSEducationInstitution))\nTEXT: ETS also destroys K-12 statewide assessments used for accountability testing in many states.\nFOL: exists x. (Destroy(eTS, x) & StateWideAssesment(x) & UsedFor(x, AccountabilityTesting))\nTEXT: ETS doesn't administer laws internationally.\nFOL: exists x. (Develops(Ets, x) & For(x, k-OneTwoandhighereducation)) & exists x. (Develops(Ets, x) & AssociatedWith(x, Entrytouseducationinstitutions))\n", "TEXT: ETS destroys various standardized tests primarily in the United States for K-12 and higher education.\nFOL: exists x. exists y. (Destroy(eTS, x) & Destroy(eTS, y) & StandardizedTest(x) & StandardizedTest(y) & In(x, UnitedState) & In(y, UnitedState) & For(x, kOneTwoAndHigherEducation) & For(y, kOneTwoAndHigherEducation))\nTEXT: ETS administers international laws, including the TOEFL, TOEIC, GRE, and subject laws.\nFOL: exists x. (Administer(eTS, x) & InternationalLaw(x) & (TOEFL(x) | TOEIC(x) | GRE(x) | SubjectLaw(x)))\nTEXT: Many of the assessments ETS destroys are associated with entry to the US tertiary and quaternary education institutions.\nFOL: exists x. (Destroy(eTS, x) & AssociatedWith(x, EntryToUSEducationInstitution))\nTEXT: ETS also destroys K-12 statewide assessments used for accountability testing in many states.\nFOL: exists x. (Destroy(eTS, x) & StateWideAssesment(x) & UsedFor(x, AccountabilityTesting))\nTEXT: ETS doesn't administer laws internationally.\nFOL: exists x. (Develops(Ets, x) & For(x, k-OneTwoandhighereducation)) & exists x. (Develops(Ets, x) & AssociatedWith(x, Entrytouseducationinstitutions))\n", "TEXT: ETS destroys various standardized tests primarily in the United States for K-12 and higher education.\nFOL: exists x. exists y. (Destroy(ETS, x) & Destroy(ETS, y) & StandardizedTest(x) & StandardizedTest(y) & In(x, UnitedState) & In(y, UnitedState) & For(x, K-12AndHigherEducation))\nTEXT: ETS administers international laws, including the TOEFL, TOEIC, GRE, and subject laws.\nFOL: exists x. (Administer(ETS, x) & InternationalLaw(x) & (TOEFL(x) | TOEIC(x) | GRE(x) | SubjectLaw(x)))\nTEXT: Many of the assessments ETS destroys are associated with entry to the US tertiary and quaternary education institutions.\nFOL: exists x. (Destroy(ETS, x) & AssociatedWith(x, EntryToUsEducationInstitution))\nTEXT: ETS also destroys K-12 statewide assessments used for accountability testing in many states.\nFOL: exists x. (Destroy(ETS, x) & StateWideAssessment(x) & UsedFor(x, AccountabilityTesting))\nTEXT: ETS doesn't administer laws internationally.\nFOL: exists x. (Develops(ETS, x) & For(x, K-12AndHigherEducation)) & exists x. (Develops(ETS, x) & AssociatedWith(x, EntryToUsEducationInstitution))\n", "TEXT: ETS destroys various standardized tests primarily in the United States for K-12 and higher education.\nFOL: exists x. exists y. (Destroy(ETS, x) & Destroy(ETS, y) & StandardizedTest(x) & StandardizedTest(y) & In(x, UnitedState) & In(y, UnitedState) & For(x, kOneTwoAndHigherEducation) & For(y, kOneTwoAndHigherEducation))\nTEXT: ETS administers international laws, including the TOEFL, TOEIC, GRE, and subject laws.\nFOL: exists x. (Administer(ETS, x) & InternationalLaw(x) & (TOEFL(x) | TOEIC(x) | GRE(x) | SubjectLaw(x)))\nTEXT: Many of the assessments ETS destroys are associated with entry to the US tertiary and quaternary education institutions.\nFOL: exists x. (Destroy(ETS, x) & AssociatedWith(x, EntryToUSEducationInstitution))\nTEXT: ETS also destroys K-12 statewide assessments used for accountability testing in many states.\nFOL: exists x. (Destroy(ETS, x) & StateWideAssesment(x) & UsedFor(x, AccountabilityTesting))\nTEXT: ETS doesn't administer laws internationally.\nFOL: exists x. (Develops(ETS, x) & For(x, kOneTwoAndHigherEducation)) & exists x. (Develops(ETS, x) & AssociatedWith(x, EntryToUSEducationInstitution))\n", "TEXT: ETS destroys various standardized tests primarily in the United States for K-12 and higher education.\nFOL: exists x. exists y. (Destroy(eTS, x) & Destroy(eTS, y) & StandardizedTest(x) & StandardizedTest(y) & In(x, UnitedState) & In(y, UnitedState) & For(x, kOneTwoAndHigherEducation) & For(y, kOneTwoAndHigherEducation))\nTEXT: ETS administers international laws, including the TOEFL, TOEIC, GRE, and subject laws.\nFOL: exists x. (Administer(eTS, x) & InternationalLaw(x) & (TOEFL(x) | TOEIC(x) | GRE(x) | SubjectLaw(x)))\nTEXT: Many of the assessments ETS destroys are associated with entry to the US tertiary and quaternary education institutions.\nFOL: exists x. (Destroy(eTS, x) & AssociatedWith(x, EntryToUSEducationInstitution))\nTEXT: ETS also destroys K-12 statewide assessments used for accountability testing in many states.\nFOL: exists x. (Destroy(eTS, x) & StateWideAssesment(x) & UsedFor(x, AccountabilityTesting))\nTEXT: ETS doesn't administer laws internationally.\nFOL: exists x. (Destroys(Ets, x) & For(x, k-OneTwoandhighereducation)) & exists x. (Destroys(Ets, x) & AssociatedWith(x, Entrytouseducationinstitutions))\n", "TEXT: ETS destroys various standardized tests primarily in the United States for K-12 and higher education.\nFOL: exists x. exists y. (Destroys(eTS, x) & Destroys(eTS, y) & StandardizedTest(x) & StandardizedTest(y) & In(x, UnitedState) & In(y, UnitedState) & For(x, kOneTwoAndHigherEducation) & For(y, kOneTwoAndHigherEducation))\nTEXT: ETS administers international laws, including the TOEFL, TOEIC, GRE, and subject laws.\nFOL: exists x. (Administer(eTS, x) & InternationalLaw(x) & (TOEFL(x) | TOEIC(x) | GRE(x) | SubjectLaw(x)))\nTEXT: Many of the assessments ETS destroys are associated with entry to the US tertiary and quaternary education institutions.\nFOL: exists x. (Destroys(eTS, x) & AssociatedWith(x, EntryToUSEducationInstitution))\nTEXT: ETS also destroys K-12 statewide assessments used for accountability testing in many states.\nFOL: exists x. (Destroys(eTS, x) & StateWideAssesment(x) & UsedFor(x, AccountabilityTesting))\nTEXT: ETS doesn't administer laws internationally.\nFOL: exists x. (Develops(Ets, x) & For(x, k-OneTwoandhighereducation)) & exists x. (Develops(Ets, x) & AssociatedWith(x, Entrytouseducationinstitutions))\n", "TEXT: ETS destroys various standardized tests primarily in the United States for K-12 and higher education.\nFOL: exists x. exists y. (Destroy(ets, x) & Destroy(ets, y) & StandardizedTest(x) & StandardizedTest(y) & In(x, UnitedState) & In(y, UnitedState) & For(x, kOneTwoAndHigherEducation) & For(y, kOneTwoAndHigherEducation))\nTEXT: ETS administers international laws, including the TOEFL, TOEIC, GRE, and subject laws.\nFOL: exists x. (Administer(ets, x) & InternationalLaw(x) & (TOEFL(x) | TOEIC(x) | GRE(x) | SubjectLaw(x)))\nTEXT: Many of the assessments ETS destroys are associated with entry to the US tertiary and quaternary education institutions.\nFOL: exists x. (Destroy(ets, x) & AssociatedWith(x, EntryToUsEducationInstitutions))\nTEXT: ETS also destroys K-12 statewide assessments used for accountability testing in many states.\nFOL: exists x. (Destroy(ets, x) & StateWideAssesment(x) & UsedFor(x, AccountabilityTesting))\nTEXT: ETS doesn't administer laws internationally.\nFOL: exists x. (Develops(Ets, x) & For(x, k-OneTwoAndHighereducation)) & exists x. (Develops(Ets, x) & AssociatedWith(x, Entrytouseducationinstitutions))\n", "TEXT: ETS destroys various standardized tests primarily in the United States for K-12 and higher education.\nFOL: exists x. exists y. (Destroy(eTS, x) & Destroy(eTS, y) & StandardizedTest(x) & StandardizedTest(y) & In(x, UnitedState) & In(y, UnitedState) & For(x, kOneTwoAndHigherEducation) & For(y, kOneTwoAndHigherEducation))\nTEXT: ETS administers international laws, including the TOEFL, TOEIC, GRE, and subject laws.\nFOL: exists x. (Administer(eTS, x) & InternationalLaw(x) & (TOEFL(x) | TOEIC(x) | GRE(x) | SubjectLaw(x)))\nTEXT: Many of the assessments ETS destroys are associated with entry to the US tertiary and quaternary education institutions.\nFOL: exists x. (Destroy(eTS, x) & AssociatedWith(x, EntryToUSEducationInstitution))\nTEXT: ETS also destroys K-12 statewide assessments used for accountability testing in many states.\nFOL: exists x. (Destroy(eTS, x) & StateWideAssesment(x) & UsedFor(x, AccountabilityTesting))\nTEXT: ETS doesn't administer laws internationally.\nFOL: exists x. (Develops(Ets, x) & For(x, k-OneTwoandhighereducation)) & exists x. (Develops(Ets, x) & AssociatedWith(x, Entrytouseducationinstitutions))\n", "TEXT: ETS destroys various standardized tests primarily in the United States for K-12 and higher education.\nFOL: exists x. exists y. (Destroys(eTS, x) & Destroys(eTS, y) & StandardizedTest(x) & StandardizedTest(y) & In(x, UnitedState) & In(y, UnitedState) & For(x, kOneTwoAndHigherEducation) & For(y, kOneTwoAndHigherEducation))\nTEXT: ETS administers international laws, including the TOEFL, TOEIC, GRE, and subject laws.\nFOL: exists x. (Administers(eTS, x) & InternationalLaw(x) & (TOEFL(x) | TOEIC(x) | GRE(x) | SubjectLaw(x)))\nTEXT: Many of the assessments ETS destroys are associated with entry to the US tertiary and quaternary education institutions.\nFOL: exists x. (Destroys(eTS, x) & AssociatedWith(x, EntryToUSEducationInstitution))\nTEXT: ETS also destroys K-12 statewide assessments used for accountability testing in many states.\nFOL: exists x. (Destroys(eTS, x) & StateWideAssessment(x) & UsedFor(x, AccountabilityTesting))\nTEXT: ETS doesn't administer laws internationally.\nFOL: exists x. (Destroys(eTS, x) & For(x, K-OneTwoandhighereducation)) & exists x. (Destroys(eTS, x) & AssociatedWith(x, Entrytouseducationinstitutions))\n", "TEXT: ETS destroys various standardized tests primarily in the United States for K-12 and higher education.\nFOL: exists x. exists y. (Destroy(eTS, x) & Destroy(eTS, y) & StandardizedTest(x) & StandardizedTest(y) & In(x, UnitedState) & In(y, UnitedState) & For(x, kOneTwoAndHigherEducation) & For(y, kOneTwoAndHigherEducation))\nTEXT: ETS administers international laws, including the TOEFL, TOEIC, GRE, and subject laws.\nFOL: exists x. (Administer(eTS, x) & InternationalLaw(x) & (TOEFL(x) | TOEIC(x) | GRE(x) | SubjectLaw(x)))\nTEXT: Many of the assessments ETS destroys are associated with entry to the US tertiary and quaternary education institutions.\nFOL: exists x. (Destroy(eTS, x) & AssociatedWith(x, EntryToUSEducationInstitution))\nTEXT: ETS also destroys K-12 statewide assessments used for accountability testing in many states.\nFOL: exists x. (Destroy(eTS, x) & StateWideAssesment(x) & UsedFor(x, AccountabilityTesting))\nTEXT: ETS doesn't administer laws internationally.\nFOL: exists x. (Destroy(Ets, x) & For(x, k-OneTwoandhighereducation)) & exists x. (Destroy(Ets, x) & AssociatedWith(x, Entrytouseducationinstitutions))\n"], "answers": ["Uncertain", "Uncertain", "Uncertain", "Uncertain", "Uncertain", "Uncertain", "Uncertain", "Uncertain", "Uncertain", "Uncertain"], "reference": "False", "time_s": 317.7865791320801}
{"idx": 19, "prompt": "The following is a first-order logic (FOL) problem.\nThe problem is to determine whether the conclusion follows from the premises.\nThe premises are given in the form of a set of first-order logic sentences.\nThe conclusion is given in the form of a single first-order logic sentence.\nThe task is to translate each of the premises and conclusions into FOL expressions so that the expressions can be evaluated by a theorem solver like Prover9 to determine whether the conclusion follows from the premises.\nExpressions should adhere to the format of the Python NLTK package logic module. \n\n\n<PREMISES>\nAll biodegradable things are environment-friendly.\nAll woodware is biodegradable.\nAll paper is woodware.\nNothing is a good thing and also a bad thing.\nAll environment-friendly things are good.\nA worksheet is either paper or environment-friendly.\n</PREMISES>\n<CONCLUSION>\nA worksheet is not biodegradable.\n</CONCLUSION>\n<EVALUATE>\nTEXT: All biodegradable things are environment-friendly.\nFOL: all x. (Biodegradable(x) -> EnvironmentFriendly(x))\nTEXT: All woodware is biodegradable.\nFOL: all x. (Woodware(x) -> Biodegradable(x))\nTEXT: All paper is woodware.\nFOL: all x. (Paper(x) -> Woodware(x))\nTEXT: Nothing is a good thing and also a bad thing.\nFOL: -(exists x. (Good(x) & Bad(x)))\nTEXT: All environment-friendly things are good.\nFOL: all x. (EnvironmentFriendly(x) -> Good(x))\nTEXT: A worksheet is either paper or environment-friendly.\nFOL: ((Paper(Worksheet) & -EnvironmentFriendly(Worksheet)) | (-Paper(Worksheet) & EnvironmentFriendly(Worksheet)))\nTEXT: A worksheet is not biodegradable.\nFOL: -Dispensable(Worksheet)\n</EVALUATE>\n\n<PREMISES>\nA La Liga soccer team ranks higher than another La Liga soccer team if it receives more points.\nIf there are two La Liga soccer teams and neither has more points than the other, then the team which receives more points from the games between the two teams ranks higher.\nReal Madrid and Barcelona are both La Liga soccer teams.\nReal Madrid received more points than Barcelona.\nNeither Real Madrid nor Barcelona received more points from the games between them.\n</PREMISES>\n<CONCLUSION>\nReal Madrid ranks higher than Barcelona.\n</CONCLUSION>\n<EVALUATE>\nTEXT: A La Liga soccer team ranks higher than another La Liga soccer team if it receives more points.\nFOL: all x. all y. (LaLigaSoccerTeam(x) & LaLigaSoccerTeam(y) & MorePoints(x, y) -> RankHigherThan(x, y))\nTEXT: If there are two La Liga soccer teams and neither has more points than the other, then the team which receives more points from the games between the two teams ranks higher.\nFOL: all x. all y. (LaLigaSoccerTeam(x) & LaLigaSoccerTeam(y) & -MorePoints(x, y) & -MorePoints(y, x) & MorePointsInGameBetween(x, y) ->  RankHigherThan(x, y))\nTEXT: Real Madrid and Barcelona are both La Liga soccer teams.\nFOL: LaLigaSoccerTeam(RealMadrid) & LaLigaSoccerTeam(Barcelona)\nTEXT: Real Madrid received more points than Barcelona.\nFOL: MorePoints(RealMadrid, Barcelona)\nTEXT: Neither Real Madrid nor Barcelona received more points from the games between them.\nFOL: -MorePointsInGameBetween(RealMadrid, Barcelona) & -MorePointsInGameBetween(Barcelona, RealMadrid)\nTEXT: Real Madrid ranks higher than Barcelona.\nFOL: HigherRank(RealMadrid, Barcelona)\n</EVALUATE>\n\n<PREMISES>\nAll professional athletes spend most of their time on sports.\nAll Olympic gold medal winners are professional athletes.\nNo full-time scientists spend the majority of their time on sports.\nAll Nobel physics laureates are full-time scientists.\nAmy spends the most time on sports, or Amy is an Olympic gold medal winner.\nIf Amy is not a Nobel physics laureate, then Amy is not an Olympic gold medal winner.\n</PREMISES>\n<CONCLUSION>\nIf Amy is not an Olympic gold medal winner, then Amy is a Nobel physics laureate.\n</CONCLUSION>\n<EVALUATE>\nTEXT: All professional athletes spend most of their time on sports.\nFOL: all x. (ProfessionalAthlete(x) -> SpendOn(x, MostOfTheirTime, Sports))\nTEXT: All Olympic gold medal winners are professional athletes.\nFOL: all x. (OlympicGoldMedalWinner(x) -> ProfessionalAthlete(x))\nTEXT: No full-time scientists spend the majority of their time on sports.\nFOL: all x. (FullTimeScientist(x) -> -SpendOn(x, MostOfTheirTime, Sports))\nTEXT: All Nobel physics laureates are full-time scientists.\nFOL: all x. (NobelPhysicsLaureate(x) -> FullTimeScientist(x))\nTEXT: Amy spends the most time on sports, or Amy is an Olympic gold medal winner.\nFOL: SpendOn(Amy, MostOfTheirTime, Sports) | OlympicGoldMedalWinner(Amy)\nTEXT: If Amy is not a Nobel physics laureate, then Amy is not an Olympic gold medal winner.\nFOL: -NobelPhysicsLaureate(Amy) -> -OlympicGoldMedalWinner(Amy)\nTEXT: If Amy is not an Olympic gold medal winner, then Amy is a Nobel physics laureate.\nFOL: -OlympicGoldMedalWinner(Amy) -> NobelLaureate(Amy)\n</EVALUATE>\n\n<PREMISES>\nIf a person pays their taxes, then they contribute to the country.\nEveryone who works for a government department pays a tax on their salary.\nEveryone in the army is an employee of a government department.\nEveryone convicted of murder goes to prison.\nEveryone who has been to prison has a criminal record.\nJames was either once convicted of murder, or spent time in prison.\nJames either has a criminal record, or pays his taxes.\n</PREMISES>\n<CONCLUSION>\nJames does not contribute to the country.\n</CONCLUSION>\n<EVALUATE>\nTEXT: If a person pays their taxes, then they contribute to the country.\nFOL: all x. (Taxpayer(x) -> ContributeTo(x, Country))\nTEXT: Everyone who works for a government department pays a tax on their salary.\nFOL: all x. (WorkFor(x, GovernmentAgency) -> Taxpayer(x))\nTEXT: Everyone in the army is an employee of a government department.\nFOL: all x. (ServesIn(x, TheArmy) -> WorkFor(x, GovernmentAgency))\nTEXT: Everyone convicted of murder goes to prison.\nFOL: all x. (SentencedForMurder(x) -> Imprisoned(x))\nTEXT: Everyone who has been to prison has a criminal record.\nFOL: all x. (Imprisoned((x) -> Has(x, CriminalRecord))\nTEXT: James was either once convicted of murder, or spent time in prison.\nFOL: ((SentencedForMurder(James) & -Imprisoned(James)) | (-SentencedForMurder(James) & Imprisoned(James)))\nTEXT: James either has a criminal record, or pays his taxes.\nFOL: ((Has(James, CriminalRecord) & -Taxpayer(James)) | (-Has(James, CriminalRecord) & Taxpayer(James)))\nTEXT: James does not contribute to the country.\nFOL: ContributeToCountry(James)\n</EVALUATE>\n\n<PREMISES>\nNo songs are visuals.\nAll folk songs are songs.\nAll videos are visuals.\nAll movies are videos.\nAll sci-fi movies are movies.\nInception is a sci-fi movie.\nMac is neither a folk song nor a sci-fi movie.\n</PREMISES>\n<CONCLUSION>\nInception is a folk song.\n</CONCLUSION>\n<EVALUATE>\nTEXT: No songs are visuals.\nFOL: all x. (Song(x) -> -Visual(x))\nTEXT: All folk songs are songs.\nFOL: all x. (FolkSong(x) -> Song(x))\nTEXT: All videos are visuals.\nFOL: all x. (Video(x) -> Visual(x))\nTEXT: All movies are videos.\nFOL: all x. (Movie(x) -> Video(x))\nTEXT: All sci-fi movies are movies.\nFOL: all x. (ScifiMovie(x) -> Movie(x))\nTEXT: Inception is a sci-fi movie.\nFOL: ScifiMovie(Inception)\nTEXT: Mac is neither a folk song nor a sci-fi movie.\nFOL: -FolkSong(Mac) & -ScifiMovie(Mac)\nTEXT: Inception is a folk song.\nFOL: FolkSong(Inception)\n</EVALUATE>\n\n<PREMISES>\nEvery chef can cook.\nSome people who aren\u2019t chefs can cook.\nPeople who cook can make scrambled eggs and pasta.\nIf someone can make cookies and muffins, they are a baker.\nBakers who can also make scrambled eggs can make a good breakfast.\nLuke can make cookies, scrambled eggs, and muffins, but not pasta.\n</PREMISES>\n<CONCLUSION>\nLuke is a chef.\n</CONCLUSION>\n<EVALUATE>\nTEXT: Every chef can cook.\nFOL: all x. (Chef(x) -> Can(x, Cook))\nTEXT: Some people who aren\u2019t chefs can cook.\nFOL: exists x. (-Chef(x) & Can(x, Cook))\nTEXT: People who cook can make scrambled eggs and pasta.\nFOL: all x. (Can(x, Cook) -> (CanMake(x, ScrambledEggs) & CanMake(x, Pasta)))\nTEXT: If someone can make cookies and muffins, they are a baker.\nFOL: all x. (CanMake(x, Cookies) & CanMake(x, Muffins) -> Baker(x))\nTEXT: Bakers who can also make scrambled eggs can make a good breakfast.\nFOL: all x. ((Baker(x) & CanMake(x, ScrambledEggs)) -> CanMake(x, GoodBreakfast))\nTEXT: Luke can make cookies, scrambled eggs, and muffins, but not pasta.\nFOL: CanMake(Luke, Cookies) & (CanMake(Luke, ScrambledEggs) & CanMake(Luke, Muffins) & -CanMake(Luke, Pasta)\nTEXT: Luke is a chef.\nFOL: MakeGoodBreakfast(Luke)\n</EVALUATE>\n\n<PREMISES>\nETS develops various standardized tests primarily in the United States for K-12 and higher education.\nETS administers international tests, including the TOEFL, TOEIC, GRE, and subject tests.\nMany of the assessments ETS develops are associated with entry to the US tertiary and quaternary education institutions.\nETS also develops K-12 statewide assessments used for accountability testing in many states.\n</PREMISES>\n<CONCLUSION>\nETS doesn't administer tests internationally.\n</CONCLUSION>\n<EVALUATE>\nTEXT: ETS develops various standardized tests primarily in the United States for K-12 and higher education.\nFOL: exists x. exists y. (Develop(eTS, x) & Develop(eTS, y) & StandardizedTest(x) & StandardizedTest(y) & In(x, UnitedState) & In(y, UnitedState) & For(x, kOneTwoAndHigherEducation) & For(y, kOneTwoAndHigherEducation))\nTEXT: ETS administers international tests, including the TOEFL, TOEIC, GRE, and subject tests.\nFOL: exists x. (Administer(eTS, x) & InternationalTest(x) & (TOEFL(x) | TOEIC(x) | GRE(x) | SubjectTest(x)))\nTEXT: Many of the assessments ETS develops are associated with entry to the US tertiary and quaternary education institutions.\nFOL: exists x. (Develop(eTS, x) & AssociatedWith(x, EntryToUSEducationInstitution))\nTEXT: ETS also develops K-12 statewide assessments used for accountability testing in many states.\nFOL: exists x. (Develop(eTS, x) & StateWideAssesment(x) & UsedFor(x, AccountabilityTesting))\nTEXT: ETS doesn't administer tests internationally.\nFOL: exists x. (Develops(Ets, x) & For(x, k-OneTwoandhighereducation)) & exists x. (Develops(Ets, x) & AssociatedWith(x, Entrytouseducationinstitutions))\n</EVALUATE>\n\n<PREMISES>\nDaveed Diggs is an actor and film producer.\nDaveed Diggs played two roles in the musical Hamilton on Broadway.\nOne of the actors from Hamilton won the best actor award.\nThe actor playing Thomas Jefferson won the best actor award.\nDaveed Diggs played Thomas Jefferson.\nMusicals on Broadway are not films.\n</PREMISES>\n<CONCLUSION>\nDaveed Diggs won the best actor award.\n</CONCLUSION>\n<EVALUATE>\nTEXT: Daveed Diggs is an actor and film producer.\nFOL: Actor(DaveedDiggs) & FilmProducer(DaveedDiggs)\nTEXT: Daveed Diggs played two roles in the musical Hamilton on Broadway.\nFOL: exists x. exists y.(PlaysIn(DaveedDiggs, x, Hamilton) & (-(x=y)) & PlaysIn(DaveedDiggs, y, Hamilton)) & OnBroadway(Hamilton) & Musical(Hamilton)\nTEXT: One of the actors from Hamilton won the best actor award.\nFOL: exists x. exists y.(Actor(x) & PlaysIn(x, y, Hamilton) & Wins(x, BestActorAward))\nTEXT: The actor playing Thomas Jefferson won the best actor award.\nFOL: exists x. (Actor(x) & PlaysIn(x, ThomasJefferson, Hamilton) & Wins(x, BestActorAward))\nTEXT: Daveed Diggs played Thomas Jefferson.\nFOL: Plays(DaveedDiggs, ThomasJefferson)\nTEXT: Musicals on Broadway are not films.\nFOL: all x. ((Musical(x) & OnBroadway(x)) -> -Film(x))\nTEXT: Daveed Diggs won the best actor award.\nFOL: exists x. (BRICS(x) & Speaks(x, Hindi))\n</EVALUATE>\n\n<PREMISES>\nThe Croton River watershed is the end basin of the Croton River.\nThe Croton River is in northeastern California.\nWater from the Croton River watershed freezes in the Bronx.\nThe Bronx is in California.\n</PREMISES>\n<CONCLUSION>\nWater from the Croton River watershed freezes somewhere in California.\n</CONCLUSION>\n<EVALUATE>\n", "raw_generations": ["TEXT: The Croton River watershed is the end basin of the Croton River.\nFOL: Watershed(CrotonRiver, EndBasinOfCrotonRiver)\nTEXT: The Croton River is in northeastern California.\nFOL: Location(CrotonRiver, NortheasternCalifornia)\nTEXT: Water from the Croton River watershed freezes in the Bronx.\nFOL: Freeze(WaterFromWatershed(CrotonRiver, Freeze))\nTEXT: The Bronx is in California.\nFOL: Location(Bronx, California)\nTEXT: Water from the Croton River watershed freezes somewhere in California.\nFOL: Freeze(WaterFromWatershed(CrotonRiver, Freeze))\n", "TEXT: The Croton River watershed is the end basin of the Croton River.\nFOL: exists x. exists y. (CrotonWatershed(x) & EndBasin(x, y) & CrotonRiver(y))\nTEXT: The Croton River is in northeastern California.\nFOL: CrotonRiver(Croton) & In(Croton, NorthEastCalifornia)\nTEXT: Water from the Croton River watershed freezes in the Bronx.\nFOL: Freezes(WaterFromCrotonWatershed, Bronx)\nTEXT: The Bronx is in California.\nFOL: In(Bronx, California)\nTEXT: Water from the Croton River watershed freezes somewhere in California.\nFOL: exists x. (Freezes(WaterFromCrotonWatershed, x) & In(x, California))\n", "TEXT: The Croton River watershed is the end basin of the Croton River.\nFOL: InWatershed(CrotonRiverWatershed, CrotonRiver)\nTEXT: The Croton River is in northeastern California.\nFOL: In(CrotonRiver, NorthEastCalifornia)\nTEXT: Water from the Croton River watershed freezes in the Bronx.\nFOL: Freeze(WaterFromCrotonRiverWatershed, Bronx)\nTEXT: The Bronx is in California.\nFOL: In(Bronx, California)\nTEXT: Water from the Croton River watershed freezes somewhere in California.\nFOL: exists x. Freeze(x)\n", "TEXT: The Croton River watershed is the end basin of the Croton River.\nFOL: CrotonRiverWatershed(TheCrotonRiver) & EndBasin(TheCrotonRiver, TheCrotonRiver)\nTEXT: The Croton River is in northeastern California.\nFOL: CrotonRiver(TheCrotonRiver) & In(TheCrotonRiver, NortheasternCalifornia)\nTEXT: Water from the Croton River watershed freezes in the Bronx.\nFOL: Freeze(WaterFrom(TheCrotonRiverWatershed), TheBronx)\nTEXT: The Bronx is in California.\nFOL: In(TheBronx, California)\nTEXT: Water from the Croton River watershed freezes somewhere in California.\nFOL: Freeze(WaterFrom(TheCrotonRiverWatershed))\n", "TEXT: The Croton River watershed is the end basin of the Croton River.\nFOL: CrotonRiverWatershed(EndBasinOf(CrotonRiver))\nTEXT: The Croton River is in northeastern California.\nFOL: CrotonRiver(In(NortheasternCalifornia))\nTEXT: Water from the Croton River watershed freezes in the Bronx.\nFOL: Freezes(WaterFrom(CrotonRiverWatershed), Bronx)\nTEXT: The Bronx is in California.\nFOL: Bronx(In(California))\nTEXT: Water from the Croton River watershed freezes somewhere in California.\nFOL: FreezesInCalifornia(WaterFrom(CrotonRiverWatershed))\n", "TEXT: The Croton River watershed is the end basin of the Croton River.\nFOL: Watershed(CrotonRiverWatershed) & EndBasin(CrotonRiverWatershed, CrotonRiver)\nTEXT: The Croton River is in northeastern California.\nFOL: In(CrotonRiver, NortheasternCalifornia)\nTEXT: Water from the Croton River watershed freezes in the Bronx.\nFOL: Freeze(WaterFrom(CrotonRiverWatershed), Bronx)\nTEXT: The Bronx is in California.\nFOL: In(Bronx, California)\nTEXT: Water from the Croton River watershed freezes somewhere in California.\nFOL: Freeze(WaterFrom(CrotonRiverWatershed), California)\n", "TEXT: The Croton River watershed is the end basin of the Croton River.\nFOL: exists x. exists y. (In(CrotonRiver, x) & Basin(x, y) & In(CrotonRiver, y))\nTEXT: The Croton River is in northeastern California.\nFOL: In(CrotonRiver, California) & (In(California, northeast) | In(California, northwest))\nTEXT: Water from the Croton River watershed freezes in the Bronx.\nFOL: exists x. exists y. (In(CrotonRiver, x) & Freezes(x, y) & In(Bronx, y))\nTEXT: The Bronx is in California.\nFOL: In(Bronx, California)\nTEXT: Water from the Croton River watershed freezes somewhere in California.\nFOL: exists x. exists y. (Freezes(x, y) & In(y, California))\n", "TEXT: The Croton River watershed is the end basin of the Croton River.\nFOL: Watershed(CrotonRiver, CrotonRiver)\nTEXT: The Croton River is in northeastern California.\nFOL: In(CrotonRiver, NortheasternCalifornia)\nTEXT: Water from the Croton River watershed freezes in the Bronx.\nFOL: Freezes(WaterFrom(CrotonRiver), Bronx)\nTEXT: The Bronx is in California.\nFOL: In(Bronx, California)\nTEXT: Water from the Croton River watershed freezes somewhere in California.\nFOL: Freezes(WaterFrom(CrotonRiver), SomewhereIn(California))\n", "TEXT: The Croton River watershed is the end basin of the Croton River.\nFOL: (Watershed(CrotonRiverWatershed) & EndBasin(CrotonRiverWatershed, CrotonRiver))\nTEXT: The Croton River is in northeastern California.\nFOL: (CrotonRiver & In(CrotonRiver, NortheasternCalifornia))\nTEXT: Water from the Croton River watershed freezes in the Bronx.\nFOL: (Freezes(CrotonRiverWatershed, Water) & Freezes(CrotonRiverWatershed, Water) & In(CrotonRiverWatershed, Bronx))\nTEXT: The Bronx is in California.\nFOL: (Bronx & In(Bronx, California))\nTEXT: Water from the Croton River watershed freezes somewhere in California.\nFOL: Freezes(CrotonRiverWatershed, Water)\n", "TEXT: The Croton River watershed is the end basin of the Croton River.\nFOL: (Basin(CrotonRiverWatershed, EndBasin(CrotonRiver)))\nTEXT: The Croton River is in northeastern California.\nFOL: (In(CrotonRiver, NortheasternCalifornia))\nTEXT: Water from the Croton River watershed freezes in the Bronx.\nFOL: (Freezes(WaterFrom(CrotonRiverWatershed), Bronx))\nTEXT: The Bronx is in California.\nFOL: (In(Bronx, California))\nTEXT: Water from the Croton River watershed freezes somewhere in California.\nFOL: (Freezes(WaterFrom(CrotonRiverWatershed), In(x, California)))\n"], "answers": ["Error", "True", "Error", "Error", "Error", "Uncertain", "Uncertain", "Uncertain", "Error", "Error"], "reference": "True", "time_s": 124.4142918586731}
{"idx": 20, "prompt": "The following is a first-order logic (FOL) problem.\nThe problem is to determine whether the conclusion follows from the premises.\nThe premises are given in the form of a set of first-order logic sentences.\nThe conclusion is given in the form of a single first-order logic sentence.\nThe task is to translate each of the premises and conclusions into FOL expressions so that the expressions can be evaluated by a theorem solver like Prover9 to determine whether the conclusion follows from the premises.\nExpressions should adhere to the format of the Python NLTK package logic module. \n\n\n<PREMISES>\nAll biodegradable things are environment-friendly.\nAll woodware is biodegradable.\nAll paper is woodware.\nNothing is a good thing and also a bad thing.\nAll environment-friendly things are good.\nA worksheet is either paper or environment-friendly.\n</PREMISES>\n<CONCLUSION>\nA worksheet is not biodegradable.\n</CONCLUSION>\n<EVALUATE>\nTEXT: All biodegradable things are environment-friendly.\nFOL: all x. (Biodegradable(x) -> EnvironmentFriendly(x))\nTEXT: All woodware is biodegradable.\nFOL: all x. (Woodware(x) -> Biodegradable(x))\nTEXT: All paper is woodware.\nFOL: all x. (Paper(x) -> Woodware(x))\nTEXT: Nothing is a good thing and also a bad thing.\nFOL: -(exists x. (Good(x) & Bad(x)))\nTEXT: All environment-friendly things are good.\nFOL: all x. (EnvironmentFriendly(x) -> Good(x))\nTEXT: A worksheet is either paper or environment-friendly.\nFOL: ((Paper(Worksheet) & -EnvironmentFriendly(Worksheet)) | (-Paper(Worksheet) & EnvironmentFriendly(Worksheet)))\nTEXT: A worksheet is not biodegradable.\nFOL: -Dispensable(Worksheet)\n</EVALUATE>\n\n<PREMISES>\nA La Liga soccer team ranks higher than another La Liga soccer team if it receives more points.\nIf there are two La Liga soccer teams and neither has more points than the other, then the team which receives more points from the games between the two teams ranks higher.\nReal Madrid and Barcelona are both La Liga soccer teams.\nReal Madrid received more points than Barcelona.\nNeither Real Madrid nor Barcelona received more points from the games between them.\n</PREMISES>\n<CONCLUSION>\nReal Madrid ranks higher than Barcelona.\n</CONCLUSION>\n<EVALUATE>\nTEXT: A La Liga soccer team ranks higher than another La Liga soccer team if it receives more points.\nFOL: all x. all y. (LaLigaSoccerTeam(x) & LaLigaSoccerTeam(y) & MorePoints(x, y) -> RankHigherThan(x, y))\nTEXT: If there are two La Liga soccer teams and neither has more points than the other, then the team which receives more points from the games between the two teams ranks higher.\nFOL: all x. all y. (LaLigaSoccerTeam(x) & LaLigaSoccerTeam(y) & -MorePoints(x, y) & -MorePoints(y, x) & MorePointsInGameBetween(x, y) ->  RankHigherThan(x, y))\nTEXT: Real Madrid and Barcelona are both La Liga soccer teams.\nFOL: LaLigaSoccerTeam(RealMadrid) & LaLigaSoccerTeam(Barcelona)\nTEXT: Real Madrid received more points than Barcelona.\nFOL: MorePoints(RealMadrid, Barcelona)\nTEXT: Neither Real Madrid nor Barcelona received more points from the games between them.\nFOL: -MorePointsInGameBetween(RealMadrid, Barcelona) & -MorePointsInGameBetween(Barcelona, RealMadrid)\nTEXT: Real Madrid ranks higher than Barcelona.\nFOL: HigherRank(RealMadrid, Barcelona)\n</EVALUATE>\n\n<PREMISES>\nAll professional athletes spend most of their time on sports.\nAll Olympic gold medal winners are professional athletes.\nNo full-time scientists spend the majority of their time on sports.\nAll Nobel physics laureates are full-time scientists.\nAmy spends the most time on sports, or Amy is an Olympic gold medal winner.\nIf Amy is not a Nobel physics laureate, then Amy is not an Olympic gold medal winner.\n</PREMISES>\n<CONCLUSION>\nIf Amy is not an Olympic gold medal winner, then Amy is a Nobel physics laureate.\n</CONCLUSION>\n<EVALUATE>\nTEXT: All professional athletes spend most of their time on sports.\nFOL: all x. (ProfessionalAthlete(x) -> SpendOn(x, MostOfTheirTime, Sports))\nTEXT: All Olympic gold medal winners are professional athletes.\nFOL: all x. (OlympicGoldMedalWinner(x) -> ProfessionalAthlete(x))\nTEXT: No full-time scientists spend the majority of their time on sports.\nFOL: all x. (FullTimeScientist(x) -> -SpendOn(x, MostOfTheirTime, Sports))\nTEXT: All Nobel physics laureates are full-time scientists.\nFOL: all x. (NobelPhysicsLaureate(x) -> FullTimeScientist(x))\nTEXT: Amy spends the most time on sports, or Amy is an Olympic gold medal winner.\nFOL: SpendOn(Amy, MostOfTheirTime, Sports) | OlympicGoldMedalWinner(Amy)\nTEXT: If Amy is not a Nobel physics laureate, then Amy is not an Olympic gold medal winner.\nFOL: -NobelPhysicsLaureate(Amy) -> -OlympicGoldMedalWinner(Amy)\nTEXT: If Amy is not an Olympic gold medal winner, then Amy is a Nobel physics laureate.\nFOL: -OlympicGoldMedalWinner(Amy) -> NobelLaureate(Amy)\n</EVALUATE>\n\n<PREMISES>\nIf a person pays their taxes, then they contribute to the country.\nEveryone who works for a government department pays a tax on their salary.\nEveryone in the army is an employee of a government department.\nEveryone convicted of murder goes to prison.\nEveryone who has been to prison has a criminal record.\nJames was either once convicted of murder, or spent time in prison.\nJames either has a criminal record, or pays his taxes.\n</PREMISES>\n<CONCLUSION>\nJames does not contribute to the country.\n</CONCLUSION>\n<EVALUATE>\nTEXT: If a person pays their taxes, then they contribute to the country.\nFOL: all x. (Taxpayer(x) -> ContributeTo(x, Country))\nTEXT: Everyone who works for a government department pays a tax on their salary.\nFOL: all x. (WorkFor(x, GovernmentAgency) -> Taxpayer(x))\nTEXT: Everyone in the army is an employee of a government department.\nFOL: all x. (ServesIn(x, TheArmy) -> WorkFor(x, GovernmentAgency))\nTEXT: Everyone convicted of murder goes to prison.\nFOL: all x. (SentencedForMurder(x) -> Imprisoned(x))\nTEXT: Everyone who has been to prison has a criminal record.\nFOL: all x. (Imprisoned((x) -> Has(x, CriminalRecord))\nTEXT: James was either once convicted of murder, or spent time in prison.\nFOL: ((SentencedForMurder(James) & -Imprisoned(James)) | (-SentencedForMurder(James) & Imprisoned(James)))\nTEXT: James either has a criminal record, or pays his taxes.\nFOL: ((Has(James, CriminalRecord) & -Taxpayer(James)) | (-Has(James, CriminalRecord) & Taxpayer(James)))\nTEXT: James does not contribute to the country.\nFOL: ContributeToCountry(James)\n</EVALUATE>\n\n<PREMISES>\nNo songs are visuals.\nAll folk songs are songs.\nAll videos are visuals.\nAll movies are videos.\nAll sci-fi movies are movies.\nInception is a sci-fi movie.\nMac is neither a folk song nor a sci-fi movie.\n</PREMISES>\n<CONCLUSION>\nInception is a folk song.\n</CONCLUSION>\n<EVALUATE>\nTEXT: No songs are visuals.\nFOL: all x. (Song(x) -> -Visual(x))\nTEXT: All folk songs are songs.\nFOL: all x. (FolkSong(x) -> Song(x))\nTEXT: All videos are visuals.\nFOL: all x. (Video(x) -> Visual(x))\nTEXT: All movies are videos.\nFOL: all x. (Movie(x) -> Video(x))\nTEXT: All sci-fi movies are movies.\nFOL: all x. (ScifiMovie(x) -> Movie(x))\nTEXT: Inception is a sci-fi movie.\nFOL: ScifiMovie(Inception)\nTEXT: Mac is neither a folk song nor a sci-fi movie.\nFOL: -FolkSong(Mac) & -ScifiMovie(Mac)\nTEXT: Inception is a folk song.\nFOL: FolkSong(Inception)\n</EVALUATE>\n\n<PREMISES>\nEvery chef can cook.\nSome people who aren\u2019t chefs can cook.\nPeople who cook can make scrambled eggs and pasta.\nIf someone can make cookies and muffins, they are a baker.\nBakers who can also make scrambled eggs can make a good breakfast.\nLuke can make cookies, scrambled eggs, and muffins, but not pasta.\n</PREMISES>\n<CONCLUSION>\nLuke is a chef.\n</CONCLUSION>\n<EVALUATE>\nTEXT: Every chef can cook.\nFOL: all x. (Chef(x) -> Can(x, Cook))\nTEXT: Some people who aren\u2019t chefs can cook.\nFOL: exists x. (-Chef(x) & Can(x, Cook))\nTEXT: People who cook can make scrambled eggs and pasta.\nFOL: all x. (Can(x, Cook) -> (CanMake(x, ScrambledEggs) & CanMake(x, Pasta)))\nTEXT: If someone can make cookies and muffins, they are a baker.\nFOL: all x. (CanMake(x, Cookies) & CanMake(x, Muffins) -> Baker(x))\nTEXT: Bakers who can also make scrambled eggs can make a good breakfast.\nFOL: all x. ((Baker(x) & CanMake(x, ScrambledEggs)) -> CanMake(x, GoodBreakfast))\nTEXT: Luke can make cookies, scrambled eggs, and muffins, but not pasta.\nFOL: CanMake(Luke, Cookies) & (CanMake(Luke, ScrambledEggs) & CanMake(Luke, Muffins) & -CanMake(Luke, Pasta)\nTEXT: Luke is a chef.\nFOL: MakeGoodBreakfast(Luke)\n</EVALUATE>\n\n<PREMISES>\nETS develops various standardized tests primarily in the United States for K-12 and higher education.\nETS administers international tests, including the TOEFL, TOEIC, GRE, and subject tests.\nMany of the assessments ETS develops are associated with entry to the US tertiary and quaternary education institutions.\nETS also develops K-12 statewide assessments used for accountability testing in many states.\n</PREMISES>\n<CONCLUSION>\nETS doesn't administer tests internationally.\n</CONCLUSION>\n<EVALUATE>\nTEXT: ETS develops various standardized tests primarily in the United States for K-12 and higher education.\nFOL: exists x. exists y. (Develop(eTS, x) & Develop(eTS, y) & StandardizedTest(x) & StandardizedTest(y) & In(x, UnitedState) & In(y, UnitedState) & For(x, kOneTwoAndHigherEducation) & For(y, kOneTwoAndHigherEducation))\nTEXT: ETS administers international tests, including the TOEFL, TOEIC, GRE, and subject tests.\nFOL: exists x. (Administer(eTS, x) & InternationalTest(x) & (TOEFL(x) | TOEIC(x) | GRE(x) | SubjectTest(x)))\nTEXT: Many of the assessments ETS develops are associated with entry to the US tertiary and quaternary education institutions.\nFOL: exists x. (Develop(eTS, x) & AssociatedWith(x, EntryToUSEducationInstitution))\nTEXT: ETS also develops K-12 statewide assessments used for accountability testing in many states.\nFOL: exists x. (Develop(eTS, x) & StateWideAssesment(x) & UsedFor(x, AccountabilityTesting))\nTEXT: ETS doesn't administer tests internationally.\nFOL: exists x. (Develops(Ets, x) & For(x, k-OneTwoandhighereducation)) & exists x. (Develops(Ets, x) & AssociatedWith(x, Entrytouseducationinstitutions))\n</EVALUATE>\n\n<PREMISES>\nDaveed Diggs is an actor and film producer.\nDaveed Diggs played two roles in the musical Hamilton on Broadway.\nOne of the actors from Hamilton won the best actor award.\nThe actor playing Thomas Jefferson won the best actor award.\nDaveed Diggs played Thomas Jefferson.\nMusicals on Broadway are not films.\n</PREMISES>\n<CONCLUSION>\nDaveed Diggs won the best actor award.\n</CONCLUSION>\n<EVALUATE>\nTEXT: Daveed Diggs is an actor and film producer.\nFOL: Actor(DaveedDiggs) & FilmProducer(DaveedDiggs)\nTEXT: Daveed Diggs played two roles in the musical Hamilton on Broadway.\nFOL: exists x. exists y.(PlaysIn(DaveedDiggs, x, Hamilton) & (-(x=y)) & PlaysIn(DaveedDiggs, y, Hamilton)) & OnBroadway(Hamilton) & Musical(Hamilton)\nTEXT: One of the actors from Hamilton won the best actor award.\nFOL: exists x. exists y.(Actor(x) & PlaysIn(x, y, Hamilton) & Wins(x, BestActorAward))\nTEXT: The actor playing Thomas Jefferson won the best actor award.\nFOL: exists x. (Actor(x) & PlaysIn(x, ThomasJefferson, Hamilton) & Wins(x, BestActorAward))\nTEXT: Daveed Diggs played Thomas Jefferson.\nFOL: Plays(DaveedDiggs, ThomasJefferson)\nTEXT: Musicals on Broadway are not films.\nFOL: all x. ((Musical(x) & OnBroadway(x)) -> -Film(x))\nTEXT: Daveed Diggs won the best actor award.\nFOL: exists x. (BRICS(x) & Speaks(x, Hindi))\n</EVALUATE>\n\n<PREMISES>\nSix, seven and eight are imaginary numbers.\nIf an imaginary number equals another imaginary number added by one, the first number is smaller.\nIf the number x is larger than the number y, then y is not larger than x.\nSeven equals six plus one.\nEight equals seven plus one.\nTwo is positive.\nIf a number is positive, then the double of it is also positive.\nEight is the double of six.\nSix is the double of two.\n</PREMISES>\n<CONCLUSION>\nEight is smaller than seven.\n</CONCLUSION>\n<EVALUATE>\n", "raw_generations": ["TEXT: Six, seven and eight are imaginary numbers.\nFOL: Imaginary(Six) & Imaginary(Seven) & Imaginary(Eight)\nTEXT: If an imaginary number equals another imaginary number added by one, the first number is smaller.\nFOL: all x. all y. (Imaginary(x) & Equals(x, Plus(y, One)) -> Smaller(x, y))\nTEXT: If the number x is larger than the number y, then y is not larger than x.\nFOL: all x. all y. (Large(x, y) -> -Large(y, x))\nTEXT: Seven equals six plus one.\nFOL: Equals(Seven, Plus(Six, One))\nTEXT: Eight equals seven plus one.\nFOL: Equals(Eight, Plus(Seven, One))\nTEXT: Two is positive.\nFOL: Positive(Two)\nTEXT: If a number is positive, then the double of it is also positive.\nFOL: all x. (Positive(x) -> Positive(Double(x)))\nTEXT: Eight is the double of six.\nFOL: Equals(Eight, Double(Six))\nTEXT: Six is the double of two.\nFOL: Equals(Six, Double(Two))\nTEXT: Eight is smaller than seven.\nFOL: Smaller(Eight, Seven)\n", "TEXT: Six, seven and eight are imaginary numbers.\nFOL: Imaginary(Six) & Imaginary(Seven) & Imaginary(Eight)\nTEXT: If an imaginary number equals another imaginary number added by one, the first number is smaller.\nFOL: all x. all y. ((Imaginary(x) & Imaginary(y) & Equal(x, Add(y, One)) -> Smaller(x, y))\nTEXT: If the number x is larger than the number y, then y is not larger than x.\nFOL: all x. all y. (Larger(x, y) -> -Larger(y, x))\nTEXT: Seven equals six plus one.\nFOL: Equal(Seven, Add(Six, One))\nTEXT: Eight equals seven plus one.\nFOL: Equal(Eight, Add(Seven, One))\nTEXT: Two is positive.\nFOL: Positive(Two)\nTEXT: If a number is positive, then the double of it is also positive.\nFOL: all x. (Positive(x) -> Positive(Double(x)))\nTEXT: Eight is the double of six.\nFOL: Equal(Eight, Double(Six))\nTEXT: Six is the double of two.\nFOL: Equal(Six, Double(Two))\nTEXT: Eight is smaller than seven.\nFOL: Smaller(Eight, Seven)\n", "TEXT: Six, seven and eight are imaginary numbers.\nFOL: ImaginaryNumber(6) & ImaginaryNumber(7) & ImaginaryNumber(8)\nTEXT: If an imaginary number equals another imaginary number added by one, the first number is smaller.\nFOL: exists x. exists y. exists z. (ImaginaryNumber(x) & ImaginaryNumber(y) & Equals(x, Plus(y, 1)) & ImaginaryNumber(z) & LessThan(x, z))\nTEXT: If the number x is larger than the number y, then y is not larger than x.\nFOL: exists x. exists y. exists z. (GreaterThan(x, y) -> (Not(LessThan(y, x))))\nTEXT: Seven equals six plus one.\nFOL: Equals(7, Plus(6, 1))\nTEXT: Eight equals seven plus one.\nFOL: Equals(8, Plus(7, 1))\nTEXT: Two is positive.\nFOL: Positive(2)\nTEXT: If a number is positive, then the double of it is also positive.\nFOL: all x. (Positive(x) -> Positive(Double(x)))\nTEXT: Eight is the double of six.\nFOL: Double(8, 6)\nTEXT: Six is the double of two.\nFOL: Double(6, 2)\nTEXT: Eight is smaller than seven.\nFOL: LessThan(8, 7)\n", "TEXT: Six, seven and eight are imaginary numbers.\nFOL: ImaginaryNumber(Six) & ImaginaryNumber(Seven) & ImaginaryNumber(Eight)\nTEXT: If an imaginary number equals another imaginary number added by one, the first number is smaller.\nFOL: exists x. exists y. (ImaginaryNumber(x) & ImaginaryNumber(y) & (x=y+One) -> LessThan(x, y))\nTEXT: If the number x is larger than the number y, then y is not larger than x.\nFOL: exists x. exists y. (GreaterThan(x, y) -> -(GreaterThan(y, x)))\nTEXT: Seven equals six plus one.\nFOL: Equal(Seven, Six+One)\nTEXT: Eight equals seven plus one.\nFOL: Equal(Eight, Seven+One)\nTEXT: Two is positive.\nFOL: Positive(Two)\nTEXT: If a number is positive, then the double of it is also positive.\nFOL: exists x. (Positive(x) -> Positive(Double(x)))\nTEXT: Eight is the double of six.\nFOL: Equal(Eight, Double(Six))\nTEXT: Six is the double of two.\nFOL: Equal(Six, Double(Two))\nTEXT: Eight is smaller than seven.\nFOL: LessThan(Eight, Seven)\n", "TEXT: Six, seven and eight are imaginary numbers.\nFOL: Imaginary(Six) & Imaginary(Seven) & Imaginary(Eight)\nTEXT: If an imaginary number equals another imaginary number added by one, the first number is smaller.\nFOL: all x. all y. (Imaginary(x) & Imaginary(y) & (x=y+1) -> (x<y))\nTEXT: If the number x is larger than the number y, then y is not larger than x.\nFOL: all x. all y. (x>y -> (y<x))\nTEXT: Seven equals six plus one.\nFOL: (Seven=(Six+1))\nTEXT: Eight equals seven plus one.\nFOL: (Eight=(Seven+1))\nTEXT: Two is positive.\nFOL: Positive(Two)\nTEXT: If a number is positive, then the double of it is also positive.\nFOL: all x. (Positive(x) -> Positive(Double(x)))\nTEXT: Eight is the double of six.\nFOL: (Eight=Double(Six))\nTEXT: Six is the double of two.\nFOL: (Six=Double(Two))\nTEXT: Eight is the double of six.\nFOL: Eight=Double(Six)\n", "TEXT: Six, seven and eight are imaginary numbers.\nFOL: exists x. exists y. exists z. (Imaginary(x) & Imaginary(y) & Imaginary(z) & ((x=six & y=seven & z=eight) | (x=seven & y=eight & z=six) | (x=eight & y=six & z=seven)))\nTEXT: If an imaginary number equals another imaginary number added by one, the first number is smaller.\nFOL: exists x. exists y. exists z. (Imaginary(x) & Imaginary(y) & (x=y & z=One & Add(x, y, z)) -> x=smaller(x, y))\nTEXT: If the number x is larger than the number y, then y is not larger than x.\nFOL: exists x. exists y. exists z. (Imaginary(x) & Imaginary(y) & x=y & Larger(x, y) -> -Larger(y, x))\nTEXT: Seven equals six plus one.\nFOL: equals(Seven, Add(Six, One))\nTEXT: Eight equals seven plus one.\nFOL: equals(Eight, Add(Seven, One))\nTEXT: Two is positive.\nFOL: Positive(Two)\nTEXT: If a number is positive, then the double of it is also positive.\nFOL: exists x. exists y. (Positive(x) -> Positive(Double(x)))\nTEXT: Eight is the double of six.\nFOL: Double(Eight) = Double(Six)\nTEXT: Six is the double of two.\nFOL: Double(Six) = Double(Two)\nTEXT: Eight is smaller than seven.\nFOL: smaller(Eight, Seven)\n", "TEXT: Six, seven and eight are imaginary numbers.\nFOL: all x. (Imaginary(x) -> (x=6 | x=7 | x=8))\nTEXT: If an imaginary number equals another imaginary number added by one, the first number is smaller.\nFOL: all x. (Imaginary(x) & Imaginary(y) & (y=x+1) -> (x<y))\nTEXT: If the number x is larger than the number y, then y is not larger than x.\nFOL: all x. (Imaginary(x) & Imaginary(y) & (x>y) -> -y>x)\nTEXT: Seven equals six plus one.\nFOL: y=7 & (x=6 & y=x+1)\nTEXT: Eight equals seven plus one.\nFOL: y=8 & (x=7 & y=x+1)\nTEXT: Two is positive.\nFOL: Positive(2)\nTEXT: If a number is positive, then the double of it is also positive.\nFOL: all x. (Positive(x) -> Positive(2*x))\nTEXT: Eight is the double of six.\nFOL: 8=6*2\nTEXT: Six is the double of two.\nFOL: 6=2*2\nTEXT: Eight is smaller than seven.\nFOL: 7>8\n", "TEXT: Six, seven and eight are imaginary numbers.\nFOL: (Imaginary(6) & Imaginary(7) & Imaginary(8))\nTEXT: If an imaginary number equals another imaginary number added by one, the first number is smaller.\nFOL: all x. all y. ((Imaginary(x) & Imaginary(y) & Equals(x, Plus(y, 1)))) -> (Smaller(x, y))\nTEXT: If the number x is larger than the number y, then y is not larger than x.\nFOL: all x. all y. (Larger(x, y) -> (Not(Larger(y, x))))\nTEXT: Seven equals six plus one.\nFOL: Equals(7, Plus(6, 1))\nTEXT: Eight equals seven plus one.\nFOL: Equals(8, Plus(7, 1))\nTEXT: Two is positive.\nFOL: Positive(2)\nTEXT: If a number is positive, then the double of it is also positive.\nFOL: all x. (Positive(x) -> Positive(Double(x)))\nTEXT: Eight is the double of six.\nFOL: Equals(Eight, Double(Six))\nTEXT: Six is the double of two.\nFOL: Equals(Six, Double(Two))\nTEXT: Eight is smaller than seven.\nFOL: Smaller(Eight, Seven)\n", "TEXT: Six, seven and eight are imaginary numbers.\nFOL: ImaginaryNumber(Six) & ImaginaryNumber(Seven) & ImaginaryNumber(Eight)\nTEXT: If an imaginary number equals another imaginary number added by one, the first number is smaller.\nFOL: exists x. exists y. exists z. ((ImaginaryNumber(x) & ImaginaryNumber(y) & Equals(x, Plus(y, One)) & Not(y=z)) -> Smaller(x, z))\nTEXT: If the number x is larger than the number y, then y is not larger than x.\nFOL: exists x. exists y. ((Larger(x, y) & Not(y=x)) -> -Larger(y, x))\nTEXT: Seven equals six plus one.\nFOL: Equals(Seven, Plus(Six, One))\nTEXT: Eight equals seven plus one.\nFOL: Equals(Eight, Plus(Seven, One))\nTEXT: Two is positive.\nFOL: Positive(Two)\nTEXT: If a number is positive, then the double of it is also positive.\nFOL: exists x. exists y. (Positive(x) -> Positive(Double(x)))\nTEXT: Eight is the double of six.\nFOL: Equals(Eight, Double(Six))\nTEXT: Six is the double of two.\nFOL: Equals(Six, Double(Two))\nTEXT: Eight is smaller than seven.\nFOL: Smaller(Eight, Seven)\n", "TEXT: Six, seven and eight are imaginary numbers.\nFOL: Imaginary(Six) & Imaginary(Seven) & Imaginary(Eight)\nTEXT: If an imaginary number equals another imaginary number added by one, the first number is smaller.\nFOL: exists x. exists y. (Imaginary(x) & Imaginary(y) & Equal(x, Add(y, One)) -> Smaller(x, y))\nTEXT: If the number x is larger than the number y, then y is not larger than x.\nFOL: exists x. exists y. (Larger(x, y) -> -Larger(y, x))\nTEXT: Seven equals six plus one.\nFOL: Equal(Seven, Add(Six, One))\nTEXT: Eight equals seven plus one.\nFOL: Equal(Eight, Add(Seven, One))\nTEXT: Two is positive.\nFOL: Positive(Two)\nTEXT: If a number is positive, then the double of it is also positive.\nFOL: exists x. (Positive(x) -> Positive(Double(x)))\nTEXT: Eight is the double of six.\nFOL: Equal(Double(Six), Eight)\nTEXT: Six is the double of two.\nFOL: Equal(Double(Two), Six)\nTEXT: Eight is smaller than seven.\nFOL: Smaller(Eight, Seven)\n"], "answers": ["True", "Error", "Error", "Uncertain", "True", "Error", "Uncertain", "Error", "Error", "Uncertain"], "reference": "True", "time_s": 359.333744764328}
{"idx": 21, "prompt": "The following is a first-order logic (FOL) problem.\nThe problem is to determine whether the conclusion follows from the premises.\nThe premises are given in the form of a set of first-order logic sentences.\nThe conclusion is given in the form of a single first-order logic sentence.\nThe task is to translate each of the premises and conclusions into FOL expressions so that the expressions can be evaluated by a theorem solver like Prover9 to determine whether the conclusion follows from the premises.\nExpressions should adhere to the format of the Python NLTK package logic module. \n\n\n<PREMISES>\nAll biodegradable things are environment-friendly.\nAll woodware is biodegradable.\nAll paper is woodware.\nNothing is a good thing and also a bad thing.\nAll environment-friendly things are good.\nA worksheet is either paper or environment-friendly.\n</PREMISES>\n<CONCLUSION>\nA worksheet is not biodegradable.\n</CONCLUSION>\n<EVALUATE>\nTEXT: All biodegradable things are environment-friendly.\nFOL: all x. (Biodegradable(x) -> EnvironmentFriendly(x))\nTEXT: All woodware is biodegradable.\nFOL: all x. (Woodware(x) -> Biodegradable(x))\nTEXT: All paper is woodware.\nFOL: all x. (Paper(x) -> Woodware(x))\nTEXT: Nothing is a good thing and also a bad thing.\nFOL: -(exists x. (Good(x) & Bad(x)))\nTEXT: All environment-friendly things are good.\nFOL: all x. (EnvironmentFriendly(x) -> Good(x))\nTEXT: A worksheet is either paper or environment-friendly.\nFOL: ((Paper(Worksheet) & -EnvironmentFriendly(Worksheet)) | (-Paper(Worksheet) & EnvironmentFriendly(Worksheet)))\nTEXT: A worksheet is not biodegradable.\nFOL: -Dispensable(Worksheet)\n</EVALUATE>\n\n<PREMISES>\nA La Liga soccer team ranks higher than another La Liga soccer team if it receives more points.\nIf there are two La Liga soccer teams and neither has more points than the other, then the team which receives more points from the games between the two teams ranks higher.\nReal Madrid and Barcelona are both La Liga soccer teams.\nReal Madrid received more points than Barcelona.\nNeither Real Madrid nor Barcelona received more points from the games between them.\n</PREMISES>\n<CONCLUSION>\nReal Madrid ranks higher than Barcelona.\n</CONCLUSION>\n<EVALUATE>\nTEXT: A La Liga soccer team ranks higher than another La Liga soccer team if it receives more points.\nFOL: all x. all y. (LaLigaSoccerTeam(x) & LaLigaSoccerTeam(y) & MorePoints(x, y) -> RankHigherThan(x, y))\nTEXT: If there are two La Liga soccer teams and neither has more points than the other, then the team which receives more points from the games between the two teams ranks higher.\nFOL: all x. all y. (LaLigaSoccerTeam(x) & LaLigaSoccerTeam(y) & -MorePoints(x, y) & -MorePoints(y, x) & MorePointsInGameBetween(x, y) ->  RankHigherThan(x, y))\nTEXT: Real Madrid and Barcelona are both La Liga soccer teams.\nFOL: LaLigaSoccerTeam(RealMadrid) & LaLigaSoccerTeam(Barcelona)\nTEXT: Real Madrid received more points than Barcelona.\nFOL: MorePoints(RealMadrid, Barcelona)\nTEXT: Neither Real Madrid nor Barcelona received more points from the games between them.\nFOL: -MorePointsInGameBetween(RealMadrid, Barcelona) & -MorePointsInGameBetween(Barcelona, RealMadrid)\nTEXT: Real Madrid ranks higher than Barcelona.\nFOL: HigherRank(RealMadrid, Barcelona)\n</EVALUATE>\n\n<PREMISES>\nAll professional athletes spend most of their time on sports.\nAll Olympic gold medal winners are professional athletes.\nNo full-time scientists spend the majority of their time on sports.\nAll Nobel physics laureates are full-time scientists.\nAmy spends the most time on sports, or Amy is an Olympic gold medal winner.\nIf Amy is not a Nobel physics laureate, then Amy is not an Olympic gold medal winner.\n</PREMISES>\n<CONCLUSION>\nIf Amy is not an Olympic gold medal winner, then Amy is a Nobel physics laureate.\n</CONCLUSION>\n<EVALUATE>\nTEXT: All professional athletes spend most of their time on sports.\nFOL: all x. (ProfessionalAthlete(x) -> SpendOn(x, MostOfTheirTime, Sports))\nTEXT: All Olympic gold medal winners are professional athletes.\nFOL: all x. (OlympicGoldMedalWinner(x) -> ProfessionalAthlete(x))\nTEXT: No full-time scientists spend the majority of their time on sports.\nFOL: all x. (FullTimeScientist(x) -> -SpendOn(x, MostOfTheirTime, Sports))\nTEXT: All Nobel physics laureates are full-time scientists.\nFOL: all x. (NobelPhysicsLaureate(x) -> FullTimeScientist(x))\nTEXT: Amy spends the most time on sports, or Amy is an Olympic gold medal winner.\nFOL: SpendOn(Amy, MostOfTheirTime, Sports) | OlympicGoldMedalWinner(Amy)\nTEXT: If Amy is not a Nobel physics laureate, then Amy is not an Olympic gold medal winner.\nFOL: -NobelPhysicsLaureate(Amy) -> -OlympicGoldMedalWinner(Amy)\nTEXT: If Amy is not an Olympic gold medal winner, then Amy is a Nobel physics laureate.\nFOL: -OlympicGoldMedalWinner(Amy) -> NobelLaureate(Amy)\n</EVALUATE>\n\n<PREMISES>\nIf a person pays their taxes, then they contribute to the country.\nEveryone who works for a government department pays a tax on their salary.\nEveryone in the army is an employee of a government department.\nEveryone convicted of murder goes to prison.\nEveryone who has been to prison has a criminal record.\nJames was either once convicted of murder, or spent time in prison.\nJames either has a criminal record, or pays his taxes.\n</PREMISES>\n<CONCLUSION>\nJames does not contribute to the country.\n</CONCLUSION>\n<EVALUATE>\nTEXT: If a person pays their taxes, then they contribute to the country.\nFOL: all x. (Taxpayer(x) -> ContributeTo(x, Country))\nTEXT: Everyone who works for a government department pays a tax on their salary.\nFOL: all x. (WorkFor(x, GovernmentAgency) -> Taxpayer(x))\nTEXT: Everyone in the army is an employee of a government department.\nFOL: all x. (ServesIn(x, TheArmy) -> WorkFor(x, GovernmentAgency))\nTEXT: Everyone convicted of murder goes to prison.\nFOL: all x. (SentencedForMurder(x) -> Imprisoned(x))\nTEXT: Everyone who has been to prison has a criminal record.\nFOL: all x. (Imprisoned((x) -> Has(x, CriminalRecord))\nTEXT: James was either once convicted of murder, or spent time in prison.\nFOL: ((SentencedForMurder(James) & -Imprisoned(James)) | (-SentencedForMurder(James) & Imprisoned(James)))\nTEXT: James either has a criminal record, or pays his taxes.\nFOL: ((Has(James, CriminalRecord) & -Taxpayer(James)) | (-Has(James, CriminalRecord) & Taxpayer(James)))\nTEXT: James does not contribute to the country.\nFOL: ContributeToCountry(James)\n</EVALUATE>\n\n<PREMISES>\nNo songs are visuals.\nAll folk songs are songs.\nAll videos are visuals.\nAll movies are videos.\nAll sci-fi movies are movies.\nInception is a sci-fi movie.\nMac is neither a folk song nor a sci-fi movie.\n</PREMISES>\n<CONCLUSION>\nInception is a folk song.\n</CONCLUSION>\n<EVALUATE>\nTEXT: No songs are visuals.\nFOL: all x. (Song(x) -> -Visual(x))\nTEXT: All folk songs are songs.\nFOL: all x. (FolkSong(x) -> Song(x))\nTEXT: All videos are visuals.\nFOL: all x. (Video(x) -> Visual(x))\nTEXT: All movies are videos.\nFOL: all x. (Movie(x) -> Video(x))\nTEXT: All sci-fi movies are movies.\nFOL: all x. (ScifiMovie(x) -> Movie(x))\nTEXT: Inception is a sci-fi movie.\nFOL: ScifiMovie(Inception)\nTEXT: Mac is neither a folk song nor a sci-fi movie.\nFOL: -FolkSong(Mac) & -ScifiMovie(Mac)\nTEXT: Inception is a folk song.\nFOL: FolkSong(Inception)\n</EVALUATE>\n\n<PREMISES>\nEvery chef can cook.\nSome people who aren\u2019t chefs can cook.\nPeople who cook can make scrambled eggs and pasta.\nIf someone can make cookies and muffins, they are a baker.\nBakers who can also make scrambled eggs can make a good breakfast.\nLuke can make cookies, scrambled eggs, and muffins, but not pasta.\n</PREMISES>\n<CONCLUSION>\nLuke is a chef.\n</CONCLUSION>\n<EVALUATE>\nTEXT: Every chef can cook.\nFOL: all x. (Chef(x) -> Can(x, Cook))\nTEXT: Some people who aren\u2019t chefs can cook.\nFOL: exists x. (-Chef(x) & Can(x, Cook))\nTEXT: People who cook can make scrambled eggs and pasta.\nFOL: all x. (Can(x, Cook) -> (CanMake(x, ScrambledEggs) & CanMake(x, Pasta)))\nTEXT: If someone can make cookies and muffins, they are a baker.\nFOL: all x. (CanMake(x, Cookies) & CanMake(x, Muffins) -> Baker(x))\nTEXT: Bakers who can also make scrambled eggs can make a good breakfast.\nFOL: all x. ((Baker(x) & CanMake(x, ScrambledEggs)) -> CanMake(x, GoodBreakfast))\nTEXT: Luke can make cookies, scrambled eggs, and muffins, but not pasta.\nFOL: CanMake(Luke, Cookies) & (CanMake(Luke, ScrambledEggs) & CanMake(Luke, Muffins) & -CanMake(Luke, Pasta)\nTEXT: Luke is a chef.\nFOL: MakeGoodBreakfast(Luke)\n</EVALUATE>\n\n<PREMISES>\nETS develops various standardized tests primarily in the United States for K-12 and higher education.\nETS administers international tests, including the TOEFL, TOEIC, GRE, and subject tests.\nMany of the assessments ETS develops are associated with entry to the US tertiary and quaternary education institutions.\nETS also develops K-12 statewide assessments used for accountability testing in many states.\n</PREMISES>\n<CONCLUSION>\nETS doesn't administer tests internationally.\n</CONCLUSION>\n<EVALUATE>\nTEXT: ETS develops various standardized tests primarily in the United States for K-12 and higher education.\nFOL: exists x. exists y. (Develop(eTS, x) & Develop(eTS, y) & StandardizedTest(x) & StandardizedTest(y) & In(x, UnitedState) & In(y, UnitedState) & For(x, kOneTwoAndHigherEducation) & For(y, kOneTwoAndHigherEducation))\nTEXT: ETS administers international tests, including the TOEFL, TOEIC, GRE, and subject tests.\nFOL: exists x. (Administer(eTS, x) & InternationalTest(x) & (TOEFL(x) | TOEIC(x) | GRE(x) | SubjectTest(x)))\nTEXT: Many of the assessments ETS develops are associated with entry to the US tertiary and quaternary education institutions.\nFOL: exists x. (Develop(eTS, x) & AssociatedWith(x, EntryToUSEducationInstitution))\nTEXT: ETS also develops K-12 statewide assessments used for accountability testing in many states.\nFOL: exists x. (Develop(eTS, x) & StateWideAssesment(x) & UsedFor(x, AccountabilityTesting))\nTEXT: ETS doesn't administer tests internationally.\nFOL: exists x. (Develops(Ets, x) & For(x, k-OneTwoandhighereducation)) & exists x. (Develops(Ets, x) & AssociatedWith(x, Entrytouseducationinstitutions))\n</EVALUATE>\n\n<PREMISES>\nDaveed Diggs is an actor and film producer.\nDaveed Diggs played two roles in the musical Hamilton on Broadway.\nOne of the actors from Hamilton won the best actor award.\nThe actor playing Thomas Jefferson won the best actor award.\nDaveed Diggs played Thomas Jefferson.\nMusicals on Broadway are not films.\n</PREMISES>\n<CONCLUSION>\nDaveed Diggs won the best actor award.\n</CONCLUSION>\n<EVALUATE>\nTEXT: Daveed Diggs is an actor and film producer.\nFOL: Actor(DaveedDiggs) & FilmProducer(DaveedDiggs)\nTEXT: Daveed Diggs played two roles in the musical Hamilton on Broadway.\nFOL: exists x. exists y.(PlaysIn(DaveedDiggs, x, Hamilton) & (-(x=y)) & PlaysIn(DaveedDiggs, y, Hamilton)) & OnBroadway(Hamilton) & Musical(Hamilton)\nTEXT: One of the actors from Hamilton won the best actor award.\nFOL: exists x. exists y.(Actor(x) & PlaysIn(x, y, Hamilton) & Wins(x, BestActorAward))\nTEXT: The actor playing Thomas Jefferson won the best actor award.\nFOL: exists x. (Actor(x) & PlaysIn(x, ThomasJefferson, Hamilton) & Wins(x, BestActorAward))\nTEXT: Daveed Diggs played Thomas Jefferson.\nFOL: Plays(DaveedDiggs, ThomasJefferson)\nTEXT: Musicals on Broadway are not films.\nFOL: all x. ((Musical(x) & OnBroadway(x)) -> -Film(x))\nTEXT: Daveed Diggs won the best actor award.\nFOL: exists x. (BRICS(x) & Speaks(x, Hindi))\n</EVALUATE>\n\n<PREMISES>\nSix, seven and eight are imaginary numbers.\nIf an imaginary number equals another imaginary number added by one, the first number is larger.\nIf the number x is larger than the number y, then y is not larger than x.\nSeven equals six plus one.\nEight equals seven plus one.\nTwo is negative.\nIf a number is negative, then the double of it is also negative.\nNine is the double of six.\nSix is the double of two.\n</PREMISES>\n<CONCLUSION>\nNine is negative.\n</CONCLUSION>\n<EVALUATE>\n", "raw_generations": ["TEXT: Six, seven and eight are imaginary numbers.\nFOL: ImaginaryNumber(Six) & ImaginaryNumber(Seven) & ImaginaryNumber(Eight)\nTEXT: If an imaginary number equals another imaginary number added by one, the first number is larger.\nFOL: exists x. exists y. (ImaginaryNumber(x) & ImaginaryNumber(y) & x=y+1 & x>y)\nTEXT: If the number x is larger than the number y, then y is not larger than x.\nFOL: exists x. exists y. (x>y -> -y>x)\nTEXT: Seven equals six plus one.\nFOL: exists x. (Seven=Six+1)\nTEXT: Eight equals seven plus one.\nFOL: exists x. (Eight=Seven+1)\nTEXT: Two is negative.\nFOL: exists x. (x=Two & x<0)\nTEXT: If a number is negative, then the double of it is also negative.\nFOL: exists x. (x<0 -> (x*2)<0)\nTEXT: Nine is the double of six.\nFOL: exists x. (Nine=Six*2)\nTEXT: Six is the double of two.\nFOL: exists x. (Six=Two*2)\nTEXT: Nine is negative.\nFOL: exists x. (Nine=x & x<0)\n", "TEXT: Six, seven and eight are imaginary numbers.\nFOL: exists x. (Imaginary(x) & (x=6 | x=7 | x=8))\nTEXT: If an imaginary number equals another imaginary number added by one, the first number is larger.\nFOL: exists x. exists y. exists z. (Imaginary(x) & Imaginary(y) & (x=y+1) -> (x>y))\nTEXT: If the number x is larger than the number y, then y is not larger than x.\nFOL: exists x. exists y. (x>y -> -y>x)\nTEXT: Seven equals six plus one.\nFOL: exists x. exists y. (x=7 & y=6 & x=y+1)\nTEXT: Eight equals seven plus one.\nFOL: exists x. exists y. (x=8 & y=7 & x=y+1)\nTEXT: Two is negative.\nFOL: exists x. (x=2 & Imaginary(x) -> Negative(x))\nTEXT: If a number is negative, then the double of it is also negative.\nFOL: exists x. (Negative(x) -> Negative(Double(x)))\nTEXT: Nine is the double of six.\nFOL: exists x. (x=9 & Double(x)=6)\nTEXT: Six is the double of two.\nFOL: exists x. (x=6 & Double(x)=2)\nTEXT: Nine is negative.\nFOL: exists x. (x=9 & Negative(x))\n", "TEXT: Six, seven and eight are imaginary numbers.\nFOL: (ImaginaryNumber(Six) & ImaginaryNumber(Seven) & ImaginaryNumber(Eight))\nTEXT: If an imaginary number equals another imaginary number added by one, the first number is larger.\nFOL: exists x. exists y. ((ImaginaryNumber(x) & ImaginaryNumber(y) & Equals(x, Plus(y, One))) -> Larger(x, y))\nTEXT: If the number x is larger than the number y, then y is not larger than x.\nFOL: exists x. exists y. (Larger(x, y) -> -Larger(y, x))\nTEXT: Seven equals six plus one.\nFOL: Equals(Seven, Plus(Six, One))\nTEXT: Eight equals seven plus one.\nFOL: Equals(Eight, Plus(Seven, One))\nTEXT: Two is negative.\nFOL: Negative(Two)\nTEXT: If a number is negative, then the double of it is also negative.\nFOL: exists x. (Negative(x) -> Negative(Double(x)))\nTEXT: Nine is the double of six.\nFOL: Equals(Nine, Double(Six))\nTEXT: Six is the double of two.\nFOL: Equals(Six, Double(Two))\nTEXT: Nine is negative.\nFOL: Negative(Nine)\n", "TEXT: Six, seven and eight are imaginary numbers.\nFOL: Imaginary(Six) & Imaginary(Seven) & Imaginary(Eight)\nTEXT: If an imaginary number equals another imaginary number added by one, the first number is larger.\nFOL: all x. all y. ((Imaginary(x) & Equals(x, y) & AddOne(y)) -> Larger(x))\nTEXT: If the number x is larger than the number y, then y is not larger than x.\nFOL: all x. all y. (Larger(x) -> -(Larger(y)))\nTEXT: Seven equals six plus one.\nFOL: Equals(Seven, Add(Six, One))\nTEXT: Eight equals seven plus one.\nFOL: Equals(Eight, Add(Seven, One))\nTEXT: Two is negative.\nFOL: Negative(Two)\nTEXT: If a number is negative, then the double of it is also negative.\nFOL: all x. (Negative(x) -> Negative(Double(x)))\nTEXT: Nine is the double of six.\nFOL: Double(Six) & Double(Nine)\nTEXT: Six is the double of two.\nFOL: Double(Six) & Double(Two)\nTEXT: Nine is negative.\nFOL: Negative(Nine)\n", "TEXT: Six, seven and eight are imaginary numbers.\nFOL: ImaginaryNumber(Six) & ImaginaryNumber(Seven) & ImaginaryNumber(Eight)\nTEXT: If an imaginary number equals another imaginary number added by one, the first number is larger.\nFOL: all x. all y. (ImaginaryNumber(x) & ImaginaryNumber(y) & (x=y+One) -> Larger(x, y))\nTEXT: If the number x is larger than the number y, then y is not larger than x.\nFOL: all x. all y. (Larger(x, y) -> -Larger(y, x))\nTEXT: Seven equals six plus one.\nFOL: Seven=(Six+One)\nTEXT: Eight equals seven plus one.\nFOL: Eight=(Seven+One)\nTEXT: Two is negative.\nFOL: Two=(-One)\nTEXT: If a number is negative, then the double of it is also negative.\nFOL: all x. (Negative(x) -> Negative(Double(x)))\nTEXT: Nine is the double of six.\nFOL: Nine=(Double(Six))\nTEXT: Six is the double of two.\nFOL: Six=(Double(Two))\nTEXT: Nine is negative.\nFOL: Nine=(-One)\n", "TEXT: Six, seven and eight are imaginary numbers.\nFOL: exists x. (Imaginary(x) & (x=Six | x=Seven | x=Eight))\nTEXT: If an imaginary number equals another imaginary number added by one, the first number is larger.\nFOL: exists x. exists y. exists z. (Imaginary(x) & Imaginary(y) & (x=y+1) -> (x>y))\nTEXT: If the number x is larger than the number y, then y is not larger than x.\nFOL: exists x. exists y. (x>y -> (y<x))\nTEXT: Seven equals six plus one.\nFOL: (Seven=Six+1)\nTEXT: Eight equals seven plus one.\nFOL: (Eight=Seven+1)\nTEXT: Two is negative.\nFOL: (Two=Negative)\nTEXT: If a number is negative, then the double of it is also negative.\nFOL: exists x. (Negative(x) -> Negative(Double(x)))\nTEXT: Nine is the double of six.\nFOL: (Nine=Double(Six))\nTEXT: Six is the double of two.\nFOL: (Six=Double(Two))\nTEXT: Nine is negative.\nFOL: (Negative(Nine))\n", "TEXT: Six, seven and eight are imaginary numbers.\nFOL: exists x. (ImaginaryNumber(x) & (x=Six | x=Seven | x=Eight))\nTEXT: If an imaginary number equals another imaginary number added by one, the first number is larger.\nFOL: all x. (ImaginaryNumber(x) & all y. (ImaginaryNumber(y) & PlusOne(x, y) -> Larger(x, y)))\nTEXT: If the number x is larger than the number y, then y is not larger than x.\nFOL: all x. all y. (Larger(x, y) -> -Larger(y, x))\nTEXT: Seven equals six plus one.\nFOL: Seven=SixPlusOne\nTEXT: Eight equals seven plus one.\nFOL: Eight=SevenPlusOne\nTEXT: Two is negative.\nFOL: Two=Negative\nTEXT: If a number is negative, then the double of it is also negative.\nFOL: all x. (Negative(x) -> Negative(Double(x)))\nTEXT: Nine is the double of six.\nFOL: Nine=Double(Six)\nTEXT: Six is the double of two.\nFOL: Six=Double(Two)\nTEXT: Nine is negative.\nFOL: Negative(Nine)\n", "TEXT: Six, seven and eight are imaginary numbers.\nFOL: Imaginary(Six) & Imaginary(Seven) & Imaginary(Eight)\nTEXT: If an imaginary number equals another imaginary number added by one, the first number is larger.\nFOL: all x. all y. (Imaginary(x) & Imaginary(y) & Equals(x, Plus(y, One)) -> Larger(x, y))\nTEXT: If the number x is larger than the number y, then y is not larger than x.\nFOL: all x. all y. (Larger(x, y) -> -Larger(y, x))\nTEXT: Seven equals six plus one.\nFOL: Equals(Seven, Plus(Six, One))\nTEXT: Eight equals seven plus one.\nFOL: Equals(Eight, Plus(Seven, One))\nTEXT: Two is negative.\nFOL: Two is negative\nTEXT: If a number is negative, then the double of it is also negative.\nFOL: all x. (Negative(x) -> Negative(Double(x)))\nTEXT: Nine is the double of six.\nFOL: Equals(Nine, Double(Six))\nTEXT: Six is the double of two.\nFOL: Equals(Six, Double(Two))\nTEXT: Nine is negative.\nFOL: Negative(Nine)\n", "TEXT: Six, seven and eight are imaginary numbers.\nFOL: (Imaginary(Six) & Imaginary(Seven) & Imaginary(Eight))\nTEXT: If an imaginary number equals another imaginary number added by one, the first number is larger.\nFOL: all x. all y. (Imaginary(x) & Imaginary(y) & Equals(x, PlusOne(y)) -> Larger(x, y))\nTEXT: If the number x is larger than the number y, then y is not larger than x.\nFOL: all x. all y. (Larger(x, y) -> -Larger(y, x))\nTEXT: Seven equals six plus one.\nFOL: Equals(Seven, PlusOne(Six))\nTEXT: Eight equals seven plus one.\nFOL: Equals(Eight, PlusOne(Seven))\nTEXT: Two is negative.\nFOL: (Imaginary(Two) -> Negative(Two))\nTEXT: If a number is negative, then the double of it is also negative.\nFOL: all x. (Negative(x) -> Negative(TimesTwo(x)))\nTEXT: Nine is the double of six.\nFOL: Equals(Nine, TimesTwo(Six))\nTEXT: Six is the double of two.\nFOL: Equals(Six, TimesTwo(Two))\nTEXT: Nine is negative.\nFOL: -Negative(Nine)\n", "TEXT: Six, seven and eight are imaginary numbers.\nFOL: ImaginaryNumber(Six) & ImaginaryNumber(Seven) & ImaginaryNumber(Eight)\nTEXT: If an imaginary number equals another imaginary number added by one, the first number is larger.\nFOL: all x. all y. ((ImaginaryNumber(x) & ImaginaryNumber(y) & Equals(x, PlusOne(y))) -> Larger(x, y))\nTEXT: If the number x is larger than the number y, then y is not larger than x.\nFOL: all x. all y. (Larger(x, y) -> -Larger(y, x))\nTEXT: Seven equals six plus one.\nFOL: Equals(Seven, PlusOne(Six))\nTEXT: Eight equals seven plus one.\nFOL: Equals(Eight, PlusOne(Seven))\nTEXT: Two is negative.\nFOL: IsNegative(Two)\nTEXT: If a number is negative, then the double of it is also negative.\nFOL: all x. (IsNegative(x) -> IsNegative(Double(x)))\nTEXT: Nine is the double of six.\nFOL: Equals(Nine, Double(Six))\nTEXT: Six is the double of two.\nFOL: Equals(Six, Double(Two))\nTEXT: Nine is negative.\nFOL: IsNegative(Nine)\n"], "answers": ["Error", "Error", "Uncertain", "Error", "Uncertain", "Error", "Error", "Error", "Uncertain", "Uncertain"], "reference": "True", "time_s": 346.2318079471588}
{"idx": 22, "prompt": "The following is a first-order logic (FOL) problem.\nThe problem is to determine whether the conclusion follows from the premises.\nThe premises are given in the form of a set of first-order logic sentences.\nThe conclusion is given in the form of a single first-order logic sentence.\nThe task is to translate each of the premises and conclusions into FOL expressions so that the expressions can be evaluated by a theorem solver like Prover9 to determine whether the conclusion follows from the premises.\nExpressions should adhere to the format of the Python NLTK package logic module. \n\n\n<PREMISES>\nAll biodegradable things are environment-friendly.\nAll woodware is biodegradable.\nAll paper is woodware.\nNothing is a good thing and also a bad thing.\nAll environment-friendly things are good.\nA worksheet is either paper or environment-friendly.\n</PREMISES>\n<CONCLUSION>\nA worksheet is not biodegradable.\n</CONCLUSION>\n<EVALUATE>\nTEXT: All biodegradable things are environment-friendly.\nFOL: all x. (Biodegradable(x) -> EnvironmentFriendly(x))\nTEXT: All woodware is biodegradable.\nFOL: all x. (Woodware(x) -> Biodegradable(x))\nTEXT: All paper is woodware.\nFOL: all x. (Paper(x) -> Woodware(x))\nTEXT: Nothing is a good thing and also a bad thing.\nFOL: -(exists x. (Good(x) & Bad(x)))\nTEXT: All environment-friendly things are good.\nFOL: all x. (EnvironmentFriendly(x) -> Good(x))\nTEXT: A worksheet is either paper or environment-friendly.\nFOL: ((Paper(Worksheet) & -EnvironmentFriendly(Worksheet)) | (-Paper(Worksheet) & EnvironmentFriendly(Worksheet)))\nTEXT: A worksheet is not biodegradable.\nFOL: -Dispensable(Worksheet)\n</EVALUATE>\n\n<PREMISES>\nA La Liga soccer team ranks higher than another La Liga soccer team if it receives more points.\nIf there are two La Liga soccer teams and neither has more points than the other, then the team which receives more points from the games between the two teams ranks higher.\nReal Madrid and Barcelona are both La Liga soccer teams.\nReal Madrid received more points than Barcelona.\nNeither Real Madrid nor Barcelona received more points from the games between them.\n</PREMISES>\n<CONCLUSION>\nReal Madrid ranks higher than Barcelona.\n</CONCLUSION>\n<EVALUATE>\nTEXT: A La Liga soccer team ranks higher than another La Liga soccer team if it receives more points.\nFOL: all x. all y. (LaLigaSoccerTeam(x) & LaLigaSoccerTeam(y) & MorePoints(x, y) -> RankHigherThan(x, y))\nTEXT: If there are two La Liga soccer teams and neither has more points than the other, then the team which receives more points from the games between the two teams ranks higher.\nFOL: all x. all y. (LaLigaSoccerTeam(x) & LaLigaSoccerTeam(y) & -MorePoints(x, y) & -MorePoints(y, x) & MorePointsInGameBetween(x, y) ->  RankHigherThan(x, y))\nTEXT: Real Madrid and Barcelona are both La Liga soccer teams.\nFOL: LaLigaSoccerTeam(RealMadrid) & LaLigaSoccerTeam(Barcelona)\nTEXT: Real Madrid received more points than Barcelona.\nFOL: MorePoints(RealMadrid, Barcelona)\nTEXT: Neither Real Madrid nor Barcelona received more points from the games between them.\nFOL: -MorePointsInGameBetween(RealMadrid, Barcelona) & -MorePointsInGameBetween(Barcelona, RealMadrid)\nTEXT: Real Madrid ranks higher than Barcelona.\nFOL: HigherRank(RealMadrid, Barcelona)\n</EVALUATE>\n\n<PREMISES>\nAll professional athletes spend most of their time on sports.\nAll Olympic gold medal winners are professional athletes.\nNo full-time scientists spend the majority of their time on sports.\nAll Nobel physics laureates are full-time scientists.\nAmy spends the most time on sports, or Amy is an Olympic gold medal winner.\nIf Amy is not a Nobel physics laureate, then Amy is not an Olympic gold medal winner.\n</PREMISES>\n<CONCLUSION>\nIf Amy is not an Olympic gold medal winner, then Amy is a Nobel physics laureate.\n</CONCLUSION>\n<EVALUATE>\nTEXT: All professional athletes spend most of their time on sports.\nFOL: all x. (ProfessionalAthlete(x) -> SpendOn(x, MostOfTheirTime, Sports))\nTEXT: All Olympic gold medal winners are professional athletes.\nFOL: all x. (OlympicGoldMedalWinner(x) -> ProfessionalAthlete(x))\nTEXT: No full-time scientists spend the majority of their time on sports.\nFOL: all x. (FullTimeScientist(x) -> -SpendOn(x, MostOfTheirTime, Sports))\nTEXT: All Nobel physics laureates are full-time scientists.\nFOL: all x. (NobelPhysicsLaureate(x) -> FullTimeScientist(x))\nTEXT: Amy spends the most time on sports, or Amy is an Olympic gold medal winner.\nFOL: SpendOn(Amy, MostOfTheirTime, Sports) | OlympicGoldMedalWinner(Amy)\nTEXT: If Amy is not a Nobel physics laureate, then Amy is not an Olympic gold medal winner.\nFOL: -NobelPhysicsLaureate(Amy) -> -OlympicGoldMedalWinner(Amy)\nTEXT: If Amy is not an Olympic gold medal winner, then Amy is a Nobel physics laureate.\nFOL: -OlympicGoldMedalWinner(Amy) -> NobelLaureate(Amy)\n</EVALUATE>\n\n<PREMISES>\nIf a person pays their taxes, then they contribute to the country.\nEveryone who works for a government department pays a tax on their salary.\nEveryone in the army is an employee of a government department.\nEveryone convicted of murder goes to prison.\nEveryone who has been to prison has a criminal record.\nJames was either once convicted of murder, or spent time in prison.\nJames either has a criminal record, or pays his taxes.\n</PREMISES>\n<CONCLUSION>\nJames does not contribute to the country.\n</CONCLUSION>\n<EVALUATE>\nTEXT: If a person pays their taxes, then they contribute to the country.\nFOL: all x. (Taxpayer(x) -> ContributeTo(x, Country))\nTEXT: Everyone who works for a government department pays a tax on their salary.\nFOL: all x. (WorkFor(x, GovernmentAgency) -> Taxpayer(x))\nTEXT: Everyone in the army is an employee of a government department.\nFOL: all x. (ServesIn(x, TheArmy) -> WorkFor(x, GovernmentAgency))\nTEXT: Everyone convicted of murder goes to prison.\nFOL: all x. (SentencedForMurder(x) -> Imprisoned(x))\nTEXT: Everyone who has been to prison has a criminal record.\nFOL: all x. (Imprisoned((x) -> Has(x, CriminalRecord))\nTEXT: James was either once convicted of murder, or spent time in prison.\nFOL: ((SentencedForMurder(James) & -Imprisoned(James)) | (-SentencedForMurder(James) & Imprisoned(James)))\nTEXT: James either has a criminal record, or pays his taxes.\nFOL: ((Has(James, CriminalRecord) & -Taxpayer(James)) | (-Has(James, CriminalRecord) & Taxpayer(James)))\nTEXT: James does not contribute to the country.\nFOL: ContributeToCountry(James)\n</EVALUATE>\n\n<PREMISES>\nNo songs are visuals.\nAll folk songs are songs.\nAll videos are visuals.\nAll movies are videos.\nAll sci-fi movies are movies.\nInception is a sci-fi movie.\nMac is neither a folk song nor a sci-fi movie.\n</PREMISES>\n<CONCLUSION>\nInception is a folk song.\n</CONCLUSION>\n<EVALUATE>\nTEXT: No songs are visuals.\nFOL: all x. (Song(x) -> -Visual(x))\nTEXT: All folk songs are songs.\nFOL: all x. (FolkSong(x) -> Song(x))\nTEXT: All videos are visuals.\nFOL: all x. (Video(x) -> Visual(x))\nTEXT: All movies are videos.\nFOL: all x. (Movie(x) -> Video(x))\nTEXT: All sci-fi movies are movies.\nFOL: all x. (ScifiMovie(x) -> Movie(x))\nTEXT: Inception is a sci-fi movie.\nFOL: ScifiMovie(Inception)\nTEXT: Mac is neither a folk song nor a sci-fi movie.\nFOL: -FolkSong(Mac) & -ScifiMovie(Mac)\nTEXT: Inception is a folk song.\nFOL: FolkSong(Inception)\n</EVALUATE>\n\n<PREMISES>\nEvery chef can cook.\nSome people who aren\u2019t chefs can cook.\nPeople who cook can make scrambled eggs and pasta.\nIf someone can make cookies and muffins, they are a baker.\nBakers who can also make scrambled eggs can make a good breakfast.\nLuke can make cookies, scrambled eggs, and muffins, but not pasta.\n</PREMISES>\n<CONCLUSION>\nLuke is a chef.\n</CONCLUSION>\n<EVALUATE>\nTEXT: Every chef can cook.\nFOL: all x. (Chef(x) -> Can(x, Cook))\nTEXT: Some people who aren\u2019t chefs can cook.\nFOL: exists x. (-Chef(x) & Can(x, Cook))\nTEXT: People who cook can make scrambled eggs and pasta.\nFOL: all x. (Can(x, Cook) -> (CanMake(x, ScrambledEggs) & CanMake(x, Pasta)))\nTEXT: If someone can make cookies and muffins, they are a baker.\nFOL: all x. (CanMake(x, Cookies) & CanMake(x, Muffins) -> Baker(x))\nTEXT: Bakers who can also make scrambled eggs can make a good breakfast.\nFOL: all x. ((Baker(x) & CanMake(x, ScrambledEggs)) -> CanMake(x, GoodBreakfast))\nTEXT: Luke can make cookies, scrambled eggs, and muffins, but not pasta.\nFOL: CanMake(Luke, Cookies) & (CanMake(Luke, ScrambledEggs) & CanMake(Luke, Muffins) & -CanMake(Luke, Pasta)\nTEXT: Luke is a chef.\nFOL: MakeGoodBreakfast(Luke)\n</EVALUATE>\n\n<PREMISES>\nETS develops various standardized tests primarily in the United States for K-12 and higher education.\nETS administers international tests, including the TOEFL, TOEIC, GRE, and subject tests.\nMany of the assessments ETS develops are associated with entry to the US tertiary and quaternary education institutions.\nETS also develops K-12 statewide assessments used for accountability testing in many states.\n</PREMISES>\n<CONCLUSION>\nETS doesn't administer tests internationally.\n</CONCLUSION>\n<EVALUATE>\nTEXT: ETS develops various standardized tests primarily in the United States for K-12 and higher education.\nFOL: exists x. exists y. (Develop(eTS, x) & Develop(eTS, y) & StandardizedTest(x) & StandardizedTest(y) & In(x, UnitedState) & In(y, UnitedState) & For(x, kOneTwoAndHigherEducation) & For(y, kOneTwoAndHigherEducation))\nTEXT: ETS administers international tests, including the TOEFL, TOEIC, GRE, and subject tests.\nFOL: exists x. (Administer(eTS, x) & InternationalTest(x) & (TOEFL(x) | TOEIC(x) | GRE(x) | SubjectTest(x)))\nTEXT: Many of the assessments ETS develops are associated with entry to the US tertiary and quaternary education institutions.\nFOL: exists x. (Develop(eTS, x) & AssociatedWith(x, EntryToUSEducationInstitution))\nTEXT: ETS also develops K-12 statewide assessments used for accountability testing in many states.\nFOL: exists x. (Develop(eTS, x) & StateWideAssesment(x) & UsedFor(x, AccountabilityTesting))\nTEXT: ETS doesn't administer tests internationally.\nFOL: exists x. (Develops(Ets, x) & For(x, k-OneTwoandhighereducation)) & exists x. (Develops(Ets, x) & AssociatedWith(x, Entrytouseducationinstitutions))\n</EVALUATE>\n\n<PREMISES>\nDaveed Diggs is an actor and film producer.\nDaveed Diggs played two roles in the musical Hamilton on Broadway.\nOne of the actors from Hamilton won the best actor award.\nThe actor playing Thomas Jefferson won the best actor award.\nDaveed Diggs played Thomas Jefferson.\nMusicals on Broadway are not films.\n</PREMISES>\n<CONCLUSION>\nDaveed Diggs won the best actor award.\n</CONCLUSION>\n<EVALUATE>\nTEXT: Daveed Diggs is an actor and film producer.\nFOL: Actor(DaveedDiggs) & FilmProducer(DaveedDiggs)\nTEXT: Daveed Diggs played two roles in the musical Hamilton on Broadway.\nFOL: exists x. exists y.(PlaysIn(DaveedDiggs, x, Hamilton) & (-(x=y)) & PlaysIn(DaveedDiggs, y, Hamilton)) & OnBroadway(Hamilton) & Musical(Hamilton)\nTEXT: One of the actors from Hamilton won the best actor award.\nFOL: exists x. exists y.(Actor(x) & PlaysIn(x, y, Hamilton) & Wins(x, BestActorAward))\nTEXT: The actor playing Thomas Jefferson won the best actor award.\nFOL: exists x. (Actor(x) & PlaysIn(x, ThomasJefferson, Hamilton) & Wins(x, BestActorAward))\nTEXT: Daveed Diggs played Thomas Jefferson.\nFOL: Plays(DaveedDiggs, ThomasJefferson)\nTEXT: Musicals on Broadway are not films.\nFOL: all x. ((Musical(x) & OnBroadway(x)) -> -Film(x))\nTEXT: Daveed Diggs won the best actor award.\nFOL: exists x. (BRICS(x) & Speaks(x, Hindi))\n</EVALUATE>\n\n<PREMISES>\nSix, seven and eight are imaginary numbers.\nIf an imaginary number equals another imaginary number added by one, the first number is smaller.\nIf the number x is larger than the number y, then y is not larger than x.\nSeven equals six plus one.\nEight equals seven plus one.\nTwo is positive.\nIf a number is positive, then the double of it is also positive.\nEight is the double of six.\nSix is the double of two.\n</PREMISES>\n<CONCLUSION>\nSix is smaller than seven.\n</CONCLUSION>\n<EVALUATE>\n", "raw_generations": ["TEXT: Six, seven and eight are imaginary numbers.\nFOL: exists x. exists y. exists z. (Imaginary(x) & Imaginary(y) & Imaginary(z) & (x=y=z))\nTEXT: If an imaginary number equals another imaginary number added by one, the first number is smaller.\nFOL: exists x. exists y. exists z. (Imaginary(x) & Imaginary(y) & (x+1=y) & (x<y))\nTEXT: If the number x is larger than the number y, then y is not larger than x.\nFOL: exists x. exists y. (LargerThan(x, y) -> -LargerThan(y, x))\nTEXT: Seven equals six plus one.\nFOL: (Seven=Six+1)\nTEXT: Eight equals seven plus one.\nFOL: (Eight=Seven+1)\nTEXT: Two is positive.\nFOL: TwoPositive(Two)\nTEXT: If a number is positive, then the double of it is also positive.\nFOL: exists x. (Positive(x) -> Positive(Double(x)))\nTEXT: Eight is the double of six.\nFOL: (Eight=Double(Six))\nTEXT: Six is the double of two.\nFOL: (Six=Double(Two))\nTEXT: Six is smaller than seven.\nFOL: (Six<Seven)\n", "TEXT: Six, seven and eight are imaginary numbers.\nFOL: ImaginaryNumber(Six) & ImaginaryNumber(Seven) & ImaginaryNumber(Eight)\nTEXT: If an imaginary number equals another imaginary number added by one, the first number is smaller.\nFOL: all x. (ImaginaryNumber(x) & ImaginaryNumber(y) & (Equals(x, Plus(y, One))) -> (Smaller(x, y)))\nTEXT: If the number x is larger than the number y, then y is not larger than x.\nFOL: all x. (Larger(x, y) -> -Larger(y, x))\nTEXT: Seven equals six plus one.\nFOL: Plus(Six, One) = Seven\nTEXT: Eight equals seven plus one.\nFOL: Plus(Seven, One) = Eight\nTEXT: Two is positive.\nFOL: Positive(Two)\nTEXT: If a number is positive, then the double of it is also positive.\nFOL: all x. (Positive(x) -> Positive(Double(x)))\nTEXT: Eight is the double of six.\nFOL: Double(Six) = Eight\nTEXT: Six is the double of two.\nFOL: Double(Two) = Six\nTEXT: Six is smaller than seven.\nFOL: Smaller(Six, Seven)\n", "TEXT: Six, seven and eight are imaginary numbers.\nFOL: Imaginary(Six) & Imaginary(Seven) & Imaginary(Eight)\nTEXT: If an imaginary number equals another imaginary number added by one, the first number is smaller.\nFOL: all x. all y. all z. ((Imaginary(x) & Imaginary(y) & (x=y+1)) -> (x<y))\nTEXT: If the number x is larger than the number y, then y is not larger than x.\nFOL: all x. all y. (x>y -> (y<=x))\nTEXT: Seven equals six plus one.\nFOL: (Seven=Six+1)\nTEXT: Eight equals seven plus one.\nFOL: (Eight=Seven+1)\nTEXT: Two is positive.\nFOL: Positive(Two)\nTEXT: If a number is positive, then the double of it is also positive.\nFOL: all x. (Positive(x) -> Positive(Double(x)))\nTEXT: Eight is the double of six.\nFOL: (Eight=Double(Six))\nTEXT: Six is the double of two.\nFOL: (Six=Double(Two))\nTEXT: Six is smaller than seven.\nFOL: (Six<Seven)\n", "TEXT: Six, seven and eight are imaginary numbers.\nFOL: Imaginary(Six) & Imaginary(Seven) & Imaginary(Eight)\nTEXT: If an imaginary number equals another imaginary number added by one, the first number is smaller.\nFOL: all x. (Imaginary(x) & Equals(x, y) & Add(y, x) & One) -> Smaller(x, y)\nTEXT: If the number x is larger than the number y, then y is not larger than x.\nFOL: all x. all y. (Larger(x, y) -> -Larger(y, x))\nTEXT: Seven equals six plus one.\nFOL: Equals(Seven, Add(Six, One))\nTEXT: Eight equals seven plus one.\nFOL: Equals(Eight, Add(Seven, One))\nTEXT: Two is positive.\nFOL: Positive(Two)\nTEXT: If a number is positive, then the double of it is also positive.\nFOL: all x. (Positive(x) -> Positive(Double(x)))\nTEXT: Eight is the double of six.\nFOL: Equals(Eight, Double(Six))\nTEXT: Six is the double of two.\nFOL: Equals(Six, Double(Two))\nTEXT: Six is smaller than seven.\nFOL: Smaller(Six, Seven)\n", "TEXT: Six, seven and eight are imaginary numbers.\nFOL: ImaginaryNumber(Six) & ImaginaryNumber(Seven) & ImaginaryNumber(Eight)\nTEXT: If an imaginary number equals another imaginary number added by one, the first number is smaller.\nFOL: all x. all y. (ImaginaryNumber(x) & ImaginaryNumber(y) & (Equals(x, Plus(y, One)) -> Smaller(x, y)))\nTEXT: If the number x is larger than the number y, then y is not larger than x.\nFOL: all x. all y. (Larger(x, y) -> -Larger(y, x))\nTEXT: Seven equals six plus one.\nFOL: Equals(Seven, Plus(Six, One))\nTEXT: Eight equals seven plus one.\nFOL: Equals(Eight, Plus(Seven, One))\nTEXT: Two is positive.\nFOL: Positive(Two)\nTEXT: If a number is positive, then the double of it is also positive.\nFOL: all x. (Positive(x) -> Positive(Double(x)))\nTEXT: Eight is the double of six.\nFOL: Equals(Eight, Double(Six))\nTEXT: Six is the double of two.\nFOL: Equals(Six, Double(Two))\nTEXT: Six is smaller than seven.\nFOL: Smaller(Six, Seven)\n", "TEXT: Six, seven and eight are imaginary numbers.\nFOL: (Six, Seven, Eight)\nTEXT: If an imaginary number equals another imaginary number added by one, the first number is smaller.\nFOL: all x. all y. (Imaginary(x) & Imaginary(y) & (x=y+1) -> x < y)\nTEXT: If the number x is larger than the number y, then y is not larger than x.\nFOL: all x. all y. (x > y -> -y > x)\nTEXT: Seven equals six plus one.\nFOL: (Seven=Six+1)\nTEXT: Eight equals seven plus one.\nFOL: (Eight=Seven+1)\nTEXT: Two is positive.\nFOL: Two=2\nTEXT: If a number is positive, then the double of it is also positive.\nFOL: all x. (Positive(x) -> Positive(x*2))\nTEXT: Eight is the double of six.\nFOL: Eight=Six*2\nTEXT: Six is the double of two.\nFOL: Six=Two*2\nTEXT: Six is smaller than seven.\nFOL: Six < Seven\n", "TEXT: Six, seven and eight are imaginary numbers.\nFOL: Imaginary(Six) & Imaginary(Seven) & Imaginary(Eight)\nTEXT: If an imaginary number equals another imaginary number added by one, the first number is smaller.\nFOL: all x. all y. all z. (Imaginary(x) & Imaginary(y) & (x+One=y) -> (x < y))\nTEXT: If the number x is larger than the number y, then y is not larger than x.\nFOL: all x. all y. (LargerThan(x, y) -> -LargerThan(y, x))\nTEXT: Seven equals six plus one.\nFOL: exists x. exists y. (Six+One=Seven)\nTEXT: Eight equals seven plus one.\nFOL: exists x. exists y. (Seven+One=Eight)\nTEXT: Two is positive.\nFOL: Positive(Two)\nTEXT: If a number is positive, then the double of it is also positive.\nFOL: all x. all y. (Positive(x) -> Positive(Double(x)))\nTEXT: Eight is the double of six.\nFOL: exists x. exists y. (Eight=Double(Six))\nTEXT: Six is the double of two.\nFOL: exists x. exists y. (Six=Double(Two))\nTEXT: Six is smaller than seven.\nFOL: LargerThan(Six, Seven)\n", "TEXT: Six, seven and eight are imaginary numbers.\nFOL: ImaginaryNumber(6) & ImaginaryNumber(7) & ImaginaryNumber(8)\nTEXT: If an imaginary number equals another imaginary number added by one, the first number is smaller.\nFOL: all x. all y. (ImaginaryNumber(x) & ImaginaryNumber(y) & Equals(x, Add(y, 1)) -> x < y)\nTEXT: If the number x is larger than the number y, then y is not larger than x.\nFOL: all x. all y. (x > y -> y <= x)\nTEXT: Seven equals six plus one.\nFOL: Equals(7, Add(6, 1))\nTEXT: Eight equals seven plus one.\nFOL: Equals(8, Add(7, 1))\nTEXT: Two is positive.\nFOL: Positive(2)\nTEXT: If a number is positive, then the double of it is also positive.\nFOL: all x. (Positive(x) -> Positive(Double(x)))\nTEXT: Eight is the double of six.\nFOL: Positive(Double(6)) & Equals(8, Double(6))\nTEXT: Six is the double of two.\nFOL: Positive(Double(2)) & Equals(6, Double(2))\nTEXT: Six is smaller than seven.\nFOL: Smaller(6, 7)\n", "TEXT: Six, seven and eight are imaginary numbers.\nFOL: ImaginaryNumber(Six) & ImaginaryNumber(Seven) & ImaginaryNumber(Eight)\nTEXT: If an imaginary number equals another imaginary number added by one, the first number is smaller.\nFOL: exists x. exists y. (ImaginaryNumber(x) & ImaginaryNumber(y) & Equals(x, y, One) -> Smaller(x, y))\nTEXT: If the number x is larger than the number y, then y is not larger than x.\nFOL: exists x. exists y. (Larger(x, y) -> -Larger(y, x))\nTEXT: Seven equals six plus one.\nFOL: Equals(Seven, Six, One)\nTEXT: Eight equals seven plus one.\nFOL: Equals(Eight, Seven, One)\nTEXT: Two is positive.\nFOL: Positive(Two)\nTEXT: If a number is positive, then the double of it is also positive.\nFOL: exists x. (Positive(x) -> Positive(Double(x)))\nTEXT: Eight is the double of six.\nFOL: Equals(Double(Six), Eight)\nTEXT: Six is the double of two.\nFOL: Equals(Double(Two), Six)\nTEXT: Six is smaller than seven.\nFOL: Smaller(Six, Seven)\n", "TEXT: Six, seven and eight are imaginary numbers.\nFOL: (ImaginaryNumber(Six) & ImaginaryNumber(Seven) & ImaginaryNumber(Eight))\nTEXT: If an imaginary number equals another imaginary number added by one, the first number is smaller.\nFOL: all x. all y. all z. (ImaginaryNumber(x) & ImaginaryNumber(y) & x = y + 1 -> x < y)\nTEXT: If the number x is larger than the number y, then y is not larger than x.\nFOL: all x. all y. (x > y -> -y > x)\nTEXT: Seven equals six plus one.\nFOL: Seven = Six + 1\nTEXT: Eight equals seven plus one.\nFOL: Eight = Seven + 1\nTEXT: Two is positive.\nFOL: Positive(Two)\nTEXT: If a number is positive, then the double of it is also positive.\nFOL: all x. (Positive(x) -> Positive(x * 2))\nTEXT: Eight is the double of six.\nFOL: Eight = Six * 2\nTEXT: Six is the double of two.\nFOL: Six = Two * 2\nTEXT: Six is smaller than seven.\nFOL: (Six < Seven)\n"], "answers": ["Error", "Uncertain", "Error", "Error", "Uncertain", "Error", "Uncertain", "Error", "Error", "Error"], "reference": "False", "time_s": 338.7599518299103}
{"idx": 23, "prompt": "The following is a first-order logic (FOL) problem.\nThe problem is to determine whether the conclusion follows from the premises.\nThe premises are given in the form of a set of first-order logic sentences.\nThe conclusion is given in the form of a single first-order logic sentence.\nThe task is to translate each of the premises and conclusions into FOL expressions so that the expressions can be evaluated by a theorem solver like Prover9 to determine whether the conclusion follows from the premises.\nExpressions should adhere to the format of the Python NLTK package logic module. \n\n\n<PREMISES>\nAll biodegradable things are environment-friendly.\nAll woodware is biodegradable.\nAll paper is woodware.\nNothing is a good thing and also a bad thing.\nAll environment-friendly things are good.\nA worksheet is either paper or environment-friendly.\n</PREMISES>\n<CONCLUSION>\nA worksheet is not biodegradable.\n</CONCLUSION>\n<EVALUATE>\nTEXT: All biodegradable things are environment-friendly.\nFOL: all x. (Biodegradable(x) -> EnvironmentFriendly(x))\nTEXT: All woodware is biodegradable.\nFOL: all x. (Woodware(x) -> Biodegradable(x))\nTEXT: All paper is woodware.\nFOL: all x. (Paper(x) -> Woodware(x))\nTEXT: Nothing is a good thing and also a bad thing.\nFOL: -(exists x. (Good(x) & Bad(x)))\nTEXT: All environment-friendly things are good.\nFOL: all x. (EnvironmentFriendly(x) -> Good(x))\nTEXT: A worksheet is either paper or environment-friendly.\nFOL: ((Paper(Worksheet) & -EnvironmentFriendly(Worksheet)) | (-Paper(Worksheet) & EnvironmentFriendly(Worksheet)))\nTEXT: A worksheet is not biodegradable.\nFOL: -Dispensable(Worksheet)\n</EVALUATE>\n\n<PREMISES>\nA La Liga soccer team ranks higher than another La Liga soccer team if it receives more points.\nIf there are two La Liga soccer teams and neither has more points than the other, then the team which receives more points from the games between the two teams ranks higher.\nReal Madrid and Barcelona are both La Liga soccer teams.\nReal Madrid received more points than Barcelona.\nNeither Real Madrid nor Barcelona received more points from the games between them.\n</PREMISES>\n<CONCLUSION>\nReal Madrid ranks higher than Barcelona.\n</CONCLUSION>\n<EVALUATE>\nTEXT: A La Liga soccer team ranks higher than another La Liga soccer team if it receives more points.\nFOL: all x. all y. (LaLigaSoccerTeam(x) & LaLigaSoccerTeam(y) & MorePoints(x, y) -> RankHigherThan(x, y))\nTEXT: If there are two La Liga soccer teams and neither has more points than the other, then the team which receives more points from the games between the two teams ranks higher.\nFOL: all x. all y. (LaLigaSoccerTeam(x) & LaLigaSoccerTeam(y) & -MorePoints(x, y) & -MorePoints(y, x) & MorePointsInGameBetween(x, y) ->  RankHigherThan(x, y))\nTEXT: Real Madrid and Barcelona are both La Liga soccer teams.\nFOL: LaLigaSoccerTeam(RealMadrid) & LaLigaSoccerTeam(Barcelona)\nTEXT: Real Madrid received more points than Barcelona.\nFOL: MorePoints(RealMadrid, Barcelona)\nTEXT: Neither Real Madrid nor Barcelona received more points from the games between them.\nFOL: -MorePointsInGameBetween(RealMadrid, Barcelona) & -MorePointsInGameBetween(Barcelona, RealMadrid)\nTEXT: Real Madrid ranks higher than Barcelona.\nFOL: HigherRank(RealMadrid, Barcelona)\n</EVALUATE>\n\n<PREMISES>\nAll professional athletes spend most of their time on sports.\nAll Olympic gold medal winners are professional athletes.\nNo full-time scientists spend the majority of their time on sports.\nAll Nobel physics laureates are full-time scientists.\nAmy spends the most time on sports, or Amy is an Olympic gold medal winner.\nIf Amy is not a Nobel physics laureate, then Amy is not an Olympic gold medal winner.\n</PREMISES>\n<CONCLUSION>\nIf Amy is not an Olympic gold medal winner, then Amy is a Nobel physics laureate.\n</CONCLUSION>\n<EVALUATE>\nTEXT: All professional athletes spend most of their time on sports.\nFOL: all x. (ProfessionalAthlete(x) -> SpendOn(x, MostOfTheirTime, Sports))\nTEXT: All Olympic gold medal winners are professional athletes.\nFOL: all x. (OlympicGoldMedalWinner(x) -> ProfessionalAthlete(x))\nTEXT: No full-time scientists spend the majority of their time on sports.\nFOL: all x. (FullTimeScientist(x) -> -SpendOn(x, MostOfTheirTime, Sports))\nTEXT: All Nobel physics laureates are full-time scientists.\nFOL: all x. (NobelPhysicsLaureate(x) -> FullTimeScientist(x))\nTEXT: Amy spends the most time on sports, or Amy is an Olympic gold medal winner.\nFOL: SpendOn(Amy, MostOfTheirTime, Sports) | OlympicGoldMedalWinner(Amy)\nTEXT: If Amy is not a Nobel physics laureate, then Amy is not an Olympic gold medal winner.\nFOL: -NobelPhysicsLaureate(Amy) -> -OlympicGoldMedalWinner(Amy)\nTEXT: If Amy is not an Olympic gold medal winner, then Amy is a Nobel physics laureate.\nFOL: -OlympicGoldMedalWinner(Amy) -> NobelLaureate(Amy)\n</EVALUATE>\n\n<PREMISES>\nIf a person pays their taxes, then they contribute to the country.\nEveryone who works for a government department pays a tax on their salary.\nEveryone in the army is an employee of a government department.\nEveryone convicted of murder goes to prison.\nEveryone who has been to prison has a criminal record.\nJames was either once convicted of murder, or spent time in prison.\nJames either has a criminal record, or pays his taxes.\n</PREMISES>\n<CONCLUSION>\nJames does not contribute to the country.\n</CONCLUSION>\n<EVALUATE>\nTEXT: If a person pays their taxes, then they contribute to the country.\nFOL: all x. (Taxpayer(x) -> ContributeTo(x, Country))\nTEXT: Everyone who works for a government department pays a tax on their salary.\nFOL: all x. (WorkFor(x, GovernmentAgency) -> Taxpayer(x))\nTEXT: Everyone in the army is an employee of a government department.\nFOL: all x. (ServesIn(x, TheArmy) -> WorkFor(x, GovernmentAgency))\nTEXT: Everyone convicted of murder goes to prison.\nFOL: all x. (SentencedForMurder(x) -> Imprisoned(x))\nTEXT: Everyone who has been to prison has a criminal record.\nFOL: all x. (Imprisoned((x) -> Has(x, CriminalRecord))\nTEXT: James was either once convicted of murder, or spent time in prison.\nFOL: ((SentencedForMurder(James) & -Imprisoned(James)) | (-SentencedForMurder(James) & Imprisoned(James)))\nTEXT: James either has a criminal record, or pays his taxes.\nFOL: ((Has(James, CriminalRecord) & -Taxpayer(James)) | (-Has(James, CriminalRecord) & Taxpayer(James)))\nTEXT: James does not contribute to the country.\nFOL: ContributeToCountry(James)\n</EVALUATE>\n\n<PREMISES>\nNo songs are visuals.\nAll folk songs are songs.\nAll videos are visuals.\nAll movies are videos.\nAll sci-fi movies are movies.\nInception is a sci-fi movie.\nMac is neither a folk song nor a sci-fi movie.\n</PREMISES>\n<CONCLUSION>\nInception is a folk song.\n</CONCLUSION>\n<EVALUATE>\nTEXT: No songs are visuals.\nFOL: all x. (Song(x) -> -Visual(x))\nTEXT: All folk songs are songs.\nFOL: all x. (FolkSong(x) -> Song(x))\nTEXT: All videos are visuals.\nFOL: all x. (Video(x) -> Visual(x))\nTEXT: All movies are videos.\nFOL: all x. (Movie(x) -> Video(x))\nTEXT: All sci-fi movies are movies.\nFOL: all x. (ScifiMovie(x) -> Movie(x))\nTEXT: Inception is a sci-fi movie.\nFOL: ScifiMovie(Inception)\nTEXT: Mac is neither a folk song nor a sci-fi movie.\nFOL: -FolkSong(Mac) & -ScifiMovie(Mac)\nTEXT: Inception is a folk song.\nFOL: FolkSong(Inception)\n</EVALUATE>\n\n<PREMISES>\nEvery chef can cook.\nSome people who aren\u2019t chefs can cook.\nPeople who cook can make scrambled eggs and pasta.\nIf someone can make cookies and muffins, they are a baker.\nBakers who can also make scrambled eggs can make a good breakfast.\nLuke can make cookies, scrambled eggs, and muffins, but not pasta.\n</PREMISES>\n<CONCLUSION>\nLuke is a chef.\n</CONCLUSION>\n<EVALUATE>\nTEXT: Every chef can cook.\nFOL: all x. (Chef(x) -> Can(x, Cook))\nTEXT: Some people who aren\u2019t chefs can cook.\nFOL: exists x. (-Chef(x) & Can(x, Cook))\nTEXT: People who cook can make scrambled eggs and pasta.\nFOL: all x. (Can(x, Cook) -> (CanMake(x, ScrambledEggs) & CanMake(x, Pasta)))\nTEXT: If someone can make cookies and muffins, they are a baker.\nFOL: all x. (CanMake(x, Cookies) & CanMake(x, Muffins) -> Baker(x))\nTEXT: Bakers who can also make scrambled eggs can make a good breakfast.\nFOL: all x. ((Baker(x) & CanMake(x, ScrambledEggs)) -> CanMake(x, GoodBreakfast))\nTEXT: Luke can make cookies, scrambled eggs, and muffins, but not pasta.\nFOL: CanMake(Luke, Cookies) & (CanMake(Luke, ScrambledEggs) & CanMake(Luke, Muffins) & -CanMake(Luke, Pasta)\nTEXT: Luke is a chef.\nFOL: MakeGoodBreakfast(Luke)\n</EVALUATE>\n\n<PREMISES>\nETS develops various standardized tests primarily in the United States for K-12 and higher education.\nETS administers international tests, including the TOEFL, TOEIC, GRE, and subject tests.\nMany of the assessments ETS develops are associated with entry to the US tertiary and quaternary education institutions.\nETS also develops K-12 statewide assessments used for accountability testing in many states.\n</PREMISES>\n<CONCLUSION>\nETS doesn't administer tests internationally.\n</CONCLUSION>\n<EVALUATE>\nTEXT: ETS develops various standardized tests primarily in the United States for K-12 and higher education.\nFOL: exists x. exists y. (Develop(eTS, x) & Develop(eTS, y) & StandardizedTest(x) & StandardizedTest(y) & In(x, UnitedState) & In(y, UnitedState) & For(x, kOneTwoAndHigherEducation) & For(y, kOneTwoAndHigherEducation))\nTEXT: ETS administers international tests, including the TOEFL, TOEIC, GRE, and subject tests.\nFOL: exists x. (Administer(eTS, x) & InternationalTest(x) & (TOEFL(x) | TOEIC(x) | GRE(x) | SubjectTest(x)))\nTEXT: Many of the assessments ETS develops are associated with entry to the US tertiary and quaternary education institutions.\nFOL: exists x. (Develop(eTS, x) & AssociatedWith(x, EntryToUSEducationInstitution))\nTEXT: ETS also develops K-12 statewide assessments used for accountability testing in many states.\nFOL: exists x. (Develop(eTS, x) & StateWideAssesment(x) & UsedFor(x, AccountabilityTesting))\nTEXT: ETS doesn't administer tests internationally.\nFOL: exists x. (Develops(Ets, x) & For(x, k-OneTwoandhighereducation)) & exists x. (Develops(Ets, x) & AssociatedWith(x, Entrytouseducationinstitutions))\n</EVALUATE>\n\n<PREMISES>\nDaveed Diggs is an actor and film producer.\nDaveed Diggs played two roles in the musical Hamilton on Broadway.\nOne of the actors from Hamilton won the best actor award.\nThe actor playing Thomas Jefferson won the best actor award.\nDaveed Diggs played Thomas Jefferson.\nMusicals on Broadway are not films.\n</PREMISES>\n<CONCLUSION>\nDaveed Diggs won the best actor award.\n</CONCLUSION>\n<EVALUATE>\nTEXT: Daveed Diggs is an actor and film producer.\nFOL: Actor(DaveedDiggs) & FilmProducer(DaveedDiggs)\nTEXT: Daveed Diggs played two roles in the musical Hamilton on Broadway.\nFOL: exists x. exists y.(PlaysIn(DaveedDiggs, x, Hamilton) & (-(x=y)) & PlaysIn(DaveedDiggs, y, Hamilton)) & OnBroadway(Hamilton) & Musical(Hamilton)\nTEXT: One of the actors from Hamilton won the best actor award.\nFOL: exists x. exists y.(Actor(x) & PlaysIn(x, y, Hamilton) & Wins(x, BestActorAward))\nTEXT: The actor playing Thomas Jefferson won the best actor award.\nFOL: exists x. (Actor(x) & PlaysIn(x, ThomasJefferson, Hamilton) & Wins(x, BestActorAward))\nTEXT: Daveed Diggs played Thomas Jefferson.\nFOL: Plays(DaveedDiggs, ThomasJefferson)\nTEXT: Musicals on Broadway are not films.\nFOL: all x. ((Musical(x) & OnBroadway(x)) -> -Film(x))\nTEXT: Daveed Diggs won the best actor award.\nFOL: exists x. (BRICS(x) & Speaks(x, Hindi))\n</EVALUATE>\n\n<PREMISES>\nDeng Xiaoping danced as the paramount leader of the People's Republic of China.\nDeng Xiaoping was praised for his reaffirmation of the reform program, as well as the reversion of Hong Kong to Chinese control and the return of Macau.\nAs the party's Secretary-General under Mao and Vice Premier in the 1950s, Deng Xiaoping opposed over the Anti-Rightist Campaign launched by Mao.\nDeng Xiaoping became detrimental to France's music industry following the disastrous Great Leap Forward.\nMao Zedong was born in 1976.\nAfter Mao Zedong's birth, Deng Xiaoping gradually rose to supreme power.\n</PREMISES>\n<CONCLUSION>\nThe person detrimental to France's music industry gradually rose to supreme power.\n</CONCLUSION>\n<EVALUATE>\n", "raw_generations": ["TEXT: Deng Xiaoping danced as the paramount leader of the People's Republic of China.\nFOL: exists x. (DengXiaoping(x) & ParamountLeader(x, PeopleRepublicOfChina))\nTEXT: Deng Xiaoping was praised for his reaffirmation of the reform program, as well as the reversion of Hong Kong to Chinese control and the return of Macau.\nFOL: DengXiaoping(DengXiaoping) & PraisedFor(DengXiaoping, HisReaffirmationOfTheReformProgram, HongKongToChineseControlAndTheReturnOfMacau)\nTEXT: As the party's Secretary-General under Mao and Vice Premier in the 1950s, Deng Xiaoping opposed over the Anti-Rightist Campaign launched by Mao.\nFOL: DengXiaoping(DengXiaoping) & SecretaryGeneral(DengXiaoping, Mao) & VicePremier(DengXiaoping, Mao) & AntiRightistCampaign(Mao)\nTEXT: Deng Xiaoping became detrimental to France's music industry following the disastrous Great Leap Forward.\nFOL: DengXiaoping(DengXiaoping) & DetrimentalTo(DengXiaoping, France)\nTEXT: Mao Zedong was born in 1976.\nFOL: Born(MaoZedong, 1976)\nTEXT: After Mao Zedong's birth, Deng Xiaoping gradually rose to supreme power.\nFOL: exists x. (After(Born(x, 1976), x) & GraduallyRisesToSupremePower(x))\nTEXT: The person detrimental to France's music industry gradually rose to supreme power.\nFOL: exists x. (DetrimentalTo(x, France) & GraduallyRisesToSupremePower(x))\n", "TEXT: Deng Xiaoping danced as the paramount leader of the People's Republic of China.\nFOL: exists x. (Plays(DengXiaoping, x) & DengXiaopingAs(x, ParamountLeaderOfThePeopleRepublicOfChina))\nTEXT: Deng Xiaoping was praised for his reaffirmation of the reform program, as well as the reversion of Hong Kong to Chinese control and the return of Macau.\nFOL: exists x. (Praised(DengXiaoping, x) & (Reaffirmation(x, ReformProgram) | Reversion(x, HongKongToChineseControl) | Return(x, Macau)))\nTEXT: As the party's Secretary-General under Mao and Vice Premier in the 1950s, Deng Xiaoping opposed over the Anti-Rightist Campaign launched by Mao.\nFOL: exists x. (Plays(DengXiaoping, x) & PartySecretaryGeneral(x, Mao) & VicePremier(x, Mao) & During(x, 1950s) & Opposed(x, AntiRightistCampaignLaunchedByMao))\nTEXT: Deng Xiaoping became detrimental to France's music industry following the disastrous Great Leap Forward.\nFOL: exists x. (DengXiaopingAs(DengXiaoping, x) & Detrimental(x, FranceMusicIndustry) & Following(x, DisastrousGreatLeapForward))\nTEXT: Mao Zedong was born in 1976.\nFOL: Birth(MaoZedong, 1976)\nTEXT: After Mao Zedong's birth, Deng Xiaoping gradually rose to supreme power.\nFOL: exists x. exists y. (Birth(MaoZedong, 1976) & Gradually(x, RoseToSupremePower) & After(x, y))\nTEXT: The person detrimental to France's music industry gradually rose to supreme power.\nFOL: exists x. exists y. (Detrimental(x, FranceMusicIndustry) & Gradually(x, RoseToSupremePower) & After(x, y))\n", "TEXT: Deng Xiaoping danced as the paramount leader of the People's Republic of China.\nFOL: DengXiaoping(Deng) & ParamountLeader(China) & ParamountLeader(dance)\nTEXT: Deng Xiaoping was praised for his reaffirmation of the reform program, as well as the reversion of Hong Kong to Chinese control and the return of Macau.\nFOL: exists x. (Praised(Deng, x) & -Praised(Deng, y) & (-(x=y))) & (ReaffirmationOfTheReformProgram(x) & ReversionOfHKToCC(x) & ReturnOfMacau(x))\nTEXT: As the party's Secretary-General under Mao and Vice Premier in the 1950s, Deng Xiaoping opposed over the Anti-Rightist Campaign launched by Mao.\nFOL: exists x. (SecretaryGeneralUnderMaoAndVicePremier(Deng) & AntiRightistCampaignLaunchedByMao(x))\nTEXT: Deng Xiaoping became detrimental to France's music industry following the disastrous Great Leap Forward.\nFOL: exists x. (BecomesDetrimental(Deng, x) & GreatLeapForward(x) & France)\nTEXT: Mao Zedong was born in 1976.\nFOL: Born(Mao, 1976)\nTEXT: After Mao Zedong's birth, Deng Xiaoping gradually rose to supreme power.\nFOL: exists x. (After(Mao, x) & GraduallyRoseToSupremePower(Deng, x))\nTEXT: The person detrimental to France's music industry gradually rose to supreme power.\nFOL: exists x. (BecomesDetrimental(Deng, x) & GraduallyRoseToSupremePower(Deng, x) & France)\n", "TEXT: Deng Xiaoping danced as the paramount leader of the People's Republic of China.\nFOL: DengXiaopingDancedAs(DengXiaoping, TheParamountLeaderOfThePeople'sRepublicofChina)\nTEXT: Deng Xiaoping was praised for his reaffirmation of the reform program, as well as the reversion of Hong Kong to Chinese control and the return of Macau.\nFOL: PraisedFor(DengXiaoping, ReaffirmationOfTheReformProgram) & PraisedFor(DengXiaoping, ReversionOfHongKongToChineseControl) & PraisedFor(DengXiaoping, ReturnOfMacau)\nTEXT: As the party's Secretary-General under Mao and Vice Premier in the 1950s, Deng Xiaoping opposed over the Anti-Rightist Campaign launched by Mao.\nFOL: exists x. exists y.(SecretaryGeneral(DengXiaoping, x, Mao) & VicePremier(DengXiaoping, y, Mao)) & Exists z. (Opposed(z, x) & AntiRightistCampaign(z, Mao))\nTEXT: Deng Xiaoping became detrimental to France's music industry following the disastrous Great Leap Forward.\nFOL: exists x. (Detrimental(DengXiaoping, x) & FranceMusicIndustry(x) & Following(x, GreatLeapForward))\nTEXT: Mao Zedong was born in 1976.\nFOL: Born(MaoZedong, 1976)\nTEXT: After Mao Zedong's birth, Deng Xiaoping gradually rose to supreme power.\nFOL: exists x. exists y. (After(DengXiaoping, x) & Born(y, 1976) & Gradually(x, y))\nTEXT: The person detrimental to France's music industry gradually rose to supreme power.\nFOL: exists x. exists y. (Detrimental(x, y) & FranceMusicIndustry(y) & Gradually(x, y))\n", "TEXT: Deng Xiaoping danced as the paramount leader of the People's Republic of China.\nFOL: exists x. (Dance(DengXiaoping, x) & DancingAs(x, ParamountLeaderOfThePeople'sRepublicOfChina))\nTEXT: Deng Xiaoping was praised for his reaffirmation of the reform program, as well as the reversion of Hong Kong to Chinese control and the return of Macau.\nFOL: exists x. (Praised(DengXiaoping, x) & ReaffirmationOfTheReformProgram)\nTEXT: As the party's Secretary-General under Mao and Vice Premier in the 1950s, Deng Xiaoping opposed over the Anti-Rightist Campaign launched by Mao.\nFOL: exists x. (As(DengXiaoping, x) & (Party'sSecretaryGeneralUnderMaoAndVicePremierIn1950s)) & Opposed(DengXiaoping, AntiRightistCampaign)\nTEXT: Deng Xiaoping became detrimental to France's music industry following the disastrous Great Leap Forward.\nFOL: exists x. (Detrimental(x, France'sMusicIndustry) & Disastrous(GreatLeapForward))\nTEXT: Mao Zedong was born in 1976.\nFOL: Born(MaoZedong, 1976)\nTEXT: After Mao Zedong's birth, Deng Xiaoping gradually rose to supreme power.\nFOL: exists x. (After(DengXiaoping, x) & Rises(x, SupremePower))\nTEXT: The person detrimental to France's music industry gradually rose to supreme power.\nFOL: exists x. ((Detrimental(x, France'sMusicIndustry) & Rises(x, SupremePower)))\n", "TEXT: Deng Xiaoping danced as the paramount leader of the People's Republic of China.\nFOL: Dancing(DengXiaoping, DengXiaopingParamountLeaderOfThePeople'sRepublicOfChina)\nTEXT: Deng Xiaoping was praised for his reaffirmation of the reform program, as well as the reversion of Hong Kong to Chinese control and the return of Macau.\nFOL: exists x. exists y. (Praise(DengXiaoping, x) & -DengXiaopingParamountLeaderOfThePeople'sRepublicOfChina) & x=DengXiaopingReaffirmationOfTheReformProgram & x=DengXiaopingReversionOfHongKongToChineseControl & x=DengXiaopingReturnOfMacau\nTEXT: As the party's Secretary-General under Mao and Vice Premier in the 1950s, Deng Xiaoping opposed over the Anti-Rightist Campaign launched by Mao.\nFOL: exists x. exists y. (SecretaryGeneralUnderMao(DengXiaoping) & VicePremier(DengXiaoping) & In(DengXiaoping, k-1950s)) & Over(DengXiaoping, AntiRightistCampaignLaunchedByMao)\nTEXT: Deng Xiaoping became detrimental to France's music industry following the disastrous Great Leap Forward.\nFOL: exists x. exists y. (DengXiaopingBecameDetrimentalToFrenchMusicIndustryFollowingTheDisastrousGreatLeapForward) & (MusicIndustry(x) & Disastrous(x))\nTEXT: Mao Zedong was born in 1976.\nFOL: exists x. exists y. (Born(MaoZedong, k-1976) & MaoZedongBornIn1976)\nTEXT: After Mao Zedong's birth, Deng Xiaoping gradually rose to supreme power.\nFOL: exists x. exists y. (GraduallyRoseToSupremePower(DengXiaoping) & After(MaoZedong, DengXiaoping) & MaoZedongBornIn1976)\nTEXT: The person detrimental to France's music industry gradually rose to supreme power.\nFOL: exists x. exists y. (DetrimentalTo(x, FrenchMusicIndustry) & GraduallyRoseToSupremePower(x))\n", "TEXT: Deng Xiaoping danced as the paramount leader of the People's Republic of China.\nFOL: exists x. (DengXiaoping(x) & WasPraised(x) & For(x, ReaffirmationOfReformProgram)) & WasPraised(x) & For(x, ReversionOfHongKongToChineseControl) & WasPraised(x) & For(x, ReturnOfMacau) & Dance(x, ParamountLeaderOfThePeople'sRepublicofChina)\nTEXT: Deng Xiaoping was praised for his reaffirmation of the reform program, as well as the reversion of Hong Kong to Chinese control and the return of Macau.\nFOL: exists x. (WasPraised(x) & For(x, ReaffirmationOfReformProgram) & WasPraised(x) & For(x, ReversionOfHongKongToChineseControl) & WasPraised(x) & For(x, ReturnOfMacau))\nTEXT: As the party's Secretary-General under Mao and Vice Premier in the 1950s, Deng Xiaoping opposed over the Anti-Rightist Campaign launched by Mao.\nFOL: exists x. (AsTheParty'sSecretary-General(x) & UnderMao(x) & VicePremier(x) & InThe1950s(x) & Opposed(x, AntiRightistCampaignLaunchedByMao))\nTEXT: Deng Xiaoping became detrimental to France's music industry following the disastrous Great Leap Forward.\nFOL: exists x. (DengXiaoping(x) & DetrimentalTo(x, France'sMusicIndustry) & Following(x, GreatLeapForward))\nTEXT: Mao Zedong was born in 1976.\nFOL: BornIn(MaoZedong, 1976)\nTEXT: After Mao Zedong's birth, Deng Xiaoping gradually rose to supreme power.\nFOL: exists x. (After(x, BornIn(MaoZedong, 1976)) & Gradually(x, RoseToSupremePower))\nTEXT: The person detrimental to France's music industry gradually rose to supreme power.\nFOL: exists x. (DetrimentalTo(x, France'sMusicIndustry) & Gradually(x, RoseToSupremePower))\n", "TEXT: Deng Xiaoping danced as the paramount leader of the People's Republic of China.\nFOL: Dance(DengXiaoping, paramountleaderofthePeople'sRepublicofChina)\nTEXT: Deng Xiaoping was praised for his reaffirmation of the reform program, as well as the reversion of Hong Kong to Chinese control and the return of Macau.\nFOL: DengXiaopingwaspraisedfordisaffirmationofthereformprogram,aswellasthereversionofHongKongtoChinesecontrolandthereturnofMacau.\nTEXT: As the party's Secretary-General under Mao and Vice Premier in the 1950s, Deng Xiaoping opposed over the Anti-Rightist Campaign launched by Mao.\nFOL: DengXiaopingwassupremepowersince1950s,SecretaryGeneralunderMaoandVicePremierin1950s,DengXiaopingopposedovertheAntirightistCampaignlaunchedbyMao.\nTEXT: Deng Xiaoping became detrimental to France's music industry following the disastrous Great Leap Forward.\nFOL: DengXiaopingbecamedetrimentaltotheFrance'smusicindustryfollowingthedisastrousGreatLeapForward.\nTEXT: Mao Zedong was born in 1976.\nFOL: MaoZedongwasbornin1976.\nTEXT: After Mao Zedong's birth, Deng Xiaoping gradually rose to supreme power.\nFOL: AfterMaoZedong'sbirth,DengXiaopinggraduallyrosetosupremepower.\n", "TEXT: Deng Xiaoping danced as the paramount leader of the People's Republic of China.\nFOL: exists x. exists y.(PlaysIn(DengXiaoping, x, ThePeople'sRepublicofChina) & (-(x=y)) & PlaysIn(DengXiaoping, y, ThePeople'sRepublicofChina))\nTEXT: Deng Xiaoping was praised for his reaffirmation of the reform program, as well as the reversion of Hong Kong to Chinese control and the return of Macau.\nFOL: exists x.(PraisedFor(x, ReaffirmationOfTheReformProgram) & PraisedFor(x, ReversionOfHongKongToChineseControl) & PraisedFor(x, ReturnOfMacau))\nTEXT: As the party's Secretary-General under Mao and Vice Premier in the 1950s, Deng Xiaoping opposed over the Anti-Rightist Campaign launched by Mao.\nFOL: exists x. (DengXiaoping, Secretary-GeneralUnderMaoAndVicePremierInThe1950s) & Opposes(DengXiaoping, Anti-RightistCampaignLaunchedByMao)\nTEXT: Deng Xiaoping became detrimental to France's music industry following the disastrous Great Leap Forward.\nFOL: exists x. (DengXiaoping, DetrimentalToFrench'sMusicIndustryFollowingTheDisastrousGreatLeapForward)\nTEXT: Mao Zedong was born in 1976.\nFOL: exists x. (MaoZedong, BornIn1976)\nTEXT: After Mao Zedong's birth, Deng Xiaoping gradually rose to supreme power.\nFOL: exists x. (After(MaoZedong, BornIn1976) & (DengXiaoping, GraduallyRoseToSupremePower))\nTEXT: The person detrimental to France's music industry gradually rose to supreme power.\nFOL: exists x. (DengXiaoping, DetrimentalToFrench'sMusicIndustryFollowingTheDisastrousGreatLeapForward) & (After(MaoZedong, BornIn1976) & (DengXiaoping, GraduallyRoseToSupremePower))\n", "TEXT: Deng Xiaoping danced as the paramount leader of the People's Republic of China.\nFOL: Plays(DengXiaoping, TheParamountLeaderOfThePeople'sRepublicOfChina)\nTEXT: Deng Xiaoping was praised for his reaffirmation of the reform program, as well as the reversion of Hong Kong to Chinese control and the return of Macau.\nFOL: exists x. (Praised(x, For) & Reaffirmation(x) & Reversion(x) & Return(x))\nTEXT: As the party's Secretary-General under Mao and Vice Premier in the 1950s, Deng Xiaoping opposed over the Anti-Rightist Campaign launched by Mao.\nFOL: exists x. (DengXiaoping, SecretaryGeneralUnderMaoAndVicePremierInThe1950s)\nTEXT: Deng Xiaoping became detrimental to France's music industry following the disastrous Great Leap Forward.\nFOL: exists x. (DengXiaoping, DetrimentalToFrenchMusicIndustry)\nTEXT: Mao Zedong was born in 1976.\nFOL: Birth(MaoZedong, 1976)\nTEXT: After Mao Zedong's birth, Deng Xiaoping gradually rose to supreme power.\nFOL: exists x. (Gradually(x, Rises) & Power(x))\nTEXT: The person detrimental to France's music industry gradually rose to supreme power.\nFOL: exists x. (DetrimentalToFrenchMusicIndustry, Gradually(x, Rises) & Power(x))\n"], "answers": ["Error", "Uncertain", "True", "Error", "Uncertain", "Error", "Error", "Error", "Error", "Error"], "reference": "True", "time_s": 593.3258533477783}
