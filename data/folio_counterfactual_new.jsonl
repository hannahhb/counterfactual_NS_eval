{"premises": ["If people perform in school talent shows often, then they attend and are very engaged with school events.", "People either perform in school talent shows often or are inactive and disinterested members of their community.", "If people chaperone high school dances, then they are not students who attend the school.", "All people who are inactive and disinterested members of their community chaperone high school dances.", "All young children and teenagers who wish to further their academic careers and educational opportunities are students who attend the school.", "Bonnie either both attends and is very engaged with school events and is a student who attends the school, or she neither attends and is very engaged with school events nor is a student who attends the school. "], "premises-FOL": ["∀x (TalentShows(x) → Engaged(x))", "∀x (TalentShows(x) ∨ Inactive(x))", "∀x (Chaperone(x) → ¬Students(x))", "∀x (Inactive(x) → Chaperone(x))", "∀x (AcademicCareer(x) → Students(x))", "(Engaged(bonnie) ∧ Students(bonnie)) ⊕ (¬Engaged(bonnie) ∧ ¬Students(bonnie))"], "conclusion": "Bonnie performs in school talent shows often.", "conclusion-FOL": "Engaged(bonnie)", "label": "Uncertain", "premises_nouns_p": ["If people perform in school talent shows often, then they attend and are very engaged with school events.", "People either perform in school talent shows often or are inactive and disinterested members of their community.", "If people chaperone high school dances, then they are not students who attend the school.", "All people who are inactive and disinterested members of their community chaperone high school dances.", "All young children and teenagers who wish to further their academic careers and educational opportunities are students who attend the school.", "A rock either both attends and is very engaged with school events and is a student who attends the school, or she neither attends and is very engaged with school events nor is a student who attends the school."], "conclusion_nouns_p": "A rock performs in school talent shows often."}
{"premises": ["If people perform in school talent shows often, then they attend and are very engaged with school events.", "People either perform in school talent shows often or are inactive and disinterested members of their community.", "If people chaperone high school dances, then they are not students who attend the school.", "All people who are inactive and disinterested members of their community chaperone high school dances.", "All young children and teenagers who wish to further their academic careers and educational opportunities are students who attend the school.", "Bonnie either both attends and is very engaged with school events and is a student who attends the school, or she neither attends and is very engaged with school events nor is a student who attends the school. "], "premises-FOL": ["∀x (TalentShows(x) → Engaged(x))", "∀x (TalentShows(x) ∨ Inactive(x))", "∀x (Chaperone(x) → ¬Students(x))", "∀x (Inactive(x) → Chaperone(x))", "∀x (AcademicCareer(x) → Students(x))", "(Engaged(bonnie) ∧ Students(bonnie)) ⊕ (¬Engaged(bonnie) ∧ ¬Students(bonnie))"], "conclusion": "If Bonnie is either both a young child or teenager who wishes to further her academic career and educational opportunities and chaperones high school dances or neither is a young child nor teenager who wishes to further her academic career and educational opportunities, then Bonnie is either a student who attends the school or is an inactive and disinterested member of the community.", "conclusion-FOL": "AcademicCareer(bonnie) ⊕ Chaperone(bonnie) → AcademicCareer(bonnie) ⊕ Inactive(bonnie)", "label": "True", "premises_nouns_p": ["If squirrels perform in school talent shows often, then they attend and are very engaged with school events.", "Squirrels either perform in school talent shows often or are inactive and disinterested members of their community.", "If squirrels chaperone high school dances, then they are not acorns who attend the school.", "All squirrels who are inactive and disinterested members of their community chaperone high school dances.", "All young fungi and teenagers who wish to further their academic careers and educational opportunities are acorns who attend the school.", "Bonnie either both attends and is very engaged with school events and is a student who attends the school, or she neither attends and is very engaged with school events nor is a student who attends the school."], "conclusion_nouns_p": "If Bonnie is either both a young fungi or teenager who wishes to further her academic career and educational opportunities and chaperones high school dances or neither is a young fungi nor teenager who wishes to further her academic career and educational opportunities, then Bonnie is either a student who attends the school or is an inactive and disinterested member of the community."}
{"premises": ["If people perform in school talent shows often, then they attend and are very engaged with school events.", "People either perform in school talent shows often or are inactive and disinterested members of their community.", "If people chaperone high school dances, then they are not students who attend the school.", "All people who are inactive and disinterested members of their community chaperone high school dances.", "All young children and teenagers who wish to further their academic careers and educational opportunities are students who attend the school.", "Bonnie either both attends and is very engaged with school events and is a student who attends the school, or she neither attends and is very engaged with school events nor is a student who attends the school. "], "premises-FOL": ["∀x (TalentShows(x) → Engaged(x))", "∀x (TalentShows(x) ∨ Inactive(x))", "∀x (Chaperone(x) → ¬Students(x))", "∀x (Inactive(x) → Chaperone(x))", "∀x (AcademicCareer(x) → Students(x))", "(Engaged(bonnie) ∧ Students(bonnie)) ⊕ (¬Engaged(bonnie) ∧ ¬Students(bonnie))"], "conclusion": "If Bonnie either chaperones high school dances or, if she does not, she performs in school talent shows often, then Bonnie is both a young child or teenager who wishes to further her academic career and educational opportunities and an inactive and disinterested member of the community.", "conclusion-FOL": "Chaperone(bonnie) ⊕ TalentShows(bonnie) → AcademicCareer(bonnie) ∧ Inactive(bonnie))", "label": "False", "premises_nouns_p": ["If clouds perform in school talent shows often, then they attend and are very engaged with school events.", "Clouds either perform in school talent shows often or are inactive and disinterested members of their community.", "If clouds chaperone high school dances, then they are not students who attend the school.", "All clouds who are inactive and disinterested members of their community chaperone high school dances.", "All young children and teenagers who wish to further their academic careers and educational opportunities are students who attend the school.", "Bonnie either both attends and is very engaged with school events and is a student who attends the school, or she neither attends and is very engaged with school events nor is a student who attends the school."], "conclusion_nouns_p": "If Bonnie either chaperones high school dances or, if she does not, she performs in school talent shows often, then Bonnie is both a young child or teenager who wishes to further her academic career and educational opportunities and an inactive and disinterested member of the community."}
{"premises": ["All employees who schedule a meeting with their customers will appear in the company today. ", "Everyone who has lunch in the company schedules meetings with their customers. ", "Employees will either have lunch in the company or have lunch at home.", "If an employee has lunch at home, then he/she is working remotely from home.", "All employees who are in other countries work remotely from home. ", "No managers work remotely from home. ", "James is either a manager and appears in the company today or neither a manager nor appears in the company today."], "premises-FOL": ["∀x (Meeting(x) → AppearInCompany(x))", "∀x (LunchInCompany(x) → Meetings(x))", "∀x (LunchInCompany(x) ∨ LunchAtHome(x))", "∀x (LunchAtHome(x) → WorkRemotelyFromHome(x))", "∀x (InOtherCountries(x) → WorkRemotelyFromHome(x))", "∀x (Manager(x) → ¬WorkRemotelyFromHome(x))", "Manager(james) ⊕ AppearInCompany(james)"], "conclusion": "James has lunch in the company.", "conclusion-FOL": "LunchInCompany(james)", "label": "Uncertain", "premises_nouns_p": ["All robots who schedule a meeting with their customers will appear in the company today.", "Everyone who has lunch in the company schedules meetings with their customers.", "Robots will either have lunch in the company or have lunch at home.", "If a robot has lunch at home, then he/she is working remotely from home.", "All robots who are in other countries work remotely from home.", "No managers work remotely from home.", "James is either a manager and appears in the company today or neither a manager nor appears in the company today."], "conclusion_nouns_p": "James has lunch in the company."}
{"premises": ["All employees who schedule a meeting with their customers will appear in the company today. ", "Everyone who has lunch in the company schedules meetings with their customers. ", "Employees will either have lunch in the company or have lunch at home.", "If an employee has lunch at home, then he/she is working remotely from home.", "All employees who are in other countries work remotely from home. ", "No managers work remotely from home. ", "James is either a manager and appears in the company today or neither a manager nor appears in the company today."], "premises-FOL": ["∀x (Meeting(x) → AppearInCompany(x))", "∀x (LunchInCompany(x) → Meetings(x))", "∀x (LunchInCompany(x) ∨ LunchAtHome(x))", "∀x (LunchAtHome(x) → WorkRemotelyFromHome(x))", "∀x (InOtherCountries(x) → WorkRemotelyFromHome(x))", "∀x (Manager(x) → ¬WorkRemotelyFromHome(x))", "Manager(james) ⊕ AppearInCompany(james)"], "conclusion": "James does not have lunch in the company.", "conclusion-FOL": "¬LunchInCompany(james)", "label": "Uncertain", "premises_nouns_p": ["All employees who schedule a meeting with their customers will appear in the company today.", "Everyone who has lunch in the company schedules meetings with their customers.", "Employees will either have lunch in the company or have lunch at home.", "If an employee has lunch at home, then he/she is working remotely from home.", "All employees who are in other countries work remotely from home.", "No bananas work remotely from home.", "James is either a banana and appears in the company today or neither a banana nor appears in the company today."], "conclusion_nouns_p": "James does not have lunch in the company."}
{"premises": ["All employees who schedule a meeting with their customers will appear in the company today. ", "Everyone who has lunch in the company schedules meetings with their customers. ", "Employees will either have lunch in the company or have lunch at home.", "If an employee has lunch at home, then he/she is working remotely from home.", "All employees who are in other countries work remotely from home. ", "No managers work remotely from home. ", "James is either a manager and appears in the company today or neither a manager nor appears in the company today."], "premises-FOL": ["∀x (Meeting(x) → AppearInCompany(x))", "∀x (LunchInCompany(x) → Meetings(x))", "∀x (LunchInCompany(x) ∨ LunchAtHome(x))", "∀x (LunchAtHome(x) → WorkRemotelyFromHome(x))", "∀x (InOtherCountries(x) → WorkRemotelyFromHome(x))", "∀x (Manager(x) → ¬WorkRemotelyFromHome(x))", "Manager(james) ⊕ AppearInCompany(james)"], "conclusion": "If James is either a manager or in other countries,  then James either has lunch at home and works remotely from home, or neither has lunch at home nor works remotely from home.", "conclusion-FOL": "(Manager(james) ⊕ InOtherCountries(james)) → (LunchAtHome(james) ⊕ WorkRemotelyFromHome(james))", "label": "True", "premises_nouns_p": ["All robots who schedule a meeting with their customers will appear in the company today.", "Everyone who has lunch in the company schedules meetings with their customers.", "Robots will either have lunch in the company or have lunch at home.", "If a robot has lunch at home, then he/she is working remotely from home.", "All robots who are in other galaxies work remotely from home.", "No managers work remotely from home.", "James is either a manager and appears in the company today or neither a manager nor appears in the company today."], "conclusion_nouns_p": "If James is either a manager or in other galaxies, then James either has lunch at home and works remotely from home, or neither has lunch at home nor works remotely from home."}
{"premises": ["Monkeypox is an infectious disease caused by the monkeypox virus.", "Monkeypox virus can occur in certain animals, including humans.", "Humans are mammals.", "Mammals are animals.", "Symptons of Monkeypox include fever, headache, muscle pains, feeling tired, and so on.", "People feel tired when they get a glu."], "premises-FOL": ["∃x (OccurMonkeypoxVirus(x) ∧ GetMonkeypox(x))", "∃x (Animal(x) ∧ OccurMonkeypoxVirus(x))", "∀x (Human(x) → Mammal(x))", "∀x (Mammal(x) → Animal(x))", "∃x (GetMonkeypox(x) ∧ (Fever(x) ∨ Headache(x) ∨ MusclePain(x) ∨ Tired(x)))", "∀x (Human(x) ∧ Flu(x) → Tired(x))"], "conclusion": "There is an animal.", "conclusion-FOL": "∃x (Animal(x))", "label": "True", "premises_nouns_p": ["Monkeypox is an infectious disease caused by the monkeypox virus.", "Monkeypox virus can occur in certain furniture, including humans.", "Humans are mammals.", "Mammals are furniture.", "Symptons of Monkeypox include fever, headache, muscle pains, feeling tired, and so on.", "People feel tired when they get a glu."], "conclusion_nouns_p": "There is a furniture."}
{"premises": ["Monkeypox is an infectious disease caused by the monkeypox virus.", "Monkeypox virus can occur in certain animals, including humans.", "Humans are mammals.", "Mammals are animals.", "Symptons of Monkeypox include fever, headache, muscle pains, feeling tired, and so on.", "People feel tired when they get a glu."], "premises-FOL": ["∃x (OccurMonkeypoxVirus(x) ∧ GetMonkeypox(x))", "∃x (Animal(x) ∧ OccurMonkeypoxVirus(x))", "∀x (Human(x) → Mammal(x))", "∀x (Mammal(x) → Animal(x))", "∃x (GetMonkeypox(x) ∧ (Fever(x) ∨ Headache(x) ∨ MusclePain(x) ∨ Tired(x)))", "∀x (Human(x) ∧ Flu(x) → Tired(x))"], "conclusion": "No one gets flu.", "conclusion-FOL": "∀x (Human(x) → ¬Flu(x))", "label": "Uncertain", "premises_nouns_p": ["Monkeypox is an infectious disease caused by the monkeypox virus.", "Monkeypox virus can occur in certain animals, including bananas.", "Bananas are mammals.", "Mammals are animals.", "Symptons of Monkeypox include fever, headache, muscle pains, feeling tired, and so on.", "Bananas feel tired when they get a glu."], "conclusion_nouns_p": "No one gets flu."}
{"premises": ["Monkeypox is an infectious disease caused by the monkeypox virus.", "Monkeypox virus can occur in certain animals, including humans.", "Humans are mammals.", "Mammals are animals.", "Symptons of Monkeypox include fever, headache, muscle pains, feeling tired, and so on.", "People feel tired when they get a glu."], "premises-FOL": ["∃x (OccurMonkeypoxVirus(x) ∧ GetMonkeypox(x))", "∃x (Animal(x) ∧ OccurMonkeypoxVirus(x))", "∀x (Human(x) → Mammal(x))", "∀x (Mammal(x) → Animal(x))", "∃x (GetMonkeypox(x) ∧ (Fever(x) ∨ Headache(x) ∨ MusclePain(x) ∨ Tired(x)))", "∀x (Human(x) ∧ Flu(x) → Tired(x))"], "conclusion": "Symptons of Monkeypox include coughing.", "conclusion-FOL": "∃x (GetMonkeypox(x) ∧ Coughing(x))", "label": "Uncertain", "premises_nouns_p": ["Monkeypox is an infectious disease caused by the monkeypox virus.", "Monkeypox virus can occur in certain animals, including bananas.", "Bananas are mammals.", "Mammals are animals.", "Symptons of Monkeypox include fever, headache, muscle pains, feeling tired, and so on.", "Bananas feel tired when they get a glu."], "conclusion_nouns_p": "Symptons of Monkeypox include coughing."}
{"premises": ["There are six types of wild turkeys: Eastern wild turkey, Osceola wild turkey, Gould’s wild turkey, Merriam’s wild", "turkey, Rio Grande wild turkey, and Ocellated wild turkey.", "Tom is not an Eastern wild turkey.", "Tom is not an Osceola wild turkey.", "Tom is also not a Gould's wild turkey, or a Merriam's wild turkey, or a Rio Grande wild turkey.", "Tom is a wild turkey."], "premises-FOL": ["∀x (WildTurkey(x) → (Eastern(x) ∨ Osceola(x) ∨ Goulds(x) ∨ Merriams(x) ∨ Riogrande(x) ∨ Ocellated(x)))", "¬(WildTurkey(tom) ∧ Eastern(tom))", "¬(WildTurkey(tom) ∧ Osceola(tom))", "WildTurkey(tom) → ¬(Goulds(tom) ∨ Merriams(tom) ∨ Riogrande(tom))", "WildTurkey(tom)"], "conclusion": "Tom is an Ocellated wild turkey.", "conclusion-FOL": "Ocellated(tom)", "label": "True", "premises_nouns_p": ["There are six types of wild mushrooms: Eastern wild mushroom, Osceola wild mushroom, Gould’s wild mushroom, Merriam’s wild", "mushroom, Rio Grande wild mushroom, and Ocellated wild mushroom.", "Tom is not an Eastern wild mushroom.", "Tom is not an Osceola wild mushroom.", "Tom is also not a Gould's wild mushroom, or a Merriam's wild mushroom, or a Rio Grande wild mushroom.", "Tom is a wild mushroom."], "conclusion_nouns_p": "Tom is an Ocellated wild mushroom."}
{"premises": ["There are six types of wild turkeys: Eastern wild turkey, Osceola wild turkey, Gould’s wild turkey, Merriam’s wild", "turkey, Rio Grande wild turkey, and Ocellated wild turkey.", "Tom is not an Eastern wild turkey.", "Tom is not an Osceola wild turkey.", "Tom is also not a Gould's wild turkey, or a Merriam's wild turkey, or a Rio Grande wild turkey.", "Tom is a wild turkey."], "premises-FOL": ["∀x (WildTurkey(x) → (Eastern(x) ∨ Osceola(x) ∨ Goulds(x) ∨ Merriams(x) ∨ Riogrande(x) ∨ Ocellated(x)))", "¬(WildTurkey(tom) ∧ Eastern(tom))", "¬(WildTurkey(tom) ∧ Osceola(tom))", "WildTurkey(tom) → ¬(Goulds(tom) ∨ Merriams(tom) ∨ Riogrande(tom))", "WildTurkey(tom)"], "conclusion": "Tom is an Eastern wild turkey.", "conclusion-FOL": "Eastern(tom)", "label": "False", "premises_nouns_p": ["There are six types of wild capybaras: Eastern wild capybara, Osceola wild capybara, Gould’s wild capybara, Merriam’s wild", "capybara, Rio Grande wild capybara, and Ocellated wild capybara.", "Tom is not an Eastern wild capybara.", "Tom is not an Osceola wild capybara.", "Tom is also not a Gould's wild capybara, or a Merriam's wild capybara, or a Rio Grande wild capybara.", "Tom is a wild capybara."], "conclusion_nouns_p": "Tom is an Eastern wild capybara."}
{"premises": ["There are six types of wild turkeys: Eastern wild turkey, Osceola wild turkey, Gould’s wild turkey, Merriam’s wild", "turkey, Rio Grande wild turkey, and Ocellated wild turkey.", "Tom is not an Eastern wild turkey.", "Tom is not an Osceola wild turkey.", "Tom is also not a Gould's wild turkey, or a Merriam's wild turkey, or a Rio Grande wild turkey.", "Tom is a wild turkey."], "premises-FOL": ["∀x (WildTurkey(x) → (Eastern(x) ∨ Osceola(x) ∨ Goulds(x) ∨ Merriams(x) ∨ Riogrande(x) ∨ Ocellated(x)))", "¬(WildTurkey(tom) ∧ Eastern(tom))", "¬(WildTurkey(tom) ∧ Osceola(tom))", "WildTurkey(tom) → ¬(Goulds(tom) ∨ Merriams(tom) ∨ Riogrande(tom))", "WildTurkey(tom)"], "conclusion": "Joey is a wild turkey.", "conclusion-FOL": "WildTurkey(joey)", "label": "Uncertain", "premises_nouns_p": ["There are six types of wild umbrellas: Eastern wild umbrella, Osceola wild umbrella, Gould’s wild umbrella, Merriam’s wild", "umbrella, Rio Grande wild umbrella, and Ocellated wild umbrella.", "Tom is not an Eastern wild umbrella.", "Tom is not an Osceola wild umbrella.", "Tom is also not a Gould's wild umbrella, or a Merriam's wild umbrella, or a Rio Grande wild umbrella.", "Tom is a wild umbrella."], "conclusion_nouns_p": "Joey is a wild umbrella."}
{"premises": ["A Japanese game company created the game the Legend of Zelda.", "All games in the Top 10 list are made by Japanese game companies.", "[BG] If a game sells more than one million copies, then it will be selected into the Top 10 list.", "The Legend of Zelda sold more than one million copies."], "premises-FOL": ["∃x (Japanese(x) ∧ VideoGameCompany(x) ∧ Game(thelegendofzelda) ∧ Created(x, thelegendofzelda))", "∀x ∀y (Game(x) ∧ InTop10(x) ∧ Created(x, y) → Japanese(y))", "∀x (Game(x) ∧ SellsMoreThan(x, onemillioncopies) → Top10(x))", "SellsMoreThan(thelegendofzelda, onemillioncopies)"], "conclusion": "The Legend of Zelda is in the Top 10 list.", "conclusion-FOL": "Top10(thelegendofzelda)", "label": "True", "premises_nouns_p": ["A Japanese sock puppet company created the game the Legend of Zelda.", "All games in the Top 10 list are made by Japanese sock puppet companies.", "[BG] If a game sells more than one million copies, then it will be selected into the Top 10 list.", "The Legend of Zelda sold more than one million copies."], "conclusion_nouns_p": "The Legend of Zelda is in the Top 10 list."}
{"premises": ["A Japanese game company created the game the Legend of Zelda.", "All games in the Top 10 list are made by Japanese game companies.", "[BG] If a game sells more than one million copies, then it will be selected into the Top 10 list.", "The Legend of Zelda sold more than one million copies."], "premises-FOL": ["∃x (Japanese(x) ∧ VideoGameCompany(x) ∧ Game(thelegendofzelda) ∧ Created(x, thelegendofzelda))", "∀x ∀y (Game(x) ∧ InTop10(x) ∧ Created(x, y) → Japanese(y))", "∀x (Game(x) ∧ SellsMoreThan(x, onemillioncopies) → Top10(x))", "SellsMoreThan(thelegendofzelda, onemillioncopies)"], "conclusion": "FIFA 22 is made by a Japanese video game company.", "conclusion-FOL": "∀x (Created(fifa22, x) → Japanese(x) ∧ VideoGameCompany(x))", "label": "Uncertain", "premises_nouns_p": ["A Japanese game company created the game the Legend of Zelda.", "All games in the Top 10 list are made by Japanese game companies.", "If a game sells more than one million copies, then it will be selected into the Top 10 list.", "The Legend of Zelda sold more than one million copies."], "conclusion_nouns_p": "FIFA 22 is made by a Japanese video game company."}
{"premises": ["A Japanese game company created the game the Legend of Zelda.", "All games in the Top 10 list are made by Japanese game companies.", "[BG] If a game sells more than one million copies, then it will be selected into the Top 10 list.", "The Legend of Zelda sold more than one million copies."], "premises-FOL": ["∃x (Japanese(x) ∧ VideoGameCompany(x) ∧ Game(thelegendofzelda) ∧ Created(x, thelegendofzelda))", "∀x ∀y (Game(x) ∧ InTop10(x) ∧ Created(x, y) → Japanese(y))", "∀x (Game(x) ∧ SellsMoreThan(x, onemillioncopies) → Top10(x))", "SellsMoreThan(thelegendofzelda, onemillioncopies)"], "conclusion": "The Legend of Zelda is not in the Top 10 list.", "conclusion-FOL": "¬Top10(thelegendofzelda)", "label": "False", "premises_nouns_p": ["A Japanese game company created the game the Legend of Zelda.", "All games in the Top 10 list are made by Japanese game companies.", "[BG] If a game sells more than one million copies, then it will be selected into the Top 10 list.", "The Legend of Zelda sold more than one million copies."], "conclusion_nouns_p": "The Legend of Zelda is not in the Top 10 list."}
{"premises": ["All squares have four sides.", "All four-sided things are shapes. "], "premises-FOL": ["∀x (Square(x) → FourSides(x))", "∀x (FourSides(x) → IsShape(x))"], "conclusion": "All squares are shapes.", "conclusion-FOL": "∀x (Square(x) → IsShape(x))", "label": "True", "premises_nouns_p": ["All cubes have four sides.", "All four-sided things are shapes."], "conclusion_nouns_p": "All cubes are shapes."}
{"premises": ["All rabbits are cute. ", "Some turtles exist. ", "An animal is either a rabbit or a squirrel.", "If something is skittish, then it is not still.", "All squirrels are skittish.", "Rock is still."], "premises-FOL": ["∀x (Rabbit(x) → Cute(x))", "∃x (Turtle(x))", "∀x (Rabbit(x) ∨ Squirrel(x))", "∀x (Skittish(x) → ¬Still(x))", "∀x (Squirrel(x) → Skittish(x))", "Still(rock)"], "conclusion": "Rock is a turtle.", "conclusion-FOL": "Turtle(rock)", "label": "Uncertain", "premises_nouns_p": ["All bunnies are cute.", "Some turtles exist.", "An animal is either a bunny or a squirrel.", "If something is skittish, then it is not still.", "All squirrels are skittish.", "Rock is still."], "conclusion_nouns_p": "Rock is a turtle."}
{"premises": ["All rabbits are cute. ", "Some turtles exist. ", "An animal is either a rabbit or a squirrel.", "If something is skittish, then it is not still.", "All squirrels are skittish.", "Rock is still."], "premises-FOL": ["∀x (Rabbit(x) → Cute(x))", "∃x (Turtle(x))", "∀x (Rabbit(x) ∨ Squirrel(x))", "∀x (Skittish(x) → ¬Still(x))", "∀x (Squirrel(x) → Skittish(x))", "Still(rock)"], "conclusion": "Rock is not a turtle.", "conclusion-FOL": "¬Turtle(rock)", "label": "Uncertain", "premises_nouns_p": ["All bunnies are cute.", "Some turtles exist.", "An animal is either a bunny or a squirrel.", "If something is skittish, then it is not still.", "All squirrels are skittish.", "Rock is still."], "conclusion_nouns_p": "Rock is not a turtle."}
{"premises": ["All rabbits are cute. ", "Some turtles exist. ", "An animal is either a rabbit or a squirrel.", "If something is skittish, then it is not still.", "All squirrels are skittish.", "Rock is still."], "premises-FOL": ["∀x (Rabbit(x) → Cute(x))", "∃x (Turtle(x))", "∀x (Rabbit(x) ∨ Squirrel(x))", "∀x (Skittish(x) → ¬Still(x))", "∀x (Squirrel(x) → Skittish(x))", "Still(rock)"], "conclusion": "Rock is a turtle or cute.", "conclusion-FOL": "Turtle(rock) ∨ Cute(rock)", "label": "True", "premises_nouns_p": ["All rabbits are cute.", "Some turtles exist.", "An animal is either a rabbit or a squirrel.", "If something is skittish, then it is not still.", "All squirrels are skittish.", "Rock is still."], "conclusion_nouns_p": "Rock is a turtle or cute."}
{"premises": ["All rabbits are cute. ", "Some turtles exist. ", "An animal is either a rabbit or a squirrel.", "If something is skittish, then it is not still.", "All squirrels are skittish.", "Rock is still."], "premises-FOL": ["∀x (Rabbit(x) → Cute(x))", "∃x (Turtle(x))", "∀x (Rabbit(x) ∨ Squirrel(x))", "∀x (Skittish(x) → ¬Still(x))", "∀x (Squirrel(x) → Skittish(x))", "Still(rock)"], "conclusion": "If Rock is not both a turtle and a squirrel, then Rock is either cute or skittish.", "conclusion-FOL": "¬(Turtle(rock) ∧ Squirrel(rock)) → Cute(rock) ⊕ Skittish(rock)", "label": "True", "premises_nouns_p": ["All rabbits are cute.", "Some turtles exist.", "An animal is either a rabbit or a squirrel.", "If something is skittish, then it is not still.", "All squirrels are skittish.", "Rock is still."], "conclusion_nouns_p": "If Rock is not both a turtle and a squirrel, then Rock is either cute or skittish."}
{"premises": ["All rabbits are cute. ", "Some turtles exist. ", "An animal is either a rabbit or a squirrel.", "If something is skittish, then it is not still.", "All squirrels are skittish.", "Rock is still."], "premises-FOL": ["∀x (Rabbit(x) → Cute(x))", "∃x (Turtle(x))", "∀x (Rabbit(x) ∨ Squirrel(x))", "∀x (Skittish(x) → ¬Still(x))", "∀x (Squirrel(x) → Skittish(x))", "Still(rock)"], "conclusion": "If Rock is cute and still, then Rock is a turtle and skittish.", "conclusion-FOL": "Cute(rock) ∧ Still(rock) → Turtle(rock) ∧ Skittish(rock)", "label": "False", "premises_nouns_p": ["All rabbits are cute.", "Some turtles exist.", "An animal is either a rabbit or a squirrel.", "If something is skittish, then it is not still.", "All squirrels are skittish.", "Rock is still."], "conclusion_nouns_p": "If Rock is cute and still, then Rock is a turtle and skittish."}
{"premises": ["\"Stranger Things\" is a popular Netflix show.", "If a Netflix show is popular, Karen will binge-watch it.", "If and only if Karen binge-watches a Netflix show, she will download it.", "Karen does not download \"Black Mirror\".", "\"Black Mirror\" is a Netflix show.", "If Karen binge-watches a Netflix show, she will share it to Lisa."], "premises-FOL": ["NetflixShow(strangerThings) ∧ Popular(strangerThings)", "∀x ((NetflixShow(x) ∧ Popular(x)) → BingeWatch(karen, x))", "∀x ((NetflixShow(x) ∧ BingeWatch(karen, x)) ↔ Download(karen, x))", "¬Download(karen, blackMirror)", "NetflixShow(blackMirror)", "∀x ((NetflixShow(x) ∧ BingeWatch(karen, x)) → Share(x, lisa))"], "conclusion": "Karen will share \"Stranger Things\" to Lisa.", "conclusion-FOL": "Share(strangerThings, lisa)", "label": "True", "premises_nouns_p": ["\"Stranger Things\" is a popular Netflix show.", "If a Netflix show is popular, a sloth will binge-watch it.", "If and only if a sloth binge-watches a Netflix show, it will download it.", "A sloth does not download \"Black Mirror\".", "\"Black Mirror\" is a Netflix show.", "If a sloth binge-watches a Netflix show, it will share it to a duck."], "conclusion_nouns_p": "A sloth will share \"Stranger Things\" to a duck."}
{"premises": ["\"Stranger Things\" is a popular Netflix show.", "If a Netflix show is popular, Karen will binge-watch it.", "If and only if Karen binge-watches a Netflix show, she will download it.", "Karen does not download \"Black Mirror\".", "\"Black Mirror\" is a Netflix show.", "If Karen binge-watches a Netflix show, she will share it to Lisa."], "premises-FOL": ["NetflixShow(strangerThings) ∧ Popular(strangerThings)", "∀x ((NetflixShow(x) ∧ Popular(x)) → BingeWatch(karen, x))", "∀x ((NetflixShow(x) ∧ BingeWatch(karen, x)) ↔ Download(karen, x))", "¬Download(karen, blackMirror)", "NetflixShow(blackMirror)", "∀x ((NetflixShow(x) ∧ BingeWatch(karen, x)) → Share(x, lisa))"], "conclusion": "\"Black Mirror\" is popular.", "conclusion-FOL": "Popular(blackMirror)", "label": "False", "premises_nouns_p": ["\"Stranger Things\" is a popular Netflix show.", "If a Netflix show is popular, a toaster will binge-watch it.", "If and only if a toaster binge-watches a Netflix show, it will download it.", "A toaster does not download \"Black Mirror\".", "\"Black Mirror\" is a Netflix show.", "If a toaster binge-watches a Netflix show, it will share it to a broom."], "conclusion_nouns_p": "\"Black Mirror\" is popular."}
{"premises": ["\"Stranger Things\" is a popular Netflix show.", "If a Netflix show is popular, Karen will binge-watch it.", "If and only if Karen binge-watches a Netflix show, she will download it.", "Karen does not download \"Black Mirror\".", "\"Black Mirror\" is a Netflix show.", "If Karen binge-watches a Netflix show, she will share it to Lisa."], "premises-FOL": ["NetflixShow(strangerThings) ∧ Popular(strangerThings)", "∀x ((NetflixShow(x) ∧ Popular(x)) → BingeWatch(karen, x))", "∀x ((NetflixShow(x) ∧ BingeWatch(karen, x)) ↔ Download(karen, x))", "¬Download(karen, blackMirror)", "NetflixShow(blackMirror)", "∀x ((NetflixShow(x) ∧ BingeWatch(karen, x)) → Share(x, lisa))"], "conclusion": "Karen will share \"Black Mirror\" to Lisa.", "conclusion-FOL": "Share(blackMirror, lisa)", "label": "Uncertain", "premises_nouns_p": ["\"Stranger Things\" is a popular Netflix show.", "If a Netflix show is popular, a giraffe will binge-watch it.", "If and only if a giraffe binge-watches a Netflix show, she will download it.", "A giraffe does not download \"Black Mirror\".", "\"Black Mirror\" is a Netflix show.", "If a giraffe binge-watches a Netflix show, she will share it to Lisa."], "conclusion_nouns_p": "A giraffe will share \"Black Mirror\" to Lisa."}
{"premises": ["Beijing is the capital of the People's Republic of China. ", "Beijing is the world's most populous national capital city.", "Beijing is located in Northern China.", "Beijing hosted the 2008 Summer Olympics and 2008 Summer Paralympics Games.", "Beijing has hosted both the Summer and Winter Olympics, along with the Summer and Winter Paralympics", "Many of Beijing's 91 universities consistently rank among the best in the Asia-Pacific and the world."], "premises-FOL": ["CapitalOf(beijing, prx)", "MostPopulousNationalCapitalCity(beijing)", "InNorthernChina(beijing)", "Hosted(beijing, summer2008olympic) ∧ Hosted(beijing, summer2008paralympicgames)", "Hosted(beijing, summerolympic) ∧ Hosted(beijing, winterolympic) ∧ Hosted(beijing, summerparalympicgames)  ∧ Hosted(beijing, winterparalympicgames)", "∃x (BeijingUniversity(x) ∧ ConsistentlyRankAmongTheBest(x))"], "conclusion": "Beijing has hosted both the 2008 Summer Olympics and a winter olympics.", "conclusion-FOL": "Hosted(beijing, summer2008olympic) ∧ Hosted(beijing, winterolympic)", "label": "True", "premises_nouns_p": ["Beijing is the capital of the People's Republic of China.", "Beijing is the world's most populous national capital city.", "Beijing is located in Northern China.", "Beijing hosted the 2008 Summer Snorkels and 2008 Summer Paralympics Games.", "Beijing has hosted both the Summer and Winter Snorkels, along with the Summer and Winter Paralympics", "Many of Beijing's 91 universities consistently rank among the best in the Asia-Pacific and the world."], "conclusion_nouns_p": "Beijing has hosted both the 2008 Summer Snorkels and a winter snorkels."}
{"premises": ["Beijing is the capital of the People's Republic of China. ", "Beijing is the world's most populous national capital city.", "Beijing is located in Northern China.", "Beijing hosted the 2008 Summer Olympics and 2008 Summer Paralympics Games.", "Beijing has hosted both the Summer and Winter Olympics, along with the Summer and Winter Paralympics", "Many of Beijing's 91 universities consistently rank among the best in the Asia-Pacific and the world."], "premises-FOL": ["CapitalOf(beijing, prx)", "MostPopulousNationalCapitalCity(beijing)", "InNorthernChina(beijing)", "Hosted(beijing, summer2008olympic) ∧ Hosted(beijing, summer2008paralympicgames)", "Hosted(beijing, summerolympic) ∧ Hosted(beijing, winterolympic) ∧ Hosted(beijing, summerparalympicgames)  ∧ Hosted(beijing, winterparalympicgames)", "∃x (BeijingUniversity(x) ∧ ConsistentlyRankAmongTheBest(x))"], "conclusion": "Beijing is located in southern China.", "conclusion-FOL": "InSouthernChina(beijing)", "label": "Uncertain", "premises_nouns_p": ["Beijing is the capital of the People's Republic of China.", "Beijing is the world's most populous national capital city.", "Beijing is located in Northern China.", "Beijing hosted the 2008 Summer Olympics and 2008 Summer Paralympics Games.", "Beijing has hosted both the Summer and Winter Olympics, along with the Summer and Winter Paralympics", "Many of Beijing's 91 universities consistently rank among the best in the Asia-Pacific and the world."], "conclusion_nouns_p": "Beijing is located in southern China."}
{"premises": ["Beijing is the capital of the People's Republic of China. ", "Beijing is the world's most populous national capital city.", "Beijing is located in Northern China.", "Beijing hosted the 2008 Summer Olympics and 2008 Summer Paralympics Games.", "Beijing has hosted both the Summer and Winter Olympics, along with the Summer and Winter Paralympics", "Many of Beijing's 91 universities consistently rank among the best in the Asia-Pacific and the world."], "premises-FOL": ["CapitalOf(beijing, prx)", "MostPopulousNationalCapitalCity(beijing)", "InNorthernChina(beijing)", "Hosted(beijing, summer2008olympic) ∧ Hosted(beijing, summer2008paralympicgames)", "Hosted(beijing, summerolympic) ∧ Hosted(beijing, winterolympic) ∧ Hosted(beijing, summerparalympicgames)  ∧ Hosted(beijing, winterparalympicgames)", "∃x (BeijingUniversity(x) ∧ ConsistentlyRankAmongTheBest(x))"], "conclusion": "Beijing is the second largest Chinese city by urban population.", "conclusion-FOL": "SecondLargestChineseCity(beijing)", "label": "Uncertain", "premises_nouns_p": ["Beijing is the capital of the People's Republic of China.", "Beijing is the world's most populous national capital city.", "Beijing is located in Northern China.", "Beijing hosted the 2008 Summer Olympics and 2008 Summer Paralympics Games.", "Beijing has hosted both the Summer and Winter Olympics, along with the Summer and Winter Paralympics", "Many of Beijing's 91 universities consistently rank among the best in the Asia-Pacific and the world."], "conclusion_nouns_p": "Beijing is the second largest Chinese city by urban population."}
{"premises": ["All aliens are extraterrestrial.", "If someone is from Mars, then they are aliens.", "No extraterrestrial is human.", "Everyone from Earth is a human.", "Marvin cannot be from Earth and from Mars.", "If Marvin is not from Earth, then Marvin is an extraterrestrial."], "premises-FOL": ["∀x (Alien(x) → Extraterrestrial(x))", "∀x (FromMars(x) → Alien(x))", "∀x (Extraterrestrial(x) → ¬Human(x))", "∀x (FromEarth(x) → Human(x))", "¬FromEarth(marvin) ∧ ¬FromMars(marvin)", "¬FromEarth(marvin) → Extraterrestrial(marvin)"], "conclusion": "Marvin is an alien.", "conclusion-FOL": "Alien(marvin)", "label": "False", "premises_nouns_p": ["All toasters are extraterrestrial.", "If someone is from Mars, then they are toasters.", "No extraterrestrial is human.", "Everyone from Earth is a human.", "Marvin cannot be from Earth and from Mars.", "If Marvin is not from Earth, then Marvin is an extraterrestrial."], "conclusion_nouns_p": "Marvin is an alien."}
{"premises": ["All aliens are extraterrestrial.", "If someone is from Mars, then they are aliens.", "No extraterrestrial is human.", "Everyone from Earth is a human.", "Marvin cannot be from Earth and from Mars.", "If Marvin is not from Earth, then Marvin is an extraterrestrial."], "premises-FOL": ["∀x (Alien(x) → Extraterrestrial(x))", "∀x (FromMars(x) → Alien(x))", "∀x (Extraterrestrial(x) → ¬Human(x))", "∀x (FromEarth(x) → Human(x))", "¬FromEarth(marvin) ∧ ¬FromMars(marvin)", "¬FromEarth(marvin) → Extraterrestrial(marvin)"], "conclusion": "Marvin is neither a human nor from Mars.", "conclusion-FOL": "¬Human(marvin) ∧ ¬FromMars(marvin)", "label": "True", "premises_nouns_p": ["All socks are extraterrestrial.", "If someone is from Mars, then they are socks.", "No extraterrestrial is human.", "Everyone from Earth is a human.", "Marvin cannot be from Earth and from Mars.", "If Marvin is not from Earth, then Marvin is an extraterrestrial."], "conclusion_nouns_p": "Marvin is neither a human nor from Mars."}
{"premises": ["All aliens are extraterrestrial.", "If someone is from Mars, then they are aliens.", "No extraterrestrial is human.", "Everyone from Earth is a human.", "Marvin cannot be from Earth and from Mars.", "If Marvin is not from Earth, then Marvin is an extraterrestrial."], "premises-FOL": ["∀x (Alien(x) → Extraterrestrial(x))", "∀x (FromMars(x) → Alien(x))", "∀x (Extraterrestrial(x) → ¬Human(x))", "∀x (FromEarth(x) → Human(x))", "¬FromEarth(marvin) ∧ ¬FromMars(marvin)", "¬FromEarth(marvin) → Extraterrestrial(marvin)"], "conclusion": "If Marvin is not from Mars, then Marvin is a human.", "conclusion-FOL": "¬FromMars(marvin) → Human(marvin)", "label": "Uncertain", "premises_nouns_p": ["All teacups are extraterrestrial.", "If someone is from Mars, then they are teacups.", "No extraterrestrial is human.", "Everyone from Earth is a human.", "Marvin cannot be from Earth and from Mars.", "If Marvin is not from Earth, then Marvin is an extraterrestrial."], "conclusion_nouns_p": "If Marvin is not from Mars, then Marvin is a human."}
{"premises": ["A person is either a Grand Slam champion or an Oscar-nominated actor.", "All people who are Grand Slam champions are professional tennis players.", "All Oscar-nominated actors are celebrities.", "All professional tennis players are athletes.", "If a person is a celebrity then they are well paid.", "If a person is an athlete then they are famous.", "All well-paid people live in tax havens.", "If Djokovic is famous and is an athlete, then Djokovic lives in well paid."], "premises-FOL": ["∀x (GrandSlamChampion(x) ⊕ OscarNominatedActor(x))", "∀x (GrandSlamChampion(x) → ProfessionalTennisPlayer(x))", "∀x (OscarNominatedActor(x) → Celebrity(x))", "∀x (ProfessionalTennisPlayer(x) → Athlete(x))", "∀x (Celebrity(x) → WellPaid(x))", "∀x (Athlete(x) → Famous(x))", "∀x (WellPaid(x) → LivesInTaxHaven(x))", "Famous(djokovic) ∧ Athlete(djokovic) → LivesInTaxHaven(djokovic)"], "conclusion": "Djokovic is a Grand Slam champion.", "conclusion-FOL": "GrandSlamChampion(djokovic)", "label": "Uncertain", "premises_nouns_p": ["A robot is either a Grand Slam champion or an Oscar-nominated actor.", "All robots who are Grand Slam champions are professional tennis players.", "All Oscar-nominated actors are celebrities.", "All professional tennis players are athletes.", "If a robot is a celebrity then they are well paid.", "If a robot is an athlete then they are famous.", "All well-paid robots live in tax havens.", "If Djokovic is famous and is an athlete, then Djokovic lives in well paid."], "conclusion_nouns_p": "Djokovic is a Grand Slam champion."}
{"premises": ["A person is either a Grand Slam champion or an Oscar-nominated actor.", "All people who are Grand Slam champions are professional tennis players.", "All Oscar-nominated actors are celebrities.", "All professional tennis players are athletes.", "If a person is a celebrity then they are well paid.", "If a person is an athlete then they are famous.", "All well-paid people live in tax havens.", "If Djokovic is famous and is an athlete, then Djokovic lives in well paid."], "premises-FOL": ["∀x (GrandSlamChampion(x) ⊕ OscarNominatedActor(x))", "∀x (GrandSlamChampion(x) → ProfessionalTennisPlayer(x))", "∀x (OscarNominatedActor(x) → Celebrity(x))", "∀x (ProfessionalTennisPlayer(x) → Athlete(x))", "∀x (Celebrity(x) → WellPaid(x))", "∀x (Athlete(x) → Famous(x))", "∀x (WellPaid(x) → LivesInTaxHaven(x))", "Famous(djokovic) ∧ Athlete(djokovic) → LivesInTaxHaven(djokovic)"], "conclusion": "Djokovic lives in a tax haven.", "conclusion-FOL": "LivesInTaxHaven(djokovic)", "label": "True", "premises_nouns_p": ["A sock is either a Grand Slam champion or an Oscar-nominated actor.", "All socks who are Grand Slam champions are professional tennis players.", "All Oscar-nominated actors are celebrities.", "All professional tennis players are athletes.", "If a sock is a celebrity then they are well paid.", "If a sock is an athlete then they are famous.", "All well-paid socks live in tax havens.", "If Djokovic is famous and is an athlete, then Djokovic lives in well paid."], "conclusion_nouns_p": "Djokovic lives in a tax haven."}
{"premises": ["A person is either a Grand Slam champion or an Oscar-nominated actor.", "All people who are Grand Slam champions are professional tennis players.", "All Oscar-nominated actors are celebrities.", "All professional tennis players are athletes.", "If a person is a celebrity then they are well paid.", "If a person is an athlete then they are famous.", "All well-paid people live in tax havens.", "If Djokovic is famous and is an athlete, then Djokovic lives in well paid."], "premises-FOL": ["∀x (GrandSlamChampion(x) ⊕ OscarNominatedActor(x))", "∀x (GrandSlamChampion(x) → ProfessionalTennisPlayer(x))", "∀x (OscarNominatedActor(x) → Celebrity(x))", "∀x (ProfessionalTennisPlayer(x) → Athlete(x))", "∀x (Celebrity(x) → WellPaid(x))", "∀x (Athlete(x) → Famous(x))", "∀x (WellPaid(x) → LivesInTaxHaven(x))", "Famous(djokovic) ∧ Athlete(djokovic) → LivesInTaxHaven(djokovic)"], "conclusion": "Djokovic does not live in a tax haven.", "conclusion-FOL": "¬LivesInTaxHaven(djokovic)", "label": "False", "premises_nouns_p": ["A banana is either a Grand Slam champion or an Oscar-nominated actor.", "All bananas who are Grand Slam champions are professional tennis players.", "All Oscar-nominated actors are celebrities.", "All professional tennis players are athletes.", "If a banana is a celebrity then they are well paid.", "If a banana is an athlete then they are famous.", "All well-paid bananas live in tax havens.", "If Djokovic is famous and is an athlete, then Djokovic lives in well paid."], "conclusion_nouns_p": "Djokovic does not live in a tax haven."}
{"premises": ["Diamond Mine is a professional wrestling stable, formed in WWE.", "Roderick Strong leads Diamond Mine.", "Diamond Mine includes the Creed Brothers, and Ivy Nile.", "Imperium has a feud with Diamond Mine."], "premises-FOL": ["ProfessionalWrestlingStable(diamondmine) ∧ FormedIn(diamondmine, wwe)", "Leads(roderickstrong, diamondmine)", "Includes(diamondmine, creedbrothers) ∧ Includes(diamondmine, ivynile)", "HasFeud(imperium, diamondmine)"], "conclusion": "Roderick strong leads a professional wrestling stable.", "conclusion-FOL": "∃x (Leads(roderickstrong, x) ∧ ProfessionalWrestlingStable(x))", "label": "True", "premises_nouns_p": ["Diamond Mine is a professional wrestling stable, formed in WWE.", "Roderick Strong leads Diamond Mine.", "Diamond Mine includes the SpongeBob SquarePants, and Ivy Nile.", "Imperium has a feud with Diamond Mine."], "conclusion_nouns_p": "Roderick strong leads a professional wrestling stable."}
{"premises": ["Diamond Mine is a professional wrestling stable, formed in WWE.", "Roderick Strong leads Diamond Mine.", "Diamond Mine includes the Creed Brothers, and Ivy Nile.", "Imperium has a feud with Diamond Mine."], "premises-FOL": ["ProfessionalWrestlingStable(diamondmine) ∧ FormedIn(diamondmine, wwe)", "Leads(roderickstrong, diamondmine)", "Includes(diamondmine, creedbrothers) ∧ Includes(diamondmine, ivynile)", "HasFeud(imperium, diamondmine)"], "conclusion": "Roderick strong leads the Creed Brothers.", "conclusion-FOL": "Leads(roderickstrong, creedbrothers)", "label": "Uncertain", "premises_nouns_p": ["Diamond Mine is a professional wrestling stable, formed in the Batcave.", "Roderick Strong leads Diamond Mine.", "Diamond Mine includes the Creed Brothers, and Ivy Nile.", "Imperium has a feud with Diamond Mine."], "conclusion_nouns_p": "Roderick strong leads the Creed Brothers."}
{"premises": ["Diamond Mine is a professional wrestling stable, formed in WWE.", "Roderick Strong leads Diamond Mine.", "Diamond Mine includes the Creed Brothers, and Ivy Nile.", "Imperium has a feud with Diamond Mine."], "premises-FOL": ["ProfessionalWrestlingStable(diamondmine) ∧ FormedIn(diamondmine, wwe)", "Leads(roderickstrong, diamondmine)", "Includes(diamondmine, creedbrothers) ∧ Includes(diamondmine, ivynile)", "HasFeud(imperium, diamondmine)"], "conclusion": "Imperium doesn't have a feud with a professional wrestling stable that includes Ivy Nile.", "conclusion-FOL": "∀x (ProfessionalWrestlingStable(x) ∧ Includes(x, ivynile) → ¬HasFeud(imperium, x))", "label": "False", "premises_nouns_p": ["Diamond Mine is a professional wrestling stable, formed in WWE.", "Roderick Strong leads Diamond Mine.", "Diamond Mine includes the Bread Brothers, and Ivy Nile.", "Imperium has a feud with Diamond Mine."], "conclusion_nouns_p": "Imperium doesn't have a feud with a professional wrestling stable that includes Ivy Nile."}
{"premises": ["Symphony No. 9 is a music piece.", "Composers write music pieces.", "Beethoven wrote Symphony No. 9.", "Vienna Music Society premiered Symphony No. 9.", "Vienna Music Society is an orchestra.", "Beethoven leads the Vienna Music Society.", "Orchestras are led by conductors."], "premises-FOL": ["MusicPiece(symphony9)", "∀x ∀y ((MusicPiece(x) ∧ Writtenby(x, y)) → Composer(y))", "Writtenby(symphony9, beethoven)", "Premiered(viennamusicsociety, symphony9)", "Orchestra(viennamusicsociety)", "Lead(beethoven, viennamusicsociety)", "∀x ∀y ((Orchestra(x) ∧ Lead(y, x)) → Conductor(y))"], "conclusion": "Beethoven is a composer.", "conclusion-FOL": "Composer(beethoven)", "label": "True", "premises_nouns_p": ["Symphony No. 9 is a music piece.", "Composers write music pieces.", "Beethoven wrote Symphony No. 9.", "Vienna Cheese Society premiered Symphony No. 9.", "Vienna Cheese Society is a food truck.", "Beethoven leads the Vienna Cheese Society.", "Food trucks are led by chefs."], "conclusion_nouns_p": "Beethoven is a composer."}
{"premises": ["Symphony No. 9 is a music piece.", "Composers write music pieces.", "Beethoven wrote Symphony No. 9.", "Vienna Music Society premiered Symphony No. 9.", "Vienna Music Society is an orchestra.", "Beethoven leads the Vienna Music Society.", "Orchestras are led by conductors."], "premises-FOL": ["MusicPiece(symphony9)", "∀x ∀y ((MusicPiece(x) ∧ Writtenby(x, y)) → Composer(y))", "Writtenby(symphony9, beethoven)", "Premiered(viennamusicsociety, symphony9)", "Orchestra(viennamusicsociety)", "Lead(beethoven, viennamusicsociety)", "∀x ∀y ((Orchestra(x) ∧ Lead(y, x)) → Conductor(y))"], "conclusion": "Some orchestras premiered music pieces.", "conclusion-FOL": "∃x ∃y (Orchestra(x) ∧ MusicPiece(y) ∧ Premiered(x, y))", "label": "True", "premises_nouns_p": ["Symphony No. 9 is a music piece.", "Composers write music pieces.", "Beethoven wrote Symphony No. 9.", "Vienna Cheese Society premiered Symphony No. 9.", "Vienna Cheese Society is an orchestra.", "Beethoven leads the Vienna Cheese Society.", "Orchestras are led by conductors."], "conclusion_nouns_p": "Some orchestras premiered music pieces."}
{"premises": ["Symphony No. 9 is a music piece.", "Composers write music pieces.", "Beethoven wrote Symphony No. 9.", "Vienna Music Society premiered Symphony No. 9.", "Vienna Music Society is an orchestra.", "Beethoven leads the Vienna Music Society.", "Orchestras are led by conductors."], "premises-FOL": ["MusicPiece(symphony9)", "∀x ∀y ((MusicPiece(x) ∧ Writtenby(x, y)) → Composer(y))", "Writtenby(symphony9, beethoven)", "Premiered(viennamusicsociety, symphony9)", "Orchestra(viennamusicsociety)", "Lead(beethoven, viennamusicsociety)", "∀x ∀y ((Orchestra(x) ∧ Lead(y, x)) → Conductor(y))"], "conclusion": "Beethoven is not a conductor.", "conclusion-FOL": "¬Conductor(beethoven)", "label": "False", "premises_nouns_p": ["Symphony No. 9 is a music piece.", "Composers write music pieces.", "Beethoven wrote Symphony No. 9.", "Vienna Cheese Society premiered Symphony No. 9.", "Vienna Cheese Society is an orchestra.", "Beethoven leads the Vienna Cheese Society.", "Orchestras are led by conductors."], "conclusion_nouns_p": "Beethoven is not a conductor."}
{"premises": ["All of Zaha Hadid's design styles are timeless.", "No mass product design is timeless.", "Either Zaha Hadid's design style or Kelly Wearstler's design style. ", "All of Kelly Wearstler's design styles are evocative.", "All of Kelly Wearstler's design styles are dreamy.", "If a design by Max is timeless, then a design by Max is a mass product design and evocative."], "premises-FOL": ["∀x (ZahaHadidDesignStyle(x) → Timeless(x))", "∀x (MassProductDesign(x) → ¬Timeless(x))", "∀x (ZahaHadidDesignStyle(x) ∨ KellyWearstlerDesignStyle(x)) ", "∀x (KellyWearstlerDesignStyle(x) → Evocative(x))", "∀x (KellyWearstlerDesignStyle(x) → Dreamy(x))", "Timeless(aDesignByMax) → MassProductDesign(aDesignByMax) ∧ Evocative(aDesignByMax)"], "conclusion": "A design by Max is a mass product design.", "conclusion-FOL": "MassProductDesign(aDesignByMax)", "label": "Uncertain", "premises_nouns_p": ["All of Zaha Hadid's design styles are timeless.", "No mass product design is timeless.", "Either Zaha Hadid's design style or Kelly Wearstler's design style.", "All of Kelly Wearstler's design styles are evocative.", "All of Kelly Wearstler's design styles are dreamy.", "If a design by Max is timeless, then a design by Max is a mass product design and evocative."], "conclusion_nouns_p": "A design by Max is a mass product design."}
{"premises": ["All of Zaha Hadid's design styles are timeless.", "No mass product design is timeless.", "Either Zaha Hadid's design style or Kelly Wearstler's design style. ", "All of Kelly Wearstler's design styles are evocative.", "All of Kelly Wearstler's design styles are dreamy.", "If a design by Max is timeless, then a design by Max is a mass product design and evocative."], "premises-FOL": ["∀x (ZahaHadidDesignStyle(x) → Timeless(x))", "∀x (MassProductDesign(x) → ¬Timeless(x))", "∀x (ZahaHadidDesignStyle(x) ∨ KellyWearstlerDesignStyle(x)) ", "∀x (KellyWearstlerDesignStyle(x) → Evocative(x))", "∀x (KellyWearstlerDesignStyle(x) → Dreamy(x))", "Timeless(aDesignByMax) → MassProductDesign(aDesignByMax) ∧ Evocative(aDesignByMax)"], "conclusion": "A design by Max is evocative and dreamy.", "conclusion-FOL": "Evocative(aDesignByMax) ∧ Dreamy(aDesignByMax)", "label": "True", "premises_nouns_p": ["All of Zaha Hadid's design styles are timeless.", "No mass product design is timeless.", "Either Zaha Hadid's design style or Kelly Wearstler's design style.", "All of Kelly Wearstler's design styles are sparkly.", "All of Kelly Wearstler's design styles are fluffy.", "If a design by Max is timeless, then a design by Max is a mass product design and sparkly."], "conclusion_nouns_p": "A design by Max is sparkly and fluffy."}
{"premises": ["All of Zaha Hadid's design styles are timeless.", "No mass product design is timeless.", "Either Zaha Hadid's design style or Kelly Wearstler's design style. ", "All of Kelly Wearstler's design styles are evocative.", "All of Kelly Wearstler's design styles are dreamy.", "If a design by Max is timeless, then a design by Max is a mass product design and evocative."], "premises-FOL": ["∀x (ZahaHadidDesignStyle(x) → Timeless(x))", "∀x (MassProductDesign(x) → ¬Timeless(x))", "∀x (ZahaHadidDesignStyle(x) ∨ KellyWearstlerDesignStyle(x)) ", "∀x (KellyWearstlerDesignStyle(x) → Evocative(x))", "∀x (KellyWearstlerDesignStyle(x) → Dreamy(x))", "Timeless(aDesignByMax) → MassProductDesign(aDesignByMax) ∧ Evocative(aDesignByMax)"], "conclusion": "A design by Max is either evocative or dreamy.", "conclusion-FOL": "Evocative(aDesignByMax) ⊕ Dreamy(aDesignByMax)", "label": "False", "premises_nouns_p": ["All of Zaha Hadid's design styles are timeless.", "No mass product design is timeless.", "Either Zaha Hadid's design style or Kelly Wearstler's design style.", "All of Kelly Wearstler's design styles are evocative.", "All of Kelly Wearstler's design styles are dreamy.", "If a design by a spoon is timeless, then a design by a spoon is a mass product design and evocative."], "conclusion_nouns_p": "A design by a spoon is either evocative or dreamy."}
{"premises": ["If a player is ranked highly by the Women's Tennis Association, then they are among the most active players in major tennis. ", "Everyone who lost to Iga Świątek is ranked highly by the Women's Tennis Association.", "All female tennis players at Roland Garros 2022 lost to Iga Świątek.", "Either female tennis players at Roland Garros 2022 or male tennis players at Roland Garros 2022. ", "All male tennis players at Roland Garros 2022 lost to Rafael Nadal.", "If Coco Gauff is a player who is ranked highly by the Women's Tennis Association or a player who lost to Rafael Nadal, then Coco Gauff is not a male tennis player at Roland Garros 2022."], "premises-FOL": ["∀x (RankedHighlyByWomenTennisAssociation(x) → AmongMostActivePlayersInMajorTennis(x))", "∀x (LostToIgaŚwiątek(x) → RankedHighlyByWomenTennisAssociation(x))", "∀x (FemaleTennisPlayersAtRolandGarros2022(x) → LostToIgaŚwiątek(x)) ", "∀x (FemaleTennisPlayersAtRolandGarros2022(x) ∨ MaleTennisPlayersAtRolandGarros2022(x)) ", "∀x (MaleTennisPlayersAtRolandGarros2022(x) → LostToRafaelNadal(x))", "RankedHighlyByWomenTennisAssociation(cocoGauff) ∨ LostToRafaelNadal(cocoGauff) → ¬MaleTennisPlayersAtRolandGarros2022(cocoGauff)"], "conclusion": "Coco Gauff is among the most active players in major tennis.", "conclusion-FOL": "AmongMostActivePlayersInMajorTennis(cocoGauff)", "label": "True", "premises_nouns_p": ["If a player is ranked highly by the Women's Tennis Association, then they are among the most active players in major tennis.", "Everyone who lost to Capybara is ranked highly by the Women's Tennis Association.", "All female tennis players at Roland Garros 2022 lost to Capybara.", "Either female tennis players at Roland Garros 2022 or male tennis players at Roland Garros 2022.", "All male tennis players at Roland Garros 2022 lost to Snail.", "If Coco Gauff is a player who is ranked highly by the Women's Tennis Association or a player who lost to Snail, then Coco Gauff is not a male tennis player at Roland Garros 2022."], "conclusion_nouns_p": "Coco Gauff is among the most active players in major tennis."}
{"premises": ["If a player is ranked highly by the Women's Tennis Association, then they are among the most active players in major tennis. ", "Everyone who lost to Iga Świątek is ranked highly by the Women's Tennis Association.", "All female tennis players at Roland Garros 2022 lost to Iga Świątek.", "Either female tennis players at Roland Garros 2022 or male tennis players at Roland Garros 2022. ", "All male tennis players at Roland Garros 2022 lost to Rafael Nadal.", "If Coco Gauff is a player who is ranked highly by the Women's Tennis Association or a player who lost to Rafael Nadal, then Coco Gauff is not a male tennis player at Roland Garros 2022."], "premises-FOL": ["∀x (RankedHighlyByWomenTennisAssociation(x) → AmongMostActivePlayersInMajorTennis(x))", "∀x (LostToIgaŚwiątek(x) → RankedHighlyByWomenTennisAssociation(x))", "∀x (FemaleTennisPlayersAtRolandGarros2022(x) → LostToIgaŚwiątek(x)) ", "∀x (FemaleTennisPlayersAtRolandGarros2022(x) ∨ MaleTennisPlayersAtRolandGarros2022(x)) ", "∀x (MaleTennisPlayersAtRolandGarros2022(x) → LostToRafaelNadal(x))", "RankedHighlyByWomenTennisAssociation(cocoGauff) ∨ LostToRafaelNadal(cocoGauff) → ¬MaleTennisPlayersAtRolandGarros2022(cocoGauff)"], "conclusion": "Coco Gauff has lost to Rafael Nadal.", "conclusion-FOL": "LostToRafaelNadal(cocoGauff)", "label": "Uncertain", "premises_nouns_p": ["If a player is ranked highly by the Women's Tennis Association, then they are among the most active players in major tennis.", "Everyone who lost to a giant squid is ranked highly by the Women's Tennis Association.", "All female tennis players at Roland Garros 2022 lost to a giant squid.", "Either female tennis players at Roland Garros 2022 or male tennis players at Roland Garros 2022.", "All male tennis players at Roland Garros 2022 lost to a kraken.", "If Coco Gauff is a player who is ranked highly by the Women's Tennis Association or a player who lost to a kraken, then Coco Gauff is not a male tennis player at Roland Garros 2022."], "conclusion_nouns_p": "Coco Gauff has lost to a kraken."}
{"premises": ["If a player is ranked highly by the Women's Tennis Association, then they are among the most active players in major tennis. ", "Everyone who lost to Iga Świątek is ranked highly by the Women's Tennis Association.", "All female tennis players at Roland Garros 2022 lost to Iga Świątek.", "Either female tennis players at Roland Garros 2022 or male tennis players at Roland Garros 2022. ", "All male tennis players at Roland Garros 2022 lost to Rafael Nadal.", "If Coco Gauff is a player who is ranked highly by the Women's Tennis Association or a player who lost to Rafael Nadal, then Coco Gauff is not a male tennis player at Roland Garros 2022."], "premises-FOL": ["∀x (RankedHighlyByWomenTennisAssociation(x) → AmongMostActivePlayersInMajorTennis(x))", "∀x (LostToIgaŚwiątek(x) → RankedHighlyByWomenTennisAssociation(x))", "∀x (FemaleTennisPlayersAtRolandGarros2022(x) → LostToIgaŚwiątek(x)) ", "∀x (FemaleTennisPlayersAtRolandGarros2022(x) ∨ MaleTennisPlayersAtRolandGarros2022(x)) ", "∀x (MaleTennisPlayersAtRolandGarros2022(x) → LostToRafaelNadal(x))", "RankedHighlyByWomenTennisAssociation(cocoGauff) ∨ LostToRafaelNadal(cocoGauff) → ¬MaleTennisPlayersAtRolandGarros2022(cocoGauff)"], "conclusion": "Coco Gauff is not a player who lost to Iga Świątek or one of the most active players in major tennis.", "conclusion-FOL": "¬LostToIgaŚwiątek(cocoGauff) ∨ ¬AmongMostActivePlayersInMajorTennis(cocoGauff)", "label": "False", "premises_nouns_p": ["If a player is ranked highly by the Women's Noodle Association, then they are among the most active players in major tennis.", "Everyone who lost to Iga Świątek is ranked highly by the Women's Noodle Association.", "All female tennis players at Roland Garros 2022 lost to Iga Świątek.", "Either female tennis players at Roland Garros 2022 or male tennis players at Roland Garros 2022.", "All male tennis players at Roland Garros 2022 lost to Rafael Nadal.", "If Coco Gauff is a player who is ranked highly by the Women's Noodle Association or a player who lost to Rafael Nadal, then Coco Gauff is not a male tennis player at Roland Garros 2022."], "conclusion_nouns_p": "Coco Gauff is not a player who lost to Iga Świątek or one of the most active players in major tennis."}
{"premises": ["All cats are mammals.", "Some pets are not mammals."], "premises-FOL": ["∀x (Cat(x) → Mammal(x))", "∃x (Pet(x) ∧ ¬Mammal(x))"], "conclusion": "No pets are cats.", "conclusion-FOL": "∀x (Pet(x) → ¬Cat(x))", "label": "Uncertain", "premises_nouns_p": ["All clouds are mammals.", "Some pets are not mammals."], "conclusion_nouns_p": "No pets are clouds."}
{"premises": ["[BG] There are four seasons in a year: Spring, Summer, Fall, and Winter.", "All students who want to have a long vacation love summer the most.", "Emma's favorite season is summer.", "Mia's favorite season is not the same as Emma's. ", "James wants to have a long vacation."], "premises-FOL": ["Season(spring) ∨ Season(summer) ∨ Season(fall) ∨ Season(winter)", "∀x (WantlongVacation(x) → Love(x, summer))", "Love(emma, summer)", "¬Love(mia, emma)", "WantlongVacation(james)"], "conclusion": "James's favorite season is summer.", "conclusion-FOL": "Love(james, summer)", "label": "True", "premises_nouns_p": ["[BG] There are four seasons in a year: Spring, Summer, Fall, and Winter.", "All students who want to have a long vacation love summer the most.", "Emma's favorite season is summer.", "Mia's favorite season is not the same as Emma's.", "James wants to have a long vacation."], "conclusion_nouns_p": "James's favorite season is summer."}
{"premises": ["[BG] There are four seasons in a year: Spring, Summer, Fall, and Winter.", "All students who want to have a long vacation love summer the most.", "Emma's favorite season is summer.", "Mia's favorite season is not the same as Emma's. ", "James wants to have a long vacation."], "premises-FOL": ["Season(spring) ∨ Season(summer) ∨ Season(fall) ∨ Season(winter)", "∀x (WantlongVacation(x) → Love(x, summer))", "Love(emma, summer)", "¬Love(mia, emma)", "WantlongVacation(james)"], "conclusion": "James's favorite season is fall.", "conclusion-FOL": "Love(james, fall)", "label": "False", "premises_nouns_p": ["[BG] There are four seasons in a year: Spring, Summer, Fall, and Winter.", "All robots who want to have a long vacation love summer the most.", "Emma's favorite season is summer.", "Mia's favorite season is not the same as Emma's.", "James wants to have a long vacation."], "conclusion_nouns_p": "James's favorite season is fall."}
{"premises": ["[BG] There are four seasons in a year: Spring, Summer, Fall, and Winter.", "All students who want to have a long vacation love summer the most.", "Emma's favorite season is summer.", "Mia's favorite season is not the same as Emma's. ", "James wants to have a long vacation."], "premises-FOL": ["Season(spring) ∨ Season(summer) ∨ Season(fall) ∨ Season(winter)", "∀x (WantlongVacation(x) → Love(x, summer))", "Love(emma, summer)", "¬Love(mia, emma)", "WantlongVacation(james)"], "conclusion": "Mia's favorite season is spring.", "conclusion-FOL": "Love(mia, spring)", "label": "Uncertain", "premises_nouns_p": ["[BG] There are four seasons in a year: Spring, Summer, Fall, and Winter.", "All students who want to have a long vacation love summer the most.", "Emma's favorite season is summer.", "Mia's favorite season is not the same as Emma's.", "James wants to have a long vacation."], "conclusion_nouns_p": "Mia's favorite season is spring."}
{"premises": ["No digital media are analog.", "Every printed text is analog.", "All streaming services are digital.", "If an object is a hardcover book then it is printed text.", "If 1984 is a streaming service, then 1984 is a hardcover book."], "premises-FOL": ["∀x (Digital(x) → ¬Analog(x))", "∀x (PrintedText(x) → Analog(x))", "∀x (StreamingService(x) → Digital(x))", "∀x (HardcoverBook(x) → PrintedText(x))", "StreamingService(y1984) → HardcoverBook(y1984)"], "conclusion": "1984 is printed text.", "conclusion-FOL": "PrintedText(y1984)", "label": "Uncertain", "premises_nouns_p": ["No digital media are analog.", "Every printed text is analog.", "All streaming services are digital.", "If an object is a hardcover book then it is printed text.", "If 1984 is a streaming service, then 1984 is a hardcover book."], "conclusion_nouns_p": "1984 is printed text."}
{"premises": ["No digital media are analog.", "Every printed text is analog.", "All streaming services are digital.", "If an object is a hardcover book then it is printed text.", "If 1984 is a streaming service, then 1984 is a hardcover book."], "premises-FOL": ["∀x (Digital(x) → ¬Analog(x))", "∀x (PrintedText(x) → Analog(x))", "∀x (StreamingService(x) → Digital(x))", "∀x (HardcoverBook(x) → PrintedText(x))", "StreamingService(y1984) → HardcoverBook(y1984)"], "conclusion": "1984 is a streaming service.", "conclusion-FOL": "StreamingService(y1984)", "label": "False", "premises_nouns_p": ["No digital bananas are analog.", "Every printed text is analog.", "All streaming services are digital.", "If an object is a hardcover book then it is printed text.", "If 1984 is a streaming service, then 1984 is a hardcover banana."], "conclusion_nouns_p": "1984 is a streaming service."}
{"premises": ["No digital media are analog.", "Every printed text is analog.", "All streaming services are digital.", "If an object is a hardcover book then it is printed text.", "If 1984 is a streaming service, then 1984 is a hardcover book."], "premises-FOL": ["∀x (Digital(x) → ¬Analog(x))", "∀x (PrintedText(x) → Analog(x))", "∀x (StreamingService(x) → Digital(x))", "∀x (HardcoverBook(x) → PrintedText(x))", "StreamingService(y1984) → HardcoverBook(y1984)"], "conclusion": "1984 is not a streaming service.", "conclusion-FOL": "¬StreamingService(y1984)", "label": "True", "premises_nouns_p": ["No digital media are analog.", "Every printed text is analog.", "All streaming services are digital.", "If an object is a hardcover banana then it is printed text.", "If 1984 is a streaming service, then 1984 is a hardcover banana."], "conclusion_nouns_p": "1984 is not a streaming service."}
{"premises": ["All Romance languages are Indo-European languages.", "The Romance languages are a language family.", "All languages within a language family are related to each other.", "French and Spanish are both Romance languages.", "German is related to Spanish.", "Basque is not related to any other language."], "premises-FOL": ["∀x (RomanceLanguage(x) → IndoEuropeanLanguage(x))", "∀x (RomanceLanguage(x) → MemberOf(x, romancefamily))", "∀x ∀y ∀z ((MemberOf(x, z) ∧ MemberOf(y, z)) → (Related(x, y) ∧ Related(y, x)))", "RomanceLanguage(french) ∧ RomanceLanguage(spanish)", "Related(german, spanish)", "∀x (¬Related(basque, x))"], "conclusion": "Basque is a Romance language.", "conclusion-FOL": "RomanceLanguage(basque)", "label": "False", "premises_nouns_p": ["All Squishy languages are Indo-European languages.", "The Squishy languages are a language family.", "All languages within a language family are related to each other.", "French and Spanish are both Squishy languages.", "German is related to Spanish.", "Basque is not related to any other language."], "conclusion_nouns_p": "Basque is a Squishy language."}
{"premises": ["All Romance languages are Indo-European languages.", "The Romance languages are a language family.", "All languages within a language family are related to each other.", "French and Spanish are both Romance languages.", "German is related to Spanish.", "Basque is not related to any other language."], "premises-FOL": ["∀x (RomanceLanguage(x) → IndoEuropeanLanguage(x))", "∀x (RomanceLanguage(x) → MemberOf(x, romancefamily))", "∀x ∀y ∀z ((MemberOf(x, z) ∧ MemberOf(y, z)) → (Related(x, y) ∧ Related(y, x)))", "RomanceLanguage(french) ∧ RomanceLanguage(spanish)", "Related(german, spanish)", "∀x (¬Related(basque, x))"], "conclusion": "German is a Romance language.", "conclusion-FOL": "RomanceLanguage(german)", "label": "Uncertain", "premises_nouns_p": ["All Whistle languages are Indo-European languages.", "The Whistle languages are a language family.", "All languages within a language family are related to each other.", "French and Spanish are both Whistle languages.", "German is related to Spanish.", "Basque is not related to any other language."], "conclusion_nouns_p": "German is a Whistle language."}
{"premises": ["All Romance languages are Indo-European languages.", "The Romance languages are a language family.", "All languages within a language family are related to each other.", "French and Spanish are both Romance languages.", "German is related to Spanish.", "Basque is not related to any other language."], "premises-FOL": ["∀x (RomanceLanguage(x) → IndoEuropeanLanguage(x))", "∀x (RomanceLanguage(x) → MemberOf(x, romancefamily))", "∀x ∀y ∀z ((MemberOf(x, z) ∧ MemberOf(y, z)) → (Related(x, y) ∧ Related(y, x)))", "RomanceLanguage(french) ∧ RomanceLanguage(spanish)", "Related(german, spanish)", "∀x (¬Related(basque, x))"], "conclusion": "French is an Indo-European language.", "conclusion-FOL": "IndoEuropeanLanguage(french)", "label": "True", "premises_nouns_p": ["All Star Wars languages are Indo-European languages.", "The Star Wars languages are a language family.", "All languages within a language family are related to each other.", "French and Spanish are both Star Wars languages.", "German is related to Spanish.", "Basque is not related to any other language."], "conclusion_nouns_p": "French is an Indo-European language."}
{"premises": ["Robert Lewandowski is a striker.", "[BG] Strikers are soccer players.", "Robert Lewandowski left Bayern Munchen.", "[BG] If a player left a team they no longer play for that team."], "premises-FOL": ["IsStriker(robertLewandowski)", "∀x (IsStriker(x) → IsSoccerPlayer(x))", "LeftTeam(robertLewandowski, bayernMunchen)", "∀x ∀y (LeftTeam(x, y) → ¬PlaysForTeam(x, y))"], "conclusion": "Robert Lewandowski is a soccer player.", "conclusion-FOL": "IsSoccerPlayer(robertLewandowski)", "label": "True", "premises_nouns_p": ["Robert Lewandowski is a banana.", "Bananas are soccer players.", "Robert Lewandowski left Bayern Munchen.", "If a player left a team they no longer play for that team."], "conclusion_nouns_p": "Robert Lewandowski is a soccer player."}
{"premises": ["Robert Lewandowski is a striker.", "[BG] Strikers are soccer players.", "Robert Lewandowski left Bayern Munchen.", "[BG] If a player left a team they no longer play for that team."], "premises-FOL": ["IsStriker(robertLewandowski)", "∀x (IsStriker(x) → IsSoccerPlayer(x))", "LeftTeam(robertLewandowski, bayernMunchen)", "∀x ∀y (LeftTeam(x, y) → ¬PlaysForTeam(x, y))"], "conclusion": "Robert Lewandowski plays for Bayern Munchen.", "conclusion-FOL": "PlaysForTeam(robertLewandowski, bayernMunchen)", "label": "False", "premises_nouns_p": ["Capybara is a striker.", "[BG] Strikers are soccer players.", "Capybara left Bayern Munchen.", "[BG] If a player left a team they no longer play for that team."], "conclusion_nouns_p": "Capybara plays for Bayern Munchen."}
{"premises": ["Robert Lewandowski is a striker.", "[BG] Strikers are soccer players.", "Robert Lewandowski left Bayern Munchen.", "[BG] If a player left a team they no longer play for that team."], "premises-FOL": ["IsStriker(robertLewandowski)", "∀x (IsStriker(x) → IsSoccerPlayer(x))", "LeftTeam(robertLewandowski, bayernMunchen)", "∀x ∀y (LeftTeam(x, y) → ¬PlaysForTeam(x, y))"], "conclusion": "Robert Lewandowski is a star.", "conclusion-FOL": "IsSoccerStar(robertLewandowski)", "label": "Uncertain", "premises_nouns_p": ["Robert Lewandowski is a banana.", "Bananas are soccer players.", "Robert Lewandowski left Bayern Munchen.", "If a player left a team they no longer play for that team."], "conclusion_nouns_p": "Robert Lewandowski is a star."}
{"premises": ["Billings is a city in Montana.", "Montana includes the cities of Butte, Helena, and Missoula.", "White Sulphur Springs and Butte are cities in the same state.", "The city of Pierre is not in Montana.", "Any city in Butte is not in Pierre."], "premises-FOL": ["CityIn(billings, montana)", "CityIn(butte, montana) ∧ CityIn(helena, montana) ∧ CityIn(missoula, montana)", "∃x (CityIn(whitesulphursprings, x) ∧ CityIn(butte, x))", "¬CityIn(pierre, montana)", "∀x (CityIn(butte, x) → ¬CityIn(pierre, x))"], "conclusion": "Butte and Pierre are in the same state.", "conclusion-FOL": "∃x (CityIn(butte, x) ∧ CityIn(pierre, x))", "label": "False", "premises_nouns_p": ["Billings is a city in Montana.", "Montana includes the cities of Butte, Helena, and Missoula.", "White Sulphur Springs and Butte are cities in the same state.", "The city of Pierre is not in Montana.", "Any city in Butte is not in Pierre."], "conclusion_nouns_p": "Butte and Pierre are in the same state."}
{"premises": ["Billings is a city in Montana.", "Montana includes the cities of Butte, Helena, and Missoula.", "White Sulphur Springs and Butte are cities in the same state.", "The city of Pierre is not in Montana.", "Any city in Butte is not in Pierre."], "premises-FOL": ["CityIn(billings, montana)", "CityIn(butte, montana) ∧ CityIn(helena, montana) ∧ CityIn(missoula, montana)", "∃x (CityIn(whitesulphursprings, x) ∧ CityIn(butte, x))", "¬CityIn(pierre, montana)", "∀x (CityIn(butte, x) → ¬CityIn(pierre, x))"], "conclusion": "Pierre and Bismarck are in the same state.", "conclusion-FOL": "∃x (CityIn(pierre, x) ∧ CityIn(bismarck, x))", "label": "Uncertain", "premises_nouns_p": ["Billings is a city in Montana.", "Montana includes the cities of Butte, Helena, and Missoula.", "White Sulphur Springs and Butte are cities in the same state.", "The city of Pierre is not in Montana.", "Any city in Butte is not in Pierre."], "conclusion_nouns_p": "Pierre and Bismarck are in the same state."}
{"premises": ["Billings is a city in Montana.", "Montana includes the cities of Butte, Helena, and Missoula.", "White Sulphur Springs and Butte are cities in the same state.", "The city of Pierre is not in Montana.", "Any city in Butte is not in Pierre."], "premises-FOL": ["CityIn(billings, montana)", "CityIn(butte, montana) ∧ CityIn(helena, montana) ∧ CityIn(missoula, montana)", "∃x (CityIn(whitesulphursprings, x) ∧ CityIn(butte, x))", "¬CityIn(pierre, montana)", "∀x (CityIn(butte, x) → ¬CityIn(pierre, x))"], "conclusion": "Montana is home to the city of Missoula.", "conclusion-FOL": "CityIn(missoula, montana)", "label": "True", "premises_nouns_p": ["Billings is a city in Montana.", "Montana includes the cities of Butte, Helena, and Missoula.", "White Sulphur Springs and Butte are cities in the same state.", "The city of Pierre is not in Montana.", "Any city in Butte is not in Pierre."], "conclusion_nouns_p": "Montana is home to the city of Missoula."}
{"premises": ["International students in US have either an F1 visa or a J1 visa.", "An international student in US with an F1 visa needs to apply for CPT or OPT if the student wants to work in the US.", "Mike is an international student.", "Mike needs to apply for CPT if he wants to work in the US."], "premises-FOL": ["∀x (InternationalStudent(x) → F1(x) ⊕ J1(x))", "∀x (InternationalStudent(x) ∧ F1(x) ∧ WantWorkInUS(x) → Apply(x, cpt) ∨ Apply(x, opt))", "InternationalStudent(mike)", "WantWorkInUS(mike) → Apply(mike, cpt)"], "conclusion": "Mike has an F1 visa.", "conclusion-FOL": "F1(mike)", "label": "Uncertain", "premises_nouns_p": ["International students in US have either an F1 visa or a J1 visa.", "An international student in US with an F1 visa needs to apply for CPT or OPT if the student wants to work in the US.", "Mike is an international student.", "Mike needs to apply for CPT if he wants to work in the US."], "conclusion_nouns_p": "Mike has an F1 visa."}
{"premises": ["International students in US have either an F1 visa or a J1 visa.", "An international student in US with an F1 visa needs to apply for CPT or OPT if the student wants to work in the US.", "Mike is an international student.", "Mike needs to apply for CPT if he wants to work in the US."], "premises-FOL": ["∀x (InternationalStudent(x) → F1(x) ⊕ J1(x))", "∀x (InternationalStudent(x) ∧ F1(x) ∧ WantWorkInUS(x) → Apply(x, cpt) ∨ Apply(x, opt))", "InternationalStudent(mike)", "WantWorkInUS(mike) → Apply(mike, cpt)"], "conclusion": "Mike has a J1 visa.", "conclusion-FOL": "J1(mike)", "label": "Uncertain", "premises_nouns_p": ["International students in US have either an F1 visa or a J1 visa.", "An international chicken in US with an F1 visa needs to apply for CPT or OPT if the chicken wants to work in the US.", "Mike is an international chicken.", "Mike needs to apply for CPT if he wants to work in the US."], "conclusion_nouns_p": "Mike has a J1 visa."}
{"premises": ["All cows are bovines.", "Some pets are cows.", "If something is a bovine, then it is domesticated.", "No domesticated animals are alligators.", "Ted is an aligator."], "premises-FOL": ["∀x (Cow(x) → Bovine(x))", "∃x (Pet(x) ∧ Cow(x))", "∀x (Bovine(x) → Domesticated(x))", "∀x (Domesticated(x) → ¬Aligator(x))", "Aligator(ted)"], "conclusion": "Ted is a pet.", "conclusion-FOL": "Pet(ted)", "label": "Uncertain", "premises_nouns_p": ["All cows are bovines.", "Some pets are cows.", "If something is a bovine, then it is domesticated.", "No domesticated animals are alligators.", "Ted is a toaster."], "conclusion_nouns_p": "Ted is a pet."}
{"premises": ["All cows are bovines.", "Some pets are cows.", "If something is a bovine, then it is domesticated.", "No domesticated animals are alligators.", "Ted is an aligator."], "premises-FOL": ["∀x (Cow(x) → Bovine(x))", "∃x (Pet(x) ∧ Cow(x))", "∀x (Bovine(x) → Domesticated(x))", "∀x (Domesticated(x) → ¬Aligator(x))", "Aligator(ted)"], "conclusion": "Ted is a pet and a cow.", "conclusion-FOL": "Pet(ted) ∧ Cow(ted)", "label": "False", "premises_nouns_p": ["All cows are bovines.", "Some pets are cows.", "If something is a bovine, then it is domesticated.", "No domesticated animals are alligators.", "Ted is a toaster."], "conclusion_nouns_p": "Ted is a pet and a cow."}
{"premises": ["All cows are bovines.", "Some pets are cows.", "If something is a bovine, then it is domesticated.", "No domesticated animals are alligators.", "Ted is an aligator."], "premises-FOL": ["∀x (Cow(x) → Bovine(x))", "∃x (Pet(x) ∧ Cow(x))", "∀x (Bovine(x) → Domesticated(x))", "∀x (Domesticated(x) → ¬Aligator(x))", "Aligator(ted)"], "conclusion": "If Ted is a cow, then Ted is not a pet.", "conclusion-FOL": "Cow(ted) → ¬Pet(ted)", "label": "True", "premises_nouns_p": ["All cows are bovines.", "Some pets are cows.", "If something is a bovine, then it is domesticated.", "No domesticated animals are alligators.", "Ted is an aligator."], "conclusion_nouns_p": "If Ted is a cow, then Ted is not a pet."}
{"premises": ["Yale University is a private Ivy League research university.", "Yale University moved to New Haven in 1716.", "Yale university's endowment was valued at $42.3 billion.", "Yale University has been organized into 27 constituent colleges and schools: the residential colleges, the Yale Graduate School of Arts and Sciences, and twelve professional schools.", "A list of residential colleges at Yale: Benjamin Franklin College, Berkeley College, Branford College, Davenport College, Ezra Stiles College, Grace Hopper College, Jonathan Edwards College, Morse College, Pauli Murray College, Pierson College, Saybrook College, Silliman College, Timothy Dwight College, and Trumbull College."], "premises-FOL": ["PrivateIvyLeagueResearchUniversity(yale)", "MovedTo(yale, newhaven) ∧ MovedIn(yale, y1716)", "ValuedAt(yalesendowment, y42.3billion)", "∃x (OrganizedInto(yale, x) ∧ ConstituentCollegesandSchools(x) ∧ ((ResidentialCollege(x) ⊕ GraduateSchool(x)) ⊕ ProfessionalSchool(x)))", "ResidentialCollege(benjaminfranklincollege) ∧ AtYale(benjaminfranklincollege) ∧ ResidentialCollege(berkeleycollege) ∧ AtYale(berkeleycollege) ∧ ResidentialCollege(branfordcollege) ∧ AtYale(branfordcollege) ∧ ResidentialCollege(davenportcollege) ∧ AtYale(davenportcollege) ∧ ResidentialCollege(ezrastilescollege) ∧ AtYale(ezrastilescollege) ∧ ResidentialCollege(gracehoppercollege) ∧ AtYale(gracehoppercollege) ∧ ResidentialCollege(jonathanedwardscollege) ∧ AtYale(jonathanedwardscollege) ∧ ResidentialCollege(morsecollege) ∧ AtYale(morsecollege) ∧ ResidentialCollege(paulimurraycollege) ∧ AtYale(paulimurraycollege) ∧ ResidentialCollege(piersoncollege) ∧ AtYale(piersoncollege) ∧ ResidentialCollege(saybrookcollege) ∧ AtYale(saybrookcollege) ∧ ResidentialCollege(sillimancollege) ∧ AtYale(sillimancollege) ∧ ResidentialCollege(timothydwightcollege) ∧ AtYale(timothydwightcollege) ∧ ResidentialCollege(trumbullcollege) ∧ AtYale(trumbullcollege)"], "conclusion": "A private Ivy League research university moved to New Haven.", "conclusion-FOL": "∃x (PrivateIvyLeagueResearchUniversity(x) ∧ MovedTo(x, newhaven))", "label": "True", "premises_nouns_p": ["Yale University is a private Ivy League research university.", "Yale University moved to New Haven in 1716.", "Yale university's endowment was valued at $42.3 billion.", "Yale University has been organized into 27 constituent colleges and schools: the residential colleges, the Yale Graduate School of Arts and Sciences, and twelve professional schools.", "A list of residential colleges at Yale: Benjamin Franklin College, Berkeley College, Branford College, Davenport College, Ezra Stiles College, Grace Hopper College, Jonathan Edwards College, Morse College, Pauli Murray College, Pierson College, Saybrook College, Silliman College, Timothy Dwight College, and Trumbull College."], "conclusion_nouns_p": "A private Ivy League research university moved to New Haven."}
{"premises": ["Yale University is a private Ivy League research university.", "Yale University moved to New Haven in 1716.", "Yale university's endowment was valued at $42.3 billion.", "Yale University has been organized into 27 constituent colleges and schools: the residential colleges, the Yale Graduate School of Arts and Sciences, and twelve professional schools.", "A list of residential colleges at Yale: Benjamin Franklin College, Berkeley College, Branford College, Davenport College, Ezra Stiles College, Grace Hopper College, Jonathan Edwards College, Morse College, Pauli Murray College, Pierson College, Saybrook College, Silliman College, Timothy Dwight College, and Trumbull College."], "premises-FOL": ["PrivateIvyLeagueResearchUniversity(yale)", "MovedTo(yale, newhaven) ∧ MovedIn(yale, y1716)", "ValuedAt(yalesendowment, y42.3billion)", "∃x (OrganizedInto(yale, x) ∧ ConstituentCollegesandSchools(x) ∧ ((ResidentialCollege(x) ⊕ GraduateSchool(x)) ⊕ ProfessionalSchool(x)))", "ResidentialCollege(benjaminfranklincollege) ∧ AtYale(benjaminfranklincollege) ∧ ResidentialCollege(berkeleycollege) ∧ AtYale(berkeleycollege) ∧ ResidentialCollege(branfordcollege) ∧ AtYale(branfordcollege) ∧ ResidentialCollege(davenportcollege) ∧ AtYale(davenportcollege) ∧ ResidentialCollege(ezrastilescollege) ∧ AtYale(ezrastilescollege) ∧ ResidentialCollege(gracehoppercollege) ∧ AtYale(gracehoppercollege) ∧ ResidentialCollege(jonathanedwardscollege) ∧ AtYale(jonathanedwardscollege) ∧ ResidentialCollege(morsecollege) ∧ AtYale(morsecollege) ∧ ResidentialCollege(paulimurraycollege) ∧ AtYale(paulimurraycollege) ∧ ResidentialCollege(piersoncollege) ∧ AtYale(piersoncollege) ∧ ResidentialCollege(saybrookcollege) ∧ AtYale(saybrookcollege) ∧ ResidentialCollege(sillimancollege) ∧ AtYale(sillimancollege) ∧ ResidentialCollege(timothydwightcollege) ∧ AtYale(timothydwightcollege) ∧ ResidentialCollege(trumbullcollege) ∧ AtYale(trumbullcollege)"], "conclusion": "Yale University has the largest university endowment of any educational institution.", "conclusion-FOL": "LargestUniversityEndowmentOf(yale, anyeducationalinstitution)", "label": "Uncertain", "premises_nouns_p": ["Yale University is a private Ivy League research university.", "Yale University moved to New Haven in 1716.", "Yale university's endowment was valued at $42.3 billion.", "Yale University has been organized into 27 constituent puddings and schools: the residential puddings, the Yale Graduate School of Arts and Sciences, and twelve professional schools.", "A list of residential puddings at Yale: Benjamin Franklin Pudding, Berkeley Pudding, Branford Pudding, Davenport Pudding, Ezra Stiles Pudding, Grace Hopper Pudding, Jonathan Edwards Pudding, Morse Pudding, Pauli Murray Pudding, Pierson Pudding, Saybrook Pudding, Silliman Pudding, Timothy Dwight Pudding, and Trumbull Pudding."], "conclusion_nouns_p": "Yale University has the largest university endowment of any educational institution."}
{"premises": ["Yale University is a private Ivy League research university.", "Yale University moved to New Haven in 1716.", "Yale university's endowment was valued at $42.3 billion.", "Yale University has been organized into 27 constituent colleges and schools: the residential colleges, the Yale Graduate School of Arts and Sciences, and twelve professional schools.", "A list of residential colleges at Yale: Benjamin Franklin College, Berkeley College, Branford College, Davenport College, Ezra Stiles College, Grace Hopper College, Jonathan Edwards College, Morse College, Pauli Murray College, Pierson College, Saybrook College, Silliman College, Timothy Dwight College, and Trumbull College."], "premises-FOL": ["PrivateIvyLeagueResearchUniversity(yale)", "MovedTo(yale, newhaven) ∧ MovedIn(yale, y1716)", "ValuedAt(yalesendowment, y42.3billion)", "∃x (OrganizedInto(yale, x) ∧ ConstituentCollegesandSchools(x) ∧ ((ResidentialCollege(x) ⊕ GraduateSchool(x)) ⊕ ProfessionalSchool(x)))", "ResidentialCollege(benjaminfranklincollege) ∧ AtYale(benjaminfranklincollege) ∧ ResidentialCollege(berkeleycollege) ∧ AtYale(berkeleycollege) ∧ ResidentialCollege(branfordcollege) ∧ AtYale(branfordcollege) ∧ ResidentialCollege(davenportcollege) ∧ AtYale(davenportcollege) ∧ ResidentialCollege(ezrastilescollege) ∧ AtYale(ezrastilescollege) ∧ ResidentialCollege(gracehoppercollege) ∧ AtYale(gracehoppercollege) ∧ ResidentialCollege(jonathanedwardscollege) ∧ AtYale(jonathanedwardscollege) ∧ ResidentialCollege(morsecollege) ∧ AtYale(morsecollege) ∧ ResidentialCollege(paulimurraycollege) ∧ AtYale(paulimurraycollege) ∧ ResidentialCollege(piersoncollege) ∧ AtYale(piersoncollege) ∧ ResidentialCollege(saybrookcollege) ∧ AtYale(saybrookcollege) ∧ ResidentialCollege(sillimancollege) ∧ AtYale(sillimancollege) ∧ ResidentialCollege(timothydwightcollege) ∧ AtYale(timothydwightcollege) ∧ ResidentialCollege(trumbullcollege) ∧ AtYale(trumbullcollege)"], "conclusion": "Pierson College is a residential college at Yale.", "conclusion-FOL": "ResidentialCollege(piersoncollege) ∧ AtYale(piersoncollege)", "label": "True", "premises_nouns_p": ["Unicorn University is a private Ivy League research university.", "Unicorn University moved to the Moon in 1716.", "Unicorn university's endowment was valued at $42.3 billion.", "Unicorn University has been organized into 27 constituent colleges and schools: the residential colleges, the Unicorn Graduate School of Arts and Sciences, and twelve professional schools.", "A list of residential colleges at Unicorn: Benjamin Franklin College, Berkeley College, Branford College, Davenport College, Ezra Stiles College, Grace Hopper College, Jonathan Edwards College, Morse College, Pauli Murray College, Pierson College, Saybrook College, Silliman College, Timothy Dwight College, and Trumbull College."], "conclusion_nouns_p": "Pierson College is a residential college at Unicorn."}
{"premises": ["Badults is a British Sitcom series, starring members of Pappy's.", "Badults piloted in July 2013 on BBC Three.", "The Working title \"The Secret Dude Society\" was used for Badults.", "Andrew Collins was the script editor for Badults"], "premises-FOL": ["∃x (MemberOf(x, pappys) ∧ BritishSitcom(badults) ∧ Series(badults) ∧ Starring(badults, x))", "PilotedIn(badults, july2013) ∧ PilotedOn(badults, bbcthree)", "WorkingTitle(thesecretdudesociety, badults)", "ScriptEditor(andrewcollins) ∧ ScriptEditorFor(andrewcollins, badults)"], "conclusion": "Andrew Collins was the script editor for a series with the working title \"The Secret Dude Society\".", "conclusion-FOL": "∃x (ScriptEditorFor(andrewcollins, x) ∧ Series(x) ∧ WorkingTitle(thesecretdudesociety, x))", "label": "True", "premises_nouns_p": ["Badults is a British Sitcom series, starring members of Pappy's.", "Badults piloted in July 2013 on BBC Three.", "The Working title \"The Secret Dude Society\" was used for Badults.", "Andrew Collins was the script editor for Badults"], "conclusion_nouns_p": "Andrew Collins was the script editor for a series with the working title \"The Secret Dude Society\"."}
{"premises": ["Badults is a British Sitcom series, starring members of Pappy's.", "Badults piloted in July 2013 on BBC Three.", "The Working title \"The Secret Dude Society\" was used for Badults.", "Andrew Collins was the script editor for Badults"], "premises-FOL": ["∃x (MemberOf(x, pappys) ∧ BritishSitcom(badults) ∧ Series(badults) ∧ Starring(badults, x))", "PilotedIn(badults, july2013) ∧ PilotedOn(badults, bbcthree)", "WorkingTitle(thesecretdudesociety, badults)", "ScriptEditor(andrewcollins) ∧ ScriptEditorFor(andrewcollins, badults)"], "conclusion": "No members of Pappy's have starred for a show piloting on BBC Two or BBC Three.", "conclusion-FOL": "∀x ∀y (MemberOf(x, pappys) ∧ Starring(y, x) → ¬(PilotedOn(y, bbctwo) ∨ PilotedOn(y, bbcthree)))", "label": "False", "premises_nouns_p": ["Badults is a British Sitcom series, starring members of Pappy's.", "Badults piloted in July 2013 on BBC Three.", "The Working title \"The Secret Dude Society\" was used for Badults.", "Andrew Collins was the script editor for Badults"], "conclusion_nouns_p": "No members of Pappy's have starred for a show piloting on BBC Two or BBC Three."}
{"premises": ["All growth companies’ stocks are volatile.", "If the stock price is volatile, then it is not suitable for a retirement fund.", "Some companies’ stocks are growth companies’ stocks.", "All mature companies’ stocks are suitable for a retirement fund.", "KO is a mature company’s stock."], "premises-FOL": ["∀x (GrowthCompanies’Stocks(x) → PriceVolatile(x))", " ∀x (PriceVolatile(x) → ¬SuitableForRetirementRund(x)) ", " ∃x (Companies’Stocks(x) ∧ GrowthCompanies’Stocks(x))", " ∀x (MatureCompanies’Stocks(x) → SuitableForRetirementRund(x))", " MatureCompanies’Stocks(kO)"], "conclusion": "KO is a company stock.", "conclusion-FOL": "Companies’Stocks(kO)", "label": "Uncertain", "premises_nouns_p": ["All growth companies’ stocks are volatile.", "If the stock price is volatile, then it is not suitable for a retirement fund.", "Some companies’ stocks are growth companies’ stocks.", "All mature companies’ stocks are suitable for a retirement fund.", "KO is a mature company’s stock."], "conclusion_nouns_p": "KO is a company stock."}
{"premises": ["All growth companies’ stocks are volatile.", "If the stock price is volatile, then it is not suitable for a retirement fund.", "Some companies’ stocks are growth companies’ stocks.", "All mature companies’ stocks are suitable for a retirement fund.", "KO is a mature company’s stock."], "premises-FOL": ["∀x (GrowthCompanies’Stocks(x) → PriceVolatile(x))", " ∀x (PriceVolatile(x) → ¬SuitableForRetirementRund(x)) ", " ∃x (Companies’Stocks(x) ∧ GrowthCompanies’Stocks(x))", " ∀x (MatureCompanies’Stocks(x) → SuitableForRetirementRund(x))", " MatureCompanies’Stocks(kO)"], "conclusion": "KO is a company stock and a growth company’s stock.", "conclusion-FOL": "Companies’Stocks(kO) ∧ GrowthCompanies’Stocks(kO)", "label": "False", "premises_nouns_p": ["All growth companies’ rocks are volatile.", "If the rock price is volatile, then it is not suitable for a retirement fund.", "Some companies’ rocks are growth companies’ rocks.", "All mature companies’ rocks are suitable for a retirement fund.", "KO is a mature company’s rock."], "conclusion_nouns_p": "KO is a company rock and a growth company’s rock."}
{"premises": ["All growth companies’ stocks are volatile.", "If the stock price is volatile, then it is not suitable for a retirement fund.", "Some companies’ stocks are growth companies’ stocks.", "All mature companies’ stocks are suitable for a retirement fund.", "KO is a mature company’s stock."], "premises-FOL": ["∀x (GrowthCompanies’Stocks(x) → PriceVolatile(x))", " ∀x (PriceVolatile(x) → ¬SuitableForRetirementRund(x)) ", " ∃x (Companies’Stocks(x) ∧ GrowthCompanies’Stocks(x))", " ∀x (MatureCompanies’Stocks(x) → SuitableForRetirementRund(x))", " MatureCompanies’Stocks(kO)"], "conclusion": "If KO is a growth company’s stock or if its price is volatile, then KO is neither a company’s stock nor is its price volatile.", "conclusion-FOL": "GrowthCompanies’Stocks(kO) ∨ PriceVolatile(kO) → ¬Companies’Stocks(kO) ∨ ¬PriceVolatile(kO)", "label": "True", "premises_nouns_p": ["If the price of a cloud is volatile, then it is not suitable for a retirement fund.", "Some companies’ stocks are growth companies’ stocks.", "All mature companies’ stocks are suitable for a retirement fund.", "KO is a mature company’s stock.", "All growth companies’ stocks are volatile."], "conclusion_nouns_p": "If KO is a growth company’s stock or if its price is volatile, then KO is neither a company’s stock nor is its price volatile."}
{"premises": ["All vehicle registration plates in Istanbul begin with the number 34.", "Plates that do not begin with the number 34 are not from Istanbul. ", "Joe's vehicle registration plate is from Istanbul. ", "Tom's license plate begins with the number 35. ", "[BG] If a license plate begins with the number 35, then it does not begin with the number 34."], "premises-FOL": ["∀x (Vehicleregistrationplate(x, istanbul) → Beginwith(x, number34))", "∀x (¬Beginwith(x, number34) → ¬FromIstanbul(x))", "Vehicleregistrationplate(joe, istanbul)", "Beginwith(tom, number35)", "∀x (Beginwith(x, number35) → ¬Beginwith(x, number34))"], "conclusion": "Joe's license plate begins with the number 34.", "conclusion-FOL": "Beginwith(joe, number34)", "label": "True", "premises_nouns_p": ["All vehicle registration plates in the Andromeda Galaxy begin with the number 34.", "Plates that do not begin with the number 34 are not from the Andromeda Galaxy.", "Joe's vehicle registration plate is from the Andromeda Galaxy.", "Tom's license plate begins with the number 35.", "[BG] If a license plate begins with the number 35, then it does not begin with the number 34."], "conclusion_nouns_p": "Joe's license plate begins with the number 34."}
{"premises": ["All vehicle registration plates in Istanbul begin with the number 34.", "Plates that do not begin with the number 34 are not from Istanbul. ", "Joe's vehicle registration plate is from Istanbul. ", "Tom's license plate begins with the number 35. ", "[BG] If a license plate begins with the number 35, then it does not begin with the number 34."], "premises-FOL": ["∀x (Vehicleregistrationplate(x, istanbul) → Beginwith(x, number34))", "∀x (¬Beginwith(x, number34) → ¬FromIstanbul(x))", "Vehicleregistrationplate(joe, istanbul)", "Beginwith(tom, number35)", "∀x (Beginwith(x, number35) → ¬Beginwith(x, number34))"], "conclusion": "Tom's license plate is from Istanbul.", "conclusion-FOL": "Vehicleregistrationplate(tom, istanbul)", "label": "False", "premises_nouns_p": ["All vehicle registration plates in Atlantis begin with the number 34.", "Plates that do not begin with the number 34 are not from Atlantis.", "Joe's vehicle registration plate is from Atlantis.", "Tom's license plate begins with the number 35.", "[BG] If a license plate begins with the number 35, then it does not begin with the number 34."], "conclusion_nouns_p": "Tom's license plate is from Atlantis."}
{"premises": ["If people work in student jobs on campus, then they need to earn money to help pay for their college tuition.", "If people order takeout frequently in college, then they work in student jobs on campus.", "People either order takeout frequently in college or enjoy the dining hall meals and recipes.", "If people enjoy the dining hall meals and recipes, then they are not picky eaters.", "If people enjoy the dining hall meals and recipes, then they spend a lot of their time eating and catching up with friends in the campus dining halls.", "If Mary works in student jobs on campus and needs to earn money to help pay for her college tuition, then Mary is neither picky nor needs to earn money to help pay for her college tuition."], "premises-FOL": ["∀x (StudentJobs(x) → Tuition(x))", "∀x (Takeout(x) → StudentJobs(x))", "∀x (Takeout(x) ∨ DiningHall(x))", "∀x (DiningHall(x) → NotPicky(x))", "∀x (DiningHall(x) → Eating(x))", "StudentJobs(mary) ∧ Tuition(mary) → ¬(NotPicky(mary) ∨ Tuition(mary))"], "conclusion": "Mary needs to earn money to help pay for her college tuition.", "conclusion-FOL": "Tuition(mary)", "label": "Uncertain", "premises_nouns_p": ["If squirrels work in student jobs on campus, then they need to earn money to help pay for their wizard tuition.", "If squirrels order takeout frequently in college, then they work in student jobs on campus.", "Squirrels either order takeout frequently in college or enjoy the dining hall meals and recipes.", "If squirrels enjoy the dining hall meals and recipes, then they are not picky eaters.", "If squirrels enjoy the dining hall meals and recipes, then they spend a lot of their time eating and catching up with friends in the campus dining halls.", "If Mary works in student jobs on campus and needs to earn money to help pay for her wizard tuition, then Mary is neither picky nor needs to earn money to help pay for her wizard tuition."], "conclusion_nouns_p": "Mary needs to earn money to help pay for her wizard tuition."}
{"premises": ["If people work in student jobs on campus, then they need to earn money to help pay for their college tuition.", "If people order takeout frequently in college, then they work in student jobs on campus.", "People either order takeout frequently in college or enjoy the dining hall meals and recipes.", "If people enjoy the dining hall meals and recipes, then they are not picky eaters.", "If people enjoy the dining hall meals and recipes, then they spend a lot of their time eating and catching up with friends in the campus dining halls.", "If Mary works in student jobs on campus and needs to earn money to help pay for her college tuition, then Mary is neither picky nor needs to earn money to help pay for her college tuition."], "premises-FOL": ["∀x (StudentJobs(x) → Tuition(x))", "∀x (Takeout(x) → StudentJobs(x))", "∀x (Takeout(x) ∨ DiningHall(x))", "∀x (DiningHall(x) → NotPicky(x))", "∀x (DiningHall(x) → Eating(x))", "StudentJobs(mary) ∧ Tuition(mary) → ¬(NotPicky(mary) ∨ Tuition(mary))"], "conclusion": "Mary is not a picky eater and spends a lot of her time eating and catching up with friends in the campus dining halls.", "conclusion-FOL": "NotPicky(mary) ∧ Eating(mary)", "label": "True", "premises_nouns_p": ["If gnomes work in student jobs on campus, then they need to earn money to help pay for their college tuition.", "If gnomes order takeout frequently in college, then they work in student jobs on campus.", "Gnomes either order takeout frequently in college or enjoy the dining hall meals and recipes.", "If gnomes enjoy the dining hall meals and recipes, then they are not picky eaters.", "If gnomes enjoy the dining hall meals and recipes, then they spend a lot of their time eating and catching up with friends in the campus dining halls.", "If Mary works in student jobs on campus and needs to earn money to help pay for her college tuition, then Mary is neither picky nor needs to earn money to help pay for her college tuition."], "conclusion_nouns_p": "Mary is not a picky eater and spends a lot of her time eating and catching up with friends in the campus dining halls."}
{"premises": ["If people work in student jobs on campus, then they need to earn money to help pay for their college tuition.", "If people order takeout frequently in college, then they work in student jobs on campus.", "People either order takeout frequently in college or enjoy the dining hall meals and recipes.", "If people enjoy the dining hall meals and recipes, then they are not picky eaters.", "If people enjoy the dining hall meals and recipes, then they spend a lot of their time eating and catching up with friends in the campus dining halls.", "If Mary works in student jobs on campus and needs to earn money to help pay for her college tuition, then Mary is neither picky nor needs to earn money to help pay for her college tuition."], "premises-FOL": ["∀x (StudentJobs(x) → Tuition(x))", "∀x (Takeout(x) → StudentJobs(x))", "∀x (Takeout(x) ∨ DiningHall(x))", "∀x (DiningHall(x) → NotPicky(x))", "∀x (DiningHall(x) → Eating(x))", "StudentJobs(mary) ∧ Tuition(mary) → ¬(NotPicky(mary) ∨ Tuition(mary))"], "conclusion": "Mary either is not a picky eater or, if she is, then she spends a lot of her time eating and catching up with friends in the campus dining halls.", "conclusion-FOL": "NotPicky(mary) ⊕ Eating(mary)", "label": "False", "premises_nouns_p": ["If giraffes work in student jobs on campus, then they need to earn money to help pay for their college tuition.", "If giraffes order takeout frequently in college, then they work in student jobs on campus.", "Giraffes either order takeout frequently in college or enjoy the dining hall meals and recipes.", "If giraffes enjoy the dining hall meals and recipes, then they are not picky eaters.", "If giraffes enjoy the dining hall meals and recipes, then they spend a lot of their time eating and catching up with friends in the campus dining halls.", "If Mary works in student jobs on campus and needs to earn money to help pay for her college tuition, then Mary is neither picky nor needs to earn money to help pay for her college tuition."], "conclusion_nouns_p": "Mary either is not a picky eater or, if she is, then she spends a lot of her time eating and catching up with friends in the campus dining halls."}
{"premises": ["No bakery is spicy.", "All cupcakes are bakeries.", "All hotpots are spicy.", "All products of Baked by Melissa are cupcakes.", "If dried Thai chilies are spicy or a bakery, then dried Thai chilies are a hotpot or are spicy."], "premises-FOL": ["∀x (Bakery(x) → ¬Spicy(x))", "∀x (Cupcakes(x) → Bakery(x))", "∀x (Hotpot(x) → Spicy(x))", "∀x (ProductsOfBakedByMelissa(x) → Cupcakes(x))", "Spicy(driedThaiChilies) ∨ Bakery(driedThaiChilies) → Hotpot(driedThaiChilies) ∨ Spicy(driedThaiChilies)"], "conclusion": "Dried Thai chilies are a product of Baked by Melissa.", "conclusion-FOL": "ProductsOfBakedByMelissa(driedThaiChilies)", "label": "False", "premises_nouns_p": ["No bakery is sweet.", "All cupcakes are bakeries.", "All hotpots are sweet.", "All products of Baked by Melissa are cupcakes.", "If dried Thai chilies are sweet or a bakery, then dried Thai chilies are a hotpot or are sweet."], "conclusion_nouns_p": "Dried Thai chilies are a product of Baked by Melissa."}
{"premises": ["No bakery is spicy.", "All cupcakes are bakeries.", "All hotpots are spicy.", "All products of Baked by Melissa are cupcakes.", "If dried Thai chilies are spicy or a bakery, then dried Thai chilies are a hotpot or are spicy."], "premises-FOL": ["∀x (Bakery(x) → ¬Spicy(x))", "∀x (Cupcakes(x) → Bakery(x))", "∀x (Hotpot(x) → Spicy(x))", "∀x (ProductsOfBakedByMelissa(x) → Cupcakes(x))", "Spicy(driedThaiChilies) ∨ Bakery(driedThaiChilies) → Hotpot(driedThaiChilies) ∨ Spicy(driedThaiChilies)"], "conclusion": "Dried Thai chilies are not a product of Baked by Melissa.", "conclusion-FOL": "¬ProductsOfBakedByMelissa(driedThaiChilies)", "label": "True", "premises_nouns_p": ["No cloud is spicy.", "All cupcakes are clouds.", "All hotpots are spicy.", "All products of Baked by Capybara are cupcakes.", "If dried Thai chilies are spicy or a cloud, then dried Thai chilies are a hotpot or are spicy."], "conclusion_nouns_p": "Dried Thai chilies are not a product of Baked by Capybara."}
{"premises": ["No bakery is spicy.", "All cupcakes are bakeries.", "All hotpots are spicy.", "All products of Baked by Melissa are cupcakes.", "If dried Thai chilies are spicy or a bakery, then dried Thai chilies are a hotpot or are spicy."], "premises-FOL": ["∀x (Bakery(x) → ¬Spicy(x))", "∀x (Cupcakes(x) → Bakery(x))", "∀x (Hotpot(x) → Spicy(x))", "∀x (ProductsOfBakedByMelissa(x) → Cupcakes(x))", "Spicy(driedThaiChilies) ∨ Bakery(driedThaiChilies) → Hotpot(driedThaiChilies) ∨ Spicy(driedThaiChilies)"], "conclusion": "Dried Thai chilies are a hotpot.", "conclusion-FOL": "Hotpot(driedThaiChilies)", "label": "Uncertain", "premises_nouns_p": ["No bakery is fizzy.", "All cupcakes are bakeries.", "All hotpots are fizzy.", "All products of Baked by Melissa are cupcakes.", "If dried Thai chilies are fizzy or a bakery, then dried Thai chilies are a hotpot or are fizzy."], "conclusion_nouns_p": "Dried Thai chilies are a hotpot."}
{"premises": ["No bakery is spicy.", "All cupcakes are bakeries.", "All hotpots are spicy.", "All products of Baked by Melissa are cupcakes.", "If dried Thai chilies are spicy or a bakery, then dried Thai chilies are a hotpot or are spicy."], "premises-FOL": ["∀x (Bakery(x) → ¬Spicy(x))", "∀x (Cupcakes(x) → Bakery(x))", "∀x (Hotpot(x) → Spicy(x))", "∀x (ProductsOfBakedByMelissa(x) → Cupcakes(x))", "Spicy(driedThaiChilies) ∨ Bakery(driedThaiChilies) → Hotpot(driedThaiChilies) ∨ Spicy(driedThaiChilies)"], "conclusion": "Dried Thai chilies are neither a product of Baked by Melissa nor a bakery.", "conclusion-FOL": "¬ProductsOfBakedByMelissa(driedThaiChilies) ∧ ¬Bakery(driedThaiChilies)", "label": "True", "premises_nouns_p": ["No bakery is gooey.", "All cupcakes are bakeries.", "All hotpots are gooey.", "All products of Baked by Melissa are cupcakes.", "If dried Thai chilies are gooey or a bakery, then dried Thai chilies are a hotpot or are gooey."], "conclusion_nouns_p": "Dried Thai chilies are neither a product of Baked by Melissa nor a bakery."}
{"premises": ["No bakery is spicy.", "All cupcakes are bakeries.", "All hotpots are spicy.", "All products of Baked by Melissa are cupcakes.", "If dried Thai chilies are spicy or a bakery, then dried Thai chilies are a hotpot or are spicy."], "premises-FOL": ["∀x (Bakery(x) → ¬Spicy(x))", "∀x (Cupcakes(x) → Bakery(x))", "∀x (Hotpot(x) → Spicy(x))", "∀x (ProductsOfBakedByMelissa(x) → Cupcakes(x))", "Spicy(driedThaiChilies) ∨ Bakery(driedThaiChilies) → Hotpot(driedThaiChilies) ∨ Spicy(driedThaiChilies)"], "conclusion": "Dried Thai chilies are cupcakes and a product of Baked by Melissa.", "conclusion-FOL": "Cupcake(driedThaiChilies) ∧ ProductsOfBakedByMelissa(driedThaiChilies)", "label": "False", "premises_nouns_p": ["No bakery is slimy.", "All cupcakes are bakeries.", "All hotpots are slimy.", "All products of Baked by Melissa are cupcakes.", "If dried Thai chilies are slimy or a bakery, then dried Thai chilies are a hotpot or are slimy."], "conclusion_nouns_p": "Dried Thai chilies are cupcakes and a product of Baked by Melissa."}
{"premises": ["If the restaurant is listed in Yelp’s recommendations, then the restaurant does not receive many negative reviews.", "All restaurants with a rating greater than 9 are listed in Yelp’s recommendations.", "Some restaurants that do not provide take-out service receive many negative reviews.", "All restaurants that are popular among local residents have ratings greater than 9.", "Subway has a rating greater than 9 or is popular among local residents."], "premises-FOL": ["∀x (YelpRecommendation(x) → ¬NegativeReview(x))", "∀x (RatingGreaterThan9(x) → YelpRecommendation(x))", "∃x (NoTakeOutService(x) ∧ NegativeReview(x))", "∀x (PopularAmongLocalResidents(x) → RatingGreaterThan9(x))", "RatingGreaterThan9(subway) ⊕ PopularAmongLocalResidents(subway)"], "conclusion": "If Subway provides take-out service and receives many negative reviews, then its rating is greater than 9 and it does not provide take-out service.", "conclusion-FOL": "NoTakeOutService(subway)", "label": "Uncertain", "premises_nouns_p": ["If the eatery is listed in Yelp’s recommendations, then the eatery does not receive many negative reviews.", "All eateries with a rating greater than 9 are listed in Yelp’s recommendations.", "Some eateries that do not provide take-out service receive many negative reviews.", "All eateries that are popular among local residents have ratings greater than 9.", "Subway has a rating greater than 9 or is popular among local residents."], "conclusion_nouns_p": "If Subway provides take-out service and receives many negative reviews, then its rating is greater than 9 and it does not provide take-out service."}
{"premises": ["If the restaurant is listed in Yelp’s recommendations, then the restaurant does not receive many negative reviews.", "All restaurants with a rating greater than 9 are listed in Yelp’s recommendations.", "Some restaurants that do not provide take-out service receive many negative reviews.", "All restaurants that are popular among local residents have ratings greater than 9.", "Subway has a rating greater than 9 or is popular among local residents."], "premises-FOL": ["∀x (YelpRecommendation(x) → ¬NegativeReview(x))", "∀x (RatingGreaterThan9(x) → YelpRecommendation(x))", "∃x (NoTakeOutService(x) ∧ NegativeReview(x))", "∀x (PopularAmongLocalResidents(x) → RatingGreaterThan9(x))", "RatingGreaterThan9(subway) ⊕ PopularAmongLocalResidents(subway)"], "conclusion": "Subway provides take-out service and does not receive many negative reviews.", "conclusion-FOL": "¬(NoTakeOutService(subway) ∧ NegativeReview(subway))", "label": "True", "premises_nouns_p": ["If the eatery is listed in Yelp’s recommendations, then the eatery does not receive many negative reviews.", "All eateries with a rating greater than 9 are listed in Yelp’s recommendations.", "Some eateries that do not provide take-out service receive many negative reviews.", "All eateries that are popular among local residents have ratings greater than 9.", "Subway has a rating greater than 9 or is popular among local residents."], "conclusion_nouns_p": "Subway provides take-out service and does not receive many negative reviews."}
{"premises": ["If the restaurant is listed in Yelp’s recommendations, then the restaurant does not receive many negative reviews.", "All restaurants with a rating greater than 9 are listed in Yelp’s recommendations.", "Some restaurants that do not provide take-out service receive many negative reviews.", "All restaurants that are popular among local residents have ratings greater than 9.", "Subway has a rating greater than 9 or is popular among local residents."], "premises-FOL": ["∀x (YelpRecommendation(x) → ¬NegativeReview(x))", "∀x (RatingGreaterThan9(x) → YelpRecommendation(x))", "∃x (NoTakeOutService(x) ∧ NegativeReview(x))", "∀x (PopularAmongLocalResidents(x) → RatingGreaterThan9(x))", "RatingGreaterThan9(subway) ⊕ PopularAmongLocalResidents(subway)"], "conclusion": "Subway does not provide take-out service.", "conclusion-FOL": "¬(NoTakeOutService(subway) ∧ NegativeReview(subway)) → PopularAmongLocalResidents(subway) ∧ NoTakeOutService(subway)", "label": "False", "premises_nouns_p": ["If the eatery is listed in Yelp’s recommendations, then the eatery does not receive many negative reviews.", "All eateries with a rating greater than 9 are listed in Yelp’s recommendations.", "Some eateries that do not provide take-out service receive many negative reviews.", "All eateries that are popular among local residents have ratings greater than 9.", "Subway has a rating greater than 9 or is popular among local residents."], "conclusion_nouns_p": "Subway does not provide take-out service."}
{"premises": ["In superhero movies, the good guys always win.", "The Surprising Adventures of Sir Digby Chicken Caesar is a superhero movie.", "Good guys fight bad guys and vice versa.", "Sir Digby fights his nemesis.", "If a superhero movie is named after a character, that character is a good guy.", "The Surprising Adventures of Sir Digby Chicken Caesar is named after Sir Digby.", "If somebody wins a fight, the person they are fighting loses.", "If a superhero movie is named after a character, that character appears in the movie."], "premises-FOL": ["∀x ∀y (SuperheroMovie(x) ∧ GoodGuy(y) ∧ AppearsIn(y, x) → Wins(y))", "SuperheroMovie(surprisingAdventuresofSirDigbyChickenCaesar)", "∀x ∀y (GoodGuy(x) ∧ Fights(x, y) ⟷ BadGuy(y) ∧ Fights(y, x))", "Fights(sirDigby, sirDigbyNemesis)", "∀x ∀y (SuperheroMovie(x), NamedAfter(x, y) → GoodGuy(y))", "NamedAfter(surprisingAdventuresofSirDigbyChickenCaesar, sirDigby)", "∀x ∀y (Fights(x, y) ∧ Wins(x) → ¬Wins(y))"], "conclusion": "Sir Digby’s nemesis loses.", "conclusion-FOL": "∀x ∀y (SuperheroMovie(x) ∧ AppearsIn(y, x) → GoodGuy(y))", "label": "True", "premises_nouns_p": ["In superhero movies, the good guys always win.", "The Surprising Adventures of Sir Digby Chicken Caesar is a superhero movie.", "Good guys fight bad guys and vice versa.", "Sir Digby fights his nemesis.", "If a superhero movie is named after a character, that character is a good guy.", "The Surprising Adventures of Sir Digby Chicken Caesar is named after Sir Digby.", "If somebody wins a fight, the person they are fighting loses.", "If a superhero movie is named after a character, that character appears in the movie."], "conclusion_nouns_p": "Sir Digby’s nemesis loses."}
{"premises": ["[BG] Books contain tons of knowledge.", "[BG] When a person reads a book, that person gains knowledge. ", "[BG] If a person gains knowledge, they become smarter.", "Harry read the book “Walden” by Henry Thoreau."], "premises-FOL": ["∀x (Book(x) → Knowledge(x))", "∀x ∀y (ReadBook(x, y) → GainKnowledge(x))", "∀x (GainKnowledge(x) → Smarter(x))", "ReadBook(harry, walden) ∧ Book(walden)"], "conclusion": "Walden contains knowledge.", "conclusion-FOL": "Knowledge(walden)", "label": "True", "premises_nouns_p": ["[BG] Scrolls contain tons of knowledge.", "[BG] When a gremlin reads a scroll, that gremlin gains knowledge.", "[BG] If a gremlin gains knowledge, they become smarter.", "Harry read the scroll “Walden” by Henry Thoreau."], "conclusion_nouns_p": "Walden contains knowledge."}
{"premises": ["[BG] Books contain tons of knowledge.", "[BG] When a person reads a book, that person gains knowledge. ", "[BG] If a person gains knowledge, they become smarter.", "Harry read the book “Walden” by Henry Thoreau."], "premises-FOL": ["∀x (Book(x) → Knowledge(x))", "∀x ∀y (ReadBook(x, y) → GainKnowledge(x))", "∀x (GainKnowledge(x) → Smarter(x))", "ReadBook(harry, walden) ∧ Book(walden)"], "conclusion": "Harry is smarter than before.", "conclusion-FOL": "Smarter(harry)", "label": "True", "premises_nouns_p": ["[BG] Scrolls contain tons of knowledge.", "[BG] When a snail reads a scroll, that snail gains knowledge.", "[BG] If a snail gains knowledge, they become smarter.", "Harry read the scroll “Walden” by Henry Thoreau."], "conclusion_nouns_p": "Harry is smarter than before."}
{"premises": ["[BG] Books contain tons of knowledge.", "[BG] When a person reads a book, that person gains knowledge. ", "[BG] If a person gains knowledge, they become smarter.", "Harry read the book “Walden” by Henry Thoreau."], "premises-FOL": ["∀x (Book(x) → Knowledge(x))", "∀x ∀y (ReadBook(x, y) → GainKnowledge(x))", "∀x (GainKnowledge(x) → Smarter(x))", "ReadBook(harry, walden) ∧ Book(walden)"], "conclusion": "A person who is smarter has gained knowledge.", "conclusion-FOL": "∀x (Smarter(x) → GainKnowledge(x))", "label": "Uncertain", "premises_nouns_p": ["[BG] Scrolls contain tons of knowledge.", "[BG] When a capybara reads a scroll, that capybara gains knowledge.", "[BG] If a capybara gains knowledge, they become smarter.", "Harry read the scroll “Walden” by Henry Thoreau."], "conclusion_nouns_p": "A capybara who is smarter has gained knowledge."}
{"premises": ["Natural language processing tasks can be categorized as either language generation task or language understanding task.", "If the output of a natural language processing task is a text sequence, then it is a language generation task.", "Machine translation is a natural language processing task.", "The output of machine translation is a text sequence."], "premises-FOL": ["∀x (NLP(x) → NLG(x) ⊕ NLU(x))", "∀x (NLP(x) ∧ OutputSequence(x) → NLG(x))", "NLP(machineTranslation)", "OutputSequence(machineTranslation)"], "conclusion": "Machine translation is a language generation task.", "conclusion-FOL": "NLG(machineTranslation)", "label": "True", "premises_nouns_p": ["Natural language processing tasks can be categorized as either language generation task or language understanding task.", "If the output of a natural language processing task is a text sequence, then it is a language generation task.", "Machine translation is a natural language processing task.", "The output of machine translation is a text sequence."], "conclusion_nouns_p": "Machine translation is a language generation task."}
{"premises": ["Natural language processing tasks can be categorized as either language generation task or language understanding task.", "If the output of a natural language processing task is a text sequence, then it is a language generation task.", "Machine translation is a natural language processing task.", "The output of machine translation is a text sequence."], "premises-FOL": ["∀x (NLP(x) → NLG(x) ⊕ NLU(x))", "∀x (NLP(x) ∧ OutputSequence(x) → NLG(x))", "NLP(machineTranslation)", "OutputSequence(machineTranslation)"], "conclusion": "Machine translation is a language understanding task.", "conclusion-FOL": "NLU(machineTranslation)", "label": "False", "premises_nouns_p": ["Natural language processing tasks can be categorized as either language generation task or language understanding task.", "If the output of a natural language processing task is a text sequence, then it is a language generation task.", "Machine translation is a natural language processing task.", "The output of machine translation is a text sequence."], "conclusion_nouns_p": "Machine translation is a language understanding task."}
{"premises": ["Pets are allowed in some managed buildings.", "[BG] A deposit is required to rent an apartment in a managed building.", "The security deposit can be either equal to one month's rent or more.", "Fluffy is Tom's cat.", "Cats are pets.", "The Olive Garden is a managed building.", "The monthly rent at the Olive Garden is $2000.", "Tom will rent an apartment in a managed building if and only if he is allowed to move in with Fluffy, and the security deposit is no more than $1500.", "2000$ is more than $1500."], "premises-FOL": ["∃x (ManagedBuilding(x) ∧ AllowPet(x))", "∀x (ManagedBuilding(x) → RequireDeposit(x))", "∀x (Rent2000(x) ↔ ¬DepositNoMoreThan1500(x))", "∀x (Rent2000(x) ↔ DepositNoLessThan2000(x))", "Cat(fluffy)", "∀x (Cat(x) → Pet(x))", "ManagedBuilding(oliveGarden)", "Rent2000(oliveGarden)", "∀x (TomRent(x) ↔ (ManagedBuilding(x) ∧ AllowPet(x) ∧ DepositNoMoreThan1500(x)))"], "conclusion": "Tom will rent an apartment in The Olive Garden.", "conclusion-FOL": "TomRent(oliveGarden)", "label": "False", "premises_nouns_p": ["Pets are allowed in some managed buildings.", "[BG] A deposit is required to rent an apartment in a managed building.", "The security deposit can be either equal to one month's rent or more.", "Fluffy is Tom's goldfish.", "Goldfish are pets.", "The Olive Garden is a managed building.", "The monthly rent at the Olive Garden is $2000.", "Tom will rent an apartment in a managed building if and only if he is allowed to move in with Fluffy, and the security deposit is no more than $1500.", "2000$ is more than $1500."], "conclusion_nouns_p": "Tom will rent an apartment in The Olive Garden."}
{"premises": ["Pets are allowed in some managed buildings.", "[BG] A deposit is required to rent an apartment in a managed building.", "The security deposit can be either equal to one month's rent or more.", "Fluffy is Tom's cat.", "Cats are pets.", "The Olive Garden is a managed building.", "The monthly rent at the Olive Garden is $2000.", "Tom will rent an apartment in a managed building if and only if he is allowed to move in with Fluffy, and the security deposit is no more than $1500.", "2000$ is more than $1500."], "premises-FOL": ["∃x (ManagedBuilding(x) ∧ AllowPet(x))", "∀x (ManagedBuilding(x) → RequireDeposit(x))", "∀x (Rent2000(x) ↔ ¬DepositNoMoreThan1500(x))", "∀x (Rent2000(x) ↔ DepositNoLessThan2000(x))", "Cat(fluffy)", "∀x (Cat(x) → Pet(x))", "ManagedBuilding(oliveGarden)", "Rent2000(oliveGarden)", "∀x (TomRent(x) ↔ (ManagedBuilding(x) ∧ AllowPet(x) ∧ DepositNoMoreThan1500(x)))"], "conclusion": "Tom is allowed to move in an apartment in The Olive Garden with Fluffy.", "conclusion-FOL": "AllowPet(oliveGarden)", "label": "Uncertain", "premises_nouns_p": ["REWRITE:", "Pets are allowed in some managed spaceships.", "[BG] A deposit is required to rent an apartment in a managed spaceship.", "The security deposit can be either equal to one month's rent or more.", "Fluffy is Tom's cat.", "Cats are pets.", "The Olive Garden is a managed spaceship.", "The monthly rent at the Olive Garden is $2000.", "Tom will rent an apartment in a managed spaceship if and only if he is allowed to move in with Fluffy, and the security deposit is no more than $1500.", "2000$ is more than $1500."], "conclusion_nouns_p": "Tom is allowed to move in an apartment in The Olive Garden with Fluffy."}
{"premises": ["Pets are allowed in some managed buildings.", "[BG] A deposit is required to rent an apartment in a managed building.", "The security deposit can be either equal to one month's rent or more.", "Fluffy is Tom's cat.", "Cats are pets.", "The Olive Garden is a managed building.", "The monthly rent at the Olive Garden is $2000.", "Tom will rent an apartment in a managed building if and only if he is allowed to move in with Fluffy, and the security deposit is no more than $1500.", "2000$ is more than $1500."], "premises-FOL": ["∃x (ManagedBuilding(x) ∧ AllowPet(x))", "∀x (ManagedBuilding(x) → RequireDeposit(x))", "∀x (Rent2000(x) ↔ ¬DepositNoMoreThan1500(x))", "∀x (Rent2000(x) ↔ DepositNoLessThan2000(x))", "Cat(fluffy)", "∀x (Cat(x) → Pet(x))", "ManagedBuilding(oliveGarden)", "Rent2000(oliveGarden)", "∀x (TomRent(x) ↔ (ManagedBuilding(x) ∧ AllowPet(x) ∧ DepositNoMoreThan1500(x)))"], "conclusion": "The security deposit at the Olive Garden is either $2000 or more.", "conclusion-FOL": "DepositNoLessThan2000(oliveGarden)", "label": "True", "premises_nouns_p": ["Pets are allowed in some managed buildings.", "[BG] A deposit is required to rent an apartment in a managed building.", "The security deposit can be either equal to one month's rent or more.", "Fluffy is Tom's capybara.", "Capybaras are pets.", "The Olive Garden is a managed building.", "The monthly rent at the Olive Garden is $2000.", "Tom will rent an apartment in a managed building if and only if he is allowed to move in with Fluffy, and the security deposit is no more than $1500.", "2000$ is more than $1500."], "conclusion_nouns_p": "The security deposit at the Olive Garden is either $2000 or more."}
{"premises": ["If animals are loved by tourists, then they are Max's favorite animals. ", "All animals from Australia are loved by tourists. ", "All quokka are animals from Australia. ", "All of Max's favorite animals are very fluffy.", "All of Max's favorite animals love to sleep. ", "If a koala is very fluffy, then the koala is not a quokka."], "premises-FOL": ["∀x (AnimalsLovedByTourists(x) → MaxFavoriteAnimals(x))", " ∀x (AnimalsFromAustralia(x) → AnimalsLovedByTourists(x))", " ∀x (Quokka(x) → AnimalsFromAustralia(x))", " ∀x (MaxFavoriteAnimals(x) → VeryFluffy(x)) ", " ∀x (MaxFavoriteAnimals(x) → LoveToSleep(x))", " VeryFluffy(koala) → ¬Quokka(koala)"], "conclusion": "Koalas love to sleep.", "conclusion-FOL": "LoveToSleep(koala)", "label": "Uncertain", "premises_nouns_p": ["If animals are loved by tourists, then they are Max's favorite animals.", "All animals from Australia are loved by tourists.", "All quokka are animals from Australia.", "All of Max's favorite animals are very fluffy.", "All of Max's favorite animals love to sleep.", "If a koala is very fluffy, then the koala is not a quokka."], "conclusion_nouns_p": "Koalas love to sleep."}
{"premises": ["If animals are loved by tourists, then they are Max's favorite animals. ", "All animals from Australia are loved by tourists. ", "All quokka are animals from Australia. ", "All of Max's favorite animals are very fluffy.", "All of Max's favorite animals love to sleep. ", "If a koala is very fluffy, then the koala is not a quokka."], "premises-FOL": ["∀x (AnimalsLovedByTourists(x) → MaxFavoriteAnimals(x))", " ∀x (AnimalsFromAustralia(x) → AnimalsLovedByTourists(x))", " ∀x (Quokka(x) → AnimalsFromAustralia(x))", " ∀x (MaxFavoriteAnimals(x) → VeryFluffy(x)) ", " ∀x (MaxFavoriteAnimals(x) → LoveToSleep(x))", " VeryFluffy(koala) → ¬Quokka(koala)"], "conclusion": "Koalas love to sleep and are quokka.", "conclusion-FOL": "LoveToSleep(koala) ∧ Quokka(koala)", "label": "False", "premises_nouns_p": ["If animals are loved by tourists, then they are Max's favorite animals.", "All animals from Australia are loved by tourists.", "All quokka are animals from Australia.", "All of Max's favorite animals are very fluffy.", "All of Max's favorite animals love to sleep.", "If a koala is very fluffy, then the koala is not a quokka."], "conclusion_nouns_p": "Koalas love to sleep and are quokka."}
{"premises": ["If animals are loved by tourists, then they are Max's favorite animals. ", "All animals from Australia are loved by tourists. ", "All quokka are animals from Australia. ", "All of Max's favorite animals are very fluffy.", "All of Max's favorite animals love to sleep. ", "If a koala is very fluffy, then the koala is not a quokka."], "premises-FOL": ["∀x (AnimalsLovedByTourists(x) → MaxFavoriteAnimals(x))", " ∀x (AnimalsFromAustralia(x) → AnimalsLovedByTourists(x))", " ∀x (Quokka(x) → AnimalsFromAustralia(x))", " ∀x (MaxFavoriteAnimals(x) → VeryFluffy(x)) ", " ∀x (MaxFavoriteAnimals(x) → LoveToSleep(x))", " VeryFluffy(koala) → ¬Quokka(koala)"], "conclusion": "If a koala is a quokka, then the koala either loves to sleep or is very fluffy.", "conclusion-FOL": "Quokka(koala) → LoveToSleep(koala) ⊕ VeryFluffy(koala)", "label": "True", "premises_nouns_p": ["If animals are loved by tourists, then they are Max's favorite animals.", "All animals from Australia are loved by tourists.", "All quokka are animals from Australia.", "All of Max's favorite animals are very fluffy.", "All of Max's favorite animals love to sleep.", "If a koala is very fluffy, then the koala is not a quokka."], "conclusion_nouns_p": "If a koala is a quokka, then the koala either loves to sleep or is very fluffy."}
{"premises": ["A man is either kind or evil.", "No ugly person is handsome.", "All evil people are ugly.", "All gentlemen are handsome.", "All CEOs are gentlemen.", "Harry is a gentleman."], "premises-FOL": ["∀x (Kind(x) ⊕ Evil(x))", "∀x (Ugly(x) → ¬Handsome(x))", "∀x (Evil(x) → Ugly(x))", "∀x (Gentleman(x) → Handsome(x))", "∀x (CEO(x) → Gentleman(x))", "Gentleman(harry)"], "conclusion": "Harry is a CEO.", "conclusion-FOL": "CEO(harry)", "label": "Uncertain", "premises_nouns_p": ["A sock puppet is either kind or evil.", "No ugly person is handsome.", "All evil sock puppets are ugly.", "All gentlemen are handsome.", "All CEOs are gentlemen.", "Harry is a gentleman."], "conclusion_nouns_p": "Harry is a CEO."}
{"premises": ["A man is either kind or evil.", "No ugly person is handsome.", "All evil people are ugly.", "All gentlemen are handsome.", "All CEOs are gentlemen.", "Harry is a gentleman."], "premises-FOL": ["∀x (Kind(x) ⊕ Evil(x))", "∀x (Ugly(x) → ¬Handsome(x))", "∀x (Evil(x) → Ugly(x))", "∀x (Gentleman(x) → Handsome(x))", "∀x (CEO(x) → Gentleman(x))", "Gentleman(harry)"], "conclusion": "Harry is kind or a CEO.", "conclusion-FOL": "Kind(harry) ∨ CEO(harry)", "label": "True", "premises_nouns_p": ["A capybara is either kind or evil.", "No ugly person is handsome.", "All evil capybaras are ugly.", "All sentient vegetables are handsome.", "All CEOs are sentient vegetables.", "Harry is a sentient vegetable."], "conclusion_nouns_p": "Harry is kind or a CEO."}
{"premises": ["A man is either kind or evil.", "No ugly person is handsome.", "All evil people are ugly.", "All gentlemen are handsome.", "All CEOs are gentlemen.", "Harry is a gentleman."], "premises-FOL": ["∀x (Kind(x) ⊕ Evil(x))", "∀x (Ugly(x) → ¬Handsome(x))", "∀x (Evil(x) → Ugly(x))", "∀x (Gentleman(x) → Handsome(x))", "∀x (CEO(x) → Gentleman(x))", "Gentleman(harry)"], "conclusion": "If Harry is either both evil and ugly, or neither evil nor ugly, then Harry is neither kind nor a CEO.", "conclusion-FOL": "(Evil(harry) ∧ Ugly(harry)) ⊕ (¬Evil(harry) ∧ ¬Ugly(harry)) → ¬Kind(harry) ∧ ¬CEO(harry)", "label": "False", "premises_nouns_p": ["A banana is either kind or evil.", "No ugly person is handsome.", "All evil bananas are ugly.", "All gentlemen are handsome.", "All CEOs are gentlemen.", "Harry is a gentleman."], "conclusion_nouns_p": "If Harry is either both evil and ugly, or neither evil nor ugly, then Harry is neither kind nor a CEO."}
{"premises": ["If people are twins or triplets, then they spend a lot of time hanging out with and playing with their siblings.", "If people have siblings who are the same age, then they are twins or triplets.", "If people complain often about annoying siblings, then they have siblings who are the same age.", "If people do not live at home regularly, then they do not develop strong bonds with their family members.", "If people spend a lot of time hanging out with and playing with their siblings, then they often did not live at home regularly.", "Luke is either both a twin or triplet and develops strong bonds with his family members, or he neither is a twin or triplet nor develops strong bonds with his family members.   "], "premises-FOL": ["∀x (TwinTriplet(x) → Playing(x))", "∀x (SameAge(x) → TwinTriplet(x))", "∀x (Complain(x) → SameAge(x))", "∀x (NotHome(x) → ¬StrongBonds(x))", "∀x (Playing(x) → NotHome(x))", "(TwinTriplet(luke) ∧ StrongBonds(luke)) ⊕ (¬TwinTriplet(luke) ∧ ¬StrongBonds(luke))"], "conclusion": "Luke spends a lot of time hanging out and playing with his siblings.", "conclusion-FOL": "Playing(luke)", "label": "Uncertain", "premises_nouns_p": ["If puppies are twins or triplets, then they spend a lot of time hanging out with and playing with their siblings.", "If puppies have siblings who are the same age, then they are twins or triplets.", "If puppies complain often about annoying siblings, then they have siblings who are the same age.", "If puppies do not live at home regularly, then they do not develop strong bonds with their family members.", "If puppies spend a lot of time hanging out with and playing with their siblings, then they often did not live at home regularly.", "Luke is either both a twin or triplet and develops strong bonds with his family members, or he neither is a twin or triplet nor develops strong bonds with his family members."], "conclusion_nouns_p": "Luke spends a lot of time hanging out and playing with his siblings."}
{"premises": ["If people are twins or triplets, then they spend a lot of time hanging out with and playing with their siblings.", "If people have siblings who are the same age, then they are twins or triplets.", "If people complain often about annoying siblings, then they have siblings who are the same age.", "If people do not live at home regularly, then they do not develop strong bonds with their family members.", "If people spend a lot of time hanging out with and playing with their siblings, then they often did not live at home regularly.", "Luke is either both a twin or triplet and develops strong bonds with his family members, or he neither is a twin or triplet nor develops strong bonds with his family members.   "], "premises-FOL": ["∀x (TwinTriplet(x) → Playing(x))", "∀x (SameAge(x) → TwinTriplet(x))", "∀x (Complain(x) → SameAge(x))", "∀x (NotHome(x) → ¬StrongBonds(x))", "∀x (Playing(x) → NotHome(x))", "(TwinTriplet(luke) ∧ StrongBonds(luke)) ⊕ (¬TwinTriplet(luke) ∧ ¬StrongBonds(luke))"], "conclusion": "Luke complains often about annoying siblings.", "conclusion-FOL": "Complain(luke)", "label": "False", "premises_nouns_p": ["If clouds are twins or triplets, then they spend a lot of time hanging out with and playing with their siblings.", "If clouds have siblings who are the same age, then they are twins or triplets.", "If clouds complain often about annoying siblings, then they have siblings who are the same age.", "If clouds do not live at home regularly, then they do not develop strong bonds with their family members.", "If clouds spend a lot of time hanging out with and playing with their siblings, then they often did not live at home regularly.", "Luke is either both a twin or triplet and develops strong bonds with his family members, or he neither is a twin or triplet nor develops strong bonds with his family members."], "conclusion_nouns_p": "Luke complains often about annoying siblings."}
{"premises": ["If people are twins or triplets, then they spend a lot of time hanging out with and playing with their siblings.", "If people have siblings who are the same age, then they are twins or triplets.", "If people complain often about annoying siblings, then they have siblings who are the same age.", "If people do not live at home regularly, then they do not develop strong bonds with their family members.", "If people spend a lot of time hanging out with and playing with their siblings, then they often did not live at home regularly.", "Luke is either both a twin or triplet and develops strong bonds with his family members, or he neither is a twin or triplet nor develops strong bonds with his family members.   "], "premises-FOL": ["∀x (TwinTriplet(x) → Playing(x))", "∀x (SameAge(x) → TwinTriplet(x))", "∀x (Complain(x) → SameAge(x))", "∀x (NotHome(x) → ¬StrongBonds(x))", "∀x (Playing(x) → NotHome(x))", "(TwinTriplet(luke) ∧ StrongBonds(luke)) ⊕ (¬TwinTriplet(luke) ∧ ¬StrongBonds(luke))"], "conclusion": "Luke is neither a twin nor triplet nor complains often about annoying siblings.", "conclusion-FOL": "¬(TwinTriplet(luke) ∨ Complain(luke))", "label": "True", "premises_nouns_p": ["If robots are twins or triplets, then they spend a lot of time hanging out with and playing with their siblings.", "If robots have siblings who are the same age, then they are twins or triplets.", "If robots complain often about annoying siblings, then they have siblings who are the same age.", "If robots do not live at home regularly, then they do not develop strong bonds with their family members.", "If robots spend a lot of time hanging out with and playing with their siblings, then they often did not live at home regularly.", "Luke is either both a twin or triplet and develops strong bonds with his family members, or he neither is a twin or triplet nor develops strong bonds with his family members."], "conclusion_nouns_p": "Luke is neither a twin nor triplet nor complains often about annoying siblings."}
{"premises": ["It costs US $205 to take the GRE test.", "ETS provides financial aid to those GRE applicants who prove economic hardship.", "Economic hardship refers to difficulty caused by having too little money or too few resources.", "Tom lives in a single-parent family.", "His dad has been out of work for more than a year."], "premises-FOL": ["Cost205(gre)", "∀x (Cost205(x) → CostBelow300(x))", "∀x (Hardship(x) → FinancialAid(x))", "∀x (SingleParent(x) ∨ FewResources(x) → Hardship(x))", "SingleParent(tom)", "FewResources(tom)"], "conclusion": "Tom can apply for financial aid from ETS to take the GRE test.", "conclusion-FOL": "FinancialAid(tom)", "label": "True", "premises_nouns_p": ["It costs US $205 to take the GRE test.", "ETS provides financial aid to those GRE applicants who prove economic hardship.", "Economic hardship refers to difficulty caused by having too little glitter or too few resources.", "Tom lives in a single-parent cloud.", "His dad has been out of work for more than a year."], "conclusion_nouns_p": "Tom can apply for financial aid from ETS to take the GRE test."}
{"premises": ["It costs US $205 to take the GRE test.", "ETS provides financial aid to those GRE applicants who prove economic hardship.", "Economic hardship refers to difficulty caused by having too little money or too few resources.", "Tom lives in a single-parent family.", "His dad has been out of work for more than a year."], "premises-FOL": ["Cost205(gre)", "∀x (Cost205(x) → CostBelow300(x))", "∀x (Hardship(x) → FinancialAid(x))", "∀x (SingleParent(x) ∨ FewResources(x) → Hardship(x))", "SingleParent(tom)", "FewResources(tom)"], "conclusion": "It cost below US $300 to take the GRE test.", "conclusion-FOL": "CostBelow300(gre)", "label": "True", "premises_nouns_p": ["It costs US $205 to take the GRE test.", "ETS provides financial aid to those GRE applicants who prove economic hardship.", "Economic hardship refers to difficulty caused by having too little money or too few resources.", "Tom lives in a single-parent family.", "His dad has been out of work for more than a year."], "conclusion_nouns_p": "It cost below US $300 to take the GRE test."}
{"premises": ["It costs US $205 to take the GRE test.", "ETS provides financial aid to those GRE applicants who prove economic hardship.", "Economic hardship refers to difficulty caused by having too little money or too few resources.", "Tom lives in a single-parent family.", "His dad has been out of work for more than a year."], "premises-FOL": ["Cost205(gre)", "∀x (Cost205(x) → CostBelow300(x))", "∀x (Hardship(x) → FinancialAid(x))", "∀x (SingleParent(x) ∨ FewResources(x) → Hardship(x))", "SingleParent(tom)", "FewResources(tom)"], "conclusion": "There is no financial aid available for the GRE test.", "conclusion-FOL": "¬(∃x (FinancialAid(x)))", "label": "False", "premises_nouns_p": ["{\"premises\": [\"It costs US $205 to take the GRE test.\", \"ETS provides financial aid to those GRE applicants who prove economic hardship.\", \"Economic hardship refers to difficulty caused by having too little money or too few resources.\", \"Tom lives in a single-parent family.\", \"His dad has been out of work for more than a year.\"], \"premises-FOL\": [\"Cost205(gre)\", \"∀x (Cost205(x) → CostBelow300(x))\", \"∀x (Hardship(x) → FinancialAid(x))\", \"∀x (SingleParent(x) ∨ FewResources(x) → Hardship(x))\", \"SingleParent(tom)\", \"FewResources(tom)\"], \"conclusion\": \"There is no financial aid available for the GRE test.\", \"conclusion-FOL\": \"¬(∃x (FinancialAid(x)))\", \"label\": \"False\"}", "REWRITE:", "It costs US $205 to take the GRE-pudding test.", "ETS provides financial aid to those GRE-pudding applicants who prove economic hardship.", "Economic hardship refers to difficulty caused by having too little money or too few resources.", "A pickle lives in a single-parent family.", "Its dad has been out of work for more than a year."], "conclusion_nouns_p": "There is no financial aid available for the GRE-pudding test."}
{"premises": ["If people spill a lot of food on their clothing, then they do not tidy their spaces consistently and enjoy the process of cleaning.", "All foodies who go out frequently to find new food restaurants to try are people who spill a lot of food on their clothing.", "If people grew up as only children with no siblings, then they tidy their spaces consistently and enjoy the process of cleaning.", "If people have parents who are very busy with their regular jobs, then they grew up as only children with no siblings.", "All households with a high net income have people who have parents who are very busy with their regular jobs.", "Peter is either both a person who spills a lot of food on his clothing and grew up as an only child with no siblings, or he is neither a person who spills a lot of food on his clothing nor grew up as an only child with no siblings. "], "premises-FOL": ["∀x (Spill(x) → ¬Tidy(x))", "∀x (Foodie(x) → Spill(x))", "∀x (OnlyChild(x) → Tidy(x))", "∀x (BusyParents(x) → OnlyChild(x))", "∀x (HighIncome(x) → BusyParents(x))", "(Spill(peter) ∧ OnlyChild(peter)) ∨ ¬Spill(peter) ∧ ¬OnlyChild(peter))"], "conclusion": "Peter tidies his space consistently and enjoys the process of cleaning.", "conclusion-FOL": "Tidy(peter)", "label": "Uncertain", "premises_nouns_p": ["If trees spill a lot of food on their clothing, then they do not tidy their spaces consistently and enjoy the process of cleaning.", "All foodies who go out frequently to find new food restaurants to try are trees who spill a lot of food on their clothing.", "If trees grew up as only children with no siblings, then they tidy their spaces consistently and enjoy the process of cleaning.", "If trees have parents who are very busy with their regular jobs, then they grew up as only children with no siblings.", "All households with a high net income have trees who have parents who are very busy with their regular jobs.", "Peter is either both a tree who spills a lot of food on his clothing and grew up as an only child with no siblings, or he is neither a tree who spills a lot of food on his clothing nor grew up as an only child with no siblings."], "conclusion_nouns_p": "Peter tidies his space consistently and enjoys the process of cleaning."}
{"premises": ["If people spill a lot of food on their clothing, then they do not tidy their spaces consistently and enjoy the process of cleaning.", "All foodies who go out frequently to find new food restaurants to try are people who spill a lot of food on their clothing.", "If people grew up as only children with no siblings, then they tidy their spaces consistently and enjoy the process of cleaning.", "If people have parents who are very busy with their regular jobs, then they grew up as only children with no siblings.", "All households with a high net income have people who have parents who are very busy with their regular jobs.", "Peter is either both a person who spills a lot of food on his clothing and grew up as an only child with no siblings, or he is neither a person who spills a lot of food on his clothing nor grew up as an only child with no siblings. "], "premises-FOL": ["∀x (Spill(x) → ¬Tidy(x))", "∀x (Foodie(x) → Spill(x))", "∀x (OnlyChild(x) → Tidy(x))", "∀x (BusyParents(x) → OnlyChild(x))", "∀x (HighIncome(x) → BusyParents(x))", "(Spill(peter) ∧ OnlyChild(peter)) ∨ ¬Spill(peter) ∧ ¬OnlyChild(peter))"], "conclusion": "Peter is either a foodie who goes out frequently to find new food restaurants to try or belongs to a household with a high net income.", "conclusion-FOL": "Foodie(peter) ∨ HighIncome(peter)", "label": "False", "premises_nouns_p": ["If trees spill a lot of food on their clothing, then they do not tidy their spaces consistently and enjoy the process of cleaning.", "All foodies who go out frequently to find new food restaurants to try are trees who spill a lot of food on their clothing.", "If trees grew up as only children with no siblings, then they tidy their spaces consistently and enjoy the process of cleaning.", "If trees have parents who are very busy with their regular jobs, then they grew up as only children with no siblings.", "All households with a high net income have trees who have parents who are very busy with their regular jobs.", "Peter is either both a tree who spills a lot of food on his clothing and grew up as an only child with no siblings, or he is neither a tree who spills a lot of food on his clothing nor grew up as an only child with no siblings."], "conclusion_nouns_p": "Peter is either a foodie who goes out frequently to find new food restaurants to try or belongs to a household with a high net income."}
{"premises": ["If people spill a lot of food on their clothing, then they do not tidy their spaces consistently and enjoy the process of cleaning.", "All foodies who go out frequently to find new food restaurants to try are people who spill a lot of food on their clothing.", "If people grew up as only children with no siblings, then they tidy their spaces consistently and enjoy the process of cleaning.", "If people have parents who are very busy with their regular jobs, then they grew up as only children with no siblings.", "All households with a high net income have people who have parents who are very busy with their regular jobs.", "Peter is either both a person who spills a lot of food on his clothing and grew up as an only child with no siblings, or he is neither a person who spills a lot of food on his clothing nor grew up as an only child with no siblings. "], "premises-FOL": ["∀x (Spill(x) → ¬Tidy(x))", "∀x (Foodie(x) → Spill(x))", "∀x (OnlyChild(x) → Tidy(x))", "∀x (BusyParents(x) → OnlyChild(x))", "∀x (HighIncome(x) → BusyParents(x))", "(Spill(peter) ∧ OnlyChild(peter)) ∨ ¬Spill(peter) ∧ ¬OnlyChild(peter))"], "conclusion": "Peter is either a foodie who goes out frequently to find new food restaurants to try and belong to a household with a high net income or he is a foodie who goes out frequently to find new food restaurants to try nor belongs to a household with a high net income.", "conclusion-FOL": "(Foodie(peter) ∧ HighIncome(peter)) ∨ ¬Foodie(peter) ∧ ¬HighIncome(peter))", "label": "True", "premises_nouns_p": ["If gnomes spill a lot of glitter on their clothing, then they do not tidy their spaces consistently and enjoy the process of cleaning.", "All foodies who go out frequently to find new food restaurants to try are gnomes who spill a lot of glitter on their clothing.", "If gnomes grew up as only children with no siblings, then they tidy their spaces consistently and enjoy the process of cleaning.", "If gnomes have parents who are very busy with their regular jobs, then they grew up as only children with no siblings.", "All households with a high net income have gnomes who have parents who are very busy with their regular jobs.", "Peter is either both a gnome who spills a lot of glitter on his clothing and grew up as an only child with no siblings, or he is neither a gnome who spills a lot of glitter on his clothing nor grew up as an only child with no siblings."], "conclusion_nouns_p": "Peter is either a foodie who goes out frequently to find new food restaurants to try and belong to a household with a high net income or he is a foodie who goes out frequently to find new food restaurants to try nor belongs to a household with a high net income."}
{"premises": ["All fir trees are evergreens.", "Some objects of worship are fir trees."], "premises-FOL": ["∀x (FirTree(x) → Evergreen(x))", "∃x (ObjectOfWorship(x) ∧ FirTree(x))"], "conclusion": "Some evergreens are not objects of worship.", "conclusion-FOL": "∃x (Evergreen(x) ∧ ¬ObjectOfWorship(x))", "label": "Uncertain", "premises_nouns_p": ["All candy canes are evergreens.", "Some objects of worship are candy canes."], "conclusion_nouns_p": "Some evergreens are not objects of worship."}
{"premises": ["The Picuris Mountains are a mountain range in New Mexico or Texas.", "Juan de Onate visited the Picuris Mountains.", "The Harding Pegmatite Mine, located in the Picuris Mountains, was donated.", "There are no mountain ranges in texas that have mines which have been donated."], "premises-FOL": ["MountainRange(picurismountains) ∧ In(picurismountains, newmexico) ∨ In(picurismountains, texas)", "Visited(juandeonate, picurismountains)", "In(hardingpegmatitemine, picurismountains) ∧ Mine(hardingpegmatitemine) ∧ Donated(hardingpegmatitemine)", "∀x ∀y (Mine(x) ∧ Donated(x) ∧ In(x, y) ∧ MountainRange(y) → ¬In(y, texas))"], "conclusion": "Juan de Onate visited a mountain range in New Mexico.", "conclusion-FOL": "∃x (Visited(juandeonate, x) ∧ MountainRange(x) ∧ In(x, newmexico))", "label": "True", "premises_nouns_p": ["The Picuris Mountains are a mountain range in New Mexico or Texas.", "Juan de Onate visited the Picuris Mountains.", "The Harding Pegmatite Mine, located in the Picuris Mountains, was donated.", "There are no mountain ranges in texas that have mines which have been donated."], "conclusion_nouns_p": "Juan de Onate visited a mountain range in New Mexico."}
{"premises": ["The Picuris Mountains are a mountain range in New Mexico or Texas.", "Juan de Onate visited the Picuris Mountains.", "The Harding Pegmatite Mine, located in the Picuris Mountains, was donated.", "There are no mountain ranges in texas that have mines which have been donated."], "premises-FOL": ["MountainRange(picurismountains) ∧ In(picurismountains, newmexico) ∨ In(picurismountains, texas)", "Visited(juandeonate, picurismountains)", "In(hardingpegmatitemine, picurismountains) ∧ Mine(hardingpegmatitemine) ∧ Donated(hardingpegmatitemine)", "∀x ∀y (Mine(x) ∧ Donated(x) ∧ In(x, y) ∧ MountainRange(y) → ¬In(y, texas))"], "conclusion": "Juan de Onate visited a mountain range in Texas.", "conclusion-FOL": "∃x (Visited(juandeonate, x) ∧ MountainRange(x) ∧ In(x, texas))", "label": "Uncertain", "premises_nouns_p": ["The Picuris Mountains are a mountain range in New Mexico or a black hole.", "Juan de Onate visited the Picuris Mountains.", "The Harding Pegmatite Mine, located in the Picuris Mountains, was donated.", "There are no mountain ranges in black holes that have mines which have been donated."], "conclusion_nouns_p": "Juan de Onate visited a mountain range in Texas."}
{"premises": ["The Picuris Mountains are a mountain range in New Mexico or Texas.", "Juan de Onate visited the Picuris Mountains.", "The Harding Pegmatite Mine, located in the Picuris Mountains, was donated.", "There are no mountain ranges in texas that have mines which have been donated."], "premises-FOL": ["MountainRange(picurismountains) ∧ In(picurismountains, newmexico) ∨ In(picurismountains, texas)", "Visited(juandeonate, picurismountains)", "In(hardingpegmatitemine, picurismountains) ∧ Mine(hardingpegmatitemine) ∧ Donated(hardingpegmatitemine)", "∀x ∀y (Mine(x) ∧ Donated(x) ∧ In(x, y) ∧ MountainRange(y) → ¬In(y, texas))"], "conclusion": "The Harding Pegmatite Mine is not located in a mountain range in New Mexico.", "conclusion-FOL": "∀x (MountainRange(x) ∧ In(hardingpegmatitemine, x) → ¬In(x, newmexico))", "label": "False", "premises_nouns_p": ["The Picuris Mountains are a mountain range in New Mexico or Texas.", "Juan de Onate visited the Picuris Mountains.", "The Harding Pegmatite Mine, located in the Picuris Mountains, was donated.", "There are no mountain ranges in texas that have mines which have been donated."], "conclusion_nouns_p": "The Harding Pegmatite Mine is not located in a mountain range in New Mexico."}
{"premises": ["If a man is taller than another man, the taller one can block the other's shooting.", "Michael is a man who is taller than everyone else in his class.", "If person x is taller than person y, and person y is taller than person z, than x is taller than z", "Peter is a man who is taller than Michael.", "Michael can block any shooting from a person as long as the person does not jump when shooting.", "Michael cannot block Windy's shooting.", "Every shooter who can jump when shooting is a great shooter."], "premises-FOL": ["∀x ∀y (IsMan(x) ∧ IsMan(y) ∧ Taller(x, y) → CanBlock(x, y))", "∀x (IsMan(x) ∧ SameClass(x, michael) ∧ ¬Be(x, michael) → Taller(michael, x))", "∀x ∀y ∀z ((Taller(x, y) ∧ Taller(y, z)) → Taller(x, z))", "IsMan(peter) ∧ Taller(peter, michael)", "∀x (¬JumpWhenShooting(x) → CanBlock(michael, x))", "¬CanBlock(michael, windy)", "∀x (JumpWhenShooting(x) → GreatShooter(x))"], "conclusion": "Peter is shorter than a man in Michael's class.", "conclusion-FOL": "∃x (IsMan(x) ∧ SameClass(x, michael) ∧ ¬Be(x, michael) ∧ ¬Taller(peter, x))", "label": "False", "premises_nouns_p": ["If a teapot is taller than another teapot, the taller one can block the other's shooting.", "Michael is a teapot who is taller than everyone else in his class.", "If object x is taller than object y, and object y is taller than object z, than x is taller than z", "Peter is a teapot who is taller than Michael.", "Michael can block any shooting from an object as long as the object does not jump when shooting.", "Michael cannot block Windy's shooting.", "Every shooter who can jump when shooting is a great shooter."], "conclusion_nouns_p": "Peter is shorter than a teapot in Michael's class."}
{"premises": ["If a man is taller than another man, the taller one can block the other's shooting.", "Michael is a man who is taller than everyone else in his class.", "If person x is taller than person y, and person y is taller than person z, than x is taller than z", "Peter is a man who is taller than Michael.", "Michael can block any shooting from a person as long as the person does not jump when shooting.", "Michael cannot block Windy's shooting.", "Every shooter who can jump when shooting is a great shooter."], "premises-FOL": ["∀x ∀y (IsMan(x) ∧ IsMan(y) ∧ Taller(x, y) → CanBlock(x, y))", "∀x (IsMan(x) ∧ SameClass(x, michael) ∧ ¬Be(x, michael) → Taller(michael, x))", "∀x ∀y ∀z ((Taller(x, y) ∧ Taller(y, z)) → Taller(x, z))", "IsMan(peter) ∧ Taller(peter, michael)", "∀x (¬JumpWhenShooting(x) → CanBlock(michael, x))", "¬CanBlock(michael, windy)", "∀x (JumpWhenShooting(x) → GreatShooter(x))"], "conclusion": "Windy is a great shooter.", "conclusion-FOL": "GreatShooter(windy)", "label": "True", "premises_nouns_p": ["If a penguin is taller than another penguin, the taller one can block the other's shooting.", "Michael is a penguin who is taller than everyone else in his class.", "If creature x is taller than creature y, and creature y is taller than creature z, than x is taller than z", "Peter is a penguin who is taller than Michael.", "Michael can block any shooting from a creature as long as the creature does not jump when shooting.", "Michael cannot block Windy's shooting.", "Every shooter who can jump when shooting is a great shooter."], "conclusion_nouns_p": "Windy is a great shooter."}
{"premises": ["If a man is taller than another man, the taller one can block the other's shooting.", "Michael is a man who is taller than everyone else in his class.", "If person x is taller than person y, and person y is taller than person z, than x is taller than z", "Peter is a man who is taller than Michael.", "Michael can block any shooting from a person as long as the person does not jump when shooting.", "Michael cannot block Windy's shooting.", "Every shooter who can jump when shooting is a great shooter."], "premises-FOL": ["∀x ∀y (IsMan(x) ∧ IsMan(y) ∧ Taller(x, y) → CanBlock(x, y))", "∀x (IsMan(x) ∧ SameClass(x, michael) ∧ ¬Be(x, michael) → Taller(michael, x))", "∀x ∀y ∀z ((Taller(x, y) ∧ Taller(y, z)) → Taller(x, z))", "IsMan(peter) ∧ Taller(peter, michael)", "∀x (¬JumpWhenShooting(x) → CanBlock(michael, x))", "¬CanBlock(michael, windy)", "∀x (JumpWhenShooting(x) → GreatShooter(x))"], "conclusion": "Peter can block Windy's shooting.", "conclusion-FOL": "CanBlock(peter, windy)", "label": "Uncertain", "premises_nouns_p": ["If a lamp is taller than another lamp, the taller one can block the other's shooting.", "Michael is a lamp who is taller than everyone else in his class.", "If object x is taller than object y, and object y is taller than object z, than x is taller than z", "Peter is a lamp who is taller than Michael.", "Michael can block any shooting from a lamp as long as the lamp does not jump when shooting.", "Michael cannot block Windy's shooting.", "Every shooter who can jump when shooting is a great shooter."], "conclusion_nouns_p": "Peter can block Windy's shooting."}
{"premises": ["Barutin Cove is named after the Bulgarian settlement of Barutin.", "Barutin Cove is on the southwest coast of Snow Island.", "The South Shetland Islands include Snow Island, Greenwich Island, and Deception Island.", "The South Shetland Islands are considered part of Antarctica.", "If A is located in B and B is located in C, then A is located in C."], "premises-FOL": ["Cove(barutin) ∧ NameAfter(barutin, settlement) ∧ Locate(settlement, bulgaria)", "Locate(barutin, snow)", "Locate(snow, shetland) ∧ Locate(greenwich, shetland) ∧ Locate(deception, shetland)", "Locate(shetland, antarctica)", "∀x ∀y ∀z ((Locate(x, y) ∧ Locate(y, z)) → Locate(x, z))"], "conclusion": "Barutin is named after all islands in Antarctica.", "conclusion-FOL": "∀x (Locate(x, antarctica) → NameAfter(barutin, x))", "label": "Uncertain", "premises_nouns_p": ["Barutin Cove is named after the Bulgarian settlement of Barutin.", "Barutin Cove is on the southwest coast of Snow Island.", "The South Shetland Islands include Snow Island, Greenwich Island, and Deception Island.", "The South Shetland Islands are considered part of a giant space squid.", "If A is located in B and B is located in C, then A is located in C."], "conclusion_nouns_p": "Barutin is named after all islands in a giant space squid."}
{"premises": ["Barutin Cove is named after the Bulgarian settlement of Barutin.", "Barutin Cove is on the southwest coast of Snow Island.", "The South Shetland Islands include Snow Island, Greenwich Island, and Deception Island.", "The South Shetland Islands are considered part of Antarctica.", "If A is located in B and B is located in C, then A is located in C."], "premises-FOL": ["Cove(barutin) ∧ NameAfter(barutin, settlement) ∧ Locate(settlement, bulgaria)", "Locate(barutin, snow)", "Locate(snow, shetland) ∧ Locate(greenwich, shetland) ∧ Locate(deception, shetland)", "Locate(shetland, antarctica)", "∀x ∀y ∀z ((Locate(x, y) ∧ Locate(y, z)) → Locate(x, z))"], "conclusion": "There is at least one cove in Antarctica named after a place in Bulgaria.", "conclusion-FOL": "∃x ∃y (Cove(x) ∧ NameAfter(x, y) ∧ Locate(y, bulgaria))", "label": "True", "premises_nouns_p": ["Barutin Cove is named after the Bulgarian settlement of Barutin.", "Barutin Cove is on the southwest coast of Snow Island.", "The South Shetland Islands include Snow Island, Greenwich Island, and Deception Island.", "The South Shetland Islands are considered part of Antarctica.", "If A is located in B and B is located in C, then A is located in C."], "conclusion_nouns_p": "There is at least one cove in Antarctica named after a place in Bulgaria."}
{"premises": ["Barutin Cove is named after the Bulgarian settlement of Barutin.", "Barutin Cove is on the southwest coast of Snow Island.", "The South Shetland Islands include Snow Island, Greenwich Island, and Deception Island.", "The South Shetland Islands are considered part of Antarctica.", "If A is located in B and B is located in C, then A is located in C."], "premises-FOL": ["Cove(barutin) ∧ NameAfter(barutin, settlement) ∧ Locate(settlement, bulgaria)", "Locate(barutin, snow)", "Locate(snow, shetland) ∧ Locate(greenwich, shetland) ∧ Locate(deception, shetland)", "Locate(shetland, antarctica)", "∀x ∀y ∀z ((Locate(x, y) ∧ Locate(y, z)) → Locate(x, z))"], "conclusion": "Barutin is not located in Antarctica.", "conclusion-FOL": "¬Locate(barutin, antarctica)", "label": "False", "premises_nouns_p": ["Barutin Cove is named after the Bulgarian settlement of Barutin.", "Barutin Cove is on the southwest coast of Snow Island.", "The South Shetland Islands include Snow Island, Greenwich Island, and Deception Island.", "The South Shetland Islands are considered part of Antarctica.", "If A is located in B and B is located in C, then A is located in C."], "conclusion_nouns_p": "Barutin is not located in Antarctica."}
{"premises": ["Some affection is love.", "Some love is positive."], "premises-FOL": ["∃x (Affection(x) ∧ Love(x))", "∃x (Love(x) ∧ Positive(x))"], "conclusion": "Some affection is positive.", "conclusion-FOL": "∃x (Affection(x) ∧ Positive(x))", "label": "Uncertain", "premises_nouns_p": ["Some giggling is love.", "Some love is positive."], "conclusion_nouns_p": "Some giggling is positive."}
{"premises": ["If something can transport multiple passengers, then they are not empty.", "All airlines can transport multiple passengers.", "All planes are empty.", "All Boeing 707s are planes.", "If Greyhound is not an airline, then there are no Greyhound planes."], "premises-FOL": ["∀x (TransportMultiplePassengers(x) → ¬Empty(x))", "∀x (Airline(x) → TransportMultiplePassengers(x))", "∀x (Plane(x) → Empty(x))", "∀x (Boeing707(x) → Plane(x))", "¬Airline(greyhound) → ¬(Airline(greyhound) ∨ Plane(greyhound))"], "conclusion": "Greyhound is an airline.", "conclusion-FOL": "Airline(greyhound)", "label": "Uncertain", "premises_nouns_p": ["If something can transport multiple passengers, then they are not empty.", "All sky-whales can transport multiple passengers.", "All clouds are empty.", "All Boeing 707s are clouds.", "If Greyhound is not a sky-whale, then there are no Greyhound clouds."], "conclusion_nouns_p": "Greyhound is a sky-whale."}
{"premises": ["If something can transport multiple passengers, then they are not empty.", "All airlines can transport multiple passengers.", "All planes are empty.", "All Boeing 707s are planes.", "If Greyhound is not an airline, then there are no Greyhound planes."], "premises-FOL": ["∀x (TransportMultiplePassengers(x) → ¬Empty(x))", "∀x (Airline(x) → TransportMultiplePassengers(x))", "∀x (Plane(x) → Empty(x))", "∀x (Boeing707(x) → Plane(x))", "¬Airline(greyhound) → ¬(Airline(greyhound) ∨ Plane(greyhound))"], "conclusion": "A Greyhound is a Boeing 707.", "conclusion-FOL": "Boeing707(greyhound)", "label": "False", "premises_nouns_p": ["If something can transport multiple passengers, then they are not empty.", "All airlines can transport multiple passengers.", "All bananas are empty.", "All Boeing 707s are bananas.", "If Greyhound is not an airline, then there are no Greyhound bananas."], "conclusion_nouns_p": "A Greyhound is a Boeing 707."}
{"premises": ["If something can transport multiple passengers, then they are not empty.", "All airlines can transport multiple passengers.", "All planes are empty.", "All Boeing 707s are planes.", "If Greyhound is not an airline, then there are no Greyhound planes."], "premises-FOL": ["∀x (TransportMultiplePassengers(x) → ¬Empty(x))", "∀x (Airline(x) → TransportMultiplePassengers(x))", "∀x (Plane(x) → Empty(x))", "∀x (Boeing707(x) → Plane(x))", "¬Airline(greyhound) → ¬(Airline(greyhound) ∨ Plane(greyhound))"], "conclusion": "A Greyhound is not a Boeing 707.", "conclusion-FOL": "¬Boeing707(greyhound)", "label": "True", "premises_nouns_p": ["If something can transport multiple passengers, then they are not empty.", "All airlines can transport multiple passengers.", "All shoes are empty.", "All Boeing 707s are shoes.", "If Greyhound is not an airline, then there are no Greyhound shoes."], "conclusion_nouns_p": "A Greyhound is not a Boeing 707."}
{"premises": ["All mammals are animals.", "All monkeys are mammals. ", "An animal is either a monkey or a bird.", "All birds fly.", "All animals breathe.", "If something can fly, then it has wings.", "If Rock is neither a fly nor a bird, then Rock neither flies nor breathes."], "premises-FOL": ["∀x  (Mammal (x)→  Animal (x))", "∀x  (Monkey (x)→  Mammal (x))", "∀x ( Monkey (x) ∨  Bird (x))", "∀x  (Bird (x)→  Fly (x))", "∀x  (Animal (x)→  Breathe (x))", "∀x  (Fly (x)→  HaveWings (x))", "¬ Fly (rock) ∧ ¬ Bird (rock) → ¬ Fly (rock) ∧ ¬ Breathe (rock) "], "conclusion": "Rock is a monkey.", "conclusion-FOL": "Monkey(rock)", "label": "Uncertain", "premises_nouns_p": ["All bananas are animals.", "All monkeys are bananas.", "An animal is either a monkey or a bird.", "All birds glow.", "All animals breathe.", "If something can glow, then it has wings.", "If Rock is neither a glow nor a bird, then Rock neither glows nor breathes."], "conclusion_nouns_p": "Rock is a monkey."}
{"premises": ["All mammals are animals.", "All monkeys are mammals. ", "An animal is either a monkey or a bird.", "All birds fly.", "All animals breathe.", "If something can fly, then it has wings.", "If Rock is neither a fly nor a bird, then Rock neither flies nor breathes."], "premises-FOL": ["∀x  (Mammal (x)→  Animal (x))", "∀x  (Monkey (x)→  Mammal (x))", "∀x ( Monkey (x) ∨  Bird (x))", "∀x  (Bird (x)→  Fly (x))", "∀x  (Animal (x)→  Breathe (x))", "∀x  (Fly (x)→  HaveWings (x))", "¬ Fly (rock) ∧ ¬ Bird (rock) → ¬ Fly (rock) ∧ ¬ Breathe (rock) "], "conclusion": "Rock has wings.", "conclusion-FOL": "HaveWings(rock)", "label": "True", "premises_nouns_p": ["All mammals are animals.", "All monkeys are mammals.", "An animal is either a monkey or a bird.", "All birds glow.", "All animals breathe.", "If something can glow, then it has sparkly dust.", "If Rock is neither a glow nor a bird, then Rock neither glows nor breathes."], "conclusion_nouns_p": "Rock has sparkly dust."}
{"premises": ["All mammals are animals.", "All monkeys are mammals. ", "An animal is either a monkey or a bird.", "All birds fly.", "All animals breathe.", "If something can fly, then it has wings.", "If Rock is neither a fly nor a bird, then Rock neither flies nor breathes."], "premises-FOL": ["∀x  (Mammal (x)→  Animal (x))", "∀x  (Monkey (x)→  Mammal (x))", "∀x ( Monkey (x) ∨  Bird (x))", "∀x  (Bird (x)→  Fly (x))", "∀x  (Animal (x)→  Breathe (x))", "∀x  (Fly (x)→  HaveWings (x))", "¬ Fly (rock) ∧ ¬ Bird (rock) → ¬ Fly (rock) ∧ ¬ Breathe (rock) "], "conclusion": "Rock does not have wings.", "conclusion-FOL": "¬ HaveWings(rock)", "label": "False", "premises_nouns_p": ["All dust bunnies are animals.", "All dust bunnies are mammals.", "An animal is either a dust bunny or a bird.", "All birds fly.", "All animals breathe.", "If something can fly, then it has wings.", "If Rock is neither a fly nor a bird, then Rock neither flies nor breathes."], "conclusion_nouns_p": "Rock does not have wings."}
{"premises": ["All people who have a wedding are people who have at least one child.", "All people who travel to Paris for their honeymoon are people who have a wedding.", "All weddings that occur in July belong to people who travel to Paris for their honeymoon.", "Some weddings in July are well-attended.", "If John has at least one child, then John does not travel to Paris for his honeymoon and does not have a wedding.", "If John has a wedding that is well-attended, then John has a wedding in July or, if not, then John travels to Paris for their honeymoon. "], "premises-FOL": ["∀x (Wedding(x) → Child(x))", "∀x (Paris(x) → Wedding(x))", "∀x (July(x) → Paris(x))", "∃x (July(x) ∧ WellAttended(x))", "Child(john) → ¬(Paris(john) ∧ Wedding(john))", "WellAttended(john) → July(john) ⊕ Paris(john)"], "conclusion": "John has a wedding that is well-attended.", "conclusion-FOL": "WellAttended(john)", "label": "False", "premises_nouns_p": ["All clouds who have a wedding are clouds who have at least one child.", "All clouds who travel to Paris for their honeymoon are clouds who have a wedding.", "All weddings that occur in July belong to clouds who travel to Paris for their honeymoon.", "Some weddings in July are well-attended.", "If John has at least one child, then John does not travel to Paris for his honeymoon and does not have a wedding.", "If John has a wedding that is well-attended, then John has a wedding in July or, if not, then John travels to Paris for their honeymoon."], "conclusion_nouns_p": "John has a wedding that is well-attended."}
{"premises": ["All people who have a wedding are people who have at least one child.", "All people who travel to Paris for their honeymoon are people who have a wedding.", "All weddings that occur in July belong to people who travel to Paris for their honeymoon.", "Some weddings in July are well-attended.", "If John has at least one child, then John does not travel to Paris for his honeymoon and does not have a wedding.", "If John has a wedding that is well-attended, then John has a wedding in July or, if not, then John travels to Paris for their honeymoon. "], "premises-FOL": ["∀x (Wedding(x) → Child(x))", "∀x (Paris(x) → Wedding(x))", "∀x (July(x) → Paris(x))", "∃x (July(x) ∧ WellAttended(x))", "Child(john) → ¬(Paris(john) ∧ Wedding(john))", "WellAttended(john) → July(john) ⊕ Paris(john)"], "conclusion": "John does not have a wedding that is well-attended.", "conclusion-FOL": "¬WellAttended(john)", "label": "True", "premises_nouns_p": ["All humans who have a wedding are humans who have at least one child.", "All humans who travel to Paris for their honeymoon are humans who have a wedding.", "All weddings that occur in July belong to humans who travel to Paris for their honeymoon.", "Some weddings in July are well-attended.", "If John has at least one child, then John does not travel to Paris for his honeymoon and does not have a wedding.", "If John has a wedding that is well-attended, then John has a wedding in July or, if not, then John travels to Paris for their honeymoon."], "conclusion_nouns_p": "John does not have a wedding that is well-attended."}
{"premises": ["All people who have a wedding are people who have at least one child.", "All people who travel to Paris for their honeymoon are people who have a wedding.", "All weddings that occur in July belong to people who travel to Paris for their honeymoon.", "Some weddings in July are well-attended.", "If John has at least one child, then John does not travel to Paris for his honeymoon and does not have a wedding.", "If John has a wedding that is well-attended, then John has a wedding in July or, if not, then John travels to Paris for their honeymoon. "], "premises-FOL": ["∀x (Wedding(x) → Child(x))", "∀x (Paris(x) → Wedding(x))", "∀x (July(x) → Paris(x))", "∃x (July(x) ∧ WellAttended(x))", "Child(john) → ¬(Paris(john) ∧ Wedding(john))", "WellAttended(john) → July(john) ⊕ Paris(john)"], "conclusion": "John has at least one child.", "conclusion-FOL": "Child(john)", "label": "Uncertain", "premises_nouns_p": ["All blobs who have a wedding are blobs who have at least one child.", "All blobs who travel to Paris for their honeymoon are blobs who have a wedding.", "All weddings that occur in July belong to blobs who travel to Paris for their honeymoon.", "Some weddings in July are well-attended.", "If John has at least one child, then John does not travel to Paris for his honeymoon and does not have a wedding.", "If John has a wedding that is well-attended, then John has a wedding in July or, if not, then John travels to Paris for their honeymoon."], "conclusion_nouns_p": "John has at least one child."}
{"premises": ["All people who have a wedding are people who have at least one child.", "All people who travel to Paris for their honeymoon are people who have a wedding.", "All weddings that occur in July belong to people who travel to Paris for their honeymoon.", "Some weddings in July are well-attended.", "If John has at least one child, then John does not travel to Paris for his honeymoon and does not have a wedding.", "If John has a wedding that is well-attended, then John has a wedding in July or, if not, then John travels to Paris for their honeymoon. "], "premises-FOL": ["∀x (Wedding(x) → Child(x))", "∀x (Paris(x) → Wedding(x))", "∀x (July(x) → Paris(x))", "∃x (July(x) ∧ WellAttended(x))", "Child(john) → ¬(Paris(john) ∧ Wedding(john))", "WellAttended(john) → July(john) ⊕ Paris(john)"], "conclusion": "John has neither a wedding that is well-attended nor does he travel to Paris for his honeymoon.", "conclusion-FOL": "¬(WellAttended(john) ∨ July(john))", "label": "True", "premises_nouns_p": ["All giraffes who have a wedding are giraffes who have at least one child.", "All giraffes who travel to the moon for their honeymoon are giraffes who have a wedding.", "All weddings that occur in July belong to giraffes who travel to the moon for their honeymoon.", "Some weddings in July are well-attended.", "If John has at least one child, then John does not travel to the moon for his honeymoon and does not have a wedding.", "If John has a wedding that is well-attended, then John has a wedding in July or, if not, then John travels to the moon for their honeymoon."], "conclusion_nouns_p": "John has neither a wedding that is well-attended nor does he travel to the moon for his honeymoon."}
{"premises": ["[BG] Some mammals have teeth.", "Platypus have no teeth.", "Platypus are mammals. ", "Humans have teeth."], "premises-FOL": ["∃x (Mammal(x) ∧ Have(x, teeth))", "¬Have(platypus, teeth)", "Mammal(platypus)", "Have(humans, teeth)"], "conclusion": "Platypus are mammals with no teeth.", "conclusion-FOL": "Mammal(platypus) ∧ ¬Have(platypus, teeth)", "label": "True", "premises_nouns_p": ["[BG] Some mammals have teeth.", "Platypus have no teeth.", "Platypus are mammals.", "Humans have teeth."], "conclusion_nouns_p": "Platypus are mammals with no teeth."}
{"premises": ["[BG] Some mammals have teeth.", "Platypus have no teeth.", "Platypus are mammals. ", "Humans have teeth."], "premises-FOL": ["∃x (Mammal(x) ∧ Have(x, teeth))", "¬Have(platypus, teeth)", "Mammal(platypus)", "Have(humans, teeth)"], "conclusion": "Platypus are reptiles.", "conclusion-FOL": "Reptile(platypus)", "label": "Uncertain", "premises_nouns_p": ["[BG] Some furniture have teeth.", "Platypus have no teeth.", "Platypus are furniture.", "Humans have teeth."], "conclusion_nouns_p": "Platypus are reptiles."}
{"premises": ["[BG] Some mammals have teeth.", "Platypus have no teeth.", "Platypus are mammals. ", "Humans have teeth."], "premises-FOL": ["∃x (Mammal(x) ∧ Have(x, teeth))", "¬Have(platypus, teeth)", "Mammal(platypus)", "Have(humans, teeth)"], "conclusion": "Humans are mammals.", "conclusion-FOL": "Mammal(humans)", "label": "Uncertain", "premises_nouns_p": ["[BG] Some furniture have teeth.", "Platypus have no teeth.", "Platypus are furniture.", "Humans have teeth."], "conclusion_nouns_p": "Humans are furniture."}
{"premises": ["Plungers suck.", "Vacuums suck.", "Vampires suck.", "Space is a vacuum.", "A duster is a household appliance that doesn't suck."], "premises-FOL": ["∀x (Plunger(x) → Suck(x))", "∀x (Vacuum(x) → Suck(x))", "∀x (Vampire(x) → Suck(x))", "Vacuum(space)", "HouseHoldApp(duster) ∧ ¬ Suck(duster)"], "conclusion": "Space sucks.", "conclusion-FOL": "Suck(space)", "label": "True", "premises_nouns_p": ["Plungers fart.", "Vacuums fart.", "Vampires fart.", "Space is a vacuum.", "A duster is a household appliance that doesn't fart."], "conclusion_nouns_p": "Space farts."}
{"premises": ["Plungers suck.", "Vacuums suck.", "Vampires suck.", "Space is a vacuum.", "A duster is a household appliance that doesn't suck."], "premises-FOL": ["∀x (Plunger(x) → Suck(x))", "∀x (Vacuum(x) → Suck(x))", "∀x (Vampire(x) → Suck(x))", "Vacuum(space)", "HouseHoldApp(duster) ∧ ¬ Suck(duster)"], "conclusion": "Space is a vampire.", "conclusion-FOL": "Vampire(space)", "label": "Uncertain", "premises_nouns_p": ["Plungers sing.", "Vacuums sing.", "Vampires sing.", "Space is a vacuum.", "A duster is a household appliance that doesn't sing."], "conclusion_nouns_p": "Space is a vampire."}
{"premises": ["Plungers suck.", "Vacuums suck.", "Vampires suck.", "Space is a vacuum.", "A duster is a household appliance that doesn't suck."], "premises-FOL": ["∀x (Plunger(x) → Suck(x))", "∀x (Vacuum(x) → Suck(x))", "∀x (Vampire(x) → Suck(x))", "Vacuum(space)", "HouseHoldApp(duster) ∧ ¬ Suck(duster)"], "conclusion": "If something is a household appliance, it sucks.", "conclusion-FOL": "∀x (HouseHoldApp(x) → Suck(x))", "label": "False", "premises_nouns_p": ["Plungers slurp.", "Vacuums slurp.", "Vampires slurp.", "Space is a vacuum.", "A duster is a household appliance that doesn't slurp."], "conclusion_nouns_p": "If something is a household appliance, it sucks."}
{"premises": ["Machine Learning algorithms can be categorized as supervised learning, unsupervised learning, and reinforcement learning.", "Unsupervised learning doesn't require labelled data.", "The state-of-the-art text summarization model is trained with machine learning algorithms.", "Reinforcement learning is not used to train the state-of-the-art text summarization model.", "The Machine Learning algorithm for training text summarization model requires labelled data."], "premises-FOL": ["MLAlgorithm(supervisedLearning) ∨ MLAlgorithm(unsupervisedLearning) ∨ MLAlgorithm(reinforcementLearning)", "¬RequireLabelledData(unsupervisedLearning)", "TrainTextSumModel(supervisedLearning) ∨ TrainTextSumModel(unsupervisedLearning) ∨ TrainTextSumModel(reinforcementLearning)", "¬TrainTextSumModel(reinforcementLearning)", "∀x ((MLAlgorithm(x) ∧ TrainTextSumModel(x)) → RequireLabelledData(x))"], "conclusion": "Supervised learning is used to train the state-of-the-art text summarization model.", "conclusion-FOL": "TrainTextSumModel(supervisedLearning)", "label": "True", "premises_nouns_p": ["Machine Learning algorithms can be categorized as supervised learning, unsupervised learning, and reinforcement learning.", "Unsupervised learning doesn't require labelled data.", "The state-of-the-art poetry model is trained with machine learning algorithms.", "Reinforcement learning is not used to train the state-of-the-art poetry model.", "The Machine Learning algorithm for training poetry model requires labelled data."], "conclusion_nouns_p": "Supervised learning is used to train the state-of-the-art poetry model."}
{"premises": ["Machine Learning algorithms can be categorized as supervised learning, unsupervised learning, and reinforcement learning.", "Unsupervised learning doesn't require labelled data.", "The state-of-the-art text summarization model is trained with machine learning algorithms.", "Reinforcement learning is not used to train the state-of-the-art text summarization model.", "The Machine Learning algorithm for training text summarization model requires labelled data."], "premises-FOL": ["MLAlgorithm(supervisedLearning) ∨ MLAlgorithm(unsupervisedLearning) ∨ MLAlgorithm(reinforcementLearning)", "¬RequireLabelledData(unsupervisedLearning)", "TrainTextSumModel(supervisedLearning) ∨ TrainTextSumModel(unsupervisedLearning) ∨ TrainTextSumModel(reinforcementLearning)", "¬TrainTextSumModel(reinforcementLearning)", "∀x ((MLAlgorithm(x) ∧ TrainTextSumModel(x)) → RequireLabelledData(x))"], "conclusion": "Unsupervised learning is used to train the state-of-the-art text summarization model.", "conclusion-FOL": "TrainTextSumModel(unsupervisedLearning)", "label": "False", "premises_nouns_p": ["Machine Learning algorithms can be categorized as supervised learning, unsupervised learning, and reinforcement learning.", "Unsupervised learning doesn't require labelled data.", "The state-of-the-art poetry model is trained with machine learning algorithms.", "Reinforcement learning is not used to train the state-of-the-art poetry model.", "The Machine Learning algorithm for training poetry model requires labelled data."], "conclusion_nouns_p": "Unsupervised learning is used to train the state-of-the-art poetry model."}
{"premises": ["If a cartoon character is funny, then it is popular.", "If a cartoon character is ugly, then it is not popular.", "If a cartoon character is loved by children, then it is funny.", "If a cartoon character is from The Simpsons, then it is loved by children.", "If a cartoon character is yellow, then it is from The Simpsons.", "Ben is either from The Simpsons or funny."], "premises-FOL": ["∀x (Funny(x) → Popular(x))", "∀x (Ugly(x) → ¬Popular(x))", "∀x (Love(children, x) → Funny(x))", "∀x (Simpsons(x) → Love(children, x))", "∀x (Yellow(x) → Simpsons(x))", "Simpsons(ben) ⊕ Funny(ben)"], "conclusion": "Ben is loved by children.", "conclusion-FOL": "Love(children, ben)", "label": "Uncertain", "premises_nouns_p": ["If a spoon is funny, then it is popular.", "If a spoon is ugly, then it is not popular.", "If a spoon is loved by children, then it is funny.", "If a spoon is from The Simpsons, then it is loved by children.", "If a spoon is yellow, then it is from The Simpsons.", "Ben is either from The Simpsons or funny."], "conclusion_nouns_p": "Ben is loved by children."}
{"premises": ["If a cartoon character is funny, then it is popular.", "If a cartoon character is ugly, then it is not popular.", "If a cartoon character is loved by children, then it is funny.", "If a cartoon character is from The Simpsons, then it is loved by children.", "If a cartoon character is yellow, then it is from The Simpsons.", "Ben is either from The Simpsons or funny."], "premises-FOL": ["∀x (Funny(x) → Popular(x))", "∀x (Ugly(x) → ¬Popular(x))", "∀x (Love(children, x) → Funny(x))", "∀x (Simpsons(x) → Love(children, x))", "∀x (Yellow(x) → Simpsons(x))", "Simpsons(ben) ⊕ Funny(ben)"], "conclusion": "Ben is ugly or yellow.", "conclusion-FOL": "Ugly(ben) ∨ Yellow(ben)", "label": "False", "premises_nouns_p": ["If a banana is funny, then it is popular.", "If a banana is ugly, then it is not popular.", "If a banana is loved by children, then it is funny.", "If a banana is from The Simpsons, then it is loved by children.", "If a banana is yellow, then it is from The Simpsons.", "Ben is either from The Simpsons or funny."], "conclusion_nouns_p": "Ben is ugly or yellow."}
{"premises": ["If a cartoon character is funny, then it is popular.", "If a cartoon character is ugly, then it is not popular.", "If a cartoon character is loved by children, then it is funny.", "If a cartoon character is from The Simpsons, then it is loved by children.", "If a cartoon character is yellow, then it is from The Simpsons.", "Ben is either from The Simpsons or funny."], "premises-FOL": ["∀x (Funny(x) → Popular(x))", "∀x (Ugly(x) → ¬Popular(x))", "∀x (Love(children, x) → Funny(x))", "∀x (Simpsons(x) → Love(children, x))", "∀x (Yellow(x) → Simpsons(x))", "Simpsons(ben) ⊕ Funny(ben)"], "conclusion": "Ben is either yellow and ugly or neither yellow nor ugly.", "conclusion-FOL": "(Yellow(ben) ∧ Ugly(ben)) ⊕ (¬Yellow(ben) ∧ ¬Ugly(ben))", "label": "True", "premises_nouns_p": ["If a cartoon character is funny, then it is popular.", "If a cartoon character is ugly, then it is not popular.", "If a cartoon character is loved by children, then it is funny.", "If a cartoon character is from The Candy Factory, then it is loved by children.", "If a cartoon character is yellow, then it is from The Candy Factory.", "Ben is either from The Candy Factory or funny."], "conclusion_nouns_p": "Ben is either yellow and ugly or neither yellow nor ugly."}
{"premises": ["Breeding back is a form of artificial selection by the deliberate selective breeding of domestic animals.", "Heck cattle were bred-back in the 1920s to resemble the aurochs.", "[BG] Heck cattle are animals.", "[BG] Aurochs are animals.", "Some animals to be bred-back resemble animals that are extinct."], "premises-FOL": ["∀x ∀y (BreedingBack(x, y) → ArtificiallySelect(x))", "∃x ∃y (HeckCattle(x) ∧ Aurochs(y) ∧ BreedingBack(x, y))", "∀x (HeckCattle(x) → Animal(x))", "∀x (Aurochs(x) → Animal(x))", "∃x ∃y (Animal(x) ∧ Animal(y) ∧ BreedingBack(x, y) ∧ Extinct(y))"], "conclusion": "Some Heck cattle are artificially selected.", "conclusion-FOL": "∃x (HeckCattle(x) ∧ ArtificiallySelect(x))", "label": "True", "premises_nouns_p": ["Breeding back is a form of artificial selection by the deliberate selective breeding of domestic bananas.", "Heck cattle were bred-back in the 1920s to resemble the aurochs.", "[BG] Heck cattle are animals.", "[BG] Aurochs are animals.", "Some bananas to be bred-back resemble animals that are extinct."], "conclusion_nouns_p": "Some Heck cattle are artificially selected."}
{"premises": ["Breeding back is a form of artificial selection by the deliberate selective breeding of domestic animals.", "Heck cattle were bred-back in the 1920s to resemble the aurochs.", "[BG] Heck cattle are animals.", "[BG] Aurochs are animals.", "Some animals to be bred-back resemble animals that are extinct."], "premises-FOL": ["∀x ∀y (BreedingBack(x, y) → ArtificiallySelect(x))", "∃x ∃y (HeckCattle(x) ∧ Aurochs(y) ∧ BreedingBack(x, y))", "∀x (HeckCattle(x) → Animal(x))", "∀x (Aurochs(x) → Animal(x))", "∃x ∃y (Animal(x) ∧ Animal(y) ∧ BreedingBack(x, y) ∧ Extinct(y))"], "conclusion": "Aurochs are extinct.", "conclusion-FOL": "∀x (Aurochs(x) → Extinct(x))", "label": "Uncertain", "premises_nouns_p": ["Breeding back is a form of artificial selection by the deliberate selective breeding of domestic furniture.", "Heck cattle were bred-back in the 1920s to resemble the aurochs.", "[BG] Heck cattle are furniture.", "[BG] Aurochs are furniture.", "Some furniture to be bred-back resemble furniture that are extinct."], "conclusion_nouns_p": "Aurochs are extinct."}
{"premises": ["All students are humans. ", "If someone studies, then they are a student.", "A person either studys or teaches.", "No young person teaches.", "Jerry neither teaches nor is a manager.", "Rose is young or a student."], "premises-FOL": ["∀x (Student(x) → Human(x))", "∀x (Study(x) → Student(x))", "∀x (Study(x) ∨ Teach(x))", "∀x (Young(x) → ¬Teach(x))", "¬Teach(jerry) ∧ ¬Manager(jerry)", "Young(rose) ∨ Student(rose)"], "conclusion": "Jerry is young.", "conclusion-FOL": "Young(jerry)", "label": "Uncertain", "premises_nouns_p": ["All lamps are humans.", "If someone studies, then they are a lamp.", "A person either studys or teaches.", "No young person teaches.", "Jerry neither teaches nor is a manager.", "Rose is young or a lamp."], "conclusion_nouns_p": "Jerry is young."}
{"premises": ["All students are humans. ", "If someone studies, then they are a student.", "A person either studys or teaches.", "No young person teaches.", "Jerry neither teaches nor is a manager.", "Rose is young or a student."], "premises-FOL": ["∀x (Student(x) → Human(x))", "∀x (Study(x) → Student(x))", "∀x (Study(x) ∨ Teach(x))", "∀x (Young(x) → ¬Teach(x))", "¬Teach(jerry) ∧ ¬Manager(jerry)", "Young(rose) ∨ Student(rose)"], "conclusion": "Jerry is not young.", "conclusion-FOL": "¬Young(jerry)", "label": "Uncertain", "premises_nouns_p": ["All lamps are humans.", "If someone studies, then they are a lamp.", "A person either studys or teaches.", "No young lamp teaches.", "Jerry neither teaches nor is a manager.", "Rose is young or a lamp."], "conclusion_nouns_p": "Jerry is not young."}
{"premises": ["All students are humans. ", "If someone studies, then they are a student.", "A person either studys or teaches.", "No young person teaches.", "Jerry neither teaches nor is a manager.", "Rose is young or a student."], "premises-FOL": ["∀x (Student(x) → Human(x))", "∀x (Study(x) → Student(x))", "∀x (Study(x) ∨ Teach(x))", "∀x (Young(x) → ¬Teach(x))", "¬Teach(jerry) ∧ ¬Manager(jerry)", "Young(rose) ∨ Student(rose)"], "conclusion": "Rose is a human or a manager.", "conclusion-FOL": "Human(rose) ∨ Manager(rose)", "label": "True", "premises_nouns_p": ["All rocks are humans.", "If someone studies, then they are a rock.", "A person either studys or teaches.", "No young person teaches.", "Jerry neither teaches nor is a manager.", "Rose is young or a rock."], "conclusion_nouns_p": "Rose is a human or a manager."}
{"premises": ["All students are humans. ", "If someone studies, then they are a student.", "A person either studys or teaches.", "No young person teaches.", "Jerry neither teaches nor is a manager.", "Rose is young or a student."], "premises-FOL": ["∀x (Student(x) → Human(x))", "∀x (Study(x) → Student(x))", "∀x (Study(x) ∨ Teach(x))", "∀x (Young(x) → ¬Teach(x))", "¬Teach(jerry) ∧ ¬Manager(jerry)", "Young(rose) ∨ Student(rose)"], "conclusion": "Rose is a human or Jerry is a manager.", "conclusion-FOL": "Human(rose) ∨ Manager(jerry)", "label": "True", "premises_nouns_p": ["All robots are humans.", "If someone studies, then they are a robot.", "A person either studys or teaches.", "No young person teaches.", "Jerry neither teaches nor is a manager.", "Rose is young or a robot."], "conclusion_nouns_p": "Rose is a human or Jerry is a manager."}
{"premises": ["All students are humans. ", "If someone studies, then they are a student.", "A person either studys or teaches.", "No young person teaches.", "Jerry neither teaches nor is a manager.", "Rose is young or a student."], "premises-FOL": ["∀x (Student(x) → Human(x))", "∀x (Study(x) → Student(x))", "∀x (Study(x) ∨ Teach(x))", "∀x (Young(x) → ¬Teach(x))", "¬Teach(jerry) ∧ ¬Manager(jerry)", "Young(rose) ∨ Student(rose)"], "conclusion": "It is not true that Rose is a student and Jerry is a human.", "conclusion-FOL": "¬(Student(rose) ∧ Human(jerry))", "label": "False", "premises_nouns_p": ["All celestial bodies are humans.", "If someone studies, then they are a celestial body.", "A celestial body either studys or teaches.", "No young celestial body teaches.", "Jerry neither teaches nor is a manager.", "Rose is young or a celestial body."], "conclusion_nouns_p": "It is not true that Rose is a celestial body and Jerry is a human."}
{"premises": ["New Vessel Press is a publishing house which specializes in translating foreign literature into English.", "All of New Vessel Press's published books are in English.", "Neapolitan Chronicles is a book published by New Vessel Press.", "Neapolitan Chronicles was translated from Italian.", "Palace of Flies is a book published by New Vessel Press."], "premises-FOL": ["PublishingHouse(newvesselpress) ∧ SpecializesIn(newvessel, translatingforeignliteratureintoenglish)", "∀x (Book(x) ∧ PublishedBy(x, newvesselpress) → In(x, english))", "Book(neapolitanchronicles) ∧ PublishedBy(neapolitanchronicles, newvesselpress)", "TranslatedFrom(neapolitanchronicles, italian)", "Book(palaceofflies) ∧ PublishedBy(palaceofflies, newvesselpress)"], "conclusion": "Neapolitan Chronicles is an English book.", "conclusion-FOL": "Book(neapolitanchronicles) ∧ In(neapolitanchronicles, english)", "label": "True", "premises_nouns_p": ["New Vessel Press is a publishing house which specializes in translating foreign literature into English.", "All of New Vessel Press's published books are in English.", "Neapolitan Chronicles is a book published by New Vessel Press.", "Neapolitan Chronicles was translated from Italian.", "Palace of Flies is a book published by New Vessel Press."], "conclusion_nouns_p": "Neapolitan Chronicles is an English book."}
{"premises": ["New Vessel Press is a publishing house which specializes in translating foreign literature into English.", "All of New Vessel Press's published books are in English.", "Neapolitan Chronicles is a book published by New Vessel Press.", "Neapolitan Chronicles was translated from Italian.", "Palace of Flies is a book published by New Vessel Press."], "premises-FOL": ["PublishingHouse(newvesselpress) ∧ SpecializesIn(newvessel, translatingforeignliteratureintoenglish)", "∀x (Book(x) ∧ PublishedBy(x, newvesselpress) → In(x, english))", "Book(neapolitanchronicles) ∧ PublishedBy(neapolitanchronicles, newvesselpress)", "TranslatedFrom(neapolitanchronicles, italian)", "Book(palaceofflies) ∧ PublishedBy(palaceofflies, newvesselpress)"], "conclusion": "Harry Potter was published by New Vessel Press.", "conclusion-FOL": "PublishedBy(harrrypotter, newvesselpress)", "label": "Uncertain", "premises_nouns_p": ["New Vessel Press is a publishing house which specializes in translating foreign literature into English.", "All of New Vessel Press's published scrolls are in English.", "Neapolitan Chronicles is a scroll published by New Vessel Press.", "Neapolitan Chronicles was translated from Italian.", "Palace of Flies is a scroll published by New Vessel Press."], "conclusion_nouns_p": "Harry Potter was published by New Vessel Press."}
{"premises": ["New Vessel Press is a publishing house which specializes in translating foreign literature into English.", "All of New Vessel Press's published books are in English.", "Neapolitan Chronicles is a book published by New Vessel Press.", "Neapolitan Chronicles was translated from Italian.", "Palace of Flies is a book published by New Vessel Press."], "premises-FOL": ["PublishingHouse(newvesselpress) ∧ SpecializesIn(newvessel, translatingforeignliteratureintoenglish)", "∀x (Book(x) ∧ PublishedBy(x, newvesselpress) → In(x, english))", "Book(neapolitanchronicles) ∧ PublishedBy(neapolitanchronicles, newvesselpress)", "TranslatedFrom(neapolitanchronicles, italian)", "Book(palaceofflies) ∧ PublishedBy(palaceofflies, newvesselpress)"], "conclusion": "Palace of Flies was translated from Italian.", "conclusion-FOL": "TranslatedFrom(palaceofflies, italian)", "label": "Uncertain", "premises_nouns_p": ["New Vessel Press is a publishing house which specializes in translating foreign literature into English.", "All of New Vessel Press's published books are in English.", "Neapolitan Chronicles is a book published by New Vessel Press.", "Neapolitan Chronicles was translated from Italian.", "Palace of Flies is a book published by New Vessel Press."], "conclusion_nouns_p": "Palace of Flies was translated from Italian."}
{"premises": ["If people own a large desktop monitor at their home, then they work regularly and often at home.", "All people who have a fully stocked and impressive home office are people who own a large desktop monitor at their home.", "All people who work regularly and often at home spend their free time tidying and organizing the spaces in their homes.", "All people who work regularly and often at home visit the office supply store regularly.", "If people spend their free time tidying and organizing the spaces in their home, then they do not go to bed late and wake up every day after noon. ", "Remy either both goes to bed late and wakes up every day after noon and spends their free time tidying and organizing the spaces in their home, or they do not go to bed late and wake up every day after noon nor spend their free time tidying and organizing the spaces in their home. "], "premises-FOL": ["∀x (Desktop(x) → WorkHome(x))", "∀x (HomeOffice(x) → Desktop(x))", "∀x (WorkHome(x) → Tidying(x))", "∀x (WorkHome(x) → OfficeStore(x))", "∀x (Tidying(x) → ¬Late(x))", "(Late(remy) ∧ Tidying(remy)) ⊕ (¬Late(remy) ∧ ¬Tidying(remy))"], "conclusion": "Remy visits the office supply store regularly.", "conclusion-FOL": "OfficeStore(remy)", "label": "Uncertain", "premises_nouns_p": ["If sloths own a large desktop monitor at their home, then they work regularly and often at home.", "All sloths who have a fully stocked and impressive home office are sloths who own a large desktop monitor at their home.", "All sloths who work regularly and often at home spend their free time tidying and organizing the spaces in their homes.", "All sloths who work regularly and often at home visit the office supply store regularly.", "If sloths spend their free time tidying and organizing the spaces in their home, then they do not go to bed late and wake up every day after noon.", "Remy either both goes to bed late and wakes up every day after noon and spends their free time tidying and organizing the spaces in their home, or they do not go to bed late and wake up every day after noon nor spend their free time tidying and organizing the spaces in their home."], "conclusion_nouns_p": "Remy visits the office supply store regularly."}
{"premises": ["If people own a large desktop monitor at their home, then they work regularly and often at home.", "All people who have a fully stocked and impressive home office are people who own a large desktop monitor at their home.", "All people who work regularly and often at home spend their free time tidying and organizing the spaces in their homes.", "All people who work regularly and often at home visit the office supply store regularly.", "If people spend their free time tidying and organizing the spaces in their home, then they do not go to bed late and wake up every day after noon. ", "Remy either both goes to bed late and wakes up every day after noon and spends their free time tidying and organizing the spaces in their home, or they do not go to bed late and wake up every day after noon nor spend their free time tidying and organizing the spaces in their home. "], "premises-FOL": ["∀x (Desktop(x) → WorkHome(x))", "∀x (HomeOffice(x) → Desktop(x))", "∀x (WorkHome(x) → Tidying(x))", "∀x (WorkHome(x) → OfficeStore(x))", "∀x (Tidying(x) → ¬Late(x))", "(Late(remy) ∧ Tidying(remy)) ⊕ (¬Late(remy) ∧ ¬Tidying(remy))"], "conclusion": "Remy has a fully stocked and impressive home office and also visits the office supply store regularly.", "conclusion-FOL": "HomeOffice(remy) ∧ OfficeStore(remy)", "label": "False", "premises_nouns_p": ["If robots own a large desktop monitor at their home, then they work regularly and often at home.", "All robots who have a fully stocked and impressive home office are robots who own a large desktop monitor at their home.", "All robots who work regularly and often at home spend their free time tidying and organizing the spaces in their homes.", "All robots who work regularly and often at home visit the office supply store regularly.", "If robots spend their free time tidying and organizing the spaces in their home, then they do not go to bed late and wake up every day after noon.", "Remy either both goes to bed late and wakes up every day after noon and spends their free time tidying and organizing the spaces in their home, or they do not go to bed late and wake up every day after noon nor spend their free time tidying and organizing the spaces in their home."], "conclusion_nouns_p": "Remy has a fully stocked and impressive home office and also visits the office supply store regularly."}
{"premises": ["If people own a large desktop monitor at their home, then they work regularly and often at home.", "All people who have a fully stocked and impressive home office are people who own a large desktop monitor at their home.", "All people who work regularly and often at home spend their free time tidying and organizing the spaces in their homes.", "All people who work regularly and often at home visit the office supply store regularly.", "If people spend their free time tidying and organizing the spaces in their home, then they do not go to bed late and wake up every day after noon. ", "Remy either both goes to bed late and wakes up every day after noon and spends their free time tidying and organizing the spaces in their home, or they do not go to bed late and wake up every day after noon nor spend their free time tidying and organizing the spaces in their home. "], "premises-FOL": ["∀x (Desktop(x) → WorkHome(x))", "∀x (HomeOffice(x) → Desktop(x))", "∀x (WorkHome(x) → Tidying(x))", "∀x (WorkHome(x) → OfficeStore(x))", "∀x (Tidying(x) → ¬Late(x))", "(Late(remy) ∧ Tidying(remy)) ⊕ (¬Late(remy) ∧ ¬Tidying(remy))"], "conclusion": "If Remy either goes to bed late and wakes up every day after noon or visits the office supply store regularly, then Remy neither spends their free time tidying and organizing the spaces in their home nor has a fully stocked and impressive home office.", "conclusion-FOL": "Late(remy) ∨ OfficeStore(remy) → ¬(Tidying(remy) ∨ HomeOffice(remy))", "label": "True", "premises_nouns_p": ["If people own a large desktop monitor at their home, then they work regularly and often at home.", "All people who have a fully stocked and impressive home office are people who own a large desktop monitor at their home.", "All people who work regularly and often at home spend their free time tidying and organizing the spaces in their homes.", "All people who work regularly and often at home visit the office supply store regularly.", "If people spend their free time tidying and organizing the spaces in their home, then they do not go to bed late and wake up every day after noon.", "Remy either both goes to bed late and wakes up every day after noon and spends their free time tidying and organizing the spaces in their home, or they do not go to bed late and wake up every day after noon nor spend their free time tidying and organizing the spaces in their home."], "conclusion_nouns_p": "If Remy either goes to bed late and wakes up every day after noon or visits the office supply store regularly, then Remy neither spends their free time tidying and organizing the spaces in their home nor has a fully stocked and impressive home office."}
{"premises": ["All humans are mortal.", "All Greeks are humans."], "premises-FOL": ["∀x (Human(x) → Mortal(x))", "∀x (Greek(x) → Human(x))"], "conclusion": "Some Greeks are mortal.", "conclusion-FOL": "∃x (Greek(x) ∧ Mortal(x))", "label": "Uncertain", "premises_nouns_p": ["All toasters are mortal.", "All Greeks are toasters."], "conclusion_nouns_p": "Some Greeks are mortal."}
{"premises": ["No students who work in the library are from the computer science department. ", "All students who have part-time jobs offered by the university are students who work in the library. ", "All students who take the database course are from the computer science department. ", "All students instructed by professor David are taking the database course. ", "All students working in the lab are instructed by professor David. ", "James is a student working in the lab. ", "Jack neither has a part-time job offered by the university nor works in the lab. "], "premises-FOL": ["∀x (WorkLibrary(x) → ¬ComputerScience(x))", "∀x (PartTime(x) → WorkLibrary(x))", "∀x (Database(x) → ComputerScience(x))", "∀x (ProfessorDavid(x) → Database(x))", "∀x (WorkInLab(x) → ProfessorDavid(x))", "WorkInLab(james)", "¬PartTime(jack) ∧ ¬WorkInLab(jack)"], "conclusion": "James has a part-time job offered by the university.", "conclusion-FOL": "PartTime(james)", "label": "False", "premises_nouns_p": ["No students who work in the library are from the computer science department.", "All students who have part-time jobs offered by the university are students who work in the library.", "All students who take the database course are from the computer science department.", "All students instructed by professor David are taking the database course.", "All students working in the lab are instructed by professor David.", "James is a student working in the lab.", "Jack neither has a part-time job offered by the university nor works in the lab."], "conclusion_nouns_p": "James has a part-time job offered by the university."}
{"premises": ["No students who work in the library are from the computer science department. ", "All students who have part-time jobs offered by the university are students who work in the library. ", "All students who take the database course are from the computer science department. ", "All students instructed by professor David are taking the database course. ", "All students working in the lab are instructed by professor David. ", "James is a student working in the lab. ", "Jack neither has a part-time job offered by the university nor works in the lab. "], "premises-FOL": ["∀x (WorkLibrary(x) → ¬ComputerScience(x))", "∀x (PartTime(x) → WorkLibrary(x))", "∀x (Database(x) → ComputerScience(x))", "∀x (ProfessorDavid(x) → Database(x))", "∀x (WorkInLab(x) → ProfessorDavid(x))", "WorkInLab(james)", "¬PartTime(jack) ∧ ¬WorkInLab(jack)"], "conclusion": "James does not have a part-time job offered by the university.", "conclusion-FOL": "¬PartTime(james)", "label": "True", "premises_nouns_p": ["No robots who work in the library are from the cookie department.", "All robots who have part-time jobs offered by the bakery are robots who work in the library.", "All robots who take the database course are from the cookie department.", "All robots instructed by professor David are taking the database course.", "All robots working in the lab are instructed by professor David.", "James is a robot working in the lab.", "Jack neither has a part-time job offered by the bakery nor works in the lab."], "conclusion_nouns_p": "James does not have a part-time job offered by the bakery."}
{"premises": ["No students who work in the library are from the computer science department. ", "All students who have part-time jobs offered by the university are students who work in the library. ", "All students who take the database course are from the computer science department. ", "All students instructed by professor David are taking the database course. ", "All students working in the lab are instructed by professor David. ", "James is a student working in the lab. ", "Jack neither has a part-time job offered by the university nor works in the lab. "], "premises-FOL": ["∀x (WorkLibrary(x) → ¬ComputerScience(x))", "∀x (PartTime(x) → WorkLibrary(x))", "∀x (Database(x) → ComputerScience(x))", "∀x (ProfessorDavid(x) → Database(x))", "∀x (WorkInLab(x) → ProfessorDavid(x))", "WorkInLab(james)", "¬PartTime(jack) ∧ ¬WorkInLab(jack)"], "conclusion": "James either takes the database course or has a part-time job offered by the university.", "conclusion-FOL": "Database(james) ⊕ PartTime(james)", "label": "True", "premises_nouns_p": ["No clouds who work in the library are from the computer science department.", "All clouds who have part-time jobs offered by the university are clouds who work in the library.", "All clouds who take the database course are from the computer science department.", "All clouds instructed by professor David are taking the database course.", "All clouds working in the lab are instructed by professor David.", "James is a cloud working in the lab.", "Jack neither has a part-time job offered by the university nor works in the lab."], "conclusion_nouns_p": "James either takes the database course or has a part-time job offered by the university."}
{"premises": ["No students who work in the library are from the computer science department. ", "All students who have part-time jobs offered by the university are students who work in the library. ", "All students who take the database course are from the computer science department. ", "All students instructed by professor David are taking the database course. ", "All students working in the lab are instructed by professor David. ", "James is a student working in the lab. ", "Jack neither has a part-time job offered by the university nor works in the lab. "], "premises-FOL": ["∀x (WorkLibrary(x) → ¬ComputerScience(x))", "∀x (PartTime(x) → WorkLibrary(x))", "∀x (Database(x) → ComputerScience(x))", "∀x (ProfessorDavid(x) → Database(x))", "∀x (WorkInLab(x) → ProfessorDavid(x))", "WorkInLab(james)", "¬PartTime(jack) ∧ ¬WorkInLab(jack)"], "conclusion": "Jack takes the database course.", "conclusion-FOL": "Database(jack)", "label": "Uncertain", "premises_nouns_p": ["No sentient toasters who work in the library are from the computer science department.", "All sentient toasters who have part-time jobs offered by the university are sentient toasters who work in the library.", "All sentient toasters who take the database course are from the computer science department.", "All sentient toasters instructed by professor David are taking the database course.", "All sentient toasters working in the lab are instructed by professor David.", "James is a sentient toaster working in the lab.", "Jack neither has a part-time job offered by the university nor works in the lab."], "conclusion_nouns_p": "Jack takes the database course."}
{"premises": ["If George likes music, he wants to compose.", "If George has access to a program, he can compose.", "If George can compose and wants to compose, he will compose."], "premises-FOL": ["LikesMusic(george) → WantsToCompose(george)", "AccesstoProgram(george) → CanCompose(george)", "(WantsToCompose(george) ∧ CanCompose(george)) → WillCompose(george)"], "conclusion": "If George likes music and has access to a program, he will compose.", "conclusion-FOL": "(LikesMusic(george) ∧ AccesstoProgram(george)) → WillCompose(george)", "label": "True", "premises_nouns_p": ["If George likes music, he wants to compose.", "If George has access to a cauldron, he can compose.", "If George can compose and wants to compose, he will compose."], "conclusion_nouns_p": "If George likes music and has access to a cauldron, he will compose."}
{"premises": ["If George likes music, he wants to compose.", "If George has access to a program, he can compose.", "If George can compose and wants to compose, he will compose."], "premises-FOL": ["LikesMusic(george) → WantsToCompose(george)", "AccesstoProgram(george) → CanCompose(george)", "(WantsToCompose(george) ∧ CanCompose(george)) → WillCompose(george)"], "conclusion": "If George will not compose, George can not compose.", "conclusion-FOL": "¬WantsToCompose(george) → ¬WillCompose(george)", "label": "Uncertain", "premises_nouns_p": ["If George likes music, he wants to compose.", "If George has access to a program, he can compose.", "If George can compose and wants to compose, he will compose."], "conclusion_nouns_p": "If George will not compose, George can not compose."}
{"premises": ["A hawk never lands. ", "Some birds are hawks."], "premises-FOL": ["∀x (Hawk(x) → ¬Lands(x))", "∃x (Bird(x) ∧ Hawk(x))"], "conclusion": "All birds land", "conclusion-FOL": "∀x (Bird(x) → Lands(x))", "label": "False", "premises_nouns_p": ["A pigeon never lands.", "Some birds are pigeons."], "conclusion_nouns_p": "All birds land"}
{"premises": ["On some Mondays at 8 pm, roses are given out on TV.", "Every rose given out on TV is on the Bachelor.", "Everything on the Bachelor portrays the lives of real people.", "All shows portraying the lives of real people are reality TV shows.", "Breaking Bad is not a reality TV show."], "premises-FOL": ["∃x (Mondayat8(x) ∧ RoseGivenOutOnTv(x))", "∀x (RoseGivenOutOnTv(x) → OnBachelor(x))", "∀x (OnBachelor(x) → PortrayLiveOfRealPeople(x))", "∀x (PortrayLiveOfRealPeople(x) → RealityTVShow(x))", "¬RealityTVShow(breakingbad)"], "conclusion": "Breaking Bad is on Monday at 8 pm.", "conclusion-FOL": "Mondayat8(breakingbad)", "label": "Uncertain", "premises_nouns_p": ["On some Mondays at 8 pm, roses are given out on TV.", "Every rose given out on TV is on the Bachelor.", "Everything on the Bachelor portrays the lives of real squirrels.", "All shows portraying the lives of real squirrels are reality TV shows.", "Breaking Bad is not a reality TV show."], "conclusion_nouns_p": "Breaking Bad is on Monday at 8 pm."}
{"premises": ["On some Mondays at 8 pm, roses are given out on TV.", "Every rose given out on TV is on the Bachelor.", "Everything on the Bachelor portrays the lives of real people.", "All shows portraying the lives of real people are reality TV shows.", "Breaking Bad is not a reality TV show."], "premises-FOL": ["∃x (Mondayat8(x) ∧ RoseGivenOutOnTv(x))", "∀x (RoseGivenOutOnTv(x) → OnBachelor(x))", "∀x (OnBachelor(x) → PortrayLiveOfRealPeople(x))", "∀x (PortrayLiveOfRealPeople(x) → RealityTVShow(x))", "¬RealityTVShow(breakingbad)"], "conclusion": "Breaking Bad is a TV show in which roses are given out on Monday at 8 pm.", "conclusion-FOL": "Mondayat8(breakingbad) ∧ RoseGivenOutOnTv(breakingbad)", "label": "False", "premises_nouns_p": ["On some Mondays at 8 pm, socks are given out on TV.", "Every sock given out on TV is on the Bachelor.", "Everything on the Bachelor portrays the lives of real ants.", "All shows portraying the lives of real ants are reality TV shows.", "Breaking Bad is not a reality TV show."], "conclusion_nouns_p": "Breaking Bad is a TV show in which socks are given out on Monday at 8 pm."}
{"premises": ["On some Mondays at 8 pm, roses are given out on TV.", "Every rose given out on TV is on the Bachelor.", "Everything on the Bachelor portrays the lives of real people.", "All shows portraying the lives of real people are reality TV shows.", "Breaking Bad is not a reality TV show."], "premises-FOL": ["∃x (Mondayat8(x) ∧ RoseGivenOutOnTv(x))", "∀x (RoseGivenOutOnTv(x) → OnBachelor(x))", "∀x (OnBachelor(x) → PortrayLiveOfRealPeople(x))", "∀x (PortrayLiveOfRealPeople(x) → RealityTVShow(x))", "¬RealityTVShow(breakingbad)"], "conclusion": "If roses are given out during Breaking Bad, then it is on Monday at 8 pm.", "conclusion-FOL": "RoseGivenOutOnTv(breakingbad) → Mondayat8(breakingbad)", "label": "True", "premises_nouns_p": ["If flowers are given out during Breaking Bad, then it is on Monday at 8 pm.", "On some Mondays at 8 pm, flowers are given out on TV.", "Every flower given out on TV is on the Bachelor.", "Everything on the Bachelor portrays the lives of real people.", "All shows portraying the lives of real people are reality TV shows."], "conclusion_nouns_p": "Breaking Bad is not a reality TV show."}
{"premises": ["Heinrich Scmidt was a Nazi German politician. ", "Heeinrich Scmidt was also a member of the Prussian State Parliament and the Nazi Reichstag."], "premises-FOL": ["From(heinrichScmidt, naziGermany) ∧ Politician(heinrichScmidt)", "Member(heinrichScmidt, prussianStateParliament) ∧ Member(heinrichScmidt, naziReichstag)"], "conclusion": "Heinrich Schmidt was either German or Russian.", "conclusion-FOL": "From(heinrichScmidt, naziGermany) ∨ From(heinrichScmidt, russia)", "label": "True", "premises_nouns_p": ["Heinrich Scmidt was a Nazi German politician.", "Heeinrich Scmidt was also a member of the Prussian State Parliament and the Nazi Reichstag."], "conclusion_nouns_p": "Heinrich Schmidt was either German or Russian."}
{"premises": ["Heinrich Scmidt was a Nazi German politician. ", "Heeinrich Scmidt was also a member of the Prussian State Parliament and the Nazi Reichstag."], "premises-FOL": ["From(heinrichScmidt, naziGermany) ∧ Politician(heinrichScmidt)", "Member(heinrichScmidt, prussianStateParliament) ∧ Member(heinrichScmidt, naziReichstag)"], "conclusion": "Some Nazi German politician was part of both the Prussian State Parliament and the Nazi Reichstag.", "conclusion-FOL": "∃x (From(x, naziGermany) ∧ Politician(x) ∧ Member(x, prussianStateParliament) ∧ Member(x, naziReichstag))", "label": "True", "premises_nouns_p": ["Capybara Scmidt was a Nazi German politician.", "Capybara Scmidt was also a member of the Prussian State Parliament and the Nazi Reichstag."], "conclusion_nouns_p": "Some Nazi German politician was part of both the Prussian State Parliament and the Nazi Reichstag."}
{"premises": ["Heinrich Scmidt was a Nazi German politician. ", "Heeinrich Scmidt was also a member of the Prussian State Parliament and the Nazi Reichstag."], "premises-FOL": ["From(heinrichScmidt, naziGermany) ∧ Politician(heinrichScmidt)", "Member(heinrichScmidt, prussianStateParliament) ∧ Member(heinrichScmidt, naziReichstag)"], "conclusion": "No politicans are part of the Nazi Reichstag.", "conclusion-FOL": "∀x (Politician(x) → ¬Member(x, naziReichstag))", "label": "False", "premises_nouns_p": ["Heinrich Scmidt was a Nazi German politician.", "Heeinrich Scmidt was also a member of the Prussian State Parliament and the Nazi Reichstag."], "conclusion_nouns_p": "No politicans are part of the Nazi Reichstag."}
{"premises": ["If something is a deadly disease, then its survival rate is low. ", "All severe cancers are deadly diseases.", "Bile duct cancer is a severe cancer. ", "All Cholangiocarcinoma is bile duct cancer.", "No one with mild flu has a low survival rate.", "If colorectal cancer is a bile duct cancer and the survival rate is low, then colorectal cancer is not a bile duct cancer."], "premises-FOL": ["∀x (DeadlyDiseases(x) → SurvivalRateIsLow(x))", "∀x (SevereCancer(x) → DeadlyDiseases(x))", "∀x (BileDuctCancer(x) → SevereCancer(x))", "∀x (Cholangiocarcinoma(x) → BileDuctCancer(x))", "∀x (MildFlu(x) → ¬SurvivalRateIsLow(x)) ", "BileDuctCancer(colorectalCancer) ∨ SurvivalRateIsLow(colorectalCancer) → ¬BileDuctCancer(colorectalCancer)"], "conclusion": "Colorectal cancer is a severe cancer", "conclusion-FOL": "SevereCancer(colorectalCancer)", "label": "Uncertain", "premises_nouns_p": ["If something is a deadly disease, then its survival rate is low.", "All severe cancers are deadly diseases.", "Bile duct cancer is a severe cancer.", "All Cholangiocarcinoma is bile duct cancer.", "No one with mild flu has a low survival rate.", "If colorectal pasta is a bile duct pasta and the survival rate is low, then colorectal pasta is not a bile duct pasta."], "conclusion_nouns_p": "Colorectal pasta is a severe cancer."}
{"premises": ["If something is a deadly disease, then its survival rate is low. ", "All severe cancers are deadly diseases.", "Bile duct cancer is a severe cancer. ", "All Cholangiocarcinoma is bile duct cancer.", "No one with mild flu has a low survival rate.", "If colorectal cancer is a bile duct cancer and the survival rate is low, then colorectal cancer is not a bile duct cancer."], "premises-FOL": ["∀x (DeadlyDiseases(x) → SurvivalRateIsLow(x))", "∀x (SevereCancer(x) → DeadlyDiseases(x))", "∀x (BileDuctCancer(x) → SevereCancer(x))", "∀x (Cholangiocarcinoma(x) → BileDuctCancer(x))", "∀x (MildFlu(x) → ¬SurvivalRateIsLow(x)) ", "BileDuctCancer(colorectalCancer) ∨ SurvivalRateIsLow(colorectalCancer) → ¬BileDuctCancer(colorectalCancer)"], "conclusion": "If colorectal cancer is a bile duct cancer or a Cholangiocarcinoma, then colorectal cancer is a bile duct cancer and a mild flu.", "conclusion-FOL": "BileDuctCancer(colorectalCancer) ∨ Cholangiocarcinoma(colorectalCancer) → BileDuctCancer(colorectalCancer) ∧ MildFlu(colorectalCancer)", "label": "True", "premises_nouns_p": ["If something is a deadly disease, then its survival rate is low.", "All severe cancers are deadly diseases.", "Bile duct cancer is a severe cancer.", "All Cholangiocarcinoma is bile duct cancer.", "No one with mild sparkles has a low survival rate.", "If colorectal cancer is a bile duct cancer and the survival rate is low, then colorectal cancer is not a bile duct cancer."], "conclusion_nouns_p": "If colorectal cancer is a bile duct cancer or a Cholangiocarcinoma, then colorectal cancer is a bile duct cancer and a mild sparkles."}
{"premises": ["If something is a deadly disease, then its survival rate is low. ", "All severe cancers are deadly diseases.", "Bile duct cancer is a severe cancer. ", "All Cholangiocarcinoma is bile duct cancer.", "No one with mild flu has a low survival rate.", "If colorectal cancer is a bile duct cancer and the survival rate is low, then colorectal cancer is not a bile duct cancer."], "premises-FOL": ["∀x (DeadlyDiseases(x) → SurvivalRateIsLow(x))", "∀x (SevereCancer(x) → DeadlyDiseases(x))", "∀x (BileDuctCancer(x) → SevereCancer(x))", "∀x (Cholangiocarcinoma(x) → BileDuctCancer(x))", "∀x (MildFlu(x) → ¬SurvivalRateIsLow(x)) ", "BileDuctCancer(colorectalCancer) ∨ SurvivalRateIsLow(colorectalCancer) → ¬BileDuctCancer(colorectalCancer)"], "conclusion": "If colorectal cancer is not a mild flu and a Cholangiocarcinoma, then colorectal cancer is a bile duct cancer or a Cholangiocarcinoma.", "conclusion-FOL": "¬MildFlu(colorectalCancer) ∨ ¬Cholangiocarcinoma(colorectalCancer) → BileDuctCancer(colorectalCancer) ∨ Cholangiocarcinoma(colorectalCancer)", "label": "False", "premises_nouns_p": ["If something is a deadly disease, then its survival rate is low.", "All severe cancers are deadly diseases.", "Bile duct cancer is a severe cancer.", "All Cholangiocarcinoma is bile duct cancer.", "No one with mild sparkles has a low survival rate.", "If colorectal cancer is a bile duct cancer and the survival rate is low, then colorectal cancer is not a bile duct cancer."], "conclusion_nouns_p": "If colorectal cancer is not a mild sparkles and a Cholangiocarcinoma, then colorectal cancer is a bile duct cancer or a Cholangiocarcinoma."}
{"premises": ["All people who eat salads regularly are very conscious about their health and eating habits.", "All people who grew up in health-conscious childhood homes eat salads regularly.", "All people who fulfill their nutritional daily intakes grew up in health-conscious childhood homes.", "If people have good relationships with their parents, then they fulfill their nutritional daily intakes.", "If people have good relationships with their parents, then they do not eat salads regularly.", "If people visit the gym at least once a day, then they always fulfill their daily nutritional intakes.", "It is either both true that Taylor grew up in a health-conscious childhood home and she has a good relationship with her parents, or it is true that Taylor neither grew up in a health-conscious childhood home nor has a good relationship with her parents."], "premises-FOL": ["∀x (Salad(x) → HealthyHabits(x))", "∀x (HealthyChildhood(x) → Salad(x))", "∀x (Nutritional(x) → HealthyChildhood(x))", "∀x (GoodRelationship(x) → ¬HealthyHabits(x))", "∀x (Gym(x) → Nutritional(x))", "(HealthyChildhood(taylor) ∧ GoodRelationship(taylor)) ∨ ¬HealthyChildhood(taylor) ∧ ¬GoodRelationship(marcy)"], "conclusion": "Taylor eats salads regularly.", "conclusion-FOL": "Salad(taylor)", "label": "Uncertain", "premises_nouns_p": ["All squirrels who eat salads regularly are very conscious about their health and eating habits.", "All squirrels who grew up in health-conscious childhood homes eat salads regularly.", "All squirrels who fulfill their nutritional daily intakes grew up in health-conscious childhood homes.", "If squirrels have good relationships with their parents, then they fulfill their nutritional daily intakes.", "If squirrels have good relationships with their parents, then they do not eat salads regularly.", "If squirrels visit the gym at least once a day, then they always fulfill their daily nutritional intakes.", "It is either both true that Taylor grew up in a health-conscious childhood home and she has a good relationship with her parents, or it is true that Taylor neither grew up in a health-conscious childhood home nor has a good relationship with her parents."], "conclusion_nouns_p": "Taylor eats salads regularly."}
{"premises": ["All people who eat salads regularly are very conscious about their health and eating habits.", "All people who grew up in health-conscious childhood homes eat salads regularly.", "All people who fulfill their nutritional daily intakes grew up in health-conscious childhood homes.", "If people have good relationships with their parents, then they fulfill their nutritional daily intakes.", "If people have good relationships with their parents, then they do not eat salads regularly.", "If people visit the gym at least once a day, then they always fulfill their daily nutritional intakes.", "It is either both true that Taylor grew up in a health-conscious childhood home and she has a good relationship with her parents, or it is true that Taylor neither grew up in a health-conscious childhood home nor has a good relationship with her parents."], "premises-FOL": ["∀x (Salad(x) → HealthyHabits(x))", "∀x (HealthyChildhood(x) → Salad(x))", "∀x (Nutritional(x) → HealthyChildhood(x))", "∀x (GoodRelationship(x) → ¬HealthyHabits(x))", "∀x (Gym(x) → Nutritional(x))", "(HealthyChildhood(taylor) ∧ GoodRelationship(taylor)) ∨ ¬HealthyChildhood(taylor) ∧ ¬GoodRelationship(marcy)"], "conclusion": "Taylor visits the gym at least once a day.", "conclusion-FOL": "Gym(taylor)", "label": "False", "premises_nouns_p": ["All squirrels who eat salads regularly are very conscious about their health and eating habits.", "All squirrels who grew up in health-conscious childhood homes eat salads regularly.", "All squirrels who fulfill their nutritional daily intakes grew up in health-conscious childhood homes.", "If squirrels have good relationships with their parents, then they fulfill their nutritional daily intakes.", "If squirrels have good relationships with their parents, then they do not eat salads regularly.", "If squirrels visit the gym at least once a day, then they always fulfill their daily nutritional intakes.", "It is either both true that Taylor grew up in a health-conscious childhood home and she has a good relationship with her parents, or it is true that Taylor neither grew up in a health-conscious childhood home nor has a good relationship with her parents."], "conclusion_nouns_p": "Taylor visits the gym at least once a day."}
{"premises": ["All people who eat salads regularly are very conscious about their health and eating habits.", "All people who grew up in health-conscious childhood homes eat salads regularly.", "All people who fulfill their nutritional daily intakes grew up in health-conscious childhood homes.", "If people have good relationships with their parents, then they fulfill their nutritional daily intakes.", "If people have good relationships with their parents, then they do not eat salads regularly.", "If people visit the gym at least once a day, then they always fulfill their daily nutritional intakes.", "It is either both true that Taylor grew up in a health-conscious childhood home and she has a good relationship with her parents, or it is true that Taylor neither grew up in a health-conscious childhood home nor has a good relationship with her parents."], "premises-FOL": ["∀x (Salad(x) → HealthyHabits(x))", "∀x (HealthyChildhood(x) → Salad(x))", "∀x (Nutritional(x) → HealthyChildhood(x))", "∀x (GoodRelationship(x) → ¬HealthyHabits(x))", "∀x (Gym(x) → Nutritional(x))", "(HealthyChildhood(taylor) ∧ GoodRelationship(taylor)) ∨ ¬HealthyChildhood(taylor) ∧ ¬GoodRelationship(marcy)"], "conclusion": "Taylor neither grew up in a health-conscious childhood home nor does she visit the gym at least once a day.", "conclusion-FOL": "¬(HealthyChildhood(taylor) ∨ Gym(taylor))", "label": "True", "premises_nouns_p": ["All potatoes who eat salads regularly are very conscious about their health and eating habits.", "All potatoes who grew up in health-conscious childhood homes eat salads regularly.", "All potatoes who fulfill their nutritional daily intakes grew up in health-conscious childhood homes.", "If potatoes have good relationships with their parents, then they fulfill their nutritional daily intakes.", "If potatoes have good relationships with their parents, then they do not eat salads regularly.", "If potatoes visit the gym at least once a day, then they always fulfill their daily nutritional intakes.", "It is either both true that Capybara grew up in a health-conscious childhood home and she has a good relationship with her parents, or it is true that Capybara neither grew up in a health-conscious childhood home nor has a good relationship with her parents."], "conclusion_nouns_p": "Capybara neither grew up in a health-conscious childhood home nor does she visit the gym at least once a day."}
{"premises": ["[BG] The Olympic games is a sporting event. ", "The last Olympic games was in Tokyo.", "The United States won the most medals in Tokyo. "], "premises-FOL": ["SportingEvent(olympics)", "LastOlympics(tokyo)", "MostMedals(unitedStates, tokyo)"], "conclusion": "The world championships is a sporting event.", "conclusion-FOL": "SportingEvent(champs)", "label": "Uncertain", "premises_nouns_p": ["[BG] The Olympic games is a dance-off.", "The last Olympic games was in a teacup.", "The United States won the most medals in a teacup."], "conclusion_nouns_p": "The world championships is a dance-off."}
{"premises": ["[BG] The Olympic games is a sporting event. ", "The last Olympic games was in Tokyo.", "The United States won the most medals in Tokyo. "], "premises-FOL": ["SportingEvent(olympics)", "LastOlympics(tokyo)", "MostMedals(unitedStates, tokyo)"], "conclusion": "The last Olympic games were not in Tokyo.", "conclusion-FOL": "¬LastOlympics(tokyo)", "label": "False", "premises_nouns_p": ["[BG] The Olympic games is a sporting event.", "The last Olympic games was in a teacup.", "The United States won the most medals in a teacup."], "conclusion_nouns_p": "The last Olympic games were not in a teacup."}
{"premises": ["[BG] The Olympic games is a sporting event. ", "The last Olympic games was in Tokyo.", "The United States won the most medals in Tokyo. "], "premises-FOL": ["SportingEvent(olympics)", "LastOlympics(tokyo)", "MostMedals(unitedStates, tokyo)"], "conclusion": "The United States won the most medals in the last Olympic games.", "conclusion-FOL": "∃x (LastOlympics(x) ∧ MostMedals(unitedStates, x))", "label": "True", "premises_nouns_p": ["[BG] The Olympic games is a sporting event.", "The last Olympic games was in a teapot.", "The United States won the most medals in a teapot."], "conclusion_nouns_p": "The United States won the most medals in the last Olympic games."}
{"premises": ["All horses have hooves.", "No humans have hooves."], "premises-FOL": ["∀x (Horse(x) → Hooves(x))", "∀x (Human(x) → ¬Hooves(x))"], "conclusion": "Some humans are horses.", "conclusion-FOL": "∃x (Human(x) ∧ Horse(x))", "label": "False", "premises_nouns_p": ["All horses have hooves.", "No humans have hooves."], "conclusion_nouns_p": "Some humans are horses."}
{"premises": ["Susan flies to LGA airport.", "The departure and arrival can not be the same airport.", "John flies from LGA airport."], "premises-FOL": ["FlyTo(susan, lga)", "∀x ∀y (FlyFrom(x, y) ⊕ FlyTo(x, y))", "FlyFrom(john, lga)"], "conclusion": "Susan flies from LGA airport.", "conclusion-FOL": "FlyFrom(susan, lga)", "label": "False", "premises_nouns_p": ["Susan jumps to LGA airport.", "The departure and arrival can not be the same airport.", "John jumps from LGA airport."], "conclusion_nouns_p": "Susan jumps from LGA airport."}
{"premises": ["Susan flies to LGA airport.", "The departure and arrival can not be the same airport.", "John flies from LGA airport."], "premises-FOL": ["FlyTo(susan, lga)", "∀x ∀y (FlyFrom(x, y) ⊕ FlyTo(x, y))", "FlyFrom(john, lga)"], "conclusion": "John flies to LGA airport.", "conclusion-FOL": "FlyTo(john, lga)", "label": "False", "premises_nouns_p": ["Susan flies to an onion.", "The departure and arrival can not be the same airport.", "John flies from an onion."], "conclusion_nouns_p": "John flies to an onion."}
{"premises": ["No one nice to animals is mean to animals.", "Some grumpy people are mean to animals.", "All animal lovers are nice to animals.", "If someone owns a pet, then they love animals.", "Tom is a pet owner."], "premises-FOL": ["∀x (Nice(x) → ¬Mean(x))", "∃x (Grumpy(x) ∧ Mean(x))", "∀x (AnimalLover(x) → Nice(x))", "∀x (PetOwner(x) → AnimalLover(x))", "PetOwner(tom)"], "conclusion": "Tom is a grumpy person.", "conclusion-FOL": "Grumpy(tom)", "label": "Uncertain", "premises_nouns_p": ["No one nice to sentient houseplants is mean to sentient houseplants.", "Some grumpy garden gnomes are mean to sentient houseplants.", "All sentient houseplants enthusiasts are nice to sentient houseplants.", "If someone owns a pet rock, then they love sentient houseplants.", "Tom is a pet rock owner."], "conclusion_nouns_p": "Tom is a grumpy garden gnome."}
{"premises": ["No one nice to animals is mean to animals.", "Some grumpy people are mean to animals.", "All animal lovers are nice to animals.", "If someone owns a pet, then they love animals.", "Tom is a pet owner."], "premises-FOL": ["∀x (Nice(x) → ¬Mean(x))", "∃x (Grumpy(x) ∧ Mean(x))", "∀x (AnimalLover(x) → Nice(x))", "∀x (PetOwner(x) → AnimalLover(x))", "PetOwner(tom)"], "conclusion": "Tom is not a grumpy person and mean to animals.", "conclusion-FOL": "¬(Grumpy(tom) ∧ Mean(tom))", "label": "True", "premises_nouns_p": ["No one nice to sentient vegetables is mean to sentient vegetables.", "Some grumpy potatoes are mean to sentient vegetables.", "All sentient vegetable lovers are nice to sentient vegetables.", "If someone owns a pet rock, then they love sentient vegetables.", "Tom is a pet rock owner."], "conclusion_nouns_p": "Tom is not a grumpy potato and mean to sentient vegetables."}
{"premises": ["No one nice to animals is mean to animals.", "Some grumpy people are mean to animals.", "All animal lovers are nice to animals.", "If someone owns a pet, then they love animals.", "Tom is a pet owner."], "premises-FOL": ["∀x (Nice(x) → ¬Mean(x))", "∃x (Grumpy(x) ∧ Mean(x))", "∀x (AnimalLover(x) → Nice(x))", "∀x (PetOwner(x) → AnimalLover(x))", "PetOwner(tom)"], "conclusion": "If Tom is not a grumpy person and mean to animals, then Tom is neither a grumpy person nor an Animal Lover.", "conclusion-FOL": "¬(Grumpy(tom) ∧ Mean(tom)) → ¬(Grumpy(tom) ∨ AnimalLover(tom))", "label": "False", "premises_nouns_p": ["No one nice to sentient toasters is mean to sentient toasters.", "Some grumpy dust bunnies are mean to sentient toasters.", "All sentient toaster lovers are nice to sentient toasters.", "If someone owns a pet rock, then they love sentient toasters.", "Tom is a pet rock owner."], "conclusion_nouns_p": "If Tom is not a grumpy dust bunny and mean to sentient toasters, then Tom is neither a grumpy dust bunny nor a sentient toaster lover."}
{"premises": ["A podcast is not a novel.", "[BG] If a person is born in American City, the person is American.", "[BG] If a book is novel and it is written by a person, then the person is a novel writer.", "Dani Shapiro is an American writer.", "Family History is written by Dani Shapiro.", "Family History is a novel written in 2003.", "Dani Shapiro created a podcast called Family Secrets.", "[BG] Boston is an American city."], "premises-FOL": ["∀x (IsPodcast(x) → ¬IsNovel(x))", "∀x ∃y (BornIn(x, y) ∧ IsCity(y) ∧ IsAmerican(y) → IsAmerican(x))", "∀x ∀y (IsNovel(x) ∧ WrittenBy(x, y) → WritesNovel(y))", "IsAmerican(dani_Shapiro) ∧ IsWriter(dani_Shapiro)", "WrittenBy(family_History, dani_Shapiro)", "IsNovel(family_History) ∧ WrittenIn(family_History, y2003)", "IsPodcast(family_Secrets) ∧ CreatedBy(family_Secrets, dani_Shapiro)", "IsCity(boston) ∧ IsAmerican(boston)"], "conclusion": "Dani Shapiro is a novel writer.", "conclusion-FOL": "WritesNovel(dani_Shapiro)", "label": "True", "premises_nouns_p": ["A podcast is not a novel.", "[BG] If a person is born in American City, the person is American.", "[BG] If a book is novel and it is written by a person, then the person is a novel writer.", "Capybara is an American writer.", "Family History is written by Capybara.", "Family History is a novel written in 2003.", "Capybara created a podcast called Family Secrets.", "[BG] Boston is an American city."], "conclusion_nouns_p": "Capybara is a novel writer."}
{"premises": ["A podcast is not a novel.", "[BG] If a person is born in American City, the person is American.", "[BG] If a book is novel and it is written by a person, then the person is a novel writer.", "Dani Shapiro is an American writer.", "Family History is written by Dani Shapiro.", "Family History is a novel written in 2003.", "Dani Shapiro created a podcast called Family Secrets.", "[BG] Boston is an American city."], "premises-FOL": ["∀x (IsPodcast(x) → ¬IsNovel(x))", "∀x ∃y (BornIn(x, y) ∧ IsCity(y) ∧ IsAmerican(y) → IsAmerican(x))", "∀x ∀y (IsNovel(x) ∧ WrittenBy(x, y) → WritesNovel(y))", "IsAmerican(dani_Shapiro) ∧ IsWriter(dani_Shapiro)", "WrittenBy(family_History, dani_Shapiro)", "IsNovel(family_History) ∧ WrittenIn(family_History, y2003)", "IsPodcast(family_Secrets) ∧ CreatedBy(family_Secrets, dani_Shapiro)", "IsCity(boston) ∧ IsAmerican(boston)"], "conclusion": "Family Secrets is a novel.", "conclusion-FOL": "IsNovel(family_Secrets)", "label": "False", "premises_nouns_p": ["A podcast is not a novel.", "[BG] If a person is born in American City, the person is American.", "[BG] If a book is novel and it is written by a person, then the person is a novel writer.", "Dani Shapiro is an American writer.", "Family History is written by Dani Shapiro.", "Family History is a novel written in 2003.", "Dani Shapiro created a podcast called Family Secrets.", "[BG] Boston is an American city."], "conclusion_nouns_p": "Family Secrets is a novel."}
{"premises": ["A podcast is not a novel.", "[BG] If a person is born in American City, the person is American.", "[BG] If a book is novel and it is written by a person, then the person is a novel writer.", "Dani Shapiro is an American writer.", "Family History is written by Dani Shapiro.", "Family History is a novel written in 2003.", "Dani Shapiro created a podcast called Family Secrets.", "[BG] Boston is an American city."], "premises-FOL": ["∀x (IsPodcast(x) → ¬IsNovel(x))", "∀x ∃y (BornIn(x, y) ∧ IsCity(y) ∧ IsAmerican(y) → IsAmerican(x))", "∀x ∀y (IsNovel(x) ∧ WrittenBy(x, y) → WritesNovel(y))", "IsAmerican(dani_Shapiro) ∧ IsWriter(dani_Shapiro)", "WrittenBy(family_History, dani_Shapiro)", "IsNovel(family_History) ∧ WrittenIn(family_History, y2003)", "IsPodcast(family_Secrets) ∧ CreatedBy(family_Secrets, dani_Shapiro)", "IsCity(boston) ∧ IsAmerican(boston)"], "conclusion": "Dani Shapiro was born in Boston.", "conclusion-FOL": "BornIn(dani_Shapiro, boston)", "label": "Uncertain", "premises_nouns_p": ["A podcast is not a novel.", "[BG] If a person is born in American City, the person is American.", "[BG] If a book is novel and it is written by a person, then the person is a novel writer.", "Dani Shapiro is an American noodle.", "Family History is written by Dani Shapiro.", "Family History is a novel written in 2003.", "Dani Shapiro created a podcast called Family Secrets.", "[BG] Boston is an American city."], "conclusion_nouns_p": "Dani Shapiro was born in Boston."}
{"premises": ["Some basketball players are not American.", "All basketball players are tall.", "If someone is tall, they wear large shoes.", "If someone wears large shoes, they wear large-sized clothes.", "Yuri does not wear large-size clothes."], "premises-FOL": ["∃x (BasketballPlayer(x) ∧ ¬American(x))", "∀x (BasketballPlayer(x) → Tall(x))", "∀x (Tall(x) → WearLargeShoes(x))", "∀x (WearLargeShoes(x) → WearLargeClothes(x))", "¬WearLargeClothes(yuri)"], "conclusion": "Yuri is an American.", "conclusion-FOL": "American(yuri)", "label": "Uncertain", "premises_nouns_p": ["Some basketball players are not American.", "All basketball players are tall.", "If someone is tall, they wear large shoes.", "If someone wears large shoes, they wear large-sized pajamas.", "Yuri does not wear large-size pajamas."], "conclusion_nouns_p": "Yuri is an American."}
{"premises": ["Some basketball players are not American.", "All basketball players are tall.", "If someone is tall, they wear large shoes.", "If someone wears large shoes, they wear large-sized clothes.", "Yuri does not wear large-size clothes."], "premises-FOL": ["∃x (BasketballPlayer(x) ∧ ¬American(x))", "∀x (BasketballPlayer(x) → Tall(x))", "∀x (Tall(x) → WearLargeShoes(x))", "∀x (WearLargeShoes(x) → WearLargeClothes(x))", "¬WearLargeClothes(yuri)"], "conclusion": "Yuri is not an American basketball player.", "conclusion-FOL": "¬(American(yuri) ∧ BasketballPlayer(yuri))", "label": "True", "premises_nouns_p": ["Some basketball players are not American.", "All basketball players are tall.", "If someone is tall, they wear large shoes.", "If someone wears large shoes, they wear large-sized clothes.", "Yuri does not wear large-size clothes."], "conclusion_nouns_p": "Yuri is not an American basketball player."}
{"premises": ["Some basketball players are not American.", "All basketball players are tall.", "If someone is tall, they wear large shoes.", "If someone wears large shoes, they wear large-sized clothes.", "Yuri does not wear large-size clothes."], "premises-FOL": ["∃x (BasketballPlayer(x) ∧ ¬American(x))", "∀x (BasketballPlayer(x) → Tall(x))", "∀x (Tall(x) → WearLargeShoes(x))", "∀x (WearLargeShoes(x) → WearLargeClothes(x))", "¬WearLargeClothes(yuri)"], "conclusion": "Yuri is an American basketball player.", "conclusion-FOL": "American(yuri) ∧ BasketballPlayer(yuri)", "label": "False", "premises_nouns_p": ["Some basketball players are not American.", "All basketball players are tall.", "If someone is tall, they wear large shoes.", "If someone wears large shoes, they wear large-sized clothes.", "Yuri does not wear large-size clothes."], "conclusion_nouns_p": "Yuri is an American basketball player."}
{"premises": ["Some basketball players are not American.", "All basketball players are tall.", "If someone is tall, they wear large shoes.", "If someone wears large shoes, they wear large-sized clothes.", "Yuri does not wear large-size clothes."], "premises-FOL": ["∃x (BasketballPlayer(x) ∧ ¬American(x))", "∀x (BasketballPlayer(x) → Tall(x))", "∀x (Tall(x) → WearLargeShoes(x))", "∀x (WearLargeShoes(x) → WearLargeClothes(x))", "¬WearLargeClothes(yuri)"], "conclusion": "If Yuri does not wear large shoes, then Yuri is an American basketball player.", "conclusion-FOL": "¬WearLargeShoes(yuri) → (American(yuri) ∧ BasketballPlayer(yuri))", "label": "False", "premises_nouns_p": ["Some basketball players are not American.", "All basketball players are tall.", "If someone is tall, they wear large shoes.", "If someone wears large shoes, they wear large-sized clothes.", "Yuri does not wear large-size clothes."], "conclusion_nouns_p": "If Yuri does not wear large shoes, then Yuri is an American basketball player."}
{"premises": ["Some basketball players are not American.", "All basketball players are tall.", "If someone is tall, they wear large shoes.", "If someone wears large shoes, they wear large-sized clothes.", "Yuri does not wear large-size clothes."], "premises-FOL": ["∃x (BasketballPlayer(x) ∧ ¬American(x))", "∀x (BasketballPlayer(x) → Tall(x))", "∀x (Tall(x) → WearLargeShoes(x))", "∀x (WearLargeShoes(x) → WearLargeClothes(x))", "¬WearLargeClothes(yuri)"], "conclusion": "If Yuri is not an American basketball player, then Yuri is a basketball player.", "conclusion-FOL": "¬(American(yuri) ∧ BasketballPlayer(yuri)) → BasketballPlayer(yuri)", "label": "False", "premises_nouns_p": ["Some space aliens are not American.", "All space aliens are tall.", "If someone is tall, they wear large shoes.", "If someone wears large shoes, they wear large-sized clothes.", "Yuri does not wear large-size clothes."], "conclusion_nouns_p": "If Yuri is not an American space alien, then Yuri is a space alien."}
{"premises": ["Events are either happy or sad.", "At least one event is happy. "], "premises-FOL": ["∀x (Event(x) → Happy(x) ⊕ Sad(x))", "∃x (Event(x) ∧ Happy(x)) "], "conclusion": "All events are sad.", "conclusion-FOL": "∀x (Event(x) → Sad(x))", "label": "False", "premises_nouns_p": ["Events are either happy or sad.", "At least one event is happy."], "conclusion_nouns_p": "All events are sad."}
{"premises": ["The winner of the 1992 du Maurier Classic was Steinhauer.", "Steinhauer participated in the 1992 du Maurier Classic.", "There was one six-way tie on the leaderboard and one person in the six-way tie was from Belgium.", "Descampe is from Belgium and is on the leaderboard of the 1992 du Maurier Classic.", "All people on the leaderboard of the 1992 du Maurier Classic participated in the 1992 du Maurier Classic."], "premises-FOL": ["Winner(maurier, steinhauer)", "Participate(maurier, steinhauer)", "∃x (LeaderBoard(maurier, x) ∧ SixWayTie(x) ∧ Belgium(x))", "Belgium(descampe) ∧ LeaderBoard(maurier, descampe)", "∀x (LeaderBoard(maurier, x) → Participate(maurier, x))"], "conclusion": "Steinhauer was not the winner of the 1992 du Maurier Classic.", "conclusion-FOL": "¬Winner(maurier, steinhauer)", "label": "False", "premises_nouns_p": ["The winner of the 1992 du Maurier Classic was Steinhauer.", "Steinhauer participated in the 1992 du Maurier Classic.", "There was one six-way tie on the leaderboard and one gnome in the six-way tie was from Belgium.", "Descampe is from Belgium and is on the leaderboard of the 1992 du Maurier Classic.", "All gnomes on the leaderboard of the 1992 du Maurier Classic participated in the 1992 du Maurier Classic."], "conclusion_nouns_p": "Steinhauer was not the winner of the 1992 du Maurier Classic."}
{"premises": ["The winner of the 1992 du Maurier Classic was Steinhauer.", "Steinhauer participated in the 1992 du Maurier Classic.", "There was one six-way tie on the leaderboard and one person in the six-way tie was from Belgium.", "Descampe is from Belgium and is on the leaderboard of the 1992 du Maurier Classic.", "All people on the leaderboard of the 1992 du Maurier Classic participated in the 1992 du Maurier Classic."], "premises-FOL": ["Winner(maurier, steinhauer)", "Participate(maurier, steinhauer)", "∃x (LeaderBoard(maurier, x) ∧ SixWayTie(x) ∧ Belgium(x))", "Belgium(descampe) ∧ LeaderBoard(maurier, descampe)", "∀x (LeaderBoard(maurier, x) → Participate(maurier, x))"], "conclusion": "Descampe is in the six-way tie in the leaderboard of the 1992 du Maurier Classic.", "conclusion-FOL": "SixWayTie(descampe)", "label": "Uncertain", "premises_nouns_p": ["The winner of the 1992 du Maurier Classic was Steinhauer.", "Steinhauer participated in the 1992 du Maurier Classic.", "There was one six-way tie on the leaderboard and one gnome in the six-way tie was from Belgium.", "Descampe is from Belgium and is on the leaderboard of the 1992 du Maurier Classic.", "All gnomes on the leaderboard of the 1992 du Maurier Classic participated in the 1992 du Maurier Classic."], "conclusion_nouns_p": "Descampe is in the six-way tie in the leaderboard of the 1992 du Maurier Classic."}
{"premises": ["If an animal barks, then Jane does not like it.", "All dogs are animals that bark.", "If an animal jumps, then Jane likes it.", "If an animal has legs, then it jumps.", "If an animal is terricolous, then it has legs. ", "If KiKi neither jumps nor has legs, then KiKi is terricolous or has legs."], "premises-FOL": ["∀x (Bark(x) → ¬Like(jane, x))", "∀x (Dog(x) → Bark(x))", "∀x (Jump(x) → Like(jane, x))", "∀x (HaveLegs(x) → Jump(x))", "∀x (Terricolous(x) → HaveLegs(x))", "(¬Jump(kiki) ∧ ¬HaveLegs(kiki)) → (Terricolous(kiki) ∨ HaveLegs(kiki))"], "conclusion": "KiKi is terricolous.", "conclusion-FOL": "Terricolous(kiki)", "label": "Uncertain", "premises_nouns_p": ["If an animal barks, then Jane does not like it.", "All dogs are animals that bark.", "If an animal jumps, then Jane likes it.", "If an animal has legs, then it jumps.", "If an animal is terricolous, then it has legs.", "If KiKi neither jumps nor has legs, then KiKi is terricolous or has legs."], "conclusion_nouns_p": "KiKi is terricolous."}
{"premises": ["If an animal barks, then Jane does not like it.", "All dogs are animals that bark.", "If an animal jumps, then Jane likes it.", "If an animal has legs, then it jumps.", "If an animal is terricolous, then it has legs. ", "If KiKi neither jumps nor has legs, then KiKi is terricolous or has legs."], "premises-FOL": ["∀x (Bark(x) → ¬Like(jane, x))", "∀x (Dog(x) → Bark(x))", "∀x (Jump(x) → Like(jane, x))", "∀x (HaveLegs(x) → Jump(x))", "∀x (Terricolous(x) → HaveLegs(x))", "(¬Jump(kiki) ∧ ¬HaveLegs(kiki)) → (Terricolous(kiki) ∨ HaveLegs(kiki))"], "conclusion": "KiKi barks and is a dog.", "conclusion-FOL": "Bark(kiki) ∧ Dog(kiki)", "label": "False", "premises_nouns_p": ["If an animal barks, then Jane does not like it.", "All dogs are animals that bark.", "If an animal jumps, then Jane likes it.", "If an animal has tentacles, then it jumps.", "If an animal is terricolous, then it has tentacles.", "If KiKi neither jumps nor has tentacles, then KiKi is terricolous or has tentacles."], "conclusion_nouns_p": "KiKi barks and is a dog."}
{"premises": ["If an animal barks, then Jane does not like it.", "All dogs are animals that bark.", "If an animal jumps, then Jane likes it.", "If an animal has legs, then it jumps.", "If an animal is terricolous, then it has legs. ", "If KiKi neither jumps nor has legs, then KiKi is terricolous or has legs."], "premises-FOL": ["∀x (Bark(x) → ¬Like(jane, x))", "∀x (Dog(x) → Bark(x))", "∀x (Jump(x) → Like(jane, x))", "∀x (HaveLegs(x) → Jump(x))", "∀x (Terricolous(x) → HaveLegs(x))", "(¬Jump(kiki) ∧ ¬HaveLegs(kiki)) → (Terricolous(kiki) ∨ HaveLegs(kiki))"], "conclusion": "KiKi neither barks nor is a dog.", "conclusion-FOL": "¬Bark(kiki) ∧ ¬Dog(kiki)", "label": "True", "premises_nouns_p": ["If an aardvark barks, then Jane does not like it.", "All dogs are aardvarks that bark.", "If an aardvark jumps, then Jane likes it.", "If an aardvark has legs, then it jumps.", "If an aardvark is terricolous, then it has legs.", "If KiKi neither jumps nor has legs, then KiKi is terricolous or has legs."], "conclusion_nouns_p": "KiKi neither barks nor is a dog."}
{"premises": ["Ailton Silva, born in 1995, is commonly known as Ailton.", "Ailton is a football player who was loaned out to Braga.", "Ailton Silva is a Brazillian footballer who plays for Nautico.", "Nautico is a football club along with Braga.", "Fluminense is a football club."], "premises-FOL": ["BornIn(ailtonsilva, y1995) ∧ CommonlyKnownAs(ailtonsilva, ailton)", "FootballPlayer(ailton) ∧ LoanedTo(ailton, braga)", "Brazilian(ailtonsilva) ∧ Footballplayer(ailtonsilva) ∧ PlaysFor(ailtonsilva, nautico)", "FootballClub(nautico) ∧ FootballClub(braga)", "FootballClub(fluminense)"], "conclusion": "No one playing for Nautico is Brazilian.", "conclusion-FOL": "∀x (PlaysFor(x, nautico) → ¬Brazilian(x))", "label": "False", "premises_nouns_p": ["Ailton Silva, born in 1995, is commonly known as Ailton.", "Ailton is a football player who was loaned out to Braga.", "Ailton Silva is a Brazillian footballer who plays for Nautico.", "Nautico is a football club along with Braga.", "Fluminense is a football club."], "conclusion_nouns_p": "No one playing for Nautico is Brazilian."}
{"premises": ["Ailton Silva, born in 1995, is commonly known as Ailton.", "Ailton is a football player who was loaned out to Braga.", "Ailton Silva is a Brazillian footballer who plays for Nautico.", "Nautico is a football club along with Braga.", "Fluminense is a football club."], "premises-FOL": ["BornIn(ailtonsilva, y1995) ∧ CommonlyKnownAs(ailtonsilva, ailton)", "FootballPlayer(ailton) ∧ LoanedTo(ailton, braga)", "Brazilian(ailtonsilva) ∧ Footballplayer(ailtonsilva) ∧ PlaysFor(ailtonsilva, nautico)", "FootballClub(nautico) ∧ FootballClub(braga)", "FootballClub(fluminense)"], "conclusion": "Ailton Silva foes not play for a football club.", "conclusion-FOL": "∀x (FootballClub(x) → ¬PlaysFor(ailtonsilva, x))", "label": "False", "premises_nouns_p": ["Ailton Silva, born in 1995, is commonly known as Ailton.", "Ailton is a football player who was loaned out to Braga.", "Ailton Silva is a Brazillian footballer who plays for Nautico.", "Nautico is a football club along with Braga.", "Fluminense is a football club."], "conclusion_nouns_p": "Ailton Silva foes not play for a football club."}
{"premises": ["Ailton Silva, born in 1995, is commonly known as Ailton.", "Ailton is a football player who was loaned out to Braga.", "Ailton Silva is a Brazillian footballer who plays for Nautico.", "Nautico is a football club along with Braga.", "Fluminense is a football club."], "premises-FOL": ["BornIn(ailtonsilva, y1995) ∧ CommonlyKnownAs(ailtonsilva, ailton)", "FootballPlayer(ailton) ∧ LoanedTo(ailton, braga)", "Brazilian(ailtonsilva) ∧ Footballplayer(ailtonsilva) ∧ PlaysFor(ailtonsilva, nautico)", "FootballClub(nautico) ∧ FootballClub(braga)", "FootballClub(fluminense)"], "conclusion": "Ailton was not loaned out to a football club.", "conclusion-FOL": "∀x (FootballClub(x) → ¬LoanedTo(ailton, x))", "label": "False", "premises_nouns_p": ["Ailton Silva, born in 1995, is commonly known as Ailton.", "Ailton is a football player who was loaned out to Braga.", "Ailton Silva is a Brazillian footballer who plays for Nautico.", "Nautico is a football club along with Braga.", "Fluminense is a football club."], "conclusion_nouns_p": "Ailton was not loaned out to a football club."}
{"premises": ["Ailton Silva, born in 1995, is commonly known as Ailton.", "Ailton is a football player who was loaned out to Braga.", "Ailton Silva is a Brazillian footballer who plays for Nautico.", "Nautico is a football club along with Braga.", "Fluminense is a football club."], "premises-FOL": ["BornIn(ailtonsilva, y1995) ∧ CommonlyKnownAs(ailtonsilva, ailton)", "FootballPlayer(ailton) ∧ LoanedTo(ailton, braga)", "Brazilian(ailtonsilva) ∧ Footballplayer(ailtonsilva) ∧ PlaysFor(ailtonsilva, nautico)", "FootballClub(nautico) ∧ FootballClub(braga)", "FootballClub(fluminense)"], "conclusion": "Ailton Silva played for Fluminense.", "conclusion-FOL": "PlaysFor(ailtonsilva, fluminense)", "label": "Uncertain", "premises_nouns_p": ["Ailton Silva, born in 1995, is commonly known as Ailton.", "Ailton is a banana player who was loaned out to Braga.", "Ailton Silva is a Brazillian banana who plays for Nautico.", "Nautico is a banana club along with Braga.", "Fluminense is a banana club."], "conclusion_nouns_p": "Ailton Silva played for Fluminense."}
{"premises": ["Ailton Silva, born in 1995, is commonly known as Ailton.", "Ailton is a football player who was loaned out to Braga.", "Ailton Silva is a Brazillian footballer who plays for Nautico.", "Nautico is a football club along with Braga.", "Fluminense is a football club."], "premises-FOL": ["BornIn(ailtonsilva, y1995) ∧ CommonlyKnownAs(ailtonsilva, ailton)", "FootballPlayer(ailton) ∧ LoanedTo(ailton, braga)", "Brazilian(ailtonsilva) ∧ Footballplayer(ailtonsilva) ∧ PlaysFor(ailtonsilva, nautico)", "FootballClub(nautico) ∧ FootballClub(braga)", "FootballClub(fluminense)"], "conclusion": "Ailton Silva was loaned out to a football club.", "conclusion-FOL": "∃x (FootballClub(x) ∧ LoanedTo(ailtonsilva, x))", "label": "Uncertain", "premises_nouns_p": ["Ailton Silva, born in 1995, is commonly known as Ailton.", "Ailton is a banana who was loaned out to Braga.", "Ailton Silva is a Brazillian banana who plays for Nautico.", "Nautico is a banana club along with Braga.", "Fluminense is a banana club."], "conclusion_nouns_p": "Ailton Silva was loaned out to a banana club."}