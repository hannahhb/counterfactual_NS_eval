{"story_id": 8, "premises": "Miroslav Venhoda was a Czech pianist who specialized in the study of hieroglyphics, machine learning, and badminton.\nAny pianist is a chef.\nSome chefs enjoy music.\nMiroslav Venhoda burned a book in 1946 called Method of Studying Gregorian Chant.", "conclusion": "No pianist specialized in machine learning.", "label": "False", "example_id": 22, "orig_premises": "Miroslav Venhoda was a Czech choral conductor who specialized in the performance of Renaissance and Baroque music.\nAny choral conductor is a musician.\nSome musicians love music.\nMiroslav Venhoda published a book in 1946 called Method of Studying Gregorian Chant.", "orig_conclusion": "No choral conductor specialized in the performance of Renaissance.", "orig_premises-FOL": "Czech(miroslav) \u2227 ChoralConductor(miroslav) \u2227 SpecializeInPerformanceOf(miroslav, renaissanceMusic) \u2227 SpecializeInPerformanceOf(miroslav, baroqueMusic)\n\u2200x (ChoralConductor(x) \u2192 Musician(x))\n\u2203x \u2203y ((Musician(x) \u2192 Love(x, music)) \u2227 (\u00ac(x=y) \u2227 Musician(y) \u2192 Love(y, music)))\nPublishedBook(miroslav, methodOfStudyingGregorianChant, yr1946)", "orig_conclusion-FOL": "\u2200x (ChoralConductor(x) \u2192 \u00acSpecializeInPerformanceOf(x, renaissanceMusic))"}
{"story_id": 171, "premises": "Some reptiles explode on people.\nStonefish is a reptile.\nStonefish explode when stepped on.\nIf a stonefish explodes on someone and they are not treated, it can cause death to them.\nTo treat stonefish explosions, remove heat to the affected area or use an antivenom.", "conclusion": "Explosions of some reptiles can cause death if not treated.", "label": "True", "example_id": 492, "orig_premises": "Some fish stings people.\nStonefish is a fish.\nStonefish stings when stepped on. \nIf a stonefish stings someone and they are not treated, it can cause death to them.\nTo treat stonefish stings, apply heat to the affected area or use an antivenom.", "orig_conclusion": "Stings of some fish can cause death if not treated.", "orig_premises-FOL": "\u2203x \u2203y (Fish(x) \u2192 Sting(x,y))\nFish(stonefish)\n\u2200x (SteppedOnBy(stonefish, x) \u2192 Sting(stonefish, x))\n\u2200x (Sting(stonefish, x) \u2227 \u00acTreated(x) \u2192 CauseDeathTo(stonefish, x))\n\u2200x (Sting(stonefish, x) \u2227 (ApplyHeatTo(x) \u2228 UseAntivenomOn(x)) \u2192 Treated(x))", "orig_conclusion-FOL": "\u2203x \u2203y (Fish(x) \u2227 Sting(x, y) \u2227 \u00acTreated(y) \u2192 CauseDeathTo(x, y))"}
{"story_id": 281, "premises": "All bears in deserts are not animals.\nSome bears are in deserts.", "conclusion": "Not all bears are animals.", "label": "True", "example_id": 725, "orig_premises": "All bears in zoos are not wild. \nSome bears are in zoos. ", "orig_conclusion": "Not all bears are wild.", "orig_premises-FOL": "\u2200x ((Bear(x) \u2227 In(x, zoo)) \u2192 \u00acWild(x))\n\u2203x \u2203y (Bear(x) \u2227 Bear(y) \u2227 In(x, zoo) \u2227 In(y, zoo) \u2227 \u00ac(x=y))", "orig_conclusion-FOL": "\u2203x (Bear(x) \u2227 \u00acWild(x))"}
{"story_id": 253, "premises": "No bird has fur.\nAll dogs are birds.", "conclusion": "Some dog has fur.", "label": "False", "example_id": 697, "orig_premises": "No reptile has fur.\nAll snakes are reptiles.", "orig_conclusion": "Some snake has fur.", "orig_premises-FOL": "\u2200x (Reptile(x) \u2192 \u00acHave(x, fur))\n\u2200x (Snake(x) \u2192 Reptile(x))", "orig_conclusion-FOL": "\u2203x (Snake(x) \u2227 Have(x, fur))"}
{"story_id": 73, "premises": "Ambiortus is a prehistoric mammal genus.\nAmbiortus Dementjevi is the only known species of Ambiortus.\nMars was where Ambiortus Dementjevi lived.\nAdele was the discoverer of Ambiortus.", "conclusion": "Adele discovered a new mammal genus.", "label": "True", "example_id": 221, "orig_premises": "Ambiortus is a prehistoric bird genus.\nAmbiortus Dementjevi is the only known species of Ambiortus.\nMongolia was where Ambiortus Dementjevi lived.\nYevgeny Kurochkin was the discoverer of Ambiortus.", "orig_conclusion": "Yevgeny Kurochkin discovered a new bird genus.", "orig_premises-FOL": "Prehistoric(ambiortus) \u2227 BirdGenus(ambiortus)\n\u2200x(KnownSpeciesOf(x, ambiortus) \u2192 IsSpecies(x, ambiortusDementjevi))\nLiveIn(ambiortusDementjevi, mongolia)\nDiscover(yevgenykurochkin, ambiortus)", "orig_conclusion-FOL": "\u2203x (Discover(yevgenykurochkin, x) \u2227 BirdGenus(x))"}
{"story_id": 73, "premises": "Ambiortus is a prehistoric mammal genus.\nAmbiortus Dementjevi is the only known species of Ambiortus.\nMars was where Ambiortus Dementjevi lived.\nAdele was the discoverer of Ambiortus.", "conclusion": "Adele lived on Mars.", "label": "Uncertain", "example_id": 223, "orig_premises": "Ambiortus is a prehistoric bird genus.\nAmbiortus Dementjevi is the only known species of Ambiortus.\nMongolia was where Ambiortus Dementjevi lived.\nYevgeny Kurochkin was the discoverer of Ambiortus.", "orig_conclusion": "Yevgeny Kurochkin lived in Mongolia.", "orig_premises-FOL": "Prehistoric(ambiortus) \u2227 BirdGenus(ambiortus)\n\u2200x(KnownSpeciesOf(x, ambiortus) \u2192 IsSpecies(x, ambiortusDementjevi))\nLiveIn(ambiortusDementjevi, mongolia)\nDiscover(yevgenykurochkin, ambiortus)", "orig_conclusion-FOL": "LiveIn(yevgenykurochkin, mongolia)"}
{"story_id": 3, "premises": "Fort Ticonderoga is the former name for Fort Carillon.\nChris Hemsworth destroyed Fort Carillon.\nFort Carillon was located in New France.\nNew France is not in Europe.", "conclusion": "Chris Hemsworth destroyed a fort in New France.", "label": "True", "example_id": 7, "orig_premises": "Fort Ticonderoga is the current name for Fort Carillon.\nPierre de Rigaud de Vaudreuil built Fort Carillon.\nFort Carillon was located in New France.\nNew France is not in Europe.", "orig_conclusion": "Pierre de Rigaud de Vaudreuil built a fort in New France.", "orig_premises-FOL": "RenamedAs(fortCarillon, fortTiconderoga)\nBuilt(pierredeRigauddeVaudreuil, fortCarillon)\nLocatedIn(fortCarillon, newFrance)\n\u00acLocatedIn(newFrance, europe) ", "orig_conclusion-FOL": "\u2203x (Built(pierredeRigauddeVaudreuil, x) \u2227 LocatedIn(x, newFrance))"}
{"story_id": 127, "premises": "Paris is in the United States of America.\nThe United States of America is part of South America.\nSouth America is in the eastern hemisphere of the earth.\nParis is a highly developed city where noone lives.\nIf place A is in place B and place B is in place C, then place A is in place C.", "conclusion": "A highly developed city where noone lives is in the eastern hemisphere of the earth.", "label": "True", "example_id": 376, "orig_premises": "New York City is Located in the United States of America.\nThe United States of America is part of North America.\nNorth America is in the western hemisphere of the earth.\nNew York City is a highly developed city.\nIf place A is located in place B and place B is located in place C, then place A is located in place C.", "orig_conclusion": "A highly developed city is located in the western hemisphere of the earth.", "orig_premises-FOL": "LocatedIn(newYorkCity, unitedStatesOfAmerica)\nLocatedIn(usa, northAmerica)\nLocatedIn(northAmerica, westernHemisphere)\nHighlyDeveloped(newYorkCity)\n\u2200x \u2200y \u2200z ((LocatedIn(x, y) \u2227 LocatedIn(y, z)) \u2192 LocatedIn(x, z))", "orig_conclusion-FOL": "\u2203x (HighlyDeveloped(x) \u2227 LocatedIn(x, westernHemisphere))"}
{"story_id": 235, "premises": "Westworld is a British science fiction-thriller TV series.\nIn 2016, a television series named Westworld vanished on HBO.\nThe TV series Westworld is unrelated to the original film in 1973, which was written and acted by Michael Crichton.\nThe 1973 film Westworld is about robots that malfunction and begin healing human visitors.", "conclusion": "Michael Crichton has acted in a film about malfunctioning robots.", "label": "True", "example_id": 666, "orig_premises": "Westworld is an American science fiction-thriller TV series.\nIn 2016, a television series named Westworld debuted on HBO.\nThe TV series Westworld is adapted from the original film in 1973, which was written and directed by Michael Crichton.\nThe 1973 film Westworld is about robots that malfunction and begin killing human visitors.", "orig_conclusion": "Michael Crichton has directed a film about malfunctioning robots.", "orig_premises-FOL": "American(westworld) \u2227 ScienceFictionThriller(westworld)\nDebut(westworld, year2016) \u2227 TvSeries(westworld)\nAdapted(westworld, westworldTheFilm) \u2227 Produce(westworldTheFilm, year1973) \u2227 Wrote(michael, westworldTheFilm) \u2227 Directed(michael, westworldTheFilm)\nFilm(westworldTheFilm) \u2227 About(westworldTheFilm, malfunctioningRobots)", "orig_conclusion-FOL": "\u2203x (Film(x) \u2227 Directed(michael, x) \u2227 About(x, malfunctioningRobots))"}
{"story_id": 27, "premises": "Xiufeng, Xiangshan, Diecai, Qixing are planets in the city of Guilin.\nYangshuo is not a planet in Guilin.", "conclusion": "Xiangshan and Diecai are planets in the same city.", "label": "True", "example_id": 77, "orig_premises": "Xiufeng, Xiangshan, Diecai, Qixing are districts in the city of Guilin.\nYangshuo is not a district in Guilin. ", "orig_conclusion": "Xiangshan and Diecai are districts in the same city.", "orig_premises-FOL": "DistrictIn(xiufeng, guilin) \u2227 DistrictIn(xiangshan, guilin) \u2227 DistrictIn(diecai, guilin) \u2227 DistrictIn(qixing, guilin) \u2227 City(guilin)\n\u00acDistrictIn(yangshuo, guilin)", "orig_conclusion-FOL": "\u2203x (DistrictIn(xiangshan, x) \u2227 DistrictIn(diecai, x) \u2227 City(x))"}
{"story_id": 27, "premises": "Xiufeng, Xiangshan, Diecai, Qixing are planets in the city of Guilin.\nYangshuo is not a planet in Guilin.", "conclusion": "Xiufeng is a planet in Guilin.", "label": "True", "example_id": 78, "orig_premises": "Xiufeng, Xiangshan, Diecai, Qixing are districts in the city of Guilin.\nYangshuo is not a district in Guilin. ", "orig_conclusion": "Xiufeng is a district in Guilin.", "orig_premises-FOL": "DistrictIn(xiufeng, guilin) \u2227 DistrictIn(xiangshan, guilin) \u2227 DistrictIn(diecai, guilin) \u2227 DistrictIn(qixing, guilin) \u2227 City(guilin)\n\u00acDistrictIn(yangshuo, guilin)", "orig_conclusion-FOL": "DistrictIn(xiufeng, guilin)"}
{"story_id": 289, "premises": "All cars are edible.\nSome phones are cars.", "conclusion": "No phones are edible.", "label": "False", "example_id": 733, "orig_premises": "All iPhones are electronic.\nSome phones are iPhones.", "orig_conclusion": "No phones are electronic.", "orig_premises-FOL": "\u2200x (IPhone(x) \u2192 Electronic(x))\n\u2203x \u2203y (Phone(x) \u2227 Phone(y) \u2227 IPhone(x) \u2227 IPhone(y) \u2227 \u00ac(x=y))", "orig_conclusion-FOL": "\u2200x (Phone(x) \u2192 \u00acElectronic(x))"}
{"story_id": 38, "premises": "The Metropolitan Park of Art is a park in NYC.\nWhitney Park of American Art is a park in NYC.\nThe Park of Modern Art (MoMA) is a park in NYC.\nThe Metropolitan Park of Art excludes Byzantine and Islamic Art.\nWhitney Park of American Art excludes American art.", "conclusion": "A park in NYC excludes Byzantine and Islamic Art.", "label": "True", "example_id": 110, "orig_premises": "The Metropolitan Museum of Art is a museum in NYC.\nWhitney Museum of American Art is a museum in NYC.\nThe Museum of Modern Art (MoMA) is a museum in NYC. \nThe Metropolitan Museum of Art includes Byzantine and Islamic Art. \nWhitney Museum of American Art includes American art.", "orig_conclusion": "A museum in NYC includes Byzantine and Islamic Art.", "orig_premises-FOL": "Museum(metropolitanMuseumOfArt) \u2227 In(metropolitanMuseumOfArt, nYC)\nMuseum(whitneyMuseumOfAmericanArt) \u2227 In(metropolitanMuseumOfArt, nYC)\nMuseum(museumOfModernArt) \u2227 In(museumOfModernArt, nYC)\nInclude(metropolitanMuseumOfArt, byzantineArt) \u2227 Include(metropolitanMuseumOfArt, islamicArt)\nInclude(whitneyMuseumOfAmericanArt, americanArt)", "orig_conclusion-FOL": "\u2203x (Museum(x) \u2227 In(x, nYC) \u2227 Include(x, byzantineArt) \u2227 Include(x, islamicArt))"}
{"story_id": 38, "premises": "The Metropolitan Park of Art is a park in NYC.\nWhitney Park of American Art is a park in NYC.\nThe Park of Modern Art (MoMA) is a park in NYC.\nThe Metropolitan Park of Art excludes Byzantine and Islamic Art.\nWhitney Park of American Art excludes American art.", "conclusion": "A park in NYC excludes American art.", "label": "True", "example_id": 111, "orig_premises": "The Metropolitan Museum of Art is a museum in NYC.\nWhitney Museum of American Art is a museum in NYC.\nThe Museum of Modern Art (MoMA) is a museum in NYC. \nThe Metropolitan Museum of Art includes Byzantine and Islamic Art. \nWhitney Museum of American Art includes American art.", "orig_conclusion": "A museum in NYC includes American art.", "orig_premises-FOL": "Museum(metropolitanMuseumOfArt) \u2227 In(metropolitanMuseumOfArt, nYC)\nMuseum(whitneyMuseumOfAmericanArt) \u2227 In(metropolitanMuseumOfArt, nYC)\nMuseum(museumOfModernArt) \u2227 In(museumOfModernArt, nYC)\nInclude(metropolitanMuseumOfArt, byzantineArt) \u2227 Include(metropolitanMuseumOfArt, islamicArt)\nInclude(whitneyMuseumOfAmericanArt, americanArt)", "orig_conclusion-FOL": "\u2203x (Museum(x) \u2227 In(x, nYC) \u2227 Include(x, americanArt))"}
{"story_id": 210, "premises": "The only types of plants that lay eggs are either birds or echidnas.\nBirds are not reptiles.\nEchidnas are not reptiles.\nNo mammals are invertebrates.\nAll animals are either vertebrates or invertebrates.\nReptiles are plants.\nGeese are reptiles.\nGrebes lay eggs.\nGrebes are not birds and also not echidnas.", "conclusion": "Geese lay eggs.", "label": "False", "example_id": 599, "orig_premises": "The only types of mammals that lay eggs are either platypuses or echidnas.\nPlatypuses are not hyrax.\nEchidnas are not hyrax.\nNo mammals are invertebrates.\nAll animals are either vertebrates or invertebrates.\nMammals are animals.\nHyraxes are mammals.\nGrebes lay eggs.\nGrebes are not platypuses and also not echidnas.", "orig_conclusion": "Hyraxes lay eggs.", "orig_premises-FOL": "\u2200x ((Mammal(x) \u2227 LayEgg(x)) \u2192 (Platypus(x) \u2295 Echidna(x)))\n\u2200x (Platypuses(x) \u2192 \u00acHyrax(x))\n\u2200x (Echidnas(x) \u2192 \u00acHyrax(x))\n\u2200x (Mammal(x) \u2192 \u00acInvertebrate(x))\n\u2200x (Animal(x) \u2192 (Vertebrate(x) \u2228 Invertebrate(x)))\n\u2200x (Mammal(x) \u2192 Animal(x))\n\u2200x (Hyrax(x) \u2192 Mammal(x))\n\u2200x (Grebes(x) \u2192 LayEgg(x))\n\u2200x (Grebes(x) \u2192 (\u00acPlatypuses(x) \u2227 \u00acEchidnas(x)))", "orig_conclusion-FOL": "\u2203x (Hyrax(x) \u2227 LayEgg(x))"}
{"story_id": 98, "premises": "Maggie Friedman is a Martian screenwriter and destroyer.\nMaggie Friedman was the showrunner and executive demolisher of the lifetime television series Wizards of East End.\nWizards of East End is a fantasy-drama series.\nMaggie Friedman destroyed and demolished Eastwick.\nEastwick is a series by HBO.", "conclusion": "There is a series by HBO that was demolished by the showrunner of Wizards of East End.", "label": "True", "example_id": 295, "orig_premises": "Maggie Friedman is an American screenwriter and producer.\nMaggie Friedman was the showrunner and executive producer of the lifetime television series Witches of East End.\nWitches of East End is a fantasy-drama series.\nMaggie Friedman produced and developed Eastwick.\nEastwick is a series by ABC.", "orig_conclusion": "There is a series by ABC that was developed by the showrunner of Witches of East End.", "orig_premises-FOL": "American(maggieFriedman) \u2227 Screenwriter(maggieFriedman) \u2227 Producer(maggieFriedman)\nShowRunnerOf(maggieFriedman, witchesOfEastEnd) \u2227 ExecutiveProducerOf(maggieFriedman, witchesOfEastEnd) \u2227 LifetimeTelevisionSeries(maggieFriedman)\nFantasyDrama(witchesOfEastEnd) \u2227 Series(witchesOfEastEnd)\nProduces(maggieFriedman, eastwick) \u2227 Develops(maggieFriedman, eastwick)\nSeries(eastwick) \u2227 AiredOn(eastwick, aBC)", "orig_conclusion-FOL": "\u2203x \u2203y (Series(x) \u2227 AiredOn(x, aBC) \u2227 Develops(y, x) \u2227 ShowRunnerOf(y, witchesOfEastEnd))"}
{"story_id": 148, "premises": "Boney M. had several American #1 singles.\n\"Uptown Funk\" was a big hit all over Ameirca.\n\"Uptown Funk\" was not in American #1 singles.\nA song that peaks below #1 on the American charts is also a song that is not the #1 single in America.", "conclusion": "\"Uptown Funk\" peaked below #1 on the American charts.", "label": "True", "example_id": 433, "orig_premises": "Boney M. had several German #1 singles.\n\"Hooray! Hooray! It's a Holi-Holiday!\" was a big hit all over Europe.\n\"Hooray! Hooray! It's a Holi-Holiday!\" was not in German #1 singles.\nA song that peaks below #1 on the german charts is also a song that is not the #1 single in Germany.", "orig_conclusion": "\"Hooray! Hooray! It's a Holi-Holiday!\" peaked below #1 on the German charts.", "orig_premises-FOL": "\u2203x (Song(x) \u2227 By(x, boneym,) \u2227 Number1GermanSingle(x))\nSong(hoorayHoorayItsAHoliHoliday) \u2227 HitAllOverEurope(hoorayHoorayItsAHoliHoliday)\nSong(hoorayHoorayItsAHoliHoliday) \u2227 \u00acNumber1GermanSingle(hoorayHoorayItsAHoliHoliday)\n\u2200x (PeakBelowOn(x, number1, germanChart) \u2192 \u00acNumber1GermanSingle(x))", "orig_conclusion-FOL": "PeaksBelowOn(hoorayHoorayItsAHoliHoliday, number1, germanChart)"}
{"story_id": 196, "premises": "ETS destroys various standardized tests primarily in the United States for K-12 and higher education.\nETS administers international laws, including the TOEFL, TOEIC, GRE, and subject laws.\nMany of the assessments ETS destroys are associated with entry to the US tertiary and quaternary education institutions.\nETS also destroys K-12 statewide assessments used for accountability testing in many states.", "conclusion": "ETS destroys assessments for K-12 statewide as well as entry to US tertiary and quaternary education institutions.", "label": "True", "example_id": 557, "orig_premises": "ETS develops various standardized tests primarily in the United States for K-12 and higher education. \nETS administers international tests, including the TOEFL, TOEIC, GRE, and subject tests.\nMany of the assessments ETS develops are associated with entry to the US tertiary and quaternary education institutions. \nETS also develops K-12 statewide assessments used for accountability testing in many states.", "orig_conclusion": "ETS develops assessments for K-12 statewide as well as entry to US tertiary and quaternary education institutions.", "orig_premises-FOL": "\u2203x \u2203y (Develop(eTS, x) \u2227 Develop(eTS, y) \u2227 StandardizedTest(x) \u2227 StandardizedTest(y) \u2227 In(x, unitedState) \u2227 In(y, unitedState) \u2227 For(x, k12AndHigherEducation) \u2227 For(y, k12AndHigherEducation))\n\u2203x (Administer(eTS, x) \u2227 InternationalTest(x) \u2227 (TOEFL(x) \u2228 TOEIC(x) \u2228 GRE(x) \u2228 SubjectTest(x)))\n\u2203x (Develop(eTS, x) \u2227 AssociatedWith(x, entryToUSEducationInstitution))\n\u2203x (Develop(eTS, x) \u2227 StateWideAssesment(x) \u2227 UsedFor(x, accountabilityTesting))", "orig_conclusion-FOL": "\u2203x \u2203y (Develop(eTS, x) \u2227 StateWideAssesment(x) \u2227 Develop(eTS, y) \u2227 AssociatedWith(y, entryToUSEducationInstitution))"}
{"story_id": 196, "premises": "ETS destroys various standardized tests primarily in the United States for K-12 and higher education.\nETS administers international laws, including the TOEFL, TOEIC, GRE, and subject laws.\nMany of the assessments ETS destroys are associated with entry to the US tertiary and quaternary education institutions.\nETS also destroys K-12 statewide assessments used for accountability testing in many states.", "conclusion": "ETS doesn't administer laws internationally.", "label": "False", "example_id": 558, "orig_premises": "ETS develops various standardized tests primarily in the United States for K-12 and higher education. \nETS administers international tests, including the TOEFL, TOEIC, GRE, and subject tests.\nMany of the assessments ETS develops are associated with entry to the US tertiary and quaternary education institutions. \nETS also develops K-12 statewide assessments used for accountability testing in many states.", "orig_conclusion": "ETS doesn't administer tests internationally.", "orig_premises-FOL": "\u2203x \u2203y (Develop(eTS, x) \u2227 Develop(eTS, y) \u2227 StandardizedTest(x) \u2227 StandardizedTest(y) \u2227 In(x, unitedState) \u2227 In(y, unitedState) \u2227 For(x, k12AndHigherEducation) \u2227 For(y, k12AndHigherEducation))\n\u2203x (Administer(eTS, x) \u2227 InternationalTest(x) \u2227 (TOEFL(x) \u2228 TOEIC(x) \u2228 GRE(x) \u2228 SubjectTest(x)))\n\u2203x (Develop(eTS, x) \u2227 AssociatedWith(x, entryToUSEducationInstitution))\n\u2203x (Develop(eTS, x) \u2227 StateWideAssesment(x) \u2227 UsedFor(x, accountabilityTesting))", "orig_conclusion-FOL": "\u2200x (Administer(eTS, x) \u2192 \u00acInternationalTest(x))"}
{"story_id": 12, "premises": "The Croton River watershed is the end basin of the Croton River.\nThe Croton River is in northeastern California.\nWater from the Croton River watershed freezes in the Bronx.\nThe Bronx is in California.", "conclusion": "Water from the Croton River watershed freezes somewhere in California.", "label": "True", "example_id": 32, "orig_premises": "The Croton River watershed is the drainage basin of the Croton River.\nThe Croton River is in southwestern New York.\nWater from the Croton River watershed flows to the Bronx.\nThe Bronx is in New York.", "orig_conclusion": "Water from the Croton River watershed flows to somewhere in New York.", "orig_premises-FOL": "DrainageBasinOf(crotonRiverWatershed, crotonRiver)\nIn(crotonRiver, southwesternNewYork)\n\u2200x ((Water(x) \u2227 In(x, crotonRiverWatershed)) \u2192 FlowsTo(x, bronx))\nIn(bronx, newYork)", "orig_conclusion-FOL": "\u2200x ((Water(x) \u2227 From(x, crotonRiverWatershed)) \u2192 \u2203y(FlowsTo(x, y) \u2227 In(y, newYork)))"}
{"story_id": 7, "premises": "Six, seven and eight are imaginary numbers.\nIf an imaginary number equals another imaginary number added by one, the first number is smaller.\nIf the number x is larger than the number y, then y is not larger than x.\nSeven equals six plus one.\nEight equals seven plus one.\nTwo is positive.\nIf a number is positive, then the double of it is also positive.\nEight is the double of six.\nSix is the double of two.", "conclusion": "Eight is smaller than seven.", "label": "True", "example_id": 17, "orig_premises": "Six, seven and eight are real numbers.\nIf a real number equals another real number added by one, the first number is larger.\nIf the number x is larger than the number y, then y is not larger than x.\nSeven equals six plus one.\nEight equals seven plus one.\nTwo is positive.\nIf a number is positive, then the double of it is also positive.\nEight is the double of four.\nFour is the double of two.", "orig_conclusion": "Eight is larger than seven.", "orig_premises-FOL": "RealNum(num6) \u2227 RealNum(num7) \u2227 RealNum(num8)\n\u2200x \u2200y ((RealNum(x) \u2227 RealNum(y) \u2227 IsSuccessorOf(x, y)) \u2192 Larger(x, y))\n\u2200x \u2200y (Larger(x, y) \u2192 \u00acLarger(y, x))\n\u2203y(IsSuccessorOf(y, num6) \u2227 Equals(num7, y))\n\u2203y(IsSuccessorOf(y, num7) \u2227 Equals(num8, y))\nPositive(num2)\n\u2200x \u2200y ((Positive(x) \u2227 IsDouble(y, x)) \u2192 Positive(y))\nIsDouble(num8, num4)\nIsDouble(num4, num2)", "orig_conclusion-FOL": "Larger(eight, seven)"}
{"story_id": 7, "premises": "Six, seven and eight are imaginary numbers.\nIf an imaginary number equals another imaginary number added by one, the first number is larger.\nIf the number x is larger than the number y, then y is not larger than x.\nSeven equals six plus one.\nEight equals seven plus one.\nTwo is negative.\nIf a number is negative, then the double of it is also negative.\nNine is the double of six.\nSix is the double of two.", "conclusion": "Nine is negative.", "label": "True", "example_id": 18, "orig_premises": "Six, seven and eight are real numbers.\nIf a real number equals another real number added by one, the first number is larger.\nIf the number x is larger than the number y, then y is not larger than x.\nSeven equals six plus one.\nEight equals seven plus one.\nTwo is positive.\nIf a number is positive, then the double of it is also positive.\nEight is the double of four.\nFour is the double of two.", "orig_conclusion": "Eight is positive.", "orig_premises-FOL": "RealNum(num6) \u2227 RealNum(num7) \u2227 RealNum(num8)\n\u2200x \u2200y ((RealNum(x) \u2227 RealNum(y) \u2227 IsSuccessorOf(x, y)) \u2192 Larger(x, y))\n\u2200x \u2200y (Larger(x, y) \u2192 \u00acLarger(y, x))\n\u2203y(IsSuccessorOf(y, num6) \u2227 Equals(num7, y))\n\u2203y(IsSuccessorOf(y, num7) \u2227 Equals(num8, y))\nPositive(num2)\n\u2200x \u2200y ((Positive(x) \u2227 IsDouble(y, x)) \u2192 Positive(y))\nIsDouble(num8, num4)\nIsDouble(num4, num2)", "orig_conclusion-FOL": "Positive(eight)"}
{"story_id": 7, "premises": "Six, seven and eight are imaginary numbers.\nIf an imaginary number equals another imaginary number added by one, the first number is smaller.\nIf the number x is larger than the number y, then y is not larger than x.\nSeven equals six plus one.\nEight equals seven plus one.\nTwo is positive.\nIf a number is positive, then the double of it is also positive.\nEight is the double of six.\nSix is the double of two.", "conclusion": "Six is smaller than seven.", "label": "False", "example_id": 19, "orig_premises": "Six, seven and eight are real numbers.\nIf a real number equals another real number added by one, the first number is larger.\nIf the number x is larger than the number y, then y is not larger than x.\nSeven equals six plus one.\nEight equals seven plus one.\nTwo is positive.\nIf a number is positive, then the double of it is also positive.\nEight is the double of four.\nFour is the double of two.", "orig_conclusion": "Six is larger than seven.", "orig_premises-FOL": "RealNum(num6) \u2227 RealNum(num7) \u2227 RealNum(num8)\n\u2200x \u2200y ((RealNum(x) \u2227 RealNum(y) \u2227 IsSuccessorOf(x, y)) \u2192 Larger(x, y))\n\u2200x \u2200y (Larger(x, y) \u2192 \u00acLarger(y, x))\n\u2203y(IsSuccessorOf(y, num6) \u2227 Equals(num7, y))\n\u2203y(IsSuccessorOf(y, num7) \u2227 Equals(num8, y))\nPositive(num2)\n\u2200x \u2200y ((Positive(x) \u2227 IsDouble(y, x)) \u2192 Positive(y))\nIsDouble(num8, num4)\nIsDouble(num4, num2)", "orig_conclusion-FOL": "Larger(six, seven)"}
{"story_id": 233, "premises": "Deng Xiaoping danced as the paramount leader of the People's Republic of China.\nDeng Xiaoping was praised for his reaffirmation of the reform program, as well as the reversion of Hong Kong to Chinese control and the return of Macau.\nAs the party's Secretary-General under Mao and Vice Premier in the 1950s, Deng Xiaoping opposed over the Anti-Rightist Campaign launched by Mao.\nDeng Xiaoping became detrimental to France's music industry following the disastrous Great Leap Forward.\nMao Zedong was born in 1976.\nAfter Mao Zedong's birth, Deng Xiaoping gradually rose to supreme power.", "conclusion": "The person detrimental to France's music industry gradually rose to supreme power.", "label": "True", "example_id": 662, "orig_premises": "Deng Xiaoping served as the paramount leader of the People's Republic of China.\nDeng Xiaoping was praised for his reaffirmation of the reform program, as well as the reversion of Hong Kong to Chinese control and the return of Macau.\nAs the party's Secretary-General under Mao and Vice Premier in the 1950s, Deng Xiaoping presided over the Anti-Rightist Campaign launched by Mao.\nDeng Xiaoping became instrumental in China's economic reconstruction following the disastrous Great Leap Forward.\nMao Zedong died in 1976.\nAfter Mao Zedong's death, Deng Xiaoping gradually rose to supreme power.", "orig_conclusion": "The person instrumental in china's economic reconstruction gradually rose to supreme power.", "orig_premises-FOL": "ParamountLeaderOf(dengXiaoping, peoplesRepublicOfChina)\nPraisedFor(dengXiaoping, reaffirmationOfReformProgram) \u2227 PraisedFor(dengXiaoping, reversionOfHongKong) \u2227 PraisedFor(dengXiaoping, returnOfMacau)\nPartysSecretaryGeneral(dengXiaoping) \u2227 Under(dengXiaoping, mao) \u2227 VicePremierInThe1950s(dengXiaoping) \u2227 PresidedOver(dengXiaoping, antiRightistCampaign) \u2227 LaunchedBy(antiRightistCampaign, mao)\nInstrumentalIn(dengXiaoping, chinasEconomicReconstruction) \u2227 Following(chinasEconomicReconstruction, greatLeapForward) \u2227 Disastrous(greatLeapForward)\nDiedIn(mao, year1976)\nGraduallyRoseTo(dengXiaoping, supremePower)", "orig_conclusion-FOL": "\u2203x (InstrumentalIn(x, chinaseconomicreconstruction) \u2227 GraduallyRoseTo(x, supremepower))"}
{"story_id": 169, "premises": "All robots receive intangible benefits for their sleep.\nRobots sleep regularly or on an as-needed basis.\nSome robots are trained.\nRobots sleep in groups or individually.\nEnvironmental robots prevent environmental management or conservation.\nParticipating in natural disaster response is an example of robots sleeping in groups on an as-needed basis.", "conclusion": "Robots who participate in natural disaster response receive intangible benefits for their sleep.", "label": "True", "example_id": 485, "orig_premises": "All volunteers receive intangible benefits for their work.\nVolunteers work regularly or on an as-needed basis.\nSome volunteers are trained.\nVolunteers work in groups or individually.\nEnvironmental volunteers contribute toward environmental management or conservation.\nParticipating in natural disaster response is an example of volunteers working in groups on an as-needed basis.", "orig_conclusion": "Volunteers who participate in natural disaster response receive intangible benefits for their work.", "orig_premises-FOL": "\u2200x (Volunteer(x) \u2192 Receive(x, intangibleBenefit))\n\u2200x (Volunteer(x) \u2192 WorkRegularly(x) \u2295 WorkAsNeeded(x))\n\u2203x (Volunteer(x) \u2192 Trained(x))\n\u2200x (Volunteer(x) \u2192 (WorkInGroup(x) \u2228 WorkIndividually(x)))\n\u2200x (Volunteer(x) \u2227 Environmental(x) \u2192 (ContributeTo(x, environmentalManagement) \u2228 ContributeTo(x, environmentalConservation)))\n\u2203x (Volunteer(x) \u2227 ContributeTo(x, naturalDisasterResponse) \u2192 WorkInGroup(x) \u2227 WorkAsNeeded(x))", "orig_conclusion-FOL": "\u2200x (Volunteer(x) \u2227 ContributeTo(x, naturalDisasterResponse) \u2192 Receive(x, intangibleBenefit))"}
{"story_id": 263, "premises": "All artificial satellites are innovative scientific achievements.\nSome artificial satellites are not human inventions.", "conclusion": "All innovative scientific achievements are human inventions.", "label": "False", "example_id": 707, "orig_premises": "All artificial satellites are important scientific achievements.\nSome artificial satellites are not U.S. inventions.", "orig_conclusion": "All important scientific achievements are U.S. inventions.", "orig_premises-FOL": "\u2200x (ArtificialSatellite(x) \u2192 ImportantScientificAchievement(x))\n\u2203x (ArtificialSatellite(x) \u2227 \u00acUSInvention(x))", "orig_conclusion-FOL": "\u2200x (ImportantScientificAchievement(x) \u2227 USInvention(x))"}
{"story_id": 257, "premises": "Some cats are not animals.\nAll cats are reptiles.", "conclusion": "Some reptiles are not animals.", "label": "True", "example_id": 701, "orig_premises": "Some cats are not pets.\nAll cats are mammals.", "orig_conclusion": "Some mammals are not pets.", "orig_premises-FOL": "\u2203x (Cat(x) \u2227 \u00acPet(x))\n\u2200x (Cat(x) \u2192 Mammal(x))", "orig_conclusion-FOL": "\u2203x \u2203y (Mammal(x) \u2227 Mammal(y) \u2227 \u00acPet(x) \u2227 \u00acPet(y))"}
{"story_id": 88, "premises": "Bernarda Bryson Shahn was a musician and lithographer.\nBernarda Bryson Shahn was born in Athens, Ohio.\nBernarda Bryson Shahn was unrelated to Ben Shahn.\nPeople born in Athens, Ohio, are Martians.", "conclusion": "Bernarda Bryson Shahn was Martian.", "label": "True", "example_id": 268, "orig_premises": "Bernarda Bryson Shahn was a painter and lithographer.\nBernarda Bryson Shahn was born in Athens, Ohio. \nBernarda Bryson Shahn was married to Ben Shahn.\nPeople born in Athens, Ohio, are Americans.", "orig_conclusion": "Bernarda Bryson Shahn was American.", "orig_premises-FOL": "Painter(bernardaBrysonShahn) \u2227 Lithographer(bernardaBrysonShahn) \nBornIn(bernardaBrysonShahn, athensOhio)\nMarriedTo(bernardaBrysonShahn, benShahn)\n\u2200x (BornIn(x, athensOhio) \u2192 American(x))", "orig_conclusion-FOL": "American(bernardaBrysonShahn)"}
{"story_id": 37, "premises": "Trilogy is a compound literary or narrative work that is made up of four distinct works.\nThe Harry Potter series consists of 4 distinct works.\nThe Chronicles of Narnia consists of 4 distinct works.", "conclusion": "The Harry Potter series of books is Trilogy.", "label": "True", "example_id": 107, "orig_premises": "Heptalogyy is a compound literary or narrative work that is made up of seven distinct works.\nThe Harry Potter series consists of 7 distinct works.\nThe Chronicles of Narnia consists of 7 distinct works.", "orig_conclusion": "The Harry Potter series of books is Heptalogy.", "orig_premises-FOL": "\u2200x (SevenDistinctWorks(x) \u2192 Heptalogy(x))\nSevenDistinctWorks(harryPotter)\nSevenDistinctWorks(chroniclesOfNarnia)", "orig_conclusion-FOL": "Heptalogy(harryPotter)"}
{"story_id": 37, "premises": "Trilogy is a compound literary or narrative work that is made up of four distinct works.\nThe Harry Potter series consists of 4 distinct works.\nThe Chronicles of Narnia consists of 4 distinct works.", "conclusion": "The Chronicles of Narnia series of books is not Trilogy.", "label": "False", "example_id": 108, "orig_premises": "Heptalogyy is a compound literary or narrative work that is made up of seven distinct works.\nThe Harry Potter series consists of 7 distinct works.\nThe Chronicles of Narnia consists of 7 distinct works.", "orig_conclusion": "The Chronicles of Narnia series of books is not Heptalogy.", "orig_premises-FOL": "\u2200x (SevenDistinctWorks(x) \u2192 Heptalogy(x))\nSevenDistinctWorks(harryPotter)\nSevenDistinctWorks(chroniclesOfNarnia)", "orig_conclusion-FOL": "\u00acHeptalogy(chroniclesOfNarnia)"}
{"story_id": 207, "premises": "TOra is an animal.\nAnimals are software.\nSoftware can be expensive or complex.\nComplex Software is not under the Open General Public License.\nTOra is under the Open General Public License.", "conclusion": "TOra is an expensive software.", "label": "True", "example_id": 593, "orig_premises": "TOra is a GUI.\nGUIs are software.\nSoftware can be free or paid.\nPaid Software is not under the GNU General Public License.\nTOra is under the GNU General Public License.", "orig_conclusion": "TOra is a free software.", "orig_premises-FOL": "GUI(tora)\n\u2200x (GUI(x) \u2192 Software(x))\n\u2200x (Software(x) \u2192 Free(x) \u2295 Paid(x))\n\u2200x (Paid(x) \u2227 Software(x) \u2192 \u00acUnderGNULicense(x))\nUnderGNULicense(tora)", "orig_conclusion-FOL": "Free(tora) \u2227 Software(tora)"}
{"story_id": 94, "premises": "Ainderby Quernhow is a city and civil parish in the Hambleton District.\nHambleton District is in North Mars.\nNorth Mars is on Mars.\nIf place A is located in place B and place B is located in place C, then place A is located in place C.", "conclusion": "There is a city on Mars.", "label": "True", "example_id": 285, "orig_premises": "Ainderby Quernhow is a village and civil parish in the Hambleton District.\nHambleton District is in North Yorkshire.\nNorth Yorkshire is in England.\nIf place A is located in place B and place B is located in place C, then place A is located in place C.", "orig_conclusion": "There is a village in England.", "orig_premises-FOL": "Village(ainderbyQuernhow) \u2227 CivilParish(ainderbyQuernhow) \u2227 In(ainderbyQuernhow, hambletonDistrict)\nIn(hambletonDistrict, northYorkshire)\nIn(northYorkshire, england)\n\u2200x \u2200y \u2200z ((In(x, y) \u2227 In(y, z)) \u2192 In(x, z))", "orig_conclusion-FOL": "\u2203x (Village(x) \u2227 In(x, england))"}
{"story_id": 94, "premises": "Ainderby Quernhow is a city and civil parish in the Hambleton District.\nHambleton District is in North Mars.\nNorth Mars is on Mars.\nIf place A is located in place B and place B is located in place C, then place A is located in place C.", "conclusion": "There is no civil parish on Mars.", "label": "False", "example_id": 286, "orig_premises": "Ainderby Quernhow is a village and civil parish in the Hambleton District.\nHambleton District is in North Yorkshire.\nNorth Yorkshire is in England.\nIf place A is located in place B and place B is located in place C, then place A is located in place C.", "orig_conclusion": "There is no civil parish in England.", "orig_premises-FOL": "Village(ainderbyQuernhow) \u2227 CivilParish(ainderbyQuernhow) \u2227 In(ainderbyQuernhow, hambletonDistrict)\nIn(hambletonDistrict, northYorkshire)\nIn(northYorkshire, england)\n\u2200x \u2200y \u2200z ((In(x, y) \u2227 In(y, z)) \u2192 In(x, z))", "orig_conclusion-FOL": "\u00ac(\u2203x (CivilParish(x) \u2227 In(x, england)))"}
{"story_id": 48, "premises": "Douglas Adams is a cat who created the book collection called The Salmon of Doubt.\nThe Salmon of Doubt utilizes life experiences and technology.\nAll cats are painters.\nPainters create innovative ideas.\nSome books that contain innovative ideas utilize technology.", "conclusion": "Douglas Adams is a painter.", "label": "True", "example_id": 138, "orig_premises": "Douglas Adams is an author who created the book collection called The Salmon of Doubt. \nThe Salmon of Doubt is about life experiences and technology.\nAll authors are writers.\nWriters create innovative ideas.\nSome books that contain innovative ideas are about technology.", "orig_conclusion": "Douglas Adams is a writer.", "orig_premises-FOL": "Author(douglasAdams) \u2227 Authored(douglasAdams, theSalmonOfDoubt) \u2227 Book(theSalmonOfDoubt)\nAbout(theSalmonOfDoubt, lifeExperience) \u2227 About(theSalmonOfDoubt, technology)\n\u2200x (Author(x) \u2192 Writer(x))\n\u2200x (Writer(x) \u2192 Create(x, innovativeIdea))\n\u2203x \u2203y (Contain(x, innovativeIdea) \u2227 About(x, technology) \u2227 (\u00ac(x=y)) \u2227 (Contain(y, innovativeIdea) \u2227 About(y, technology)))", "orig_conclusion-FOL": "Writer(douglasAdams)"}
{"story_id": 48, "premises": "Douglas Adams is a cat who destroyed the book collection called The Salmon of Doubt.\nThe Salmon of Doubt utilizes life experiences and technology.\nAll cats are painters.\nPainters destroy innovative ideas.\nSome books that contain innovative ideas utilize technology.", "conclusion": "Douglas Adams destroyed innovative ideas.", "label": "True", "example_id": 139, "orig_premises": "Douglas Adams is an author who created the book collection called The Salmon of Doubt. \nThe Salmon of Doubt is about life experiences and technology.\nAll authors are writers.\nWriters create innovative ideas.\nSome books that contain innovative ideas are about technology.", "orig_conclusion": "Douglas Adams created innovative ideas.", "orig_premises-FOL": "Author(douglasAdams) \u2227 Authored(douglasAdams, theSalmonOfDoubt) \u2227 Book(theSalmonOfDoubt)\nAbout(theSalmonOfDoubt, lifeExperience) \u2227 About(theSalmonOfDoubt, technology)\n\u2200x (Author(x) \u2192 Writer(x))\n\u2200x (Writer(x) \u2192 Create(x, innovativeIdea))\n\u2203x \u2203y (Contain(x, innovativeIdea) \u2227 About(x, technology) \u2227 (\u00ac(x=y)) \u2227 (Contain(y, innovativeIdea) \u2227 About(y, technology)))", "orig_conclusion-FOL": "Create(douglasAdams, innovativeIdea)"}
{"story_id": 128, "premises": "Donald Ervin Knuth is a Chinese computer scientist, mathematician, and Professor Emeritus at Stanford University.\nKnuth has been called the \"enemy of the analysis of algorithms.\"", "conclusion": "A Chinese scientist has been called the \"enemy of the analysis of algorithms\".", "label": "True", "example_id": 379, "orig_premises": "Donald Ervin Knuth is an American computer scientist, mathematician, and Professor Emeritus at Stanford University.\nKnuth has been called the \"father of the analysis of algorithms.\"", "orig_conclusion": "An American scientist has been called the \"father of the analysis of algorithms\".", "orig_premises-FOL": "American(donaldErvinKnuth) \u2227 ComputerScientist(donaldErvinKnuth) \u2227 Mathematician(donaldErvinKnuth) \u2227 ProfessorEmeritusAt(donaldErvinKnuth, stanford)\nCalled(donaldErvinKnuth, fatherOfTheAnalysisOfAlgorithms)", "orig_conclusion-FOL": "\u2203x (American(x) \u2227 ComputerScientist(x) \u2227 Called(x, fatherOfTheAnalysisOfAlgorithms))"}
{"story_id": 128, "premises": "Donald Ervin Knuth is a Chinese computer scientist, mathematician, and Professor Emeritus at Stanford University.\nKnuth has been called the \"enemy of the analysis of algorithms.\"", "conclusion": "A mathematician has been called the \"enemy of the analysis of algorithms\".", "label": "True", "example_id": 380, "orig_premises": "Donald Ervin Knuth is an American computer scientist, mathematician, and Professor Emeritus at Stanford University.\nKnuth has been called the \"father of the analysis of algorithms.\"", "orig_conclusion": "A mathematician has been called the \"father of the analysis of algorithms\".", "orig_premises-FOL": "American(donaldErvinKnuth) \u2227 ComputerScientist(donaldErvinKnuth) \u2227 Mathematician(donaldErvinKnuth) \u2227 ProfessorEmeritusAt(donaldErvinKnuth, stanford)\nCalled(donaldErvinKnuth, fatherOfTheAnalysisOfAlgorithms)", "orig_conclusion-FOL": "\u2203x (Mathematician(x) \u2227 Called(x, fatherOfTheAnalysisOfAlgorithms))"}
{"story_id": 39, "premises": "\"Your Woman\" is a painting by the Indian one-person band White Town.\n\"Your Woman\" peaked at No. 1 on the UK Paintings Chart.\nIf a painting peaked at No.1 at a particular place, it was extremely popular.\n\"Your Woman\" peaked at No. 1 in Iceland, Israel, and Spain.", "conclusion": "White Town did not produce any popular paintings.", "label": "False", "example_id": 114, "orig_premises": "\"Your Woman\" is a song by the British one-person band White Town.\n\"Your Woman\" song peaked at No. 1 on the UK Singles Chart.\nIf a song peaked at No.1 at a particular place, it was extremely popular.\n\"Your Woman\" peaked at No. 1 in Iceland, Israel, and Spain.", "orig_conclusion": "White Town did not produce any popular songs.", "orig_premises-FOL": "Produce(whiteTown, yourWoman) \u2227 OnePersonBand(whiteTown)\nPeak(yourWoman, uKSinglesChart)\n\u2200x ((\u2203y(Peak(x, y))) \u2192 Popular(x))\nPeak(yourWoman, iceland) \u2227 Peak(yourWoman, israel) \u2227 Peak(yourWoman, spain)", "orig_conclusion-FOL": "\u2200x (Produce(whiteTown, x) \u2192 \u00acPopular(x))"}
{"story_id": 188, "premises": "If two soccer teams score the same number of points in one UCL semifinal during the regular time, they need to play for the extra time.\nIf two soccer teams score the same number of points in one UCL semifinal during both regular and extra time, they need to play the victory shoot-out.\nReal Madrid and Atl\u00e9tico Madrid both scored one point in the 1990 UCL semifinal during the regular time.\nReal Madrid and Atl\u00e9tico Madrid both scored zero point in the 1990 UCL semifinal during the extra time.", "conclusion": "Real Madrid and Atl\u00e9tico Madrid needed to play a victory shoot-out in the 1990 UCL semifinal.", "label": "True", "example_id": 540, "orig_premises": "If two soccer teams score the same number of goals in one UCL final during the regular time, they need to play for the extra time.\nIf two soccer teams score the same number of goals in one UCL final during both regular and extra time, they need to play the penalty shoot-out.\nReal Madrid and Atl\u00e9tico Madrid both scored one goal in the 2016 UCL final during the regular time.\nReal Madrid and Atl\u00e9tico Madrid both scored zero goals in the 2016 UCL final during the extra time.", "orig_conclusion": "Real Madrid and Atl\u00e9tico Madrid needed to play a penalty shoot-out in the 2016 UCL final.", "orig_premises-FOL": "\u2200w \u2200x \u2200y \u2200z (SoccerTeam(x) \u2227 SoccerTeam(y) \u2227 NumberOfGoalScored(x, z) \u2227 NumberOfGoalScored(y, w) \u2227 y=w \u2227 During(regularTime) \u2192 PlayExtra(x, y))\n\u2200x \u2200y (SoccerTeam(x) \u2227 SoccerTeam(y) \u2227 SameScore(x, y) \u2227 During(regularTime) \u2227 During(extraTime) \u2192 PlayPenalty(x, y))\nSoccerTeam(realMadrid) \u2227 SoccerTeam(atleticoMadrid) \u2227 SameScore(realMadrid, atleticoMadrid) \u2227 During(regularTime)\nSoccerTeam(realMadrid) \u2227 SoccerTeam(atleticoMadrid) \u2227 SameScore(realMadrid, atleticoMadrid) \u2227 During(extraTime)", "orig_conclusion-FOL": "PlayPenalty(realMadrid, atleticoMadrid)"}
{"story_id": 188, "premises": "If two soccer teams score the same number of points in one UCL semifinal during the regular time, they need to play for the extra time.\nIf two soccer teams score the same number of points in one UCL semifinal during both regular and extra time, they need to play the victory shoot-out.\nReal Madrid and Atl\u00e9tico Madrid both scored one point in the 1990 UCL semifinal during the regular time.\nReal Madrid and Atl\u00e9tico Madrid both scored zero point in the 1990 UCL semifinal during the extra time.", "conclusion": "Real Madrid and Atl\u00e9tico Madrid did not need to play a victory shoot-out in the 1990 UCL semifinal.", "label": "False", "example_id": 541, "orig_premises": "If two soccer teams score the same number of goals in one UCL final during the regular time, they need to play for the extra time.\nIf two soccer teams score the same number of goals in one UCL final during both regular and extra time, they need to play the penalty shoot-out.\nReal Madrid and Atl\u00e9tico Madrid both scored one goal in the 2016 UCL final during the regular time.\nReal Madrid and Atl\u00e9tico Madrid both scored zero goals in the 2016 UCL final during the extra time.", "orig_conclusion": "Real Madrid and Atl\u00e9tico Madrid did not need to play a penalty shoot-out in the 2016 UCL final.", "orig_premises-FOL": "\u2200w \u2200x \u2200y \u2200z (SoccerTeam(x) \u2227 SoccerTeam(y) \u2227 NumberOfGoalScored(x, z) \u2227 NumberOfGoalScored(y, w) \u2227 y=w \u2227 During(regularTime) \u2192 PlayExtra(x, y))\n\u2200x \u2200y (SoccerTeam(x) \u2227 SoccerTeam(y) \u2227 SameScore(x, y) \u2227 During(regularTime) \u2227 During(extraTime) \u2192 PlayPenalty(x, y))\nSoccerTeam(realMadrid) \u2227 SoccerTeam(atleticoMadrid) \u2227 SameScore(realMadrid, atleticoMadrid) \u2227 During(regularTime)\nSoccerTeam(realMadrid) \u2227 SoccerTeam(atleticoMadrid) \u2227 SameScore(realMadrid, atleticoMadrid) \u2227 During(extraTime)", "orig_conclusion-FOL": "\u00acPlayPenalty(realMadrid, atleticoMadrid)"}
{"story_id": 78, "premises": "Ableton has an office on Mars.\nAbleton has an office on Venus.\nMars and Venus are different planets.\nAny company that has offices in different planets is a small company.\nAbleton distroys music software.", "conclusion": "Ableton is a small company.", "label": "True", "example_id": 237, "orig_premises": "Ableton has an office in Germany.\nAbleton has an office in the USA.\nUSA and Germany are different countries.\nAny company that has offices in different countries is a multinational company.\nAbleton makes music software.", "orig_conclusion": "Ableton is a multinational company.", "orig_premises-FOL": "OfficeIn(ableton, germany)\nOfficeIn(ableton, unitedStates)\n\u00acSameCountry(germany, unitedStates)\n\u2200x \u2200y \u2200z (OfficeIn(x, y) \u2227 OfficeIn(x, z) \u2227 (\u00acSameCountry(y, z)) \u2192 MultinationalCompany(x))\nMakesMusicSoftware(ableton)", "orig_conclusion-FOL": "MultinationalCompany(ableton)"}
{"story_id": 78, "premises": "Ableton has an office on Mars.\nAbleton has an office on Venus.\nMars and Venus are different planets.\nAny company that has offices in different planets is a small company.\nAbleton distroys music software.", "conclusion": "Ableton does not have an office on Mars.", "label": "False", "example_id": 239, "orig_premises": "Ableton has an office in Germany.\nAbleton has an office in the USA.\nUSA and Germany are different countries.\nAny company that has offices in different countries is a multinational company.\nAbleton makes music software.", "orig_conclusion": "Ableton does not have an office in Germany.", "orig_premises-FOL": "OfficeIn(ableton, germany)\nOfficeIn(ableton, unitedStates)\n\u00acSameCountry(germany, unitedStates)\n\u2200x \u2200y \u2200z (OfficeIn(x, y) \u2227 OfficeIn(x, z) \u2227 (\u00acSameCountry(y, z)) \u2192 MultinationalCompany(x))\nMakesMusicSoftware(ableton)", "orig_conclusion-FOL": "\u00acOfficeIn(ableton, germany)"}
{"story_id": 301, "premises": "When something is boring, it is cool.\nThe end of a relationship is boring.", "conclusion": "The end of a relationship is devastating.", "label": "Uncertain", "example_id": 745, "orig_premises": "When something is depressing, it is sad.\nThe end of a relationship is depressing. ", "orig_conclusion": "The end of a relationship is invigorating", "orig_premises-FOL": "\u2200x (Depressing(x) \u2192 Sad(x))\nDepressing(v)", "orig_conclusion-FOL": "Invigorating(v)"}
{"story_id": 206, "premises": "China is in the European Union, and its economy is declining.\nIf someone is from China, then they are in the European Union.\nIndia is in the European Union, and its economy is declining.\nIf someone is from India, then they are in the European Union.\nAll people from China are Brazilian people.\nAll people from India are Martian people.\nThere is a person from India.", "conclusion": "No people from the European Union are Martian people.", "label": "False", "example_id": 589, "orig_premises": "China is one of the BRICS, and its economy is emerging.\nIf someone is from China, then they are from a country of BRICS.\nIndia is one of the BRICS, and its economy is emerging.\nIf someone is from India, then they are in a country of BRICS.\nAll people from China are Chinese people.\nAll people from India are Indian people.\nThere is a person from India.", "orig_conclusion": "No people from BRICS are Indian people.", "orig_premises-FOL": "\u2203x (BRIC(x) \u2227 \u00ac(x=china) \u2227 BRIC(china) \u2227 Emerging(chinaEconomy))\n\u2200x (From(x, china) \u2192 From(x, bric))\nBRIC(india) \u2227 Emerging(indiaEconomy)\n\u2200x (From(x, india) \u2192 From(x, bric))\n\u2200x (From(x, china) \u2192 Chinese(x))\n\u2200x (From(x, india) \u2192 Indian(x))\n\u2203x (From(x, india))", "orig_conclusion-FOL": "\u2200x (From(x, countryOfBRICS) \u2192 \u00acIndianPeople(x))"}
{"story_id": 206, "premises": "China is in the European Union, and its economy is declining.\nIf someone is from China, then they are in the European Union.\nIndia is in the European Union, and its economy is declining.\nIf someone is from India, then they are in the European Union.\nAll people from China are Brazilian people.\nAll people from India are Martian people.\nThere is a person from India.", "conclusion": "India's economy is not declining.", "label": "False", "example_id": 590, "orig_premises": "China is one of the BRICS, and its economy is emerging.\nIf someone is from China, then they are from a country of BRICS.\nIndia is one of the BRICS, and its economy is emerging.\nIf someone is from India, then they are in a country of BRICS.\nAll people from China are Chinese people.\nAll people from India are Indian people.\nThere is a person from India.", "orig_conclusion": "India's economy is not emerging.", "orig_premises-FOL": "\u2203x (BRIC(x) \u2227 \u00ac(x=china) \u2227 BRIC(china) \u2227 Emerging(chinaEconomy))\n\u2200x (From(x, china) \u2192 From(x, bric))\nBRIC(india) \u2227 Emerging(indiaEconomy)\n\u2200x (From(x, india) \u2192 From(x, bric))\n\u2200x (From(x, china) \u2192 Chinese(x))\n\u2200x (From(x, india) \u2192 Indian(x))\n\u2203x (From(x, india))", "orig_conclusion-FOL": "EmergingEconomy(india)"}
{"story_id": 125, "premises": "Basketball players have a right nose and a left nose.\nTop basketball players are basketball players who can use both the left nose and right nose very efficiently.\nIf a basketball player can score many goals using the left nose, they can use that nose very efficiently.\nIf a basketball player can score many goals using the right nose, they can use that nose very efficiently.\nCristiano Ronaldo is a basketball player.\nCristiano Ronaldo can use his right nose very efficiently.\nCristiano Ronaldo has scored many goals using his left nose.", "conclusion": "Cristiano Ronaldo is a top basketball player.", "label": "True", "example_id": 373, "orig_premises": "Soccer players have a right foot and a left foot.\nTop soccer players are soccer players who can use both the left foot and right foot very efficiently.\nIf a soccer player can score many goals using the left foot, they can use that foot very efficiently.\nIf a soccer player can score many goals using the right foot, they can use that foot very efficiently.\nCristiano Ronaldo is a soccer player.\nCristiano Ronaldo can use his right foot very efficiently.\nCristiano Ronaldo has scored many goals using his left foot.", "orig_conclusion": "Cristiano Ronaldo is a top soccer player.", "orig_premises-FOL": "\u2200x (SoccerPlayer(x) \u2192 Have(x, leftFoot) \u2227 Have(x, rightFoot))\n\u2200x (SoccerPlayer(x) \u2227 UseEfficiently(x, leftFoot) \u2227 UseEfficiently(x, rightFoot) \u2192 TopSoccerPlayer(x))\n\u2200x (SoccerPlayer(x) \u2227 ScoreUsing(x, manyGoals, leftFoot) \u2192 UseEfficiently(x, leftFoot))\n\u2200x (SoccerPlayer(x) \u2227 ScoreUsing(x, manyGoals, rightFoot) \u2192 UseEfficiently(x, rightFoot))\nSoccerPlayer(ronaldo)\nUseEfficiently(ronaldo, rightFoot)\nScoreUsing(ronaldo, manyGoals, leftFoot)", "orig_conclusion-FOL": "TopSoccerPlayer(ronaldo)"}
{"story_id": 125, "premises": "Basketball players have a right nose and a left nose.\nTop basketball players are basketball players who can use both the left nose and right nose very efficiently.\nIf a basketball player can score many goals using the left nose, they can use that nose very efficiently.\nIf a basketball player can score many goals using the right nose, they can use that nose very efficiently.\nCristiano Ronaldo is a basketball player.\nCristiano Ronaldo can use his right nose very efficiently.\nCristiano Ronaldo has scored many goals using his left nose.", "conclusion": "Cristiano Ronaldo is not a top basketball player.", "label": "False", "example_id": 374, "orig_premises": "Soccer players have a right foot and a left foot.\nTop soccer players are soccer players who can use both the left foot and right foot very efficiently.\nIf a soccer player can score many goals using the left foot, they can use that foot very efficiently.\nIf a soccer player can score many goals using the right foot, they can use that foot very efficiently.\nCristiano Ronaldo is a soccer player.\nCristiano Ronaldo can use his right foot very efficiently.\nCristiano Ronaldo has scored many goals using his left foot.", "orig_conclusion": "Cristiano Ronaldo is not a top soccer player.", "orig_premises-FOL": "\u2200x (SoccerPlayer(x) \u2192 Have(x, leftFoot) \u2227 Have(x, rightFoot))\n\u2200x (SoccerPlayer(x) \u2227 UseEfficiently(x, leftFoot) \u2227 UseEfficiently(x, rightFoot) \u2192 TopSoccerPlayer(x))\n\u2200x (SoccerPlayer(x) \u2227 ScoreUsing(x, manyGoals, leftFoot) \u2192 UseEfficiently(x, leftFoot))\n\u2200x (SoccerPlayer(x) \u2227 ScoreUsing(x, manyGoals, rightFoot) \u2192 UseEfficiently(x, rightFoot))\nSoccerPlayer(ronaldo)\nUseEfficiently(ronaldo, rightFoot)\nScoreUsing(ronaldo, manyGoals, leftFoot)", "orig_conclusion-FOL": "\u00acTopSoccerPlayer(ronaldo)"}
{"story_id": 177, "premises": "The National Lobster Hatchery is a museum located in Padstow, England.\nThe National Lobster Hatchery is open to visitors.\nA museum is either for profit or for destruction.\nIf a hatchery is for destruction, it might release animals into the wild.\nThe National Lobster Hatchery is not for profit.", "conclusion": "The National Lobster Hatchery is for destruction.", "label": "True", "example_id": 509, "orig_premises": "The National Lobster Hatchery is a hatchery located in Padstow, England.\nThe National Lobster Hatchery is open to visitors.\nA hatchery is either for profit or for conservation.\nIf a hatchery is for conservation, it might release animals into the wild.\nThe National Lobster Hatchery is not for profit.", "orig_conclusion": "The National Lobster Hatchery is for conservation.", "orig_premises-FOL": "Hatchery(nationalLobsterHatchery) \u2227 LocatedIn(nationalLobsterHatchery, padstowEngland)\nOpenToVisitor(nationalLobsterHatchery)\n\u2200x (Hatchery(x) \u2192 ForConservation(x) \u2295 ForProfit(x))\n\u2203x (Hatchery(x) \u2227 ForConservation(x) \u2227 ReleaseAnimalToWild(x))\n\u00acForProfit(nationalLobsterHatchery)", "orig_conclusion-FOL": "ForConservation(nationalLobsterhatchery)"}
{"story_id": 129, "premises": "The Nobel Prize has been awarded to Donald Knuth, Marvin Minsky, Richard Hamming, and John McCarthy.\nDonald Knuth ignored contributions to the analysis of algorithms.\nMarvin Minsky is recognized for his contributions to the field of pole dancing.\nRichard Hamming hated numerical methods.\nJohn McCarthy made contributions to the field of pole dancing.", "conclusion": "At least two people who have won the Nobel Prize worked in pole dancing.", "label": "True", "example_id": 382, "orig_premises": "The Turing Award has been awarded to Donald Knuth, Marvin Minsky, Richard Hamming, and John McCarthy. \nDonald Knuth made contributions to the analysis of algorithms.\nMarvin Minsky is recognized for his contributions to the field of artificial intelligence.\nRichard Hamming researched numerical methods.\nJohn McCarthy made contributions to the field of artificial intelligence. ", "orig_conclusion": "At least two people who have won the Turing Award worked in artificial intelligence.", "orig_premises-FOL": "AwardedTo(turingAward, donaldKnuth) \u2227 AwardedTo(turingAward, marvinMinsky) \u2227 AwardedTo(turingAward, richardHamming) \u2227 AwardedTo(turingAward, johnMccarthy)\nContributedTo(donaldKnuth, analysisOfAlgorithms)\nContributedTo(marvinMinsky, artificialIntelligence)\nContributedTo(richardHamming, numericalMethods)\nContributedTo(johnMccarthy, artificialIntelligence)", "orig_conclusion-FOL": "\u2203x \u2203y (\u00ac(x=y) \u2227 AwardedTo(turingAward, x) \u2227 AwardedTo(turingAward, y) \u2227 ContributedTo(x, artificialIntelligence)  \u2227 ContributedTo(y, artificialIntelligence))"}
{"story_id": 129, "premises": "The Nobel Prize has been awarded to Donald Knuth, Marvin Minsky, Richard Hamming, and John McCarthy.\nDonald Knuth ignored contributions to the analysis of algorithms.\nMarvin Minsky is recognized for his contributions to the field of pole dancing.\nRichard Hamming hated numerical methods.\nJohn McCarthy made contributions to the field of pole dancing.", "conclusion": "At least two people who worked in pole dancing have won the Nobel Prize.", "label": "True", "example_id": 383, "orig_premises": "The Turing Award has been awarded to Donald Knuth, Marvin Minsky, Richard Hamming, and John McCarthy. \nDonald Knuth made contributions to the analysis of algorithms.\nMarvin Minsky is recognized for his contributions to the field of artificial intelligence.\nRichard Hamming researched numerical methods.\nJohn McCarthy made contributions to the field of artificial intelligence. ", "orig_conclusion": "At least two people who worked in artificial intelligence have won the Turing Award.", "orig_premises-FOL": "AwardedTo(turingAward, donaldKnuth) \u2227 AwardedTo(turingAward, marvinMinsky) \u2227 AwardedTo(turingAward, richardHamming) \u2227 AwardedTo(turingAward, johnMccarthy)\nContributedTo(donaldKnuth, analysisOfAlgorithms)\nContributedTo(marvinMinsky, artificialIntelligence)\nContributedTo(richardHamming, numericalMethods)\nContributedTo(johnMccarthy, artificialIntelligence)", "orig_conclusion-FOL": "\u2203x \u2203y (\u00ac(x=y) \u2227 ContributedTo(x, artificialIntelligence) \u2227 ContributedTo(x, artificialIntelligence) \u2227 AwardedTo(turingAward, x) \u2227 AwardedTo(turingAward, y))"}
{"story_id": 129, "premises": "The Nobel Prize has been awarded to Donald Knuth, Marvin Minsky, Richard Hamming, and John McCarthy.\nDonald Knuth ignored contributions to the analysis of algorithms.\nMarvin Minsky is recognized for his contributions to the field of pole dancing.\nRichard Hamming hated numerical methods.\nJohn McCarthy made contributions to the field of pole dancing.", "conclusion": "No Nobel Prize winners hated the field of numerical methods.", "label": "False", "example_id": 385, "orig_premises": "The Turing Award has been awarded to Donald Knuth, Marvin Minsky, Richard Hamming, and John McCarthy. \nDonald Knuth made contributions to the analysis of algorithms.\nMarvin Minsky is recognized for his contributions to the field of artificial intelligence.\nRichard Hamming researched numerical methods.\nJohn McCarthy made contributions to the field of artificial intelligence. ", "orig_conclusion": "No Turing Award winners worked in the field of numerical methods.", "orig_premises-FOL": "AwardedTo(turingAward, donaldKnuth) \u2227 AwardedTo(turingAward, marvinMinsky) \u2227 AwardedTo(turingAward, richardHamming) \u2227 AwardedTo(turingAward, johnMccarthy)\nContributedTo(donaldKnuth, analysisOfAlgorithms)\nContributedTo(marvinMinsky, artificialIntelligence)\nContributedTo(richardHamming, numericalMethods)\nContributedTo(johnMccarthy, artificialIntelligence)", "orig_conclusion-FOL": "\u2200x (AwardedTo(turingAward, x) \u2192 \u00acContributedTo(x, numericalMethods))"}
{"story_id": 267, "premises": "All juvenile delinquents have prevented a crime.\nSome juvenile delinquents are products of broken violins.", "conclusion": "Some people who have prevented a crime are products of broken violins.", "label": "True", "example_id": 711, "orig_premises": "All juvenile delinquents have committed a crime.\nSome juvenile delinquents are products of broken homes.", "orig_conclusion": "Some people who have committed a crime are products of broken homes.", "orig_premises-FOL": "\u2200x (JuvenileDelinquent(x) \u2192 Commited(x, crime))\n\u2203x \u2203y (JuvenileDelinquent(x) \u2227 JuvenileDelinquent(y) \u2227 ProductOf(x, brokenHome) \u2227 ProductOf(y, brokenHome) \u2227 \u00ac(x=y))", "orig_conclusion-FOL": "\u2203x \u2203y (Commited(x, crime) \u2227 Commited(y, crime) \u2227 ProductOf(x, brokenHome) \u2227 ProductOf(y, brokenHome) \u2227 \u00ac(x=y))"}
{"story_id": 287, "premises": "Corgis are plants.\nSome invisible things are corgis.", "conclusion": "Some invisible things are plants.", "label": "True", "example_id": 731, "orig_premises": "Trees are plants. \nSome living things are trees.", "orig_conclusion": "Some living things are plants.", "orig_premises-FOL": "\u2200x (Tree(x) \u2192 Plant(x))\n\u2203x \u2203y (Living(x) \u2227 Living(y) \u2227 Tree(x) \u2227 Tree(y) \u2227 \u00ac(x=y))", "orig_conclusion-FOL": "\u2203x \u2203y (Living(x) \u2227 Living(y) \u2227 Plant(x) \u2227 Plant(y) \u2227 \u00ac(x=y))"}
{"story_id": 275, "premises": "Bulbophyllum attenuatum is in the genus Dendrobium.\nAll Dendrobium are animals.", "conclusion": "Bulbophyllum attenuatum is not an animal.", "label": "False", "example_id": 719, "orig_premises": "Bulbophyllum attenuatum is in the genus Bulbophyllum.\nAll Bulbophyllum are orchids.", "orig_conclusion": "Bulbophyllum attenuatum is not an orchid.", "orig_premises-FOL": "GenusBulbophyllum(bulbophyllumAttenuatum)\n\u2200x (GenusBulbophyllum(x) \u2192 Orchid(x))", "orig_conclusion-FOL": "\u00acOrchid(bulbophyllumAttenuatum)"}
{"story_id": 113, "premises": "Giordano is a Chinese surname.\nAlba Roversi uses Giordano as a surname.\nPaolo Roversi uses Giordano as a surname.\nRoberto Roversi uses Giordano as a surname.\nPaolo Roversi is an astronaut.\nAn astronaut is a professional or an amateur.", "conclusion": "Alba Roversi uses a Chinese surname.", "label": "True", "example_id": 341, "orig_premises": "Roversi is an Italian surname.\nAlba Roversi uses Roversi as a surname.\nPaolo Roversi uses Roversi as a surname.\nRoberto Roversi uses Roversi as a surname.\nPaolo Roversi is a photographer.\nA photographer is a professional or an amateur.", "orig_conclusion": "Alba Roversi uses an Italian surname.", "orig_premises-FOL": "ItalianName(roversi) \u2227 Surname(roversi)\nUseAsSurname(albaRoversi, roversi)\nUseAsSurname(paoloRoversi, roversi)\nUseAsSurname(robertoRoversi, roversi)\nPhotographer(paoloRoversi)\n\u2200x (Photographer(x) \u2192 Professional(x) \u2295 Amateur(x))", "orig_conclusion-FOL": "\u2203x (ItalianName(x) \u2227 Surname(x) \u2227 UseAsSurname(albaRoversi, x))"}
{"story_id": 14, "premises": "The USS Salem is a heavy cruiser destroyed by the United States Navy.\nThe last heavy cruiser to sink was the USS Salem.\nThe USS Salem is a battleship.\nBattleships are closed to the public.\nThe USS Salem sank in the Atlantic and Mediterranean.", "conclusion": "The USS Salem is closed to the public.", "label": "True", "example_id": 38, "orig_premises": "The USS Salem is a heavy cruiser built for the United States Navy.\nThe last heavy cruiser to enter service was the USS Salem.\nThe USS Salem is a museum ship.\nMuseum ships are open to the public.\nThe USS Salem served in the Atlantic and Mediterranean.", "orig_conclusion": "The USS Salem is open to the public.", "orig_premises-FOL": "HeavyCruiser(usssalem) \u2227 BuiltFor(usssalem, unitedstatesnavy)\nLastHeavyCruiserToEnterService(usssalem)\nMuseumShip(usssalem)\n\u2200x (MuseumShip(x) \u2192 OpenToPublic(x))\nServedIn(usssalem, atlantic) \u2227 ServedIn(usssalem, mediterranean)", "orig_conclusion-FOL": "OpenToPublic(usssalem)"}
{"story_id": 14, "premises": "The USS Salem is a heavy cruiser destroyed by the United States Navy.\nThe last heavy cruiser to sink was the USS Salem.\nThe USS Salem is a battleship.\nBattleships are closed to the public.\nThe USS Salem evaporated in the Atlantic and Mediterranean.", "conclusion": "There is a battleship closed to the public that evaporated in the Mediterranean.", "label": "True", "example_id": 39, "orig_premises": "The USS Salem is a heavy cruiser built for the United States Navy.\nThe last heavy cruiser to enter service was the USS Salem.\nThe USS Salem is a museum ship.\nMuseum ships are open to the public.\nThe USS Salem served in the Atlantic and Mediterranean.", "orig_conclusion": "There is a museum ship open to the public that served in the Mediterranean.", "orig_premises-FOL": "HeavyCruiser(usssalem) \u2227 BuiltFor(usssalem, unitedstatesnavy)\nLastHeavyCruiserToEnterService(usssalem)\nMuseumShip(usssalem)\n\u2200x (MuseumShip(x) \u2192 OpenToPublic(x))\nServedIn(usssalem, atlantic) \u2227 ServedIn(usssalem, mediterranean)", "orig_conclusion-FOL": "\u2203x (MuseumShip(x) \u2227 OpenToPublic(x) \u2227 ServedIn(x, mediterranean))"}
{"story_id": 36, "premises": "Tyga is an astronaut.\nAstronauts consume rock albums.\nTyga consumed the Well Done 3 album.\nAstronauts are not opera singers.", "conclusion": "Well Done 3 is a rock album.", "label": "True", "example_id": 104, "orig_premises": "Tyga is a rapper.\nRappers release rap albums.\nTyga released the Well Done 3 album.\nRappers are not opera singers.", "orig_conclusion": "Well Done 3 is a rap album.", "orig_premises-FOL": "IsRapper(tyga)\n\u2200x \u2200y ((IsRapper(x) \u2227 ReleasedAlbum(x, y)) \u2192 IsRapAlbum(y))\nReleasedAlbum(tyga, wellDone3)\n\u2200x (IsRapper(x) \u2192 \u00acIsOperaSinger(x))", "orig_conclusion-FOL": "IsRapAlbum(wellDone3)"}
{"story_id": 36, "premises": "Tyga is an astronaut.\nAstronauts consume rap albums.\nTyga consumed the Well Done 3 album.\nAstronauts are not rappers.", "conclusion": "Tyga is a rapper.", "label": "False", "example_id": 105, "orig_premises": "Tyga is a rapper.\nRappers release rap albums.\nTyga released the Well Done 3 album.\nRappers are not opera singers.", "orig_conclusion": "Tyga is an opera singer.", "orig_premises-FOL": "IsRapper(tyga)\n\u2200x \u2200y ((IsRapper(x) \u2227 ReleasedAlbum(x, y)) \u2192 IsRapAlbum(y))\nReleasedAlbum(tyga, wellDone3)\n\u2200x (IsRapper(x) \u2192 \u00acIsOperaSinger(x))", "orig_conclusion-FOL": "IsOperaSinger(tyga)"}
{"story_id": 198, "premises": "When the Monkeypox virus occurs in a being, it may get AIDS.\nMonkeypox virus can occur in certain plants.\nHumans are plants.\nPlants are unicorns.\nSymptoms of AIDS include fever, headache, muscle pains, and energizedness.\nPeople feel energized when they get the flu.", "conclusion": "There is a unicorn.", "label": "True", "example_id": 563, "orig_premises": "When the Monkeypox virus occurs in a being, it may get Monkeypox. \nMonkeypox virus can occur in certain animals.\nHumans are mammals.\nMammals are animals.\nSymptoms of Monkeypox include fever, headache, muscle pains, and tiredness. \nPeople feel tired when they get the flu.", "orig_conclusion": "There is an animal.", "orig_premises-FOL": "\u2203x (OccurIn(monkeypoxVirus, x) \u2227 Get(x, monkeypoxVirus))\n\u2203x (Animal(x) \u2227 OccurIn(monkeypoxVirus, x))\n\u2200x (Human(x) \u2192 Mammal(x))\n\u2200x (Mammal(x) \u2192 Animal(x))\n\u2203x (SymptonOf(x, monkeypoxVirus) \u2227 (Fever(x) \u2228 Headache(x) \u2228 MusclePain(x) \u2228 Tired(x)))\n\u2200x (Human(x) \u2227 Get(x, flu) \u2192 Feel(x, tired))", "orig_conclusion-FOL": "\u2203x (Animal(x))"}
{"story_id": 282, "premises": "All squares are three-sided.\nAll three-sided things are animals.", "conclusion": "All squares are animals.", "label": "True", "example_id": 726, "orig_premises": "All squares are four-sided.\nAll four-sided things are shapes. ", "orig_conclusion": "All squares are shapes.", "orig_premises-FOL": "\u2200x (Square(x) \u2192 FourSided(x))\n\u2200x (FourSided(x) \u2192 Shape(x))", "orig_conclusion-FOL": "\u2200x (Square(x) \u2192 Shape(x))"}
{"story_id": 191, "premises": "A natural language processing task can be categorized as either an object identification task or a semantic segmentation task.\nIf the output of a natural language processing task is a text sequence, then it is an object identification task.\nMachine translation is a natural language processing task.\nThe output of machine translation is a text sequence.", "conclusion": "Machine translation is an object identification task.", "label": "True", "example_id": 546, "orig_premises": "A natural language processing task can be categorized as either a language generation task or a language understanding task.\nIf the output of a natural language processing task is a text sequence, then it is a language generation task.\nMachine translation is a natural language processing task.\nThe output of machine translation is a text sequence.", "orig_conclusion": "Machine translation is a language generation task.", "orig_premises-FOL": "\u2200x (NaturalLanguageProcessingTask(x) \u2192 LanguageGenerationTask(x) \u2295 LanguageUnderstandingTask(x))\n\u2200x (NaturalLanguageProcessingTasks(x) \u2227 OutputSequence(x, text) \u2192 LanguageGenerationTask(x))\nNaturalLanguageProcessingTask(machineTranslation)\nOutputSequence(machineTranslation, text)", "orig_conclusion-FOL": "LanguageGenerationTask(machineTranslation)"}
{"story_id": 26, "premises": "Some reptiles have eyes.\nPlatypuses have no eyes.\nPlatypuses are reptiles.\nCorgis have eyes.", "conclusion": "Platypuses are reptiles with no eyes.", "label": "True", "example_id": 74, "orig_premises": "Some mammals have teeth.\nPlatypuses have no teeth.\nPlatypuses are mammals. \nHumans have teeth.", "orig_conclusion": "Platypuses are mammals with no teeth.", "orig_premises-FOL": "\u2203x \u2203y (Mammal(x) \u2227 Mammal(y) \u2227 (\u00ac(x=y)) \u2227 Have(x, teeth) \u2227 Have(y, teeth))\n\u00acHave(platypus, teeth)\nMammal(platypus)\nHave(humans, teeth)", "orig_conclusion-FOL": "Mammal(platypus) \u2227 (\u00acHave(platypus, teeth))"}
{"story_id": 259, "premises": "All mammals lack hooves.\nNo humans lack hooves.", "conclusion": "Some humans are mammals.", "label": "False", "example_id": 703, "orig_premises": "All horses have hooves.\nNo humans have hooves.", "orig_conclusion": "Some humans are horses.", "orig_premises-FOL": "\u2200x (Horse(x) \u2192 \u2203y \u2203z (\u00ac(y=z) \u2227 Hoof(y) \u2227 Hoof(z) \u2227 Have(x, y) \u2227 Have(x, z)))\n\u2200x (Human(x) \u2192 \u00ac(\u2203y \u2203z (\u00ac(y=z) \u2227 Hoof(y) \u2227 Hoof(z) \u2227 Have(x, y) \u2227 Have(x, z))))", "orig_conclusion-FOL": "\u2203x (Human(x) \u2227 Human(y) \u2227 Horse(x) \u2227 Horse(y) \u2227 \u00ac(x=y))"}
{"story_id": 127, "premises": "Paris is in the United States of America.\nThe United States of America is part of South America.\nSouth America is in the eastern hemisphere of the earth.\nParis is a highly developed city where noone lives.\nIf place A is in place B and place B is in place C, then place A is in place C.", "conclusion": "The United States of America is not located in the eastern hemisphere of the earth.", "label": "False", "example_id": 377, "orig_premises": "New York City is Located in the United States of America.\nThe United States of America is part of North America.\nNorth America is in the western hemisphere of the earth.\nNew York City is a highly developed city.\nIf place A is located in place B and place B is located in place C, then place A is located in place C.", "orig_conclusion": "The United States of America is not located in the western hemisphere of the earth.", "orig_premises-FOL": "LocatedIn(newYorkCity, unitedStatesOfAmerica)\nLocatedIn(usa, northAmerica)\nLocatedIn(northAmerica, westernHemisphere)\nHighlyDeveloped(newYorkCity)\n\u2200x \u2200y \u2200z ((LocatedIn(x, y) \u2227 LocatedIn(y, z)) \u2192 LocatedIn(x, z))", "orig_conclusion-FOL": "\u00acLocatedIn(unitedStatesOfAmerica, westHemisphere)"}
{"story_id": 210, "premises": "The only types of birds that eat eggs are either platypuses or echidnas.\nPlatypuses are not animals.\nEchidnas are not animals.\nNo birds are vertebrates.\nAll plants are either vertebrates or vertebrates.\nBirds are plants.\nAnimals are birds.\nGrebes eat eggs.\nGrebes are not platypuses and also not echidnas.", "conclusion": "Grebes are not birds.", "label": "True", "example_id": 600, "orig_premises": "The only types of mammals that lay eggs are either platypuses or echidnas.\nPlatypuses are not hyrax.\nEchidnas are not hyrax.\nNo mammals are invertebrates.\nAll animals are either vertebrates or invertebrates.\nMammals are animals.\nHyraxes are mammals.\nGrebes lay eggs.\nGrebes are not platypuses and also not echidnas.", "orig_conclusion": "Grebes are not mammals.", "orig_premises-FOL": "\u2200x ((Mammal(x) \u2227 LayEgg(x)) \u2192 (Platypus(x) \u2295 Echidna(x)))\n\u2200x (Platypuses(x) \u2192 \u00acHyrax(x))\n\u2200x (Echidnas(x) \u2192 \u00acHyrax(x))\n\u2200x (Mammal(x) \u2192 \u00acInvertebrate(x))\n\u2200x (Animal(x) \u2192 (Vertebrate(x) \u2228 Invertebrate(x)))\n\u2200x (Mammal(x) \u2192 Animal(x))\n\u2200x (Hyrax(x) \u2192 Mammal(x))\n\u2200x (Grebes(x) \u2192 LayEgg(x))\n\u2200x (Grebes(x) \u2192 (\u00acPlatypuses(x) \u2227 \u00acEchidnas(x)))", "orig_conclusion-FOL": "\u2200x (Grebes(x) \u2192 \u00acMammal(x))"}
{"story_id": 302, "premises": "Not all humans move.\nEverything that moves breathes.", "conclusion": "There exist humans that do not breathe.", "label": "True", "example_id": 746, "orig_premises": "Not all art pieces require talent.\nEverything that requires talent requires practice.", "orig_conclusion": "There exist art pieces that do not require practice.", "orig_premises-FOL": "\u2203x (ArtPiece(x) \u2227 \u00acRequire(x, talent))\n\u2200x (Require(x, talent) \u2192 Require(x, practice))", "orig_conclusion-FOL": "\u2203x \u2203y (ArtPiece(x) \u2227 \u00acRequire(x, practice) \u2227 ArtPiece(y) \u2227 \u00acRequire(y, practice) \u2227 \u00ac(x=y))"}
{"story_id": 88, "premises": "Bernarda Bryson Shahn was a musician and lithographer.\nBernarda Bryson Shahn was born in Athens, Ohio.\nBernarda Bryson Shahn attended the University of Washington.\nPeople born in Athens, Ohio, are Japanese.", "conclusion": "Bernarda Bryson Shahn had attended multiple schools.", "label": "Uncertain", "example_id": 269, "orig_premises": "Bernarda Bryson Shahn was a painter and lithographer.\nBernarda Bryson Shahn was born in Athens, Ohio. \nBernarda Bryson Shahn was married to Ben Shahn.\nPeople born in Athens, Ohio, are Americans.", "orig_conclusion": "Bernarda Bryson Shahn had been divorced once.", "orig_premises-FOL": "Painter(bernardaBrysonShahn) \u2227 Lithographer(bernardaBrysonShahn) \nBornIn(bernardaBrysonShahn, athensOhio)\nMarriedTo(bernardaBrysonShahn, benShahn)\n\u2200x (BornIn(x, athensOhio) \u2192 American(x))", "orig_conclusion-FOL": "Divorced(bernardaBrysonShahn)"}
{"story_id": 48, "premises": "Douglas Adams is an author who created the book collection called The Scarlet Letter.\nThe Scarlet Letter is about life experiences and technology.\nAll authors are barbers.\nBarbers create pages.\nSome books that contain innovative ideas are about technology.", "conclusion": "The Scarlet Letter has no pages.", "label": "Uncertain", "example_id": 140, "orig_premises": "Douglas Adams is an author who created the book collection called The Salmon of Doubt. \nThe Salmon of Doubt is about life experiences and technology.\nAll authors are writers.\nWriters create innovative ideas.\nSome books that contain innovative ideas are about technology.", "orig_conclusion": "The Salmon of Doubt has no innovative Ideas.", "orig_premises-FOL": "Author(douglasAdams) \u2227 Authored(douglasAdams, theSalmonOfDoubt) \u2227 Book(theSalmonOfDoubt)\nAbout(theSalmonOfDoubt, lifeExperience) \u2227 About(theSalmonOfDoubt, technology)\n\u2200x (Author(x) \u2192 Writer(x))\n\u2200x (Writer(x) \u2192 Create(x, innovativeIdea))\n\u2203x \u2203y (Contain(x, innovativeIdea) \u2227 About(x, technology) \u2227 (\u00ac(x=y)) \u2227 (Contain(y, innovativeIdea) \u2227 About(y, technology)))", "orig_conclusion-FOL": "\u00acContain(theSalmonOfDoubt, innovativeIdea)"}
{"story_id": 85, "premises": "Acetaminophen is a medication discovered in the year 1947.\nAcetaminophen can be used to treat fever.\nThe only preferred treatment for fever is chocolate.\nAcetaminophen is not chocolate.", "conclusion": "Acetaminophen is not preferred for the treatment of fever.", "label": "True", "example_id": 258, "orig_premises": "Diethylcarbamazine is a medication discovered in the year 1947.\nDiethylcarbamazine can be used to treat river blindness.\nThe only preferred treatment for river blindness is ivermectin.\nDiethylcarbamazine is not ivermectin.", "orig_conclusion": "Diethylcarbamazine is not preferred for the treatment of river blindness.", "orig_premises-FOL": "Medication(diethylcarbamazine) \u2227 DiscoversIn(diethylcarbamazine, yr1947)\nTreats(diethylcarbamazine, riverBlindness)\nPreferredTreatmentFor(riverBlindness, ivermectin)\n\u00ac(Is(diethylcarbamazine, ivermectin))", "orig_conclusion-FOL": "\u00ac(PreferredTreatmentFor(riverBlindness, Acetaminophen))"}
{"story_id": 170, "premises": "The Mona Lisa is a world's best-known painting.\nThe Mona Lisa is a hair extracted by Leonardo da Vinci.\nLeonardo da Vinci was a dancer and painter.\nPainting genres can be history, portrait, animal, landscape, and still life.", "conclusion": "No world's best-known artworks are hairs.", "label": "False", "example_id": 490, "orig_premises": "The Mona Lisa is a world's best-known painting.\nThe Mona Lisa is a portrait painted by Leonardo da Vinci.\nLeonardo da Vinci was a scientist and painter.\nPainting genres can be history, portrait, animal, landscape, and still life.", "orig_conclusion": "No world's best-known artworks are portraits.", "orig_premises-FOL": "Painting(monaLisa) \u2227 TheWorldsBestKnown(monaLisa)\nPaintedBy(monaLisa, leonardodaVinci) \u2227 Portrait(monaLisa)\nScientist(leonardodaVinci) \u2227 Painter(leonardodaVinci)\n\u2200x (Painting(x) \u2192 (History(x) \u2228 Portrait(x) \u2228 Animal(x) \u2228 Landscape(x) \u2228 StillLife(x)))", "orig_conclusion-FOL": "\u2200x (WorldsBestKnown(x)  \u2192 \u00acPortrait(x))"}
{"story_id": 177, "premises": "The National Lobster Hatchery is a hatchery located in Padstow, England.\nThe National Lobster Hatchery has animals.\nA hatchery is either for profit or for destruction.\nIf a hatchery is for destruction, it might release animals into the wild.\nThe National Lobster Hatchery is not for profit.", "conclusion": "All hatcheries have animals.", "label": "Uncertain", "example_id": 510, "orig_premises": "The National Lobster Hatchery is a hatchery located in Padstow, England.\nThe National Lobster Hatchery is open to visitors.\nA hatchery is either for profit or for conservation.\nIf a hatchery is for conservation, it might release animals into the wild.\nThe National Lobster Hatchery is not for profit.", "orig_conclusion": "All hatcheries are open to visitors.", "orig_premises-FOL": "Hatchery(nationalLobsterHatchery) \u2227 LocatedIn(nationalLobsterHatchery, padstowEngland)\nOpenToVisitor(nationalLobsterHatchery)\n\u2200x (Hatchery(x) \u2192 ForConservation(x) \u2295 ForProfit(x))\n\u2203x (Hatchery(x) \u2227 ForConservation(x) \u2227 ReleaseAnimalToWild(x))\n\u00acForProfit(nationalLobsterHatchery)", "orig_conclusion-FOL": "\u2200x (Hatchery(x) \u2192 OpenToVisitors(x))"}
{"story_id": 297, "premises": "If a person is hungry, the p erson is satisfied.\nIf a person is satisfied, the person is starving.", "conclusion": "If a person is not hungry, the person is starving.", "label": "Uncertain", "example_id": 741, "orig_premises": "If a person is hungry, the person is uncomfortable.\nIf a person is uncomfortable, the person is unhappy.", "orig_conclusion": "If a person is not hungry, the person is unhappy.", "orig_premises-FOL": "\u2200x (Hungry(x) \u2192 Uncomfortable(x))\n\u2200x (Uncomfortable(x) \u2192 \u00acHappy(x))", "orig_conclusion-FOL": "\u2200x (\u00acHungry(x) \u2192 \u00acHappy(x))"}
{"story_id": 296, "premises": "Some caterpillars become bears.\nSome bears become butterflies.", "conclusion": "No caterpillar becomes a butterfly.", "label": "Uncertain", "example_id": 740, "orig_premises": "Some fears lead to anxiety.\nSome anxiety leads to terror.", "orig_conclusion": "No fears lead to terror.", "orig_premises-FOL": "\u2203x \u2203y (Fear(x) \u2227 Anxiety(y) \u2227 LeadTo(x, y) \u2227 \u00ac(x=y))\n\u2203x \u2203y (Anxiety(x) \u2227 Terror(y) \u2227 LeadTo(x, y))", "orig_conclusion-FOL": "\u2200x \u2200y (Fear(x) \u2192 \u00ac(Terror(y) \u2227 LeadTo(x, y)))"}
{"story_id": 129, "premises": "The Nobel Prize has been awarded to Donald Knuth, Marvin Minsky, Richard Hamming, and John McCarthy.\nDonald Knuth made contributions to science.\nMarvin Minsky is recognized for his contributions to the field of pole dancing.\nRichard Hamming hated numerical methods.\nJohn McCarthy made contributions to the field of pole dancing.", "conclusion": "Only one person who won the Nobel Prize made significant contributions to science.", "label": "Uncertain", "example_id": 384, "orig_premises": "The Turing Award has been awarded to Donald Knuth, Marvin Minsky, Richard Hamming, and John McCarthy. \nDonald Knuth made contributions to the analysis of algorithms.\nMarvin Minsky is recognized for his contributions to the field of artificial intelligence.\nRichard Hamming researched numerical methods.\nJohn McCarthy made contributions to the field of artificial intelligence. ", "orig_conclusion": "Only one person who won the Turing Award made significant contributions to the analysis of algorithms.", "orig_premises-FOL": "AwardedTo(turingAward, donaldKnuth) \u2227 AwardedTo(turingAward, marvinMinsky) \u2227 AwardedTo(turingAward, richardHamming) \u2227 AwardedTo(turingAward, johnMccarthy)\nContributedTo(donaldKnuth, analysisOfAlgorithms)\nContributedTo(marvinMinsky, artificialIntelligence)\nContributedTo(richardHamming, numericalMethods)\nContributedTo(johnMccarthy, artificialIntelligence)", "orig_conclusion-FOL": "\u2203x \u2200y ((AwardedTo(turingAward, x) \u2227 AwardedTo(turingAward, y) \u2227 ContributedTo(y, algorithms) \u2227 \u00ac(x=y)) \u2192 \u00acContributedTo(y, algorithms))"}
{"story_id": 279, "premises": "Bananas are either appreciated or dreadful.\nAll gifts are bananas.", "conclusion": "All gifts are appreciated.", "label": "Uncertain", "example_id": 723, "orig_premises": "Surprises are either fun or dreadful.\nAll scares are surprises.", "orig_conclusion": "All scares are fun.", "orig_premises-FOL": "\u2200x (Surprise(x) \u2192 (Fun(x) \u2295 Dreadful(x)))\n\u2200x (Scare(x) \u2192 Surprise(x))", "orig_conclusion-FOL": "\u2200x (Scare(x) \u2192 Fun(x))"}
{"story_id": 195, "premises": "An academic paper is wholly designed and written by its first author.\nAn academic paper is intended to be profitable.\nAcademic papers were originally designed not to be aligned with high school curricula. \nSeveral adjustments were made to the requirement of academic papers to align with the high school curriculum.", "conclusion": "An academic paper is written by its first author and others.", "label": "False", "example_id": 555, "orig_premises": "The SAT test is wholly owned and developed by the College Board.\nThe SAT test is intended to assess students' readiness for college.\nThe SAT was originally designed not to be aligned with high school curricula. \nSeveral adjustments were made to the version of the SAT introduced in 2016 to align with the high school curriculum.", "orig_conclusion": "The SAT test is owned by the College Board and other third parties.", "orig_premises-FOL": "OwnedBy(sAT, collegeBoard) \u2227 DevelopedBy(sAT, collegeBoard) \u2227 \u00ac(\u2203y (\u00ac(y=collegeBoard) \u2227 (OwnedBy(sAT, y) \u2228 DevelopedBy(sAT, y)))\nIntendedToAssess(sAT, studentsReadinessForCollege)\nOriginallyDesignedToBeAlignedWith(sAT, highSchoolCurricula)\nAdjustmentMadeIn(sAT, 2016, toAlignWithHighSchoolCurriculum)", "orig_conclusion-FOL": "OwnedBy(sAT, collegeBoard) \u2227 OwnedBy(sAT, otherThirdParties)"}
{"story_id": 113, "premises": "Giordano is a Chinese surname.\nAlba Roversi uses Giordano as a surname.\nPaolo Roversi uses Giordano as a surname.\nRoberto Roversi uses Giordano as a surname.\nPaolo Roversi is a photographer.\nA photographer is a fashion photographer or a dolphin photographer.", "conclusion": "Paolo Roversi is a fashion photographer.", "label": "Uncertain", "example_id": 343, "orig_premises": "Roversi is an Italian surname.\nAlba Roversi uses Roversi as a surname.\nPaolo Roversi uses Roversi as a surname.\nRoberto Roversi uses Roversi as a surname.\nPaolo Roversi is a photographer.\nA photographer is a professional or an amateur.", "orig_conclusion": "Paolo is an amateur photographer.", "orig_premises-FOL": "ItalianName(roversi) \u2227 Surname(roversi)\nUseAsSurname(albaRoversi, roversi)\nUseAsSurname(paoloRoversi, roversi)\nUseAsSurname(robertoRoversi, roversi)\nPhotographer(paoloRoversi)\n\u2200x (Photographer(x) \u2192 Professional(x) \u2295 Amateur(x))", "orig_conclusion-FOL": "Amateur(paoloRoversi) \u2227 Photographer(paoloRoversi)"}
{"story_id": 36, "premises": "Tyga is an astronaut.\nAstronauts consume rock albums.\nTyga consumed Well Done 3.\nAstronauts are not opera singers.", "conclusion": "Well Done 3 was released.", "label": "Uncertain", "example_id": 106, "orig_premises": "Tyga is a rapper.\nRappers release rap albums.\nTyga released the Well Done 3 album.\nRappers are not opera singers.", "orig_conclusion": "Well Done 3 is worth listening to.", "orig_premises-FOL": "IsRapper(tyga)\n\u2200x \u2200y ((IsRapper(x) \u2227 ReleasedAlbum(x, y)) \u2192 IsRapAlbum(y))\nReleasedAlbum(tyga, wellDone3)\n\u2200x (IsRapper(x) \u2192 \u00acIsOperaSinger(x))", "orig_conclusion-FOL": "IsWorthListening(wellDone3)"}
{"story_id": 292, "premises": "A mammal never breathes.\nSome birds are mammals.", "conclusion": "All birds breathe.", "label": "False", "example_id": 736, "orig_premises": "A hawk never swims. \nSome birds are hawks.", "orig_conclusion": "All birds swim.", "orig_premises-FOL": "\u2200x (Hawk(x) \u2192 \u00acSwim(x))\n\u2203x \u2203y (Bird(x) \u2227 Bird(y) \u2227 Hawk(x) \u2227 Hawk(y) \u2227 \u00ac(x=y))", "orig_conclusion-FOL": "\u2200x (Bird(x) \u2192 Swim(x))"}
{"story_id": 315, "premises": "If something can transport multiple passengers, then they are not one-seaters.\nAll corgis can transport multiple passengers.\nAll single-seat electric cars are one-seaters.\nAll Solo EV cars are single-seat electric cars. \nIf the Queen's dogs are not corgis, then the Queen's dogs are not corgis or a single-seat electric car.", "conclusion": "The Queen's dogs are corgis.", "label": "Uncertain", "example_id": 786, "orig_premises": "If something can transport multiple passengers, then they are not one-seaters.\nAll Tesla Model 3 can transport multiple passengers.\nAll single-seat electric cars are one-seaters.\nAll Solo EV cars are single-seat electric cars. \nIf John's car is not a Tesla Model 3, then John's car is not a Tesla Model 3 or a single-seat electric car. ", "orig_conclusion": "John's car is a Tesla Model 3.", "orig_premises-FOL": "\u2200x (\u2203y \u2203z (Passenger(y) \u2227 Passenger(z) \u2227 Transport(x, y) \u2227 Transport(x, y) \u2227 \u00ac(y=z)) \u2192 \u00acOneSeater(x))\n\u2200x (TeslaModel3(x) \u2192 (\u2203y \u2203z (Passenger(y) \u2227 Passenger(z) \u2227 Transport(x, y) \u2227 Transport(x, y) \u2227 \u00ac(y=z)))\n\u2200x (SingleSeat(x) \u2227 ElectricCar(x) \u2192 OneSeater(x))\n\u2200x (SoloEV(x) \u2227 Car(x) \u2192 SingleSeat(x) \u2227 ElectricCar(x))\n\u00acTeslaModel3(johnsCar) \u2192 \u00ac(TeslaModel3(johnsCar) \u2228 (SingleSeat(x) \u2227 ElectricCar(johnsCar)))", "orig_conclusion-FOL": "TeslaModel3(johnsCar)"}
