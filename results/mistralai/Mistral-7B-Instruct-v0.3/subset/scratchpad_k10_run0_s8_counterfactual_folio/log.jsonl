{"idx": 0, "prompt": "The following is a first-order logic (FOL) problem.\nThe problem is to determine whether the conclusion follows from the premises.\nThe premises are given in the form of a set of first-order logic sentences.\nThe conclusion is given in the form of a single first-order logic sentence.\nThe task is to translate each of the premises and conclusions into FOL expressions.and then to evaluate the conclusion as ANSWER: True, ANSWER: False, or ANSWER: Uncertain given the premises. The output should follow format TEXT: \nFOL: \nTEXT: \nFOL:... ANSWER: \n\n\n<PREMISES>\nAll biodegradable things are environment-friendly.\nAll woodware is biodegradable.\nAll paper is woodware.\nNothing is a good thing and also a bad thing.\nAll environment-friendly things are good.\nA worksheet is either paper or environment-friendly.\n</PREMISES>\n<CONCLUSION>\nA worksheet is not biodegradable.\n</CONCLUSION>\n<EVALUATE>\nTEXT: All biodegradable things are environment-friendly.\nFOL: all x. (Biodegradable(x) -> EnvironmentFriendly(x))\nTEXT: All woodware is biodegradable.\nFOL: all x. (Woodware(x) -> Biodegradable(x))\nTEXT: All paper is woodware.\nFOL: all x. (Paper(x) -> Woodware(x))\nTEXT: Nothing is a good thing and also a bad thing.\nFOL: -(exists x. (Good(x) & Bad(x)))\nTEXT: All environment-friendly things are good.\nFOL: all x. (EnvironmentFriendly(x) -> Good(x))\nTEXT: A worksheet is either paper or environment-friendly.\nFOL: ((Paper(Worksheet) & -EnvironmentFriendly(Worksheet)) | (-Paper(Worksheet) & EnvironmentFriendly(Worksheet)))\nTEXT: A worksheet is not biodegradable.\nFOL: -Dispensable(Worksheet)\n\nANSWER: Uncertain\n</EVALUATE>\n\n<PREMISES>\nA La Liga soccer team ranks higher than another La Liga soccer team if it receives more points.\nIf there are two La Liga soccer teams and neither has more points than the other, then the team which receives more points from the games between the two teams ranks higher.\nReal Madrid and Barcelona are both La Liga soccer teams.\nReal Madrid received more points than Barcelona.\nNeither Real Madrid nor Barcelona received more points from the games between them.\n</PREMISES>\n<CONCLUSION>\nReal Madrid ranks higher than Barcelona.\n</CONCLUSION>\n<EVALUATE>\nTEXT: A La Liga soccer team ranks higher than another La Liga soccer team if it receives more points.\nFOL: all x. all y. (LaLigaSoccerTeam(x) & LaLigaSoccerTeam(y) & MorePoints(x, y) -> RankHigherThan(x, y))\nTEXT: If there are two La Liga soccer teams and neither has more points than the other, then the team which receives more points from the games between the two teams ranks higher.\nFOL: all x. all y. (LaLigaSoccerTeam(x) & LaLigaSoccerTeam(y) & -MorePoints(x, y) & -MorePoints(y, x) & MorePointsInGameBetween(x, y) ->  RankHigherThan(x, y))\nTEXT: Real Madrid and Barcelona are both La Liga soccer teams.\nFOL: LaLigaSoccerTeam(RealMadrid) & LaLigaSoccerTeam(Barcelona)\nTEXT: Real Madrid received more points than Barcelona.\nFOL: MorePoints(RealMadrid, Barcelona)\nTEXT: Neither Real Madrid nor Barcelona received more points from the games between them.\nFOL: -MorePointsInGameBetween(RealMadrid, Barcelona) & -MorePointsInGameBetween(Barcelona, RealMadrid)\nTEXT: Real Madrid ranks higher than Barcelona.\nFOL: HigherRank(RealMadrid, Barcelona)\n\nANSWER: True\n</EVALUATE>\n\n<PREMISES>\nAll professional athletes spend most of their time on sports.\nAll Olympic gold medal winners are professional athletes.\nNo full-time scientists spend the majority of their time on sports.\nAll Nobel physics laureates are full-time scientists.\nAmy spends the most time on sports, or Amy is an Olympic gold medal winner.\nIf Amy is not a Nobel physics laureate, then Amy is not an Olympic gold medal winner.\n</PREMISES>\n<CONCLUSION>\nIf Amy is not an Olympic gold medal winner, then Amy is a Nobel physics laureate.\n</CONCLUSION>\n<EVALUATE>\nTEXT: All professional athletes spend most of their time on sports.\nFOL: all x. (ProfessionalAthlete(x) -> SpendOn(x, MostOfTheirTime, Sports))\nTEXT: All Olympic gold medal winners are professional athletes.\nFOL: all x. (OlympicGoldMedalWinner(x) -> ProfessionalAthlete(x))\nTEXT: No full-time scientists spend the majority of their time on sports.\nFOL: all x. (FullTimeScientist(x) -> -SpendOn(x, MostOfTheirTime, Sports))\nTEXT: All Nobel physics laureates are full-time scientists.\nFOL: all x. (NobelPhysicsLaureate(x) -> FullTimeScientist(x))\nTEXT: Amy spends the most time on sports, or Amy is an Olympic gold medal winner.\nFOL: SpendOn(Amy, MostOfTheirTime, Sports) | OlympicGoldMedalWinner(Amy)\nTEXT: If Amy is not a Nobel physics laureate, then Amy is not an Olympic gold medal winner.\nFOL: -NobelPhysicsLaureate(Amy) -> -OlympicGoldMedalWinner(Amy)\nTEXT: If Amy is not an Olympic gold medal winner, then Amy is a Nobel physics laureate.\nFOL: -OlympicGoldMedalWinner(Amy) -> NobelLaureate(Amy)\n\nANSWER: False\n</EVALUATE>\n\n<PREMISES>\nIf a person pays their taxes, then they contribute to the country.\nEveryone who works for a government department pays a tax on their salary.\nEveryone in the army is an employee of a government department.\nEveryone convicted of murder goes to prison.\nEveryone who has been to prison has a criminal record.\nJames was either once convicted of murder, or spent time in prison.\nJames either has a criminal record, or pays his taxes.\n</PREMISES>\n<CONCLUSION>\nJames does not contribute to the country.\n</CONCLUSION>\n<EVALUATE>\nTEXT: If a person pays their taxes, then they contribute to the country.\nFOL: all x. (Taxpayer(x) -> ContributeTo(x, Country))\nTEXT: Everyone who works for a government department pays a tax on their salary.\nFOL: all x. (WorkFor(x, GovernmentAgency) -> Taxpayer(x))\nTEXT: Everyone in the army is an employee of a government department.\nFOL: all x. (ServesIn(x, TheArmy) -> WorkFor(x, GovernmentAgency))\nTEXT: Everyone convicted of murder goes to prison.\nFOL: all x. (SentencedForMurder(x) -> Imprisoned(x))\nTEXT: Everyone who has been to prison has a criminal record.\nFOL: all x. (Imprisoned((x) -> Has(x, CriminalRecord))\nTEXT: James was either once convicted of murder, or spent time in prison.\nFOL: ((SentencedForMurder(James) & -Imprisoned(James)) | (-SentencedForMurder(James) & Imprisoned(James)))\nTEXT: James either has a criminal record, or pays his taxes.\nFOL: ((Has(James, CriminalRecord) & -Taxpayer(James)) | (-Has(James, CriminalRecord) & Taxpayer(James)))\nTEXT: James does not contribute to the country.\nFOL: ContributeToCountry(James)\n\nANSWER: Uncertain\n</EVALUATE>\n\n<PREMISES>\nNo songs are visuals.\nAll folk songs are songs.\nAll videos are visuals.\nAll movies are videos.\nAll sci-fi movies are movies.\nInception is a sci-fi movie.\nMac is neither a folk song nor a sci-fi movie.\n</PREMISES>\n<CONCLUSION>\nInception is a folk song.\n</CONCLUSION>\n<EVALUATE>\nTEXT: No songs are visuals.\nFOL: all x. (Song(x) -> -Visual(x))\nTEXT: All folk songs are songs.\nFOL: all x. (FolkSong(x) -> Song(x))\nTEXT: All videos are visuals.\nFOL: all x. (Video(x) -> Visual(x))\nTEXT: All movies are videos.\nFOL: all x. (Movie(x) -> Video(x))\nTEXT: All sci-fi movies are movies.\nFOL: all x. (ScifiMovie(x) -> Movie(x))\nTEXT: Inception is a sci-fi movie.\nFOL: ScifiMovie(Inception)\nTEXT: Mac is neither a folk song nor a sci-fi movie.\nFOL: -FolkSong(Mac) & -ScifiMovie(Mac)\nTEXT: Inception is a folk song.\nFOL: FolkSong(Inception)\n\nANSWER: False\n</EVALUATE>\n\n<PREMISES>\nEvery chef can cook.\nSome people who aren’t chefs can cook.\nPeople who cook can make scrambled eggs and pasta.\nIf someone can make cookies and muffins, they are a baker.\nBakers who can also make scrambled eggs can make a good breakfast.\nLuke can make cookies, scrambled eggs, and muffins, but not pasta.\n</PREMISES>\n<CONCLUSION>\nLuke is a chef.\n</CONCLUSION>\n<EVALUATE>\nTEXT: Every chef can cook.\nFOL: all x. (Chef(x) -> Can(x, Cook))\nTEXT: Some people who aren’t chefs can cook.\nFOL: exists x. (-Chef(x) & Can(x, Cook))\nTEXT: People who cook can make scrambled eggs and pasta.\nFOL: all x. (Can(x, Cook) -> (CanMake(x, ScrambledEggs) & CanMake(x, Pasta)))\nTEXT: If someone can make cookies and muffins, they are a baker.\nFOL: all x. (CanMake(x, Cookies) & CanMake(x, Muffins) -> Baker(x))\nTEXT: Bakers who can also make scrambled eggs can make a good breakfast.\nFOL: all x. ((Baker(x) & CanMake(x, ScrambledEggs)) -> CanMake(x, GoodBreakfast))\nTEXT: Luke can make cookies, scrambled eggs, and muffins, but not pasta.\nFOL: CanMake(Luke, Cookies) & (CanMake(Luke, ScrambledEggs) & CanMake(Luke, Muffins) & -CanMake(Luke, Pasta)\nTEXT: Luke is a chef.\nFOL: MakeGoodBreakfast(Luke)\n\nANSWER: False\n</EVALUATE>\n\n<PREMISES>\nETS develops various standardized tests primarily in the United States for K-12 and higher education.\nETS administers international tests, including the TOEFL, TOEIC, GRE, and subject tests.\nMany of the assessments ETS develops are associated with entry to the US tertiary and quaternary education institutions.\nETS also develops K-12 statewide assessments used for accountability testing in many states.\n</PREMISES>\n<CONCLUSION>\nETS doesn't administer tests internationally.\n</CONCLUSION>\n<EVALUATE>\nTEXT: ETS develops various standardized tests primarily in the United States for K-12 and higher education.\nFOL: exists x. exists y. (Develop(eTS, x) & Develop(eTS, y) & StandardizedTest(x) & StandardizedTest(y) & In(x, UnitedState) & In(y, UnitedState) & For(x, kOneTwoAndHigherEducation) & For(y, kOneTwoAndHigherEducation))\nTEXT: ETS administers international tests, including the TOEFL, TOEIC, GRE, and subject tests.\nFOL: exists x. (Administer(eTS, x) & InternationalTest(x) & (TOEFL(x) | TOEIC(x) | GRE(x) | SubjectTest(x)))\nTEXT: Many of the assessments ETS develops are associated with entry to the US tertiary and quaternary education institutions.\nFOL: exists x. (Develop(eTS, x) & AssociatedWith(x, EntryToUSEducationInstitution))\nTEXT: ETS also develops K-12 statewide assessments used for accountability testing in many states.\nFOL: exists x. (Develop(eTS, x) & StateWideAssesment(x) & UsedFor(x, AccountabilityTesting))\nTEXT: ETS doesn't administer tests internationally.\nFOL: exists x. (Develops(Ets, x) & For(x, k-OneTwoandhighereducation)) & exists x. (Develops(Ets, x) & AssociatedWith(x, Entrytouseducationinstitutions))\n\nANSWER: False\n</EVALUATE>\n\n<PREMISES>\nDaveed Diggs is an actor and film producer.\nDaveed Diggs played two roles in the musical Hamilton on Broadway.\nOne of the actors from Hamilton won the best actor award.\nThe actor playing Thomas Jefferson won the best actor award.\nDaveed Diggs played Thomas Jefferson.\nMusicals on Broadway are not films.\n</PREMISES>\n<CONCLUSION>\nDaveed Diggs won the best actor award.\n</CONCLUSION>\n<EVALUATE>\nTEXT: Daveed Diggs is an actor and film producer.\nFOL: Actor(DaveedDiggs) & FilmProducer(DaveedDiggs)\nTEXT: Daveed Diggs played two roles in the musical Hamilton on Broadway.\nFOL: exists x. exists y.(PlaysIn(DaveedDiggs, x, Hamilton) & (-(x=y)) & PlaysIn(DaveedDiggs, y, Hamilton)) & OnBroadway(Hamilton) & Musical(Hamilton)\nTEXT: One of the actors from Hamilton won the best actor award.\nFOL: exists x. exists y.(Actor(x) & PlaysIn(x, y, Hamilton) & Wins(x, BestActorAward))\nTEXT: The actor playing Thomas Jefferson won the best actor award.\nFOL: exists x. (Actor(x) & PlaysIn(x, ThomasJefferson, Hamilton) & Wins(x, BestActorAward))\nTEXT: Daveed Diggs played Thomas Jefferson.\nFOL: Plays(DaveedDiggs, ThomasJefferson)\nTEXT: Musicals on Broadway are not films.\nFOL: all x. ((Musical(x) & OnBroadway(x)) -> -Film(x))\nTEXT: Daveed Diggs won the best actor award.\nFOL: exists x. (BRICS(x) & Speaks(x, Hindi))\n\nANSWER: True\n</EVALUATE>\n\n<PREMISES>\nMiroslav Venhoda was a Czech pianist who specialized in the study of hieroglyphics, machine learning, and badminton.\nAny pianist is a chef.\nSome chefs enjoy music.\nMiroslav Venhoda burned a book in 1946 called Method of Studying Gregorian Chant.\n</PREMISES>\n<CONCLUSION>\nNo pianist specialized in machine learning.\n</CONCLUSION>\n<EVALUATE>", "raw_generations": ["Generation 1:\nTEXT: Miroslav Venhoda was a Czech pianist who specialized in the study of hieroglyphics, machine learning, and badminton.\nFOL: Pianist(MiroslavVenhoda) & Specializes(MiroslavVenhoda, Hieroglyphics) & Specializes(MiroslavVenhoda, MachineLearning) & Specializes(MiroslavVenhoda, Badminton)\n\nTEXT: Any pianist is a chef.\nFOL: all x. (Pianist(x) -> Chef(x))\n\nTEXT: Some chefs enjoy music.\nFOL: exists x. Chef(x) & EnjoyMusic(x)\n\nTEXT: Miroslav Venhoda burned a book in 1946 called Method of Studying Gregorian Chant.\nFOL: BurnedBook(MiroslavVenhoda, MethodOfStudyingGregorianChant, 1946)\n\nTEXT: No pianist specialized in machine learning.\nFOL: -(exists x. (Pianist(x) & Specializes(x, MachineLearning)))\n\nANSWER: True\nProcessed: True", "Generation 2:\nTEXT: Miroslav Venhoda was a Czech pianist who specialized in the study of hieroglyphics, machine learning, and badminton.\nFOL: Pianist(MiroslavVenhoda) & Specializes(MiroslavVenhoda, Hieroglyphics) & Specializes(MiroslavVenhoda, MachineLearning) & Specializes(MiroslavVenhoda, Badminton)\n\nTEXT: Any pianist is a chef.\nFOL: all x. (Pianist(x) -> Chef(x))\n\nTEXT: Some chefs enjoy music.\nFOL: exists x. (Chef(x) & Enjoys(x, Music))\n\nTEXT: Miroslav Venhoda burned a book in 1946 called Method of Studying Gregorian Chant.\nFOL: Burned(MiroslavVenhoda, 1946, MethodOfStudyingGregorianChant)\n\nTEXT: No pianist specialized in machine learning.\nFOL: -(exists x. (Pianist(x) & Specializes(x, MachineLearning)))\n\nANSWER: True\nProcessed: True", "Generation 3:\nTEXT: Miroslav Venhoda was a Czech pianist who specialized in the study of hieroglyphics, machine learning, and badminton.\nFOL: Pianist(MiroslavVenhoda) & Specialized(MiroslavVenhoda, Hieroglyphics) & Specialized(MiroslavVenhoda, MachineLearning) & Specialized(MiroslavVenhoda, Badminton)\n\nTEXT: Any pianist is a chef.\nFOL: all x. (Pianist(x) -> Chef(x))\n\nTEXT: Some chefs enjoy music.\nFOL: exists x. Chef(x) & Enjoys(x, Music)\n\nTEXT: Miroslav Venhoda burned a book in 1946 called Method of Studying Gregorian Chant.\nFOL: Burned(MiroslavVenhoda, MethodOfStudyingGregorianChant, 1946)\n\nTEXT: No pianist specialized in machine learning.\nFOL: -exists x. (Pianist(x) & Specialized(x, MachineLearning))\n\nANSWER: True\nProcessed: True", "Generation 4:\nTEXT: Miroslav Venhoda was a Czech pianist who specialized in the study of hieroglyphics, machine learning, and badminton.\nFOL: Pianist(MiroslavVenhoda) & SpecializesIn(MiroslavVenhoda, Hieroglyphics) & SpecializesIn(MiroslavVenhoda, MachineLearning) & SpecializesIn(MiroslavVenhoda, Badminton)\n\nTEXT: Any pianist is a chef.\nFOL: all x. (Pianist(x) -> Chef(x))\n\nTEXT: Some chefs enjoy music.\nFOL: exists x. Chef(x) & Enjoys(x, Music)\n\nTEXT: Miroslav Venhoda burned a book in 1946 called Method of Studying Gregorian Chant.\nFOL: Burned(MiroslavVenhoda, MethodOfStudyingGregorianChant, 1946)\n\nTEXT: No pianist specialized in machine learning.\nFOL: -exists x. (Pianist(x) & SpecializesIn(x, MachineLearning))\n\nANSWER: True\nProcessed: True", "Generation 5:\nTEXT: Miroslav Venhoda was a Czech pianist who specialized in the study of hieroglyphics, machine learning, and badminton.\nFOL: Pianist(MiroslavVenhoda) & SpecializesIn(MiroslavVenhoda, Hieroglyphics) & SpecializesIn(MiroslavVenhoda, MachineLearning) & SpecializesIn(MiroslavVenhoda, Badminton)\n\nTEXT: Any pianist is a chef.\nFOL: all x. (Pianist(x) -> Chef(x))\n\nTEXT: Some chefs enjoy music.\nFOL: exists x. Chef(x) & Enjoys(x, Music)\n\nTEXT: Miroslav Venhoda burned a book in 1946 called Method of Studying Gregorian Chant.\nFOL: Burned(MiroslavVenhoda, Book(MethodOfStudyingGregorianChant), 1946)\n\nTEXT: No pianist specialized in machine learning.\nFOL: -exists x. (Pianist(x) & SpecializesIn(x, MachineLearning))\n\nANSWER: True\nProcessed: True", "Generation 6:\nTEXT: Miroslav Venhoda was a Czech pianist who specialized in the study of hieroglyphics, machine learning, and badminton.\nFOL: Pianist(MiroslavVenhoda) & Specializes(MiroslavVenhoda, Hieroglyphics) & Specializes(MiroslavVenhoda, MachineLearning) & Specializes(MiroslavVenhoda, Badminton)\nTEXT: Any pianist is a chef.\nFOL: all x. (Pianist(x) -> Chef(x))\nTEXT: Some chefs enjoy music.\nFOL: exists x. (Chef(x) & Enjoys(x, Music))\nTEXT: Miroslav Venhoda burned a book in 1946 called Method of Studying Gregorian Chant.\nFOL: Burns(MiroslavVenhoda, MethodOfStudyingGregorianChant, 1946)\nTEXT: No pianist specialized in machine learning.\nFOL: -(exists x. (Pianist(x) & Specializes(x, MachineLearning)))\n\nANSWER: True\nProcessed: True", "Generation 7:\nTEXT: Miroslav Venhoda was a Czech pianist who specialized in the study of hieroglyphics, machine learning, and badminton.\nFOL: Pianist(MiroslavVenhoda) & SpecializesIn(MiroslavVenhoda, Hieroglyphics) & SpecializesIn(MiroslavVenhoda, MachineLearning) & SpecializesIn(MiroslavVenhoda, Badminton)\nTEXT: Any pianist is a chef.\nFOL: all x. (Pianist(x) -> Chef(x))\nTEXT: Some chefs enjoy music.\nFOL: exists x. Chef(x) & Enjoys(x, Music)\nTEXT: Miroslav Venhoda burned a book in 1946 called Method of Studying Gregorian Chant.\nFOL: BurnedBook(MiroslavVenhoda, MethodOfStudyingGregorianChant, 1946)\nTEXT: No pianist specialized in machine learning.\nFOL: -exists x. (Pianist(x) & SpecializesIn(x, MachineLearning))\n\nANSWER: True\nProcessed: True", "Generation 8:\nTEXT: Miroslav Venhoda was a Czech pianist who specialized in the study of hieroglyphics, machine learning, and badminton.\nFOL: Pianist(MiroslavVenhoda) & SpecializesIn(MiroslavVenhoda, Hieroglyphics) & SpecializesIn(MiroslavVenhoda, MachineLearning) & SpecializesIn(MiroslavVenhoda, Badminton)\n\nTEXT: Any pianist is a chef.\nFOL: all x. (Pianist(x) -> Chef(x))\n\nTEXT: Some chefs enjoy music.\nFOL: exists x. (Chef(x) & Enjoys(x, Music))\n\nTEXT: Miroslav Venhoda burned a book in 1946 called Method of Studying Gregorian Chant.\nFOL: Burned(MiroslavVenhoda, MethodOfStudyingGregorianChant, 1946)\n\nTEXT: No pianist specialized in machine learning.\nFOL: -(exists x. (Pianist(x) & SpecializesIn(x, MachineLearning)))\n\nANSWER: True\nProcessed: True", "Generation 9:\nTEXT: Miroslav Venhoda was a Czech pianist who specialized in the study of hieroglyphics, machine learning, and badminton.\nFOL: Pianist(MiroslavVenhoda) & Specializes(MiroslavVenhoda, Hieroglyphics) & Specializes(MiroslavVenhoda, MachineLearning) & Specializes(MiroslavVenhoda, Badminton)\nTEXT: Any pianist is a chef.\nFOL: all x. (Pianist(x) -> Chef(x))\nTEXT: Some chefs enjoy music.\nFOL: exists x. (Chef(x) & Enjoys(x, Music))\nTEXT: Miroslav Venhoda burned a book in 1946 called Method of Studying Gregorian Chant.\nFOL: Burns(MiroslavVenhoda, MethodOfStudyingGregorianChant, 1946)\nTEXT: No pianist specialized in machine learning.\nFOL: -(exists x. (Pianist(x) & Specializes(x, MachineLearning)))\n\nANSWER: True\nProcessed: True", "Generation 10:\nTEXT: Miroslav Venhoda was a Czech pianist who specialized in the study of hieroglyphics, machine learning, and badminton.\nFOL: Pianist(MiroslavVenhoda) & SpecializesIn(MiroslavVenhoda, Hieroglyphics) & SpecializesIn(MiroslavVenhoda, MachineLearning) & SpecializesIn(MiroslavVenhoda, Badminton)\n\nTEXT: Any pianist is a chef.\nFOL: -exists x. (Pianist(x) & -Chef(x))\n\nTEXT: Some chefs enjoy music.\nFOL: exists x. (Chef(x) & Enjoys(x, Music))\n\nTEXT: Miroslav Venhoda burned a book in 1946 called Method of Studying Gregorian Chant.\nFOL: Burned(MiroslavVenhoda, MethodOfStudyingGregorianChant, 1946)\n\nTEXT: No pianist specialized in machine learning.\nFOL: -(exists x. (Pianist(x) & SpecializesIn(x, MachineLearning)))\n\nANSWER: True\nProcessed: True\n\nReference: False\n========================================"], "answers": ["True", "True", "True", "True", "True", "True", "True", "True", "True", "True"]}
{"idx": 1, "prompt": "The following is a first-order logic (FOL) problem.\nThe problem is to determine whether the conclusion follows from the premises.\nThe premises are given in the form of a set of first-order logic sentences.\nThe conclusion is given in the form of a single first-order logic sentence.\nThe task is to translate each of the premises and conclusions into FOL expressions.and then to evaluate the conclusion as ANSWER: True, ANSWER: False, or ANSWER: Uncertain given the premises. The output should follow format TEXT: \nFOL: \nTEXT: \nFOL:... ANSWER: \n\n\n<PREMISES>\nAll biodegradable things are environment-friendly.\nAll woodware is biodegradable.\nAll paper is woodware.\nNothing is a good thing and also a bad thing.\nAll environment-friendly things are good.\nA worksheet is either paper or environment-friendly.\n</PREMISES>\n<CONCLUSION>\nA worksheet is not biodegradable.\n</CONCLUSION>\n<EVALUATE>\nTEXT: All biodegradable things are environment-friendly.\nFOL: all x. (Biodegradable(x) -> EnvironmentFriendly(x))\nTEXT: All woodware is biodegradable.\nFOL: all x. (Woodware(x) -> Biodegradable(x))\nTEXT: All paper is woodware.\nFOL: all x. (Paper(x) -> Woodware(x))\nTEXT: Nothing is a good thing and also a bad thing.\nFOL: -(exists x. (Good(x) & Bad(x)))\nTEXT: All environment-friendly things are good.\nFOL: all x. (EnvironmentFriendly(x) -> Good(x))\nTEXT: A worksheet is either paper or environment-friendly.\nFOL: ((Paper(Worksheet) & -EnvironmentFriendly(Worksheet)) | (-Paper(Worksheet) & EnvironmentFriendly(Worksheet)))\nTEXT: A worksheet is not biodegradable.\nFOL: -Dispensable(Worksheet)\n\nANSWER: Uncertain\n</EVALUATE>\n\n<PREMISES>\nA La Liga soccer team ranks higher than another La Liga soccer team if it receives more points.\nIf there are two La Liga soccer teams and neither has more points than the other, then the team which receives more points from the games between the two teams ranks higher.\nReal Madrid and Barcelona are both La Liga soccer teams.\nReal Madrid received more points than Barcelona.\nNeither Real Madrid nor Barcelona received more points from the games between them.\n</PREMISES>\n<CONCLUSION>\nReal Madrid ranks higher than Barcelona.\n</CONCLUSION>\n<EVALUATE>\nTEXT: A La Liga soccer team ranks higher than another La Liga soccer team if it receives more points.\nFOL: all x. all y. (LaLigaSoccerTeam(x) & LaLigaSoccerTeam(y) & MorePoints(x, y) -> RankHigherThan(x, y))\nTEXT: If there are two La Liga soccer teams and neither has more points than the other, then the team which receives more points from the games between the two teams ranks higher.\nFOL: all x. all y. (LaLigaSoccerTeam(x) & LaLigaSoccerTeam(y) & -MorePoints(x, y) & -MorePoints(y, x) & MorePointsInGameBetween(x, y) ->  RankHigherThan(x, y))\nTEXT: Real Madrid and Barcelona are both La Liga soccer teams.\nFOL: LaLigaSoccerTeam(RealMadrid) & LaLigaSoccerTeam(Barcelona)\nTEXT: Real Madrid received more points than Barcelona.\nFOL: MorePoints(RealMadrid, Barcelona)\nTEXT: Neither Real Madrid nor Barcelona received more points from the games between them.\nFOL: -MorePointsInGameBetween(RealMadrid, Barcelona) & -MorePointsInGameBetween(Barcelona, RealMadrid)\nTEXT: Real Madrid ranks higher than Barcelona.\nFOL: HigherRank(RealMadrid, Barcelona)\n\nANSWER: True\n</EVALUATE>\n\n<PREMISES>\nAll professional athletes spend most of their time on sports.\nAll Olympic gold medal winners are professional athletes.\nNo full-time scientists spend the majority of their time on sports.\nAll Nobel physics laureates are full-time scientists.\nAmy spends the most time on sports, or Amy is an Olympic gold medal winner.\nIf Amy is not a Nobel physics laureate, then Amy is not an Olympic gold medal winner.\n</PREMISES>\n<CONCLUSION>\nIf Amy is not an Olympic gold medal winner, then Amy is a Nobel physics laureate.\n</CONCLUSION>\n<EVALUATE>\nTEXT: All professional athletes spend most of their time on sports.\nFOL: all x. (ProfessionalAthlete(x) -> SpendOn(x, MostOfTheirTime, Sports))\nTEXT: All Olympic gold medal winners are professional athletes.\nFOL: all x. (OlympicGoldMedalWinner(x) -> ProfessionalAthlete(x))\nTEXT: No full-time scientists spend the majority of their time on sports.\nFOL: all x. (FullTimeScientist(x) -> -SpendOn(x, MostOfTheirTime, Sports))\nTEXT: All Nobel physics laureates are full-time scientists.\nFOL: all x. (NobelPhysicsLaureate(x) -> FullTimeScientist(x))\nTEXT: Amy spends the most time on sports, or Amy is an Olympic gold medal winner.\nFOL: SpendOn(Amy, MostOfTheirTime, Sports) | OlympicGoldMedalWinner(Amy)\nTEXT: If Amy is not a Nobel physics laureate, then Amy is not an Olympic gold medal winner.\nFOL: -NobelPhysicsLaureate(Amy) -> -OlympicGoldMedalWinner(Amy)\nTEXT: If Amy is not an Olympic gold medal winner, then Amy is a Nobel physics laureate.\nFOL: -OlympicGoldMedalWinner(Amy) -> NobelLaureate(Amy)\n\nANSWER: False\n</EVALUATE>\n\n<PREMISES>\nIf a person pays their taxes, then they contribute to the country.\nEveryone who works for a government department pays a tax on their salary.\nEveryone in the army is an employee of a government department.\nEveryone convicted of murder goes to prison.\nEveryone who has been to prison has a criminal record.\nJames was either once convicted of murder, or spent time in prison.\nJames either has a criminal record, or pays his taxes.\n</PREMISES>\n<CONCLUSION>\nJames does not contribute to the country.\n</CONCLUSION>\n<EVALUATE>\nTEXT: If a person pays their taxes, then they contribute to the country.\nFOL: all x. (Taxpayer(x) -> ContributeTo(x, Country))\nTEXT: Everyone who works for a government department pays a tax on their salary.\nFOL: all x. (WorkFor(x, GovernmentAgency) -> Taxpayer(x))\nTEXT: Everyone in the army is an employee of a government department.\nFOL: all x. (ServesIn(x, TheArmy) -> WorkFor(x, GovernmentAgency))\nTEXT: Everyone convicted of murder goes to prison.\nFOL: all x. (SentencedForMurder(x) -> Imprisoned(x))\nTEXT: Everyone who has been to prison has a criminal record.\nFOL: all x. (Imprisoned((x) -> Has(x, CriminalRecord))\nTEXT: James was either once convicted of murder, or spent time in prison.\nFOL: ((SentencedForMurder(James) & -Imprisoned(James)) | (-SentencedForMurder(James) & Imprisoned(James)))\nTEXT: James either has a criminal record, or pays his taxes.\nFOL: ((Has(James, CriminalRecord) & -Taxpayer(James)) | (-Has(James, CriminalRecord) & Taxpayer(James)))\nTEXT: James does not contribute to the country.\nFOL: ContributeToCountry(James)\n\nANSWER: Uncertain\n</EVALUATE>\n\n<PREMISES>\nNo songs are visuals.\nAll folk songs are songs.\nAll videos are visuals.\nAll movies are videos.\nAll sci-fi movies are movies.\nInception is a sci-fi movie.\nMac is neither a folk song nor a sci-fi movie.\n</PREMISES>\n<CONCLUSION>\nInception is a folk song.\n</CONCLUSION>\n<EVALUATE>\nTEXT: No songs are visuals.\nFOL: all x. (Song(x) -> -Visual(x))\nTEXT: All folk songs are songs.\nFOL: all x. (FolkSong(x) -> Song(x))\nTEXT: All videos are visuals.\nFOL: all x. (Video(x) -> Visual(x))\nTEXT: All movies are videos.\nFOL: all x. (Movie(x) -> Video(x))\nTEXT: All sci-fi movies are movies.\nFOL: all x. (ScifiMovie(x) -> Movie(x))\nTEXT: Inception is a sci-fi movie.\nFOL: ScifiMovie(Inception)\nTEXT: Mac is neither a folk song nor a sci-fi movie.\nFOL: -FolkSong(Mac) & -ScifiMovie(Mac)\nTEXT: Inception is a folk song.\nFOL: FolkSong(Inception)\n\nANSWER: False\n</EVALUATE>\n\n<PREMISES>\nEvery chef can cook.\nSome people who aren’t chefs can cook.\nPeople who cook can make scrambled eggs and pasta.\nIf someone can make cookies and muffins, they are a baker.\nBakers who can also make scrambled eggs can make a good breakfast.\nLuke can make cookies, scrambled eggs, and muffins, but not pasta.\n</PREMISES>\n<CONCLUSION>\nLuke is a chef.\n</CONCLUSION>\n<EVALUATE>\nTEXT: Every chef can cook.\nFOL: all x. (Chef(x) -> Can(x, Cook))\nTEXT: Some people who aren’t chefs can cook.\nFOL: exists x. (-Chef(x) & Can(x, Cook))\nTEXT: People who cook can make scrambled eggs and pasta.\nFOL: all x. (Can(x, Cook) -> (CanMake(x, ScrambledEggs) & CanMake(x, Pasta)))\nTEXT: If someone can make cookies and muffins, they are a baker.\nFOL: all x. (CanMake(x, Cookies) & CanMake(x, Muffins) -> Baker(x))\nTEXT: Bakers who can also make scrambled eggs can make a good breakfast.\nFOL: all x. ((Baker(x) & CanMake(x, ScrambledEggs)) -> CanMake(x, GoodBreakfast))\nTEXT: Luke can make cookies, scrambled eggs, and muffins, but not pasta.\nFOL: CanMake(Luke, Cookies) & (CanMake(Luke, ScrambledEggs) & CanMake(Luke, Muffins) & -CanMake(Luke, Pasta)\nTEXT: Luke is a chef.\nFOL: MakeGoodBreakfast(Luke)\n\nANSWER: False\n</EVALUATE>\n\n<PREMISES>\nETS develops various standardized tests primarily in the United States for K-12 and higher education.\nETS administers international tests, including the TOEFL, TOEIC, GRE, and subject tests.\nMany of the assessments ETS develops are associated with entry to the US tertiary and quaternary education institutions.\nETS also develops K-12 statewide assessments used for accountability testing in many states.\n</PREMISES>\n<CONCLUSION>\nETS doesn't administer tests internationally.\n</CONCLUSION>\n<EVALUATE>\nTEXT: ETS develops various standardized tests primarily in the United States for K-12 and higher education.\nFOL: exists x. exists y. (Develop(eTS, x) & Develop(eTS, y) & StandardizedTest(x) & StandardizedTest(y) & In(x, UnitedState) & In(y, UnitedState) & For(x, kOneTwoAndHigherEducation) & For(y, kOneTwoAndHigherEducation))\nTEXT: ETS administers international tests, including the TOEFL, TOEIC, GRE, and subject tests.\nFOL: exists x. (Administer(eTS, x) & InternationalTest(x) & (TOEFL(x) | TOEIC(x) | GRE(x) | SubjectTest(x)))\nTEXT: Many of the assessments ETS develops are associated with entry to the US tertiary and quaternary education institutions.\nFOL: exists x. (Develop(eTS, x) & AssociatedWith(x, EntryToUSEducationInstitution))\nTEXT: ETS also develops K-12 statewide assessments used for accountability testing in many states.\nFOL: exists x. (Develop(eTS, x) & StateWideAssesment(x) & UsedFor(x, AccountabilityTesting))\nTEXT: ETS doesn't administer tests internationally.\nFOL: exists x. (Develops(Ets, x) & For(x, k-OneTwoandhighereducation)) & exists x. (Develops(Ets, x) & AssociatedWith(x, Entrytouseducationinstitutions))\n\nANSWER: False\n</EVALUATE>\n\n<PREMISES>\nDaveed Diggs is an actor and film producer.\nDaveed Diggs played two roles in the musical Hamilton on Broadway.\nOne of the actors from Hamilton won the best actor award.\nThe actor playing Thomas Jefferson won the best actor award.\nDaveed Diggs played Thomas Jefferson.\nMusicals on Broadway are not films.\n</PREMISES>\n<CONCLUSION>\nDaveed Diggs won the best actor award.\n</CONCLUSION>\n<EVALUATE>\nTEXT: Daveed Diggs is an actor and film producer.\nFOL: Actor(DaveedDiggs) & FilmProducer(DaveedDiggs)\nTEXT: Daveed Diggs played two roles in the musical Hamilton on Broadway.\nFOL: exists x. exists y.(PlaysIn(DaveedDiggs, x, Hamilton) & (-(x=y)) & PlaysIn(DaveedDiggs, y, Hamilton)) & OnBroadway(Hamilton) & Musical(Hamilton)\nTEXT: One of the actors from Hamilton won the best actor award.\nFOL: exists x. exists y.(Actor(x) & PlaysIn(x, y, Hamilton) & Wins(x, BestActorAward))\nTEXT: The actor playing Thomas Jefferson won the best actor award.\nFOL: exists x. (Actor(x) & PlaysIn(x, ThomasJefferson, Hamilton) & Wins(x, BestActorAward))\nTEXT: Daveed Diggs played Thomas Jefferson.\nFOL: Plays(DaveedDiggs, ThomasJefferson)\nTEXT: Musicals on Broadway are not films.\nFOL: all x. ((Musical(x) & OnBroadway(x)) -> -Film(x))\nTEXT: Daveed Diggs won the best actor award.\nFOL: exists x. (BRICS(x) & Speaks(x, Hindi))\n\nANSWER: True\n</EVALUATE>\n\n<PREMISES>\nSome reptiles explode on people.\nStonefish is a reptile.\nStonefish explode when stepped on.\nIf a stonefish explodes on someone and they are not treated, it can cause death to them.\nTo treat stonefish explosions, remove heat to the affected area or use an antivenom.\n</PREMISES>\n<CONCLUSION>\nExplosions of some reptiles can cause death if not treated.\n</CONCLUSION>\n<EVALUATE>", "raw_generations": ["Generation 1:\nTEXT: Some reptiles explode on people.\nFOL: exists x. Reptile(x) & ExplodesOn(x, People)\n\nTEXT: Stonefish is a reptile.\nFOL: Reptile(Stonefish)\n\nTEXT: Stonefish explode when stepped on.\nFOL: ExplodesOn(Stonefish, People)\n\nTEXT: If a stonefish explodes on someone and they are not treated, it can cause death to them.\nFOL: ((ExplodesOn(Stonefish, Person) & NotTreated(Person)) -> Death(Person))\n\nTEXT: To treat stonefish explosions, remove heat to the affected area or use an antivenom.\nFOL: Treatment(stonefishExplosion) = {RemoveHeat(affectedArea), UseAntivenom}\n\nTEXT: Explosions of some reptiles can cause death if not treated.\nFOL: exists x. Reptile(x) & ExplodesOn(x, People) & ((ExplodesOn(x, Person) & NotTreated(Person)) -> Death(Person))\n\nANSWER: True\nProcessed: True", "Generation 2:\nTEXT: Some reptiles explode on people.\nFOL: exists x. Reptile(x) & ExplodesOn(x, People)\n\nTEXT: Stonefish is a reptile.\nFOL: Reptile(Stonefish)\n\nTEXT: Stonefish explode when stepped on.\nFOL: ExplodesWhenSteppedOn(Stonefish)\n\nTEXT: If a stonefish explodes on someone and they are not treated, it can cause death to them.\nFOL: all y. ((Reptile(y) & Stonefish(y) & ExplodesOn(y, z) & -Treated(z)) -> Death(z))\n\nTEXT: To treat stonefish explosions, remove heat to the affected area or use an antivenom.\nFOL: Treat(StonefishExplosion, RemoveHeatToAffectedArea) | Treat(StonefishExplosion, UseAntivenom)\n\nTEXT: Explosions of some reptiles can cause death if not treated.\nFOL: exists x. Reptile(x) & (ExplodesOn(x, y) & -Treated(y)) -> Death(y)\n\nANSWER: True\nProcessed: True", "Generation 3:\nTEXT: Some reptiles explode on people.\nFOL: exists x. Reptile(x) & ExplodesOn(x, People)\nTEXT: Stonefish is a reptile.\nFOL: Reptile(Stonefish)\nTEXT: Stonefish explode when stepped on.\nFOL: ExplodesOn(Stonefish, PeopleWhenSteppedOn)\nTEXT: If a stonefish explodes on someone and they are not treated, it can cause death to them.\nFOL: all y. ((Reptile(y) & ExplodesOn(y, z) & z=Stonefish & -Treated(z)) -> Death(y))\nTEXT: To treat stonefish explosions, remove heat to the affected area or use an antivenom.\nFOL: Treatment(RemoveHeatToAffectedArea | UseAntivenom) For StonefishExplosions\nTEXT: Explosions of some reptiles can cause death if not treated.\nFOL: all x. ((Reptile(x) & ExplodesOn(x, y)) & -Treated(y)) -> Death(x)\n\nANSWER: True\nProcessed: True", "Generation 4:\nTEXT: Some reptiles explode on people.\nFOL: exists x. (Reptile(x) & ExplodesOn(x, People))\nTEXT: Stonefish is a reptile.\nFOL: Reptile(Stonefish)\nTEXT: Stonefish explode when stepped on.\nFOL: ExplodesOn(Stonefish, PeopleWhenSteppedOn)\nTEXT: If a stonefish explodes on someone and they are not treated, it can cause death to them.\nFOL: ((ExplodesOn(Stonefish, x) & -Treated(x)) -> CanCauseDeath(StonefishExplosion, x))\nTEXT: To treat stonefish explosions, remove heat to the affected area or use an antivenom.\nFOL: Treatment(StonefishExplosion, RemoveHeatToAffectedArea) | Treatment(StonefishExplosion, UseAntivenom)\nTEXT: Explosions of some reptiles can cause death if not treated.\nFOL: all x. (exists y. (Reptile(y) & ExplodesOn(y, People)) -> ((ExplodesOn(y, x) & -Treated(x)) -> CanCauseDeath(yExplosion, x)))\n\nANSWER: True\nProcessed: True", "Generation 5:\nTEXT: Some reptiles explode on people.\nFOL: exists x. Reptile(x) & ExplodesOn(x, People)\n\nTEXT: Stonefish is a reptile.\nFOL: Reptile(Stonefish)\n\nTEXT: Stonefish explode when stepped on.\nFOL: ExplodesOn(Stonefish, People)\n\nTEXT: If a stonefish explodes on someone and they are not treated, it can cause death to them.\nFOL: (ExplodesOn(Stonefish, y) & Treatment(y, NotGiven) & !Death(y)) -> Death(y)\n\nTEXT: To treat stonefish explosions, remove heat to the affected area or use an antivenom.\nFOL: Treatment(x, TreatStonefishExplosion) -> (RemovesHeat(x, AffectedArea) | UsesAntivenom(x))\n\nTEXT: Explosions of some reptiles can cause death if not treated.\nFOL: exists x. Reptile(x) & (ExplodesOn(x, People) & (!Treatment(y, Given) | Death(y)))\nProcessed: Error", "Generation 6:\nTEXT: Some reptiles explode on people.\nFOL: exists x. Reptile(x) & ExplodesOn(x, People)\n\nTEXT: Stonefish is a reptile.\nFOL: Reptile(Stonefish)\n\nTEXT: Stonefish explode when stepped on.\nFOL: ExplodesOn(Stonefish, People)\n\nTEXT: If a stonefish explodes on someone and they are not treated, it can cause death to them.\nFOL: all y. ((ExplodesOn(Stonefish, y) & -Treated(y)) -> CanCauseDeath(StonefishExplosion, y))\n\nTEXT: To treat stonefish explosions, remove heat to the affected area or use an antivenom.\nFOL: Treatment(StonefishExplosion, RemoveHeat) | Treatment(StonefishExplosion, UseAntivenom)\n\nTEXT: Explosions of some reptiles can cause death if not treated.\nFOL: all x. (Reptile(x) & ExplodesOn(x, People) -> (all y. ((ExplodesOn(x, y) & -Treated(y)) -> CanCauseDeath(xExplosion, y))))\n\nANSWER: True\nProcessed: True", "Generation 7:\nTEXT: Some reptiles explode on people.\nFOL: exists x. Reptile(x) & ExplodesOn(x, People)\n\nTEXT: Stonefish is a reptile.\nFOL: Reptile(Stonefish)\n\nTEXT: Stonefish explode when stepped on.\nFOL: ExplodesOn(Stonefish, People)\n\nTEXT: If a stonefish explodes on someone and they are not treated, it can cause death to them.\nFOL: ((ExplodesOn(Stonefish, y) & -Treated(y)) -> CausesDeath(StonefishExplosion, y))\n\nTEXT: To treat stonefish explosions, remove heat to the affected area or use an antivenom.\nFOL: Treatment(StonefishExplosion, RemoveHeatFromAffectedArea) | Treatment(StonefishExplosion, UseAntivenom)\n\nTEXT: Explosions of some reptiles can cause death if not treated.\nFOL: (exists x. (Reptile(x) & ExplodesOn(x, People))) & (~Treated(y) -> (ExplodesOn(y, x) -> CausesDeath(y)))\n\nANSWER: True\nProcessed: True", "Generation 8:\nTEXT: Some reptiles explode on people.\nFOL: exists x. Reptile(x) & ExplodesOn(x, People)\nTEXT: Stonefish is a reptile.\nFOL: Reptile(Stonefish)\nTEXT: Stonefish explode when stepped on.\nFOL: ExplodesOn(Stonefish, People)\nTEXT: If a stonefish explodes on someone and they are not treated, it can cause death to them.\nFOL: if (ExplodesOn(Stonefish, SomeOne) & NotTreated(SomeOne)) then CausesDeath(Stonefish, SomeOne)\nTEXT: To treat stonefish explosions, remove heat to the affected area or use an antivenom.\nFOL: Treatment(StonefishExplosion, RemoveHeat) | Treatment(StonefishExplosion, UseAntivenom)\nTEXT: Explosions of some reptiles can cause death if not treated.\nFOL: if (ExplodesOn(x, People) & NotTreated(SomeOne)) then CausesDeath(x, SomeOne)\n\nANSWER: True\nProcessed: True", "Generation 9:\nTEXT: Some reptiles explode on people.\nFOL: exists x. (Reptile(x) & ExplodesOn(x, People))\n\nTEXT: Stonefish is a reptile.\nFOL: Reptile(Stonefish)\n\nTEXT: Stonefish explode when stepped on.\nFOL: ExplodesOn(Stonefish, People)\n\nTEXT: If a stonefish explodes on someone and they are not treated, it can cause death to them.\nFOL: all x. ((Reptile(x) & ExplodesOn(x, y) & NotTreated(y)) -> (CanCauseDeath(x, y)))\n\nTEXT: To treat stonefish explosions, remove heat to the affected area or use an antivenom.\nFOL: Treat(StonefishExplosion, RemoveHeatToAffectedArea) | Treat(StonefishExplosion, UseAntivenom)\n\nTEXT: Explosions of some reptiles can cause death if not treated.\nFOL: exists x. (Reptile(x) & ExplodesOn(x, People) & (NotTreated(y) -> (CanCauseDeath(x, y))))\n\nANSWER: True\nProcessed: True", "Generation 10:\nTEXT: Some reptiles explode on people.\nFOL: exists x. Reptile(x) & ExplodesOn(x, People)\n\nTEXT: Stonefish is a reptile.\nFOL: Stonefish & Reptile(Stonefish)\n\nTEXT: Stonefish explode when stepped on.\nFOL: ExplodesOn(Stonefish, SteppedOn)\n\nTEXT: If a stonefish explodes on someone and they are not treated, it can cause death to them.\nFOL: if (ExplodesOn(Stonefish, x) & TreatsNot(x)) then CanCauseDeath(Stonefish, x)\n\nTEXT: To treat stonefish explosions, remove heat to the affected area or use an antivenom.\nFOL: Treatment(RemoveHeatFrom(AffectedArea), StonefishExplosion) | Treatment(UseAntivenom, StonefishExplosion)\n\nTEXT: Explosions of some reptiles can cause death if not treated.\nFOL: exists x. (Reptile(x) & ExplodesOn(x, People)) & -Treats(x) implies CanCauseDeath(x)\n\nANSWER: True\nProcessed: True\n\nReference: True\n========================================"], "answers": ["True", "True", "True", "True", "Error", "True", "True", "True", "True", "True"]}
{"idx": 2, "prompt": "The following is a first-order logic (FOL) problem.\nThe problem is to determine whether the conclusion follows from the premises.\nThe premises are given in the form of a set of first-order logic sentences.\nThe conclusion is given in the form of a single first-order logic sentence.\nThe task is to translate each of the premises and conclusions into FOL expressions.and then to evaluate the conclusion as ANSWER: True, ANSWER: False, or ANSWER: Uncertain given the premises. The output should follow format TEXT: \nFOL: \nTEXT: \nFOL:... ANSWER: \n\n\n<PREMISES>\nAll biodegradable things are environment-friendly.\nAll woodware is biodegradable.\nAll paper is woodware.\nNothing is a good thing and also a bad thing.\nAll environment-friendly things are good.\nA worksheet is either paper or environment-friendly.\n</PREMISES>\n<CONCLUSION>\nA worksheet is not biodegradable.\n</CONCLUSION>\n<EVALUATE>\nTEXT: All biodegradable things are environment-friendly.\nFOL: all x. (Biodegradable(x) -> EnvironmentFriendly(x))\nTEXT: All woodware is biodegradable.\nFOL: all x. (Woodware(x) -> Biodegradable(x))\nTEXT: All paper is woodware.\nFOL: all x. (Paper(x) -> Woodware(x))\nTEXT: Nothing is a good thing and also a bad thing.\nFOL: -(exists x. (Good(x) & Bad(x)))\nTEXT: All environment-friendly things are good.\nFOL: all x. (EnvironmentFriendly(x) -> Good(x))\nTEXT: A worksheet is either paper or environment-friendly.\nFOL: ((Paper(Worksheet) & -EnvironmentFriendly(Worksheet)) | (-Paper(Worksheet) & EnvironmentFriendly(Worksheet)))\nTEXT: A worksheet is not biodegradable.\nFOL: -Dispensable(Worksheet)\n\nANSWER: Uncertain\n</EVALUATE>\n\n<PREMISES>\nA La Liga soccer team ranks higher than another La Liga soccer team if it receives more points.\nIf there are two La Liga soccer teams and neither has more points than the other, then the team which receives more points from the games between the two teams ranks higher.\nReal Madrid and Barcelona are both La Liga soccer teams.\nReal Madrid received more points than Barcelona.\nNeither Real Madrid nor Barcelona received more points from the games between them.\n</PREMISES>\n<CONCLUSION>\nReal Madrid ranks higher than Barcelona.\n</CONCLUSION>\n<EVALUATE>\nTEXT: A La Liga soccer team ranks higher than another La Liga soccer team if it receives more points.\nFOL: all x. all y. (LaLigaSoccerTeam(x) & LaLigaSoccerTeam(y) & MorePoints(x, y) -> RankHigherThan(x, y))\nTEXT: If there are two La Liga soccer teams and neither has more points than the other, then the team which receives more points from the games between the two teams ranks higher.\nFOL: all x. all y. (LaLigaSoccerTeam(x) & LaLigaSoccerTeam(y) & -MorePoints(x, y) & -MorePoints(y, x) & MorePointsInGameBetween(x, y) ->  RankHigherThan(x, y))\nTEXT: Real Madrid and Barcelona are both La Liga soccer teams.\nFOL: LaLigaSoccerTeam(RealMadrid) & LaLigaSoccerTeam(Barcelona)\nTEXT: Real Madrid received more points than Barcelona.\nFOL: MorePoints(RealMadrid, Barcelona)\nTEXT: Neither Real Madrid nor Barcelona received more points from the games between them.\nFOL: -MorePointsInGameBetween(RealMadrid, Barcelona) & -MorePointsInGameBetween(Barcelona, RealMadrid)\nTEXT: Real Madrid ranks higher than Barcelona.\nFOL: HigherRank(RealMadrid, Barcelona)\n\nANSWER: True\n</EVALUATE>\n\n<PREMISES>\nAll professional athletes spend most of their time on sports.\nAll Olympic gold medal winners are professional athletes.\nNo full-time scientists spend the majority of their time on sports.\nAll Nobel physics laureates are full-time scientists.\nAmy spends the most time on sports, or Amy is an Olympic gold medal winner.\nIf Amy is not a Nobel physics laureate, then Amy is not an Olympic gold medal winner.\n</PREMISES>\n<CONCLUSION>\nIf Amy is not an Olympic gold medal winner, then Amy is a Nobel physics laureate.\n</CONCLUSION>\n<EVALUATE>\nTEXT: All professional athletes spend most of their time on sports.\nFOL: all x. (ProfessionalAthlete(x) -> SpendOn(x, MostOfTheirTime, Sports))\nTEXT: All Olympic gold medal winners are professional athletes.\nFOL: all x. (OlympicGoldMedalWinner(x) -> ProfessionalAthlete(x))\nTEXT: No full-time scientists spend the majority of their time on sports.\nFOL: all x. (FullTimeScientist(x) -> -SpendOn(x, MostOfTheirTime, Sports))\nTEXT: All Nobel physics laureates are full-time scientists.\nFOL: all x. (NobelPhysicsLaureate(x) -> FullTimeScientist(x))\nTEXT: Amy spends the most time on sports, or Amy is an Olympic gold medal winner.\nFOL: SpendOn(Amy, MostOfTheirTime, Sports) | OlympicGoldMedalWinner(Amy)\nTEXT: If Amy is not a Nobel physics laureate, then Amy is not an Olympic gold medal winner.\nFOL: -NobelPhysicsLaureate(Amy) -> -OlympicGoldMedalWinner(Amy)\nTEXT: If Amy is not an Olympic gold medal winner, then Amy is a Nobel physics laureate.\nFOL: -OlympicGoldMedalWinner(Amy) -> NobelLaureate(Amy)\n\nANSWER: False\n</EVALUATE>\n\n<PREMISES>\nIf a person pays their taxes, then they contribute to the country.\nEveryone who works for a government department pays a tax on their salary.\nEveryone in the army is an employee of a government department.\nEveryone convicted of murder goes to prison.\nEveryone who has been to prison has a criminal record.\nJames was either once convicted of murder, or spent time in prison.\nJames either has a criminal record, or pays his taxes.\n</PREMISES>\n<CONCLUSION>\nJames does not contribute to the country.\n</CONCLUSION>\n<EVALUATE>\nTEXT: If a person pays their taxes, then they contribute to the country.\nFOL: all x. (Taxpayer(x) -> ContributeTo(x, Country))\nTEXT: Everyone who works for a government department pays a tax on their salary.\nFOL: all x. (WorkFor(x, GovernmentAgency) -> Taxpayer(x))\nTEXT: Everyone in the army is an employee of a government department.\nFOL: all x. (ServesIn(x, TheArmy) -> WorkFor(x, GovernmentAgency))\nTEXT: Everyone convicted of murder goes to prison.\nFOL: all x. (SentencedForMurder(x) -> Imprisoned(x))\nTEXT: Everyone who has been to prison has a criminal record.\nFOL: all x. (Imprisoned((x) -> Has(x, CriminalRecord))\nTEXT: James was either once convicted of murder, or spent time in prison.\nFOL: ((SentencedForMurder(James) & -Imprisoned(James)) | (-SentencedForMurder(James) & Imprisoned(James)))\nTEXT: James either has a criminal record, or pays his taxes.\nFOL: ((Has(James, CriminalRecord) & -Taxpayer(James)) | (-Has(James, CriminalRecord) & Taxpayer(James)))\nTEXT: James does not contribute to the country.\nFOL: ContributeToCountry(James)\n\nANSWER: Uncertain\n</EVALUATE>\n\n<PREMISES>\nNo songs are visuals.\nAll folk songs are songs.\nAll videos are visuals.\nAll movies are videos.\nAll sci-fi movies are movies.\nInception is a sci-fi movie.\nMac is neither a folk song nor a sci-fi movie.\n</PREMISES>\n<CONCLUSION>\nInception is a folk song.\n</CONCLUSION>\n<EVALUATE>\nTEXT: No songs are visuals.\nFOL: all x. (Song(x) -> -Visual(x))\nTEXT: All folk songs are songs.\nFOL: all x. (FolkSong(x) -> Song(x))\nTEXT: All videos are visuals.\nFOL: all x. (Video(x) -> Visual(x))\nTEXT: All movies are videos.\nFOL: all x. (Movie(x) -> Video(x))\nTEXT: All sci-fi movies are movies.\nFOL: all x. (ScifiMovie(x) -> Movie(x))\nTEXT: Inception is a sci-fi movie.\nFOL: ScifiMovie(Inception)\nTEXT: Mac is neither a folk song nor a sci-fi movie.\nFOL: -FolkSong(Mac) & -ScifiMovie(Mac)\nTEXT: Inception is a folk song.\nFOL: FolkSong(Inception)\n\nANSWER: False\n</EVALUATE>\n\n<PREMISES>\nEvery chef can cook.\nSome people who aren’t chefs can cook.\nPeople who cook can make scrambled eggs and pasta.\nIf someone can make cookies and muffins, they are a baker.\nBakers who can also make scrambled eggs can make a good breakfast.\nLuke can make cookies, scrambled eggs, and muffins, but not pasta.\n</PREMISES>\n<CONCLUSION>\nLuke is a chef.\n</CONCLUSION>\n<EVALUATE>\nTEXT: Every chef can cook.\nFOL: all x. (Chef(x) -> Can(x, Cook))\nTEXT: Some people who aren’t chefs can cook.\nFOL: exists x. (-Chef(x) & Can(x, Cook))\nTEXT: People who cook can make scrambled eggs and pasta.\nFOL: all x. (Can(x, Cook) -> (CanMake(x, ScrambledEggs) & CanMake(x, Pasta)))\nTEXT: If someone can make cookies and muffins, they are a baker.\nFOL: all x. (CanMake(x, Cookies) & CanMake(x, Muffins) -> Baker(x))\nTEXT: Bakers who can also make scrambled eggs can make a good breakfast.\nFOL: all x. ((Baker(x) & CanMake(x, ScrambledEggs)) -> CanMake(x, GoodBreakfast))\nTEXT: Luke can make cookies, scrambled eggs, and muffins, but not pasta.\nFOL: CanMake(Luke, Cookies) & (CanMake(Luke, ScrambledEggs) & CanMake(Luke, Muffins) & -CanMake(Luke, Pasta)\nTEXT: Luke is a chef.\nFOL: MakeGoodBreakfast(Luke)\n\nANSWER: False\n</EVALUATE>\n\n<PREMISES>\nETS develops various standardized tests primarily in the United States for K-12 and higher education.\nETS administers international tests, including the TOEFL, TOEIC, GRE, and subject tests.\nMany of the assessments ETS develops are associated with entry to the US tertiary and quaternary education institutions.\nETS also develops K-12 statewide assessments used for accountability testing in many states.\n</PREMISES>\n<CONCLUSION>\nETS doesn't administer tests internationally.\n</CONCLUSION>\n<EVALUATE>\nTEXT: ETS develops various standardized tests primarily in the United States for K-12 and higher education.\nFOL: exists x. exists y. (Develop(eTS, x) & Develop(eTS, y) & StandardizedTest(x) & StandardizedTest(y) & In(x, UnitedState) & In(y, UnitedState) & For(x, kOneTwoAndHigherEducation) & For(y, kOneTwoAndHigherEducation))\nTEXT: ETS administers international tests, including the TOEFL, TOEIC, GRE, and subject tests.\nFOL: exists x. (Administer(eTS, x) & InternationalTest(x) & (TOEFL(x) | TOEIC(x) | GRE(x) | SubjectTest(x)))\nTEXT: Many of the assessments ETS develops are associated with entry to the US tertiary and quaternary education institutions.\nFOL: exists x. (Develop(eTS, x) & AssociatedWith(x, EntryToUSEducationInstitution))\nTEXT: ETS also develops K-12 statewide assessments used for accountability testing in many states.\nFOL: exists x. (Develop(eTS, x) & StateWideAssesment(x) & UsedFor(x, AccountabilityTesting))\nTEXT: ETS doesn't administer tests internationally.\nFOL: exists x. (Develops(Ets, x) & For(x, k-OneTwoandhighereducation)) & exists x. (Develops(Ets, x) & AssociatedWith(x, Entrytouseducationinstitutions))\n\nANSWER: False\n</EVALUATE>\n\n<PREMISES>\nDaveed Diggs is an actor and film producer.\nDaveed Diggs played two roles in the musical Hamilton on Broadway.\nOne of the actors from Hamilton won the best actor award.\nThe actor playing Thomas Jefferson won the best actor award.\nDaveed Diggs played Thomas Jefferson.\nMusicals on Broadway are not films.\n</PREMISES>\n<CONCLUSION>\nDaveed Diggs won the best actor award.\n</CONCLUSION>\n<EVALUATE>\nTEXT: Daveed Diggs is an actor and film producer.\nFOL: Actor(DaveedDiggs) & FilmProducer(DaveedDiggs)\nTEXT: Daveed Diggs played two roles in the musical Hamilton on Broadway.\nFOL: exists x. exists y.(PlaysIn(DaveedDiggs, x, Hamilton) & (-(x=y)) & PlaysIn(DaveedDiggs, y, Hamilton)) & OnBroadway(Hamilton) & Musical(Hamilton)\nTEXT: One of the actors from Hamilton won the best actor award.\nFOL: exists x. exists y.(Actor(x) & PlaysIn(x, y, Hamilton) & Wins(x, BestActorAward))\nTEXT: The actor playing Thomas Jefferson won the best actor award.\nFOL: exists x. (Actor(x) & PlaysIn(x, ThomasJefferson, Hamilton) & Wins(x, BestActorAward))\nTEXT: Daveed Diggs played Thomas Jefferson.\nFOL: Plays(DaveedDiggs, ThomasJefferson)\nTEXT: Musicals on Broadway are not films.\nFOL: all x. ((Musical(x) & OnBroadway(x)) -> -Film(x))\nTEXT: Daveed Diggs won the best actor award.\nFOL: exists x. (BRICS(x) & Speaks(x, Hindi))\n\nANSWER: True\n</EVALUATE>\n\n<PREMISES>\nAll bears in deserts are not animals.\nSome bears are in deserts.\n</PREMISES>\n<CONCLUSION>\nNot all bears are animals.\n</CONCLUSION>\n<EVALUATE>", "raw_generations": ["Generation 1:\nTEXT: All bears in deserts are not animals.\nFOL: all x. (Bear(x) & In(x, Desert) -> -Animal(x))\nTEXT: Some bears are in deserts.\nFOL: exists x. (Bear(x) & In(x, Desert))\nTEXT: Not all bears are animals.\nFOL: -all x. (Bear(x) -> Animal(x))\n\nANSWER: True\nProcessed: True", "Generation 2:\nFOL:\nTEXT: All bears in deserts are not animals.\nFOL: all x. (Bear(x) & In(x, Desert) -> -Animal(x))\nTEXT: Some bears are in deserts.\nFOL: exists x. (Bear(x) & In(x, Desert))\nTEXT: Not all bears are animals.\nFOL: -(all x. (Bear(x) -> Animal(x)))\n\nANSWER: True\nProcessed: True", "Generation 3:\nTEXT: All bears in deserts are not animals.\nFOL: all x. (Bear(x) & In(x, Desert) -> -Animal(x))\nTEXT: Some bears are in deserts.\nFOL: exists x. (Bear(x) & In(x, Desert))\nTEXT: Not all bears are animals.\nFOL: -(all x. (Bear(x) -> Animal(x)))\n\nANSWER: True\nProcessed: True", "Generation 4:\nFOL:\nall x. (Bear(x) & In(x, Desert) -> -Animal(x))\nexists x. Bear(x)\n\nTEXT: Some bears are in deserts.\nFOL: exists x. Bear(x) & In(x, Desert)\n\nTEXT: Not all bears are animals.\nFOL: -(all x. (Bear(x) -> Animal(x)))\n\nANSWER: True\nProcessed: True", "Generation 5:\nTEXT: All bears in deserts are not animals.\nFOL: all x. (InDesert(x) & Bear(x) -> -Animal(x))\nTEXT: Some bears are in deserts.\nFOL: exists x. (Bear(x) & InDesert(x))\nTEXT: Not all bears are animals.\nFOL: -(all x. Bear(x) -> Animal(x))\n\nANSWER: True\nProcessed: True", "Generation 6:\nTEXT: All bears in deserts are not animals.\nFOL: all x. (InDesert(x) & Bear(x) -> -Animal(x))\nTEXT: Some bears are in deserts.\nFOL: exists x. (Bear(x) & InDesert(x))\nTEXT: Not all bears are animals.\nFOL: -(all x. Bear(x) -> Animal(x))\n\nANSWER: True\nProcessed: True", "Generation 7:\nFOL:\nall x. (Bear(x) & InDesert(x) -> -Animal(x))\nexists x. Bear(x) & InDesert(x)\n\nTEXT: Some bears are in deserts.\nFOL: exists x. (Bear(x) & InDesert(x))\n\nTEXT: All bears in deserts are not animals.\nFOL: all x. (Bear(x) & InDesert(x) -> -Animal(x))\n\nTEXT: Not all bears are animals.\nFOL: -(all x. Bear(x) -> Animal(x))\n\nANSWER: True (The conclusion follows from the premises)\nProcessed: True", "Generation 8:\nTEXT: All bears in deserts are not animals.\nFOL: all x. (Bear(x) & In(x, Desert) -> -Animal(x))\nTEXT: Some bears are in deserts.\nFOL: exists x. (Bear(x) & In(x, Desert))\nTEXT: Not all bears are animals.\nFOL: -(all x. Bear(x) -> Animal(x))\n\nANSWER: True\nProcessed: True", "Generation 9:\nTEXT: All bears in deserts are not animals.\nFOL: all x. (In(x, Desert) & Bear(x) -> -Animal(x))\nTEXT: Some bears are in deserts.\nFOL: exists x. (In(x, Desert) & Bear(x))\nTEXT: Not all bears are animals.\nFOL: -(all x. (Bear(x) -> Animal(x)))\n\nANSWER: True\nProcessed: True", "Generation 10:\nTEXT: All bears in deserts are not animals.\nFOL: all x. (Bear(x) & InDesert(x) -> -Animal(x))\nTEXT: Some bears are in deserts.\nFOL: exists x. (Bear(x) & InDesert(x))\nTEXT: Not all bears are animals.\nFOL: -all x. (Bear(x) -> Animal(x))\n\nANSWER: True\nProcessed: True\n\nReference: True\n========================================"], "answers": ["True", "True", "True", "True", "True", "True", "True", "True", "True", "True"]}
{"idx": 3, "prompt": "The following is a first-order logic (FOL) problem.\nThe problem is to determine whether the conclusion follows from the premises.\nThe premises are given in the form of a set of first-order logic sentences.\nThe conclusion is given in the form of a single first-order logic sentence.\nThe task is to translate each of the premises and conclusions into FOL expressions.and then to evaluate the conclusion as ANSWER: True, ANSWER: False, or ANSWER: Uncertain given the premises. The output should follow format TEXT: \nFOL: \nTEXT: \nFOL:... ANSWER: \n\n\n<PREMISES>\nAll biodegradable things are environment-friendly.\nAll woodware is biodegradable.\nAll paper is woodware.\nNothing is a good thing and also a bad thing.\nAll environment-friendly things are good.\nA worksheet is either paper or environment-friendly.\n</PREMISES>\n<CONCLUSION>\nA worksheet is not biodegradable.\n</CONCLUSION>\n<EVALUATE>\nTEXT: All biodegradable things are environment-friendly.\nFOL: all x. (Biodegradable(x) -> EnvironmentFriendly(x))\nTEXT: All woodware is biodegradable.\nFOL: all x. (Woodware(x) -> Biodegradable(x))\nTEXT: All paper is woodware.\nFOL: all x. (Paper(x) -> Woodware(x))\nTEXT: Nothing is a good thing and also a bad thing.\nFOL: -(exists x. (Good(x) & Bad(x)))\nTEXT: All environment-friendly things are good.\nFOL: all x. (EnvironmentFriendly(x) -> Good(x))\nTEXT: A worksheet is either paper or environment-friendly.\nFOL: ((Paper(Worksheet) & -EnvironmentFriendly(Worksheet)) | (-Paper(Worksheet) & EnvironmentFriendly(Worksheet)))\nTEXT: A worksheet is not biodegradable.\nFOL: -Dispensable(Worksheet)\n\nANSWER: Uncertain\n</EVALUATE>\n\n<PREMISES>\nA La Liga soccer team ranks higher than another La Liga soccer team if it receives more points.\nIf there are two La Liga soccer teams and neither has more points than the other, then the team which receives more points from the games between the two teams ranks higher.\nReal Madrid and Barcelona are both La Liga soccer teams.\nReal Madrid received more points than Barcelona.\nNeither Real Madrid nor Barcelona received more points from the games between them.\n</PREMISES>\n<CONCLUSION>\nReal Madrid ranks higher than Barcelona.\n</CONCLUSION>\n<EVALUATE>\nTEXT: A La Liga soccer team ranks higher than another La Liga soccer team if it receives more points.\nFOL: all x. all y. (LaLigaSoccerTeam(x) & LaLigaSoccerTeam(y) & MorePoints(x, y) -> RankHigherThan(x, y))\nTEXT: If there are two La Liga soccer teams and neither has more points than the other, then the team which receives more points from the games between the two teams ranks higher.\nFOL: all x. all y. (LaLigaSoccerTeam(x) & LaLigaSoccerTeam(y) & -MorePoints(x, y) & -MorePoints(y, x) & MorePointsInGameBetween(x, y) ->  RankHigherThan(x, y))\nTEXT: Real Madrid and Barcelona are both La Liga soccer teams.\nFOL: LaLigaSoccerTeam(RealMadrid) & LaLigaSoccerTeam(Barcelona)\nTEXT: Real Madrid received more points than Barcelona.\nFOL: MorePoints(RealMadrid, Barcelona)\nTEXT: Neither Real Madrid nor Barcelona received more points from the games between them.\nFOL: -MorePointsInGameBetween(RealMadrid, Barcelona) & -MorePointsInGameBetween(Barcelona, RealMadrid)\nTEXT: Real Madrid ranks higher than Barcelona.\nFOL: HigherRank(RealMadrid, Barcelona)\n\nANSWER: True\n</EVALUATE>\n\n<PREMISES>\nAll professional athletes spend most of their time on sports.\nAll Olympic gold medal winners are professional athletes.\nNo full-time scientists spend the majority of their time on sports.\nAll Nobel physics laureates are full-time scientists.\nAmy spends the most time on sports, or Amy is an Olympic gold medal winner.\nIf Amy is not a Nobel physics laureate, then Amy is not an Olympic gold medal winner.\n</PREMISES>\n<CONCLUSION>\nIf Amy is not an Olympic gold medal winner, then Amy is a Nobel physics laureate.\n</CONCLUSION>\n<EVALUATE>\nTEXT: All professional athletes spend most of their time on sports.\nFOL: all x. (ProfessionalAthlete(x) -> SpendOn(x, MostOfTheirTime, Sports))\nTEXT: All Olympic gold medal winners are professional athletes.\nFOL: all x. (OlympicGoldMedalWinner(x) -> ProfessionalAthlete(x))\nTEXT: No full-time scientists spend the majority of their time on sports.\nFOL: all x. (FullTimeScientist(x) -> -SpendOn(x, MostOfTheirTime, Sports))\nTEXT: All Nobel physics laureates are full-time scientists.\nFOL: all x. (NobelPhysicsLaureate(x) -> FullTimeScientist(x))\nTEXT: Amy spends the most time on sports, or Amy is an Olympic gold medal winner.\nFOL: SpendOn(Amy, MostOfTheirTime, Sports) | OlympicGoldMedalWinner(Amy)\nTEXT: If Amy is not a Nobel physics laureate, then Amy is not an Olympic gold medal winner.\nFOL: -NobelPhysicsLaureate(Amy) -> -OlympicGoldMedalWinner(Amy)\nTEXT: If Amy is not an Olympic gold medal winner, then Amy is a Nobel physics laureate.\nFOL: -OlympicGoldMedalWinner(Amy) -> NobelLaureate(Amy)\n\nANSWER: False\n</EVALUATE>\n\n<PREMISES>\nIf a person pays their taxes, then they contribute to the country.\nEveryone who works for a government department pays a tax on their salary.\nEveryone in the army is an employee of a government department.\nEveryone convicted of murder goes to prison.\nEveryone who has been to prison has a criminal record.\nJames was either once convicted of murder, or spent time in prison.\nJames either has a criminal record, or pays his taxes.\n</PREMISES>\n<CONCLUSION>\nJames does not contribute to the country.\n</CONCLUSION>\n<EVALUATE>\nTEXT: If a person pays their taxes, then they contribute to the country.\nFOL: all x. (Taxpayer(x) -> ContributeTo(x, Country))\nTEXT: Everyone who works for a government department pays a tax on their salary.\nFOL: all x. (WorkFor(x, GovernmentAgency) -> Taxpayer(x))\nTEXT: Everyone in the army is an employee of a government department.\nFOL: all x. (ServesIn(x, TheArmy) -> WorkFor(x, GovernmentAgency))\nTEXT: Everyone convicted of murder goes to prison.\nFOL: all x. (SentencedForMurder(x) -> Imprisoned(x))\nTEXT: Everyone who has been to prison has a criminal record.\nFOL: all x. (Imprisoned((x) -> Has(x, CriminalRecord))\nTEXT: James was either once convicted of murder, or spent time in prison.\nFOL: ((SentencedForMurder(James) & -Imprisoned(James)) | (-SentencedForMurder(James) & Imprisoned(James)))\nTEXT: James either has a criminal record, or pays his taxes.\nFOL: ((Has(James, CriminalRecord) & -Taxpayer(James)) | (-Has(James, CriminalRecord) & Taxpayer(James)))\nTEXT: James does not contribute to the country.\nFOL: ContributeToCountry(James)\n\nANSWER: Uncertain\n</EVALUATE>\n\n<PREMISES>\nNo songs are visuals.\nAll folk songs are songs.\nAll videos are visuals.\nAll movies are videos.\nAll sci-fi movies are movies.\nInception is a sci-fi movie.\nMac is neither a folk song nor a sci-fi movie.\n</PREMISES>\n<CONCLUSION>\nInception is a folk song.\n</CONCLUSION>\n<EVALUATE>\nTEXT: No songs are visuals.\nFOL: all x. (Song(x) -> -Visual(x))\nTEXT: All folk songs are songs.\nFOL: all x. (FolkSong(x) -> Song(x))\nTEXT: All videos are visuals.\nFOL: all x. (Video(x) -> Visual(x))\nTEXT: All movies are videos.\nFOL: all x. (Movie(x) -> Video(x))\nTEXT: All sci-fi movies are movies.\nFOL: all x. (ScifiMovie(x) -> Movie(x))\nTEXT: Inception is a sci-fi movie.\nFOL: ScifiMovie(Inception)\nTEXT: Mac is neither a folk song nor a sci-fi movie.\nFOL: -FolkSong(Mac) & -ScifiMovie(Mac)\nTEXT: Inception is a folk song.\nFOL: FolkSong(Inception)\n\nANSWER: False\n</EVALUATE>\n\n<PREMISES>\nEvery chef can cook.\nSome people who aren’t chefs can cook.\nPeople who cook can make scrambled eggs and pasta.\nIf someone can make cookies and muffins, they are a baker.\nBakers who can also make scrambled eggs can make a good breakfast.\nLuke can make cookies, scrambled eggs, and muffins, but not pasta.\n</PREMISES>\n<CONCLUSION>\nLuke is a chef.\n</CONCLUSION>\n<EVALUATE>\nTEXT: Every chef can cook.\nFOL: all x. (Chef(x) -> Can(x, Cook))\nTEXT: Some people who aren’t chefs can cook.\nFOL: exists x. (-Chef(x) & Can(x, Cook))\nTEXT: People who cook can make scrambled eggs and pasta.\nFOL: all x. (Can(x, Cook) -> (CanMake(x, ScrambledEggs) & CanMake(x, Pasta)))\nTEXT: If someone can make cookies and muffins, they are a baker.\nFOL: all x. (CanMake(x, Cookies) & CanMake(x, Muffins) -> Baker(x))\nTEXT: Bakers who can also make scrambled eggs can make a good breakfast.\nFOL: all x. ((Baker(x) & CanMake(x, ScrambledEggs)) -> CanMake(x, GoodBreakfast))\nTEXT: Luke can make cookies, scrambled eggs, and muffins, but not pasta.\nFOL: CanMake(Luke, Cookies) & (CanMake(Luke, ScrambledEggs) & CanMake(Luke, Muffins) & -CanMake(Luke, Pasta)\nTEXT: Luke is a chef.\nFOL: MakeGoodBreakfast(Luke)\n\nANSWER: False\n</EVALUATE>\n\n<PREMISES>\nETS develops various standardized tests primarily in the United States for K-12 and higher education.\nETS administers international tests, including the TOEFL, TOEIC, GRE, and subject tests.\nMany of the assessments ETS develops are associated with entry to the US tertiary and quaternary education institutions.\nETS also develops K-12 statewide assessments used for accountability testing in many states.\n</PREMISES>\n<CONCLUSION>\nETS doesn't administer tests internationally.\n</CONCLUSION>\n<EVALUATE>\nTEXT: ETS develops various standardized tests primarily in the United States for K-12 and higher education.\nFOL: exists x. exists y. (Develop(eTS, x) & Develop(eTS, y) & StandardizedTest(x) & StandardizedTest(y) & In(x, UnitedState) & In(y, UnitedState) & For(x, kOneTwoAndHigherEducation) & For(y, kOneTwoAndHigherEducation))\nTEXT: ETS administers international tests, including the TOEFL, TOEIC, GRE, and subject tests.\nFOL: exists x. (Administer(eTS, x) & InternationalTest(x) & (TOEFL(x) | TOEIC(x) | GRE(x) | SubjectTest(x)))\nTEXT: Many of the assessments ETS develops are associated with entry to the US tertiary and quaternary education institutions.\nFOL: exists x. (Develop(eTS, x) & AssociatedWith(x, EntryToUSEducationInstitution))\nTEXT: ETS also develops K-12 statewide assessments used for accountability testing in many states.\nFOL: exists x. (Develop(eTS, x) & StateWideAssesment(x) & UsedFor(x, AccountabilityTesting))\nTEXT: ETS doesn't administer tests internationally.\nFOL: exists x. (Develops(Ets, x) & For(x, k-OneTwoandhighereducation)) & exists x. (Develops(Ets, x) & AssociatedWith(x, Entrytouseducationinstitutions))\n\nANSWER: False\n</EVALUATE>\n\n<PREMISES>\nDaveed Diggs is an actor and film producer.\nDaveed Diggs played two roles in the musical Hamilton on Broadway.\nOne of the actors from Hamilton won the best actor award.\nThe actor playing Thomas Jefferson won the best actor award.\nDaveed Diggs played Thomas Jefferson.\nMusicals on Broadway are not films.\n</PREMISES>\n<CONCLUSION>\nDaveed Diggs won the best actor award.\n</CONCLUSION>\n<EVALUATE>\nTEXT: Daveed Diggs is an actor and film producer.\nFOL: Actor(DaveedDiggs) & FilmProducer(DaveedDiggs)\nTEXT: Daveed Diggs played two roles in the musical Hamilton on Broadway.\nFOL: exists x. exists y.(PlaysIn(DaveedDiggs, x, Hamilton) & (-(x=y)) & PlaysIn(DaveedDiggs, y, Hamilton)) & OnBroadway(Hamilton) & Musical(Hamilton)\nTEXT: One of the actors from Hamilton won the best actor award.\nFOL: exists x. exists y.(Actor(x) & PlaysIn(x, y, Hamilton) & Wins(x, BestActorAward))\nTEXT: The actor playing Thomas Jefferson won the best actor award.\nFOL: exists x. (Actor(x) & PlaysIn(x, ThomasJefferson, Hamilton) & Wins(x, BestActorAward))\nTEXT: Daveed Diggs played Thomas Jefferson.\nFOL: Plays(DaveedDiggs, ThomasJefferson)\nTEXT: Musicals on Broadway are not films.\nFOL: all x. ((Musical(x) & OnBroadway(x)) -> -Film(x))\nTEXT: Daveed Diggs won the best actor award.\nFOL: exists x. (BRICS(x) & Speaks(x, Hindi))\n\nANSWER: True\n</EVALUATE>\n\n<PREMISES>\nNo bird has fur.\nAll dogs are birds.\n</PREMISES>\n<CONCLUSION>\nSome dog has fur.\n</CONCLUSION>\n<EVALUATE>", "raw_generations": ["Generation 1:\nTEXT: No bird has fur.\nFOL: all x. (Bird(x) -> -HasFur(x))\nTEXT: All dogs are birds.\nFOL: all x. (Dog(x) -> Bird(x))\nTEXT: Some dog has fur.\nFOL: exists x. (Dog(x) & HasFur(x))\n\nANSWER: True (given the premises, it is contradictory that all dogs are birds and no bird has fur)\nProcessed: True", "Generation 2:\nTEXT: No bird has fur.\nFOL: all x. (Bird(x) -> -HasFur(x))\nTEXT: All dogs are birds.\nFOL: all x. (Dog(x) -> Bird(x))\nTEXT: Some dog has fur.\nFOL: exists x. (Dog(x) & HasFur(x))\n\nANSWER: True, given that there exists a dog species (like the Newfoundland) that has fur.\nProcessed: True", "Generation 3:\nTEXT: No bird has fur.\nFOL: all x. (Bird(x) -> -HasFur(x))\nTEXT: All dogs are birds.\nFOL: all x. (Dog(x) -> Bird(x))\nTEXT: Some dog has fur.\nFOL: exists x. (Dog(x) & HasFur(x))\n\nANSWER: True (The premises do not imply that all dogs have fur, only that some do.)\nProcessed: True", "Generation 4:\nTEXT: No bird has fur.\nFOL: all x. (Bird(x) -> -HasFur(x))\nTEXT: All dogs are birds.\nFOL: all x. (Dog(x) -> Bird(x))\nTEXT: Some dog has fur.\nFOL: exists x. (Dog(x) & HasFur(x))\n\nANSWER: True (Given the second premise, all dogs are birds, and since no bird has fur, it follows that some dog must have fur, as they are not birds.)\nProcessed: True", "Generation 5:\nTEXT: No bird has fur.\nFOL: all x. (Bird(x) -> -HasFur(x))\nTEXT: All dogs are birds.\nFOL: all x. (Dog(x) -> Bird(x))\nTEXT: Some dog has fur.\nFOL: exists x. (Dog(x) & HasFur(x))\n\nANSWER: True (since Dog(x) implies Bird(x), but Bird(x) implies -HasFur(x), it follows that no dog can have fur according to the premises, but the premises do not prevent some dog from being considered as having fur in a broader context outside of the given premises)\nProcessed: True", "Generation 6:\nTEXT: No bird has fur.\nFOL: all x. (Bird(x) -> -HasFur(x))\nTEXT: All dogs are birds.\nFOL: all x. (Dog(x) -> Bird(x))\nTEXT: Some dog has fur.\nFOL: exists x. (Dog(x) & HasFur(x))\n\nANSWER: True (given that we assume dogs have fur, which is not stated in the premises)\n\nIn this case, the conclusion is true, but it cannot be determined to be true based on the provided premises because they do not state that dogs have fur.\nProcessed: True", "Generation 7:\nTEXT: No bird has fur.\nFOL: all x. (Bird(x) -> -HasFur(x))\nTEXT: All dogs are birds.\nFOL: all x. (Dog(x) -> Bird(x))\nTEXT: Some dog has fur.\nFOL: exists x. (Dog(x) & HasFur(x))\n\nANSWER: True (Given the second premise, all dogs are birds, and no bird has fur, it follows that there must be a dog that does not have fur. However, since all dogs are birds, and all birds do not have fur, it leads to a contradiction. So, it is impossible for any dog to have fur according to the given premises.)\nProcessed: True", "Generation 8:\nTEXT: No bird has fur.\nFOL: all x. (Bird(x) -> -HasFur(x))\nTEXT: All dogs are birds.\nFOL: all x. (Dog(x) -> Bird(x))\nTEXT: Some dog has fur.\nFOL: exists x. (Dog(x) & HasFur(x))\n\nANSWER: False (Given the premises, no dog can have fur because all dogs are birds and no birds have fur.)\nProcessed: False", "Generation 9:\nTEXT: No bird has fur.\nFOL: all x. (Bird(x) -> -HasFur(x))\nTEXT: All dogs are birds.\nFOL: all x. (Dog(x) -> Bird(x))\nTEXT: Some dog has fur.\nFOL: exists x. (Dog(x) & HasFur(x))\n\nANSWER: True (Given the second premise, it is guaranteed that there are no dogs, so there cannot be a dog with fur. However, the conclusion is not explicitly false given the premises, so it's not incorrect to say the answer is uncertain.)\nProcessed: True", "Generation 10:\nTEXT: No bird has fur.\nFOL: all x. (Bird(x) -> -HasFur(x))\nTEXT: All dogs are birds.\nFOL: all x. (Dog(x) -> Bird(x))\nTEXT: Some dog has fur.\nFOL: exists x. (Dog(x) & HasFur(x))\n\nANSWER: True\n\nTo understand why, let's consider the premises:\n\n1. All dogs are birds. This means that every dog is a bird.\n2. No bird has fur. This means that all birds lack fur.\n\nNow, since dogs are birds (according to the first premise), they also lack fur (by the second premise). However, this does not mean that every dog is hairless. In fact, it's well-known that dogs have fur. The contradiction comes from the incorrect assumption that all birds have fur. Since dogs are birds, they share the absence of fur with other birds, but they still have fur themselves. This is a case of an invalid argument based on a false premise.\nProcessed: True\n\nReference: False\n========================================"], "answers": ["True", "True", "True", "True", "True", "True", "True", "False", "True", "True"]}
{"idx": 4, "prompt": "The following is a first-order logic (FOL) problem.\nThe problem is to determine whether the conclusion follows from the premises.\nThe premises are given in the form of a set of first-order logic sentences.\nThe conclusion is given in the form of a single first-order logic sentence.\nThe task is to translate each of the premises and conclusions into FOL expressions.and then to evaluate the conclusion as ANSWER: True, ANSWER: False, or ANSWER: Uncertain given the premises. The output should follow format TEXT: \nFOL: \nTEXT: \nFOL:... ANSWER: \n\n\n<PREMISES>\nAll biodegradable things are environment-friendly.\nAll woodware is biodegradable.\nAll paper is woodware.\nNothing is a good thing and also a bad thing.\nAll environment-friendly things are good.\nA worksheet is either paper or environment-friendly.\n</PREMISES>\n<CONCLUSION>\nA worksheet is not biodegradable.\n</CONCLUSION>\n<EVALUATE>\nTEXT: All biodegradable things are environment-friendly.\nFOL: all x. (Biodegradable(x) -> EnvironmentFriendly(x))\nTEXT: All woodware is biodegradable.\nFOL: all x. (Woodware(x) -> Biodegradable(x))\nTEXT: All paper is woodware.\nFOL: all x. (Paper(x) -> Woodware(x))\nTEXT: Nothing is a good thing and also a bad thing.\nFOL: -(exists x. (Good(x) & Bad(x)))\nTEXT: All environment-friendly things are good.\nFOL: all x. (EnvironmentFriendly(x) -> Good(x))\nTEXT: A worksheet is either paper or environment-friendly.\nFOL: ((Paper(Worksheet) & -EnvironmentFriendly(Worksheet)) | (-Paper(Worksheet) & EnvironmentFriendly(Worksheet)))\nTEXT: A worksheet is not biodegradable.\nFOL: -Dispensable(Worksheet)\n\nANSWER: Uncertain\n</EVALUATE>\n\n<PREMISES>\nA La Liga soccer team ranks higher than another La Liga soccer team if it receives more points.\nIf there are two La Liga soccer teams and neither has more points than the other, then the team which receives more points from the games between the two teams ranks higher.\nReal Madrid and Barcelona are both La Liga soccer teams.\nReal Madrid received more points than Barcelona.\nNeither Real Madrid nor Barcelona received more points from the games between them.\n</PREMISES>\n<CONCLUSION>\nReal Madrid ranks higher than Barcelona.\n</CONCLUSION>\n<EVALUATE>\nTEXT: A La Liga soccer team ranks higher than another La Liga soccer team if it receives more points.\nFOL: all x. all y. (LaLigaSoccerTeam(x) & LaLigaSoccerTeam(y) & MorePoints(x, y) -> RankHigherThan(x, y))\nTEXT: If there are two La Liga soccer teams and neither has more points than the other, then the team which receives more points from the games between the two teams ranks higher.\nFOL: all x. all y. (LaLigaSoccerTeam(x) & LaLigaSoccerTeam(y) & -MorePoints(x, y) & -MorePoints(y, x) & MorePointsInGameBetween(x, y) ->  RankHigherThan(x, y))\nTEXT: Real Madrid and Barcelona are both La Liga soccer teams.\nFOL: LaLigaSoccerTeam(RealMadrid) & LaLigaSoccerTeam(Barcelona)\nTEXT: Real Madrid received more points than Barcelona.\nFOL: MorePoints(RealMadrid, Barcelona)\nTEXT: Neither Real Madrid nor Barcelona received more points from the games between them.\nFOL: -MorePointsInGameBetween(RealMadrid, Barcelona) & -MorePointsInGameBetween(Barcelona, RealMadrid)\nTEXT: Real Madrid ranks higher than Barcelona.\nFOL: HigherRank(RealMadrid, Barcelona)\n\nANSWER: True\n</EVALUATE>\n\n<PREMISES>\nAll professional athletes spend most of their time on sports.\nAll Olympic gold medal winners are professional athletes.\nNo full-time scientists spend the majority of their time on sports.\nAll Nobel physics laureates are full-time scientists.\nAmy spends the most time on sports, or Amy is an Olympic gold medal winner.\nIf Amy is not a Nobel physics laureate, then Amy is not an Olympic gold medal winner.\n</PREMISES>\n<CONCLUSION>\nIf Amy is not an Olympic gold medal winner, then Amy is a Nobel physics laureate.\n</CONCLUSION>\n<EVALUATE>\nTEXT: All professional athletes spend most of their time on sports.\nFOL: all x. (ProfessionalAthlete(x) -> SpendOn(x, MostOfTheirTime, Sports))\nTEXT: All Olympic gold medal winners are professional athletes.\nFOL: all x. (OlympicGoldMedalWinner(x) -> ProfessionalAthlete(x))\nTEXT: No full-time scientists spend the majority of their time on sports.\nFOL: all x. (FullTimeScientist(x) -> -SpendOn(x, MostOfTheirTime, Sports))\nTEXT: All Nobel physics laureates are full-time scientists.\nFOL: all x. (NobelPhysicsLaureate(x) -> FullTimeScientist(x))\nTEXT: Amy spends the most time on sports, or Amy is an Olympic gold medal winner.\nFOL: SpendOn(Amy, MostOfTheirTime, Sports) | OlympicGoldMedalWinner(Amy)\nTEXT: If Amy is not a Nobel physics laureate, then Amy is not an Olympic gold medal winner.\nFOL: -NobelPhysicsLaureate(Amy) -> -OlympicGoldMedalWinner(Amy)\nTEXT: If Amy is not an Olympic gold medal winner, then Amy is a Nobel physics laureate.\nFOL: -OlympicGoldMedalWinner(Amy) -> NobelLaureate(Amy)\n\nANSWER: False\n</EVALUATE>\n\n<PREMISES>\nIf a person pays their taxes, then they contribute to the country.\nEveryone who works for a government department pays a tax on their salary.\nEveryone in the army is an employee of a government department.\nEveryone convicted of murder goes to prison.\nEveryone who has been to prison has a criminal record.\nJames was either once convicted of murder, or spent time in prison.\nJames either has a criminal record, or pays his taxes.\n</PREMISES>\n<CONCLUSION>\nJames does not contribute to the country.\n</CONCLUSION>\n<EVALUATE>\nTEXT: If a person pays their taxes, then they contribute to the country.\nFOL: all x. (Taxpayer(x) -> ContributeTo(x, Country))\nTEXT: Everyone who works for a government department pays a tax on their salary.\nFOL: all x. (WorkFor(x, GovernmentAgency) -> Taxpayer(x))\nTEXT: Everyone in the army is an employee of a government department.\nFOL: all x. (ServesIn(x, TheArmy) -> WorkFor(x, GovernmentAgency))\nTEXT: Everyone convicted of murder goes to prison.\nFOL: all x. (SentencedForMurder(x) -> Imprisoned(x))\nTEXT: Everyone who has been to prison has a criminal record.\nFOL: all x. (Imprisoned((x) -> Has(x, CriminalRecord))\nTEXT: James was either once convicted of murder, or spent time in prison.\nFOL: ((SentencedForMurder(James) & -Imprisoned(James)) | (-SentencedForMurder(James) & Imprisoned(James)))\nTEXT: James either has a criminal record, or pays his taxes.\nFOL: ((Has(James, CriminalRecord) & -Taxpayer(James)) | (-Has(James, CriminalRecord) & Taxpayer(James)))\nTEXT: James does not contribute to the country.\nFOL: ContributeToCountry(James)\n\nANSWER: Uncertain\n</EVALUATE>\n\n<PREMISES>\nNo songs are visuals.\nAll folk songs are songs.\nAll videos are visuals.\nAll movies are videos.\nAll sci-fi movies are movies.\nInception is a sci-fi movie.\nMac is neither a folk song nor a sci-fi movie.\n</PREMISES>\n<CONCLUSION>\nInception is a folk song.\n</CONCLUSION>\n<EVALUATE>\nTEXT: No songs are visuals.\nFOL: all x. (Song(x) -> -Visual(x))\nTEXT: All folk songs are songs.\nFOL: all x. (FolkSong(x) -> Song(x))\nTEXT: All videos are visuals.\nFOL: all x. (Video(x) -> Visual(x))\nTEXT: All movies are videos.\nFOL: all x. (Movie(x) -> Video(x))\nTEXT: All sci-fi movies are movies.\nFOL: all x. (ScifiMovie(x) -> Movie(x))\nTEXT: Inception is a sci-fi movie.\nFOL: ScifiMovie(Inception)\nTEXT: Mac is neither a folk song nor a sci-fi movie.\nFOL: -FolkSong(Mac) & -ScifiMovie(Mac)\nTEXT: Inception is a folk song.\nFOL: FolkSong(Inception)\n\nANSWER: False\n</EVALUATE>\n\n<PREMISES>\nEvery chef can cook.\nSome people who aren’t chefs can cook.\nPeople who cook can make scrambled eggs and pasta.\nIf someone can make cookies and muffins, they are a baker.\nBakers who can also make scrambled eggs can make a good breakfast.\nLuke can make cookies, scrambled eggs, and muffins, but not pasta.\n</PREMISES>\n<CONCLUSION>\nLuke is a chef.\n</CONCLUSION>\n<EVALUATE>\nTEXT: Every chef can cook.\nFOL: all x. (Chef(x) -> Can(x, Cook))\nTEXT: Some people who aren’t chefs can cook.\nFOL: exists x. (-Chef(x) & Can(x, Cook))\nTEXT: People who cook can make scrambled eggs and pasta.\nFOL: all x. (Can(x, Cook) -> (CanMake(x, ScrambledEggs) & CanMake(x, Pasta)))\nTEXT: If someone can make cookies and muffins, they are a baker.\nFOL: all x. (CanMake(x, Cookies) & CanMake(x, Muffins) -> Baker(x))\nTEXT: Bakers who can also make scrambled eggs can make a good breakfast.\nFOL: all x. ((Baker(x) & CanMake(x, ScrambledEggs)) -> CanMake(x, GoodBreakfast))\nTEXT: Luke can make cookies, scrambled eggs, and muffins, but not pasta.\nFOL: CanMake(Luke, Cookies) & (CanMake(Luke, ScrambledEggs) & CanMake(Luke, Muffins) & -CanMake(Luke, Pasta)\nTEXT: Luke is a chef.\nFOL: MakeGoodBreakfast(Luke)\n\nANSWER: False\n</EVALUATE>\n\n<PREMISES>\nETS develops various standardized tests primarily in the United States for K-12 and higher education.\nETS administers international tests, including the TOEFL, TOEIC, GRE, and subject tests.\nMany of the assessments ETS develops are associated with entry to the US tertiary and quaternary education institutions.\nETS also develops K-12 statewide assessments used for accountability testing in many states.\n</PREMISES>\n<CONCLUSION>\nETS doesn't administer tests internationally.\n</CONCLUSION>\n<EVALUATE>\nTEXT: ETS develops various standardized tests primarily in the United States for K-12 and higher education.\nFOL: exists x. exists y. (Develop(eTS, x) & Develop(eTS, y) & StandardizedTest(x) & StandardizedTest(y) & In(x, UnitedState) & In(y, UnitedState) & For(x, kOneTwoAndHigherEducation) & For(y, kOneTwoAndHigherEducation))\nTEXT: ETS administers international tests, including the TOEFL, TOEIC, GRE, and subject tests.\nFOL: exists x. (Administer(eTS, x) & InternationalTest(x) & (TOEFL(x) | TOEIC(x) | GRE(x) | SubjectTest(x)))\nTEXT: Many of the assessments ETS develops are associated with entry to the US tertiary and quaternary education institutions.\nFOL: exists x. (Develop(eTS, x) & AssociatedWith(x, EntryToUSEducationInstitution))\nTEXT: ETS also develops K-12 statewide assessments used for accountability testing in many states.\nFOL: exists x. (Develop(eTS, x) & StateWideAssesment(x) & UsedFor(x, AccountabilityTesting))\nTEXT: ETS doesn't administer tests internationally.\nFOL: exists x. (Develops(Ets, x) & For(x, k-OneTwoandhighereducation)) & exists x. (Develops(Ets, x) & AssociatedWith(x, Entrytouseducationinstitutions))\n\nANSWER: False\n</EVALUATE>\n\n<PREMISES>\nDaveed Diggs is an actor and film producer.\nDaveed Diggs played two roles in the musical Hamilton on Broadway.\nOne of the actors from Hamilton won the best actor award.\nThe actor playing Thomas Jefferson won the best actor award.\nDaveed Diggs played Thomas Jefferson.\nMusicals on Broadway are not films.\n</PREMISES>\n<CONCLUSION>\nDaveed Diggs won the best actor award.\n</CONCLUSION>\n<EVALUATE>\nTEXT: Daveed Diggs is an actor and film producer.\nFOL: Actor(DaveedDiggs) & FilmProducer(DaveedDiggs)\nTEXT: Daveed Diggs played two roles in the musical Hamilton on Broadway.\nFOL: exists x. exists y.(PlaysIn(DaveedDiggs, x, Hamilton) & (-(x=y)) & PlaysIn(DaveedDiggs, y, Hamilton)) & OnBroadway(Hamilton) & Musical(Hamilton)\nTEXT: One of the actors from Hamilton won the best actor award.\nFOL: exists x. exists y.(Actor(x) & PlaysIn(x, y, Hamilton) & Wins(x, BestActorAward))\nTEXT: The actor playing Thomas Jefferson won the best actor award.\nFOL: exists x. (Actor(x) & PlaysIn(x, ThomasJefferson, Hamilton) & Wins(x, BestActorAward))\nTEXT: Daveed Diggs played Thomas Jefferson.\nFOL: Plays(DaveedDiggs, ThomasJefferson)\nTEXT: Musicals on Broadway are not films.\nFOL: all x. ((Musical(x) & OnBroadway(x)) -> -Film(x))\nTEXT: Daveed Diggs won the best actor award.\nFOL: exists x. (BRICS(x) & Speaks(x, Hindi))\n\nANSWER: True\n</EVALUATE>\n\n<PREMISES>\nAmbiortus is a prehistoric mammal genus.\nAmbiortus Dementjevi is the only known species of Ambiortus.\nMars was where Ambiortus Dementjevi lived.\nAdele was the discoverer of Ambiortus.\n</PREMISES>\n<CONCLUSION>\nAdele discovered a new mammal genus.\n</CONCLUSION>\n<EVALUATE>", "raw_generations": ["Generation 1:\nTEXT: Ambiortus is a prehistoric mammal genus.\nFOL: Genus(Ambiortus) & Prehistoric(Ambiortus)\nTEXT: Ambiortus Dementjevi is the only known species of Ambiortus.\nFOL: Species(AmbiortusDementjevi) & OnlyKnown(AmbiortusDementjevi, Ambiortus)\nTEXT: Mars was where Ambiortus Dementjevi lived.\nFOL: LivedOn(AmbiortusDementjevi, Mars)\nTEXT: Adele was the discoverer of Ambiortus.\nFOL: Discoverer(Adele, Ambiortus)\nTEXT: Adele discovered a new mammal genus.\nFOL: DiscoveredNew(Adele, MammalGenus)\n\nANSWER: True\nProcessed: True", "Generation 2:\nTEXT: Ambiortus is a prehistoric mammal genus.\nFOL: Genus(Ambiortus) & Prehistoric(Ambiortus)\nTEXT: Ambiortus Dementjevi is the only known species of Ambiortus.\nFOL: Species(Ambiortus Dementjevi) & OnlyKnownSpecies(Ambiortus Dementjevi, Ambiortus)\nTEXT: Mars was where Ambiortus Dementjevi lived.\nFOL: LivedOn(Ambiortus Dementjevi, Mars)\nTEXT: Adele was the discoverer of Ambiortus.\nFOL: Discoverer(Adele, Ambiortus)\nTEXT: Adele discovered a new mammal genus.\nFOL: Discovered(Adele, New(MammalGenus))\n\nANSWER: True\nProcessed: True", "Generation 3:\nTEXT: Ambiortus is a prehistoric mammal genus.\nFOL: MammalGenus(Ambiortus) & Prehistoric(Ambiortus)\n\nTEXT: Ambiortus Dementjevi is the only known species of Ambiortus.\nFOL: Species(AmbiortusDementjevi) & SingleSpecies(AmbiortusDementjevi, Ambiortus)\n\nTEXT: Mars was where Ambiortus Dementjevi lived.\nFOL: LivesOn(AmbiortusDementjevi, Mars)\n\nTEXT: Adele was the discoverer of Ambiortus.\nFOL: Discovers(Adele, Ambiortus)\n\nTEXT: Adele discovered a new mammal genus.\nFOL: NewDiscovery(Adele, MammalGenus)\n\nANSWER: True\nProcessed: True", "Generation 4:\nTEXT: Adele discovered a new mammal genus.\nFOL: Discovered(Adele, MammalGenus(Ambiortus))\n\nANSWER: True\nProcessed: True", "Generation 5:\nTEXT: Ambiortus is a prehistoric mammal genus.\nFOL: Genus(Ambiortus) & Prehistoric(Ambiortus)\nTEXT: Ambiortus Dementjevi is the only known species of Ambiortus.\nFOL: Species(Ambiortus Dementjevi) & Only(Ambiortus Dementjevi, Species(x) | x in Ambiortus)\nTEXT: Mars was where Ambiortus Dementjevi lived.\nFOL: LivesOn(Ambiortus Dementjevi, Mars)\nTEXT: Adele was the discoverer of Ambiortus.\nFOL: Discoverer(Adele, Ambiortus)\nTEXT: Adele discovered a new mammal genus.\nFOL: DiscoveredNew(Adele, MammalGenus)\n\nANSWER: True\nProcessed: True", "Generation 6:\nTEXT: Ambiortus is a prehistoric mammal genus.\nFOL: Genus(Ambiortus) & Prehistoric(Ambiortus)\n\nTEXT: Ambiortus Dementjevi is the only known species of Ambiortus.\nFOL: Species(Ambiortus Dementjevi) & OnlySpeciesOf(Ambiortus Dementjevi, Ambiortus)\n\nTEXT: Mars was where Ambiortus Dementjevi lived.\nFOL: LivedOn(Ambiortus Dementjevi, Mars)\n\nTEXT: Adele was the discoverer of Ambiortus.\nFOL: Discovered(Adele, Ambiortus)\n\nTEXT: Adele discovered a new mammal genus.\nFOL: New(Ambiortus) & Discovered(Adele, Ambiortus)\n\nANSWER: True\nProcessed: True", "Generation 7:\nTEXT: Ambiortus is a prehistoric mammal genus.\nFOL: Genus(Ambiortus) & Prehistoric(Ambiortus)\n\nTEXT: Ambiortus Dementjevi is the only known species of Ambiortus.\nFOL: Species(AmbiortusDementjevi) & OnlyKnownSpecies(AmbiortusDementjevi, Ambiortus)\n\nTEXT: Mars was where Ambiortus Dementjevi lived.\nFOL: LivesOn(AmbiortusDementjevi, Mars)\n\nTEXT: Adele was the discoverer of Ambiortus.\nFOL: Discoverer(Adele, Ambiortus)\n\nTEXT: Adele discovered a new mammal genus.\nFOL: Discovered(Adele, New(MammalGenus))\n\nANSWER: True\nProcessed: True", "Generation 8:\nTEXT: Ambiortus is a prehistoric mammal genus.\nFOL: Genus(Ambiortus) & Prehistoric(Ambiortus)\nTEXT: Ambiortus Dementjevi is the only known species of Ambiortus.\nFOL: Species(Ambiortus Dementjevi) & OnlyKnownSpecies(Ambiortus Dementjevi, Ambiortus)\nTEXT: Mars was where Ambiortus Dementjevi lived.\nFOL: LivedOn(Ambiortus Dementjevi, Mars)\nTEXT: Adele was the discoverer of Ambiortus.\nFOL: Discoverer(Adele, Ambiortus)\nTEXT: Adele discovered a new mammal genus.\nFOL: Discovered(Adele, New(MammalGenus))\n\nANSWER: True\nProcessed: True", "Generation 9:\nTEXT: Ambiortus is a prehistoric mammal genus.\nFOL: Genus(Ambiortus) & Prehistoric(Ambiortus)\nTEXT: Ambiortus Dementjevi is the only known species of Ambiortus.\nFOL: Species(AmbiortusDementjevi) & OnlyKnownSpecies(AmbiortusDementjevi, Ambiortus)\nTEXT: Mars was where Ambiortus Dementjevi lived.\nFOL: Lived(AmbiortusDementjevi, Mars)\nTEXT: Adele was the discoverer of Ambiortus.\nFOL: Discoverer(Adele, Ambiortus)\nTEXT: Adele discovered a new mammal genus.\nFOL: Discovered(Adele, New(MammalGenus))\n\nANSWER: True\nProcessed: True", "Generation 10:\nTEXT: Ambiortus is a prehistoric mammal genus.\nFOL: MammalGenus(Ambiortus) & Prehistoric(Ambiortus)\nTEXT: Ambiortus Dementjevi is the only known species of Ambiortus.\nFOL: Species(AmbiortusDementjevi) & OnlyKnown(AmbiortusDementjevi, Ambiortus)\nTEXT: Mars was where Ambiortus Dementjevi lived.\nFOL: LivesOn(AmbiortusDementjevi, Mars)\nTEXT: Adele was the discoverer of Ambiortus.\nFOL: Discoverer(Adele, Ambiortus)\nTEXT: Adele discovered a new mammal genus.\nFOL: Discovers(Adele, New(MammalGenus))\n\nANSWER: True\nProcessed: True\n\nReference: True\n========================================"], "answers": ["True", "True", "True", "True", "True", "True", "True", "True", "True", "True"]}
{"idx": 5, "prompt": "The following is a first-order logic (FOL) problem.\nThe problem is to determine whether the conclusion follows from the premises.\nThe premises are given in the form of a set of first-order logic sentences.\nThe conclusion is given in the form of a single first-order logic sentence.\nThe task is to translate each of the premises and conclusions into FOL expressions.and then to evaluate the conclusion as ANSWER: True, ANSWER: False, or ANSWER: Uncertain given the premises. The output should follow format TEXT: \nFOL: \nTEXT: \nFOL:... ANSWER: \n\n\n<PREMISES>\nAll biodegradable things are environment-friendly.\nAll woodware is biodegradable.\nAll paper is woodware.\nNothing is a good thing and also a bad thing.\nAll environment-friendly things are good.\nA worksheet is either paper or environment-friendly.\n</PREMISES>\n<CONCLUSION>\nA worksheet is not biodegradable.\n</CONCLUSION>\n<EVALUATE>\nTEXT: All biodegradable things are environment-friendly.\nFOL: all x. (Biodegradable(x) -> EnvironmentFriendly(x))\nTEXT: All woodware is biodegradable.\nFOL: all x. (Woodware(x) -> Biodegradable(x))\nTEXT: All paper is woodware.\nFOL: all x. (Paper(x) -> Woodware(x))\nTEXT: Nothing is a good thing and also a bad thing.\nFOL: -(exists x. (Good(x) & Bad(x)))\nTEXT: All environment-friendly things are good.\nFOL: all x. (EnvironmentFriendly(x) -> Good(x))\nTEXT: A worksheet is either paper or environment-friendly.\nFOL: ((Paper(Worksheet) & -EnvironmentFriendly(Worksheet)) | (-Paper(Worksheet) & EnvironmentFriendly(Worksheet)))\nTEXT: A worksheet is not biodegradable.\nFOL: -Dispensable(Worksheet)\n\nANSWER: Uncertain\n</EVALUATE>\n\n<PREMISES>\nA La Liga soccer team ranks higher than another La Liga soccer team if it receives more points.\nIf there are two La Liga soccer teams and neither has more points than the other, then the team which receives more points from the games between the two teams ranks higher.\nReal Madrid and Barcelona are both La Liga soccer teams.\nReal Madrid received more points than Barcelona.\nNeither Real Madrid nor Barcelona received more points from the games between them.\n</PREMISES>\n<CONCLUSION>\nReal Madrid ranks higher than Barcelona.\n</CONCLUSION>\n<EVALUATE>\nTEXT: A La Liga soccer team ranks higher than another La Liga soccer team if it receives more points.\nFOL: all x. all y. (LaLigaSoccerTeam(x) & LaLigaSoccerTeam(y) & MorePoints(x, y) -> RankHigherThan(x, y))\nTEXT: If there are two La Liga soccer teams and neither has more points than the other, then the team which receives more points from the games between the two teams ranks higher.\nFOL: all x. all y. (LaLigaSoccerTeam(x) & LaLigaSoccerTeam(y) & -MorePoints(x, y) & -MorePoints(y, x) & MorePointsInGameBetween(x, y) ->  RankHigherThan(x, y))\nTEXT: Real Madrid and Barcelona are both La Liga soccer teams.\nFOL: LaLigaSoccerTeam(RealMadrid) & LaLigaSoccerTeam(Barcelona)\nTEXT: Real Madrid received more points than Barcelona.\nFOL: MorePoints(RealMadrid, Barcelona)\nTEXT: Neither Real Madrid nor Barcelona received more points from the games between them.\nFOL: -MorePointsInGameBetween(RealMadrid, Barcelona) & -MorePointsInGameBetween(Barcelona, RealMadrid)\nTEXT: Real Madrid ranks higher than Barcelona.\nFOL: HigherRank(RealMadrid, Barcelona)\n\nANSWER: True\n</EVALUATE>\n\n<PREMISES>\nAll professional athletes spend most of their time on sports.\nAll Olympic gold medal winners are professional athletes.\nNo full-time scientists spend the majority of their time on sports.\nAll Nobel physics laureates are full-time scientists.\nAmy spends the most time on sports, or Amy is an Olympic gold medal winner.\nIf Amy is not a Nobel physics laureate, then Amy is not an Olympic gold medal winner.\n</PREMISES>\n<CONCLUSION>\nIf Amy is not an Olympic gold medal winner, then Amy is a Nobel physics laureate.\n</CONCLUSION>\n<EVALUATE>\nTEXT: All professional athletes spend most of their time on sports.\nFOL: all x. (ProfessionalAthlete(x) -> SpendOn(x, MostOfTheirTime, Sports))\nTEXT: All Olympic gold medal winners are professional athletes.\nFOL: all x. (OlympicGoldMedalWinner(x) -> ProfessionalAthlete(x))\nTEXT: No full-time scientists spend the majority of their time on sports.\nFOL: all x. (FullTimeScientist(x) -> -SpendOn(x, MostOfTheirTime, Sports))\nTEXT: All Nobel physics laureates are full-time scientists.\nFOL: all x. (NobelPhysicsLaureate(x) -> FullTimeScientist(x))\nTEXT: Amy spends the most time on sports, or Amy is an Olympic gold medal winner.\nFOL: SpendOn(Amy, MostOfTheirTime, Sports) | OlympicGoldMedalWinner(Amy)\nTEXT: If Amy is not a Nobel physics laureate, then Amy is not an Olympic gold medal winner.\nFOL: -NobelPhysicsLaureate(Amy) -> -OlympicGoldMedalWinner(Amy)\nTEXT: If Amy is not an Olympic gold medal winner, then Amy is a Nobel physics laureate.\nFOL: -OlympicGoldMedalWinner(Amy) -> NobelLaureate(Amy)\n\nANSWER: False\n</EVALUATE>\n\n<PREMISES>\nIf a person pays their taxes, then they contribute to the country.\nEveryone who works for a government department pays a tax on their salary.\nEveryone in the army is an employee of a government department.\nEveryone convicted of murder goes to prison.\nEveryone who has been to prison has a criminal record.\nJames was either once convicted of murder, or spent time in prison.\nJames either has a criminal record, or pays his taxes.\n</PREMISES>\n<CONCLUSION>\nJames does not contribute to the country.\n</CONCLUSION>\n<EVALUATE>\nTEXT: If a person pays their taxes, then they contribute to the country.\nFOL: all x. (Taxpayer(x) -> ContributeTo(x, Country))\nTEXT: Everyone who works for a government department pays a tax on their salary.\nFOL: all x. (WorkFor(x, GovernmentAgency) -> Taxpayer(x))\nTEXT: Everyone in the army is an employee of a government department.\nFOL: all x. (ServesIn(x, TheArmy) -> WorkFor(x, GovernmentAgency))\nTEXT: Everyone convicted of murder goes to prison.\nFOL: all x. (SentencedForMurder(x) -> Imprisoned(x))\nTEXT: Everyone who has been to prison has a criminal record.\nFOL: all x. (Imprisoned((x) -> Has(x, CriminalRecord))\nTEXT: James was either once convicted of murder, or spent time in prison.\nFOL: ((SentencedForMurder(James) & -Imprisoned(James)) | (-SentencedForMurder(James) & Imprisoned(James)))\nTEXT: James either has a criminal record, or pays his taxes.\nFOL: ((Has(James, CriminalRecord) & -Taxpayer(James)) | (-Has(James, CriminalRecord) & Taxpayer(James)))\nTEXT: James does not contribute to the country.\nFOL: ContributeToCountry(James)\n\nANSWER: Uncertain\n</EVALUATE>\n\n<PREMISES>\nNo songs are visuals.\nAll folk songs are songs.\nAll videos are visuals.\nAll movies are videos.\nAll sci-fi movies are movies.\nInception is a sci-fi movie.\nMac is neither a folk song nor a sci-fi movie.\n</PREMISES>\n<CONCLUSION>\nInception is a folk song.\n</CONCLUSION>\n<EVALUATE>\nTEXT: No songs are visuals.\nFOL: all x. (Song(x) -> -Visual(x))\nTEXT: All folk songs are songs.\nFOL: all x. (FolkSong(x) -> Song(x))\nTEXT: All videos are visuals.\nFOL: all x. (Video(x) -> Visual(x))\nTEXT: All movies are videos.\nFOL: all x. (Movie(x) -> Video(x))\nTEXT: All sci-fi movies are movies.\nFOL: all x. (ScifiMovie(x) -> Movie(x))\nTEXT: Inception is a sci-fi movie.\nFOL: ScifiMovie(Inception)\nTEXT: Mac is neither a folk song nor a sci-fi movie.\nFOL: -FolkSong(Mac) & -ScifiMovie(Mac)\nTEXT: Inception is a folk song.\nFOL: FolkSong(Inception)\n\nANSWER: False\n</EVALUATE>\n\n<PREMISES>\nEvery chef can cook.\nSome people who aren’t chefs can cook.\nPeople who cook can make scrambled eggs and pasta.\nIf someone can make cookies and muffins, they are a baker.\nBakers who can also make scrambled eggs can make a good breakfast.\nLuke can make cookies, scrambled eggs, and muffins, but not pasta.\n</PREMISES>\n<CONCLUSION>\nLuke is a chef.\n</CONCLUSION>\n<EVALUATE>\nTEXT: Every chef can cook.\nFOL: all x. (Chef(x) -> Can(x, Cook))\nTEXT: Some people who aren’t chefs can cook.\nFOL: exists x. (-Chef(x) & Can(x, Cook))\nTEXT: People who cook can make scrambled eggs and pasta.\nFOL: all x. (Can(x, Cook) -> (CanMake(x, ScrambledEggs) & CanMake(x, Pasta)))\nTEXT: If someone can make cookies and muffins, they are a baker.\nFOL: all x. (CanMake(x, Cookies) & CanMake(x, Muffins) -> Baker(x))\nTEXT: Bakers who can also make scrambled eggs can make a good breakfast.\nFOL: all x. ((Baker(x) & CanMake(x, ScrambledEggs)) -> CanMake(x, GoodBreakfast))\nTEXT: Luke can make cookies, scrambled eggs, and muffins, but not pasta.\nFOL: CanMake(Luke, Cookies) & (CanMake(Luke, ScrambledEggs) & CanMake(Luke, Muffins) & -CanMake(Luke, Pasta)\nTEXT: Luke is a chef.\nFOL: MakeGoodBreakfast(Luke)\n\nANSWER: False\n</EVALUATE>\n\n<PREMISES>\nETS develops various standardized tests primarily in the United States for K-12 and higher education.\nETS administers international tests, including the TOEFL, TOEIC, GRE, and subject tests.\nMany of the assessments ETS develops are associated with entry to the US tertiary and quaternary education institutions.\nETS also develops K-12 statewide assessments used for accountability testing in many states.\n</PREMISES>\n<CONCLUSION>\nETS doesn't administer tests internationally.\n</CONCLUSION>\n<EVALUATE>\nTEXT: ETS develops various standardized tests primarily in the United States for K-12 and higher education.\nFOL: exists x. exists y. (Develop(eTS, x) & Develop(eTS, y) & StandardizedTest(x) & StandardizedTest(y) & In(x, UnitedState) & In(y, UnitedState) & For(x, kOneTwoAndHigherEducation) & For(y, kOneTwoAndHigherEducation))\nTEXT: ETS administers international tests, including the TOEFL, TOEIC, GRE, and subject tests.\nFOL: exists x. (Administer(eTS, x) & InternationalTest(x) & (TOEFL(x) | TOEIC(x) | GRE(x) | SubjectTest(x)))\nTEXT: Many of the assessments ETS develops are associated with entry to the US tertiary and quaternary education institutions.\nFOL: exists x. (Develop(eTS, x) & AssociatedWith(x, EntryToUSEducationInstitution))\nTEXT: ETS also develops K-12 statewide assessments used for accountability testing in many states.\nFOL: exists x. (Develop(eTS, x) & StateWideAssesment(x) & UsedFor(x, AccountabilityTesting))\nTEXT: ETS doesn't administer tests internationally.\nFOL: exists x. (Develops(Ets, x) & For(x, k-OneTwoandhighereducation)) & exists x. (Develops(Ets, x) & AssociatedWith(x, Entrytouseducationinstitutions))\n\nANSWER: False\n</EVALUATE>\n\n<PREMISES>\nDaveed Diggs is an actor and film producer.\nDaveed Diggs played two roles in the musical Hamilton on Broadway.\nOne of the actors from Hamilton won the best actor award.\nThe actor playing Thomas Jefferson won the best actor award.\nDaveed Diggs played Thomas Jefferson.\nMusicals on Broadway are not films.\n</PREMISES>\n<CONCLUSION>\nDaveed Diggs won the best actor award.\n</CONCLUSION>\n<EVALUATE>\nTEXT: Daveed Diggs is an actor and film producer.\nFOL: Actor(DaveedDiggs) & FilmProducer(DaveedDiggs)\nTEXT: Daveed Diggs played two roles in the musical Hamilton on Broadway.\nFOL: exists x. exists y.(PlaysIn(DaveedDiggs, x, Hamilton) & (-(x=y)) & PlaysIn(DaveedDiggs, y, Hamilton)) & OnBroadway(Hamilton) & Musical(Hamilton)\nTEXT: One of the actors from Hamilton won the best actor award.\nFOL: exists x. exists y.(Actor(x) & PlaysIn(x, y, Hamilton) & Wins(x, BestActorAward))\nTEXT: The actor playing Thomas Jefferson won the best actor award.\nFOL: exists x. (Actor(x) & PlaysIn(x, ThomasJefferson, Hamilton) & Wins(x, BestActorAward))\nTEXT: Daveed Diggs played Thomas Jefferson.\nFOL: Plays(DaveedDiggs, ThomasJefferson)\nTEXT: Musicals on Broadway are not films.\nFOL: all x. ((Musical(x) & OnBroadway(x)) -> -Film(x))\nTEXT: Daveed Diggs won the best actor award.\nFOL: exists x. (BRICS(x) & Speaks(x, Hindi))\n\nANSWER: True\n</EVALUATE>\n\n<PREMISES>\nAmbiortus is a prehistoric mammal genus.\nAmbiortus Dementjevi is the only known species of Ambiortus.\nMars was where Ambiortus Dementjevi lived.\nAdele was the discoverer of Ambiortus.\n</PREMISES>\n<CONCLUSION>\nAdele lived on Mars.\n</CONCLUSION>\n<EVALUATE>", "raw_generations": ["Generation 1:\nTEXT: Adele lived on Mars.\nFOL: LivesOn(Adele, Mars)\n\nTo evaluate this conclusion, we need to check if there is any relationship between Adele and Mars in the given premises. However, the premises only mention that Ambiortus Dementjevi lived on Mars, not Adele.\n\nTherefore, ANSWER: False. The conclusion does not follow from the premises.\nProcessed: False", "Generation 2:\nTEXT: Ambiortus is a prehistoric mammal genus.\nFOL: Genus(Ambiortus) & Prehistoric(Ambiortus) & Mammal(Ambiortus)\n\nTEXT: Ambiortus Dementjevi is the only known species of Ambiortus.\nFOL: Species(AmbiortusDementjevi) & SingleSpecies(Ambiortus, AmbiortusDementjevi)\n\nTEXT: Mars was where Ambiortus Dementjevi lived.\nFOL: LivesOn(AmbiortusDementjevi, Mars)\n\nTEXT: Adele was the discoverer of Ambiortus.\nFOL: Discoverer(Adele, Ambiortus)\n\nTEXT: Adele lived on Mars.\nFOL: LivesOn(Adele, Mars)\n\nANSWER: False (Adele is not a mammal and did not live during the prehistoric period)\nProcessed: False", "Generation 3:\nTEXT: Adele lived on Mars.\nFOL: LivesOn(Adele, Mars)\n\nANSWER: False\n\nExplanation: The premises do not provide any information about Adele living on Mars. Adele is the discoverer of Ambiortus, but there is no information about her living on Mars.\nProcessed: False", "Generation 4:\nTEXT: Adele was the discoverer of Ambiortus.\nFOL: Discoverer(Adele, Ambiortus)\nTEXT: Ambiortus Dementjevi lived on Mars.\nFOL: LivedOn(AmbiortusDementjevi, Mars)\nTEXT: Adele lived on Mars.\nFOL: LivedOn(Adele, Mars)\n\nANSWER: False (Adele is a human and cannot live on Mars)\nProcessed: False", "Generation 5:\nTEXT: Adele lived on Mars.\nFOL: LivesOn(Adele, Mars)\n\nFOL:\nall x. (Ambiortus(x) -> PrehistoricMammalGenus(x))\nall x. (AmbiortusDementjevi(x) -> Ambiortus(x))\nonly x. (AmbiortusDementjevi(x) -> PrehistoricMammal(x))\nlivedOn x. (AmbiortusDementjevi(x) & Mars(x))\ndiscovered x. (Ambiortus(x) & Adele(x))\n\nANSWER: False\nProcessed: False", "Generation 6:\nTEXT: Adele lived on Mars.\nFOL: Lives(Adele, Mars)\n\nANSWER: False\n\nIn the given premises, there is no evidence or information suggesting that Adele lived on Mars. The premises only state that Ambiortus Dementjevi lived on Mars, and Adele is associated with the discovery of Ambiortus.\nProcessed: False", "Generation 7:\nTEXT: Adele lived on Mars.\nFOL: LivesOn(Adele, Mars)\n\nIn order to evaluate the conclusion, we first need to determine whether the premises imply the conclusion. The FOL expressions for the premises are:\n\nTEXT: Ambiortus is a prehistoric mammal genus.\nFOL: PrehistoricMammalGenus(Ambiortus)\n\nTEXT: Ambiortus Dementjevi is the only known species of Ambiortus.\nFOL: SpeciesOf(Ambiortus, AmbiortusDementjevi) & OnlyKnownSpeciesOf(Ambiortus, AmbiortusDementjevi)\n\nTEXT: Mars was where Ambiortus Dementjevi lived.\nFOL: LivesOn(AmbiortusDementjevi, Mars)\n\nTEXT: Adele was the discoverer of Ambiortus.\nFOL: Discoverer(Adele, Ambiortus)\n\nSince we are looking for implications about Adele and not Ambiortus or Mars, we can focus on the relationship between Adele and Ambiortus. From the premises, we know that Adele discovered Ambiortus, but we do not have any information about where Adele lived or lived herself. Therefore, the conclusion that Adele lived on Mars cannot be inferred from the given premises.\n\nANSWER: Uncertain (given the premises)\nProcessed: Uncertain", "Generation 8:\nTEXT: Adele lived on Mars.\nFOL: LivesOn(Adele, Mars)\n\nTo evaluate the conclusion, we need to check if there is a premise that states or implies that Adele lived on Mars. However, the given premises only state that Ambiortus Dementjevi lived on Mars, and Adele is the discoverer of Ambiortus. There is no premise that connects Adele and Mars in a way that would justify the conclusion.\n\nANSWER: False (given the provided premises)\nProcessed: False", "Generation 9:\nTEXT: Adele lived on Mars.\nFOL: LivesOn(Adele, Mars)\n\nTo evaluate the conclusion, we need to find evidence in the premises that Adele lived on Mars. However, there is no information in the premises about Adele's residence.\n\nANSWER: Uncertain given the premises.\nProcessed: Uncertain", "Generation 10:\nTEXT: Adele lived on Mars.\nFOL: LivesOn(Adele, Mars)\n\nTo evaluate the conclusion, we need to check if there is any evidence in the premises that Adele lived on Mars. The only premise that might suggest this is that Mars was where Ambiortus Dementjevi lived, and Adele was the discoverer of Ambiortus. However, there is no direct statement or evidence that Adele herself lived on Mars.\n\nTherefore, ANSWER: Uncertain given the premises.\nProcessed: Uncertain\n\nReference: Uncertain\n========================================"], "answers": ["False", "False", "False", "False", "False", "False", "Uncertain", "False", "Uncertain", "Uncertain"]}
{"idx": 6, "prompt": "The following is a first-order logic (FOL) problem.\nThe problem is to determine whether the conclusion follows from the premises.\nThe premises are given in the form of a set of first-order logic sentences.\nThe conclusion is given in the form of a single first-order logic sentence.\nThe task is to translate each of the premises and conclusions into FOL expressions.and then to evaluate the conclusion as ANSWER: True, ANSWER: False, or ANSWER: Uncertain given the premises. The output should follow format TEXT: \nFOL: \nTEXT: \nFOL:... ANSWER: \n\n\n<PREMISES>\nAll biodegradable things are environment-friendly.\nAll woodware is biodegradable.\nAll paper is woodware.\nNothing is a good thing and also a bad thing.\nAll environment-friendly things are good.\nA worksheet is either paper or environment-friendly.\n</PREMISES>\n<CONCLUSION>\nA worksheet is not biodegradable.\n</CONCLUSION>\n<EVALUATE>\nTEXT: All biodegradable things are environment-friendly.\nFOL: all x. (Biodegradable(x) -> EnvironmentFriendly(x))\nTEXT: All woodware is biodegradable.\nFOL: all x. (Woodware(x) -> Biodegradable(x))\nTEXT: All paper is woodware.\nFOL: all x. (Paper(x) -> Woodware(x))\nTEXT: Nothing is a good thing and also a bad thing.\nFOL: -(exists x. (Good(x) & Bad(x)))\nTEXT: All environment-friendly things are good.\nFOL: all x. (EnvironmentFriendly(x) -> Good(x))\nTEXT: A worksheet is either paper or environment-friendly.\nFOL: ((Paper(Worksheet) & -EnvironmentFriendly(Worksheet)) | (-Paper(Worksheet) & EnvironmentFriendly(Worksheet)))\nTEXT: A worksheet is not biodegradable.\nFOL: -Dispensable(Worksheet)\n\nANSWER: Uncertain\n</EVALUATE>\n\n<PREMISES>\nA La Liga soccer team ranks higher than another La Liga soccer team if it receives more points.\nIf there are two La Liga soccer teams and neither has more points than the other, then the team which receives more points from the games between the two teams ranks higher.\nReal Madrid and Barcelona are both La Liga soccer teams.\nReal Madrid received more points than Barcelona.\nNeither Real Madrid nor Barcelona received more points from the games between them.\n</PREMISES>\n<CONCLUSION>\nReal Madrid ranks higher than Barcelona.\n</CONCLUSION>\n<EVALUATE>\nTEXT: A La Liga soccer team ranks higher than another La Liga soccer team if it receives more points.\nFOL: all x. all y. (LaLigaSoccerTeam(x) & LaLigaSoccerTeam(y) & MorePoints(x, y) -> RankHigherThan(x, y))\nTEXT: If there are two La Liga soccer teams and neither has more points than the other, then the team which receives more points from the games between the two teams ranks higher.\nFOL: all x. all y. (LaLigaSoccerTeam(x) & LaLigaSoccerTeam(y) & -MorePoints(x, y) & -MorePoints(y, x) & MorePointsInGameBetween(x, y) ->  RankHigherThan(x, y))\nTEXT: Real Madrid and Barcelona are both La Liga soccer teams.\nFOL: LaLigaSoccerTeam(RealMadrid) & LaLigaSoccerTeam(Barcelona)\nTEXT: Real Madrid received more points than Barcelona.\nFOL: MorePoints(RealMadrid, Barcelona)\nTEXT: Neither Real Madrid nor Barcelona received more points from the games between them.\nFOL: -MorePointsInGameBetween(RealMadrid, Barcelona) & -MorePointsInGameBetween(Barcelona, RealMadrid)\nTEXT: Real Madrid ranks higher than Barcelona.\nFOL: HigherRank(RealMadrid, Barcelona)\n\nANSWER: True\n</EVALUATE>\n\n<PREMISES>\nAll professional athletes spend most of their time on sports.\nAll Olympic gold medal winners are professional athletes.\nNo full-time scientists spend the majority of their time on sports.\nAll Nobel physics laureates are full-time scientists.\nAmy spends the most time on sports, or Amy is an Olympic gold medal winner.\nIf Amy is not a Nobel physics laureate, then Amy is not an Olympic gold medal winner.\n</PREMISES>\n<CONCLUSION>\nIf Amy is not an Olympic gold medal winner, then Amy is a Nobel physics laureate.\n</CONCLUSION>\n<EVALUATE>\nTEXT: All professional athletes spend most of their time on sports.\nFOL: all x. (ProfessionalAthlete(x) -> SpendOn(x, MostOfTheirTime, Sports))\nTEXT: All Olympic gold medal winners are professional athletes.\nFOL: all x. (OlympicGoldMedalWinner(x) -> ProfessionalAthlete(x))\nTEXT: No full-time scientists spend the majority of their time on sports.\nFOL: all x. (FullTimeScientist(x) -> -SpendOn(x, MostOfTheirTime, Sports))\nTEXT: All Nobel physics laureates are full-time scientists.\nFOL: all x. (NobelPhysicsLaureate(x) -> FullTimeScientist(x))\nTEXT: Amy spends the most time on sports, or Amy is an Olympic gold medal winner.\nFOL: SpendOn(Amy, MostOfTheirTime, Sports) | OlympicGoldMedalWinner(Amy)\nTEXT: If Amy is not a Nobel physics laureate, then Amy is not an Olympic gold medal winner.\nFOL: -NobelPhysicsLaureate(Amy) -> -OlympicGoldMedalWinner(Amy)\nTEXT: If Amy is not an Olympic gold medal winner, then Amy is a Nobel physics laureate.\nFOL: -OlympicGoldMedalWinner(Amy) -> NobelLaureate(Amy)\n\nANSWER: False\n</EVALUATE>\n\n<PREMISES>\nIf a person pays their taxes, then they contribute to the country.\nEveryone who works for a government department pays a tax on their salary.\nEveryone in the army is an employee of a government department.\nEveryone convicted of murder goes to prison.\nEveryone who has been to prison has a criminal record.\nJames was either once convicted of murder, or spent time in prison.\nJames either has a criminal record, or pays his taxes.\n</PREMISES>\n<CONCLUSION>\nJames does not contribute to the country.\n</CONCLUSION>\n<EVALUATE>\nTEXT: If a person pays their taxes, then they contribute to the country.\nFOL: all x. (Taxpayer(x) -> ContributeTo(x, Country))\nTEXT: Everyone who works for a government department pays a tax on their salary.\nFOL: all x. (WorkFor(x, GovernmentAgency) -> Taxpayer(x))\nTEXT: Everyone in the army is an employee of a government department.\nFOL: all x. (ServesIn(x, TheArmy) -> WorkFor(x, GovernmentAgency))\nTEXT: Everyone convicted of murder goes to prison.\nFOL: all x. (SentencedForMurder(x) -> Imprisoned(x))\nTEXT: Everyone who has been to prison has a criminal record.\nFOL: all x. (Imprisoned((x) -> Has(x, CriminalRecord))\nTEXT: James was either once convicted of murder, or spent time in prison.\nFOL: ((SentencedForMurder(James) & -Imprisoned(James)) | (-SentencedForMurder(James) & Imprisoned(James)))\nTEXT: James either has a criminal record, or pays his taxes.\nFOL: ((Has(James, CriminalRecord) & -Taxpayer(James)) | (-Has(James, CriminalRecord) & Taxpayer(James)))\nTEXT: James does not contribute to the country.\nFOL: ContributeToCountry(James)\n\nANSWER: Uncertain\n</EVALUATE>\n\n<PREMISES>\nNo songs are visuals.\nAll folk songs are songs.\nAll videos are visuals.\nAll movies are videos.\nAll sci-fi movies are movies.\nInception is a sci-fi movie.\nMac is neither a folk song nor a sci-fi movie.\n</PREMISES>\n<CONCLUSION>\nInception is a folk song.\n</CONCLUSION>\n<EVALUATE>\nTEXT: No songs are visuals.\nFOL: all x. (Song(x) -> -Visual(x))\nTEXT: All folk songs are songs.\nFOL: all x. (FolkSong(x) -> Song(x))\nTEXT: All videos are visuals.\nFOL: all x. (Video(x) -> Visual(x))\nTEXT: All movies are videos.\nFOL: all x. (Movie(x) -> Video(x))\nTEXT: All sci-fi movies are movies.\nFOL: all x. (ScifiMovie(x) -> Movie(x))\nTEXT: Inception is a sci-fi movie.\nFOL: ScifiMovie(Inception)\nTEXT: Mac is neither a folk song nor a sci-fi movie.\nFOL: -FolkSong(Mac) & -ScifiMovie(Mac)\nTEXT: Inception is a folk song.\nFOL: FolkSong(Inception)\n\nANSWER: False\n</EVALUATE>\n\n<PREMISES>\nEvery chef can cook.\nSome people who aren’t chefs can cook.\nPeople who cook can make scrambled eggs and pasta.\nIf someone can make cookies and muffins, they are a baker.\nBakers who can also make scrambled eggs can make a good breakfast.\nLuke can make cookies, scrambled eggs, and muffins, but not pasta.\n</PREMISES>\n<CONCLUSION>\nLuke is a chef.\n</CONCLUSION>\n<EVALUATE>\nTEXT: Every chef can cook.\nFOL: all x. (Chef(x) -> Can(x, Cook))\nTEXT: Some people who aren’t chefs can cook.\nFOL: exists x. (-Chef(x) & Can(x, Cook))\nTEXT: People who cook can make scrambled eggs and pasta.\nFOL: all x. (Can(x, Cook) -> (CanMake(x, ScrambledEggs) & CanMake(x, Pasta)))\nTEXT: If someone can make cookies and muffins, they are a baker.\nFOL: all x. (CanMake(x, Cookies) & CanMake(x, Muffins) -> Baker(x))\nTEXT: Bakers who can also make scrambled eggs can make a good breakfast.\nFOL: all x. ((Baker(x) & CanMake(x, ScrambledEggs)) -> CanMake(x, GoodBreakfast))\nTEXT: Luke can make cookies, scrambled eggs, and muffins, but not pasta.\nFOL: CanMake(Luke, Cookies) & (CanMake(Luke, ScrambledEggs) & CanMake(Luke, Muffins) & -CanMake(Luke, Pasta)\nTEXT: Luke is a chef.\nFOL: MakeGoodBreakfast(Luke)\n\nANSWER: False\n</EVALUATE>\n\n<PREMISES>\nETS develops various standardized tests primarily in the United States for K-12 and higher education.\nETS administers international tests, including the TOEFL, TOEIC, GRE, and subject tests.\nMany of the assessments ETS develops are associated with entry to the US tertiary and quaternary education institutions.\nETS also develops K-12 statewide assessments used for accountability testing in many states.\n</PREMISES>\n<CONCLUSION>\nETS doesn't administer tests internationally.\n</CONCLUSION>\n<EVALUATE>\nTEXT: ETS develops various standardized tests primarily in the United States for K-12 and higher education.\nFOL: exists x. exists y. (Develop(eTS, x) & Develop(eTS, y) & StandardizedTest(x) & StandardizedTest(y) & In(x, UnitedState) & In(y, UnitedState) & For(x, kOneTwoAndHigherEducation) & For(y, kOneTwoAndHigherEducation))\nTEXT: ETS administers international tests, including the TOEFL, TOEIC, GRE, and subject tests.\nFOL: exists x. (Administer(eTS, x) & InternationalTest(x) & (TOEFL(x) | TOEIC(x) | GRE(x) | SubjectTest(x)))\nTEXT: Many of the assessments ETS develops are associated with entry to the US tertiary and quaternary education institutions.\nFOL: exists x. (Develop(eTS, x) & AssociatedWith(x, EntryToUSEducationInstitution))\nTEXT: ETS also develops K-12 statewide assessments used for accountability testing in many states.\nFOL: exists x. (Develop(eTS, x) & StateWideAssesment(x) & UsedFor(x, AccountabilityTesting))\nTEXT: ETS doesn't administer tests internationally.\nFOL: exists x. (Develops(Ets, x) & For(x, k-OneTwoandhighereducation)) & exists x. (Develops(Ets, x) & AssociatedWith(x, Entrytouseducationinstitutions))\n\nANSWER: False\n</EVALUATE>\n\n<PREMISES>\nDaveed Diggs is an actor and film producer.\nDaveed Diggs played two roles in the musical Hamilton on Broadway.\nOne of the actors from Hamilton won the best actor award.\nThe actor playing Thomas Jefferson won the best actor award.\nDaveed Diggs played Thomas Jefferson.\nMusicals on Broadway are not films.\n</PREMISES>\n<CONCLUSION>\nDaveed Diggs won the best actor award.\n</CONCLUSION>\n<EVALUATE>\nTEXT: Daveed Diggs is an actor and film producer.\nFOL: Actor(DaveedDiggs) & FilmProducer(DaveedDiggs)\nTEXT: Daveed Diggs played two roles in the musical Hamilton on Broadway.\nFOL: exists x. exists y.(PlaysIn(DaveedDiggs, x, Hamilton) & (-(x=y)) & PlaysIn(DaveedDiggs, y, Hamilton)) & OnBroadway(Hamilton) & Musical(Hamilton)\nTEXT: One of the actors from Hamilton won the best actor award.\nFOL: exists x. exists y.(Actor(x) & PlaysIn(x, y, Hamilton) & Wins(x, BestActorAward))\nTEXT: The actor playing Thomas Jefferson won the best actor award.\nFOL: exists x. (Actor(x) & PlaysIn(x, ThomasJefferson, Hamilton) & Wins(x, BestActorAward))\nTEXT: Daveed Diggs played Thomas Jefferson.\nFOL: Plays(DaveedDiggs, ThomasJefferson)\nTEXT: Musicals on Broadway are not films.\nFOL: all x. ((Musical(x) & OnBroadway(x)) -> -Film(x))\nTEXT: Daveed Diggs won the best actor award.\nFOL: exists x. (BRICS(x) & Speaks(x, Hindi))\n\nANSWER: True\n</EVALUATE>\n\n<PREMISES>\nFort Ticonderoga is the former name for Fort Carillon.\nChris Hemsworth destroyed Fort Carillon.\nFort Carillon was located in New France.\nNew France is not in Europe.\n</PREMISES>\n<CONCLUSION>\nChris Hemsworth destroyed a fort in New France.\n</CONCLUSION>\n<EVALUATE>", "raw_generations": ["Generation 1:\nTEXT: Fort Ticonderoga is the former name for Fort Carillon.\nFOL: FormerName(FortTiconderoga, FortCarillon)\nTEXT: Chris Hemsworth destroyed Fort Carillon.\nFOL: Destroy(ChrisHemsworth, FortCarillon)\nTEXT: Fort Carillon was located in New France.\nFOL: Located(FortCarillon, NewFrance)\nTEXT: New France is not in Europe.\nFOL: -In(NewFrance, Europe)\nTEXT: Chris Hemsworth destroyed a fort in New France.\nFOL: exists x. (Destroy(ChrisHemsworth, x) & Located(x, NewFrance))\n\nANSWER: True\nProcessed: True", "Generation 2:\nTEXT: Fort Ticonderoga is the former name for Fort Carillon.\nFOL: FormerName(FortTiconderoga, FortCarillon)\nTEXT: Chris Hemsworth destroyed Fort Carillon.\nFOL: Destroyed(ChrisHemsworth, FortCarillon)\nTEXT: Fort Carillon was located in New France.\nFOL: Located(FortCarillon, NewFrance)\nTEXT: New France is not in Europe.\nFOL: -In(NewFrance, Europe)\nTEXT: Chris Hemsworth destroyed a fort in New France.\nFOL: exists x. (Destroyed(ChrisHemsworth, x) & Located(x, NewFrance))\n\nANSWER: True\nProcessed: True", "Generation 3:\nTEXT: Fort Ticonderoga is the former name for Fort Carillon.\nFOL: FormerName(FortTiconderoga, FortCarillon)\nTEXT: Chris Hemsworth destroyed Fort Carillon.\nFOL: Destroyed(ChrisHemsworth, FortCarillon)\nTEXT: Fort Carillon was located in New France.\nFOL: Located(FortCarillon, NewFrance)\nTEXT: New France is not in Europe.\nFOL: not(In(NewFrance, Europe))\nTEXT: Chris Hemsworth destroyed a fort in New France.\nFOL: exists x. (Destroyed(ChrisHemsworth, x) & Located(x, NewFrance))\n\nANSWER: True\nProcessed: True", "Generation 4:\nTEXT: Fort Ticonderoga is the former name for Fort Carillon.\nFOL: FormerName(FortTiconderoga, FortCarillon)\nTEXT: Chris Hemsworth destroyed Fort Carillon.\nFOL: Destroyed(ChrisHemsworth, FortCarillon)\nTEXT: Fort Carillon was located in New France.\nFOL: Located(FortCarillon, NewFrance)\nTEXT: New France is not in Europe.\nFOL: -In(NewFrance, Europe)\nTEXT: Chris Hemsworth destroyed a fort in New France.\nFOL: exists x. (Destroyed(ChrisHemsworth, x) & Located(x, NewFrance))\n\nANSWER: True\nProcessed: True", "Generation 5:\nTEXT: Fort Ticonderoga is the former name for Fort Carillon.\nFOL: FormerName(FortTiconderoga, FortCarillon)\nTEXT: Chris Hemsworth destroyed Fort Carillon.\nFOL: Destroyed(ChrisHemsworth, FortCarillon)\nTEXT: Fort Carillon was located in New France.\nFOL: Located(FortCarillon, NewFrance)\nTEXT: New France is not in Europe.\nFOL: -In(NewFrance, Europe)\nTEXT: Chris Hemsworth destroyed a fort in New France.\nFOL: exists x. (Destroyed(ChrisHemsworth, x) & Located(x, NewFrance))\n\nANSWER: True\nProcessed: True", "Generation 6:\nTEXT: Fort Ticonderoga is the former name for Fort Carillon.\nFOL: oldName(FortTiconderoga, FortCarillon)\n\nTEXT: Chris Hemsworth destroyed Fort Carillon.\nFOL: destroys(ChrisHemsworth, FortCarillon)\n\nTEXT: Fort Carillon was located in New France.\nFOL: locatedIn(FortCarillon, NewFrance)\n\nTEXT: New France is not in Europe.\nFOL: -in(NewFrance, Europe)\n\nTEXT: Chris Hemsworth destroyed a fort in New France.\nFOL: exists x. (locatedIn(x, NewFrance) & destroys(ChrisHemsworth, x))\n\nANSWER: True\nProcessed: True", "Generation 7:\nTEXT: Fort Ticonderoga is the former name for Fort Carillon.\nFOL: FormerName(FortTiconderoga, FortCarillon)\nTEXT: Chris Hemsworth destroyed Fort Carillon.\nFOL: Destroyed(ChrisHemsworth, FortCarillon)\nTEXT: Fort Carillon was located in New France.\nFOL: Located(FortCarillon, NewFrance)\nTEXT: New France is not in Europe.\nFOL: -In(NewFrance, Europe)\nTEXT: Chris Hemsworth destroyed a fort in New France.\nFOL: exists x. ((FormerName(x, FortCarillon) & Located(x, NewFrance)) -> Destroyed(ChrisHemsworth, x))\n\nANSWER: True\nProcessed: True", "Generation 8:\nTEXT: Fort Ticonderoga is the former name for Fort Carillon.\nFOL: FormerName(FortTiconderoga, FortCarillon)\nTEXT: Chris Hemsworth destroyed Fort Carillon.\nFOL: Destroyed(ChrisHemsworth, FortCarillon)\nTEXT: Fort Carillon was located in New France.\nFOL: Located(FortCarillon, NewFrance)\nTEXT: New France is not in Europe.\nFOL: not In(NewFrance, Europe)\nTEXT: Chris Hemsworth destroyed a fort in New France.\nFOL: exists x. ((FormerName(x, FortCarillon) & Located(x, NewFrance)) -> Destroyed(ChrisHemsworth, x))\n\nANSWER: True\nProcessed: True", "Generation 9:\nTEXT: Fort Ticonderoga is the former name for Fort Carillon.\nFOL: OldName(FortTiconderoga, FortCarillon)\nTEXT: Chris Hemsworth destroyed Fort Carillon.\nFOL: Destroy(ChrisHemsworth, FortCarillon)\nTEXT: Fort Carillon was located in New France.\nFOL: LocatedIn(FortCarillon, NewFrance)\nTEXT: New France is not in Europe.\nFOL: -In(NewFrance, Europe)\nTEXT: Chris Hemsworth destroyed a fort in New France.\nFOL: exists x. ((Destroy(ChrisHemsworth, x) & LocatedIn(x, NewFrance))\n\nANSWER: True\nProcessed: True", "Generation 10:\nTEXT: Fort Ticonderoga is the former name for Fort Carillon.\nFOL: FormerName(FortTiconderoga, FortCarillon)\n\nTEXT: Chris Hemsworth destroyed Fort Carillon.\nFOL: Destroyed(ChrisHemsworth, FortCarillon)\n\nTEXT: Fort Carillon was located in New France.\nFOL: LocatedIn(FortCarillon, NewFrance)\n\nTEXT: New France is not in Europe.\nFOL: -In(NewFrance, Europe)\n\nTEXT: Chris Hemsworth destroyed a fort in New France.\nFOL: exists x. ((FormerName(x, FortCarillon) & LocatedIn(x, NewFrance)) -> Destroyed(ChrisHemsworth, x))\n\nANSWER: True\nProcessed: True\n\nReference: True\n========================================"], "answers": ["True", "True", "True", "True", "True", "True", "True", "True", "True", "True"]}
{"idx": 7, "prompt": "The following is a first-order logic (FOL) problem.\nThe problem is to determine whether the conclusion follows from the premises.\nThe premises are given in the form of a set of first-order logic sentences.\nThe conclusion is given in the form of a single first-order logic sentence.\nThe task is to translate each of the premises and conclusions into FOL expressions.and then to evaluate the conclusion as ANSWER: True, ANSWER: False, or ANSWER: Uncertain given the premises. The output should follow format TEXT: \nFOL: \nTEXT: \nFOL:... ANSWER: \n\n\n<PREMISES>\nAll biodegradable things are environment-friendly.\nAll woodware is biodegradable.\nAll paper is woodware.\nNothing is a good thing and also a bad thing.\nAll environment-friendly things are good.\nA worksheet is either paper or environment-friendly.\n</PREMISES>\n<CONCLUSION>\nA worksheet is not biodegradable.\n</CONCLUSION>\n<EVALUATE>\nTEXT: All biodegradable things are environment-friendly.\nFOL: all x. (Biodegradable(x) -> EnvironmentFriendly(x))\nTEXT: All woodware is biodegradable.\nFOL: all x. (Woodware(x) -> Biodegradable(x))\nTEXT: All paper is woodware.\nFOL: all x. (Paper(x) -> Woodware(x))\nTEXT: Nothing is a good thing and also a bad thing.\nFOL: -(exists x. (Good(x) & Bad(x)))\nTEXT: All environment-friendly things are good.\nFOL: all x. (EnvironmentFriendly(x) -> Good(x))\nTEXT: A worksheet is either paper or environment-friendly.\nFOL: ((Paper(Worksheet) & -EnvironmentFriendly(Worksheet)) | (-Paper(Worksheet) & EnvironmentFriendly(Worksheet)))\nTEXT: A worksheet is not biodegradable.\nFOL: -Dispensable(Worksheet)\n\nANSWER: Uncertain\n</EVALUATE>\n\n<PREMISES>\nA La Liga soccer team ranks higher than another La Liga soccer team if it receives more points.\nIf there are two La Liga soccer teams and neither has more points than the other, then the team which receives more points from the games between the two teams ranks higher.\nReal Madrid and Barcelona are both La Liga soccer teams.\nReal Madrid received more points than Barcelona.\nNeither Real Madrid nor Barcelona received more points from the games between them.\n</PREMISES>\n<CONCLUSION>\nReal Madrid ranks higher than Barcelona.\n</CONCLUSION>\n<EVALUATE>\nTEXT: A La Liga soccer team ranks higher than another La Liga soccer team if it receives more points.\nFOL: all x. all y. (LaLigaSoccerTeam(x) & LaLigaSoccerTeam(y) & MorePoints(x, y) -> RankHigherThan(x, y))\nTEXT: If there are two La Liga soccer teams and neither has more points than the other, then the team which receives more points from the games between the two teams ranks higher.\nFOL: all x. all y. (LaLigaSoccerTeam(x) & LaLigaSoccerTeam(y) & -MorePoints(x, y) & -MorePoints(y, x) & MorePointsInGameBetween(x, y) ->  RankHigherThan(x, y))\nTEXT: Real Madrid and Barcelona are both La Liga soccer teams.\nFOL: LaLigaSoccerTeam(RealMadrid) & LaLigaSoccerTeam(Barcelona)\nTEXT: Real Madrid received more points than Barcelona.\nFOL: MorePoints(RealMadrid, Barcelona)\nTEXT: Neither Real Madrid nor Barcelona received more points from the games between them.\nFOL: -MorePointsInGameBetween(RealMadrid, Barcelona) & -MorePointsInGameBetween(Barcelona, RealMadrid)\nTEXT: Real Madrid ranks higher than Barcelona.\nFOL: HigherRank(RealMadrid, Barcelona)\n\nANSWER: True\n</EVALUATE>\n\n<PREMISES>\nAll professional athletes spend most of their time on sports.\nAll Olympic gold medal winners are professional athletes.\nNo full-time scientists spend the majority of their time on sports.\nAll Nobel physics laureates are full-time scientists.\nAmy spends the most time on sports, or Amy is an Olympic gold medal winner.\nIf Amy is not a Nobel physics laureate, then Amy is not an Olympic gold medal winner.\n</PREMISES>\n<CONCLUSION>\nIf Amy is not an Olympic gold medal winner, then Amy is a Nobel physics laureate.\n</CONCLUSION>\n<EVALUATE>\nTEXT: All professional athletes spend most of their time on sports.\nFOL: all x. (ProfessionalAthlete(x) -> SpendOn(x, MostOfTheirTime, Sports))\nTEXT: All Olympic gold medal winners are professional athletes.\nFOL: all x. (OlympicGoldMedalWinner(x) -> ProfessionalAthlete(x))\nTEXT: No full-time scientists spend the majority of their time on sports.\nFOL: all x. (FullTimeScientist(x) -> -SpendOn(x, MostOfTheirTime, Sports))\nTEXT: All Nobel physics laureates are full-time scientists.\nFOL: all x. (NobelPhysicsLaureate(x) -> FullTimeScientist(x))\nTEXT: Amy spends the most time on sports, or Amy is an Olympic gold medal winner.\nFOL: SpendOn(Amy, MostOfTheirTime, Sports) | OlympicGoldMedalWinner(Amy)\nTEXT: If Amy is not a Nobel physics laureate, then Amy is not an Olympic gold medal winner.\nFOL: -NobelPhysicsLaureate(Amy) -> -OlympicGoldMedalWinner(Amy)\nTEXT: If Amy is not an Olympic gold medal winner, then Amy is a Nobel physics laureate.\nFOL: -OlympicGoldMedalWinner(Amy) -> NobelLaureate(Amy)\n\nANSWER: False\n</EVALUATE>\n\n<PREMISES>\nIf a person pays their taxes, then they contribute to the country.\nEveryone who works for a government department pays a tax on their salary.\nEveryone in the army is an employee of a government department.\nEveryone convicted of murder goes to prison.\nEveryone who has been to prison has a criminal record.\nJames was either once convicted of murder, or spent time in prison.\nJames either has a criminal record, or pays his taxes.\n</PREMISES>\n<CONCLUSION>\nJames does not contribute to the country.\n</CONCLUSION>\n<EVALUATE>\nTEXT: If a person pays their taxes, then they contribute to the country.\nFOL: all x. (Taxpayer(x) -> ContributeTo(x, Country))\nTEXT: Everyone who works for a government department pays a tax on their salary.\nFOL: all x. (WorkFor(x, GovernmentAgency) -> Taxpayer(x))\nTEXT: Everyone in the army is an employee of a government department.\nFOL: all x. (ServesIn(x, TheArmy) -> WorkFor(x, GovernmentAgency))\nTEXT: Everyone convicted of murder goes to prison.\nFOL: all x. (SentencedForMurder(x) -> Imprisoned(x))\nTEXT: Everyone who has been to prison has a criminal record.\nFOL: all x. (Imprisoned((x) -> Has(x, CriminalRecord))\nTEXT: James was either once convicted of murder, or spent time in prison.\nFOL: ((SentencedForMurder(James) & -Imprisoned(James)) | (-SentencedForMurder(James) & Imprisoned(James)))\nTEXT: James either has a criminal record, or pays his taxes.\nFOL: ((Has(James, CriminalRecord) & -Taxpayer(James)) | (-Has(James, CriminalRecord) & Taxpayer(James)))\nTEXT: James does not contribute to the country.\nFOL: ContributeToCountry(James)\n\nANSWER: Uncertain\n</EVALUATE>\n\n<PREMISES>\nNo songs are visuals.\nAll folk songs are songs.\nAll videos are visuals.\nAll movies are videos.\nAll sci-fi movies are movies.\nInception is a sci-fi movie.\nMac is neither a folk song nor a sci-fi movie.\n</PREMISES>\n<CONCLUSION>\nInception is a folk song.\n</CONCLUSION>\n<EVALUATE>\nTEXT: No songs are visuals.\nFOL: all x. (Song(x) -> -Visual(x))\nTEXT: All folk songs are songs.\nFOL: all x. (FolkSong(x) -> Song(x))\nTEXT: All videos are visuals.\nFOL: all x. (Video(x) -> Visual(x))\nTEXT: All movies are videos.\nFOL: all x. (Movie(x) -> Video(x))\nTEXT: All sci-fi movies are movies.\nFOL: all x. (ScifiMovie(x) -> Movie(x))\nTEXT: Inception is a sci-fi movie.\nFOL: ScifiMovie(Inception)\nTEXT: Mac is neither a folk song nor a sci-fi movie.\nFOL: -FolkSong(Mac) & -ScifiMovie(Mac)\nTEXT: Inception is a folk song.\nFOL: FolkSong(Inception)\n\nANSWER: False\n</EVALUATE>\n\n<PREMISES>\nEvery chef can cook.\nSome people who aren’t chefs can cook.\nPeople who cook can make scrambled eggs and pasta.\nIf someone can make cookies and muffins, they are a baker.\nBakers who can also make scrambled eggs can make a good breakfast.\nLuke can make cookies, scrambled eggs, and muffins, but not pasta.\n</PREMISES>\n<CONCLUSION>\nLuke is a chef.\n</CONCLUSION>\n<EVALUATE>\nTEXT: Every chef can cook.\nFOL: all x. (Chef(x) -> Can(x, Cook))\nTEXT: Some people who aren’t chefs can cook.\nFOL: exists x. (-Chef(x) & Can(x, Cook))\nTEXT: People who cook can make scrambled eggs and pasta.\nFOL: all x. (Can(x, Cook) -> (CanMake(x, ScrambledEggs) & CanMake(x, Pasta)))\nTEXT: If someone can make cookies and muffins, they are a baker.\nFOL: all x. (CanMake(x, Cookies) & CanMake(x, Muffins) -> Baker(x))\nTEXT: Bakers who can also make scrambled eggs can make a good breakfast.\nFOL: all x. ((Baker(x) & CanMake(x, ScrambledEggs)) -> CanMake(x, GoodBreakfast))\nTEXT: Luke can make cookies, scrambled eggs, and muffins, but not pasta.\nFOL: CanMake(Luke, Cookies) & (CanMake(Luke, ScrambledEggs) & CanMake(Luke, Muffins) & -CanMake(Luke, Pasta)\nTEXT: Luke is a chef.\nFOL: MakeGoodBreakfast(Luke)\n\nANSWER: False\n</EVALUATE>\n\n<PREMISES>\nETS develops various standardized tests primarily in the United States for K-12 and higher education.\nETS administers international tests, including the TOEFL, TOEIC, GRE, and subject tests.\nMany of the assessments ETS develops are associated with entry to the US tertiary and quaternary education institutions.\nETS also develops K-12 statewide assessments used for accountability testing in many states.\n</PREMISES>\n<CONCLUSION>\nETS doesn't administer tests internationally.\n</CONCLUSION>\n<EVALUATE>\nTEXT: ETS develops various standardized tests primarily in the United States for K-12 and higher education.\nFOL: exists x. exists y. (Develop(eTS, x) & Develop(eTS, y) & StandardizedTest(x) & StandardizedTest(y) & In(x, UnitedState) & In(y, UnitedState) & For(x, kOneTwoAndHigherEducation) & For(y, kOneTwoAndHigherEducation))\nTEXT: ETS administers international tests, including the TOEFL, TOEIC, GRE, and subject tests.\nFOL: exists x. (Administer(eTS, x) & InternationalTest(x) & (TOEFL(x) | TOEIC(x) | GRE(x) | SubjectTest(x)))\nTEXT: Many of the assessments ETS develops are associated with entry to the US tertiary and quaternary education institutions.\nFOL: exists x. (Develop(eTS, x) & AssociatedWith(x, EntryToUSEducationInstitution))\nTEXT: ETS also develops K-12 statewide assessments used for accountability testing in many states.\nFOL: exists x. (Develop(eTS, x) & StateWideAssesment(x) & UsedFor(x, AccountabilityTesting))\nTEXT: ETS doesn't administer tests internationally.\nFOL: exists x. (Develops(Ets, x) & For(x, k-OneTwoandhighereducation)) & exists x. (Develops(Ets, x) & AssociatedWith(x, Entrytouseducationinstitutions))\n\nANSWER: False\n</EVALUATE>\n\n<PREMISES>\nDaveed Diggs is an actor and film producer.\nDaveed Diggs played two roles in the musical Hamilton on Broadway.\nOne of the actors from Hamilton won the best actor award.\nThe actor playing Thomas Jefferson won the best actor award.\nDaveed Diggs played Thomas Jefferson.\nMusicals on Broadway are not films.\n</PREMISES>\n<CONCLUSION>\nDaveed Diggs won the best actor award.\n</CONCLUSION>\n<EVALUATE>\nTEXT: Daveed Diggs is an actor and film producer.\nFOL: Actor(DaveedDiggs) & FilmProducer(DaveedDiggs)\nTEXT: Daveed Diggs played two roles in the musical Hamilton on Broadway.\nFOL: exists x. exists y.(PlaysIn(DaveedDiggs, x, Hamilton) & (-(x=y)) & PlaysIn(DaveedDiggs, y, Hamilton)) & OnBroadway(Hamilton) & Musical(Hamilton)\nTEXT: One of the actors from Hamilton won the best actor award.\nFOL: exists x. exists y.(Actor(x) & PlaysIn(x, y, Hamilton) & Wins(x, BestActorAward))\nTEXT: The actor playing Thomas Jefferson won the best actor award.\nFOL: exists x. (Actor(x) & PlaysIn(x, ThomasJefferson, Hamilton) & Wins(x, BestActorAward))\nTEXT: Daveed Diggs played Thomas Jefferson.\nFOL: Plays(DaveedDiggs, ThomasJefferson)\nTEXT: Musicals on Broadway are not films.\nFOL: all x. ((Musical(x) & OnBroadway(x)) -> -Film(x))\nTEXT: Daveed Diggs won the best actor award.\nFOL: exists x. (BRICS(x) & Speaks(x, Hindi))\n\nANSWER: True\n</EVALUATE>\n\n<PREMISES>\nParis is in the United States of America.\nThe United States of America is part of South America.\nSouth America is in the eastern hemisphere of the earth.\nParis is a highly developed city where noone lives.\nIf place A is in place B and place B is in place C, then place A is in place C.\n</PREMISES>\n<CONCLUSION>\nA highly developed city where noone lives is in the eastern hemisphere of the earth.\n</CONCLUSION>\n<EVALUATE>", "raw_generations": ["Generation 1:\nTEXT: Paris is in the United States of America.\nFOL: In(Paris, UnitedStatesOfAmerica)\nTEXT: The United States of America is part of South America.\nFOL: PartOf(UnitedStatesOfAmerica, SouthAmerica)\nTEXT: South America is in the eastern hemisphere of the earth.\nFOL: In(SouthAmerica, EasternHemisphere)\nTEXT: Paris is a highly developed city where noone lives.\nFOL: HighlyDevelopedCity(Paris) & -LivesIn(Paris, Someone)\nTEXT: If place A is in place B and place B is in place C, then place A is in place C.\nFOL: all x. all y. all z. ((In(x, y) & In(y, z)) -> In(x, z))\nTEXT: A highly developed city where noone lives is in the eastern hemisphere of the earth.\nFOL: HighlyDevelopedCity(A) & -LivesIn(A, Someone) -> In(A, EasternHemisphere)\n\nANSWER: Uncertain (The premises are incorrect, so we cannot determine if the conclusion follows from them)\nProcessed: Uncertain", "Generation 2:\nTEXT: Paris is in the United States of America.\nFOL: In(Paris, UnitedStatesOfAmerica)\nTEXT: The United States of America is part of South America.\nFOL: PartOf(UnitedStatesOfAmerica, SouthAmerica)\nTEXT: South America is in the eastern hemisphere of the earth.\nFOL: In(SouthAmerica, EasternHemisphereOfEarth)\nTEXT: Paris is a highly developed city where noone lives.\nFOL: HighlyDevelopedCity(Paris) & -InhabitedBy(Paris, Someone)\nTEXT: If place A is in place B and place B is in place C, then place A is in place C.\nFOL: all x. all y. all z. (In(x, y) & In(y, z) -> In(x, z))\nTEXT: A highly developed city where noone lives is in the eastern hemisphere of the earth.\nFOL: HighlyDevelopedCity(x) & -InhabitedBy(x, Someone) -> In(x, EasternHemisphereOfEarth)\n\nANSWER: Uncertain (The premises do not imply the conclusion, as the conclusion refers to \"a\" highly developed city, while the premises only tell us that Paris is such a city. It is not certain that there are other highly developed, uninhabited cities in the eastern hemisphere.)\nProcessed: Uncertain", "Generation 3:\nTEXT: Paris is in the United States of America.\nFOL: In(Paris, UnitedStatesOfAmerica)\nTEXT: The United States of America is part of South America.\nFOL: PartOf(UnitedStatesOfAmerica, SouthAmerica)\nTEXT: South America is in the eastern hemisphere of the earth.\nFOL: In(SouthAmerica, EasternHemisphere)\nTEXT: Paris is a highly developed city where noone lives.\nFOL: HighlyDevelopedCity(Paris) & -LivesIn(Paris, x)\nTEXT: If place A is in place B and place B is in place C, then place A is in place C.\nFOL: all x. all y. all z. ((In(x, y) & In(y, z)) -> In(x, z))\nTEXT: A highly developed city where noone lives is in the eastern hemisphere of the earth.\nFOL: all x. ((HighlyDevelopedCity(x) & -LivesIn(x, y)) -> In(x, EasternHemisphere))\n\nANSWER: Uncertain (The premises do not imply that all highly developed cities where noone lives are in the eastern hemisphere, as Paris is the only example given and it is incorrectly located in the USA, which is in the western hemisphere.)\nProcessed: Uncertain", "Generation 4:\nTEXT: Paris is in the United States of America.\nFOL: In(Paris, UnitedStatesOfAmerica)\n\nTEXT: The United States of America is part of South America.\nFOL: PartOf(UnitedStatesOfAmerica, SouthAmerica)\n\nTEXT: South America is in the eastern hemisphere of the earth.\nFOL: In(SouthAmerica, EasternHemisphere)\n\nTEXT: Paris is a highly developed city where noone lives.\nFOL: HighlyDevelopedCity(Paris) & -HasResidents(Paris)\n\nTEXT: If place A is in place B and place B is in place C, then place A is in place C.\nFOL: all x. all y. all z. (In(x, y) & In(y, z) -> In(x, z))\n\nTEXT: A highly developed city where noone lives is in the eastern hemisphere of the earth.\nFOL: all x. (HighlyDevelopedCity(x) & -HasResidents(x) -> In(x, EasternHemisphere))\n\nANSWER: Uncertain (The premises do not imply that every highly developed city where noone lives is in the eastern hemisphere of the earth. Only Paris is mentioned.)\nProcessed: Uncertain", "Generation 5:\nTEXT: Paris is in the United States of America.\nFOL: In(Paris, UnitedStatesOfAmerica)\nTEXT: The United States of America is part of South America.\nFOL: PartOf(UnitedStatesOfAmerica, SouthAmerica)\nTEXT: South America is in the eastern hemisphere of the earth.\nFOL: In(SouthAmerica, EasternHemisphere)\nTEXT: Paris is a highly developed city where noone lives.\nFOL: HighlyDeveloped(Paris) & -LivesIn(Paris, Someone)\nTEXT: If place A is in place B and place B is in place C, then place A is in place C.\nFOL: all x. all y. all z. ((In(x, y) & In(y, z)) -> In(x, z))\nTEXT: A highly developed city where noone lives is in the eastern hemisphere of the earth.\nFOL: HighlyDeveloped(A) & -LivesIn(A, Someone) -> In(A, EasternHemisphere)\n\nANSWER: Uncertain (This conclusion is not a direct result of the given premises)\nProcessed: Uncertain", "Generation 6:\nTEXT: Paris is in the United States of America.\nFOL: In(Paris, UnitedStatesOfAmerica)\nTEXT: The United States of America is part of South America.\nFOL: PartOf(UnitedStatesOfAmerica, SouthAmerica)\nTEXT: South America is in the eastern hemisphere of the earth.\nFOL: In(SouthAmerica, EasternHemisphere)\nTEXT: Paris is a highly developed city where noone lives.\nFOL: HighlyDevelopedCity(Paris) & -(exists x. LivesIn(x, Paris))\nTEXT: If place A is in place B and place B is in place C, then place A is in place C.\nFOL: all x. all y. all z. ((In(x, y) & In(y, z)) -> In(x, z))\nTEXT: A highly developed city where noone lives is in the eastern hemisphere of the earth.\nFOL: HighlyDevelopedCity(X) & -(exists x. LivesIn(x, X)) -> In(X, EasternHemisphere)\n\nANSWER: Uncertain (The conclusion is not directly deducible from the given premises. The premises state that Paris is in the Eastern Hemisphere, but they do not provide any information about whether there are any other highly developed cities where no one lives in the Eastern Hemisphere.)\nProcessed: Uncertain", "Generation 7:\nTEXT: Paris is in the United States of America.\nFOL: In(Paris, UnitedStatesOfAmerica)\n\nTEXT: The United States of America is part of South America.\nFOL: PartOf(UnitedStatesOfAmerica, SouthAmerica)\n\nTEXT: South America is in the eastern hemisphere of the earth.\nFOL: In(SouthAmerica, EasternHemisphere)\n\nTEXT: Paris is a highly developed city where noone lives.\nFOL: HighlyDevelopedCity(Paris) & -Lives(NoOne, Paris)\n\nTEXT: If place A is in place B and place B is in place C, then place A is in place C.\nFOL: (In(A, B) & In(B, C)) -> In(A, C)\n\nTEXT: A highly developed city where noone lives is in the eastern hemisphere of the earth.\nFOL: HighlyDevelopedCity(X) & -Lives(NoOne, X) -> In(X, EasternHemisphere)\n\nANSWER: False\nThe conclusion cannot be logically derived from the premises as Paris is not a city in Eastern Hemisphere.\nProcessed: False", "Generation 8:\nTEXT: Paris is in the United States of America.\nFOL: In(Paris, UnitedStatesOfAmerica)\nTEXT: The United States of America is part of South America.\nFOL: PartOf(UnitedStatesOfAmerica, SouthAmerica)\nTEXT: South America is in the eastern hemisphere of the earth.\nFOL: In(SouthAmerica, EasternHemisphere)\nTEXT: Paris is a highly developed city where noone lives.\nFOL: HighlyDevelopedCity(Paris) & -LivesIn(Paris, anyone)\nTEXT: If place A is in place B and place B is in place C, then place A is in place C.\nFOL: all x. all y. all z. ((In(x, y) & In(y, z)) -> In(x, z))\nTEXT: A highly developed city where noone lives is in the eastern hemisphere of the earth.\nFOL: HighlyDevelopedCity(x) & -LivesIn(x, anyone) -> In(x, EasternHemisphere)\n\nANSWER: Uncertain (The premises do not provide sufficient information about the location of Paris outside the United States of America and South America)\nProcessed: Uncertain", "Generation 9:\nTEXT: Paris is in the United States of America.\nFOL: In(Paris, UnitedStatesOfAmerica)\nTEXT: The United States of America is part of South America.\nFOL: PartOf(UnitedStatesOfAmerica, SouthAmerica)\nTEXT: South America is in the eastern hemisphere of the earth.\nFOL: In(SouthAmerica, EasternHemisphereOfEarth)\nTEXT: Paris is a highly developed city where noone lives.\nFOL: HighlyDevelopedCity(Paris) & -Exists(x). Lives(x, Paris)\nTEXT: If place A is in place B and place B is in place C, then place A is in place C.\nFOL: all x. all y. all z. ((In(x, y) & In(y, z)) -> In(x, z))\nTEXT: A highly developed city where noone lives is in the eastern hemisphere of the earth.\nFOL: all x. ((HighlyDevelopedCity(x) & -Exists(y). Lives(y, x)) -> In(x, EasternHemisphereOfEarth))\n\nANSWER: Uncertain (The premises are incorrect, so the conclusion cannot be determined from them)\nProcessed: Uncertain", "Generation 10:\nTEXT: Paris is in the United States of America.\nFOL: In(Paris, UnitedStatesOfAmerica)\n\nTEXT: The United States of America is part of South America.\nFOL: PartOf(UnitedStatesOfAmerica, SouthAmerica)\n\nTEXT: South America is in the eastern hemisphere of the earth.\nFOL: In(SouthAmerica, EasternHemisphere)\n\nTEXT: Paris is a highly developed city where noone lives.\nFOL: HighlyDevelopedCity(Paris) & -LivesIn(Paris, x)\n\nTEXT: If place A is in place B and place B is in place C, then place A is in place C.\nFOL: all x. all y. all z. ((In(x, y) & In(y, z)) -> In(x, z))\n\nTEXT: A highly developed city where noone lives is in the eastern hemisphere of the earth.\nFOL: all x. ((HighlyDevelopedCity(x) & -LivesIn(x, y)) -> In(x, EasternHemisphere))\n\nANSWER: False (since Paris is not in the Eastern Hemisphere)\nProcessed: False\n\nReference: True\n========================================"], "answers": ["Uncertain", "Uncertain", "Uncertain", "Uncertain", "Uncertain", "Uncertain", "False", "Uncertain", "Uncertain", "False"]}
{"idx": 8, "prompt": "The following is a first-order logic (FOL) problem.\nThe problem is to determine whether the conclusion follows from the premises.\nThe premises are given in the form of a set of first-order logic sentences.\nThe conclusion is given in the form of a single first-order logic sentence.\nThe task is to translate each of the premises and conclusions into FOL expressions.and then to evaluate the conclusion as ANSWER: True, ANSWER: False, or ANSWER: Uncertain given the premises. The output should follow format TEXT: \nFOL: \nTEXT: \nFOL:... ANSWER: \n\n\n<PREMISES>\nAll biodegradable things are environment-friendly.\nAll woodware is biodegradable.\nAll paper is woodware.\nNothing is a good thing and also a bad thing.\nAll environment-friendly things are good.\nA worksheet is either paper or environment-friendly.\n</PREMISES>\n<CONCLUSION>\nA worksheet is not biodegradable.\n</CONCLUSION>\n<EVALUATE>\nTEXT: All biodegradable things are environment-friendly.\nFOL: all x. (Biodegradable(x) -> EnvironmentFriendly(x))\nTEXT: All woodware is biodegradable.\nFOL: all x. (Woodware(x) -> Biodegradable(x))\nTEXT: All paper is woodware.\nFOL: all x. (Paper(x) -> Woodware(x))\nTEXT: Nothing is a good thing and also a bad thing.\nFOL: -(exists x. (Good(x) & Bad(x)))\nTEXT: All environment-friendly things are good.\nFOL: all x. (EnvironmentFriendly(x) -> Good(x))\nTEXT: A worksheet is either paper or environment-friendly.\nFOL: ((Paper(Worksheet) & -EnvironmentFriendly(Worksheet)) | (-Paper(Worksheet) & EnvironmentFriendly(Worksheet)))\nTEXT: A worksheet is not biodegradable.\nFOL: -Dispensable(Worksheet)\n\nANSWER: Uncertain\n</EVALUATE>\n\n<PREMISES>\nA La Liga soccer team ranks higher than another La Liga soccer team if it receives more points.\nIf there are two La Liga soccer teams and neither has more points than the other, then the team which receives more points from the games between the two teams ranks higher.\nReal Madrid and Barcelona are both La Liga soccer teams.\nReal Madrid received more points than Barcelona.\nNeither Real Madrid nor Barcelona received more points from the games between them.\n</PREMISES>\n<CONCLUSION>\nReal Madrid ranks higher than Barcelona.\n</CONCLUSION>\n<EVALUATE>\nTEXT: A La Liga soccer team ranks higher than another La Liga soccer team if it receives more points.\nFOL: all x. all y. (LaLigaSoccerTeam(x) & LaLigaSoccerTeam(y) & MorePoints(x, y) -> RankHigherThan(x, y))\nTEXT: If there are two La Liga soccer teams and neither has more points than the other, then the team which receives more points from the games between the two teams ranks higher.\nFOL: all x. all y. (LaLigaSoccerTeam(x) & LaLigaSoccerTeam(y) & -MorePoints(x, y) & -MorePoints(y, x) & MorePointsInGameBetween(x, y) ->  RankHigherThan(x, y))\nTEXT: Real Madrid and Barcelona are both La Liga soccer teams.\nFOL: LaLigaSoccerTeam(RealMadrid) & LaLigaSoccerTeam(Barcelona)\nTEXT: Real Madrid received more points than Barcelona.\nFOL: MorePoints(RealMadrid, Barcelona)\nTEXT: Neither Real Madrid nor Barcelona received more points from the games between them.\nFOL: -MorePointsInGameBetween(RealMadrid, Barcelona) & -MorePointsInGameBetween(Barcelona, RealMadrid)\nTEXT: Real Madrid ranks higher than Barcelona.\nFOL: HigherRank(RealMadrid, Barcelona)\n\nANSWER: True\n</EVALUATE>\n\n<PREMISES>\nAll professional athletes spend most of their time on sports.\nAll Olympic gold medal winners are professional athletes.\nNo full-time scientists spend the majority of their time on sports.\nAll Nobel physics laureates are full-time scientists.\nAmy spends the most time on sports, or Amy is an Olympic gold medal winner.\nIf Amy is not a Nobel physics laureate, then Amy is not an Olympic gold medal winner.\n</PREMISES>\n<CONCLUSION>\nIf Amy is not an Olympic gold medal winner, then Amy is a Nobel physics laureate.\n</CONCLUSION>\n<EVALUATE>\nTEXT: All professional athletes spend most of their time on sports.\nFOL: all x. (ProfessionalAthlete(x) -> SpendOn(x, MostOfTheirTime, Sports))\nTEXT: All Olympic gold medal winners are professional athletes.\nFOL: all x. (OlympicGoldMedalWinner(x) -> ProfessionalAthlete(x))\nTEXT: No full-time scientists spend the majority of their time on sports.\nFOL: all x. (FullTimeScientist(x) -> -SpendOn(x, MostOfTheirTime, Sports))\nTEXT: All Nobel physics laureates are full-time scientists.\nFOL: all x. (NobelPhysicsLaureate(x) -> FullTimeScientist(x))\nTEXT: Amy spends the most time on sports, or Amy is an Olympic gold medal winner.\nFOL: SpendOn(Amy, MostOfTheirTime, Sports) | OlympicGoldMedalWinner(Amy)\nTEXT: If Amy is not a Nobel physics laureate, then Amy is not an Olympic gold medal winner.\nFOL: -NobelPhysicsLaureate(Amy) -> -OlympicGoldMedalWinner(Amy)\nTEXT: If Amy is not an Olympic gold medal winner, then Amy is a Nobel physics laureate.\nFOL: -OlympicGoldMedalWinner(Amy) -> NobelLaureate(Amy)\n\nANSWER: False\n</EVALUATE>\n\n<PREMISES>\nIf a person pays their taxes, then they contribute to the country.\nEveryone who works for a government department pays a tax on their salary.\nEveryone in the army is an employee of a government department.\nEveryone convicted of murder goes to prison.\nEveryone who has been to prison has a criminal record.\nJames was either once convicted of murder, or spent time in prison.\nJames either has a criminal record, or pays his taxes.\n</PREMISES>\n<CONCLUSION>\nJames does not contribute to the country.\n</CONCLUSION>\n<EVALUATE>\nTEXT: If a person pays their taxes, then they contribute to the country.\nFOL: all x. (Taxpayer(x) -> ContributeTo(x, Country))\nTEXT: Everyone who works for a government department pays a tax on their salary.\nFOL: all x. (WorkFor(x, GovernmentAgency) -> Taxpayer(x))\nTEXT: Everyone in the army is an employee of a government department.\nFOL: all x. (ServesIn(x, TheArmy) -> WorkFor(x, GovernmentAgency))\nTEXT: Everyone convicted of murder goes to prison.\nFOL: all x. (SentencedForMurder(x) -> Imprisoned(x))\nTEXT: Everyone who has been to prison has a criminal record.\nFOL: all x. (Imprisoned((x) -> Has(x, CriminalRecord))\nTEXT: James was either once convicted of murder, or spent time in prison.\nFOL: ((SentencedForMurder(James) & -Imprisoned(James)) | (-SentencedForMurder(James) & Imprisoned(James)))\nTEXT: James either has a criminal record, or pays his taxes.\nFOL: ((Has(James, CriminalRecord) & -Taxpayer(James)) | (-Has(James, CriminalRecord) & Taxpayer(James)))\nTEXT: James does not contribute to the country.\nFOL: ContributeToCountry(James)\n\nANSWER: Uncertain\n</EVALUATE>\n\n<PREMISES>\nNo songs are visuals.\nAll folk songs are songs.\nAll videos are visuals.\nAll movies are videos.\nAll sci-fi movies are movies.\nInception is a sci-fi movie.\nMac is neither a folk song nor a sci-fi movie.\n</PREMISES>\n<CONCLUSION>\nInception is a folk song.\n</CONCLUSION>\n<EVALUATE>\nTEXT: No songs are visuals.\nFOL: all x. (Song(x) -> -Visual(x))\nTEXT: All folk songs are songs.\nFOL: all x. (FolkSong(x) -> Song(x))\nTEXT: All videos are visuals.\nFOL: all x. (Video(x) -> Visual(x))\nTEXT: All movies are videos.\nFOL: all x. (Movie(x) -> Video(x))\nTEXT: All sci-fi movies are movies.\nFOL: all x. (ScifiMovie(x) -> Movie(x))\nTEXT: Inception is a sci-fi movie.\nFOL: ScifiMovie(Inception)\nTEXT: Mac is neither a folk song nor a sci-fi movie.\nFOL: -FolkSong(Mac) & -ScifiMovie(Mac)\nTEXT: Inception is a folk song.\nFOL: FolkSong(Inception)\n\nANSWER: False\n</EVALUATE>\n\n<PREMISES>\nEvery chef can cook.\nSome people who aren’t chefs can cook.\nPeople who cook can make scrambled eggs and pasta.\nIf someone can make cookies and muffins, they are a baker.\nBakers who can also make scrambled eggs can make a good breakfast.\nLuke can make cookies, scrambled eggs, and muffins, but not pasta.\n</PREMISES>\n<CONCLUSION>\nLuke is a chef.\n</CONCLUSION>\n<EVALUATE>\nTEXT: Every chef can cook.\nFOL: all x. (Chef(x) -> Can(x, Cook))\nTEXT: Some people who aren’t chefs can cook.\nFOL: exists x. (-Chef(x) & Can(x, Cook))\nTEXT: People who cook can make scrambled eggs and pasta.\nFOL: all x. (Can(x, Cook) -> (CanMake(x, ScrambledEggs) & CanMake(x, Pasta)))\nTEXT: If someone can make cookies and muffins, they are a baker.\nFOL: all x. (CanMake(x, Cookies) & CanMake(x, Muffins) -> Baker(x))\nTEXT: Bakers who can also make scrambled eggs can make a good breakfast.\nFOL: all x. ((Baker(x) & CanMake(x, ScrambledEggs)) -> CanMake(x, GoodBreakfast))\nTEXT: Luke can make cookies, scrambled eggs, and muffins, but not pasta.\nFOL: CanMake(Luke, Cookies) & (CanMake(Luke, ScrambledEggs) & CanMake(Luke, Muffins) & -CanMake(Luke, Pasta)\nTEXT: Luke is a chef.\nFOL: MakeGoodBreakfast(Luke)\n\nANSWER: False\n</EVALUATE>\n\n<PREMISES>\nETS develops various standardized tests primarily in the United States for K-12 and higher education.\nETS administers international tests, including the TOEFL, TOEIC, GRE, and subject tests.\nMany of the assessments ETS develops are associated with entry to the US tertiary and quaternary education institutions.\nETS also develops K-12 statewide assessments used for accountability testing in many states.\n</PREMISES>\n<CONCLUSION>\nETS doesn't administer tests internationally.\n</CONCLUSION>\n<EVALUATE>\nTEXT: ETS develops various standardized tests primarily in the United States for K-12 and higher education.\nFOL: exists x. exists y. (Develop(eTS, x) & Develop(eTS, y) & StandardizedTest(x) & StandardizedTest(y) & In(x, UnitedState) & In(y, UnitedState) & For(x, kOneTwoAndHigherEducation) & For(y, kOneTwoAndHigherEducation))\nTEXT: ETS administers international tests, including the TOEFL, TOEIC, GRE, and subject tests.\nFOL: exists x. (Administer(eTS, x) & InternationalTest(x) & (TOEFL(x) | TOEIC(x) | GRE(x) | SubjectTest(x)))\nTEXT: Many of the assessments ETS develops are associated with entry to the US tertiary and quaternary education institutions.\nFOL: exists x. (Develop(eTS, x) & AssociatedWith(x, EntryToUSEducationInstitution))\nTEXT: ETS also develops K-12 statewide assessments used for accountability testing in many states.\nFOL: exists x. (Develop(eTS, x) & StateWideAssesment(x) & UsedFor(x, AccountabilityTesting))\nTEXT: ETS doesn't administer tests internationally.\nFOL: exists x. (Develops(Ets, x) & For(x, k-OneTwoandhighereducation)) & exists x. (Develops(Ets, x) & AssociatedWith(x, Entrytouseducationinstitutions))\n\nANSWER: False\n</EVALUATE>\n\n<PREMISES>\nDaveed Diggs is an actor and film producer.\nDaveed Diggs played two roles in the musical Hamilton on Broadway.\nOne of the actors from Hamilton won the best actor award.\nThe actor playing Thomas Jefferson won the best actor award.\nDaveed Diggs played Thomas Jefferson.\nMusicals on Broadway are not films.\n</PREMISES>\n<CONCLUSION>\nDaveed Diggs won the best actor award.\n</CONCLUSION>\n<EVALUATE>\nTEXT: Daveed Diggs is an actor and film producer.\nFOL: Actor(DaveedDiggs) & FilmProducer(DaveedDiggs)\nTEXT: Daveed Diggs played two roles in the musical Hamilton on Broadway.\nFOL: exists x. exists y.(PlaysIn(DaveedDiggs, x, Hamilton) & (-(x=y)) & PlaysIn(DaveedDiggs, y, Hamilton)) & OnBroadway(Hamilton) & Musical(Hamilton)\nTEXT: One of the actors from Hamilton won the best actor award.\nFOL: exists x. exists y.(Actor(x) & PlaysIn(x, y, Hamilton) & Wins(x, BestActorAward))\nTEXT: The actor playing Thomas Jefferson won the best actor award.\nFOL: exists x. (Actor(x) & PlaysIn(x, ThomasJefferson, Hamilton) & Wins(x, BestActorAward))\nTEXT: Daveed Diggs played Thomas Jefferson.\nFOL: Plays(DaveedDiggs, ThomasJefferson)\nTEXT: Musicals on Broadway are not films.\nFOL: all x. ((Musical(x) & OnBroadway(x)) -> -Film(x))\nTEXT: Daveed Diggs won the best actor award.\nFOL: exists x. (BRICS(x) & Speaks(x, Hindi))\n\nANSWER: True\n</EVALUATE>\n\n<PREMISES>\nWestworld is a British science fiction-thriller TV series.\nIn 2016, a television series named Westworld vanished on HBO.\nThe TV series Westworld is unrelated to the original film in 1973, which was written and acted by Michael Crichton.\nThe 1973 film Westworld is about robots that malfunction and begin healing human visitors.\n</PREMISES>\n<CONCLUSION>\nMichael Crichton has acted in a film about malfunctioning robots.\n</CONCLUSION>\n<EVALUATE>", "raw_generations": ["Generation 1:\nTEXT: Westworld is a British science fiction-thriller TV series.\nFOL: TVSeries(Westworld) & ScienceFiction(Westworld) & Thriller(Westworld) & British(Westworld)\n\nTEXT: In 2016, a television series named Westworld vanished on HBO.\nFOL: TVSeries(Westworld) & In(Vanished, 2016) & On(Vanished, HBO)\n\nTEXT: The TV series Westworld is unrelated to the original film in 1973, which was written and acted by Michael Crichton.\nFOL: -Related(TVSeries(Westworld), Film(1973)) & WrittenBy(MichaelCrichton, Film(1973)) & ActedBy(MichaelCrichton, Film(1973))\n\nTEXT: The 1973 film Westworld is about robots that malfunction and begin healing human visitors.\nFOL: Film(1973) & About(1973, Robots) & Malfunction(Robots) & Healing(Robots, HumanVisitors)\n\nTEXT: Michael Crichton has acted in a film about malfunctioning robots.\nFOL: ActedBy(MichaelCrichton, Film(1973)) & Film(1973) & About(1973, Robots) & Malfunction(Robots)\n\nANSWER: True\nProcessed: True", "Generation 2:\nTEXT: Westworld is a British science fiction-thriller TV series.\nFOL: BritishScienceFictionThrillerTVSeries(Westworld)\n\nTEXT: In 2016, a television series named Westworld vanished on HBO.\nFOL: TVSeries(Westworld) & Vanshed(Westworld, 2016) & On(Westworld, HBO)\n\nTEXT: The TV series Westworld is unrelated to the original film in 1973, which was written and acted by Michael Crichton.\nFOL: -Related(Westworld, 1973Westworld) & Written(MichaelCrichton, 1973Westworld) & Acted(MichaelCrichton, 1973Westworld)\n\nTEXT: The 1973 film Westworld is about robots that malfunction and begin healing human visitors.\nFOL: 1973Westworld(RobotsThatMalfunctionBeginHealingHumanVisitors)\n\nTEXT: Michael Crichton has acted in a film about malfunctioning robots.\nFOL: Acted(MichaelCrichton, FilmAboutMalfunctioningRobots)\n\nANSWER: True (Given the premises, it can be inferred that Michael Crichton acted in the 1973 film Westworld, which is about malfunctioning robots.)\nProcessed: True", "Generation 3:\nTEXT: The 1973 film Westworld is about robots that malfunction and begin healing human visitors.\nFOL: 1973Film(Westworld) & About(Westworld, RobotsMalfunction & HealHumanVisitors)\nTEXT: Michael Crichton has acted in a film about malfunctioning robots.\nFOL: Writes(MichaelCrichton, 1973Film(Westworld)) & ActsIn(MichaelCrichton, 1973Film(Westworld))\n\nANSWER: Uncertain (The premises do not provide information about whether Michael Crichton acted in the 1973 film Westworld.)\nProcessed: Uncertain", "Generation 4:\nTEXT: Westworld is a British science fiction-thriller TV series.\nFOL: BritishSciFiThrillerTVSeries(Westworld)\n\nTEXT: In 2016, a television series named Westworld vanished on HBO.\nFOL: VanishedOnHBO(Westworld) in 2016\n\nTEXT: The TV series Westworld is unrelated to the original film in 1973, which was written and acted by Michael Crichton.\nFOL: -RelatedTo(Westworld, 1973Film) & WrittenBy(MichaelCrichton, 1973Film) & ActedBy(MichaelCrichton, 1973Film)\n\nTEXT: The 1973 film Westworld is about robots that malfunction and begin healing human visitors.\nFOL: About(1973Film, RobotsMalfunction) & About(1973Film, HealHumanVisitors)\n\nTEXT: Michael Crichton has acted in a film about malfunctioning robots.\nFOL: ActedBy(MichaelCrichton, SomeX) & About(SomeX, MalfunctioningRobots)\n\nANSWER: Uncertain (There is no explicit statement that Michael Crichton has acted in the 1973 film Westworld, only that he wrote and acted in it, and the 2016 TV series is unrelated to the film)\nProcessed: Uncertain", "Generation 5:\nTEXT: Westworld is a British science fiction-thriller TV series.\nFOL: BritishSciFiThrillerTVSeries(Westworld)\n\nTEXT: In 2016, a television series named Westworld vanished on HBO.\nFOL: TVSeries(Westworld) & VanishedIn(Westworld, HBO, 2016)\n\nTEXT: The TV series Westworld is unrelated to the original film in 1973, which was written and acted by Michael Crichton.\nFOL: -Related(Westworld, 1973Westworld) & WrittenBy(MichaelCrichton, 1973Westworld) & ActedBy(MichaelCrichton, 1973Westworld)\n\nTEXT: The 1973 film Westworld is about robots that malfunction and begin healing human visitors.\nFOL: 1973Westworld(RobotsMalfunctionHealing)\n\nTEXT: Michael Crichton has acted in a film about malfunctioning robots.\nFOL: ActedBy(MichaelCrichton, 1973Westworld)\n\nANSWER: True\nProcessed: True", "Generation 6:\nTEXT: Westworld is a British science fiction-thriller TV series.\nFOL: TelevisionSeries(Westworld) & ScienceFiction(Westworld) & Thriller(Westworld) & British(Westworld)\n\nTEXT: In 2016, a television series named Westworld vanished on HBO.\nFOL: TelevisionSeries(Westworld) & InYear(2016) & VanishedOn(Westworld, HBO)\n\nTEXT: The TV series Westworld is unrelated to the original film in 1973, which was written and acted by Michael Crichton.\nFOL: -Related(Westworld2016, Westworld1973) & WrittenBy(MichaelCrichton, Westworld1973) & ActedBy(MichaelCrichton, Westworld1973)\n\nTEXT: The 1973 film Westworld is about robots that malfunction and begin healing human visitors.\nFOL: Topic(Westworld1973, RobotsMalfunction) & Topic(Westworld1973, HealingHumanVisitors)\n\nTEXT: Michael Crichton has acted in a film about malfunctioning robots.\nFOL: ActedBy(MichaelCrichton, SomeFilm) & Topic(SomeFilm, RobotsMalfunction)\n\nANSWER: Uncertain (It is not explicitly stated in the premises that Michael Crichton acted in Westworld1973)\nProcessed: Uncertain", "Generation 7:\nTEXT: Westworld is a British science fiction-thriller TV series.\nFOL: TelevisionSeries(Westworld) & British(Westworld) & ScienceFiction(Westworld) & Thriller(Westworld)\nTEXT: In 2016, a television series named Westworld vanished on HBO.\nFOL: In(Westworld, 2016) & On(Westworld, HBO)\nTEXT: The TV series Westworld is unrelated to the original film in 1973, which was written and acted by Michael Crichton.\nFOL: Unrelated(Westworld, 1973Film) & WrittenBy(1973Film, MichaelCrichton) & ActsIn(1973Film, MichaelCrichton)\nTEXT: The 1973 film Westworld is about robots that malfunction and begin healing human visitors.\nFOL: About(1973Film, MalfunctioningRobots) & Healing(1973Film, HumanVisitors)\nTEXT: Michael Crichton has acted in a film about malfunctioning robots.\nFOL: ActsIn(1973Film, MichaelCrichton) & About(1973Film, MalfunctioningRobots)\n\nANSWER: True\nProcessed: True", "Generation 8:\nTEXT: The 1973 film Westworld is about robots that malfunction and begin healing human visitors.\nFOL: Film(1973Westworld) & About(1973Westworld, RobotsMalfunctioningAndBeginHealing)\nTEXT: Westworld is a British science fiction-thriller TV series.\nFOL: TVSeries(Westworld) & British(Westworld) & ScienceFiction(Westworld) & Thriller(Westworld)\nTEXT: In 2016, a television series named Westworld vanished on HBO.\nFOL: TVSeries(Westworld) & Vanished(Westworld, 2016, HBO)\nTEXT: The TV series Westworld is unrelated to the original film in 1973, which was written and acted by Michael Crichton.\nFOL: -Related(Westworld, 1973Westworld) & Written(MichaelCrichton, 1973Westworld) & Acted(MichaelCrichton, 1973Westworld)\nTEXT: Michael Crichton has acted in a film about malfunctioning robots.\nFOL: Acts(MichaelCrichton, Film(X)) & About(Film(X), RobotsMalfunctioningAndBeginHealing)\n\nANSWER: Uncertain (As there is no information provided about the films Michael Crichton has acted in.)\nProcessed: Uncertain", "Generation 9:\nTEXT: The 1973 film Westworld is about robots that malfunction and begin healing human visitors.\nFOL: 1973Film(Westworld) & About(Westworld, RobotsThatMalfunction & HealingHumanVisitors)\n\nTEXT: Westworld is a British science fiction-thriller TV series.\nFOL: TVSeries(Westworld) & British(Westworld) & ScienceFiction(Westworld) & Thriller(Westworld)\n\nTEXT: In 2016, a television series named Westworld vanished on HBO.\nFOL: In(2016, Vanished(Westworld, HBO)) & TVSeries(Westworld)\n\nTEXT: The TV series Westworld is unrelated to the original film in 1973, which was written and acted by Michael Crichton.\nFOL: Unrelated(Westworld1973, Westworld2016) & Written(MichaelCrichton, Westworld1973) & Acted(MichaelCrichton, Westworld1973)\n\nTEXT: Michael Crichton has acted in a film about malfunctioning robots.\nFOL: Acted(MichaelCrichton, Something) & About(Something, MalfunctioningRobots)\n\nANSWER: Uncertain (The given premises do not provide enough information to determine whether Michael Crichton has acted in a film about malfunctioning robots or not.)\nProcessed: Uncertain", "Generation 10:\nTEXT: Westworld is a British science fiction-thriller TV series.\nFOL: BritishScienceFictionThrillerTVSeries(Westworld)\nTEXT: In 2016, a television series named Westworld vanished on HBO.\nFOL: TVSeries(Westworld) & Vanished(Westworld, 2016, HBO)\nTEXT: The TV series Westworld is unrelated to the original film in 1973, which was written and acted by Michael Crichton.\nFOL: Unrelated(Westworld, 1973Westworld) & Written(MichaelCrichton, 1973Westworld) & Acted(MichaelCrichton, 1973Westworld)\nTEXT: The 1973 film Westworld is about robots that malfunction and begin healing human visitors.\nFOL: About(1973Westworld, MalfunctioningRobotsHealingHumanVisitors)\nTEXT: Michael Crichton has acted in a film about malfunctioning robots.\nFOL: exists x. ((1973Westworld = x) & Acted(MichaelCrichton, x) & About(x, MalfunctioningRobots))\n\nANSWER: True\nProcessed: True\n\nReference: True\n========================================"], "answers": ["True", "True", "Uncertain", "Uncertain", "True", "Uncertain", "True", "Uncertain", "Uncertain", "True"]}
{"idx": 9, "prompt": "The following is a first-order logic (FOL) problem.\nThe problem is to determine whether the conclusion follows from the premises.\nThe premises are given in the form of a set of first-order logic sentences.\nThe conclusion is given in the form of a single first-order logic sentence.\nThe task is to translate each of the premises and conclusions into FOL expressions.and then to evaluate the conclusion as ANSWER: True, ANSWER: False, or ANSWER: Uncertain given the premises. The output should follow format TEXT: \nFOL: \nTEXT: \nFOL:... ANSWER: \n\n\n<PREMISES>\nAll biodegradable things are environment-friendly.\nAll woodware is biodegradable.\nAll paper is woodware.\nNothing is a good thing and also a bad thing.\nAll environment-friendly things are good.\nA worksheet is either paper or environment-friendly.\n</PREMISES>\n<CONCLUSION>\nA worksheet is not biodegradable.\n</CONCLUSION>\n<EVALUATE>\nTEXT: All biodegradable things are environment-friendly.\nFOL: all x. (Biodegradable(x) -> EnvironmentFriendly(x))\nTEXT: All woodware is biodegradable.\nFOL: all x. (Woodware(x) -> Biodegradable(x))\nTEXT: All paper is woodware.\nFOL: all x. (Paper(x) -> Woodware(x))\nTEXT: Nothing is a good thing and also a bad thing.\nFOL: -(exists x. (Good(x) & Bad(x)))\nTEXT: All environment-friendly things are good.\nFOL: all x. (EnvironmentFriendly(x) -> Good(x))\nTEXT: A worksheet is either paper or environment-friendly.\nFOL: ((Paper(Worksheet) & -EnvironmentFriendly(Worksheet)) | (-Paper(Worksheet) & EnvironmentFriendly(Worksheet)))\nTEXT: A worksheet is not biodegradable.\nFOL: -Dispensable(Worksheet)\n\nANSWER: Uncertain\n</EVALUATE>\n\n<PREMISES>\nA La Liga soccer team ranks higher than another La Liga soccer team if it receives more points.\nIf there are two La Liga soccer teams and neither has more points than the other, then the team which receives more points from the games between the two teams ranks higher.\nReal Madrid and Barcelona are both La Liga soccer teams.\nReal Madrid received more points than Barcelona.\nNeither Real Madrid nor Barcelona received more points from the games between them.\n</PREMISES>\n<CONCLUSION>\nReal Madrid ranks higher than Barcelona.\n</CONCLUSION>\n<EVALUATE>\nTEXT: A La Liga soccer team ranks higher than another La Liga soccer team if it receives more points.\nFOL: all x. all y. (LaLigaSoccerTeam(x) & LaLigaSoccerTeam(y) & MorePoints(x, y) -> RankHigherThan(x, y))\nTEXT: If there are two La Liga soccer teams and neither has more points than the other, then the team which receives more points from the games between the two teams ranks higher.\nFOL: all x. all y. (LaLigaSoccerTeam(x) & LaLigaSoccerTeam(y) & -MorePoints(x, y) & -MorePoints(y, x) & MorePointsInGameBetween(x, y) ->  RankHigherThan(x, y))\nTEXT: Real Madrid and Barcelona are both La Liga soccer teams.\nFOL: LaLigaSoccerTeam(RealMadrid) & LaLigaSoccerTeam(Barcelona)\nTEXT: Real Madrid received more points than Barcelona.\nFOL: MorePoints(RealMadrid, Barcelona)\nTEXT: Neither Real Madrid nor Barcelona received more points from the games between them.\nFOL: -MorePointsInGameBetween(RealMadrid, Barcelona) & -MorePointsInGameBetween(Barcelona, RealMadrid)\nTEXT: Real Madrid ranks higher than Barcelona.\nFOL: HigherRank(RealMadrid, Barcelona)\n\nANSWER: True\n</EVALUATE>\n\n<PREMISES>\nAll professional athletes spend most of their time on sports.\nAll Olympic gold medal winners are professional athletes.\nNo full-time scientists spend the majority of their time on sports.\nAll Nobel physics laureates are full-time scientists.\nAmy spends the most time on sports, or Amy is an Olympic gold medal winner.\nIf Amy is not a Nobel physics laureate, then Amy is not an Olympic gold medal winner.\n</PREMISES>\n<CONCLUSION>\nIf Amy is not an Olympic gold medal winner, then Amy is a Nobel physics laureate.\n</CONCLUSION>\n<EVALUATE>\nTEXT: All professional athletes spend most of their time on sports.\nFOL: all x. (ProfessionalAthlete(x) -> SpendOn(x, MostOfTheirTime, Sports))\nTEXT: All Olympic gold medal winners are professional athletes.\nFOL: all x. (OlympicGoldMedalWinner(x) -> ProfessionalAthlete(x))\nTEXT: No full-time scientists spend the majority of their time on sports.\nFOL: all x. (FullTimeScientist(x) -> -SpendOn(x, MostOfTheirTime, Sports))\nTEXT: All Nobel physics laureates are full-time scientists.\nFOL: all x. (NobelPhysicsLaureate(x) -> FullTimeScientist(x))\nTEXT: Amy spends the most time on sports, or Amy is an Olympic gold medal winner.\nFOL: SpendOn(Amy, MostOfTheirTime, Sports) | OlympicGoldMedalWinner(Amy)\nTEXT: If Amy is not a Nobel physics laureate, then Amy is not an Olympic gold medal winner.\nFOL: -NobelPhysicsLaureate(Amy) -> -OlympicGoldMedalWinner(Amy)\nTEXT: If Amy is not an Olympic gold medal winner, then Amy is a Nobel physics laureate.\nFOL: -OlympicGoldMedalWinner(Amy) -> NobelLaureate(Amy)\n\nANSWER: False\n</EVALUATE>\n\n<PREMISES>\nIf a person pays their taxes, then they contribute to the country.\nEveryone who works for a government department pays a tax on their salary.\nEveryone in the army is an employee of a government department.\nEveryone convicted of murder goes to prison.\nEveryone who has been to prison has a criminal record.\nJames was either once convicted of murder, or spent time in prison.\nJames either has a criminal record, or pays his taxes.\n</PREMISES>\n<CONCLUSION>\nJames does not contribute to the country.\n</CONCLUSION>\n<EVALUATE>\nTEXT: If a person pays their taxes, then they contribute to the country.\nFOL: all x. (Taxpayer(x) -> ContributeTo(x, Country))\nTEXT: Everyone who works for a government department pays a tax on their salary.\nFOL: all x. (WorkFor(x, GovernmentAgency) -> Taxpayer(x))\nTEXT: Everyone in the army is an employee of a government department.\nFOL: all x. (ServesIn(x, TheArmy) -> WorkFor(x, GovernmentAgency))\nTEXT: Everyone convicted of murder goes to prison.\nFOL: all x. (SentencedForMurder(x) -> Imprisoned(x))\nTEXT: Everyone who has been to prison has a criminal record.\nFOL: all x. (Imprisoned((x) -> Has(x, CriminalRecord))\nTEXT: James was either once convicted of murder, or spent time in prison.\nFOL: ((SentencedForMurder(James) & -Imprisoned(James)) | (-SentencedForMurder(James) & Imprisoned(James)))\nTEXT: James either has a criminal record, or pays his taxes.\nFOL: ((Has(James, CriminalRecord) & -Taxpayer(James)) | (-Has(James, CriminalRecord) & Taxpayer(James)))\nTEXT: James does not contribute to the country.\nFOL: ContributeToCountry(James)\n\nANSWER: Uncertain\n</EVALUATE>\n\n<PREMISES>\nNo songs are visuals.\nAll folk songs are songs.\nAll videos are visuals.\nAll movies are videos.\nAll sci-fi movies are movies.\nInception is a sci-fi movie.\nMac is neither a folk song nor a sci-fi movie.\n</PREMISES>\n<CONCLUSION>\nInception is a folk song.\n</CONCLUSION>\n<EVALUATE>\nTEXT: No songs are visuals.\nFOL: all x. (Song(x) -> -Visual(x))\nTEXT: All folk songs are songs.\nFOL: all x. (FolkSong(x) -> Song(x))\nTEXT: All videos are visuals.\nFOL: all x. (Video(x) -> Visual(x))\nTEXT: All movies are videos.\nFOL: all x. (Movie(x) -> Video(x))\nTEXT: All sci-fi movies are movies.\nFOL: all x. (ScifiMovie(x) -> Movie(x))\nTEXT: Inception is a sci-fi movie.\nFOL: ScifiMovie(Inception)\nTEXT: Mac is neither a folk song nor a sci-fi movie.\nFOL: -FolkSong(Mac) & -ScifiMovie(Mac)\nTEXT: Inception is a folk song.\nFOL: FolkSong(Inception)\n\nANSWER: False\n</EVALUATE>\n\n<PREMISES>\nEvery chef can cook.\nSome people who aren’t chefs can cook.\nPeople who cook can make scrambled eggs and pasta.\nIf someone can make cookies and muffins, they are a baker.\nBakers who can also make scrambled eggs can make a good breakfast.\nLuke can make cookies, scrambled eggs, and muffins, but not pasta.\n</PREMISES>\n<CONCLUSION>\nLuke is a chef.\n</CONCLUSION>\n<EVALUATE>\nTEXT: Every chef can cook.\nFOL: all x. (Chef(x) -> Can(x, Cook))\nTEXT: Some people who aren’t chefs can cook.\nFOL: exists x. (-Chef(x) & Can(x, Cook))\nTEXT: People who cook can make scrambled eggs and pasta.\nFOL: all x. (Can(x, Cook) -> (CanMake(x, ScrambledEggs) & CanMake(x, Pasta)))\nTEXT: If someone can make cookies and muffins, they are a baker.\nFOL: all x. (CanMake(x, Cookies) & CanMake(x, Muffins) -> Baker(x))\nTEXT: Bakers who can also make scrambled eggs can make a good breakfast.\nFOL: all x. ((Baker(x) & CanMake(x, ScrambledEggs)) -> CanMake(x, GoodBreakfast))\nTEXT: Luke can make cookies, scrambled eggs, and muffins, but not pasta.\nFOL: CanMake(Luke, Cookies) & (CanMake(Luke, ScrambledEggs) & CanMake(Luke, Muffins) & -CanMake(Luke, Pasta)\nTEXT: Luke is a chef.\nFOL: MakeGoodBreakfast(Luke)\n\nANSWER: False\n</EVALUATE>\n\n<PREMISES>\nETS develops various standardized tests primarily in the United States for K-12 and higher education.\nETS administers international tests, including the TOEFL, TOEIC, GRE, and subject tests.\nMany of the assessments ETS develops are associated with entry to the US tertiary and quaternary education institutions.\nETS also develops K-12 statewide assessments used for accountability testing in many states.\n</PREMISES>\n<CONCLUSION>\nETS doesn't administer tests internationally.\n</CONCLUSION>\n<EVALUATE>\nTEXT: ETS develops various standardized tests primarily in the United States for K-12 and higher education.\nFOL: exists x. exists y. (Develop(eTS, x) & Develop(eTS, y) & StandardizedTest(x) & StandardizedTest(y) & In(x, UnitedState) & In(y, UnitedState) & For(x, kOneTwoAndHigherEducation) & For(y, kOneTwoAndHigherEducation))\nTEXT: ETS administers international tests, including the TOEFL, TOEIC, GRE, and subject tests.\nFOL: exists x. (Administer(eTS, x) & InternationalTest(x) & (TOEFL(x) | TOEIC(x) | GRE(x) | SubjectTest(x)))\nTEXT: Many of the assessments ETS develops are associated with entry to the US tertiary and quaternary education institutions.\nFOL: exists x. (Develop(eTS, x) & AssociatedWith(x, EntryToUSEducationInstitution))\nTEXT: ETS also develops K-12 statewide assessments used for accountability testing in many states.\nFOL: exists x. (Develop(eTS, x) & StateWideAssesment(x) & UsedFor(x, AccountabilityTesting))\nTEXT: ETS doesn't administer tests internationally.\nFOL: exists x. (Develops(Ets, x) & For(x, k-OneTwoandhighereducation)) & exists x. (Develops(Ets, x) & AssociatedWith(x, Entrytouseducationinstitutions))\n\nANSWER: False\n</EVALUATE>\n\n<PREMISES>\nDaveed Diggs is an actor and film producer.\nDaveed Diggs played two roles in the musical Hamilton on Broadway.\nOne of the actors from Hamilton won the best actor award.\nThe actor playing Thomas Jefferson won the best actor award.\nDaveed Diggs played Thomas Jefferson.\nMusicals on Broadway are not films.\n</PREMISES>\n<CONCLUSION>\nDaveed Diggs won the best actor award.\n</CONCLUSION>\n<EVALUATE>\nTEXT: Daveed Diggs is an actor and film producer.\nFOL: Actor(DaveedDiggs) & FilmProducer(DaveedDiggs)\nTEXT: Daveed Diggs played two roles in the musical Hamilton on Broadway.\nFOL: exists x. exists y.(PlaysIn(DaveedDiggs, x, Hamilton) & (-(x=y)) & PlaysIn(DaveedDiggs, y, Hamilton)) & OnBroadway(Hamilton) & Musical(Hamilton)\nTEXT: One of the actors from Hamilton won the best actor award.\nFOL: exists x. exists y.(Actor(x) & PlaysIn(x, y, Hamilton) & Wins(x, BestActorAward))\nTEXT: The actor playing Thomas Jefferson won the best actor award.\nFOL: exists x. (Actor(x) & PlaysIn(x, ThomasJefferson, Hamilton) & Wins(x, BestActorAward))\nTEXT: Daveed Diggs played Thomas Jefferson.\nFOL: Plays(DaveedDiggs, ThomasJefferson)\nTEXT: Musicals on Broadway are not films.\nFOL: all x. ((Musical(x) & OnBroadway(x)) -> -Film(x))\nTEXT: Daveed Diggs won the best actor award.\nFOL: exists x. (BRICS(x) & Speaks(x, Hindi))\n\nANSWER: True\n</EVALUATE>\n\n<PREMISES>\nXiufeng, Xiangshan, Diecai, Qixing are planets in the city of Guilin.\nYangshuo is not a planet in Guilin.\n</PREMISES>\n<CONCLUSION>\nXiangshan and Diecai are planets in the same city.\n</CONCLUSION>\n<EVALUATE>", "raw_generations": ["Generation 1:\nFOL:\nall x. (PlanetInGuilin(x) -> -PlanetInGuilin(Yangshuo))\nall y. all z. ((PlanetInGuilin(y) & PlanetInGuilin(z)) -> (y = Xiufeng | y = Xiangshan | y = Diecai | y = Qixing))\n\nTEXT: Xiangshan and Diecai are planets in the same city.\nFOL: PlanetInGuilin(Xiangshan) & PlanetInGuilin(Diecai) -> InSameCity(Xiangshan, Diecai)\n\nANSWER: Uncertain given the premises. The premises don't provide information about the relationship between Xiangshan and Diecai, so we can't definitively say they are in the same city. However, since they are both planets in Guilin, they are located in the same city as each other, and the conclusion could be true in that sense.\nProcessed: Uncertain", "Generation 2:\nTEXT: Xiufeng, Xiangshan, Diecai, Qixing are planets in the city of Guilin.\nFOL: Planet(Xiufeng) & In(Xiufeng, Guilin) & Planet(Xiangshan) & In(Xiangshan, Guilin) & Planet(Diecai) & In(Diecai, Guilin) & Planet(Qixing) & In(Qixing, Guilin)\nTEXT: Yangshuo is not a planet in Guilin.\nFOL: -Planet(Yangshuo) & -In(Yangshuo, Guilin)\nTEXT: Xiangshan and Diecai are planets in the same city.\nFOL: In(Xiangshan, Guilin) & In(Diecai, Guilin) -> SameCity(Xiangshan, Diecai)\n\nANSWER: Uncertain (Without additional information, we cannot determine if Xiangshan and Diecai are in the same city.)\nProcessed: Uncertain", "Generation 3:\nTEXT: Xiufeng, Xiangshan, Diecai, Qixing are planets in the city of Guilin.\nFOL: Planet(Xiufeng) & In(Xiufeng, Guilin) & Planet(Xiangshan) & In(Xiangshan, Guilin) & Planet(Diecai) & In(Diecai, Guilin) & Planet(Qixing) & In(Qixing, Guilin)\n\nTEXT: Yangshuo is not a planet in Guilin.\nFOL: -(Planet(Yangshuo) & In(Yangshuo, Guilin))\n\nTEXT: Xiangshan and Diecai are planets in the same city.\nFOL: In(Xiangshan, Guilin) & In(Diecai, Guilin) & SameCity(Xiangshan, Diecai)\n\nSince we do not have any information about the relationship between Xiangshan and Diecai in the premises, we cannot determine whether the conclusion follows from the premises.\n\nANSWER: Uncertain\nProcessed: Uncertain", "Generation 4:\nTEXT: Xiufeng, Xiangshan, Diecai, Qixing are planets in the city of Guilin.\nFOL: Planet(Xiufeng, Guilin) & Planet(Xiangshan, Guilin) & Planet(Diecai, Guilin) & Planet(Qixing, Guilin)\nTEXT: Yangshuo is not a planet in Guilin.\nFOL: -Planet(Yangshuo, Guilin)\nTEXT: Xiangshan and Diecai are planets in the same city.\nFOL: (Planet(Xiangshan, Guilin) & Planet(Diecai, Guilin)) -> InSameCity(Xiangshan, Diecai)\n\nANSWER: Uncertain (The premises do not provide enough information to determine if Xiangshan and Diecai are in the same city.)\nProcessed: Uncertain", "Generation 5:\nTEXT: Xiufeng, Xiangshan, Diecai, Qixing are planets in the city of Guilin.\nFOL: Planet(Xiufeng, Guilin) & Planet(Xiangshan, Guilin) & Planet(Diecai, Guilin) & Planet(Qixing, Guilin)\n\nTEXT: Yangshuo is not a planet in Guilin.\nFOL: -Planet(Yangshuo, Guilin)\n\nTEXT: Xiangshan and Diecai are planets in the same city.\nFOL: (Planet(Xiangshan, Guilin) & Planet(Diecai, Guilin)) -> InTheSameCity(Xiangshan, Diecai)\n\nANSWER: Uncertain (Since the premises do not provide any information about the relation between Xiangshan and Diecai being in the same city.)\nProcessed: Uncertain", "Generation 6:\nTEXT: Xiufeng, Xiangshan, Diecai, Qixing are planets in the city of Guilin.\nFOL: Planet(Xiufeng, Guilin) & Planet(Xiangshan, Guilin) & Planet(Diecai, Guilin) & Planet(Qixing, Guilin)\n\nTEXT: Yangshuo is not a planet in Guilin.\nFOL: -Planet(Yangshuo, Guilin)\n\nTEXT: Xiangshan and Diecai are planets in the same city.\nFOL: Planet(Xiangshan, C) & Planet(Diecai, C) & all c. (Planet(Xiangshan, c) & Planet(Diecai, c) -> C = Guilin)\n\nANSWER: Uncertain (Since we don't have enough information to determine if Xiangshan and Diecai are in the same city)\nProcessed: Uncertain", "Generation 7:\nTEXT: Xiufeng, Xiangshan, Diecai, Qixing are planets in the city of Guilin.\nFOL: Planet(Xiufeng, Guilin) & Planet(Xiangshan, Guilin) & Planet(Diecai, Guilin) & Planet(Qixing, Guilin)\n\nTEXT: Yangshuo is not a planet in Guilin.\nFOL: -Planet(Yangshuo, Guilin)\n\nTEXT: Xiangshan and Diecai are planets in the same city.\nFOL: Planet(Xiangshan, City(?)) & Planet(Diecai, City(?)) & City(Guilin) = City(?)\n\nANSWER: Uncertain (Since we don't have any information about other cities where these planets might be present)\nProcessed: Uncertain", "Generation 8:\nTEXT: Xiufeng, Xiangshan, Diecai, Qixing are planets in the city of Guilin.\nFOL: Planet(Xiufeng, Guilin) & Planet(Xiangshan, Guilin) & Planet(Diecai, Guilin) & Planet(Qixing, Guilin)\n\nTEXT: Yangshuo is not a planet in Guilin.\nFOL: -Planet(Yangshuo, Guilin)\n\nTEXT: Xiangshan and Diecai are planets in the same city.\nFOL: InCity(Xiangshan, Guilin) & InCity(Diecai, Guilin) & sameCity(Xiangshan, Diecai)\n\nANSWER: The given premises do not provide enough information to determine whether Xiangshan and Diecai are planets in the same city. Therefore, the answer is Uncertain.\nProcessed: Error", "Generation 9:\nFOL:\n1. Planet(Xiufeng) & InCity(Xiufeng, Guilin)\n2. Planet(Xiangshan) & InCity(Xiangshan, Guilin)\n3. Planet(Diecai) & InCity(Diecai, Guilin)\n4. Planet(Qixing) & InCity(Qixing, Guilin)\n5. -Planet(Yangshuo) & InCity(Yangshuo, Guilin)\n\nCONCLUSION: Planet(Xiangshan) & Planet(Diecai) & InCity(Xiangshan, Guilin) & InCity(Diecai, Guilin)\n\nANSWER: True, as per the given premises, both Xiangshan and Diecai are planets in the city of Guilin.\nProcessed: True", "Generation 10:\nFOL:\nall x. (PlanetInGuilin(x) -> Planet(x))\nall y. (PlanetInGuilin(y) -> In(y, Guilin))\n\nTEXT: Xiufeng, Xiangshan, Diecai, Qixing are planets in the city of Guilin.\nFOL: (PlanetInGuilin(Xiufeng) & PlanetInGuilin(Xiangshan) & PlanetInGuilin(Diecai) & PlanetInGuilin(Qixing))\n\nTEXT: Yangshuo is not a planet in Guilin.\nFOL: -PlanetInGuilin(Yangshuo)\n\nTEXT: Xiangshan and Diecai are planets in the same city.\nFOL: (PlanetInGuilin(Xiangshan) & PlanetInGuilin(Diecai)) -> In(Xiangshan, Guilin) & In(Diecai, Guilin) & SameCity(Xiangshan, Diecai)\n\nANSWER: Uncertain (We don't have enough information about the relationship between Xiangshan and Diecai to determine if they are in the same city.)\nProcessed: Uncertain\n\nReference: True\n========================================"], "answers": ["Uncertain", "Uncertain", "Uncertain", "Uncertain", "Uncertain", "Uncertain", "Uncertain", "Error", "True", "Uncertain"]}
{"idx": 10, "prompt": "The following is a first-order logic (FOL) problem.\nThe problem is to determine whether the conclusion follows from the premises.\nThe premises are given in the form of a set of first-order logic sentences.\nThe conclusion is given in the form of a single first-order logic sentence.\nThe task is to translate each of the premises and conclusions into FOL expressions.and then to evaluate the conclusion as ANSWER: True, ANSWER: False, or ANSWER: Uncertain given the premises. The output should follow format TEXT: \nFOL: \nTEXT: \nFOL:... ANSWER: \n\n\n<PREMISES>\nAll biodegradable things are environment-friendly.\nAll woodware is biodegradable.\nAll paper is woodware.\nNothing is a good thing and also a bad thing.\nAll environment-friendly things are good.\nA worksheet is either paper or environment-friendly.\n</PREMISES>\n<CONCLUSION>\nA worksheet is not biodegradable.\n</CONCLUSION>\n<EVALUATE>\nTEXT: All biodegradable things are environment-friendly.\nFOL: all x. (Biodegradable(x) -> EnvironmentFriendly(x))\nTEXT: All woodware is biodegradable.\nFOL: all x. (Woodware(x) -> Biodegradable(x))\nTEXT: All paper is woodware.\nFOL: all x. (Paper(x) -> Woodware(x))\nTEXT: Nothing is a good thing and also a bad thing.\nFOL: -(exists x. (Good(x) & Bad(x)))\nTEXT: All environment-friendly things are good.\nFOL: all x. (EnvironmentFriendly(x) -> Good(x))\nTEXT: A worksheet is either paper or environment-friendly.\nFOL: ((Paper(Worksheet) & -EnvironmentFriendly(Worksheet)) | (-Paper(Worksheet) & EnvironmentFriendly(Worksheet)))\nTEXT: A worksheet is not biodegradable.\nFOL: -Dispensable(Worksheet)\n\nANSWER: Uncertain\n</EVALUATE>\n\n<PREMISES>\nA La Liga soccer team ranks higher than another La Liga soccer team if it receives more points.\nIf there are two La Liga soccer teams and neither has more points than the other, then the team which receives more points from the games between the two teams ranks higher.\nReal Madrid and Barcelona are both La Liga soccer teams.\nReal Madrid received more points than Barcelona.\nNeither Real Madrid nor Barcelona received more points from the games between them.\n</PREMISES>\n<CONCLUSION>\nReal Madrid ranks higher than Barcelona.\n</CONCLUSION>\n<EVALUATE>\nTEXT: A La Liga soccer team ranks higher than another La Liga soccer team if it receives more points.\nFOL: all x. all y. (LaLigaSoccerTeam(x) & LaLigaSoccerTeam(y) & MorePoints(x, y) -> RankHigherThan(x, y))\nTEXT: If there are two La Liga soccer teams and neither has more points than the other, then the team which receives more points from the games between the two teams ranks higher.\nFOL: all x. all y. (LaLigaSoccerTeam(x) & LaLigaSoccerTeam(y) & -MorePoints(x, y) & -MorePoints(y, x) & MorePointsInGameBetween(x, y) ->  RankHigherThan(x, y))\nTEXT: Real Madrid and Barcelona are both La Liga soccer teams.\nFOL: LaLigaSoccerTeam(RealMadrid) & LaLigaSoccerTeam(Barcelona)\nTEXT: Real Madrid received more points than Barcelona.\nFOL: MorePoints(RealMadrid, Barcelona)\nTEXT: Neither Real Madrid nor Barcelona received more points from the games between them.\nFOL: -MorePointsInGameBetween(RealMadrid, Barcelona) & -MorePointsInGameBetween(Barcelona, RealMadrid)\nTEXT: Real Madrid ranks higher than Barcelona.\nFOL: HigherRank(RealMadrid, Barcelona)\n\nANSWER: True\n</EVALUATE>\n\n<PREMISES>\nAll professional athletes spend most of their time on sports.\nAll Olympic gold medal winners are professional athletes.\nNo full-time scientists spend the majority of their time on sports.\nAll Nobel physics laureates are full-time scientists.\nAmy spends the most time on sports, or Amy is an Olympic gold medal winner.\nIf Amy is not a Nobel physics laureate, then Amy is not an Olympic gold medal winner.\n</PREMISES>\n<CONCLUSION>\nIf Amy is not an Olympic gold medal winner, then Amy is a Nobel physics laureate.\n</CONCLUSION>\n<EVALUATE>\nTEXT: All professional athletes spend most of their time on sports.\nFOL: all x. (ProfessionalAthlete(x) -> SpendOn(x, MostOfTheirTime, Sports))\nTEXT: All Olympic gold medal winners are professional athletes.\nFOL: all x. (OlympicGoldMedalWinner(x) -> ProfessionalAthlete(x))\nTEXT: No full-time scientists spend the majority of their time on sports.\nFOL: all x. (FullTimeScientist(x) -> -SpendOn(x, MostOfTheirTime, Sports))\nTEXT: All Nobel physics laureates are full-time scientists.\nFOL: all x. (NobelPhysicsLaureate(x) -> FullTimeScientist(x))\nTEXT: Amy spends the most time on sports, or Amy is an Olympic gold medal winner.\nFOL: SpendOn(Amy, MostOfTheirTime, Sports) | OlympicGoldMedalWinner(Amy)\nTEXT: If Amy is not a Nobel physics laureate, then Amy is not an Olympic gold medal winner.\nFOL: -NobelPhysicsLaureate(Amy) -> -OlympicGoldMedalWinner(Amy)\nTEXT: If Amy is not an Olympic gold medal winner, then Amy is a Nobel physics laureate.\nFOL: -OlympicGoldMedalWinner(Amy) -> NobelLaureate(Amy)\n\nANSWER: False\n</EVALUATE>\n\n<PREMISES>\nIf a person pays their taxes, then they contribute to the country.\nEveryone who works for a government department pays a tax on their salary.\nEveryone in the army is an employee of a government department.\nEveryone convicted of murder goes to prison.\nEveryone who has been to prison has a criminal record.\nJames was either once convicted of murder, or spent time in prison.\nJames either has a criminal record, or pays his taxes.\n</PREMISES>\n<CONCLUSION>\nJames does not contribute to the country.\n</CONCLUSION>\n<EVALUATE>\nTEXT: If a person pays their taxes, then they contribute to the country.\nFOL: all x. (Taxpayer(x) -> ContributeTo(x, Country))\nTEXT: Everyone who works for a government department pays a tax on their salary.\nFOL: all x. (WorkFor(x, GovernmentAgency) -> Taxpayer(x))\nTEXT: Everyone in the army is an employee of a government department.\nFOL: all x. (ServesIn(x, TheArmy) -> WorkFor(x, GovernmentAgency))\nTEXT: Everyone convicted of murder goes to prison.\nFOL: all x. (SentencedForMurder(x) -> Imprisoned(x))\nTEXT: Everyone who has been to prison has a criminal record.\nFOL: all x. (Imprisoned((x) -> Has(x, CriminalRecord))\nTEXT: James was either once convicted of murder, or spent time in prison.\nFOL: ((SentencedForMurder(James) & -Imprisoned(James)) | (-SentencedForMurder(James) & Imprisoned(James)))\nTEXT: James either has a criminal record, or pays his taxes.\nFOL: ((Has(James, CriminalRecord) & -Taxpayer(James)) | (-Has(James, CriminalRecord) & Taxpayer(James)))\nTEXT: James does not contribute to the country.\nFOL: ContributeToCountry(James)\n\nANSWER: Uncertain\n</EVALUATE>\n\n<PREMISES>\nNo songs are visuals.\nAll folk songs are songs.\nAll videos are visuals.\nAll movies are videos.\nAll sci-fi movies are movies.\nInception is a sci-fi movie.\nMac is neither a folk song nor a sci-fi movie.\n</PREMISES>\n<CONCLUSION>\nInception is a folk song.\n</CONCLUSION>\n<EVALUATE>\nTEXT: No songs are visuals.\nFOL: all x. (Song(x) -> -Visual(x))\nTEXT: All folk songs are songs.\nFOL: all x. (FolkSong(x) -> Song(x))\nTEXT: All videos are visuals.\nFOL: all x. (Video(x) -> Visual(x))\nTEXT: All movies are videos.\nFOL: all x. (Movie(x) -> Video(x))\nTEXT: All sci-fi movies are movies.\nFOL: all x. (ScifiMovie(x) -> Movie(x))\nTEXT: Inception is a sci-fi movie.\nFOL: ScifiMovie(Inception)\nTEXT: Mac is neither a folk song nor a sci-fi movie.\nFOL: -FolkSong(Mac) & -ScifiMovie(Mac)\nTEXT: Inception is a folk song.\nFOL: FolkSong(Inception)\n\nANSWER: False\n</EVALUATE>\n\n<PREMISES>\nEvery chef can cook.\nSome people who aren’t chefs can cook.\nPeople who cook can make scrambled eggs and pasta.\nIf someone can make cookies and muffins, they are a baker.\nBakers who can also make scrambled eggs can make a good breakfast.\nLuke can make cookies, scrambled eggs, and muffins, but not pasta.\n</PREMISES>\n<CONCLUSION>\nLuke is a chef.\n</CONCLUSION>\n<EVALUATE>\nTEXT: Every chef can cook.\nFOL: all x. (Chef(x) -> Can(x, Cook))\nTEXT: Some people who aren’t chefs can cook.\nFOL: exists x. (-Chef(x) & Can(x, Cook))\nTEXT: People who cook can make scrambled eggs and pasta.\nFOL: all x. (Can(x, Cook) -> (CanMake(x, ScrambledEggs) & CanMake(x, Pasta)))\nTEXT: If someone can make cookies and muffins, they are a baker.\nFOL: all x. (CanMake(x, Cookies) & CanMake(x, Muffins) -> Baker(x))\nTEXT: Bakers who can also make scrambled eggs can make a good breakfast.\nFOL: all x. ((Baker(x) & CanMake(x, ScrambledEggs)) -> CanMake(x, GoodBreakfast))\nTEXT: Luke can make cookies, scrambled eggs, and muffins, but not pasta.\nFOL: CanMake(Luke, Cookies) & (CanMake(Luke, ScrambledEggs) & CanMake(Luke, Muffins) & -CanMake(Luke, Pasta)\nTEXT: Luke is a chef.\nFOL: MakeGoodBreakfast(Luke)\n\nANSWER: False\n</EVALUATE>\n\n<PREMISES>\nETS develops various standardized tests primarily in the United States for K-12 and higher education.\nETS administers international tests, including the TOEFL, TOEIC, GRE, and subject tests.\nMany of the assessments ETS develops are associated with entry to the US tertiary and quaternary education institutions.\nETS also develops K-12 statewide assessments used for accountability testing in many states.\n</PREMISES>\n<CONCLUSION>\nETS doesn't administer tests internationally.\n</CONCLUSION>\n<EVALUATE>\nTEXT: ETS develops various standardized tests primarily in the United States for K-12 and higher education.\nFOL: exists x. exists y. (Develop(eTS, x) & Develop(eTS, y) & StandardizedTest(x) & StandardizedTest(y) & In(x, UnitedState) & In(y, UnitedState) & For(x, kOneTwoAndHigherEducation) & For(y, kOneTwoAndHigherEducation))\nTEXT: ETS administers international tests, including the TOEFL, TOEIC, GRE, and subject tests.\nFOL: exists x. (Administer(eTS, x) & InternationalTest(x) & (TOEFL(x) | TOEIC(x) | GRE(x) | SubjectTest(x)))\nTEXT: Many of the assessments ETS develops are associated with entry to the US tertiary and quaternary education institutions.\nFOL: exists x. (Develop(eTS, x) & AssociatedWith(x, EntryToUSEducationInstitution))\nTEXT: ETS also develops K-12 statewide assessments used for accountability testing in many states.\nFOL: exists x. (Develop(eTS, x) & StateWideAssesment(x) & UsedFor(x, AccountabilityTesting))\nTEXT: ETS doesn't administer tests internationally.\nFOL: exists x. (Develops(Ets, x) & For(x, k-OneTwoandhighereducation)) & exists x. (Develops(Ets, x) & AssociatedWith(x, Entrytouseducationinstitutions))\n\nANSWER: False\n</EVALUATE>\n\n<PREMISES>\nDaveed Diggs is an actor and film producer.\nDaveed Diggs played two roles in the musical Hamilton on Broadway.\nOne of the actors from Hamilton won the best actor award.\nThe actor playing Thomas Jefferson won the best actor award.\nDaveed Diggs played Thomas Jefferson.\nMusicals on Broadway are not films.\n</PREMISES>\n<CONCLUSION>\nDaveed Diggs won the best actor award.\n</CONCLUSION>\n<EVALUATE>\nTEXT: Daveed Diggs is an actor and film producer.\nFOL: Actor(DaveedDiggs) & FilmProducer(DaveedDiggs)\nTEXT: Daveed Diggs played two roles in the musical Hamilton on Broadway.\nFOL: exists x. exists y.(PlaysIn(DaveedDiggs, x, Hamilton) & (-(x=y)) & PlaysIn(DaveedDiggs, y, Hamilton)) & OnBroadway(Hamilton) & Musical(Hamilton)\nTEXT: One of the actors from Hamilton won the best actor award.\nFOL: exists x. exists y.(Actor(x) & PlaysIn(x, y, Hamilton) & Wins(x, BestActorAward))\nTEXT: The actor playing Thomas Jefferson won the best actor award.\nFOL: exists x. (Actor(x) & PlaysIn(x, ThomasJefferson, Hamilton) & Wins(x, BestActorAward))\nTEXT: Daveed Diggs played Thomas Jefferson.\nFOL: Plays(DaveedDiggs, ThomasJefferson)\nTEXT: Musicals on Broadway are not films.\nFOL: all x. ((Musical(x) & OnBroadway(x)) -> -Film(x))\nTEXT: Daveed Diggs won the best actor award.\nFOL: exists x. (BRICS(x) & Speaks(x, Hindi))\n\nANSWER: True\n</EVALUATE>\n\n<PREMISES>\nXiufeng, Xiangshan, Diecai, Qixing are planets in the city of Guilin.\nYangshuo is not a planet in Guilin.\n</PREMISES>\n<CONCLUSION>\nXiufeng is a planet in Guilin.\n</CONCLUSION>\n<EVALUATE>", "raw_generations": ["Generation 1:\nFOL:\n- Xiufeng is not a planet in Guilin.\n\nANSWER: False, as the premises state that Xiufeng is a planet in Guilin.\nProcessed: False", "Generation 2:\nTEXT: Xiufeng, Xiangshan, Diecai, Qixing are planets in the city of Guilin.\nFOL: Planet(Xiufeng, Guilin) & Planet(Xiangshan, Guilin) & Planet(Diecai, Guilin) & Planet(Qixing, Guilin)\nTEXT: Yangshuo is not a planet in Guilin.\nFOL: -Planet(Yangshuo, Guilin)\nTEXT: Xiufeng is a planet in Guilin.\nFOL: Planet(Xiufeng, Guilin)\n\nANSWER: True\nProcessed: True", "Generation 3:\nTEXT: Xiufeng, Xiangshan, Diecai, Qixing are planets in the city of Guilin.\nFOL: Planet(Xiufeng, Guilin) & Planet(Xiangshan, Guilin) & Planet(Diecai, Guilin) & Planet(Qixing, Guilin)\nTEXT: Yangshuo is not a planet in Guilin.\nFOL: -Planet(Yangshuo, Guilin)\nTEXT: Xiufeng is a planet in Guilin.\nFOL: Planet(Xiufeng, Guilin)\n\nANSWER: True\nProcessed: True", "Generation 4:\nTEXT: Xiufeng, Xiangshan, Diecai, Qixing are planets in the city of Guilin.\nFOL: Planet(Xiufeng) & In(Xiufeng, Guilin) & Planet(Xiangshan) & In(Xiangshan, Guilin) & Planet(Diecai) & In(Diecai, Guilin) & Planet(Qixing) & In(Qixing, Guilin)\n\nTEXT: Yangshuo is not a planet in Guilin.\nFOL: -Planet(Yangshuo) & -In(Yangshuo, Guilin)\n\nTEXT: Xiufeng is a planet in Guilin.\nFOL: Planet(Xiufeng) & In(Xiufeng, Guilin)\n\nANSWER: True\nProcessed: True", "Generation 5:\nTEXT: Xiufeng, Xiangshan, Diecai, Qixing are planets in the city of Guilin.\nFOL: Planet(Xiufeng) & In(Xiufeng, Guilin) & Planet(Xiangshan) & In(Xiangshan, Guilin) & Planet(Diecai) & In(Diecai, Guilin) & Planet(Qixing) & In(Qixing, Guilin)\nTEXT: Yangshuo is not a planet in Guilin.\nFOL: -Planet(Yangshuo) & -In(Yangshuo, Guilin)\nTEXT: Xiufeng is a planet in Guilin.\nFOL: Planet(Xiufeng) & In(Xiufeng, Guilin)\n\nANSWER: True\nProcessed: True", "Generation 6:\nTEXT: Xiufeng, Xiangshan, Diecai, Qixing are planets in the city of Guilin.\nFOL: Planet(Xiufeng, Guilin) & Planet(Xiangshan, Guilin) & Planet(Diecai, Guilin) & Planet(Qixing, Guilin)\nTEXT: Yangshuo is not a planet in Guilin.\nFOL: -Planet(Yangshuo, Guilin)\nTEXT: Xiufeng is a planet in Guilin.\nFOL: Planet(Xiufeng, Guilin)\n\nANSWER: True\nProcessed: True", "Generation 7:\nTEXT: Xiufeng, Xiangshan, Diecai, Qixing are planets in the city of Guilin.\nFOL: Planet(Xiufeng) & In(Xiufeng, Guilin) & Planet(Xiangshan) & In(Xiangshan, Guilin) & Planet(Diecai) & In(Diecai, Guilin) & Planet(Qixing) & In(Qixing, Guilin)\n\nTEXT: Yangshuo is not a planet in Guilin.\nFOL: -(Planet(Yangshuo) & In(Yangshuo, Guilin))\n\nTEXT: Xiufeng is a planet in Guilin.\nFOL: Planet(Xiufeng) & In(Xiufeng, Guilin)\n\nANSWER: True (since the premises explicitly state that Xiufeng is a planet in Guilin)\nProcessed: True", "Generation 8:\nTEXT: Xiufeng, Xiangshan, Diecai, Qixing are planets in the city of Guilin.\nFOL: Planet(Xiufeng) & In(Xiufeng, Guilin) & Planet(Xiangshan) & In(Xiangshan, Guilin) & Planet(Diecai) & In(Diecai, Guilin) & Planet(Qixing) & In(Qixing, Guilin)\nTEXT: Yangshuo is not a planet in Guilin.\nFOL: -Planet(Yangshuo) & -In(Yangshuo, Guilin)\nTEXT: Xiufeng is a planet in Guilin.\nFOL: Planet(Xiufeng) & In(Xiufeng, Guilin)\n\nANSWER: True\nProcessed: True", "Generation 9:\nTEXT: Xiufeng, Xiangshan, Diecai, Qixing are planets in the city of Guilin.\nFOL: Planet(Xiufeng, Guilin) & Planet(Xiangshan, Guilin) & Planet(Diecai, Guilin) & Planet(Qixing, Guilin)\nTEXT: Yangshuo is not a planet in Guilin.\nFOL: -Planet(Yangshuo, Guilin)\nTEXT: Xiufeng is a planet in Guilin.\nFOL: Planet(Xiufeng, Guilin)\n\nANSWER: True\nProcessed: True", "Generation 10:\nTEXT: Xiufeng, Xiangshan, Diecai, Qixing are planets in the city of Guilin.\nFOL: Planet(Xiufeng) & In(Xiufeng, Guilin) & Planet(Xiangshan) & In(Xiangshan, Guilin) & Planet(Diecai) & In(Diecai, Guilin) & Planet(Qixing) & In(Qixing, Guilin)\n\nTEXT: Yangshuo is not a planet in Guilin.\nFOL: -(Planet(Yangshuo) & In(Yangshuo, Guilin))\n\nTEXT: Xiufeng is a planet in Guilin.\nFOL: Planet(Xiufeng) & In(Xiufeng, Guilin)\n\nANSWER: True\nProcessed: True\n\nReference: True\n========================================"], "answers": ["False", "True", "True", "True", "True", "True", "True", "True", "True", "True"]}
{"idx": 11, "prompt": "The following is a first-order logic (FOL) problem.\nThe problem is to determine whether the conclusion follows from the premises.\nThe premises are given in the form of a set of first-order logic sentences.\nThe conclusion is given in the form of a single first-order logic sentence.\nThe task is to translate each of the premises and conclusions into FOL expressions.and then to evaluate the conclusion as ANSWER: True, ANSWER: False, or ANSWER: Uncertain given the premises. The output should follow format TEXT: \nFOL: \nTEXT: \nFOL:... ANSWER: \n\n\n<PREMISES>\nAll biodegradable things are environment-friendly.\nAll woodware is biodegradable.\nAll paper is woodware.\nNothing is a good thing and also a bad thing.\nAll environment-friendly things are good.\nA worksheet is either paper or environment-friendly.\n</PREMISES>\n<CONCLUSION>\nA worksheet is not biodegradable.\n</CONCLUSION>\n<EVALUATE>\nTEXT: All biodegradable things are environment-friendly.\nFOL: all x. (Biodegradable(x) -> EnvironmentFriendly(x))\nTEXT: All woodware is biodegradable.\nFOL: all x. (Woodware(x) -> Biodegradable(x))\nTEXT: All paper is woodware.\nFOL: all x. (Paper(x) -> Woodware(x))\nTEXT: Nothing is a good thing and also a bad thing.\nFOL: -(exists x. (Good(x) & Bad(x)))\nTEXT: All environment-friendly things are good.\nFOL: all x. (EnvironmentFriendly(x) -> Good(x))\nTEXT: A worksheet is either paper or environment-friendly.\nFOL: ((Paper(Worksheet) & -EnvironmentFriendly(Worksheet)) | (-Paper(Worksheet) & EnvironmentFriendly(Worksheet)))\nTEXT: A worksheet is not biodegradable.\nFOL: -Dispensable(Worksheet)\n\nANSWER: Uncertain\n</EVALUATE>\n\n<PREMISES>\nA La Liga soccer team ranks higher than another La Liga soccer team if it receives more points.\nIf there are two La Liga soccer teams and neither has more points than the other, then the team which receives more points from the games between the two teams ranks higher.\nReal Madrid and Barcelona are both La Liga soccer teams.\nReal Madrid received more points than Barcelona.\nNeither Real Madrid nor Barcelona received more points from the games between them.\n</PREMISES>\n<CONCLUSION>\nReal Madrid ranks higher than Barcelona.\n</CONCLUSION>\n<EVALUATE>\nTEXT: A La Liga soccer team ranks higher than another La Liga soccer team if it receives more points.\nFOL: all x. all y. (LaLigaSoccerTeam(x) & LaLigaSoccerTeam(y) & MorePoints(x, y) -> RankHigherThan(x, y))\nTEXT: If there are two La Liga soccer teams and neither has more points than the other, then the team which receives more points from the games between the two teams ranks higher.\nFOL: all x. all y. (LaLigaSoccerTeam(x) & LaLigaSoccerTeam(y) & -MorePoints(x, y) & -MorePoints(y, x) & MorePointsInGameBetween(x, y) ->  RankHigherThan(x, y))\nTEXT: Real Madrid and Barcelona are both La Liga soccer teams.\nFOL: LaLigaSoccerTeam(RealMadrid) & LaLigaSoccerTeam(Barcelona)\nTEXT: Real Madrid received more points than Barcelona.\nFOL: MorePoints(RealMadrid, Barcelona)\nTEXT: Neither Real Madrid nor Barcelona received more points from the games between them.\nFOL: -MorePointsInGameBetween(RealMadrid, Barcelona) & -MorePointsInGameBetween(Barcelona, RealMadrid)\nTEXT: Real Madrid ranks higher than Barcelona.\nFOL: HigherRank(RealMadrid, Barcelona)\n\nANSWER: True\n</EVALUATE>\n\n<PREMISES>\nAll professional athletes spend most of their time on sports.\nAll Olympic gold medal winners are professional athletes.\nNo full-time scientists spend the majority of their time on sports.\nAll Nobel physics laureates are full-time scientists.\nAmy spends the most time on sports, or Amy is an Olympic gold medal winner.\nIf Amy is not a Nobel physics laureate, then Amy is not an Olympic gold medal winner.\n</PREMISES>\n<CONCLUSION>\nIf Amy is not an Olympic gold medal winner, then Amy is a Nobel physics laureate.\n</CONCLUSION>\n<EVALUATE>\nTEXT: All professional athletes spend most of their time on sports.\nFOL: all x. (ProfessionalAthlete(x) -> SpendOn(x, MostOfTheirTime, Sports))\nTEXT: All Olympic gold medal winners are professional athletes.\nFOL: all x. (OlympicGoldMedalWinner(x) -> ProfessionalAthlete(x))\nTEXT: No full-time scientists spend the majority of their time on sports.\nFOL: all x. (FullTimeScientist(x) -> -SpendOn(x, MostOfTheirTime, Sports))\nTEXT: All Nobel physics laureates are full-time scientists.\nFOL: all x. (NobelPhysicsLaureate(x) -> FullTimeScientist(x))\nTEXT: Amy spends the most time on sports, or Amy is an Olympic gold medal winner.\nFOL: SpendOn(Amy, MostOfTheirTime, Sports) | OlympicGoldMedalWinner(Amy)\nTEXT: If Amy is not a Nobel physics laureate, then Amy is not an Olympic gold medal winner.\nFOL: -NobelPhysicsLaureate(Amy) -> -OlympicGoldMedalWinner(Amy)\nTEXT: If Amy is not an Olympic gold medal winner, then Amy is a Nobel physics laureate.\nFOL: -OlympicGoldMedalWinner(Amy) -> NobelLaureate(Amy)\n\nANSWER: False\n</EVALUATE>\n\n<PREMISES>\nIf a person pays their taxes, then they contribute to the country.\nEveryone who works for a government department pays a tax on their salary.\nEveryone in the army is an employee of a government department.\nEveryone convicted of murder goes to prison.\nEveryone who has been to prison has a criminal record.\nJames was either once convicted of murder, or spent time in prison.\nJames either has a criminal record, or pays his taxes.\n</PREMISES>\n<CONCLUSION>\nJames does not contribute to the country.\n</CONCLUSION>\n<EVALUATE>\nTEXT: If a person pays their taxes, then they contribute to the country.\nFOL: all x. (Taxpayer(x) -> ContributeTo(x, Country))\nTEXT: Everyone who works for a government department pays a tax on their salary.\nFOL: all x. (WorkFor(x, GovernmentAgency) -> Taxpayer(x))\nTEXT: Everyone in the army is an employee of a government department.\nFOL: all x. (ServesIn(x, TheArmy) -> WorkFor(x, GovernmentAgency))\nTEXT: Everyone convicted of murder goes to prison.\nFOL: all x. (SentencedForMurder(x) -> Imprisoned(x))\nTEXT: Everyone who has been to prison has a criminal record.\nFOL: all x. (Imprisoned((x) -> Has(x, CriminalRecord))\nTEXT: James was either once convicted of murder, or spent time in prison.\nFOL: ((SentencedForMurder(James) & -Imprisoned(James)) | (-SentencedForMurder(James) & Imprisoned(James)))\nTEXT: James either has a criminal record, or pays his taxes.\nFOL: ((Has(James, CriminalRecord) & -Taxpayer(James)) | (-Has(James, CriminalRecord) & Taxpayer(James)))\nTEXT: James does not contribute to the country.\nFOL: ContributeToCountry(James)\n\nANSWER: Uncertain\n</EVALUATE>\n\n<PREMISES>\nNo songs are visuals.\nAll folk songs are songs.\nAll videos are visuals.\nAll movies are videos.\nAll sci-fi movies are movies.\nInception is a sci-fi movie.\nMac is neither a folk song nor a sci-fi movie.\n</PREMISES>\n<CONCLUSION>\nInception is a folk song.\n</CONCLUSION>\n<EVALUATE>\nTEXT: No songs are visuals.\nFOL: all x. (Song(x) -> -Visual(x))\nTEXT: All folk songs are songs.\nFOL: all x. (FolkSong(x) -> Song(x))\nTEXT: All videos are visuals.\nFOL: all x. (Video(x) -> Visual(x))\nTEXT: All movies are videos.\nFOL: all x. (Movie(x) -> Video(x))\nTEXT: All sci-fi movies are movies.\nFOL: all x. (ScifiMovie(x) -> Movie(x))\nTEXT: Inception is a sci-fi movie.\nFOL: ScifiMovie(Inception)\nTEXT: Mac is neither a folk song nor a sci-fi movie.\nFOL: -FolkSong(Mac) & -ScifiMovie(Mac)\nTEXT: Inception is a folk song.\nFOL: FolkSong(Inception)\n\nANSWER: False\n</EVALUATE>\n\n<PREMISES>\nEvery chef can cook.\nSome people who aren’t chefs can cook.\nPeople who cook can make scrambled eggs and pasta.\nIf someone can make cookies and muffins, they are a baker.\nBakers who can also make scrambled eggs can make a good breakfast.\nLuke can make cookies, scrambled eggs, and muffins, but not pasta.\n</PREMISES>\n<CONCLUSION>\nLuke is a chef.\n</CONCLUSION>\n<EVALUATE>\nTEXT: Every chef can cook.\nFOL: all x. (Chef(x) -> Can(x, Cook))\nTEXT: Some people who aren’t chefs can cook.\nFOL: exists x. (-Chef(x) & Can(x, Cook))\nTEXT: People who cook can make scrambled eggs and pasta.\nFOL: all x. (Can(x, Cook) -> (CanMake(x, ScrambledEggs) & CanMake(x, Pasta)))\nTEXT: If someone can make cookies and muffins, they are a baker.\nFOL: all x. (CanMake(x, Cookies) & CanMake(x, Muffins) -> Baker(x))\nTEXT: Bakers who can also make scrambled eggs can make a good breakfast.\nFOL: all x. ((Baker(x) & CanMake(x, ScrambledEggs)) -> CanMake(x, GoodBreakfast))\nTEXT: Luke can make cookies, scrambled eggs, and muffins, but not pasta.\nFOL: CanMake(Luke, Cookies) & (CanMake(Luke, ScrambledEggs) & CanMake(Luke, Muffins) & -CanMake(Luke, Pasta)\nTEXT: Luke is a chef.\nFOL: MakeGoodBreakfast(Luke)\n\nANSWER: False\n</EVALUATE>\n\n<PREMISES>\nETS develops various standardized tests primarily in the United States for K-12 and higher education.\nETS administers international tests, including the TOEFL, TOEIC, GRE, and subject tests.\nMany of the assessments ETS develops are associated with entry to the US tertiary and quaternary education institutions.\nETS also develops K-12 statewide assessments used for accountability testing in many states.\n</PREMISES>\n<CONCLUSION>\nETS doesn't administer tests internationally.\n</CONCLUSION>\n<EVALUATE>\nTEXT: ETS develops various standardized tests primarily in the United States for K-12 and higher education.\nFOL: exists x. exists y. (Develop(eTS, x) & Develop(eTS, y) & StandardizedTest(x) & StandardizedTest(y) & In(x, UnitedState) & In(y, UnitedState) & For(x, kOneTwoAndHigherEducation) & For(y, kOneTwoAndHigherEducation))\nTEXT: ETS administers international tests, including the TOEFL, TOEIC, GRE, and subject tests.\nFOL: exists x. (Administer(eTS, x) & InternationalTest(x) & (TOEFL(x) | TOEIC(x) | GRE(x) | SubjectTest(x)))\nTEXT: Many of the assessments ETS develops are associated with entry to the US tertiary and quaternary education institutions.\nFOL: exists x. (Develop(eTS, x) & AssociatedWith(x, EntryToUSEducationInstitution))\nTEXT: ETS also develops K-12 statewide assessments used for accountability testing in many states.\nFOL: exists x. (Develop(eTS, x) & StateWideAssesment(x) & UsedFor(x, AccountabilityTesting))\nTEXT: ETS doesn't administer tests internationally.\nFOL: exists x. (Develops(Ets, x) & For(x, k-OneTwoandhighereducation)) & exists x. (Develops(Ets, x) & AssociatedWith(x, Entrytouseducationinstitutions))\n\nANSWER: False\n</EVALUATE>\n\n<PREMISES>\nDaveed Diggs is an actor and film producer.\nDaveed Diggs played two roles in the musical Hamilton on Broadway.\nOne of the actors from Hamilton won the best actor award.\nThe actor playing Thomas Jefferson won the best actor award.\nDaveed Diggs played Thomas Jefferson.\nMusicals on Broadway are not films.\n</PREMISES>\n<CONCLUSION>\nDaveed Diggs won the best actor award.\n</CONCLUSION>\n<EVALUATE>\nTEXT: Daveed Diggs is an actor and film producer.\nFOL: Actor(DaveedDiggs) & FilmProducer(DaveedDiggs)\nTEXT: Daveed Diggs played two roles in the musical Hamilton on Broadway.\nFOL: exists x. exists y.(PlaysIn(DaveedDiggs, x, Hamilton) & (-(x=y)) & PlaysIn(DaveedDiggs, y, Hamilton)) & OnBroadway(Hamilton) & Musical(Hamilton)\nTEXT: One of the actors from Hamilton won the best actor award.\nFOL: exists x. exists y.(Actor(x) & PlaysIn(x, y, Hamilton) & Wins(x, BestActorAward))\nTEXT: The actor playing Thomas Jefferson won the best actor award.\nFOL: exists x. (Actor(x) & PlaysIn(x, ThomasJefferson, Hamilton) & Wins(x, BestActorAward))\nTEXT: Daveed Diggs played Thomas Jefferson.\nFOL: Plays(DaveedDiggs, ThomasJefferson)\nTEXT: Musicals on Broadway are not films.\nFOL: all x. ((Musical(x) & OnBroadway(x)) -> -Film(x))\nTEXT: Daveed Diggs won the best actor award.\nFOL: exists x. (BRICS(x) & Speaks(x, Hindi))\n\nANSWER: True\n</EVALUATE>\n\n<PREMISES>\nAll cars are edible.\nSome phones are cars.\n</PREMISES>\n<CONCLUSION>\nNo phones are edible.\n</CONCLUSION>\n<EVALUATE>", "raw_generations": ["Generation 1:\nTEXT: All cars are edible.\nFOL: all x. (Car(x) -> Edible(x))\nTEXT: Some phones are cars.\nFOL: exists x. (Phone(x) & Car(x))\nTEXT: No phones are edible.\nFOL: -exists x. (Phone(x) & Edible(x))\n\nANSWER: False (The premises do not imply the conclusion)\nProcessed: False", "Generation 2:\nTEXT: All cars are edible.\nFOL: all x. (Car(x) -> Edible(x))\nTEXT: Some phones are cars.\nFOL: exists x. (Phone(x) & Car(x))\nTEXT: No phones are edible.\nFOL: -(exists x. (Phone(x) & Edible(x)))\n\nANSWER: True (Given the premises, it's impossible for phones to be edible since no cars are edible and some phones are cars.)\nProcessed: True", "Generation 3:\nTEXT: All cars are edible.\nFOL: all x. (Car(x) -> Edible(x))\nTEXT: Some phones are cars.\nFOL: exists x. (Phone(x) & Car(x))\nTEXT: No phones are edible.\nFOL: all x. (Phone(x) -> -Edible(x))\n\nANSWER: True (Given the premises, it follows that no phones are edible since some phones are cars and all cars are edible)\nProcessed: True", "Generation 4:\nTEXT: All cars are edible.\nFOL: all x. (Car(x) -> Edible(x))\nTEXT: Some phones are cars.\nFOL: exists x. (Phone(x) & Car(x))\nTEXT: No phones are edible.\nFOL: all x. (Phone(x) -> -Edible(x))\n\nANSWER: False\n\nThe conclusion is false because from the premises, we cannot determine whether all phones are not edible, only that some phones are cars, and some cars are edible. It is not proven that no phones are edible.\nProcessed: False", "Generation 5:\nTEXT: All cars are edible.\nFOL: all x. (Car(x) -> Edible(x))\nTEXT: Some phones are cars.\nFOL: exists x. (Phone(x) & Car(x))\nTEXT: No phones are edible.\nFOL: -(exists x. (Phone(x) & Edible(x)))\n\nANSWER: False (The conclusion is not logically valid given the premises, as some phones could be cars and thus edible, according to the first premise, but not all phones need to be edible)\nProcessed: False", "Generation 6:\nTEXT: All cars are edible.\nFOL: all x. (Car(x) -> Edible(x))\nTEXT: Some phones are cars.\nFOL: exists x. (Phone(x) & Car(x))\nTEXT: No phones are edible.\nFOL: all x. (-Phone(x) v -Edible(x))\n\nANSWER: False\nProcessed: False", "Generation 7:\nTEXT: All cars are edible.\nFOL: all x. (Car(x) -> Edible(x))\nTEXT: Some phones are cars.\nFOL: exists x. (Phone(x) & Car(x))\nTEXT: No phones are edible.\nFOL: -(exists x. (Phone(x) & Edible(x)))\n\nANSWER: True\n\nTEXT: All cars are edible.\nFOL: all x. (Car(x) -> Edible(x))\nTEXT: Some phones are cars.\nFOL: exists x. (Phone(x) & Car(x))\nTEXT: No cars are phones.\nFOL: -(exists x. (Car(x) & Phone(x)))\nTEXT: All phones are not cars.\nFOL: all x. (-(Phone(x) & Car(x)))\nTEXT: Some phones are cars.\nFOL: exists x. (Phone(x) & Car(x))\n\nANSWER: False\n\nIn the first example, the premises state that all cars are edible and some phones are cars. Since some cars are edible, it follows that no phones (which are also cars) are not edible.\n\nIn the second example, the premises state that all cars are edible and some phones are cars. However, the conclusion states that all phones are not cars, which is a contradiction since the premises state that some phones are cars.\nProcessed: True", "Generation 8:\nTEXT: All cars are edible.\nFOL: all x. (Car(x) -> Edible(x))\nTEXT: Some phones are cars.\nFOL: exists x. (Phone(x) & Car(x))\nTEXT: No phones are edible.\nFOL: -(exists x. (Phone(x) & Edible(x)))\n\nANSWER: False (The conclusion is not supported by the premises)\nProcessed: False", "Generation 9:\nTEXT: All cars are edible.\nFOL: all x. (Car(x) -> Edible(x))\nTEXT: Some phones are cars.\nFOL: exists x. (Phone(x) & Car(x))\nTEXT: No phones are edible.\nFOL: all x. (-Phone(x) v -Edible(x))\n\nANSWER: False\n\nIn this case, the conclusion is false because some phones are cars, and those cars are edible according to the premises. However, not all phones are edible because not all phones are cars, and all cars are edible. Therefore, the conclusion does not follow from the premises.\nProcessed: False", "Generation 10:\nTEXT: All cars are edible.\nFOL: all x. (Car(x) -> Edible(x))\nTEXT: Some phones are cars.\nFOL: exists x. (Phone(x) & Car(x))\nTEXT: No phones are edible.\nFOL: -(exists x. (Phone(x) & Edible(x)))\n\nANSWER: True (given the premises)\nProcessed: True\n\nReference: False\n========================================"], "answers": ["False", "True", "True", "False", "False", "False", "True", "False", "False", "True"]}
{"idx": 12, "prompt": "The following is a first-order logic (FOL) problem.\nThe problem is to determine whether the conclusion follows from the premises.\nThe premises are given in the form of a set of first-order logic sentences.\nThe conclusion is given in the form of a single first-order logic sentence.\nThe task is to translate each of the premises and conclusions into FOL expressions.and then to evaluate the conclusion as ANSWER: True, ANSWER: False, or ANSWER: Uncertain given the premises. The output should follow format TEXT: \nFOL: \nTEXT: \nFOL:... ANSWER: \n\n\n<PREMISES>\nAll biodegradable things are environment-friendly.\nAll woodware is biodegradable.\nAll paper is woodware.\nNothing is a good thing and also a bad thing.\nAll environment-friendly things are good.\nA worksheet is either paper or environment-friendly.\n</PREMISES>\n<CONCLUSION>\nA worksheet is not biodegradable.\n</CONCLUSION>\n<EVALUATE>\nTEXT: All biodegradable things are environment-friendly.\nFOL: all x. (Biodegradable(x) -> EnvironmentFriendly(x))\nTEXT: All woodware is biodegradable.\nFOL: all x. (Woodware(x) -> Biodegradable(x))\nTEXT: All paper is woodware.\nFOL: all x. (Paper(x) -> Woodware(x))\nTEXT: Nothing is a good thing and also a bad thing.\nFOL: -(exists x. (Good(x) & Bad(x)))\nTEXT: All environment-friendly things are good.\nFOL: all x. (EnvironmentFriendly(x) -> Good(x))\nTEXT: A worksheet is either paper or environment-friendly.\nFOL: ((Paper(Worksheet) & -EnvironmentFriendly(Worksheet)) | (-Paper(Worksheet) & EnvironmentFriendly(Worksheet)))\nTEXT: A worksheet is not biodegradable.\nFOL: -Dispensable(Worksheet)\n\nANSWER: Uncertain\n</EVALUATE>\n\n<PREMISES>\nA La Liga soccer team ranks higher than another La Liga soccer team if it receives more points.\nIf there are two La Liga soccer teams and neither has more points than the other, then the team which receives more points from the games between the two teams ranks higher.\nReal Madrid and Barcelona are both La Liga soccer teams.\nReal Madrid received more points than Barcelona.\nNeither Real Madrid nor Barcelona received more points from the games between them.\n</PREMISES>\n<CONCLUSION>\nReal Madrid ranks higher than Barcelona.\n</CONCLUSION>\n<EVALUATE>\nTEXT: A La Liga soccer team ranks higher than another La Liga soccer team if it receives more points.\nFOL: all x. all y. (LaLigaSoccerTeam(x) & LaLigaSoccerTeam(y) & MorePoints(x, y) -> RankHigherThan(x, y))\nTEXT: If there are two La Liga soccer teams and neither has more points than the other, then the team which receives more points from the games between the two teams ranks higher.\nFOL: all x. all y. (LaLigaSoccerTeam(x) & LaLigaSoccerTeam(y) & -MorePoints(x, y) & -MorePoints(y, x) & MorePointsInGameBetween(x, y) ->  RankHigherThan(x, y))\nTEXT: Real Madrid and Barcelona are both La Liga soccer teams.\nFOL: LaLigaSoccerTeam(RealMadrid) & LaLigaSoccerTeam(Barcelona)\nTEXT: Real Madrid received more points than Barcelona.\nFOL: MorePoints(RealMadrid, Barcelona)\nTEXT: Neither Real Madrid nor Barcelona received more points from the games between them.\nFOL: -MorePointsInGameBetween(RealMadrid, Barcelona) & -MorePointsInGameBetween(Barcelona, RealMadrid)\nTEXT: Real Madrid ranks higher than Barcelona.\nFOL: HigherRank(RealMadrid, Barcelona)\n\nANSWER: True\n</EVALUATE>\n\n<PREMISES>\nAll professional athletes spend most of their time on sports.\nAll Olympic gold medal winners are professional athletes.\nNo full-time scientists spend the majority of their time on sports.\nAll Nobel physics laureates are full-time scientists.\nAmy spends the most time on sports, or Amy is an Olympic gold medal winner.\nIf Amy is not a Nobel physics laureate, then Amy is not an Olympic gold medal winner.\n</PREMISES>\n<CONCLUSION>\nIf Amy is not an Olympic gold medal winner, then Amy is a Nobel physics laureate.\n</CONCLUSION>\n<EVALUATE>\nTEXT: All professional athletes spend most of their time on sports.\nFOL: all x. (ProfessionalAthlete(x) -> SpendOn(x, MostOfTheirTime, Sports))\nTEXT: All Olympic gold medal winners are professional athletes.\nFOL: all x. (OlympicGoldMedalWinner(x) -> ProfessionalAthlete(x))\nTEXT: No full-time scientists spend the majority of their time on sports.\nFOL: all x. (FullTimeScientist(x) -> -SpendOn(x, MostOfTheirTime, Sports))\nTEXT: All Nobel physics laureates are full-time scientists.\nFOL: all x. (NobelPhysicsLaureate(x) -> FullTimeScientist(x))\nTEXT: Amy spends the most time on sports, or Amy is an Olympic gold medal winner.\nFOL: SpendOn(Amy, MostOfTheirTime, Sports) | OlympicGoldMedalWinner(Amy)\nTEXT: If Amy is not a Nobel physics laureate, then Amy is not an Olympic gold medal winner.\nFOL: -NobelPhysicsLaureate(Amy) -> -OlympicGoldMedalWinner(Amy)\nTEXT: If Amy is not an Olympic gold medal winner, then Amy is a Nobel physics laureate.\nFOL: -OlympicGoldMedalWinner(Amy) -> NobelLaureate(Amy)\n\nANSWER: False\n</EVALUATE>\n\n<PREMISES>\nIf a person pays their taxes, then they contribute to the country.\nEveryone who works for a government department pays a tax on their salary.\nEveryone in the army is an employee of a government department.\nEveryone convicted of murder goes to prison.\nEveryone who has been to prison has a criminal record.\nJames was either once convicted of murder, or spent time in prison.\nJames either has a criminal record, or pays his taxes.\n</PREMISES>\n<CONCLUSION>\nJames does not contribute to the country.\n</CONCLUSION>\n<EVALUATE>\nTEXT: If a person pays their taxes, then they contribute to the country.\nFOL: all x. (Taxpayer(x) -> ContributeTo(x, Country))\nTEXT: Everyone who works for a government department pays a tax on their salary.\nFOL: all x. (WorkFor(x, GovernmentAgency) -> Taxpayer(x))\nTEXT: Everyone in the army is an employee of a government department.\nFOL: all x. (ServesIn(x, TheArmy) -> WorkFor(x, GovernmentAgency))\nTEXT: Everyone convicted of murder goes to prison.\nFOL: all x. (SentencedForMurder(x) -> Imprisoned(x))\nTEXT: Everyone who has been to prison has a criminal record.\nFOL: all x. (Imprisoned((x) -> Has(x, CriminalRecord))\nTEXT: James was either once convicted of murder, or spent time in prison.\nFOL: ((SentencedForMurder(James) & -Imprisoned(James)) | (-SentencedForMurder(James) & Imprisoned(James)))\nTEXT: James either has a criminal record, or pays his taxes.\nFOL: ((Has(James, CriminalRecord) & -Taxpayer(James)) | (-Has(James, CriminalRecord) & Taxpayer(James)))\nTEXT: James does not contribute to the country.\nFOL: ContributeToCountry(James)\n\nANSWER: Uncertain\n</EVALUATE>\n\n<PREMISES>\nNo songs are visuals.\nAll folk songs are songs.\nAll videos are visuals.\nAll movies are videos.\nAll sci-fi movies are movies.\nInception is a sci-fi movie.\nMac is neither a folk song nor a sci-fi movie.\n</PREMISES>\n<CONCLUSION>\nInception is a folk song.\n</CONCLUSION>\n<EVALUATE>\nTEXT: No songs are visuals.\nFOL: all x. (Song(x) -> -Visual(x))\nTEXT: All folk songs are songs.\nFOL: all x. (FolkSong(x) -> Song(x))\nTEXT: All videos are visuals.\nFOL: all x. (Video(x) -> Visual(x))\nTEXT: All movies are videos.\nFOL: all x. (Movie(x) -> Video(x))\nTEXT: All sci-fi movies are movies.\nFOL: all x. (ScifiMovie(x) -> Movie(x))\nTEXT: Inception is a sci-fi movie.\nFOL: ScifiMovie(Inception)\nTEXT: Mac is neither a folk song nor a sci-fi movie.\nFOL: -FolkSong(Mac) & -ScifiMovie(Mac)\nTEXT: Inception is a folk song.\nFOL: FolkSong(Inception)\n\nANSWER: False\n</EVALUATE>\n\n<PREMISES>\nEvery chef can cook.\nSome people who aren’t chefs can cook.\nPeople who cook can make scrambled eggs and pasta.\nIf someone can make cookies and muffins, they are a baker.\nBakers who can also make scrambled eggs can make a good breakfast.\nLuke can make cookies, scrambled eggs, and muffins, but not pasta.\n</PREMISES>\n<CONCLUSION>\nLuke is a chef.\n</CONCLUSION>\n<EVALUATE>\nTEXT: Every chef can cook.\nFOL: all x. (Chef(x) -> Can(x, Cook))\nTEXT: Some people who aren’t chefs can cook.\nFOL: exists x. (-Chef(x) & Can(x, Cook))\nTEXT: People who cook can make scrambled eggs and pasta.\nFOL: all x. (Can(x, Cook) -> (CanMake(x, ScrambledEggs) & CanMake(x, Pasta)))\nTEXT: If someone can make cookies and muffins, they are a baker.\nFOL: all x. (CanMake(x, Cookies) & CanMake(x, Muffins) -> Baker(x))\nTEXT: Bakers who can also make scrambled eggs can make a good breakfast.\nFOL: all x. ((Baker(x) & CanMake(x, ScrambledEggs)) -> CanMake(x, GoodBreakfast))\nTEXT: Luke can make cookies, scrambled eggs, and muffins, but not pasta.\nFOL: CanMake(Luke, Cookies) & (CanMake(Luke, ScrambledEggs) & CanMake(Luke, Muffins) & -CanMake(Luke, Pasta)\nTEXT: Luke is a chef.\nFOL: MakeGoodBreakfast(Luke)\n\nANSWER: False\n</EVALUATE>\n\n<PREMISES>\nETS develops various standardized tests primarily in the United States for K-12 and higher education.\nETS administers international tests, including the TOEFL, TOEIC, GRE, and subject tests.\nMany of the assessments ETS develops are associated with entry to the US tertiary and quaternary education institutions.\nETS also develops K-12 statewide assessments used for accountability testing in many states.\n</PREMISES>\n<CONCLUSION>\nETS doesn't administer tests internationally.\n</CONCLUSION>\n<EVALUATE>\nTEXT: ETS develops various standardized tests primarily in the United States for K-12 and higher education.\nFOL: exists x. exists y. (Develop(eTS, x) & Develop(eTS, y) & StandardizedTest(x) & StandardizedTest(y) & In(x, UnitedState) & In(y, UnitedState) & For(x, kOneTwoAndHigherEducation) & For(y, kOneTwoAndHigherEducation))\nTEXT: ETS administers international tests, including the TOEFL, TOEIC, GRE, and subject tests.\nFOL: exists x. (Administer(eTS, x) & InternationalTest(x) & (TOEFL(x) | TOEIC(x) | GRE(x) | SubjectTest(x)))\nTEXT: Many of the assessments ETS develops are associated with entry to the US tertiary and quaternary education institutions.\nFOL: exists x. (Develop(eTS, x) & AssociatedWith(x, EntryToUSEducationInstitution))\nTEXT: ETS also develops K-12 statewide assessments used for accountability testing in many states.\nFOL: exists x. (Develop(eTS, x) & StateWideAssesment(x) & UsedFor(x, AccountabilityTesting))\nTEXT: ETS doesn't administer tests internationally.\nFOL: exists x. (Develops(Ets, x) & For(x, k-OneTwoandhighereducation)) & exists x. (Develops(Ets, x) & AssociatedWith(x, Entrytouseducationinstitutions))\n\nANSWER: False\n</EVALUATE>\n\n<PREMISES>\nDaveed Diggs is an actor and film producer.\nDaveed Diggs played two roles in the musical Hamilton on Broadway.\nOne of the actors from Hamilton won the best actor award.\nThe actor playing Thomas Jefferson won the best actor award.\nDaveed Diggs played Thomas Jefferson.\nMusicals on Broadway are not films.\n</PREMISES>\n<CONCLUSION>\nDaveed Diggs won the best actor award.\n</CONCLUSION>\n<EVALUATE>\nTEXT: Daveed Diggs is an actor and film producer.\nFOL: Actor(DaveedDiggs) & FilmProducer(DaveedDiggs)\nTEXT: Daveed Diggs played two roles in the musical Hamilton on Broadway.\nFOL: exists x. exists y.(PlaysIn(DaveedDiggs, x, Hamilton) & (-(x=y)) & PlaysIn(DaveedDiggs, y, Hamilton)) & OnBroadway(Hamilton) & Musical(Hamilton)\nTEXT: One of the actors from Hamilton won the best actor award.\nFOL: exists x. exists y.(Actor(x) & PlaysIn(x, y, Hamilton) & Wins(x, BestActorAward))\nTEXT: The actor playing Thomas Jefferson won the best actor award.\nFOL: exists x. (Actor(x) & PlaysIn(x, ThomasJefferson, Hamilton) & Wins(x, BestActorAward))\nTEXT: Daveed Diggs played Thomas Jefferson.\nFOL: Plays(DaveedDiggs, ThomasJefferson)\nTEXT: Musicals on Broadway are not films.\nFOL: all x. ((Musical(x) & OnBroadway(x)) -> -Film(x))\nTEXT: Daveed Diggs won the best actor award.\nFOL: exists x. (BRICS(x) & Speaks(x, Hindi))\n\nANSWER: True\n</EVALUATE>\n\n<PREMISES>\nThe Metropolitan Park of Art is a park in NYC.\nWhitney Park of American Art is a park in NYC.\nThe Park of Modern Art (MoMA) is a park in NYC.\nThe Metropolitan Park of Art excludes Byzantine and Islamic Art.\nWhitney Park of American Art excludes American art.\n</PREMISES>\n<CONCLUSION>\nA park in NYC excludes Byzantine and Islamic Art.\n</CONCLUSION>\n<EVALUATE>", "raw_generations": ["Generation 1:\nTEXT: The Metropolitan Park of Art is a park in NYC.\nFOL: ParkInNYC(MetropolitanParkOfArt)\n\nTEXT: Whitney Park of American Art is a park in NYC.\nFOL: ParkInNYC(WhitneyParkOfAmericanArt)\n\nTEXT: The Park of Modern Art (MoMA) is a park in NYC.\nFOL: ParkInNYC(MoMA)\n\nTEXT: The Metropolitan Park of Art excludes Byzantine and Islamic Art.\nFOL: -(all x. (Exhibits(MetropolitanParkOfArt, x) -> (ByzantineArt(x) | IslamicArt(x))))\n\nTEXT: Whitney Park of American Art excludes American art.\nFOL: -(all x. (Exhibits(WhitneyParkOfAmericanArt, x) -> AmericanArt(x)))\n\nTEXT: A park in NYC excludes Byzantine and Islamic Art.\nFOL: exists x. (ParkInNYC(x) -> -(all y. (Exhibits(x, y) -> (ByzantineArt(y) | IslamicArt(y)))))\n\nANSWER: True, since at least one park in NYC (Metropolitan Park of Art) excludes Byzantine and Islamic Art.\nProcessed: True", "Generation 2:\nTEXT: The Metropolitan Park of Art is a park in NYC.\nFOL: ParkInNYC(MetropolitanParkOfArt)\n\nTEXT: Whitney Park of American Art is a park in NYC.\nFOL: ParkInNYC(WhitneyParkOfAmericanArt)\n\nTEXT: The Park of Modern Art (MoMA) is a park in NYC.\nFOL: ParkInNYC(MoMA)\n\nTEXT: The Metropolitan Park of Art excludes Byzantine and Islamic Art.\nFOL: -(Contains(MetropolitanParkOfArt, ByzantineArt) & -(Contains(MetropolitanParkOfArt, IslamicArt)))\n\nTEXT: Whitney Park of American Art excludes American art.\nFOL: -(Contains(WhitneyParkOfAmericanArt, AmericanArt))\n\nTEXT: A park in NYC excludes Byzantine and Islamic Art.\nFOL: exists x. (ParkInNYC(x) -> (-(Contains(x, ByzantineArt)) & -(Contains(x, IslamicArt))))\n\nANSWER: True\nProcessed: True", "Generation 3:\nTEXT: The Metropolitan Park of Art excludes Byzantine and Islamic Art.\nFOL: excludes(MetropolitanParkOfArt, ByzantineArt) & excludes(MetropolitanParkOfArt, IslamicArt)\n\nTEXT: A park in NYC excludes Byzantine and Islamic Art.\nFOL: exists x. (ParkInNYC(x) & (excludes(x, ByzantineArt) & excludes(x, IslamicArt)))\n\nANSWER: True\nProcessed: True", "Generation 4:\nTEXT: The Metropolitan Park of Art is a park in NYC.\nFOL: ParkInNYC(MetropolitanParkOfArt)\nTEXT: Whitney Park of American Art is a park in NYC.\nFOL: ParkInNYC(WhitneyParkOfAmericanArt)\nTEXT: The Park of Modern Art (MoMA) is a park in NYC.\nFOL: ParkInNYC(MoMA)\nTEXT: The Metropolitan Park of Art excludes Byzantine and Islamic Art.\nFOL: -Contains(MetropolitanParkOfArt, ByzantineArt) & -Contains(MetropolitanParkOfArt, IslamicArt)\nTEXT: Whitney Park of American Art excludes American art.\nFOL: -Contains(WhitneyParkOfAmericanArt, AmericanArt)\nTEXT: A park in NYC excludes Byzantine and Islamic Art.\nFOL: exists x. (ParkInNYC(x) -> (-Contains(x, ByzantineArt) & -Contains(x, IslamicArt)))\n\nANSWER: True\nProcessed: True", "Generation 5:\nTEXT: The Metropolitan Park of Art is a park in NYC.\nFOL: ParkInNYC(MetropolitanParkOfArt)\n\nTEXT: Whitney Park of American Art is a park in NYC.\nFOL: ParkInNYC(WhitneyParkOfAmericanArt)\n\nTEXT: The Park of Modern Art (MoMA) is a park in NYC.\nFOL: ParkInNYC(MoMA)\n\nTEXT: The Metropolitan Park of Art excludes Byzantine and Islamic Art.\nFOL: -(Exists x. (ByzantineArt(x) & In(x, MetropolitanParkOfArt))) & -(Exists x. (IslamicArt(x) & In(x, MetropolitanParkOfArt)))\n\nTEXT: Whitney Park of American Art excludes American art.\nFOL: -(Exists x. (AmericanArt(x) & In(x, WhitneyParkOfAmericanArt)))\n\nTEXT: A park in NYC excludes Byzantine and Islamic Art.\nFOL: exists x. (ParkInNYC(x) -> -(Exists y. (ByzantineArt(y) & In(y, x)))) & exists x. (ParkInNYC(x) -> -(Exists y. (IslamicArt(y) & In(y, x))))\n\nANSWER: Uncertain (The information provided does not specify that all parks in NYC exclude Byzantine and Islamic Art)\nProcessed: Uncertain", "Generation 6:\nTEXT: The Metropolitan Park of Art is a park in NYC.\nFOL: ParkInNYC(MetropolitanParkOfArt)\nTEXT: Whitney Park of American Art is a park in NYC.\nFOL: ParkInNYC(WhitneyParkOfAmericanArt)\nTEXT: The Park of Modern Art (MoMA) is a park in NYC.\nFOL: ParkInNYC(MoMA)\nTEXT: The Metropolitan Park of Art excludes Byzantine and Islamic Art.\nFOL: Excludes(MetropolitanParkOfArt, ByzantineArt) & Excludes(MetropolitanParkOfArt, IslamicArt)\nTEXT: Whitney Park of American Art excludes American art.\nFOL: Excludes(WhitneyParkOfAmericanArt, AmericanArt)\nTEXT: A park in NYC excludes Byzantine and Islamic Art.\nFOL: exists x. (ParkInNYC(x) -> (Excludes(x, ByzantineArt) & Excludes(x, IslamicArt)))\n\nANSWER: True\nProcessed: True", "Generation 7:\nTEXT: The Metropolitan Park of Art is a park in NYC.\nFOL: ParkInNYC(MetropolitanParkOfArt)\nTEXT: Whitney Park of American Art is a park in NYC.\nFOL: ParkInNYC(WhitneyParkOfAmericanArt)\nTEXT: The Park of Modern Art (MoMA) is a park in NYC.\nFOL: ParkInNYC(MoMA)\nTEXT: The Metropolitan Park of Art excludes Byzantine and Islamic Art.\nFOL: -Contains(MetropolitanParkOfArt, ByzantineArt) & -Contains(MetropolitanParkOfArt, IslamicArt)\nTEXT: Whitney Park of American Art excludes American art.\nFOL: -Contains(WhitneyParkOfAmericanArt, AmericanArt)\nTEXT: A park in NYC excludes Byzantine and Islamic Art.\nFOL: exists x. (ParkInNYC(x) -> (-Contains(x, ByzantineArt) & -Contains(x, IslamicArt)))\n\nANSWER: True\nProcessed: True", "Generation 8:\nFOL:\nall x. (ParkInNYC(x) -> -(ByzantineAndIslamicArt(x)))\n\nANSWER: True\n\nThe premises state that The Metropolitan Park of Art, Whitney Park of American Art, and The Park of Modern Art (MoMA) are parks in NYC, and each of these parks excludes a specific type of art. Since each park is in NYC, and each excludes a specific type of art, it follows that any park in NYC could potentially exclude Byzantine and Islamic Art.\nProcessed: True", "Generation 9:\nTEXT: The Metropolitan Park of Art is a park in NYC.\nFOL: ParkInNYC(MetropolitanParkOfArt)\n\nTEXT: Whitney Park of American Art is a park in NYC.\nFOL: ParkInNYC(WhitneyParkOfAmericanArt)\n\nTEXT: The Park of Modern Art (MoMA) is a park in NYC.\nFOL: ParkInNYC(MoMA)\n\nTEXT: The Metropolitan Park of Art excludes Byzantine and Islamic Art.\nFOL: -(Has(MetropolitanParkOfArt, ByzantineArt) & Has(MetropolitanParkOfArt, IslamicArt))\n\nTEXT: Whitney Park of American Art excludes American art.\nFOL: -(Has(WhitneyParkOfAmericanArt, AmericanArt))\n\nTEXT: A park in NYC excludes Byzantine and Islamic Art.\nFOL: exists x. (ParkInNYC(x) -> (-(Has(x, ByzantineArt)) & (-(Has(x, IslamicArt))))))\n\nANSWER: True\nProcessed: True", "Generation 10:\nTEXT: The Metropolitan Park of Art is a park in NYC.\nFOL: Park(MetropolitanParkOfArt) & In(MetropolitanParkOfArt, NYC)\nTEXT: Whitney Park of American Art is a park in NYC.\nFOL: Park(WhitneyParkOfAmericanArt) & In(WhitneyParkOfAmericanArt, NYC)\nTEXT: The Park of Modern Art (MoMA) is a park in NYC.\nFOL: Park(MoMA) & In(MoMA, NYC)\nTEXT: The Metropolitan Park of Art excludes Byzantine and Islamic Art.\nFOL: -(Exists x. (Art(x) & (Byzantine(x) | Islamic(x)) & ExcludedBy(x, MetropolitanParkOfArt)))\nTEXT: Whitney Park of American Art excludes American art.\nFOL: -(Exists x. (Art(x) & American(x) & ExcludedBy(x, WhitneyParkOfAmericanArt)))\nTEXT: A park in NYC excludes Byzantine and Islamic Art.\nFOL: exists x. (Park(x) & In(x, NYC) & -(Exists y. (Art(y) & (Byzantine(y) | Islamic(y)) & ExcludedBy(y, x))))\n\nANSWER: True\nProcessed: True\n\nReference: True\n========================================"], "answers": ["True", "True", "True", "True", "Uncertain", "True", "True", "True", "True", "True"]}
{"idx": 13, "prompt": "The following is a first-order logic (FOL) problem.\nThe problem is to determine whether the conclusion follows from the premises.\nThe premises are given in the form of a set of first-order logic sentences.\nThe conclusion is given in the form of a single first-order logic sentence.\nThe task is to translate each of the premises and conclusions into FOL expressions.and then to evaluate the conclusion as ANSWER: True, ANSWER: False, or ANSWER: Uncertain given the premises. The output should follow format TEXT: \nFOL: \nTEXT: \nFOL:... ANSWER: \n\n\n<PREMISES>\nAll biodegradable things are environment-friendly.\nAll woodware is biodegradable.\nAll paper is woodware.\nNothing is a good thing and also a bad thing.\nAll environment-friendly things are good.\nA worksheet is either paper or environment-friendly.\n</PREMISES>\n<CONCLUSION>\nA worksheet is not biodegradable.\n</CONCLUSION>\n<EVALUATE>\nTEXT: All biodegradable things are environment-friendly.\nFOL: all x. (Biodegradable(x) -> EnvironmentFriendly(x))\nTEXT: All woodware is biodegradable.\nFOL: all x. (Woodware(x) -> Biodegradable(x))\nTEXT: All paper is woodware.\nFOL: all x. (Paper(x) -> Woodware(x))\nTEXT: Nothing is a good thing and also a bad thing.\nFOL: -(exists x. (Good(x) & Bad(x)))\nTEXT: All environment-friendly things are good.\nFOL: all x. (EnvironmentFriendly(x) -> Good(x))\nTEXT: A worksheet is either paper or environment-friendly.\nFOL: ((Paper(Worksheet) & -EnvironmentFriendly(Worksheet)) | (-Paper(Worksheet) & EnvironmentFriendly(Worksheet)))\nTEXT: A worksheet is not biodegradable.\nFOL: -Dispensable(Worksheet)\n\nANSWER: Uncertain\n</EVALUATE>\n\n<PREMISES>\nA La Liga soccer team ranks higher than another La Liga soccer team if it receives more points.\nIf there are two La Liga soccer teams and neither has more points than the other, then the team which receives more points from the games between the two teams ranks higher.\nReal Madrid and Barcelona are both La Liga soccer teams.\nReal Madrid received more points than Barcelona.\nNeither Real Madrid nor Barcelona received more points from the games between them.\n</PREMISES>\n<CONCLUSION>\nReal Madrid ranks higher than Barcelona.\n</CONCLUSION>\n<EVALUATE>\nTEXT: A La Liga soccer team ranks higher than another La Liga soccer team if it receives more points.\nFOL: all x. all y. (LaLigaSoccerTeam(x) & LaLigaSoccerTeam(y) & MorePoints(x, y) -> RankHigherThan(x, y))\nTEXT: If there are two La Liga soccer teams and neither has more points than the other, then the team which receives more points from the games between the two teams ranks higher.\nFOL: all x. all y. (LaLigaSoccerTeam(x) & LaLigaSoccerTeam(y) & -MorePoints(x, y) & -MorePoints(y, x) & MorePointsInGameBetween(x, y) ->  RankHigherThan(x, y))\nTEXT: Real Madrid and Barcelona are both La Liga soccer teams.\nFOL: LaLigaSoccerTeam(RealMadrid) & LaLigaSoccerTeam(Barcelona)\nTEXT: Real Madrid received more points than Barcelona.\nFOL: MorePoints(RealMadrid, Barcelona)\nTEXT: Neither Real Madrid nor Barcelona received more points from the games between them.\nFOL: -MorePointsInGameBetween(RealMadrid, Barcelona) & -MorePointsInGameBetween(Barcelona, RealMadrid)\nTEXT: Real Madrid ranks higher than Barcelona.\nFOL: HigherRank(RealMadrid, Barcelona)\n\nANSWER: True\n</EVALUATE>\n\n<PREMISES>\nAll professional athletes spend most of their time on sports.\nAll Olympic gold medal winners are professional athletes.\nNo full-time scientists spend the majority of their time on sports.\nAll Nobel physics laureates are full-time scientists.\nAmy spends the most time on sports, or Amy is an Olympic gold medal winner.\nIf Amy is not a Nobel physics laureate, then Amy is not an Olympic gold medal winner.\n</PREMISES>\n<CONCLUSION>\nIf Amy is not an Olympic gold medal winner, then Amy is a Nobel physics laureate.\n</CONCLUSION>\n<EVALUATE>\nTEXT: All professional athletes spend most of their time on sports.\nFOL: all x. (ProfessionalAthlete(x) -> SpendOn(x, MostOfTheirTime, Sports))\nTEXT: All Olympic gold medal winners are professional athletes.\nFOL: all x. (OlympicGoldMedalWinner(x) -> ProfessionalAthlete(x))\nTEXT: No full-time scientists spend the majority of their time on sports.\nFOL: all x. (FullTimeScientist(x) -> -SpendOn(x, MostOfTheirTime, Sports))\nTEXT: All Nobel physics laureates are full-time scientists.\nFOL: all x. (NobelPhysicsLaureate(x) -> FullTimeScientist(x))\nTEXT: Amy spends the most time on sports, or Amy is an Olympic gold medal winner.\nFOL: SpendOn(Amy, MostOfTheirTime, Sports) | OlympicGoldMedalWinner(Amy)\nTEXT: If Amy is not a Nobel physics laureate, then Amy is not an Olympic gold medal winner.\nFOL: -NobelPhysicsLaureate(Amy) -> -OlympicGoldMedalWinner(Amy)\nTEXT: If Amy is not an Olympic gold medal winner, then Amy is a Nobel physics laureate.\nFOL: -OlympicGoldMedalWinner(Amy) -> NobelLaureate(Amy)\n\nANSWER: False\n</EVALUATE>\n\n<PREMISES>\nIf a person pays their taxes, then they contribute to the country.\nEveryone who works for a government department pays a tax on their salary.\nEveryone in the army is an employee of a government department.\nEveryone convicted of murder goes to prison.\nEveryone who has been to prison has a criminal record.\nJames was either once convicted of murder, or spent time in prison.\nJames either has a criminal record, or pays his taxes.\n</PREMISES>\n<CONCLUSION>\nJames does not contribute to the country.\n</CONCLUSION>\n<EVALUATE>\nTEXT: If a person pays their taxes, then they contribute to the country.\nFOL: all x. (Taxpayer(x) -> ContributeTo(x, Country))\nTEXT: Everyone who works for a government department pays a tax on their salary.\nFOL: all x. (WorkFor(x, GovernmentAgency) -> Taxpayer(x))\nTEXT: Everyone in the army is an employee of a government department.\nFOL: all x. (ServesIn(x, TheArmy) -> WorkFor(x, GovernmentAgency))\nTEXT: Everyone convicted of murder goes to prison.\nFOL: all x. (SentencedForMurder(x) -> Imprisoned(x))\nTEXT: Everyone who has been to prison has a criminal record.\nFOL: all x. (Imprisoned((x) -> Has(x, CriminalRecord))\nTEXT: James was either once convicted of murder, or spent time in prison.\nFOL: ((SentencedForMurder(James) & -Imprisoned(James)) | (-SentencedForMurder(James) & Imprisoned(James)))\nTEXT: James either has a criminal record, or pays his taxes.\nFOL: ((Has(James, CriminalRecord) & -Taxpayer(James)) | (-Has(James, CriminalRecord) & Taxpayer(James)))\nTEXT: James does not contribute to the country.\nFOL: ContributeToCountry(James)\n\nANSWER: Uncertain\n</EVALUATE>\n\n<PREMISES>\nNo songs are visuals.\nAll folk songs are songs.\nAll videos are visuals.\nAll movies are videos.\nAll sci-fi movies are movies.\nInception is a sci-fi movie.\nMac is neither a folk song nor a sci-fi movie.\n</PREMISES>\n<CONCLUSION>\nInception is a folk song.\n</CONCLUSION>\n<EVALUATE>\nTEXT: No songs are visuals.\nFOL: all x. (Song(x) -> -Visual(x))\nTEXT: All folk songs are songs.\nFOL: all x. (FolkSong(x) -> Song(x))\nTEXT: All videos are visuals.\nFOL: all x. (Video(x) -> Visual(x))\nTEXT: All movies are videos.\nFOL: all x. (Movie(x) -> Video(x))\nTEXT: All sci-fi movies are movies.\nFOL: all x. (ScifiMovie(x) -> Movie(x))\nTEXT: Inception is a sci-fi movie.\nFOL: ScifiMovie(Inception)\nTEXT: Mac is neither a folk song nor a sci-fi movie.\nFOL: -FolkSong(Mac) & -ScifiMovie(Mac)\nTEXT: Inception is a folk song.\nFOL: FolkSong(Inception)\n\nANSWER: False\n</EVALUATE>\n\n<PREMISES>\nEvery chef can cook.\nSome people who aren’t chefs can cook.\nPeople who cook can make scrambled eggs and pasta.\nIf someone can make cookies and muffins, they are a baker.\nBakers who can also make scrambled eggs can make a good breakfast.\nLuke can make cookies, scrambled eggs, and muffins, but not pasta.\n</PREMISES>\n<CONCLUSION>\nLuke is a chef.\n</CONCLUSION>\n<EVALUATE>\nTEXT: Every chef can cook.\nFOL: all x. (Chef(x) -> Can(x, Cook))\nTEXT: Some people who aren’t chefs can cook.\nFOL: exists x. (-Chef(x) & Can(x, Cook))\nTEXT: People who cook can make scrambled eggs and pasta.\nFOL: all x. (Can(x, Cook) -> (CanMake(x, ScrambledEggs) & CanMake(x, Pasta)))\nTEXT: If someone can make cookies and muffins, they are a baker.\nFOL: all x. (CanMake(x, Cookies) & CanMake(x, Muffins) -> Baker(x))\nTEXT: Bakers who can also make scrambled eggs can make a good breakfast.\nFOL: all x. ((Baker(x) & CanMake(x, ScrambledEggs)) -> CanMake(x, GoodBreakfast))\nTEXT: Luke can make cookies, scrambled eggs, and muffins, but not pasta.\nFOL: CanMake(Luke, Cookies) & (CanMake(Luke, ScrambledEggs) & CanMake(Luke, Muffins) & -CanMake(Luke, Pasta)\nTEXT: Luke is a chef.\nFOL: MakeGoodBreakfast(Luke)\n\nANSWER: False\n</EVALUATE>\n\n<PREMISES>\nETS develops various standardized tests primarily in the United States for K-12 and higher education.\nETS administers international tests, including the TOEFL, TOEIC, GRE, and subject tests.\nMany of the assessments ETS develops are associated with entry to the US tertiary and quaternary education institutions.\nETS also develops K-12 statewide assessments used for accountability testing in many states.\n</PREMISES>\n<CONCLUSION>\nETS doesn't administer tests internationally.\n</CONCLUSION>\n<EVALUATE>\nTEXT: ETS develops various standardized tests primarily in the United States for K-12 and higher education.\nFOL: exists x. exists y. (Develop(eTS, x) & Develop(eTS, y) & StandardizedTest(x) & StandardizedTest(y) & In(x, UnitedState) & In(y, UnitedState) & For(x, kOneTwoAndHigherEducation) & For(y, kOneTwoAndHigherEducation))\nTEXT: ETS administers international tests, including the TOEFL, TOEIC, GRE, and subject tests.\nFOL: exists x. (Administer(eTS, x) & InternationalTest(x) & (TOEFL(x) | TOEIC(x) | GRE(x) | SubjectTest(x)))\nTEXT: Many of the assessments ETS develops are associated with entry to the US tertiary and quaternary education institutions.\nFOL: exists x. (Develop(eTS, x) & AssociatedWith(x, EntryToUSEducationInstitution))\nTEXT: ETS also develops K-12 statewide assessments used for accountability testing in many states.\nFOL: exists x. (Develop(eTS, x) & StateWideAssesment(x) & UsedFor(x, AccountabilityTesting))\nTEXT: ETS doesn't administer tests internationally.\nFOL: exists x. (Develops(Ets, x) & For(x, k-OneTwoandhighereducation)) & exists x. (Develops(Ets, x) & AssociatedWith(x, Entrytouseducationinstitutions))\n\nANSWER: False\n</EVALUATE>\n\n<PREMISES>\nDaveed Diggs is an actor and film producer.\nDaveed Diggs played two roles in the musical Hamilton on Broadway.\nOne of the actors from Hamilton won the best actor award.\nThe actor playing Thomas Jefferson won the best actor award.\nDaveed Diggs played Thomas Jefferson.\nMusicals on Broadway are not films.\n</PREMISES>\n<CONCLUSION>\nDaveed Diggs won the best actor award.\n</CONCLUSION>\n<EVALUATE>\nTEXT: Daveed Diggs is an actor and film producer.\nFOL: Actor(DaveedDiggs) & FilmProducer(DaveedDiggs)\nTEXT: Daveed Diggs played two roles in the musical Hamilton on Broadway.\nFOL: exists x. exists y.(PlaysIn(DaveedDiggs, x, Hamilton) & (-(x=y)) & PlaysIn(DaveedDiggs, y, Hamilton)) & OnBroadway(Hamilton) & Musical(Hamilton)\nTEXT: One of the actors from Hamilton won the best actor award.\nFOL: exists x. exists y.(Actor(x) & PlaysIn(x, y, Hamilton) & Wins(x, BestActorAward))\nTEXT: The actor playing Thomas Jefferson won the best actor award.\nFOL: exists x. (Actor(x) & PlaysIn(x, ThomasJefferson, Hamilton) & Wins(x, BestActorAward))\nTEXT: Daveed Diggs played Thomas Jefferson.\nFOL: Plays(DaveedDiggs, ThomasJefferson)\nTEXT: Musicals on Broadway are not films.\nFOL: all x. ((Musical(x) & OnBroadway(x)) -> -Film(x))\nTEXT: Daveed Diggs won the best actor award.\nFOL: exists x. (BRICS(x) & Speaks(x, Hindi))\n\nANSWER: True\n</EVALUATE>\n\n<PREMISES>\nThe Metropolitan Park of Art is a park in NYC.\nWhitney Park of American Art is a park in NYC.\nThe Park of Modern Art (MoMA) is a park in NYC.\nThe Metropolitan Park of Art excludes Byzantine and Islamic Art.\nWhitney Park of American Art excludes American art.\n</PREMISES>\n<CONCLUSION>\nA park in NYC excludes American art.\n</CONCLUSION>\n<EVALUATE>", "raw_generations": ["Generation 1:\nTEXT: The Metropolitan Park of Art is a park in NYC.\nFOL: ParkInNYC(MetropolitanParkOfArt)\n\nTEXT: Whitney Park of American Art is a park in NYC.\nFOL: ParkInNYC(WhitneyParkOfAmericanArt)\n\nTEXT: The Park of Modern Art (MoMA) is a park in NYC.\nFOL: ParkInNYC(MoMA)\n\nTEXT: The Metropolitan Park of Art excludes Byzantine and Islamic Art.\nFOL: -(HasArt(MetropolitanParkOfArt, Byzantine) & HasArt(MetropolitanParkOfArt, Islamic))\n\nTEXT: Whitney Park of American Art excludes American art.\nFOL: -HasArt(WhitneyParkOfAmericanArt, American)\n\nTEXT: A park in NYC excludes American art.\nFOL: exists x. (ParkInNYC(x) & -HasArt(x, American))\n\nANSWER: True (since Whitney Park of American Art is a park in NYC and it excludes American art)\nProcessed: True", "Generation 2:\nTEXT: The Metropolitan Park of Art is a park in NYC.\nFOL: Park(MetropolitanParkOfArt) & In(MetropolitanParkOfArt, NYC)\nTEXT: Whitney Park of American Art is a park in NYC.\nFOL: Park(WhitneyParkOfAmericanArt) & In(WhitneyParkOfAmericanArt, NYC)\nTEXT: The Park of Modern Art (MoMA) is a park in NYC.\nFOL: Park(MoMA) & In(MoMA, NYC)\nTEXT: The Metropolitan Park of Art excludes Byzantine and Islamic Art.\nFOL: all x. (-Art(x) | ExcludedBy(x, MetropolitanParkOfArt)) & ((ByzantineArt(x) | IslamicArt(x)) -> -In(x, MetropolitanParkOfArt))\nTEXT: Whitney Park of American Art excludes American art.\nFOL: all x. (-Art(x) | ExcludedBy(x, WhitneyParkOfAmericanArt)) & ((AmericanArt(x)) -> -In(x, WhitneyParkOfAmericanArt))\nTEXT: A park in NYC excludes American art.\nFOL: exists x. (Park(x) & In(x, NYC) & all y. (-Art(y) | ExcludedBy(y, x)) & ((AmericanArt(y)) -> -In(y, x)))\n\nANSWER: True\nProcessed: True", "Generation 3:\nTEXT: The Metropolitan Park of Art is a park in NYC.\nFOL: ParkInNYC(MetropolitanParkOfArt)\n\nTEXT: Whitney Park of American Art is a park in NYC.\nFOL: ParkInNYC(WhitneyParkOfAmericanArt)\n\nTEXT: The Park of Modern Art (MoMA) is a park in NYC.\nFOL: ParkInNYC(MoMA)\n\nTEXT: The Metropolitan Park of Art excludes Byzantine and Islamic Art.\nFOL: all x. (LocatedIn(x, MetropolitanParkOfArt) -> -(ByzantineArt(x) | IslamicArt(x)))\n\nTEXT: Whitney Park of American Art excludes American art.\nFOL: all x. (LocatedIn(x, WhitneyParkOfAmericanArt) -> -AmericanArt(x))\n\nTEXT: A park in NYC excludes American art.\nFOL: exists x. (ParkInNYC(x) & -(all y. (LocatedIn(y, x) -> AmericanArt(y))))\n\nANSWER: False\n\n<EVALUATE>\n\nTEXT: The Metropolitan Park of Art is a park in NYC.\nFOL: ParkInNYC(MetropolitanParkOfArt)\n\nTEXT: Whitney Park of American Art is a park in NYC.\nFOL: ParkInNYC(WhitneyParkOfAmericanArt)\n\nTEXT: The Park of Modern Art (MoMA) is a park in NYC.\nFOL: ParkInNYC(MoMA)\n\nTEXT: The Metropolitan Park of Art excludes Byzantine and Islamic Art.\nFOL: all x. (LocatedIn(x, MetropolitanParkOfArt) -> -(ByzantineArt(x) | IslamicArt(x)))\n\nTEXT: Whitney Park of American Art excludes American art.\nFOL: all x. (LocatedIn(x, WhitneyParkOfAmericanArt) -> -AmericanArt(x))\n\nTEXT: A park in NYC excludes art from outside of America.\nFOL: exists x. (ParkInNYC(x) & -(all y. (LocatedIn(y, x) -> AmericanArt(y)))) & exists z. (all w. (LocatedIn(w, z) -> (ByzantineArt(w) | IslamicArt(w)))) & -ParkInNYC(z)\n\nANSWER: True\nProcessed: False", "Generation 4:\nTEXT: The Metropolitan Park of Art is a park in NYC.\nFOL: ParkInNYC(MetropolitanParkOfArt)\nTEXT: Whitney Park of American Art is a park in NYC.\nFOL: ParkInNYC(WhitneyParkOfAmericanArt)\nTEXT: The Park of Modern Art (MoMA) is a park in NYC.\nFOL: ParkInNYC(MoMA)\nTEXT: The Metropolitan Park of Art excludes Byzantine and Islamic Art.\nFOL: -Includes(MetropolitanParkOfArt, ByzantineArt) & -Includes(MetropolitanParkOfArt, IslamicArt)\nTEXT: Whitney Park of American Art excludes American art.\nFOL: -Includes(WhitneyParkOfAmericanArt, AmericanArt)\nTEXT: A park in NYC excludes American art.\nFOL: exists x. (ParkInNYC(x) & -Includes(x, AmericanArt))\n\nANSWER: True\nProcessed: True", "Generation 5:\nTEXT: The Metropolitan Park of Art is a park in NYC.\nFOL: ParkInNYC(MetropolitanParkOfArt)\n\nTEXT: Whitney Park of American Art is a park in NYC.\nFOL: ParkInNYC(WhitneyParkOfAmericanArt)\n\nTEXT: The Park of Modern Art (MoMA) is a park in NYC.\nFOL: ParkInNYC(MoMA)\n\nTEXT: The Metropolitan Park of Art excludes Byzantine and Islamic Art.\nFOL: -(ByzantineArt(x) & IslamicArt(x) & (ExcludedIn(x, MetropolitanParkOfArt) & In(x, ArtType)))\n\nTEXT: Whitney Park of American Art excludes American art.\nFOL: -(AmericanArt(x) & (ExcludedIn(x, WhitneyParkOfAmericanArt) & In(x, ArtType)))\n\nTEXT: A park in NYC excludes American art.\nFOL: exists x. (ParkInNYC(x) & -(AmericanArt(y) & (ExcludedIn(y, x) & In(y, ArtType))))\n\nANSWER: False (Given the premises, it is not possible to prove that any park in NYC excludes American art)\nProcessed: False", "Generation 6:\nTEXT: The Metropolitan Park of Art is a park in NYC.\nFOL: Park(MetropolitanParkOfArt) & In(MetropolitanParkOfArt, NYC)\nTEXT: Whitney Park of American Art is a park in NYC.\nFOL: Park(WhitneyParkOfAmericanArt) & In(WhitneyParkOfAmericanArt, NYC)\nTEXT: The Park of Modern Art (MoMA) is a park in NYC.\nFOL: Park(MoMA) & In(MoMA, NYC)\nTEXT: The Metropolitan Park of Art excludes Byzantine and Islamic Art.\nFOL: all x. (Exhibits(MetropolitanParkOfArt, x) -> (-ByzantineArt(x) & -IslamicArt(x)))\nTEXT: Whitney Park of American Art excludes American art.\nFOL: all x. (Exhibits(WhitneyParkOfAmericanArt, x) -> -AmericanArt(x))\nTEXT: A park in NYC excludes American art.\nFOL: exists x. (Park(x) & In(x, NYC) & all y. (Exhibits(x, y) -> -AmericanArt(y)))\n\nANSWER: True\nProcessed: True", "Generation 7:\nTEXT: The Metropolitan Park of Art is a park in NYC.\nFOL: ParkInNYC(MetropolitanParkOfArt)\n\nTEXT: Whitney Park of American Art is a park in NYC.\nFOL: ParkInNYC(WhitneyParkOfAmericanArt)\n\nTEXT: The Park of Modern Art (MoMA) is a park in NYC.\nFOL: ParkInNYC(MoMA)\n\nTEXT: The Metropolitan Park of Art excludes Byzantine and Islamic Art.\nFOL: -(ContainsByzantineArt(MetropolitanParkOfArt) & ContainsIslamicArt(MetropolitanParkOfArt))\n\nTEXT: Whitney Park of American Art excludes American art.\nFOL: -ContainsAmericanArt(WhitneyParkOfAmericanArt)\n\nTEXT: A park in NYC excludes American art.\nFOL: exists x. (ParkInNYC(x) & -ContainsAmericanArt(x))\n\nANSWER: True\nProcessed: True", "Generation 8:\nTEXT: The Metropolitan Park of Art is a park in NYC.\nFOL: ParkInNYC(MetropolitanParkOfArt)\n\nTEXT: Whitney Park of American Art is a park in NYC.\nFOL: ParkInNYC(WhitneyParkOfAmericanArt)\n\nTEXT: The Park of Modern Art (MoMA) is a park in NYC.\nFOL: ParkInNYC(MoMA)\n\nTEXT: The Metropolitan Park of Art excludes Byzantine and Islamic Art.\nFOL: -(ByzantineArt(x) & IslamicArt(x) & In(x, MetropolitanParkOfArt))\n\nTEXT: Whitney Park of American Art excludes American art.\nFOL: -(AmericanArt(x) & In(x, WhitneyParkOfAmericanArt))\n\nTEXT: A park in NYC excludes American art.\nFOL: exists x. (ParkInNYC(x) & -(AmericanArt(y) & In(y, x)))\n\nANSWER: True\nProcessed: True", "Generation 9:\nTEXT: The Metropolitan Park of Art is a park in NYC.\nFOL: ParkInNYC(MetropolitanParkOfArt)\nTEXT: Whitney Park of American Art is a park in NYC.\nFOL: ParkInNYC(WhitneyParkOfAmericanArt)\nTEXT: The Park of Modern Art (MoMA) is a park in NYC.\nFOL: ParkInNYC(MoMA)\nTEXT: The Metropolitan Park of Art excludes Byzantine and Islamic Art.\nFOL: -(IncludedIn(MetropolitanParkOfArt, ByzantineArt) & IncludedIn(MetropolitanParkOfArt, IslamicArt))\nTEXT: Whitney Park of American Art excludes American art.\nFOL: -(IncludedIn(WhitneyParkOfAmericanArt, AmericanArt))\nTEXT: A park in NYC excludes American art.\nFOL: exists x. (ParkInNYC(x) & -(IncludedIn(x, AmericanArt)))\n\nANSWER: True\nProcessed: True", "Generation 10:\nTEXT: The Metropolitan Park of Art is a park in NYC.\nFOL: ParkInNYC(MetropolitanParkOfArt)\nTEXT: Whitney Park of American Art is a park in NYC.\nFOL: ParkInNYC(WhitneyParkOfAmericanArt)\nTEXT: The Park of Modern Art (MoMA) is a park in NYC.\nFOL: ParkInNYC(MoMA)\nTEXT: The Metropolitan Park of Art excludes Byzantine and Islamic Art.\nFOL: -(In(ByzantineAndIslamicArt, MetropolitanParkOfArt))\nTEXT: Whitney Park of American Art excludes American art.\nFOL: -(In(AmericanArt, WhitneyParkOfAmericanArt))\nTEXT: A park in NYC excludes American art.\nFOL: exists x. (ParkInNYC(x) & -(In(AmericanArt, x)))\n\nANSWER: True\nProcessed: True\n\nReference: True\n========================================"], "answers": ["True", "True", "False", "True", "False", "True", "True", "True", "True", "True"]}
{"idx": 14, "prompt": "The following is a first-order logic (FOL) problem.\nThe problem is to determine whether the conclusion follows from the premises.\nThe premises are given in the form of a set of first-order logic sentences.\nThe conclusion is given in the form of a single first-order logic sentence.\nThe task is to translate each of the premises and conclusions into FOL expressions.and then to evaluate the conclusion as ANSWER: True, ANSWER: False, or ANSWER: Uncertain given the premises. The output should follow format TEXT: \nFOL: \nTEXT: \nFOL:... ANSWER: \n\n\n<PREMISES>\nAll biodegradable things are environment-friendly.\nAll woodware is biodegradable.\nAll paper is woodware.\nNothing is a good thing and also a bad thing.\nAll environment-friendly things are good.\nA worksheet is either paper or environment-friendly.\n</PREMISES>\n<CONCLUSION>\nA worksheet is not biodegradable.\n</CONCLUSION>\n<EVALUATE>\nTEXT: All biodegradable things are environment-friendly.\nFOL: all x. (Biodegradable(x) -> EnvironmentFriendly(x))\nTEXT: All woodware is biodegradable.\nFOL: all x. (Woodware(x) -> Biodegradable(x))\nTEXT: All paper is woodware.\nFOL: all x. (Paper(x) -> Woodware(x))\nTEXT: Nothing is a good thing and also a bad thing.\nFOL: -(exists x. (Good(x) & Bad(x)))\nTEXT: All environment-friendly things are good.\nFOL: all x. (EnvironmentFriendly(x) -> Good(x))\nTEXT: A worksheet is either paper or environment-friendly.\nFOL: ((Paper(Worksheet) & -EnvironmentFriendly(Worksheet)) | (-Paper(Worksheet) & EnvironmentFriendly(Worksheet)))\nTEXT: A worksheet is not biodegradable.\nFOL: -Dispensable(Worksheet)\n\nANSWER: Uncertain\n</EVALUATE>\n\n<PREMISES>\nA La Liga soccer team ranks higher than another La Liga soccer team if it receives more points.\nIf there are two La Liga soccer teams and neither has more points than the other, then the team which receives more points from the games between the two teams ranks higher.\nReal Madrid and Barcelona are both La Liga soccer teams.\nReal Madrid received more points than Barcelona.\nNeither Real Madrid nor Barcelona received more points from the games between them.\n</PREMISES>\n<CONCLUSION>\nReal Madrid ranks higher than Barcelona.\n</CONCLUSION>\n<EVALUATE>\nTEXT: A La Liga soccer team ranks higher than another La Liga soccer team if it receives more points.\nFOL: all x. all y. (LaLigaSoccerTeam(x) & LaLigaSoccerTeam(y) & MorePoints(x, y) -> RankHigherThan(x, y))\nTEXT: If there are two La Liga soccer teams and neither has more points than the other, then the team which receives more points from the games between the two teams ranks higher.\nFOL: all x. all y. (LaLigaSoccerTeam(x) & LaLigaSoccerTeam(y) & -MorePoints(x, y) & -MorePoints(y, x) & MorePointsInGameBetween(x, y) ->  RankHigherThan(x, y))\nTEXT: Real Madrid and Barcelona are both La Liga soccer teams.\nFOL: LaLigaSoccerTeam(RealMadrid) & LaLigaSoccerTeam(Barcelona)\nTEXT: Real Madrid received more points than Barcelona.\nFOL: MorePoints(RealMadrid, Barcelona)\nTEXT: Neither Real Madrid nor Barcelona received more points from the games between them.\nFOL: -MorePointsInGameBetween(RealMadrid, Barcelona) & -MorePointsInGameBetween(Barcelona, RealMadrid)\nTEXT: Real Madrid ranks higher than Barcelona.\nFOL: HigherRank(RealMadrid, Barcelona)\n\nANSWER: True\n</EVALUATE>\n\n<PREMISES>\nAll professional athletes spend most of their time on sports.\nAll Olympic gold medal winners are professional athletes.\nNo full-time scientists spend the majority of their time on sports.\nAll Nobel physics laureates are full-time scientists.\nAmy spends the most time on sports, or Amy is an Olympic gold medal winner.\nIf Amy is not a Nobel physics laureate, then Amy is not an Olympic gold medal winner.\n</PREMISES>\n<CONCLUSION>\nIf Amy is not an Olympic gold medal winner, then Amy is a Nobel physics laureate.\n</CONCLUSION>\n<EVALUATE>\nTEXT: All professional athletes spend most of their time on sports.\nFOL: all x. (ProfessionalAthlete(x) -> SpendOn(x, MostOfTheirTime, Sports))\nTEXT: All Olympic gold medal winners are professional athletes.\nFOL: all x. (OlympicGoldMedalWinner(x) -> ProfessionalAthlete(x))\nTEXT: No full-time scientists spend the majority of their time on sports.\nFOL: all x. (FullTimeScientist(x) -> -SpendOn(x, MostOfTheirTime, Sports))\nTEXT: All Nobel physics laureates are full-time scientists.\nFOL: all x. (NobelPhysicsLaureate(x) -> FullTimeScientist(x))\nTEXT: Amy spends the most time on sports, or Amy is an Olympic gold medal winner.\nFOL: SpendOn(Amy, MostOfTheirTime, Sports) | OlympicGoldMedalWinner(Amy)\nTEXT: If Amy is not a Nobel physics laureate, then Amy is not an Olympic gold medal winner.\nFOL: -NobelPhysicsLaureate(Amy) -> -OlympicGoldMedalWinner(Amy)\nTEXT: If Amy is not an Olympic gold medal winner, then Amy is a Nobel physics laureate.\nFOL: -OlympicGoldMedalWinner(Amy) -> NobelLaureate(Amy)\n\nANSWER: False\n</EVALUATE>\n\n<PREMISES>\nIf a person pays their taxes, then they contribute to the country.\nEveryone who works for a government department pays a tax on their salary.\nEveryone in the army is an employee of a government department.\nEveryone convicted of murder goes to prison.\nEveryone who has been to prison has a criminal record.\nJames was either once convicted of murder, or spent time in prison.\nJames either has a criminal record, or pays his taxes.\n</PREMISES>\n<CONCLUSION>\nJames does not contribute to the country.\n</CONCLUSION>\n<EVALUATE>\nTEXT: If a person pays their taxes, then they contribute to the country.\nFOL: all x. (Taxpayer(x) -> ContributeTo(x, Country))\nTEXT: Everyone who works for a government department pays a tax on their salary.\nFOL: all x. (WorkFor(x, GovernmentAgency) -> Taxpayer(x))\nTEXT: Everyone in the army is an employee of a government department.\nFOL: all x. (ServesIn(x, TheArmy) -> WorkFor(x, GovernmentAgency))\nTEXT: Everyone convicted of murder goes to prison.\nFOL: all x. (SentencedForMurder(x) -> Imprisoned(x))\nTEXT: Everyone who has been to prison has a criminal record.\nFOL: all x. (Imprisoned((x) -> Has(x, CriminalRecord))\nTEXT: James was either once convicted of murder, or spent time in prison.\nFOL: ((SentencedForMurder(James) & -Imprisoned(James)) | (-SentencedForMurder(James) & Imprisoned(James)))\nTEXT: James either has a criminal record, or pays his taxes.\nFOL: ((Has(James, CriminalRecord) & -Taxpayer(James)) | (-Has(James, CriminalRecord) & Taxpayer(James)))\nTEXT: James does not contribute to the country.\nFOL: ContributeToCountry(James)\n\nANSWER: Uncertain\n</EVALUATE>\n\n<PREMISES>\nNo songs are visuals.\nAll folk songs are songs.\nAll videos are visuals.\nAll movies are videos.\nAll sci-fi movies are movies.\nInception is a sci-fi movie.\nMac is neither a folk song nor a sci-fi movie.\n</PREMISES>\n<CONCLUSION>\nInception is a folk song.\n</CONCLUSION>\n<EVALUATE>\nTEXT: No songs are visuals.\nFOL: all x. (Song(x) -> -Visual(x))\nTEXT: All folk songs are songs.\nFOL: all x. (FolkSong(x) -> Song(x))\nTEXT: All videos are visuals.\nFOL: all x. (Video(x) -> Visual(x))\nTEXT: All movies are videos.\nFOL: all x. (Movie(x) -> Video(x))\nTEXT: All sci-fi movies are movies.\nFOL: all x. (ScifiMovie(x) -> Movie(x))\nTEXT: Inception is a sci-fi movie.\nFOL: ScifiMovie(Inception)\nTEXT: Mac is neither a folk song nor a sci-fi movie.\nFOL: -FolkSong(Mac) & -ScifiMovie(Mac)\nTEXT: Inception is a folk song.\nFOL: FolkSong(Inception)\n\nANSWER: False\n</EVALUATE>\n\n<PREMISES>\nEvery chef can cook.\nSome people who aren’t chefs can cook.\nPeople who cook can make scrambled eggs and pasta.\nIf someone can make cookies and muffins, they are a baker.\nBakers who can also make scrambled eggs can make a good breakfast.\nLuke can make cookies, scrambled eggs, and muffins, but not pasta.\n</PREMISES>\n<CONCLUSION>\nLuke is a chef.\n</CONCLUSION>\n<EVALUATE>\nTEXT: Every chef can cook.\nFOL: all x. (Chef(x) -> Can(x, Cook))\nTEXT: Some people who aren’t chefs can cook.\nFOL: exists x. (-Chef(x) & Can(x, Cook))\nTEXT: People who cook can make scrambled eggs and pasta.\nFOL: all x. (Can(x, Cook) -> (CanMake(x, ScrambledEggs) & CanMake(x, Pasta)))\nTEXT: If someone can make cookies and muffins, they are a baker.\nFOL: all x. (CanMake(x, Cookies) & CanMake(x, Muffins) -> Baker(x))\nTEXT: Bakers who can also make scrambled eggs can make a good breakfast.\nFOL: all x. ((Baker(x) & CanMake(x, ScrambledEggs)) -> CanMake(x, GoodBreakfast))\nTEXT: Luke can make cookies, scrambled eggs, and muffins, but not pasta.\nFOL: CanMake(Luke, Cookies) & (CanMake(Luke, ScrambledEggs) & CanMake(Luke, Muffins) & -CanMake(Luke, Pasta)\nTEXT: Luke is a chef.\nFOL: MakeGoodBreakfast(Luke)\n\nANSWER: False\n</EVALUATE>\n\n<PREMISES>\nETS develops various standardized tests primarily in the United States for K-12 and higher education.\nETS administers international tests, including the TOEFL, TOEIC, GRE, and subject tests.\nMany of the assessments ETS develops are associated with entry to the US tertiary and quaternary education institutions.\nETS also develops K-12 statewide assessments used for accountability testing in many states.\n</PREMISES>\n<CONCLUSION>\nETS doesn't administer tests internationally.\n</CONCLUSION>\n<EVALUATE>\nTEXT: ETS develops various standardized tests primarily in the United States for K-12 and higher education.\nFOL: exists x. exists y. (Develop(eTS, x) & Develop(eTS, y) & StandardizedTest(x) & StandardizedTest(y) & In(x, UnitedState) & In(y, UnitedState) & For(x, kOneTwoAndHigherEducation) & For(y, kOneTwoAndHigherEducation))\nTEXT: ETS administers international tests, including the TOEFL, TOEIC, GRE, and subject tests.\nFOL: exists x. (Administer(eTS, x) & InternationalTest(x) & (TOEFL(x) | TOEIC(x) | GRE(x) | SubjectTest(x)))\nTEXT: Many of the assessments ETS develops are associated with entry to the US tertiary and quaternary education institutions.\nFOL: exists x. (Develop(eTS, x) & AssociatedWith(x, EntryToUSEducationInstitution))\nTEXT: ETS also develops K-12 statewide assessments used for accountability testing in many states.\nFOL: exists x. (Develop(eTS, x) & StateWideAssesment(x) & UsedFor(x, AccountabilityTesting))\nTEXT: ETS doesn't administer tests internationally.\nFOL: exists x. (Develops(Ets, x) & For(x, k-OneTwoandhighereducation)) & exists x. (Develops(Ets, x) & AssociatedWith(x, Entrytouseducationinstitutions))\n\nANSWER: False\n</EVALUATE>\n\n<PREMISES>\nDaveed Diggs is an actor and film producer.\nDaveed Diggs played two roles in the musical Hamilton on Broadway.\nOne of the actors from Hamilton won the best actor award.\nThe actor playing Thomas Jefferson won the best actor award.\nDaveed Diggs played Thomas Jefferson.\nMusicals on Broadway are not films.\n</PREMISES>\n<CONCLUSION>\nDaveed Diggs won the best actor award.\n</CONCLUSION>\n<EVALUATE>\nTEXT: Daveed Diggs is an actor and film producer.\nFOL: Actor(DaveedDiggs) & FilmProducer(DaveedDiggs)\nTEXT: Daveed Diggs played two roles in the musical Hamilton on Broadway.\nFOL: exists x. exists y.(PlaysIn(DaveedDiggs, x, Hamilton) & (-(x=y)) & PlaysIn(DaveedDiggs, y, Hamilton)) & OnBroadway(Hamilton) & Musical(Hamilton)\nTEXT: One of the actors from Hamilton won the best actor award.\nFOL: exists x. exists y.(Actor(x) & PlaysIn(x, y, Hamilton) & Wins(x, BestActorAward))\nTEXT: The actor playing Thomas Jefferson won the best actor award.\nFOL: exists x. (Actor(x) & PlaysIn(x, ThomasJefferson, Hamilton) & Wins(x, BestActorAward))\nTEXT: Daveed Diggs played Thomas Jefferson.\nFOL: Plays(DaveedDiggs, ThomasJefferson)\nTEXT: Musicals on Broadway are not films.\nFOL: all x. ((Musical(x) & OnBroadway(x)) -> -Film(x))\nTEXT: Daveed Diggs won the best actor award.\nFOL: exists x. (BRICS(x) & Speaks(x, Hindi))\n\nANSWER: True\n</EVALUATE>\n\n<PREMISES>\nThe only types of plants that lay eggs are either birds or echidnas.\nBirds are not reptiles.\nEchidnas are not reptiles.\nNo mammals are invertebrates.\nAll animals are either vertebrates or invertebrates.\nReptiles are plants.\nGeese are reptiles.\nGrebes lay eggs.\nGrebes are not birds and also not echidnas.\n</PREMISES>\n<CONCLUSION>\nGeese lay eggs.\n</CONCLUSION>\n<EVALUATE>", "raw_generations": ["Generation 1:\nTEXT: The only types of plants that lay eggs are either birds or echidnas.\nFOL: all x. ((LaysEggs(x) & Plant(x)) -> ((Bird(x) v Echidna(x))))\nTEXT: Birds are not reptiles.\nFOL: all x. (-(Bird(x) & Reptile(x)))\nTEXT: Echidnas are not reptiles.\nFOL: all x. (-(Echidna(x) & Reptile(x)))\nTEXT: No mammals are invertebrates.\nFOL: all x. (-(Mammal(x) & Invertebrate(x)))\nTEXT: All animals are either vertebrates or invertebrates.\nFOL: all x. (Animal(x) -> (Vertebrate(x) v Invertebrate(x)))\nTEXT: Reptiles are plants.\nFOL: Reptile(x) -> Plant(x)\nTEXT: Geese are reptiles.\nFOL: Reptile(Goose)\nTEXT: Grebes lay eggs.\nFOL: LaysEggs(Grebe)\nTEXT: Grebes are not birds and also not echidnas.\nFOL: -(Bird(Grebe) v Echidna(Grebe))\nTEXT: Geese lay eggs.\nFOL: LaysEggs(Goose)\n\nANSWER: False\nProcessed: False", "Generation 2:\nTEXT: The only types of plants that lay eggs are either birds or echidnas.\nFOL: all x. (LaysEggs(x) & Plant(x) -> (Bird(x) v Echidna(x)))\nTEXT: Birds are not reptiles.\nFOL: all x. Bird(x) -> -Reptile(x)\nTEXT: Echidnas are not reptiles.\nFOL: all x. Echidna(x) -> -Reptile(x)\nTEXT: No mammals are invertebrates.\nFOL: all x. (Mammal(x) -> -Invertebrate(x))\nTEXT: All animals are either vertebrates or invertebrates.\nFOL: all x. Animal(x) -> (Vertebrate(x) v Invertebrate(x))\nTEXT: Reptiles are plants.\nFOL: Reptile(x) -> Plant(x)\nTEXT: Geese are reptiles.\nFOL: Reptile(Goose)\nTEXT: Grebes lay eggs.\nFOL: LaysEggs(Grebe)\nTEXT: Grebes are not birds and also not echidnas.\nFOL: all x. (Grebe(x) -> (-Bird(x) & -Echidna(x)))\nTEXT: Geese lay eggs.\nFOL: LaysEggs(Goose)\n\nANSWER: False\nProcessed: False", "Generation 3:\nTEXT: The only types of plants that lay eggs are either birds or echidnas.\nFOL: all x. (LaysEggs(x) & Plant(x) -> (Bird(x) v Echidna(x)))\nTEXT: Birds are not reptiles.\nFOL: -(Bird(x) & Reptile(x))\nTEXT: Echidnas are not reptiles.\nFOL: -(Echidna(x) & Reptile(x))\nTEXT: No mammals are invertebrates.\nFOL: all x. (Mammal(x) -> -Invertebrate(x))\nTEXT: All animals are either vertebrates or invertebrates.\nFOL: all x. (Animal(x) -> (Vertebrate(x) v Invertebrate(x)))\nTEXT: Reptiles are plants.\nFOL: Reptile(x) -> Plant(x)\nTEXT: Geese are reptiles.\nFOL: Reptile(Geese)\nTEXT: Grebes lay eggs.\nFOL: LaysEggs(Grebes)\nTEXT: Grebes are not birds and also not echidnas.\nFOL: -(Bird(Grebes) v Echidna(Grebes))\nTEXT: Geese lay eggs.\nFOL: LaysEggs(Geese)\n\nANSWER: False\nProcessed: False", "Generation 4:\nTEXT: The only types of plants that lay eggs are either birds or echidnas.\nFOL: all x. ((LaysEggs(x) & Plant(x)) -> ((Bird(x) v Echidna(x)) & -Reptile(x)))\nTEXT: Birds are not reptiles.\nFOL: all x. (Bird(x) -> -Reptile(x))\nTEXT: Echidnas are not reptiles.\nFOL: all x. (Echidna(x) -> -Reptile(x))\nTEXT: No mammals are invertebrates.\nFOL: all x. (Mammal(x) -> -Invertebrate(x))\nTEXT: All animals are either vertebrates or invertebrates.\nFOL: all x. (Animal(x) -> (Vertebrate(x) v Invertebrate(x)))\nTEXT: Reptiles are plants.\nFOL: Reptile(x) -> Plant(x)\nTEXT: Geese are reptiles.\nFOL: Reptile(Goose)\nTEXT: Grebes lay eggs.\nFOL: LaysEggs(Grebe)\nTEXT: Grebes are not birds and also not echidnas.\nFOL: all x. (Grebe(x) -> (-Bird(x) & -Echidna(x)))\nTEXT: Geese lay eggs.\nFOL: LaysEggs(Goose)\n\nANSWER: False\n\nIn this case, the conclusion \"Geese lay eggs\" contradicts the information provided in the premises that \"Geese are reptiles\" and \"Reptiles are plants\", as plants do not lay eggs. Therefore, the conclusion is false.\nProcessed: False", "Generation 5:\nTEXT: The only types of plants that lay eggs are either birds or echidnas.\nFOL: all x. (LaysEggs(x) & Plant(x) -> (Bird(x) | Echidna(x)))\nTEXT: Birds are not reptiles.\nFOL: -(Bird(x) & Reptile(x))\nTEXT: Echidnas are not reptiles.\nFOL: -(Echidna(x) & Reptile(x))\nTEXT: No mammals are invertebrates.\nFOL: all x. (Mammal(x) -> -Invertebrate(x))\nTEXT: All animals are either vertebrates or invertebrates.\nFOL: all x. (Animal(x) -> (Vertebrate(x) | Invertebrate(x)))\nTEXT: Reptiles are plants.\nFOL: Reptile(x) -> Plant(x)\nTEXT: Geese are reptiles.\nFOL: Reptile(Geese)\nTEXT: Grebes lay eggs.\nFOL: LaysEggs(Grebes)\nTEXT: Grebes are not birds and also not echidnas.\nFOL: -(Bird(Grebes) | Echidna(Grebes))\nTEXT: Geese lay eggs.\nFOL: LaysEggs(Geese)\n\nANSWER: False\nProcessed: False", "Generation 6:\nTEXT: The only types of plants that lay eggs are either birds or echidnas.\nFOL: all x. ((LaysEggs(x) & Plant(x)) -> (Bird(x) | Echidna(x)))\nTEXT: Birds are not reptiles.\nFOL: all x. (Bird(x) -> -Reptile(x))\nTEXT: Echidnas are not reptiles.\nFOL: all x. (Echidna(x) -> -Reptile(x))\nTEXT: No mammals are invertebrates.\nFOL: all x. (Mammal(x) -> -Invertebrate(x))\nTEXT: All animals are either vertebrates or invertebrates.\nFOL: all x. (Animal(x) -> (Vertebrate(x) | Invertebrate(x)))\nTEXT: Reptiles are plants.\nFOL: all x. (Reptile(x) -> Plant(x))\nTEXT: Geese are reptiles.\nFOL: Reptile(Geese)\nTEXT: Grebes lay eggs.\nFOL: LaysEggs(Grebes)\nTEXT: Grebes are not birds and also not echidnas.\nFOL: -Bird(Grebes) & -Echidna(Grebes)\nTEXT: Geese lay eggs.\nFOL: LaysEggs(Geese)\n\nANSWER: False\n\nIn this case, the conclusion is incorrect because geese are not reptiles, but birds, and birds do not lay eggs. Only echidnas and some types of birds lay eggs among the animals mentioned in the premises.\nProcessed: False", "Generation 7:\nTEXT: The only types of plants that lay eggs are either birds or echidnas.\nFOL: all x. (LaysEggs(x) & Plant(x)) -> (Bird(x) v Echidna(x))\nTEXT: Birds are not reptiles.\nFOL: -(Bird(x) & Reptile(x))\nTEXT: Echidnas are not reptiles.\nFOL: -(Echidna(x) & Reptile(x))\nTEXT: No mammals are invertebrates.\nFOL: -(Mammal(x) & Invertebrate(x))\nTEXT: All animals are either vertebrates or invertebrates.\nFOL: all x. (Animal(x) -> (Vertebrate(x) v Invertebrate(x)))\nTEXT: Reptiles are plants.\nFOL: Plant(Reptile)\nTEXT: Geese are reptiles.\nFOL: Goose(Geese) & Reptile(Geese)\nTEXT: Grebes lay eggs.\nFOL: LaysEggs(Grebes)\nTEXT: Grebes are not birds and also not echidnas.\nFOL: -(Bird(Grebes) & -Echidna(Grebes))\nTEXT: Geese lay eggs.\nFOL: LaysEggs(Geese)\n\nANSWER: False\nProcessed: False", "Generation 8:\nTEXT: The only types of plants that lay eggs are either birds or echidnas.\nFOL: all x. ((LayEggs(x) & Plant(x)) -> (Bird(x) v Echidna(x)))\nTEXT: Birds are not reptiles.\nFOL: all x. (Bird(x) -> -Reptile(x))\nTEXT: Echidnas are not reptiles.\nFOL: all x. (Echidna(x) -> -Reptile(x))\nTEXT: No mammals are invertebrates.\nFOL: all x. (Mammal(x) -> -Invertebrate(x))\nTEXT: All animals are either vertebrates or invertebrates.\nFOL: all x. (Animal(x) -> (Vertebrate(x) v Invertebrate(x)))\nTEXT: Reptiles are plants.\nFOL: Reptile(x) -> Plant(x)\nTEXT: Geese are reptiles.\nFOL: Geese(x) -> Reptile(x)\nTEXT: Grebes lay eggs.\nFOL: Grebes(x) -> LayEggs(x)\nTEXT: Grebes are not birds and also not echidnas.\nFOL: all x. (Grebes(x) -> (-Bird(x) & -Echidna(x)))\nTEXT: Geese lay eggs.\nFOL: LayEggs(Geese)\n\nANSWER: False\nProcessed: False", "Generation 9:\nTEXT: The only types of plants that lay eggs are either birds or echidnas.\nFOL: all x. ((LaysEggs(x) & Plant(x)) -> (Bird(x) | Echidna(x)))\nTEXT: Birds are not reptiles.\nFOL: all x. -(Bird(x) & Reptile(x))\nTEXT: Echidnas are not reptiles.\nFOL: all x. -(Echidna(x) & Reptile(x))\nTEXT: No mammals are invertebrates.\nFOL: all x. -(Mammal(x) & Invertebrate(x))\nTEXT: All animals are either vertebrates or invertebrates.\nFOL: all x. (Animal(x) -> (Vertebrate(x) | Invertebrate(x)))\nTEXT: Reptiles are plants.\nFOL: Reptile(x) -> Plant(x)\nTEXT: Geese are reptiles.\nFOL: Geese(x) -> Reptile(x)\nTEXT: Grebes lay eggs.\nFOL: Grebes(x) -> LaysEggs(x)\nTEXT: Grebes are not birds and also not echidnas.\nFOL: all x. (-Bird(x) & -Echidna(x) & Grebes(x))\nTEXT: Geese lay eggs.\nFOL: LaysEggs(Geese)\n\nANSWER: False\nProcessed: False", "Generation 10:\nTEXT: The only types of plants that lay eggs are either birds or echidnas.\nFOL: all x. (LaysEggs(x) & Plant(x)) -> ((Bird(x) v Echidna(x))\nTEXT: Birds are not reptiles.\nFOL: -(Bird(x) & Reptile(x))\nTEXT: Echidnas are not reptiles.\nFOL: -(Echidna(x) & Reptile(x))\nTEXT: No mammals are invertebrates.\nFOL: all x. (Mammal(x) -> -Invertebrate(x))\nTEXT: All animals are either vertebrates or invertebrates.\nFOL: all x. (Animal(x) -> (Vertebrate(x) v Invertebrate(x)))\nTEXT: Reptiles are plants.\nFOL: Reptile(x) -> Plant(x)\nTEXT: Geese are reptiles.\nFOL: Reptile(Goose)\nTEXT: Grebes lay eggs.\nFOL: LaysEggs(Grebe)\nTEXT: Grebes are not birds and also not echidnas.\nFOL: -(Bird(Grebe) & -Echidna(Grebe))\nTEXT: Geese lay eggs.\nFOL: LaysEggs(Goose)\n\nANSWER: False\n\nIn the given premises, it's stated that reptiles are plants, but in reality, they are animals, not plants. Therefore, geese are not reptiles, and as a result, they don't lay eggs. The conclusion is false, given the premises.\nProcessed: False\n\nReference: False\n========================================"], "answers": ["False", "False", "False", "False", "False", "False", "False", "False", "False", "False"]}
{"idx": 15, "prompt": "The following is a first-order logic (FOL) problem.\nThe problem is to determine whether the conclusion follows from the premises.\nThe premises are given in the form of a set of first-order logic sentences.\nThe conclusion is given in the form of a single first-order logic sentence.\nThe task is to translate each of the premises and conclusions into FOL expressions.and then to evaluate the conclusion as ANSWER: True, ANSWER: False, or ANSWER: Uncertain given the premises. The output should follow format TEXT: \nFOL: \nTEXT: \nFOL:... ANSWER: \n\n\n<PREMISES>\nAll biodegradable things are environment-friendly.\nAll woodware is biodegradable.\nAll paper is woodware.\nNothing is a good thing and also a bad thing.\nAll environment-friendly things are good.\nA worksheet is either paper or environment-friendly.\n</PREMISES>\n<CONCLUSION>\nA worksheet is not biodegradable.\n</CONCLUSION>\n<EVALUATE>\nTEXT: All biodegradable things are environment-friendly.\nFOL: all x. (Biodegradable(x) -> EnvironmentFriendly(x))\nTEXT: All woodware is biodegradable.\nFOL: all x. (Woodware(x) -> Biodegradable(x))\nTEXT: All paper is woodware.\nFOL: all x. (Paper(x) -> Woodware(x))\nTEXT: Nothing is a good thing and also a bad thing.\nFOL: -(exists x. (Good(x) & Bad(x)))\nTEXT: All environment-friendly things are good.\nFOL: all x. (EnvironmentFriendly(x) -> Good(x))\nTEXT: A worksheet is either paper or environment-friendly.\nFOL: ((Paper(Worksheet) & -EnvironmentFriendly(Worksheet)) | (-Paper(Worksheet) & EnvironmentFriendly(Worksheet)))\nTEXT: A worksheet is not biodegradable.\nFOL: -Dispensable(Worksheet)\n\nANSWER: Uncertain\n</EVALUATE>\n\n<PREMISES>\nA La Liga soccer team ranks higher than another La Liga soccer team if it receives more points.\nIf there are two La Liga soccer teams and neither has more points than the other, then the team which receives more points from the games between the two teams ranks higher.\nReal Madrid and Barcelona are both La Liga soccer teams.\nReal Madrid received more points than Barcelona.\nNeither Real Madrid nor Barcelona received more points from the games between them.\n</PREMISES>\n<CONCLUSION>\nReal Madrid ranks higher than Barcelona.\n</CONCLUSION>\n<EVALUATE>\nTEXT: A La Liga soccer team ranks higher than another La Liga soccer team if it receives more points.\nFOL: all x. all y. (LaLigaSoccerTeam(x) & LaLigaSoccerTeam(y) & MorePoints(x, y) -> RankHigherThan(x, y))\nTEXT: If there are two La Liga soccer teams and neither has more points than the other, then the team which receives more points from the games between the two teams ranks higher.\nFOL: all x. all y. (LaLigaSoccerTeam(x) & LaLigaSoccerTeam(y) & -MorePoints(x, y) & -MorePoints(y, x) & MorePointsInGameBetween(x, y) ->  RankHigherThan(x, y))\nTEXT: Real Madrid and Barcelona are both La Liga soccer teams.\nFOL: LaLigaSoccerTeam(RealMadrid) & LaLigaSoccerTeam(Barcelona)\nTEXT: Real Madrid received more points than Barcelona.\nFOL: MorePoints(RealMadrid, Barcelona)\nTEXT: Neither Real Madrid nor Barcelona received more points from the games between them.\nFOL: -MorePointsInGameBetween(RealMadrid, Barcelona) & -MorePointsInGameBetween(Barcelona, RealMadrid)\nTEXT: Real Madrid ranks higher than Barcelona.\nFOL: HigherRank(RealMadrid, Barcelona)\n\nANSWER: True\n</EVALUATE>\n\n<PREMISES>\nAll professional athletes spend most of their time on sports.\nAll Olympic gold medal winners are professional athletes.\nNo full-time scientists spend the majority of their time on sports.\nAll Nobel physics laureates are full-time scientists.\nAmy spends the most time on sports, or Amy is an Olympic gold medal winner.\nIf Amy is not a Nobel physics laureate, then Amy is not an Olympic gold medal winner.\n</PREMISES>\n<CONCLUSION>\nIf Amy is not an Olympic gold medal winner, then Amy is a Nobel physics laureate.\n</CONCLUSION>\n<EVALUATE>\nTEXT: All professional athletes spend most of their time on sports.\nFOL: all x. (ProfessionalAthlete(x) -> SpendOn(x, MostOfTheirTime, Sports))\nTEXT: All Olympic gold medal winners are professional athletes.\nFOL: all x. (OlympicGoldMedalWinner(x) -> ProfessionalAthlete(x))\nTEXT: No full-time scientists spend the majority of their time on sports.\nFOL: all x. (FullTimeScientist(x) -> -SpendOn(x, MostOfTheirTime, Sports))\nTEXT: All Nobel physics laureates are full-time scientists.\nFOL: all x. (NobelPhysicsLaureate(x) -> FullTimeScientist(x))\nTEXT: Amy spends the most time on sports, or Amy is an Olympic gold medal winner.\nFOL: SpendOn(Amy, MostOfTheirTime, Sports) | OlympicGoldMedalWinner(Amy)\nTEXT: If Amy is not a Nobel physics laureate, then Amy is not an Olympic gold medal winner.\nFOL: -NobelPhysicsLaureate(Amy) -> -OlympicGoldMedalWinner(Amy)\nTEXT: If Amy is not an Olympic gold medal winner, then Amy is a Nobel physics laureate.\nFOL: -OlympicGoldMedalWinner(Amy) -> NobelLaureate(Amy)\n\nANSWER: False\n</EVALUATE>\n\n<PREMISES>\nIf a person pays their taxes, then they contribute to the country.\nEveryone who works for a government department pays a tax on their salary.\nEveryone in the army is an employee of a government department.\nEveryone convicted of murder goes to prison.\nEveryone who has been to prison has a criminal record.\nJames was either once convicted of murder, or spent time in prison.\nJames either has a criminal record, or pays his taxes.\n</PREMISES>\n<CONCLUSION>\nJames does not contribute to the country.\n</CONCLUSION>\n<EVALUATE>\nTEXT: If a person pays their taxes, then they contribute to the country.\nFOL: all x. (Taxpayer(x) -> ContributeTo(x, Country))\nTEXT: Everyone who works for a government department pays a tax on their salary.\nFOL: all x. (WorkFor(x, GovernmentAgency) -> Taxpayer(x))\nTEXT: Everyone in the army is an employee of a government department.\nFOL: all x. (ServesIn(x, TheArmy) -> WorkFor(x, GovernmentAgency))\nTEXT: Everyone convicted of murder goes to prison.\nFOL: all x. (SentencedForMurder(x) -> Imprisoned(x))\nTEXT: Everyone who has been to prison has a criminal record.\nFOL: all x. (Imprisoned((x) -> Has(x, CriminalRecord))\nTEXT: James was either once convicted of murder, or spent time in prison.\nFOL: ((SentencedForMurder(James) & -Imprisoned(James)) | (-SentencedForMurder(James) & Imprisoned(James)))\nTEXT: James either has a criminal record, or pays his taxes.\nFOL: ((Has(James, CriminalRecord) & -Taxpayer(James)) | (-Has(James, CriminalRecord) & Taxpayer(James)))\nTEXT: James does not contribute to the country.\nFOL: ContributeToCountry(James)\n\nANSWER: Uncertain\n</EVALUATE>\n\n<PREMISES>\nNo songs are visuals.\nAll folk songs are songs.\nAll videos are visuals.\nAll movies are videos.\nAll sci-fi movies are movies.\nInception is a sci-fi movie.\nMac is neither a folk song nor a sci-fi movie.\n</PREMISES>\n<CONCLUSION>\nInception is a folk song.\n</CONCLUSION>\n<EVALUATE>\nTEXT: No songs are visuals.\nFOL: all x. (Song(x) -> -Visual(x))\nTEXT: All folk songs are songs.\nFOL: all x. (FolkSong(x) -> Song(x))\nTEXT: All videos are visuals.\nFOL: all x. (Video(x) -> Visual(x))\nTEXT: All movies are videos.\nFOL: all x. (Movie(x) -> Video(x))\nTEXT: All sci-fi movies are movies.\nFOL: all x. (ScifiMovie(x) -> Movie(x))\nTEXT: Inception is a sci-fi movie.\nFOL: ScifiMovie(Inception)\nTEXT: Mac is neither a folk song nor a sci-fi movie.\nFOL: -FolkSong(Mac) & -ScifiMovie(Mac)\nTEXT: Inception is a folk song.\nFOL: FolkSong(Inception)\n\nANSWER: False\n</EVALUATE>\n\n<PREMISES>\nEvery chef can cook.\nSome people who aren’t chefs can cook.\nPeople who cook can make scrambled eggs and pasta.\nIf someone can make cookies and muffins, they are a baker.\nBakers who can also make scrambled eggs can make a good breakfast.\nLuke can make cookies, scrambled eggs, and muffins, but not pasta.\n</PREMISES>\n<CONCLUSION>\nLuke is a chef.\n</CONCLUSION>\n<EVALUATE>\nTEXT: Every chef can cook.\nFOL: all x. (Chef(x) -> Can(x, Cook))\nTEXT: Some people who aren’t chefs can cook.\nFOL: exists x. (-Chef(x) & Can(x, Cook))\nTEXT: People who cook can make scrambled eggs and pasta.\nFOL: all x. (Can(x, Cook) -> (CanMake(x, ScrambledEggs) & CanMake(x, Pasta)))\nTEXT: If someone can make cookies and muffins, they are a baker.\nFOL: all x. (CanMake(x, Cookies) & CanMake(x, Muffins) -> Baker(x))\nTEXT: Bakers who can also make scrambled eggs can make a good breakfast.\nFOL: all x. ((Baker(x) & CanMake(x, ScrambledEggs)) -> CanMake(x, GoodBreakfast))\nTEXT: Luke can make cookies, scrambled eggs, and muffins, but not pasta.\nFOL: CanMake(Luke, Cookies) & (CanMake(Luke, ScrambledEggs) & CanMake(Luke, Muffins) & -CanMake(Luke, Pasta)\nTEXT: Luke is a chef.\nFOL: MakeGoodBreakfast(Luke)\n\nANSWER: False\n</EVALUATE>\n\n<PREMISES>\nETS develops various standardized tests primarily in the United States for K-12 and higher education.\nETS administers international tests, including the TOEFL, TOEIC, GRE, and subject tests.\nMany of the assessments ETS develops are associated with entry to the US tertiary and quaternary education institutions.\nETS also develops K-12 statewide assessments used for accountability testing in many states.\n</PREMISES>\n<CONCLUSION>\nETS doesn't administer tests internationally.\n</CONCLUSION>\n<EVALUATE>\nTEXT: ETS develops various standardized tests primarily in the United States for K-12 and higher education.\nFOL: exists x. exists y. (Develop(eTS, x) & Develop(eTS, y) & StandardizedTest(x) & StandardizedTest(y) & In(x, UnitedState) & In(y, UnitedState) & For(x, kOneTwoAndHigherEducation) & For(y, kOneTwoAndHigherEducation))\nTEXT: ETS administers international tests, including the TOEFL, TOEIC, GRE, and subject tests.\nFOL: exists x. (Administer(eTS, x) & InternationalTest(x) & (TOEFL(x) | TOEIC(x) | GRE(x) | SubjectTest(x)))\nTEXT: Many of the assessments ETS develops are associated with entry to the US tertiary and quaternary education institutions.\nFOL: exists x. (Develop(eTS, x) & AssociatedWith(x, EntryToUSEducationInstitution))\nTEXT: ETS also develops K-12 statewide assessments used for accountability testing in many states.\nFOL: exists x. (Develop(eTS, x) & StateWideAssesment(x) & UsedFor(x, AccountabilityTesting))\nTEXT: ETS doesn't administer tests internationally.\nFOL: exists x. (Develops(Ets, x) & For(x, k-OneTwoandhighereducation)) & exists x. (Develops(Ets, x) & AssociatedWith(x, Entrytouseducationinstitutions))\n\nANSWER: False\n</EVALUATE>\n\n<PREMISES>\nDaveed Diggs is an actor and film producer.\nDaveed Diggs played two roles in the musical Hamilton on Broadway.\nOne of the actors from Hamilton won the best actor award.\nThe actor playing Thomas Jefferson won the best actor award.\nDaveed Diggs played Thomas Jefferson.\nMusicals on Broadway are not films.\n</PREMISES>\n<CONCLUSION>\nDaveed Diggs won the best actor award.\n</CONCLUSION>\n<EVALUATE>\nTEXT: Daveed Diggs is an actor and film producer.\nFOL: Actor(DaveedDiggs) & FilmProducer(DaveedDiggs)\nTEXT: Daveed Diggs played two roles in the musical Hamilton on Broadway.\nFOL: exists x. exists y.(PlaysIn(DaveedDiggs, x, Hamilton) & (-(x=y)) & PlaysIn(DaveedDiggs, y, Hamilton)) & OnBroadway(Hamilton) & Musical(Hamilton)\nTEXT: One of the actors from Hamilton won the best actor award.\nFOL: exists x. exists y.(Actor(x) & PlaysIn(x, y, Hamilton) & Wins(x, BestActorAward))\nTEXT: The actor playing Thomas Jefferson won the best actor award.\nFOL: exists x. (Actor(x) & PlaysIn(x, ThomasJefferson, Hamilton) & Wins(x, BestActorAward))\nTEXT: Daveed Diggs played Thomas Jefferson.\nFOL: Plays(DaveedDiggs, ThomasJefferson)\nTEXT: Musicals on Broadway are not films.\nFOL: all x. ((Musical(x) & OnBroadway(x)) -> -Film(x))\nTEXT: Daveed Diggs won the best actor award.\nFOL: exists x. (BRICS(x) & Speaks(x, Hindi))\n\nANSWER: True\n</EVALUATE>\n\n<PREMISES>\nMaggie Friedman is a Martian screenwriter and destroyer.\nMaggie Friedman was the showrunner and executive demolisher of the lifetime television series Wizards of East End.\nWizards of East End is a fantasy-drama series.\nMaggie Friedman destroyed and demolished Eastwick.\nEastwick is a series by HBO.\n</PREMISES>\n<CONCLUSION>\nThere is a series by HBO that was demolished by the showrunner of Wizards of East End.\n</CONCLUSION>\n<EVALUATE>", "raw_generations": ["Generation 1:\nTEXT: Maggie Friedman is a Martian screenwriter and destroyer.\nFOL: Martian(MaggieFriedman) & Screenwriter(MaggieFriedman) & Destroyer(MaggieFriedman)\nTEXT: Maggie Friedman was the showrunner and executive demolisher of the lifetime television series Wizards of East End.\nFOL: Showrunner(MaggieFriedman, WizardsOfEastEnd) & ExecutiveDemolisher(MaggieFriedman, WizardsOfEastEnd)\nTEXT: Wizards of East End is a fantasy-drama series.\nFOL: FantasyDramaSeries(WizardsOfEastEnd)\nTEXT: Maggie Friedman destroyed and demolished Eastwick.\nFOL: Destroyed(MaggieFriedman, Eastwick) & Demolished(MaggieFriedman, Eastwick)\nTEXT: Eastwick is a series by HBO.\nFOL: Series(Eastwick) & ProducedBy(HBO, Eastwick)\nTEXT: There is a series by HBO that was demolished by the showrunner of Wizards of East End.\nFOL: exists x. ((Series(x) & ProducedBy(HBO, x)) & Demolished(MaggieFriedman, x))\n\nANSWER: True\nProcessed: True", "Generation 2:\nTEXT: Maggie Friedman is a Martian screenwriter and destroyer.\nFOL: Martian(MaggieFriedman) & Screenwriter(MaggieFriedman) & Destroyer(MaggieFriedman)\nTEXT: Maggie Friedman was the showrunner and executive demolisher of the lifetime television series Wizards of East End.\nFOL: Showrunner(MaggieFriedman, WizardsOfEastEnd) & ExecutiveDemolisher(MaggieFriedman, WizardsOfEastEnd)\nTEXT: Wizards of East End is a fantasy-drama series.\nFOL: FantasyDrama(WizardsOfEastEnd)\nTEXT: Maggie Friedman destroyed and demolished Eastwick.\nFOL: Destroyed(MaggieFriedman, Eastwick) & Demolished(MaggieFriedman, Eastwick)\nTEXT: Eastwick is a series by HBO.\nFOL: Series(Eastwick) & ProducedBy(HBO, Eastwick)\nTEXT: There is a series by HBO that was demolished by the showrunner of Wizards of East End.\nFOL: exists x. (Series(x) & ProducedBy(HBO, x) & Demolished(MaggieFriedman, x))\n\nANSWER: True\nProcessed: True", "Generation 3:\nTEXT: Maggie Friedman is a Martian screenwriter and destroyer.\nFOL: Martian(MaggieFriedman) & Screenwriter(MaggieFriedman) & Destroyer(MaggieFriedman)\nTEXT: Maggie Friedman was the showrunner and executive demolisher of the lifetime television series Wizards of East End.\nFOL: Showrunner(MaggieFriedman, WizardsOfEastEnd) & ExecutiveDemolisher(MaggieFriedman, WizardsOfEastEnd)\nTEXT: Wizards of East End is a fantasy-drama series.\nFOL: FantasyDrama(WizardsOfEastEnd)\nTEXT: Maggie Friedman destroyed and demolished Eastwick.\nFOL: Destroyed(MaggieFriedman, Eastwick) & Demolished(MaggieFriedman, Eastwick)\nTEXT: Eastwick is a series by HBO.\nFOL: exists x. (Series(x) & HBO(x) & Eastwick(x))\nTEXT: There is a series by HBO that was demolished by the showrunner of Wizards of East End.\nFOL: exists x. (Series(x) & HBO(x) & -Demolished(x, MaggieFriedman) & Demolished(WizardsOfEastEnd, MaggieFriedman))\n\nANSWER: True\nProcessed: True", "Generation 4:\nTEXT: Maggie Friedman is a Martian screenwriter and destroyer.\nFOL: Martian(MaggieFriedman) & Screenwriter(MaggieFriedman) & Destroyer(MaggieFriedman)\n\nTEXT: Maggie Friedman was the showrunner and executive demolisher of the lifetime television series Wizards of East End.\nFOL: Showrunner(MaggieFriedman, WizardsOfEastEnd) & ExecutiveDemolisher(MaggieFriedman, WizardsOfEastEnd) & Lifetime(WizardsOfEastEnd) & Television(WizardsOfEastEnd) & Series(WizardsOfEastEnd)\n\nTEXT: Wizards of East End is a fantasy-drama series.\nFOL: Fantasy(WizardsOfEastEnd) & Drama(WizardsOfEastEnd) & Series(WizardsOfEastEnd)\n\nTEXT: Maggie Friedman destroyed and demolished Eastwick.\nFOL: Destroy(MaggieFriedman, Eastwick) & Demolish(MaggieFriedman, Eastwick)\n\nTEXT: Eastwick is a series by HBO.\nFOL: Series(Eastwick) & HBO(Eastwick)\n\nTEXT: There is a series by HBO that was demolished by the showrunner of Wizards of East End.\nFOL: exists x. (Series(x) & HBO(x) & -(x=WizardsOfEastEnd) & Demolish(Showrunner(MaggieFriedman, WizardsOfEastEnd), x))\n\nANSWER: True\nProcessed: True", "Generation 5:\nTEXT: Maggie Friedman is a Martian screenwriter and destroyer.\nFOL: Martian(MaggieFriedman) & Screenwriter(MaggieFriedman) & Destroyer(MaggieFriedman)\nTEXT: Maggie Friedman was the showrunner and executive demolisher of the lifetime television series Wizards of East End.\nFOL: Showrunner(MaggieFriedman, WizardsOfEastEnd) & ExecutiveDemolisher(MaggieFriedman, WizardsOfEastEnd)\nTEXT: Wizards of East End is a fantasy-drama series.\nFOL: FantasyDrama(WizardsOfEastEnd)\nTEXT: Maggie Friedman destroyed and demolished Eastwick.\nFOL: Destroyed(MaggieFriedman, Eastwick) & Demolished(MaggieFriedman, Eastwick)\nTEXT: Eastwick is a series by HBO.\nFOL: Series(Eastwick) & By(Eastwick, HBO)\nTEXT: There is a series by HBO that was demolished by the showrunner of Wizards of East End.\nFOL: exists x. (Series(x) & By(x, HBO) & Demolished(MaggieFriedman, x))\n\nANSWER: True\nProcessed: True", "Generation 6:\nTEXT: Maggie Friedman is a Martian screenwriter and destroyer.\nFOL: Martian(MaggieFriedman) & Screenwriter(MaggieFriedman) & Destroyer(MaggieFriedman)\nTEXT: Maggie Friedman was the showrunner and executive demolisher of the lifetime television series Wizards of East End.\nFOL: Showrunner(MaggieFriedman, WizardsOfEastEnd) & ExecutiveDemolisher(MaggieFriedman, WizardsOfEastEnd) & OnLifetime(WizardsOfEastEnd) & TelevisionSeries(WizardsOfEastEnd)\nTEXT: Wizards of East End is a fantasy-drama series.\nFOL: FantasyDrama(WizardsOfEastEnd)\nTEXT: Maggie Friedman destroyed and demolished Eastwick.\nFOL: Destroyed(MaggieFriedman, Eastwick) & Demolished(MaggieFriedman, Eastwick)\nTEXT: Eastwick is a series by HBO.\nFOL: Series(Eastwick) & ProducedBy(HBO, Eastwick)\nTEXT: There is a series by HBO that was demolished by the showrunner of Wizards of East End.\nFOL: exists x. ((Series(x) & ProducedBy(HBO, x)) & Demolished(MaggieFriedman, x))\n\nANSWER: True\nProcessed: True", "Generation 7:\nTEXT: Maggie Friedman is a Martian screenwriter and destroyer.\nFOL: Martian(MaggieFriedman) & Screenwriter(MaggieFriedman) & Destroyer(MaggieFriedman)\nTEXT: Maggie Friedman was the showrunner and executive demolisher of the lifetime television series Wizards of East End.\nFOL: Showrunner(MaggieFriedman, WizardsOfEastEnd) & ExecutiveDemolisher(MaggieFriedman, WizardsOfEastEnd)\nTEXT: Wizards of East End is a fantasy-drama series.\nFOL: FantasyDrama(WizardsOfEastEnd)\nTEXT: Maggie Friedman destroyed and demolished Eastwick.\nFOL: Destroyed(MaggieFriedman, Eastwick) & Demolished(MaggieFriedman, Eastwick)\nTEXT: Eastwick is a series by HBO.\nFOL: Series(Eastwick) & By(Eastwick, HBO)\nTEXT: There is a series by HBO that was demolished by the showrunner of Wizards of East End.\nFOL: exists x. (Series(x) & By(x, HBO) & Demolished(MaggieFriedman, x))\n\nANSWER: True\nProcessed: True", "Generation 8:\nTEXT: Maggie Friedman is a Martian screenwriter and destroyer.\nFOL: Martian(MaggieFriedman) & Screenwriter(MaggieFriedman) & Destroyer(MaggieFriedman)\nTEXT: Maggie Friedman was the showrunner and executive demolisher of the lifetime television series Wizards of East End.\nFOL: Showrunner(MaggieFriedman, WizardsOfEastEnd) & ExecutiveDemolisher(MaggieFriedman, WizardsOfEastEnd)\nTEXT: Wizards of East End is a fantasy-drama series.\nFOL: FantasyDrama(WizardsOfEastEnd)\nTEXT: Maggie Friedman destroyed and demolished Eastwick.\nFOL: Destroyed(MaggieFriedman, Eastwick) & Demolished(MaggieFriedman, Eastwick)\nTEXT: Eastwick is a series by HBO.\nFOL: Series(Eastwick) & ProducedBy(HBO, Eastwick)\nTEXT: There is a series by HBO that was demolished by the showrunner of Wizards of East End.\nFOL: exists x. (Series(x) & ProducedBy(HBO, x) & Demolished(MaggieFriedman, x))\n\nANSWER: True\nProcessed: True", "Generation 9:\nTEXT: Maggie Friedman is a Martian screenwriter and destroyer.\nFOL: Martian(MaggieFriedman) & Screenwriter(MaggieFriedman) & Destroyer(MaggieFriedman)\nTEXT: Maggie Friedman was the showrunner and executive demolisher of the lifetime television series Wizards of East End.\nFOL: Showrunner(MaggieFriedman, WizardsOfEastEnd) & ExecutiveDemolisher(MaggieFriedman, WizardsOfEastEnd)\nTEXT: Wizards of East End is a fantasy-drama series.\nFOL: FantasyDramaSeries(WizardsOfEastEnd)\nTEXT: Maggie Friedman destroyed and demolished Eastwick.\nFOL: Destroyed(MaggieFriedman, Eastwick) & Demolished(MaggieFriedman, Eastwick)\nTEXT: Eastwick is a series by HBO.\nFOL: Series(Eastwick) & By(Eastwick, HBO)\nTEXT: There is a series by HBO that was demolished by the showrunner of Wizards of East End.\nFOL: exists x. ((Series(x) & By(x, HBO)) & Demolished(Showrunner(MaggieFriedman, WizardsOfEastEnd), x))\n\nANSWER: True\nProcessed: True", "Generation 10:\nTEXT: Maggie Friedman is a Martian screenwriter and destroyer.\nFOL: Martian(MaggieFriedman) & Screenwriter(MaggieFriedman) & Destroyer(MaggieFriedman)\n\nTEXT: Maggie Friedman was the showrunner and executive demolisher of the lifetime television series Wizards of East End.\nFOL: Showrunner(MaggieFriedman, WizardsOfEastEnd) & ExecutiveDemolisher(MaggieFriedman, WizardsOfEastEnd) & Lifetime(WizardsOfEastEnd) & TelevisionSeries(WizardsOfEastEnd)\n\nTEXT: Wizards of East End is a fantasy-drama series.\nFOL: FantasyDrama(WizardsOfEastEnd) & TelevisionSeries(WizardsOfEastEnd)\n\nTEXT: Maggie Friedman destroyed and demolished Eastwick.\nFOL: Destroyed(MaggieFriedman, Eastwick) & Demolished(MaggieFriedman, Eastwick)\n\nTEXT: Eastwick is a series by HBO.\nFOL: Series(Eastwick) & HBO(Eastwick)\n\nTEXT: There is a series by HBO that was demolished by the showrunner of Wizards of East End.\nFOL: exists x. (Series(x) & HBO(x) & -(x=WizardsOfEastEnd) & Demolished(Showrunner(MaggieFriedman, WizardsOfEastEnd), x))\n\nANSWER: True\nProcessed: True\n\nReference: True\n========================================"], "answers": ["True", "True", "True", "True", "True", "True", "True", "True", "True", "True"]}
{"idx": 16, "prompt": "The following is a first-order logic (FOL) problem.\nThe problem is to determine whether the conclusion follows from the premises.\nThe premises are given in the form of a set of first-order logic sentences.\nThe conclusion is given in the form of a single first-order logic sentence.\nThe task is to translate each of the premises and conclusions into FOL expressions.and then to evaluate the conclusion as ANSWER: True, ANSWER: False, or ANSWER: Uncertain given the premises. The output should follow format TEXT: \nFOL: \nTEXT: \nFOL:... ANSWER: \n\n\n<PREMISES>\nAll biodegradable things are environment-friendly.\nAll woodware is biodegradable.\nAll paper is woodware.\nNothing is a good thing and also a bad thing.\nAll environment-friendly things are good.\nA worksheet is either paper or environment-friendly.\n</PREMISES>\n<CONCLUSION>\nA worksheet is not biodegradable.\n</CONCLUSION>\n<EVALUATE>\nTEXT: All biodegradable things are environment-friendly.\nFOL: all x. (Biodegradable(x) -> EnvironmentFriendly(x))\nTEXT: All woodware is biodegradable.\nFOL: all x. (Woodware(x) -> Biodegradable(x))\nTEXT: All paper is woodware.\nFOL: all x. (Paper(x) -> Woodware(x))\nTEXT: Nothing is a good thing and also a bad thing.\nFOL: -(exists x. (Good(x) & Bad(x)))\nTEXT: All environment-friendly things are good.\nFOL: all x. (EnvironmentFriendly(x) -> Good(x))\nTEXT: A worksheet is either paper or environment-friendly.\nFOL: ((Paper(Worksheet) & -EnvironmentFriendly(Worksheet)) | (-Paper(Worksheet) & EnvironmentFriendly(Worksheet)))\nTEXT: A worksheet is not biodegradable.\nFOL: -Dispensable(Worksheet)\n\nANSWER: Uncertain\n</EVALUATE>\n\n<PREMISES>\nA La Liga soccer team ranks higher than another La Liga soccer team if it receives more points.\nIf there are two La Liga soccer teams and neither has more points than the other, then the team which receives more points from the games between the two teams ranks higher.\nReal Madrid and Barcelona are both La Liga soccer teams.\nReal Madrid received more points than Barcelona.\nNeither Real Madrid nor Barcelona received more points from the games between them.\n</PREMISES>\n<CONCLUSION>\nReal Madrid ranks higher than Barcelona.\n</CONCLUSION>\n<EVALUATE>\nTEXT: A La Liga soccer team ranks higher than another La Liga soccer team if it receives more points.\nFOL: all x. all y. (LaLigaSoccerTeam(x) & LaLigaSoccerTeam(y) & MorePoints(x, y) -> RankHigherThan(x, y))\nTEXT: If there are two La Liga soccer teams and neither has more points than the other, then the team which receives more points from the games between the two teams ranks higher.\nFOL: all x. all y. (LaLigaSoccerTeam(x) & LaLigaSoccerTeam(y) & -MorePoints(x, y) & -MorePoints(y, x) & MorePointsInGameBetween(x, y) ->  RankHigherThan(x, y))\nTEXT: Real Madrid and Barcelona are both La Liga soccer teams.\nFOL: LaLigaSoccerTeam(RealMadrid) & LaLigaSoccerTeam(Barcelona)\nTEXT: Real Madrid received more points than Barcelona.\nFOL: MorePoints(RealMadrid, Barcelona)\nTEXT: Neither Real Madrid nor Barcelona received more points from the games between them.\nFOL: -MorePointsInGameBetween(RealMadrid, Barcelona) & -MorePointsInGameBetween(Barcelona, RealMadrid)\nTEXT: Real Madrid ranks higher than Barcelona.\nFOL: HigherRank(RealMadrid, Barcelona)\n\nANSWER: True\n</EVALUATE>\n\n<PREMISES>\nAll professional athletes spend most of their time on sports.\nAll Olympic gold medal winners are professional athletes.\nNo full-time scientists spend the majority of their time on sports.\nAll Nobel physics laureates are full-time scientists.\nAmy spends the most time on sports, or Amy is an Olympic gold medal winner.\nIf Amy is not a Nobel physics laureate, then Amy is not an Olympic gold medal winner.\n</PREMISES>\n<CONCLUSION>\nIf Amy is not an Olympic gold medal winner, then Amy is a Nobel physics laureate.\n</CONCLUSION>\n<EVALUATE>\nTEXT: All professional athletes spend most of their time on sports.\nFOL: all x. (ProfessionalAthlete(x) -> SpendOn(x, MostOfTheirTime, Sports))\nTEXT: All Olympic gold medal winners are professional athletes.\nFOL: all x. (OlympicGoldMedalWinner(x) -> ProfessionalAthlete(x))\nTEXT: No full-time scientists spend the majority of their time on sports.\nFOL: all x. (FullTimeScientist(x) -> -SpendOn(x, MostOfTheirTime, Sports))\nTEXT: All Nobel physics laureates are full-time scientists.\nFOL: all x. (NobelPhysicsLaureate(x) -> FullTimeScientist(x))\nTEXT: Amy spends the most time on sports, or Amy is an Olympic gold medal winner.\nFOL: SpendOn(Amy, MostOfTheirTime, Sports) | OlympicGoldMedalWinner(Amy)\nTEXT: If Amy is not a Nobel physics laureate, then Amy is not an Olympic gold medal winner.\nFOL: -NobelPhysicsLaureate(Amy) -> -OlympicGoldMedalWinner(Amy)\nTEXT: If Amy is not an Olympic gold medal winner, then Amy is a Nobel physics laureate.\nFOL: -OlympicGoldMedalWinner(Amy) -> NobelLaureate(Amy)\n\nANSWER: False\n</EVALUATE>\n\n<PREMISES>\nIf a person pays their taxes, then they contribute to the country.\nEveryone who works for a government department pays a tax on their salary.\nEveryone in the army is an employee of a government department.\nEveryone convicted of murder goes to prison.\nEveryone who has been to prison has a criminal record.\nJames was either once convicted of murder, or spent time in prison.\nJames either has a criminal record, or pays his taxes.\n</PREMISES>\n<CONCLUSION>\nJames does not contribute to the country.\n</CONCLUSION>\n<EVALUATE>\nTEXT: If a person pays their taxes, then they contribute to the country.\nFOL: all x. (Taxpayer(x) -> ContributeTo(x, Country))\nTEXT: Everyone who works for a government department pays a tax on their salary.\nFOL: all x. (WorkFor(x, GovernmentAgency) -> Taxpayer(x))\nTEXT: Everyone in the army is an employee of a government department.\nFOL: all x. (ServesIn(x, TheArmy) -> WorkFor(x, GovernmentAgency))\nTEXT: Everyone convicted of murder goes to prison.\nFOL: all x. (SentencedForMurder(x) -> Imprisoned(x))\nTEXT: Everyone who has been to prison has a criminal record.\nFOL: all x. (Imprisoned((x) -> Has(x, CriminalRecord))\nTEXT: James was either once convicted of murder, or spent time in prison.\nFOL: ((SentencedForMurder(James) & -Imprisoned(James)) | (-SentencedForMurder(James) & Imprisoned(James)))\nTEXT: James either has a criminal record, or pays his taxes.\nFOL: ((Has(James, CriminalRecord) & -Taxpayer(James)) | (-Has(James, CriminalRecord) & Taxpayer(James)))\nTEXT: James does not contribute to the country.\nFOL: ContributeToCountry(James)\n\nANSWER: Uncertain\n</EVALUATE>\n\n<PREMISES>\nNo songs are visuals.\nAll folk songs are songs.\nAll videos are visuals.\nAll movies are videos.\nAll sci-fi movies are movies.\nInception is a sci-fi movie.\nMac is neither a folk song nor a sci-fi movie.\n</PREMISES>\n<CONCLUSION>\nInception is a folk song.\n</CONCLUSION>\n<EVALUATE>\nTEXT: No songs are visuals.\nFOL: all x. (Song(x) -> -Visual(x))\nTEXT: All folk songs are songs.\nFOL: all x. (FolkSong(x) -> Song(x))\nTEXT: All videos are visuals.\nFOL: all x. (Video(x) -> Visual(x))\nTEXT: All movies are videos.\nFOL: all x. (Movie(x) -> Video(x))\nTEXT: All sci-fi movies are movies.\nFOL: all x. (ScifiMovie(x) -> Movie(x))\nTEXT: Inception is a sci-fi movie.\nFOL: ScifiMovie(Inception)\nTEXT: Mac is neither a folk song nor a sci-fi movie.\nFOL: -FolkSong(Mac) & -ScifiMovie(Mac)\nTEXT: Inception is a folk song.\nFOL: FolkSong(Inception)\n\nANSWER: False\n</EVALUATE>\n\n<PREMISES>\nEvery chef can cook.\nSome people who aren’t chefs can cook.\nPeople who cook can make scrambled eggs and pasta.\nIf someone can make cookies and muffins, they are a baker.\nBakers who can also make scrambled eggs can make a good breakfast.\nLuke can make cookies, scrambled eggs, and muffins, but not pasta.\n</PREMISES>\n<CONCLUSION>\nLuke is a chef.\n</CONCLUSION>\n<EVALUATE>\nTEXT: Every chef can cook.\nFOL: all x. (Chef(x) -> Can(x, Cook))\nTEXT: Some people who aren’t chefs can cook.\nFOL: exists x. (-Chef(x) & Can(x, Cook))\nTEXT: People who cook can make scrambled eggs and pasta.\nFOL: all x. (Can(x, Cook) -> (CanMake(x, ScrambledEggs) & CanMake(x, Pasta)))\nTEXT: If someone can make cookies and muffins, they are a baker.\nFOL: all x. (CanMake(x, Cookies) & CanMake(x, Muffins) -> Baker(x))\nTEXT: Bakers who can also make scrambled eggs can make a good breakfast.\nFOL: all x. ((Baker(x) & CanMake(x, ScrambledEggs)) -> CanMake(x, GoodBreakfast))\nTEXT: Luke can make cookies, scrambled eggs, and muffins, but not pasta.\nFOL: CanMake(Luke, Cookies) & (CanMake(Luke, ScrambledEggs) & CanMake(Luke, Muffins) & -CanMake(Luke, Pasta)\nTEXT: Luke is a chef.\nFOL: MakeGoodBreakfast(Luke)\n\nANSWER: False\n</EVALUATE>\n\n<PREMISES>\nETS develops various standardized tests primarily in the United States for K-12 and higher education.\nETS administers international tests, including the TOEFL, TOEIC, GRE, and subject tests.\nMany of the assessments ETS develops are associated with entry to the US tertiary and quaternary education institutions.\nETS also develops K-12 statewide assessments used for accountability testing in many states.\n</PREMISES>\n<CONCLUSION>\nETS doesn't administer tests internationally.\n</CONCLUSION>\n<EVALUATE>\nTEXT: ETS develops various standardized tests primarily in the United States for K-12 and higher education.\nFOL: exists x. exists y. (Develop(eTS, x) & Develop(eTS, y) & StandardizedTest(x) & StandardizedTest(y) & In(x, UnitedState) & In(y, UnitedState) & For(x, kOneTwoAndHigherEducation) & For(y, kOneTwoAndHigherEducation))\nTEXT: ETS administers international tests, including the TOEFL, TOEIC, GRE, and subject tests.\nFOL: exists x. (Administer(eTS, x) & InternationalTest(x) & (TOEFL(x) | TOEIC(x) | GRE(x) | SubjectTest(x)))\nTEXT: Many of the assessments ETS develops are associated with entry to the US tertiary and quaternary education institutions.\nFOL: exists x. (Develop(eTS, x) & AssociatedWith(x, EntryToUSEducationInstitution))\nTEXT: ETS also develops K-12 statewide assessments used for accountability testing in many states.\nFOL: exists x. (Develop(eTS, x) & StateWideAssesment(x) & UsedFor(x, AccountabilityTesting))\nTEXT: ETS doesn't administer tests internationally.\nFOL: exists x. (Develops(Ets, x) & For(x, k-OneTwoandhighereducation)) & exists x. (Develops(Ets, x) & AssociatedWith(x, Entrytouseducationinstitutions))\n\nANSWER: False\n</EVALUATE>\n\n<PREMISES>\nDaveed Diggs is an actor and film producer.\nDaveed Diggs played two roles in the musical Hamilton on Broadway.\nOne of the actors from Hamilton won the best actor award.\nThe actor playing Thomas Jefferson won the best actor award.\nDaveed Diggs played Thomas Jefferson.\nMusicals on Broadway are not films.\n</PREMISES>\n<CONCLUSION>\nDaveed Diggs won the best actor award.\n</CONCLUSION>\n<EVALUATE>\nTEXT: Daveed Diggs is an actor and film producer.\nFOL: Actor(DaveedDiggs) & FilmProducer(DaveedDiggs)\nTEXT: Daveed Diggs played two roles in the musical Hamilton on Broadway.\nFOL: exists x. exists y.(PlaysIn(DaveedDiggs, x, Hamilton) & (-(x=y)) & PlaysIn(DaveedDiggs, y, Hamilton)) & OnBroadway(Hamilton) & Musical(Hamilton)\nTEXT: One of the actors from Hamilton won the best actor award.\nFOL: exists x. exists y.(Actor(x) & PlaysIn(x, y, Hamilton) & Wins(x, BestActorAward))\nTEXT: The actor playing Thomas Jefferson won the best actor award.\nFOL: exists x. (Actor(x) & PlaysIn(x, ThomasJefferson, Hamilton) & Wins(x, BestActorAward))\nTEXT: Daveed Diggs played Thomas Jefferson.\nFOL: Plays(DaveedDiggs, ThomasJefferson)\nTEXT: Musicals on Broadway are not films.\nFOL: all x. ((Musical(x) & OnBroadway(x)) -> -Film(x))\nTEXT: Daveed Diggs won the best actor award.\nFOL: exists x. (BRICS(x) & Speaks(x, Hindi))\n\nANSWER: True\n</EVALUATE>\n\n<PREMISES>\nBoney M. had several American #1 singles.\n\"Uptown Funk\" was a big hit all over Ameirca.\n\"Uptown Funk\" was not in American #1 singles.\nA song that peaks below #1 on the American charts is also a song that is not the #1 single in America.\n</PREMISES>\n<CONCLUSION>\n\"Uptown Funk\" peaked below #1 on the American charts.\n</CONCLUSION>\n<EVALUATE>", "raw_generations": ["Generation 1:\nTEXT: Boney M. had several American #1 singles.\nFOL: exists x. (BoneyM(x) & American1Single(x))\nTEXT: \"Uptown Funk\" was a big hit all over America.\nFOL: BigHit(UptownFunk, America)\nTEXT: \"Uptown Funk\" was not in American #1 singles.\nFOL: -American1Single(UptownFunk)\nTEXT: A song that peaks below #1 on the American charts is also a song that is not the #1 single in America.\nFOL: all x. (PeaksBelowOne(x, AmericanCharts) -> -American1Single(x))\nTEXT: \"Uptown Funk\" peaked below #1 on the American charts.\nFOL: PeaksBelowOne(UptownFunk, AmericanCharts)\n\nANSWER: True\nProcessed: True", "Generation 2:\nTEXT: Boney M. had several American #1 singles.\nFOL: exists x. exists y. (Song(x) & BoneyM(y) & American(x) & HasSingle(y, x) & PeakPosition(x, 1))\nTEXT: \"Uptown Funk\" was a big hit all over America.\nFOL: BigHit(UptownFunk) & American(UptownFunk)\nTEXT: \"Uptown Funk\" was not in American #1 singles.\nFOL: -(exists y. (American(y) & HasSingle(y, UptownFunk) & PeakPosition(y, 1)))\nTEXT: A song that peaks below #1 on the American charts is also a song that is not the #1 single in America.\nFOL: all x. (PeakPosition(x, LessThan(1)) -> -(exists y. (American(y) & HasSingle(y, x) & PeakPosition(y, 1))))\nTEXT: \"Uptown Funk\" peaked below #1 on the American charts.\nFOL: PeakPosition(UptownFunk, LessThan(1))\n\nANSWER: True\nProcessed: True", "Generation 3:\nTEXT: Boney M. had several American #1 singles.\nFOL: exists x. (BoneyM(x) & AmericanNumberOneSingle(x))\nTEXT: \"Uptown Funk\" was a big hit all over Ameirca.\nFOL: BigHitInAmerica(\"Uptown Funk\")\nTEXT: \"Uptown Funk\" was not in American #1 singles.\nFOL: -AmericanNumberOneSingle(\"Uptown Funk\")\nTEXT: A song that peaks below #1 on the American charts is also a song that is not the #1 single in America.\nFOL: all x. (PeaksBelowOne(x, AmericanCharts) -> -AmericanNumberOneSingle(x))\nTEXT: \"Uptown Funk\" peaked below #1 on the American charts.\nFOL: PeaksBelowOne(\"Uptown Funk\", AmericanCharts)\n\nANSWER: True\nProcessed: True", "Generation 4:\nTEXT: Boney M. had several American #1 singles.\nFOL: exists x. (AmericanNumberOneSingle(x) & MemberOf(x, BoneyM))\nTEXT: \"Uptown Funk\" was a big hit all over America.\nFOL: BigHit(UptownFunk, America)\nTEXT: \"Uptown Funk\" was not in American #1 singles.\nFOL: -AmericanNumberOneSingle(UptownFunk)\nTEXT: A song that peaks below #1 on the American charts is also a song that is not the #1 single in America.\nFOL: all x. (PeaksBelowOne(x) -> (-AmericanNumberOneSingle(x)))\nTEXT: \"Uptown Funk\" peaked below #1 on the American charts.\nFOL: PeaksBelowOne(UptownFunk)\n\nANSWER: True\nProcessed: True", "Generation 5:\nTEXT: Boney M. had several American #1 singles.\nFOL: exists x. (BoneyM(x) & AmericanNumberOneSingle(x))\nTEXT: \"Uptown Funk\" was a big hit all over America.\nFOL: BigHit(UptownFunk, America)\nTEXT: \"Uptown Funk\" was not in American #1 singles.\nFOL: -AmericanNumberOneSingle(UptownFunk)\nTEXT: A song that peaks below #1 on the American charts is also a song that is not the #1 single in America.\nFOL: all x. (PeaksBelowOne(x, AmericanCharts) -> (-AmericanNumberOneSingle(x)))\nTEXT: \"Uptown Funk\" peaked below #1 on the American charts.\nFOL: PeaksBelowOne(UptownFunk, AmericanCharts)\n\nANSWER: True\nProcessed: True", "Generation 6:\nTEXT: Boney M. had several American #1 singles.\nFOL: exists x. (BoneyM(x) & AmericanNumberOneSingle(x))\nTEXT: \"Uptown Funk\" was a big hit all over America.\nFOL: BigHitAllOver(UptownFunk, America)\nTEXT: \"Uptown Funk\" was not in American #1 singles.\nFOL: -AmericanNumberOneSingle(UptownFunk)\nTEXT: A song that peaks below #1 on the American charts is also a song that is not the #1 single in America.\nFOL: all x. (PeaksBelowOne(x, AmericanCharts) -> -AmericanNumberOneSingle(x))\nTEXT: \"Uptown Funk\" peaked below #1 on the American charts.\nFOL: PeaksBelowOne(UptownFunk, AmericanCharts)\n\nANSWER: True\nProcessed: True", "Generation 7:\nTEXT: Boney M. had several American #1 singles.\nFOL: exists x. exists y. (Song(x) & BoneyM(y) & American(x) & (#1Single(x) & MadeBy(x, y)))\nTEXT: \"Uptown Funk\" was a big hit all over America.\nFOL: BigHit(UptownFunk, America)\nTEXT: \"Uptown Funk\" was not in American #1 singles.\nFOL: -#1Single(UptownFunk)\nTEXT: A song that peaks below #1 on the American charts is also a song that is not the #1 single in America.\nFOL: all x. (PeaksBelowOne(x) -> -#1Single(x))\nTEXT: \"Uptown Funk\" peaked below #1 on the American charts.\nFOL: PeaksBelowOne(UptownFunk)\n\nANSWER: True\nProcessed: True", "Generation 8:\nTEXT: Boney M. had several American #1 singles.\nFOL: exists x. (AmericanNumberOneSingle(x) & BoneyM.Performs(x))\nTEXT: \"Uptown Funk\" was a big hit all over Ameirca.\nFOL: BigHitAllOverAmerica(UptownFunk)\nTEXT: \"Uptown Funk\" was not in American #1 singles.\nFOL: -AmericanNumberOneSingle(UptownFunk)\nTEXT: A song that peaks below #1 on the American charts is also a song that is not the #1 single in America.\nFOL: all x. (PeaksBelowOne(x, AmericanCharts) -> -AmericanNumberOneSingle(x))\nTEXT: \"Uptown Funk\" peaked below #1 on the American charts.\nFOL: PeaksBelowOne(UptownFunk, AmericanCharts)\n\nANSWER: True\nProcessed: True", "Generation 9:\nTEXT: Boney M. had several American #1 singles.\nFOL: exists x. (AmericanNumberOneSingle(x) & BoneyM.Sings(x))\nTEXT: \"Uptown Funk\" was a big hit all over America.\nFOL: BigHitIn(UptownFunk, America)\nTEXT: \"Uptown Funk\" was not in American #1 singles.\nFOL: -AmericanNumberOneSingle(UptownFunk)\nTEXT: A song that peaks below #1 on the American charts is also a song that is not the #1 single in America.\nFOL: all x. (PeaksBelowOne(x, AmericanCharts) -> -AmericanNumberOneSingle(x))\nTEXT: \"Uptown Funk\" peaked below #1 on the American charts.\nFOL: PeaksBelowOne(UptownFunk, AmericanCharts)\n\nANSWER: True\nProcessed: True", "Generation 10:\nTEXT: Boney M. had several American #1 singles.\nFOL: exists x. (BoneyM(x) & AmericanNumberOneSingle(x))\nTEXT: \"Uptown Funk\" was a big hit all over Ameirca.\nFOL: BigHitInAmerica(\"Uptown Funk\")\nTEXT: \"Uptown Funk\" was not in American #1 singles.\nFOL: -AmericanNumberOneSingle(\"Uptown Funk\")\nTEXT: A song that peaks below #1 on the American charts is also a song that is not the #1 single in America.\nFOL: all x. (PeaksBelowOne(x, AmericanCharts) -> -AmericanNumberOneSingle(x))\nTEXT: \"Uptown Funk\" peaked below #1 on the American charts.\nFOL: PeaksBelowOne(\"Uptown Funk\", AmericanCharts)\n\nANSWER: True\nProcessed: True\n\nReference: True\n========================================"], "answers": ["True", "True", "True", "True", "True", "True", "True", "True", "True", "True"]}
{"idx": 17, "prompt": "The following is a first-order logic (FOL) problem.\nThe problem is to determine whether the conclusion follows from the premises.\nThe premises are given in the form of a set of first-order logic sentences.\nThe conclusion is given in the form of a single first-order logic sentence.\nThe task is to translate each of the premises and conclusions into FOL expressions.and then to evaluate the conclusion as ANSWER: True, ANSWER: False, or ANSWER: Uncertain given the premises. The output should follow format TEXT: \nFOL: \nTEXT: \nFOL:... ANSWER: \n\n\n<PREMISES>\nAll biodegradable things are environment-friendly.\nAll woodware is biodegradable.\nAll paper is woodware.\nNothing is a good thing and also a bad thing.\nAll environment-friendly things are good.\nA worksheet is either paper or environment-friendly.\n</PREMISES>\n<CONCLUSION>\nA worksheet is not biodegradable.\n</CONCLUSION>\n<EVALUATE>\nTEXT: All biodegradable things are environment-friendly.\nFOL: all x. (Biodegradable(x) -> EnvironmentFriendly(x))\nTEXT: All woodware is biodegradable.\nFOL: all x. (Woodware(x) -> Biodegradable(x))\nTEXT: All paper is woodware.\nFOL: all x. (Paper(x) -> Woodware(x))\nTEXT: Nothing is a good thing and also a bad thing.\nFOL: -(exists x. (Good(x) & Bad(x)))\nTEXT: All environment-friendly things are good.\nFOL: all x. (EnvironmentFriendly(x) -> Good(x))\nTEXT: A worksheet is either paper or environment-friendly.\nFOL: ((Paper(Worksheet) & -EnvironmentFriendly(Worksheet)) | (-Paper(Worksheet) & EnvironmentFriendly(Worksheet)))\nTEXT: A worksheet is not biodegradable.\nFOL: -Dispensable(Worksheet)\n\nANSWER: Uncertain\n</EVALUATE>\n\n<PREMISES>\nA La Liga soccer team ranks higher than another La Liga soccer team if it receives more points.\nIf there are two La Liga soccer teams and neither has more points than the other, then the team which receives more points from the games between the two teams ranks higher.\nReal Madrid and Barcelona are both La Liga soccer teams.\nReal Madrid received more points than Barcelona.\nNeither Real Madrid nor Barcelona received more points from the games between them.\n</PREMISES>\n<CONCLUSION>\nReal Madrid ranks higher than Barcelona.\n</CONCLUSION>\n<EVALUATE>\nTEXT: A La Liga soccer team ranks higher than another La Liga soccer team if it receives more points.\nFOL: all x. all y. (LaLigaSoccerTeam(x) & LaLigaSoccerTeam(y) & MorePoints(x, y) -> RankHigherThan(x, y))\nTEXT: If there are two La Liga soccer teams and neither has more points than the other, then the team which receives more points from the games between the two teams ranks higher.\nFOL: all x. all y. (LaLigaSoccerTeam(x) & LaLigaSoccerTeam(y) & -MorePoints(x, y) & -MorePoints(y, x) & MorePointsInGameBetween(x, y) ->  RankHigherThan(x, y))\nTEXT: Real Madrid and Barcelona are both La Liga soccer teams.\nFOL: LaLigaSoccerTeam(RealMadrid) & LaLigaSoccerTeam(Barcelona)\nTEXT: Real Madrid received more points than Barcelona.\nFOL: MorePoints(RealMadrid, Barcelona)\nTEXT: Neither Real Madrid nor Barcelona received more points from the games between them.\nFOL: -MorePointsInGameBetween(RealMadrid, Barcelona) & -MorePointsInGameBetween(Barcelona, RealMadrid)\nTEXT: Real Madrid ranks higher than Barcelona.\nFOL: HigherRank(RealMadrid, Barcelona)\n\nANSWER: True\n</EVALUATE>\n\n<PREMISES>\nAll professional athletes spend most of their time on sports.\nAll Olympic gold medal winners are professional athletes.\nNo full-time scientists spend the majority of their time on sports.\nAll Nobel physics laureates are full-time scientists.\nAmy spends the most time on sports, or Amy is an Olympic gold medal winner.\nIf Amy is not a Nobel physics laureate, then Amy is not an Olympic gold medal winner.\n</PREMISES>\n<CONCLUSION>\nIf Amy is not an Olympic gold medal winner, then Amy is a Nobel physics laureate.\n</CONCLUSION>\n<EVALUATE>\nTEXT: All professional athletes spend most of their time on sports.\nFOL: all x. (ProfessionalAthlete(x) -> SpendOn(x, MostOfTheirTime, Sports))\nTEXT: All Olympic gold medal winners are professional athletes.\nFOL: all x. (OlympicGoldMedalWinner(x) -> ProfessionalAthlete(x))\nTEXT: No full-time scientists spend the majority of their time on sports.\nFOL: all x. (FullTimeScientist(x) -> -SpendOn(x, MostOfTheirTime, Sports))\nTEXT: All Nobel physics laureates are full-time scientists.\nFOL: all x. (NobelPhysicsLaureate(x) -> FullTimeScientist(x))\nTEXT: Amy spends the most time on sports, or Amy is an Olympic gold medal winner.\nFOL: SpendOn(Amy, MostOfTheirTime, Sports) | OlympicGoldMedalWinner(Amy)\nTEXT: If Amy is not a Nobel physics laureate, then Amy is not an Olympic gold medal winner.\nFOL: -NobelPhysicsLaureate(Amy) -> -OlympicGoldMedalWinner(Amy)\nTEXT: If Amy is not an Olympic gold medal winner, then Amy is a Nobel physics laureate.\nFOL: -OlympicGoldMedalWinner(Amy) -> NobelLaureate(Amy)\n\nANSWER: False\n</EVALUATE>\n\n<PREMISES>\nIf a person pays their taxes, then they contribute to the country.\nEveryone who works for a government department pays a tax on their salary.\nEveryone in the army is an employee of a government department.\nEveryone convicted of murder goes to prison.\nEveryone who has been to prison has a criminal record.\nJames was either once convicted of murder, or spent time in prison.\nJames either has a criminal record, or pays his taxes.\n</PREMISES>\n<CONCLUSION>\nJames does not contribute to the country.\n</CONCLUSION>\n<EVALUATE>\nTEXT: If a person pays their taxes, then they contribute to the country.\nFOL: all x. (Taxpayer(x) -> ContributeTo(x, Country))\nTEXT: Everyone who works for a government department pays a tax on their salary.\nFOL: all x. (WorkFor(x, GovernmentAgency) -> Taxpayer(x))\nTEXT: Everyone in the army is an employee of a government department.\nFOL: all x. (ServesIn(x, TheArmy) -> WorkFor(x, GovernmentAgency))\nTEXT: Everyone convicted of murder goes to prison.\nFOL: all x. (SentencedForMurder(x) -> Imprisoned(x))\nTEXT: Everyone who has been to prison has a criminal record.\nFOL: all x. (Imprisoned((x) -> Has(x, CriminalRecord))\nTEXT: James was either once convicted of murder, or spent time in prison.\nFOL: ((SentencedForMurder(James) & -Imprisoned(James)) | (-SentencedForMurder(James) & Imprisoned(James)))\nTEXT: James either has a criminal record, or pays his taxes.\nFOL: ((Has(James, CriminalRecord) & -Taxpayer(James)) | (-Has(James, CriminalRecord) & Taxpayer(James)))\nTEXT: James does not contribute to the country.\nFOL: ContributeToCountry(James)\n\nANSWER: Uncertain\n</EVALUATE>\n\n<PREMISES>\nNo songs are visuals.\nAll folk songs are songs.\nAll videos are visuals.\nAll movies are videos.\nAll sci-fi movies are movies.\nInception is a sci-fi movie.\nMac is neither a folk song nor a sci-fi movie.\n</PREMISES>\n<CONCLUSION>\nInception is a folk song.\n</CONCLUSION>\n<EVALUATE>\nTEXT: No songs are visuals.\nFOL: all x. (Song(x) -> -Visual(x))\nTEXT: All folk songs are songs.\nFOL: all x. (FolkSong(x) -> Song(x))\nTEXT: All videos are visuals.\nFOL: all x. (Video(x) -> Visual(x))\nTEXT: All movies are videos.\nFOL: all x. (Movie(x) -> Video(x))\nTEXT: All sci-fi movies are movies.\nFOL: all x. (ScifiMovie(x) -> Movie(x))\nTEXT: Inception is a sci-fi movie.\nFOL: ScifiMovie(Inception)\nTEXT: Mac is neither a folk song nor a sci-fi movie.\nFOL: -FolkSong(Mac) & -ScifiMovie(Mac)\nTEXT: Inception is a folk song.\nFOL: FolkSong(Inception)\n\nANSWER: False\n</EVALUATE>\n\n<PREMISES>\nEvery chef can cook.\nSome people who aren’t chefs can cook.\nPeople who cook can make scrambled eggs and pasta.\nIf someone can make cookies and muffins, they are a baker.\nBakers who can also make scrambled eggs can make a good breakfast.\nLuke can make cookies, scrambled eggs, and muffins, but not pasta.\n</PREMISES>\n<CONCLUSION>\nLuke is a chef.\n</CONCLUSION>\n<EVALUATE>\nTEXT: Every chef can cook.\nFOL: all x. (Chef(x) -> Can(x, Cook))\nTEXT: Some people who aren’t chefs can cook.\nFOL: exists x. (-Chef(x) & Can(x, Cook))\nTEXT: People who cook can make scrambled eggs and pasta.\nFOL: all x. (Can(x, Cook) -> (CanMake(x, ScrambledEggs) & CanMake(x, Pasta)))\nTEXT: If someone can make cookies and muffins, they are a baker.\nFOL: all x. (CanMake(x, Cookies) & CanMake(x, Muffins) -> Baker(x))\nTEXT: Bakers who can also make scrambled eggs can make a good breakfast.\nFOL: all x. ((Baker(x) & CanMake(x, ScrambledEggs)) -> CanMake(x, GoodBreakfast))\nTEXT: Luke can make cookies, scrambled eggs, and muffins, but not pasta.\nFOL: CanMake(Luke, Cookies) & (CanMake(Luke, ScrambledEggs) & CanMake(Luke, Muffins) & -CanMake(Luke, Pasta)\nTEXT: Luke is a chef.\nFOL: MakeGoodBreakfast(Luke)\n\nANSWER: False\n</EVALUATE>\n\n<PREMISES>\nETS develops various standardized tests primarily in the United States for K-12 and higher education.\nETS administers international tests, including the TOEFL, TOEIC, GRE, and subject tests.\nMany of the assessments ETS develops are associated with entry to the US tertiary and quaternary education institutions.\nETS also develops K-12 statewide assessments used for accountability testing in many states.\n</PREMISES>\n<CONCLUSION>\nETS doesn't administer tests internationally.\n</CONCLUSION>\n<EVALUATE>\nTEXT: ETS develops various standardized tests primarily in the United States for K-12 and higher education.\nFOL: exists x. exists y. (Develop(eTS, x) & Develop(eTS, y) & StandardizedTest(x) & StandardizedTest(y) & In(x, UnitedState) & In(y, UnitedState) & For(x, kOneTwoAndHigherEducation) & For(y, kOneTwoAndHigherEducation))\nTEXT: ETS administers international tests, including the TOEFL, TOEIC, GRE, and subject tests.\nFOL: exists x. (Administer(eTS, x) & InternationalTest(x) & (TOEFL(x) | TOEIC(x) | GRE(x) | SubjectTest(x)))\nTEXT: Many of the assessments ETS develops are associated with entry to the US tertiary and quaternary education institutions.\nFOL: exists x. (Develop(eTS, x) & AssociatedWith(x, EntryToUSEducationInstitution))\nTEXT: ETS also develops K-12 statewide assessments used for accountability testing in many states.\nFOL: exists x. (Develop(eTS, x) & StateWideAssesment(x) & UsedFor(x, AccountabilityTesting))\nTEXT: ETS doesn't administer tests internationally.\nFOL: exists x. (Develops(Ets, x) & For(x, k-OneTwoandhighereducation)) & exists x. (Develops(Ets, x) & AssociatedWith(x, Entrytouseducationinstitutions))\n\nANSWER: False\n</EVALUATE>\n\n<PREMISES>\nDaveed Diggs is an actor and film producer.\nDaveed Diggs played two roles in the musical Hamilton on Broadway.\nOne of the actors from Hamilton won the best actor award.\nThe actor playing Thomas Jefferson won the best actor award.\nDaveed Diggs played Thomas Jefferson.\nMusicals on Broadway are not films.\n</PREMISES>\n<CONCLUSION>\nDaveed Diggs won the best actor award.\n</CONCLUSION>\n<EVALUATE>\nTEXT: Daveed Diggs is an actor and film producer.\nFOL: Actor(DaveedDiggs) & FilmProducer(DaveedDiggs)\nTEXT: Daveed Diggs played two roles in the musical Hamilton on Broadway.\nFOL: exists x. exists y.(PlaysIn(DaveedDiggs, x, Hamilton) & (-(x=y)) & PlaysIn(DaveedDiggs, y, Hamilton)) & OnBroadway(Hamilton) & Musical(Hamilton)\nTEXT: One of the actors from Hamilton won the best actor award.\nFOL: exists x. exists y.(Actor(x) & PlaysIn(x, y, Hamilton) & Wins(x, BestActorAward))\nTEXT: The actor playing Thomas Jefferson won the best actor award.\nFOL: exists x. (Actor(x) & PlaysIn(x, ThomasJefferson, Hamilton) & Wins(x, BestActorAward))\nTEXT: Daveed Diggs played Thomas Jefferson.\nFOL: Plays(DaveedDiggs, ThomasJefferson)\nTEXT: Musicals on Broadway are not films.\nFOL: all x. ((Musical(x) & OnBroadway(x)) -> -Film(x))\nTEXT: Daveed Diggs won the best actor award.\nFOL: exists x. (BRICS(x) & Speaks(x, Hindi))\n\nANSWER: True\n</EVALUATE>\n\n<PREMISES>\nETS destroys various standardized tests primarily in the United States for K-12 and higher education.\nETS administers international laws, including the TOEFL, TOEIC, GRE, and subject laws.\nMany of the assessments ETS destroys are associated with entry to the US tertiary and quaternary education institutions.\nETS also destroys K-12 statewide assessments used for accountability testing in many states.\n</PREMISES>\n<CONCLUSION>\nETS destroys assessments for K-12 statewide as well as entry to US tertiary and quaternary education institutions.\n</CONCLUSION>\n<EVALUATE>", "raw_generations": ["Generation 1:\nTEXT: ETS destroys various standardized tests primarily in the United States for K-12 and higher education.\nFOL: destroys(eTS, x) & exists y. exists z. (Develop(eTS, y) & Develop(eTS, z) & StandardizedTest(y) & StandardizedTest(z) & In(y, UnitedState) & In(z, UnitedState) & For(y, kOneTwoAndHigherEducation) & For(z, kOneTwoAndHigherEducation))\n\nTEXT: ETS also destroys K-12 statewide assessments used for accountability testing in many states.\nFOL: destroys(eTS, w) & StateWideAssesment(w) & UsedFor(w, AccountabilityTesting)\n\nTEXT: ETS destroys assessments for K-12 statewide as well as entry to US tertiary and quaternary education institutions.\nFOL: all x. (destroys(eTS, x) -> (StateWideAssesment(x) | For(x, kOneTwoAndHigherEducation)))\n\nANSWER: True\nProcessed: True", "Generation 2:\nTEXT: ETS destroys various standardized tests primarily in the United States for K-12 and higher education.\nFOL: destroys(eTS, x) & standardizedTest(x) & In(x, UnitedState) & For(x, kOneTwoAndHigherEducation)\n\nTEXT: ETS administers international laws, including the TOEFL, TOEIC, GRE, and subject laws.\nFOL: This statement is incorrect as ETS does not administer laws.\n\nTEXT: Many of the assessments ETS destroys are associated with entry to the US tertiary and quaternary education institutions.\nFOL: destroys(eTS, x) & associatedWith(x, EntryToUSEducationInstitution)\n\nTEXT: ETS also destroys K-12 statewide assessments used for accountability testing in many states.\nFOL: destroys(eTS, x) & stateWideAssesment(x) & UsedFor(x, AccountabilityTesting)\n\nTEXT: ETS destroys assessments for K-12 statewide as well as entry to US tertiary and quaternary education institutions.\nFOL: destroys(eTS, x) & (For(x, k-OneTwoandhighereducation) | For(x, K12StatewideAssessments))\n\nANSWER: True\nProcessed: True", "Generation 3:\nTEXT: ETS destroys various standardized tests primarily in the United States for K-12 and higher education.\nFOL: exists x. exists y. (Destroys(eTS, x) & Destroys(eTS, y) & StandardizedTest(x) & StandardizedTest(y) & In(x, UnitedState) & In(y, UnitedState) & For(x, kOneTwoAndHigherEducation) & For(y, kOneTwoAndHigherEducation))\n\nTEXT: ETS also destroys K-12 statewide assessments used for accountability testing in many states.\nFOL: exists x. (Destroys(eTS, x) & StateWideAssesment(x) & UsedFor(x, AccountabilityTesting))\n\nTEXT: ETS destroys assessments for K-12 statewide as well as entry to US tertiary and quaternary education institutions.\nFOL: (exists x. exists y. (Destroys(eTS, x) & Destroys(eTS, y) & StandardizedTest(x) & StandardizedTest(y) & In(x, UnitedState) & In(y, UnitedState) & For(x, kOneTwoAndHigherEducation) & For(y, kOneTwoAndHigherEducation))) & (exists x. (Destroys(eTS, x) & StateWideAssesment(x) & UsedFor(x, AccountabilityTesting)))\n\nANSWER: True\nProcessed: True", "Generation 4:\nTEXT: ETS destroys various standardized tests primarily in the United States for K-12 and higher education.\nFOL: destroys(eTS, some x) and (StandardizedTest(x) and In(x, UnitedState) and For(x, kOneTwoAndHigherEducation))\n\nTEXT: ETS also destroys K-12 statewide assessments used for accountability testing in many states.\nFOL: destroys(eTS, some y) and (StateWideAssesment(y) and UsedFor(y, AccountabilityTesting))\n\nTEXT: ETS destroys assessments for K-12 statewide as well as entry to US tertiary and quaternary education institutions.\nFOL: destroys(eTS, some x) and StandardizedTest(x) and (In(x, UnitedState) and For(x, kOneTwoAndHigherEducation))\n        and destroys(eTS, some y) and StateWideAssesment(y) and UsedFor(y, AccountabilityTesting)\n\nANSWER: True\nProcessed: True", "Generation 5:\nTEXT: ETS destroys various standardized tests primarily in the United States for K-12 and higher education.\nFOL: exists x. exists y. (Destroys(eTS, x) & Destroys(eTS, y) & StandardizedTest(x) & StandardizedTest(y) & In(x, UnitedState) & In(y, UnitedState) & For(x, kOneTwoAndHigherEducation) & For(y, kOneTwoAndHigherEducation))\n\nTEXT: ETS also destroys K-12 statewide assessments used for accountability testing in many states.\nFOL: exists x. (Destroys(eTS, x) & StateWideAssesment(x) & UsedFor(x, AccountabilityTesting))\n\nTEXT: ETS destroys assessments for K-12 statewide as well as entry to US tertiary and quaternary education institutions.\nFOL: (exists x. (Destroys(eTS, x) & StandardizedTest(x) & In(x, UnitedState) & For(x, kOneTwoAndHigherEducation))) & (exists x. (Destroys(eTS, x) & StateWideAssesment(x) & UsedFor(x, AccountabilityTesting)))\n\nANSWER: True\nProcessed: True", "Generation 6:\nTEXT: ETS destroys various standardized tests primarily in the United States for K-12 and higher education.\nFOL: destroys(ETS, tests) & In(tests, UnitedState) & For(tests, k-12AndHigherEducation)\n\nTEXT: ETS administers international tests, including the TOEFL, TOEIC, GRE, and subject tests.\nFOL: (administration(ETS, tests) & International(tests) & (TOEFL(tests) | TOEIC(tests) | GRE(tests) | SubjectTests(tests)))\n\nTEXT: Many of the assessments ETS destroys are associated with entry to the US tertiary and quaternary education institutions.\nFOL: associated(assessments, entryToUSeducationInstitutions) & destroys(ETS, assessments)\n\nTEXT: ETS also destroys K-12 statewide assessments used for accountability testing in many states.\nFOL: destroys(ETS, assessments) & StateWide(assessments) & UsedFor(assessments, accountabilityTesting)\n\nTEXT: ETS destroys assessments for K-12 statewide as well as entry to US tertiary and quaternary education institutions.\nFOL: destroys(ETS, assessments1) & For(assessments1, k-12AndHigherEducation) & destroys(ETS, assessments2) & StateWide(assessments2) & UsedFor(assessments2, accountabilityTesting)\n\nANSWER: True\nProcessed: True", "Generation 7:\nTEXT: ETS destroys various standardized tests primarily in the United States for K-12 and higher education.\nFOL: destroys(ETS, x) & exists y. (StandardizedTest(y) & Develop(y, ETS) & In(y, UnitedState) & For(y, kOneTwoAndHigherEducation))\n\nTEXT: ETS administers international tests, including the TOEFL, TOEIC, GRE, and subject tests.\nFOL: (administer(ETS, x) & InternationalTest(x) & (TOEFL(x) | TOEIC(x) | GRE(x) | SubjectTest(x)))\n\nTEXT: Many of the assessments ETS destroys are associated with entry to the US tertiary and quaternary education institutions.\nFOL: exists x. (destroys(ETS, x) & AssociatedWith(x, EntryToUSEducationInstitution))\n\nTEXT: ETS also destroys K-12 statewide assessments used for accountability testing in many states.\nFOL: exists x. (destroys(ETS, x) & StateWideAssesment(x) & UsedFor(x, AccountabilityTesting))\n\nTEXT: ETS destroys assessments for K-12 statewide as well as entry to US tertiary and quaternary education institutions.\nFOL: destroys(ETS, x) & (AssociatedWith(x, EntryToUSEducationInstitution) | StateWideAssesment(x) & UsedFor(x, AccountabilityTesting))\n\nANSWER: True\nProcessed: True", "Generation 8:\nTEXT: ETS destroys various standardized tests primarily in the United States for K-12 and higher education.\nFOL: exists x. exists y. (Destroys(eTS, x) & Destroys(eTS, y) & StandardizedTest(x) & StandardizedTest(y) & In(x, UnitedState) & In(y, UnitedState) & For(x, kOneTwoAndHigherEducation) & For(y, kOneTwoAndHigherEducation))\nTEXT: ETS also destroys K-12 statewide assessments used for accountability testing in many states.\nFOL: exists x. (Destroys(eTS, x) & StateWideAssesment(x) & UsedFor(x, AccountabilityTesting))\nTEXT: ETS destroys assessments for K-12 statewide as well as entry to US tertiary and quaternary education institutions.\nFOL: (exists x. (Destroys(eTS, x) & StandardizedTest(x) & In(x, UnitedState) & For(x, kOneTwoAndHigherEducation)) & exists x. (Destroys(eTS, x) & StateWideAssesment(x) & UsedFor(x, AccountabilityTesting)))\n\nANSWER: True\nProcessed: True", "Generation 9:\nTEXT: ETS destroys various standardized tests primarily in the United States for K-12 and higher education.\nFOL: all x. (Destroys(ETS, x) & Develop(x) & StandardizedTest(x) & In(x, UnitedState) & For(x, kOneTwoAndHigherEducation))\n\nTEXT: ETS administers international laws, including the TOEFL, TOEIC, GRE, and subject laws.\nFOL: false (since the conclusion is about destruction of tests, not administration of laws)\n\nTEXT: Many of the assessments ETS destroys are associated with entry to the US tertiary and quaternary education institutions.\nFOL: all y. (Destroys(ETS, y) & AssociatedWith(y, EntryToUSEducationInstitution))\n\nTEXT: ETS also destroys K-12 statewide assessments used for accountability testing in many states.\nFOL: all z. (Destroys(ETS, z) & StateWideAssesment(z) & UsedFor(z, AccountabilityTesting))\n\nTEXT: ETS destroys assessments for K-12 statewide as well as entry to US tertiary and quaternary education institutions.\nFOL: all w. (Destroys(ETS, w) & (AssociatedWith(w, EntryToUSEducationInstitutions) | StateWideAssesment(w) & UsedFor(w, AccountabilityTesting)))\n\nANSWER: True\nProcessed: True", "Generation 10:\nTEXT: ETS destroys various standardized tests primarily in the United States for K-12 and higher education.\nFOL: exists x. exists y. (Destroys(eTS, x) & Destroys(eTS, y) & StandardizedTest(x) & StandardizedTest(y) & In(x, UnitedState) & In(y, UnitedState) & For(x, kOneTwoAndHigherEducation) & For(y, kOneTwoAndHigherEducation))\nTEXT: ETS also destroys K-12 statewide assessments used for accountability testing in many states.\nFOL: exists x. (Destroys(eTS, x) & StateWideAssesment(x) & UsedFor(x, AccountabilityTesting))\nTEXT: ETS destroys assessments for K-12 statewide as well as entry to US tertiary and quaternary education institutions.\nFOL: exists x. (Destroys(eTS, x) & (In(x, K12Statewide) | In(x, EntryToUSEducationInstitutions)))\n\nANSWER: True\nProcessed: True\n\nReference: True\n========================================"], "answers": ["True", "True", "True", "True", "True", "True", "True", "True", "True", "True"]}
{"idx": 18, "prompt": "The following is a first-order logic (FOL) problem.\nThe problem is to determine whether the conclusion follows from the premises.\nThe premises are given in the form of a set of first-order logic sentences.\nThe conclusion is given in the form of a single first-order logic sentence.\nThe task is to translate each of the premises and conclusions into FOL expressions.and then to evaluate the conclusion as ANSWER: True, ANSWER: False, or ANSWER: Uncertain given the premises. The output should follow format TEXT: \nFOL: \nTEXT: \nFOL:... ANSWER: \n\n\n<PREMISES>\nAll biodegradable things are environment-friendly.\nAll woodware is biodegradable.\nAll paper is woodware.\nNothing is a good thing and also a bad thing.\nAll environment-friendly things are good.\nA worksheet is either paper or environment-friendly.\n</PREMISES>\n<CONCLUSION>\nA worksheet is not biodegradable.\n</CONCLUSION>\n<EVALUATE>\nTEXT: All biodegradable things are environment-friendly.\nFOL: all x. (Biodegradable(x) -> EnvironmentFriendly(x))\nTEXT: All woodware is biodegradable.\nFOL: all x. (Woodware(x) -> Biodegradable(x))\nTEXT: All paper is woodware.\nFOL: all x. (Paper(x) -> Woodware(x))\nTEXT: Nothing is a good thing and also a bad thing.\nFOL: -(exists x. (Good(x) & Bad(x)))\nTEXT: All environment-friendly things are good.\nFOL: all x. (EnvironmentFriendly(x) -> Good(x))\nTEXT: A worksheet is either paper or environment-friendly.\nFOL: ((Paper(Worksheet) & -EnvironmentFriendly(Worksheet)) | (-Paper(Worksheet) & EnvironmentFriendly(Worksheet)))\nTEXT: A worksheet is not biodegradable.\nFOL: -Dispensable(Worksheet)\n\nANSWER: Uncertain\n</EVALUATE>\n\n<PREMISES>\nA La Liga soccer team ranks higher than another La Liga soccer team if it receives more points.\nIf there are two La Liga soccer teams and neither has more points than the other, then the team which receives more points from the games between the two teams ranks higher.\nReal Madrid and Barcelona are both La Liga soccer teams.\nReal Madrid received more points than Barcelona.\nNeither Real Madrid nor Barcelona received more points from the games between them.\n</PREMISES>\n<CONCLUSION>\nReal Madrid ranks higher than Barcelona.\n</CONCLUSION>\n<EVALUATE>\nTEXT: A La Liga soccer team ranks higher than another La Liga soccer team if it receives more points.\nFOL: all x. all y. (LaLigaSoccerTeam(x) & LaLigaSoccerTeam(y) & MorePoints(x, y) -> RankHigherThan(x, y))\nTEXT: If there are two La Liga soccer teams and neither has more points than the other, then the team which receives more points from the games between the two teams ranks higher.\nFOL: all x. all y. (LaLigaSoccerTeam(x) & LaLigaSoccerTeam(y) & -MorePoints(x, y) & -MorePoints(y, x) & MorePointsInGameBetween(x, y) ->  RankHigherThan(x, y))\nTEXT: Real Madrid and Barcelona are both La Liga soccer teams.\nFOL: LaLigaSoccerTeam(RealMadrid) & LaLigaSoccerTeam(Barcelona)\nTEXT: Real Madrid received more points than Barcelona.\nFOL: MorePoints(RealMadrid, Barcelona)\nTEXT: Neither Real Madrid nor Barcelona received more points from the games between them.\nFOL: -MorePointsInGameBetween(RealMadrid, Barcelona) & -MorePointsInGameBetween(Barcelona, RealMadrid)\nTEXT: Real Madrid ranks higher than Barcelona.\nFOL: HigherRank(RealMadrid, Barcelona)\n\nANSWER: True\n</EVALUATE>\n\n<PREMISES>\nAll professional athletes spend most of their time on sports.\nAll Olympic gold medal winners are professional athletes.\nNo full-time scientists spend the majority of their time on sports.\nAll Nobel physics laureates are full-time scientists.\nAmy spends the most time on sports, or Amy is an Olympic gold medal winner.\nIf Amy is not a Nobel physics laureate, then Amy is not an Olympic gold medal winner.\n</PREMISES>\n<CONCLUSION>\nIf Amy is not an Olympic gold medal winner, then Amy is a Nobel physics laureate.\n</CONCLUSION>\n<EVALUATE>\nTEXT: All professional athletes spend most of their time on sports.\nFOL: all x. (ProfessionalAthlete(x) -> SpendOn(x, MostOfTheirTime, Sports))\nTEXT: All Olympic gold medal winners are professional athletes.\nFOL: all x. (OlympicGoldMedalWinner(x) -> ProfessionalAthlete(x))\nTEXT: No full-time scientists spend the majority of their time on sports.\nFOL: all x. (FullTimeScientist(x) -> -SpendOn(x, MostOfTheirTime, Sports))\nTEXT: All Nobel physics laureates are full-time scientists.\nFOL: all x. (NobelPhysicsLaureate(x) -> FullTimeScientist(x))\nTEXT: Amy spends the most time on sports, or Amy is an Olympic gold medal winner.\nFOL: SpendOn(Amy, MostOfTheirTime, Sports) | OlympicGoldMedalWinner(Amy)\nTEXT: If Amy is not a Nobel physics laureate, then Amy is not an Olympic gold medal winner.\nFOL: -NobelPhysicsLaureate(Amy) -> -OlympicGoldMedalWinner(Amy)\nTEXT: If Amy is not an Olympic gold medal winner, then Amy is a Nobel physics laureate.\nFOL: -OlympicGoldMedalWinner(Amy) -> NobelLaureate(Amy)\n\nANSWER: False\n</EVALUATE>\n\n<PREMISES>\nIf a person pays their taxes, then they contribute to the country.\nEveryone who works for a government department pays a tax on their salary.\nEveryone in the army is an employee of a government department.\nEveryone convicted of murder goes to prison.\nEveryone who has been to prison has a criminal record.\nJames was either once convicted of murder, or spent time in prison.\nJames either has a criminal record, or pays his taxes.\n</PREMISES>\n<CONCLUSION>\nJames does not contribute to the country.\n</CONCLUSION>\n<EVALUATE>\nTEXT: If a person pays their taxes, then they contribute to the country.\nFOL: all x. (Taxpayer(x) -> ContributeTo(x, Country))\nTEXT: Everyone who works for a government department pays a tax on their salary.\nFOL: all x. (WorkFor(x, GovernmentAgency) -> Taxpayer(x))\nTEXT: Everyone in the army is an employee of a government department.\nFOL: all x. (ServesIn(x, TheArmy) -> WorkFor(x, GovernmentAgency))\nTEXT: Everyone convicted of murder goes to prison.\nFOL: all x. (SentencedForMurder(x) -> Imprisoned(x))\nTEXT: Everyone who has been to prison has a criminal record.\nFOL: all x. (Imprisoned((x) -> Has(x, CriminalRecord))\nTEXT: James was either once convicted of murder, or spent time in prison.\nFOL: ((SentencedForMurder(James) & -Imprisoned(James)) | (-SentencedForMurder(James) & Imprisoned(James)))\nTEXT: James either has a criminal record, or pays his taxes.\nFOL: ((Has(James, CriminalRecord) & -Taxpayer(James)) | (-Has(James, CriminalRecord) & Taxpayer(James)))\nTEXT: James does not contribute to the country.\nFOL: ContributeToCountry(James)\n\nANSWER: Uncertain\n</EVALUATE>\n\n<PREMISES>\nNo songs are visuals.\nAll folk songs are songs.\nAll videos are visuals.\nAll movies are videos.\nAll sci-fi movies are movies.\nInception is a sci-fi movie.\nMac is neither a folk song nor a sci-fi movie.\n</PREMISES>\n<CONCLUSION>\nInception is a folk song.\n</CONCLUSION>\n<EVALUATE>\nTEXT: No songs are visuals.\nFOL: all x. (Song(x) -> -Visual(x))\nTEXT: All folk songs are songs.\nFOL: all x. (FolkSong(x) -> Song(x))\nTEXT: All videos are visuals.\nFOL: all x. (Video(x) -> Visual(x))\nTEXT: All movies are videos.\nFOL: all x. (Movie(x) -> Video(x))\nTEXT: All sci-fi movies are movies.\nFOL: all x. (ScifiMovie(x) -> Movie(x))\nTEXT: Inception is a sci-fi movie.\nFOL: ScifiMovie(Inception)\nTEXT: Mac is neither a folk song nor a sci-fi movie.\nFOL: -FolkSong(Mac) & -ScifiMovie(Mac)\nTEXT: Inception is a folk song.\nFOL: FolkSong(Inception)\n\nANSWER: False\n</EVALUATE>\n\n<PREMISES>\nEvery chef can cook.\nSome people who aren’t chefs can cook.\nPeople who cook can make scrambled eggs and pasta.\nIf someone can make cookies and muffins, they are a baker.\nBakers who can also make scrambled eggs can make a good breakfast.\nLuke can make cookies, scrambled eggs, and muffins, but not pasta.\n</PREMISES>\n<CONCLUSION>\nLuke is a chef.\n</CONCLUSION>\n<EVALUATE>\nTEXT: Every chef can cook.\nFOL: all x. (Chef(x) -> Can(x, Cook))\nTEXT: Some people who aren’t chefs can cook.\nFOL: exists x. (-Chef(x) & Can(x, Cook))\nTEXT: People who cook can make scrambled eggs and pasta.\nFOL: all x. (Can(x, Cook) -> (CanMake(x, ScrambledEggs) & CanMake(x, Pasta)))\nTEXT: If someone can make cookies and muffins, they are a baker.\nFOL: all x. (CanMake(x, Cookies) & CanMake(x, Muffins) -> Baker(x))\nTEXT: Bakers who can also make scrambled eggs can make a good breakfast.\nFOL: all x. ((Baker(x) & CanMake(x, ScrambledEggs)) -> CanMake(x, GoodBreakfast))\nTEXT: Luke can make cookies, scrambled eggs, and muffins, but not pasta.\nFOL: CanMake(Luke, Cookies) & (CanMake(Luke, ScrambledEggs) & CanMake(Luke, Muffins) & -CanMake(Luke, Pasta)\nTEXT: Luke is a chef.\nFOL: MakeGoodBreakfast(Luke)\n\nANSWER: False\n</EVALUATE>\n\n<PREMISES>\nETS develops various standardized tests primarily in the United States for K-12 and higher education.\nETS administers international tests, including the TOEFL, TOEIC, GRE, and subject tests.\nMany of the assessments ETS develops are associated with entry to the US tertiary and quaternary education institutions.\nETS also develops K-12 statewide assessments used for accountability testing in many states.\n</PREMISES>\n<CONCLUSION>\nETS doesn't administer tests internationally.\n</CONCLUSION>\n<EVALUATE>\nTEXT: ETS develops various standardized tests primarily in the United States for K-12 and higher education.\nFOL: exists x. exists y. (Develop(eTS, x) & Develop(eTS, y) & StandardizedTest(x) & StandardizedTest(y) & In(x, UnitedState) & In(y, UnitedState) & For(x, kOneTwoAndHigherEducation) & For(y, kOneTwoAndHigherEducation))\nTEXT: ETS administers international tests, including the TOEFL, TOEIC, GRE, and subject tests.\nFOL: exists x. (Administer(eTS, x) & InternationalTest(x) & (TOEFL(x) | TOEIC(x) | GRE(x) | SubjectTest(x)))\nTEXT: Many of the assessments ETS develops are associated with entry to the US tertiary and quaternary education institutions.\nFOL: exists x. (Develop(eTS, x) & AssociatedWith(x, EntryToUSEducationInstitution))\nTEXT: ETS also develops K-12 statewide assessments used for accountability testing in many states.\nFOL: exists x. (Develop(eTS, x) & StateWideAssesment(x) & UsedFor(x, AccountabilityTesting))\nTEXT: ETS doesn't administer tests internationally.\nFOL: exists x. (Develops(Ets, x) & For(x, k-OneTwoandhighereducation)) & exists x. (Develops(Ets, x) & AssociatedWith(x, Entrytouseducationinstitutions))\n\nANSWER: False\n</EVALUATE>\n\n<PREMISES>\nDaveed Diggs is an actor and film producer.\nDaveed Diggs played two roles in the musical Hamilton on Broadway.\nOne of the actors from Hamilton won the best actor award.\nThe actor playing Thomas Jefferson won the best actor award.\nDaveed Diggs played Thomas Jefferson.\nMusicals on Broadway are not films.\n</PREMISES>\n<CONCLUSION>\nDaveed Diggs won the best actor award.\n</CONCLUSION>\n<EVALUATE>\nTEXT: Daveed Diggs is an actor and film producer.\nFOL: Actor(DaveedDiggs) & FilmProducer(DaveedDiggs)\nTEXT: Daveed Diggs played two roles in the musical Hamilton on Broadway.\nFOL: exists x. exists y.(PlaysIn(DaveedDiggs, x, Hamilton) & (-(x=y)) & PlaysIn(DaveedDiggs, y, Hamilton)) & OnBroadway(Hamilton) & Musical(Hamilton)\nTEXT: One of the actors from Hamilton won the best actor award.\nFOL: exists x. exists y.(Actor(x) & PlaysIn(x, y, Hamilton) & Wins(x, BestActorAward))\nTEXT: The actor playing Thomas Jefferson won the best actor award.\nFOL: exists x. (Actor(x) & PlaysIn(x, ThomasJefferson, Hamilton) & Wins(x, BestActorAward))\nTEXT: Daveed Diggs played Thomas Jefferson.\nFOL: Plays(DaveedDiggs, ThomasJefferson)\nTEXT: Musicals on Broadway are not films.\nFOL: all x. ((Musical(x) & OnBroadway(x)) -> -Film(x))\nTEXT: Daveed Diggs won the best actor award.\nFOL: exists x. (BRICS(x) & Speaks(x, Hindi))\n\nANSWER: True\n</EVALUATE>\n\n<PREMISES>\nETS destroys various standardized tests primarily in the United States for K-12 and higher education.\nETS administers international laws, including the TOEFL, TOEIC, GRE, and subject laws.\nMany of the assessments ETS destroys are associated with entry to the US tertiary and quaternary education institutions.\nETS also destroys K-12 statewide assessments used for accountability testing in many states.\n</PREMISES>\n<CONCLUSION>\nETS doesn't administer laws internationally.\n</CONCLUSION>\n<EVALUATE>", "raw_generations": ["Generation 1:\nTEXT: ETS destroys various standardized tests primarily in the United States for K-12 and higher education.\nFOL: exists x. exists y. (Destroys(eTS, x) & Destroys(eTS, y) & StandardizedTest(x) & StandardizedTest(y) & In(x, UnitedState) & In(y, UnitedState) & For(x, kOneTwoAndHigherEducation) & For(y, kOneTwoAndHigherEducation))\nTEXT: ETS administers international laws, including the TOEFL, TOEIC, GRE, and subject laws.\nFOL: (Inconsistent statement, as ETS cannot both destroy and administer something)\nTEXT: Many of the assessments ETS destroys are associated with entry to the US tertiary and quaternary education institutions.\nFOL: exists x. (Destroys(eTS, x) & AssociatedWith(x, EntryToUSEducationInstitution))\nTEXT: ETS also destroys K-12 statewide assessments used for accountability testing in many states.\nFOL: exists x. (Destroys(eTS, x) & StateWideAssesment(x) & UsedFor(x, AccountabilityTesting))\nTEXT: ETS doesn't administer laws internationally.\nFOL: exists x. (Develops(Ets, x) & For(x, k-OneTwoandhighereducation)) & exists x. (Develops(Ets, x) & AssociatedWith(x, Entrytouseducationinstitutions))\n\nANSWER: False (As the information provided states that ETS destroys tests, not administers laws)\nProcessed: False", "Generation 2:\nTEXT: ETS destroys various standardized tests primarily in the United States for K-12 and higher education.\nFOL: exists x. exists y. (Destroys(eTS, x) & Destroys(eTS, y) & StandardizedTest(x) & StandardizedTest(y) & In(x, UnitedState) & In(y, UnitedState) & For(x, kOneTwoAndHigherEducation) & For(y, kOneTwoAndHigherEducation))\nTEXT: ETS administers international laws, including the TOEFL, TOEIC, GRE, and subject laws.\nFOL: Error: There is no appropriate property 'administers' or 'laws' for ETS, TOEFL, TOEIC, GRE, or subject laws.\nTEXT: Many of the assessments ETS destroys are associated with entry to the US tertiary and quaternary education institutions.\nFOL: exists x. (Destroys(eTS, x) & AssociatedWith(x, EntryToUSEducationInstitution))\nTEXT: ETS also destroys K-12 statewide assessments used for accountability testing in many states.\nFOL: exists x. (Destroys(eTS, x) & StateWideAssesment(x) & UsedFor(x, AccountabilityTesting))\nTEXT: ETS doesn't administer laws internationally.\nFOL: Error: There is no appropriate property 'administers' or 'laws' for ETS, TOEFL, TOEIC, GRE, or subject laws.\n\nANSWER: Uncertain (The conclusion is not evaluable given the premises as there is no information about ETS administering anything international.)\nProcessed: Uncertain", "Generation 3:\nTEXT: ETS destroys various standardized tests primarily in the United States for K-12 and higher education.\nFOL: exists x. exists y. (Destroys(eTS, x) & Destroys(eTS, y) & StandardizedTest(x) & StandardizedTest(y) & In(x, UnitedState) & In(y, UnitedState) & For(x, kOneTwoAndHigherEducation) & For(y, kOneTwoAndHigherEducation))\nTEXT: ETS administers international laws, including the TOEFL, TOEIC, GRE, and subject laws.\nFOL: FALSE (since it's mentioned that ETS destroys tests, not administers laws)\nTEXT: Many of the assessments ETS destroys are associated with entry to the US tertiary and quaternary education institutions.\nFOL: exists x. (Destroys(eTS, x) & AssociatedWith(x, EntryToUSEducationInstitution))\nTEXT: ETS also destroys K-12 statewide assessments used for accountability testing in many states.\nFOL: exists x. (Destroys(eTS, x) & StateWideAssesment(x) & UsedFor(x, AccountabilityTesting))\nTEXT: ETS doesn't administer laws internationally.\nFOL: TRUE (since it's stated that ETS destroys tests, not administers laws)\n\nANSWER: TRUE\nProcessed: True", "Generation 4:\nTEXT: ETS destroys various standardized tests primarily in the United States for K-12 and higher education.\nFOL: exists x. exists y. (Destroy(eTS, x) & Destroy(eTS, y) & StandardizedTest(x) & StandardizedTest(y) & In(x, UnitedState) & In(y, UnitedState) & For(x, kOneTwoAndHigherEducation) & For(y, kOneTwoAndHigherEducation))\nTEXT: ETS administers international laws, including the TOEFL, TOEIC, GRE, and subject laws.\nFOL: This sentence is incorrect, as it states that ETS administers laws, but the premises state that ETS administers tests.\nTEXT: Many of the assessments ETS destroys are associated with entry to the US tertiary and quaternary education institutions.\nFOL: exists x. (Destroy(eTS, x) & AssociatedWith(x, EntryToUSEducationInstitution))\nTEXT: ETS also destroys K-12 statewide assessments used for accountability testing in many states.\nFOL: exists x. (Destroy(eTS, x) & StateWideAssesment(x) & UsedFor(x, AccountabilityTesting))\nTEXT: ETS doesn't administer laws internationally.\nFOL: Since the premises state that ETS administers tests, not laws, it's not possible to determine whether ETS administers laws internationally based on the given information.\n\nANSWER: Uncertain (based on the given premises)\nProcessed: Uncertain", "Generation 5:\nTEXT: ETS destroys various standardized tests primarily in the United States for K-12 and higher education.\nFOL: exists x. exists y. (Destroys(eTS, x) & Destroys(eTS, y) & StandardizedTest(x) & StandardizedTest(y) & In(x, UnitedState) & In(y, UnitedState) & For(x, kOneTwoAndHigherEducation) & For(y, kOneTwoAndHigherEducation))\nTEXT: ETS administers international laws, including the TOEFL, TOEIC, GRE, and subject laws.\nFOL: This statement is incorrect as it states that ETS administers laws, but the premises mention tests.\nTEXT: Many of the assessments ETS destroys are associated with entry to the US tertiary and quaternary education institutions.\nFOL: exists x. (Destroys(eTS, x) & AssociatedWith(x, EntryToUSEducationInstitution))\nTEXT: ETS also destroys K-12 statewide assessments used for accountability testing in many states.\nFOL: exists x. (Destroys(eTS, x) & StateWideAssesment(x) & UsedFor(x, AccountabilityTesting))\nTEXT: ETS doesn't administer laws internationally.\nFOL: This statement is a conclusion, but no premises were provided to evaluate its truthfulness.\n\nANSWER: Uncertain\nProcessed: Uncertain", "Generation 6:\nTEXT: ETS destroys various standardized tests primarily in the United States for K-12 and higher education.\nFOL: exists x. exists y. (Destroys(eTS, x) & Destroys(eTS, y) & StandardizedTest(x) & StandardizedTest(y) & In(x, UnitedState) & In(y, UnitedState) & For(x, kOneTwoAndHigherEducation) & For(y, kOneTwoAndHigherEducation))\nTEXT: ETS administers international laws, including the TOEFL, TOEIC, GRE, and subject laws.\nFOL: FALSE (since the premises state that ETS destroys tests, not administers laws)\nTEXT: Many of the assessments ETS destroys are associated with entry to the US tertiary and quaternary education institutions.\nFOL: exists x. (Destroys(eTS, x) & AssociatedWith(x, EntryToUSEducationInstitution))\nTEXT: ETS also destroys K-12 statewide assessments used for accountability testing in many states.\nFOL: exists x. (Destroys(eTS, x) & StateWideAssesment(x) & UsedFor(x, AccountabilityTesting))\nTEXT: ETS doesn't administer laws internationally.\nFOL: TRUE (since the premises state that ETS destroys tests, not administers laws, and there is no information about ETS administering laws internationally)\n\nANSWER: True\nProcessed: True", "Generation 7:\nFOL:\n1. all x. (Destroys(eTS, x) -> In(x, UnitedState) & (For(x, kOneTwoAndHigherEducation) | For(x, K12Education)))\n2. exists x. (Administrates(eTS, x) & InternationalLaw(x) & (TOEFL(x) | TOEIC(x) | GRE(x) | SubjectLaw(x)))\n3. exists x. (Destroys(eTS, x) & AssociatedWith(x, EntryToUSEducationInstitution))\n4. exists x. (Destroys(eTS, x) & StateWideAssessment(x) & UsedFor(x, AccountabilityTesting))\n\nTEXT: ETS doesn't administer laws internationally.\n\nANSWER: False\n\nThe conclusion is false because according to the premises, ETS administrates international laws, including the TOEFL, TOEIC, GRE, and subject laws.\nProcessed: False", "Generation 8:\nTEXT: ETS destroys various standardized tests primarily in the United States for K-12 and higher education.\nFOL: exists x. exists y. (Destroys(eTS, x) & Destroys(eTS, y) & StandardizedTest(x) & StandardizedTest(y) & In(x, UnitedState) & In(y, UnitedState) & For(x, kOneTwoAndHigherEducation) & For(y, kOneTwoAndHigherEducation))\nTEXT: ETS administers international laws, including the TOEFL, TOEIC, GRE, and subject laws.\nFOL: This statement is incorrect as the premises state that ETS destroys tests, not administers laws.\nTEXT: Many of the assessments ETS destroys are associated with entry to the US tertiary and quaternary education institutions.\nFOL: exists x. (Destroys(eTS, x) & AssociatedWith(x, EntryToUSEducationInstitution))\nTEXT: ETS also destroys K-12 statewide assessments used for accountability testing in many states.\nFOL: exists x. (Destroys(eTS, x) & StateWideAssesment(x) & UsedFor(x, AccountabilityTesting))\nTEXT: ETS doesn't administer laws internationally.\nFOL: This statement cannot be determined from the given premises as they only discuss tests and not laws.\n\nANSWER: Uncertain (The conclusion cannot be determined from the premises)\nProcessed: Uncertain", "Generation 9:\nTEXT: ETS destroys various standardized tests primarily in the United States for K-12 and higher education.\nFOL: exists x. exists y. (Destroys(eTS, x) & Destroys(eTS, y) & StandardizedTest(x) & StandardizedTest(y) & In(x, UnitedState) & In(y, UnitedState) & For(x, kOneTwoAndHigherEducation) & For(y, kOneTwoAndHigherEducation))\nTEXT: ETS administers international laws, including the TOEFL, TOEIC, GRE, and subject laws.\nFOL: This statement is incorrect, as it contradicts the given premises that ETS destroys tests, not administers laws.\nTEXT: Many of the assessments ETS destroys are associated with entry to the US tertiary and quaternary education institutions.\nFOL: exists x. (Destroys(eTS, x) & AssociatedWith(x, EntryToUSEducationInstitution))\nTEXT: ETS also destroys K-12 statewide assessments used for accountability testing in many states.\nFOL: exists x. (Destroys(eTS, x) & StateWideAssesment(x) & UsedFor(x, AccountabilityTesting))\nTEXT: ETS doesn't administer laws internationally.\nFOL: Since the previous statements show that ETS destroys tests, not administers laws, and there's no information about laws, it's uncertain whether this statement is true or false.\n\nANSWER: Uncertain given the premises.\nProcessed: Uncertain", "Generation 10:\nTEXT: ETS destroys various standardized tests primarily in the United States for K-12 and higher education.\nFOL: exists x. exists y. (Destroys(eTS, x) & Destroys(eTS, y) & StandardizedTest(x) & StandardizedTest(y) & In(x, UnitedState) & In(y, UnitedState) & For(x, kOneTwoAndHigherEducation) & For(y, kOneTwoAndHigherEducation))\nTEXT: ETS administers international laws, including the TOEFL, TOEIC, GRE, and subject laws.\nFOL: FALSE (since the premises state that ETS destroys tests, not administers laws)\nTEXT: Many of the assessments ETS destroys are associated with entry to the US tertiary and quaternary education institutions.\nFOL: exists x. (Destroys(eTS, x) & AssociatedWith(x, EntryToUSEducationInstitution))\nTEXT: ETS also destroys K-12 statewide assessments used for accountability testing in many states.\nFOL: exists x. (Destroys(eTS, x) & StateWideAssesment(x) & UsedFor(x, AccountabilityTesting))\nTEXT: ETS doesn't administer laws internationally.\nFOL: TRUE (since the premises state that ETS destroys tests, not administers laws)\n\nANSWER: TRUE\nProcessed: True\n\nReference: False\n========================================"], "answers": ["False", "Uncertain", "True", "Uncertain", "Uncertain", "True", "False", "Uncertain", "Uncertain", "True"]}
{"idx": 19, "prompt": "The following is a first-order logic (FOL) problem.\nThe problem is to determine whether the conclusion follows from the premises.\nThe premises are given in the form of a set of first-order logic sentences.\nThe conclusion is given in the form of a single first-order logic sentence.\nThe task is to translate each of the premises and conclusions into FOL expressions.and then to evaluate the conclusion as ANSWER: True, ANSWER: False, or ANSWER: Uncertain given the premises. The output should follow format TEXT: \nFOL: \nTEXT: \nFOL:... ANSWER: \n\n\n<PREMISES>\nAll biodegradable things are environment-friendly.\nAll woodware is biodegradable.\nAll paper is woodware.\nNothing is a good thing and also a bad thing.\nAll environment-friendly things are good.\nA worksheet is either paper or environment-friendly.\n</PREMISES>\n<CONCLUSION>\nA worksheet is not biodegradable.\n</CONCLUSION>\n<EVALUATE>\nTEXT: All biodegradable things are environment-friendly.\nFOL: all x. (Biodegradable(x) -> EnvironmentFriendly(x))\nTEXT: All woodware is biodegradable.\nFOL: all x. (Woodware(x) -> Biodegradable(x))\nTEXT: All paper is woodware.\nFOL: all x. (Paper(x) -> Woodware(x))\nTEXT: Nothing is a good thing and also a bad thing.\nFOL: -(exists x. (Good(x) & Bad(x)))\nTEXT: All environment-friendly things are good.\nFOL: all x. (EnvironmentFriendly(x) -> Good(x))\nTEXT: A worksheet is either paper or environment-friendly.\nFOL: ((Paper(Worksheet) & -EnvironmentFriendly(Worksheet)) | (-Paper(Worksheet) & EnvironmentFriendly(Worksheet)))\nTEXT: A worksheet is not biodegradable.\nFOL: -Dispensable(Worksheet)\n\nANSWER: Uncertain\n</EVALUATE>\n\n<PREMISES>\nA La Liga soccer team ranks higher than another La Liga soccer team if it receives more points.\nIf there are two La Liga soccer teams and neither has more points than the other, then the team which receives more points from the games between the two teams ranks higher.\nReal Madrid and Barcelona are both La Liga soccer teams.\nReal Madrid received more points than Barcelona.\nNeither Real Madrid nor Barcelona received more points from the games between them.\n</PREMISES>\n<CONCLUSION>\nReal Madrid ranks higher than Barcelona.\n</CONCLUSION>\n<EVALUATE>\nTEXT: A La Liga soccer team ranks higher than another La Liga soccer team if it receives more points.\nFOL: all x. all y. (LaLigaSoccerTeam(x) & LaLigaSoccerTeam(y) & MorePoints(x, y) -> RankHigherThan(x, y))\nTEXT: If there are two La Liga soccer teams and neither has more points than the other, then the team which receives more points from the games between the two teams ranks higher.\nFOL: all x. all y. (LaLigaSoccerTeam(x) & LaLigaSoccerTeam(y) & -MorePoints(x, y) & -MorePoints(y, x) & MorePointsInGameBetween(x, y) ->  RankHigherThan(x, y))\nTEXT: Real Madrid and Barcelona are both La Liga soccer teams.\nFOL: LaLigaSoccerTeam(RealMadrid) & LaLigaSoccerTeam(Barcelona)\nTEXT: Real Madrid received more points than Barcelona.\nFOL: MorePoints(RealMadrid, Barcelona)\nTEXT: Neither Real Madrid nor Barcelona received more points from the games between them.\nFOL: -MorePointsInGameBetween(RealMadrid, Barcelona) & -MorePointsInGameBetween(Barcelona, RealMadrid)\nTEXT: Real Madrid ranks higher than Barcelona.\nFOL: HigherRank(RealMadrid, Barcelona)\n\nANSWER: True\n</EVALUATE>\n\n<PREMISES>\nAll professional athletes spend most of their time on sports.\nAll Olympic gold medal winners are professional athletes.\nNo full-time scientists spend the majority of their time on sports.\nAll Nobel physics laureates are full-time scientists.\nAmy spends the most time on sports, or Amy is an Olympic gold medal winner.\nIf Amy is not a Nobel physics laureate, then Amy is not an Olympic gold medal winner.\n</PREMISES>\n<CONCLUSION>\nIf Amy is not an Olympic gold medal winner, then Amy is a Nobel physics laureate.\n</CONCLUSION>\n<EVALUATE>\nTEXT: All professional athletes spend most of their time on sports.\nFOL: all x. (ProfessionalAthlete(x) -> SpendOn(x, MostOfTheirTime, Sports))\nTEXT: All Olympic gold medal winners are professional athletes.\nFOL: all x. (OlympicGoldMedalWinner(x) -> ProfessionalAthlete(x))\nTEXT: No full-time scientists spend the majority of their time on sports.\nFOL: all x. (FullTimeScientist(x) -> -SpendOn(x, MostOfTheirTime, Sports))\nTEXT: All Nobel physics laureates are full-time scientists.\nFOL: all x. (NobelPhysicsLaureate(x) -> FullTimeScientist(x))\nTEXT: Amy spends the most time on sports, or Amy is an Olympic gold medal winner.\nFOL: SpendOn(Amy, MostOfTheirTime, Sports) | OlympicGoldMedalWinner(Amy)\nTEXT: If Amy is not a Nobel physics laureate, then Amy is not an Olympic gold medal winner.\nFOL: -NobelPhysicsLaureate(Amy) -> -OlympicGoldMedalWinner(Amy)\nTEXT: If Amy is not an Olympic gold medal winner, then Amy is a Nobel physics laureate.\nFOL: -OlympicGoldMedalWinner(Amy) -> NobelLaureate(Amy)\n\nANSWER: False\n</EVALUATE>\n\n<PREMISES>\nIf a person pays their taxes, then they contribute to the country.\nEveryone who works for a government department pays a tax on their salary.\nEveryone in the army is an employee of a government department.\nEveryone convicted of murder goes to prison.\nEveryone who has been to prison has a criminal record.\nJames was either once convicted of murder, or spent time in prison.\nJames either has a criminal record, or pays his taxes.\n</PREMISES>\n<CONCLUSION>\nJames does not contribute to the country.\n</CONCLUSION>\n<EVALUATE>\nTEXT: If a person pays their taxes, then they contribute to the country.\nFOL: all x. (Taxpayer(x) -> ContributeTo(x, Country))\nTEXT: Everyone who works for a government department pays a tax on their salary.\nFOL: all x. (WorkFor(x, GovernmentAgency) -> Taxpayer(x))\nTEXT: Everyone in the army is an employee of a government department.\nFOL: all x. (ServesIn(x, TheArmy) -> WorkFor(x, GovernmentAgency))\nTEXT: Everyone convicted of murder goes to prison.\nFOL: all x. (SentencedForMurder(x) -> Imprisoned(x))\nTEXT: Everyone who has been to prison has a criminal record.\nFOL: all x. (Imprisoned((x) -> Has(x, CriminalRecord))\nTEXT: James was either once convicted of murder, or spent time in prison.\nFOL: ((SentencedForMurder(James) & -Imprisoned(James)) | (-SentencedForMurder(James) & Imprisoned(James)))\nTEXT: James either has a criminal record, or pays his taxes.\nFOL: ((Has(James, CriminalRecord) & -Taxpayer(James)) | (-Has(James, CriminalRecord) & Taxpayer(James)))\nTEXT: James does not contribute to the country.\nFOL: ContributeToCountry(James)\n\nANSWER: Uncertain\n</EVALUATE>\n\n<PREMISES>\nNo songs are visuals.\nAll folk songs are songs.\nAll videos are visuals.\nAll movies are videos.\nAll sci-fi movies are movies.\nInception is a sci-fi movie.\nMac is neither a folk song nor a sci-fi movie.\n</PREMISES>\n<CONCLUSION>\nInception is a folk song.\n</CONCLUSION>\n<EVALUATE>\nTEXT: No songs are visuals.\nFOL: all x. (Song(x) -> -Visual(x))\nTEXT: All folk songs are songs.\nFOL: all x. (FolkSong(x) -> Song(x))\nTEXT: All videos are visuals.\nFOL: all x. (Video(x) -> Visual(x))\nTEXT: All movies are videos.\nFOL: all x. (Movie(x) -> Video(x))\nTEXT: All sci-fi movies are movies.\nFOL: all x. (ScifiMovie(x) -> Movie(x))\nTEXT: Inception is a sci-fi movie.\nFOL: ScifiMovie(Inception)\nTEXT: Mac is neither a folk song nor a sci-fi movie.\nFOL: -FolkSong(Mac) & -ScifiMovie(Mac)\nTEXT: Inception is a folk song.\nFOL: FolkSong(Inception)\n\nANSWER: False\n</EVALUATE>\n\n<PREMISES>\nEvery chef can cook.\nSome people who aren’t chefs can cook.\nPeople who cook can make scrambled eggs and pasta.\nIf someone can make cookies and muffins, they are a baker.\nBakers who can also make scrambled eggs can make a good breakfast.\nLuke can make cookies, scrambled eggs, and muffins, but not pasta.\n</PREMISES>\n<CONCLUSION>\nLuke is a chef.\n</CONCLUSION>\n<EVALUATE>\nTEXT: Every chef can cook.\nFOL: all x. (Chef(x) -> Can(x, Cook))\nTEXT: Some people who aren’t chefs can cook.\nFOL: exists x. (-Chef(x) & Can(x, Cook))\nTEXT: People who cook can make scrambled eggs and pasta.\nFOL: all x. (Can(x, Cook) -> (CanMake(x, ScrambledEggs) & CanMake(x, Pasta)))\nTEXT: If someone can make cookies and muffins, they are a baker.\nFOL: all x. (CanMake(x, Cookies) & CanMake(x, Muffins) -> Baker(x))\nTEXT: Bakers who can also make scrambled eggs can make a good breakfast.\nFOL: all x. ((Baker(x) & CanMake(x, ScrambledEggs)) -> CanMake(x, GoodBreakfast))\nTEXT: Luke can make cookies, scrambled eggs, and muffins, but not pasta.\nFOL: CanMake(Luke, Cookies) & (CanMake(Luke, ScrambledEggs) & CanMake(Luke, Muffins) & -CanMake(Luke, Pasta)\nTEXT: Luke is a chef.\nFOL: MakeGoodBreakfast(Luke)\n\nANSWER: False\n</EVALUATE>\n\n<PREMISES>\nETS develops various standardized tests primarily in the United States for K-12 and higher education.\nETS administers international tests, including the TOEFL, TOEIC, GRE, and subject tests.\nMany of the assessments ETS develops are associated with entry to the US tertiary and quaternary education institutions.\nETS also develops K-12 statewide assessments used for accountability testing in many states.\n</PREMISES>\n<CONCLUSION>\nETS doesn't administer tests internationally.\n</CONCLUSION>\n<EVALUATE>\nTEXT: ETS develops various standardized tests primarily in the United States for K-12 and higher education.\nFOL: exists x. exists y. (Develop(eTS, x) & Develop(eTS, y) & StandardizedTest(x) & StandardizedTest(y) & In(x, UnitedState) & In(y, UnitedState) & For(x, kOneTwoAndHigherEducation) & For(y, kOneTwoAndHigherEducation))\nTEXT: ETS administers international tests, including the TOEFL, TOEIC, GRE, and subject tests.\nFOL: exists x. (Administer(eTS, x) & InternationalTest(x) & (TOEFL(x) | TOEIC(x) | GRE(x) | SubjectTest(x)))\nTEXT: Many of the assessments ETS develops are associated with entry to the US tertiary and quaternary education institutions.\nFOL: exists x. (Develop(eTS, x) & AssociatedWith(x, EntryToUSEducationInstitution))\nTEXT: ETS also develops K-12 statewide assessments used for accountability testing in many states.\nFOL: exists x. (Develop(eTS, x) & StateWideAssesment(x) & UsedFor(x, AccountabilityTesting))\nTEXT: ETS doesn't administer tests internationally.\nFOL: exists x. (Develops(Ets, x) & For(x, k-OneTwoandhighereducation)) & exists x. (Develops(Ets, x) & AssociatedWith(x, Entrytouseducationinstitutions))\n\nANSWER: False\n</EVALUATE>\n\n<PREMISES>\nDaveed Diggs is an actor and film producer.\nDaveed Diggs played two roles in the musical Hamilton on Broadway.\nOne of the actors from Hamilton won the best actor award.\nThe actor playing Thomas Jefferson won the best actor award.\nDaveed Diggs played Thomas Jefferson.\nMusicals on Broadway are not films.\n</PREMISES>\n<CONCLUSION>\nDaveed Diggs won the best actor award.\n</CONCLUSION>\n<EVALUATE>\nTEXT: Daveed Diggs is an actor and film producer.\nFOL: Actor(DaveedDiggs) & FilmProducer(DaveedDiggs)\nTEXT: Daveed Diggs played two roles in the musical Hamilton on Broadway.\nFOL: exists x. exists y.(PlaysIn(DaveedDiggs, x, Hamilton) & (-(x=y)) & PlaysIn(DaveedDiggs, y, Hamilton)) & OnBroadway(Hamilton) & Musical(Hamilton)\nTEXT: One of the actors from Hamilton won the best actor award.\nFOL: exists x. exists y.(Actor(x) & PlaysIn(x, y, Hamilton) & Wins(x, BestActorAward))\nTEXT: The actor playing Thomas Jefferson won the best actor award.\nFOL: exists x. (Actor(x) & PlaysIn(x, ThomasJefferson, Hamilton) & Wins(x, BestActorAward))\nTEXT: Daveed Diggs played Thomas Jefferson.\nFOL: Plays(DaveedDiggs, ThomasJefferson)\nTEXT: Musicals on Broadway are not films.\nFOL: all x. ((Musical(x) & OnBroadway(x)) -> -Film(x))\nTEXT: Daveed Diggs won the best actor award.\nFOL: exists x. (BRICS(x) & Speaks(x, Hindi))\n\nANSWER: True\n</EVALUATE>\n\n<PREMISES>\nThe Croton River watershed is the end basin of the Croton River.\nThe Croton River is in northeastern California.\nWater from the Croton River watershed freezes in the Bronx.\nThe Bronx is in California.\n</PREMISES>\n<CONCLUSION>\nWater from the Croton River watershed freezes somewhere in California.\n</CONCLUSION>\n<EVALUATE>", "raw_generations": ["Generation 1:\nTEXT: The Croton River watershed is the end basin of the Croton River.\nFOL: EndBasin(CrotonRiver, CrotonRiverWatershed)\n\nTEXT: The Croton River is in northeastern California.\nFOL: In(CrotonRiver, NortheasternCalifornia)\n\nTEXT: Water from the Croton River watershed freezes in the Bronx.\nFOL: Freezes(WaterFrom(CrotonRiverWatershed), Bronx)\n\nTEXT: The Bronx is in California.\nFOL: In(Bronx, California)\n\nTEXT: Water from the Croton River watershed freezes somewhere in California.\nFOL: exists x. (WaterFrom(CrotonRiverWatershed, x) & In(x, California) & Freezes(WaterFrom(CrotonRiverWatershed), x))\n\nANSWER: True\nProcessed: True", "Generation 2:\nTEXT: The Croton River watershed is the end basin of the Croton River.\nFOL: EndBasin(CrotonRiverWatershed, CrotonRiver)\nTEXT: The Croton River is in northeastern California.\nFOL: In(CrotonRiver, NortheasternCalifornia)\nTEXT: Water from the Croton River watershed freezes in the Bronx.\nFOL: Freezes(WaterFrom(CrotonRiverWatershed), Bronx)\nTEXT: The Bronx is in California.\nFOL: In(Bronx, California)\nTEXT: Water from the Croton River watershed freezes somewhere in California.\nFOL: In(Bronx, California) & In(CrotonRiverWatershed, CrotonRiver) -> In(WaterFrom(CrotonRiverWatershed), California)\n\nANSWER: True\nProcessed: True", "Generation 3:\nTEXT: The Croton River watershed is the end basin of the Croton River.\nFOL: EndBasin(CrotonRiverWatershed, CrotonRiver)\nTEXT: The Croton River is in northeastern California.\nFOL: In(CrotonRiver, NortheasternCalifornia)\nTEXT: Water from the Croton River watershed freezes in the Bronx.\nFOL: Freezes(WaterFrom(CrotonRiverWatershed), Bronx)\nTEXT: The Bronx is in California.\nFOL: In(Bronx, California)\nTEXT: Water from the Croton River watershed freezes somewhere in California.\nFOL: (Freezes(WaterFrom(CrotonRiverWatershed), y) & In(y, California))\n\nANSWER: True\nProcessed: True", "Generation 4:\nTEXT: The Croton River watershed is the end basin of the Croton River.\nFOL: EndBasin(CrotonRiverWatershed, CrotonRiver)\nTEXT: The Croton River is in northeastern California.\nFOL: In(CrotonRiver, NortheasternCalifornia)\nTEXT: Water from the Croton River watershed freezes in the Bronx.\nFOL: Freezes(WaterFromCrotonRiverWatershed, Bronx)\nTEXT: The Bronx is in California.\nFOL: In(Bronx, California)\nTEXT: Water from the Croton River watershed freezes somewhere in California.\nFOL: (WaterFromCrotonRiverWatershed & Freezes(WaterFromCrotonRiverWatershed, ?x)) & In(?x, California)\n\nANSWER: Uncertain (The problem states that the watershed is the end basin of the Croton River, which is in New York, not California.)\nProcessed: Uncertain", "Generation 5:\nTEXT: The Croton River watershed is the end basin of the Croton River.\nFOL: EndBasin(CrotonRiverWatershed, CrotonRiver)\nTEXT: The Croton River is in northeastern California.\nFOL: In(CrotonRiver, NortheasternCalifornia)\nTEXT: Water from the Croton River watershed freezes in the Bronx.\nFOL: Freezes(WaterFrom(CrotonRiverWatershed), Bronx)\nTEXT: The Bronx is in California.\nFOL: In(Bronx, California)\nTEXT: Water from the Croton River watershed freezes somewhere in California.\nFOL: exists x. (WaterFrom(CrotonRiverWatershed, x) & In(x, California) & Freezes(WaterFrom(CrotonRiverWatershed), x))\n\nANSWER: True\nProcessed: True", "Generation 6:\nTEXT: The Croton River watershed is the end basin of the Croton River.\nFOL: EndBasin(CrotonRiverWatershed, CrotonRiver)\n\nTEXT: The Croton River is in northeastern California.\nFOL: In(CrotonRiver, NortheasternCalifornia)\n\nTEXT: Water from the Croton River watershed freezes in the Bronx.\nFOL: Freezes(WaterFrom(CrotonRiverWatershed), Bronx)\n\nTEXT: The Bronx is in California.\nFOL: In(Bronx, California)\n\nTEXT: Water from the Croton River watershed freezes somewhere in California.\nFOL: exists x. (WaterFrom(CrotonRiverWatershed, x) & In(x, California) & Freezes(WaterFrom(CrotonRiverWatershed), x))\n\nANSWER: True\nProcessed: True", "Generation 7:\nTEXT: The Croton River watershed is the end basin of the Croton River.\nFOL: EndBasin(CrotonRiverWatershed, CrotonRiver)\n\nTEXT: The Croton River is in northeastern California.\nFOL: In(CrotonRiver, NortheasternCalifornia)\n\nTEXT: Water from the Croton River watershed freezes in the Bronx.\nFOL: Freezes(WaterFrom(CrotonRiverWatershed), Bronx)\n\nTEXT: The Bronx is in California.\nFOL: In(Bronx, California)\n\nTEXT: Water from the Croton River watershed freezes somewhere in California.\nFOL: exists x. (WaterFrom(CrotonRiverWatershed, x) & In(x, California))\n\nANSWER: True\nProcessed: True", "Generation 8:\nTEXT: The Croton River watershed is the end basin of the Croton River.\nFOL: EndBasin(CrotonRiverWatershed, CrotonRiver)\n\nTEXT: The Croton River is in northeastern California.\nFOL: In(CrotonRiver, NortheasternCalifornia)\n\nTEXT: Water from the Croton River watershed freezes in the Bronx.\nFOL: Freezes(WaterFrom(CrotonRiverWatershed), Bronx)\n\nTEXT: The Bronx is in California.\nFOL: In(Bronx, California)\n\nTEXT: Water from the Croton River watershed freezes somewhere in California.\nFOL: exists x. In(x, California) & Freezes(WaterFrom(CrotonRiverWatershed), x)\n\nANSWER: False (given the provided premises)\nProcessed: False", "Generation 9:\nTEXT: The Croton River watershed is the end basin of the Croton River.\nFOL: EndBasin(CrotonRiverWatershed, CrotonRiver)\n\nTEXT: The Croton River is in northeastern California.\nFOL: In(CrotonRiver, NortheasternCalifornia)\n\nTEXT: Water from the Croton River watershed freezes in the Bronx.\nFOL: Freezes(WaterFrom(CrotonRiverWatershed), Bronx)\n\nTEXT: The Bronx is in California.\nFOL: In(Bronx, California)\n\nTEXT: Water from the Croton River watershed freezes somewhere in California.\nFOL: exists x. (WaterFrom(CrotonRiverWatershed, x) & In(x, California) & Freezes(WaterFrom(CrotonRiverWatershed), x))\n\nANSWER: True\nProcessed: True", "Generation 10:\nTEXT: The Croton River watershed is the end basin of the Croton River.\nFOL: EndBasin(CrotonRiver, CrotonRiverWatershed)\nTEXT: The Croton River is in northeastern California.\nFOL: In(CrotonRiver, NortheasternCalifornia)\nTEXT: Water from the Croton River watershed freezes in the Bronx.\nFOL: Freezes(WaterFrom(CrotonRiverWatershed), Bronx)\nTEXT: The Bronx is in California.\nFOL: In(Bronx, California)\nTEXT: Water from the Croton River watershed freezes somewhere in California.\nFOL: exists x. (WaterFrom(CrotonRiverWatershed, x) & In(x, California) & Freezes(WaterFrom(CrotonRiverWatershed), x))\n\nANSWER: True\nProcessed: True\n\nReference: True\n========================================"], "answers": ["True", "True", "True", "Uncertain", "True", "True", "True", "False", "True", "True"]}
{"idx": 20, "prompt": "The following is a first-order logic (FOL) problem.\nThe problem is to determine whether the conclusion follows from the premises.\nThe premises are given in the form of a set of first-order logic sentences.\nThe conclusion is given in the form of a single first-order logic sentence.\nThe task is to translate each of the premises and conclusions into FOL expressions.and then to evaluate the conclusion as ANSWER: True, ANSWER: False, or ANSWER: Uncertain given the premises. The output should follow format TEXT: \nFOL: \nTEXT: \nFOL:... ANSWER: \n\n\n<PREMISES>\nAll biodegradable things are environment-friendly.\nAll woodware is biodegradable.\nAll paper is woodware.\nNothing is a good thing and also a bad thing.\nAll environment-friendly things are good.\nA worksheet is either paper or environment-friendly.\n</PREMISES>\n<CONCLUSION>\nA worksheet is not biodegradable.\n</CONCLUSION>\n<EVALUATE>\nTEXT: All biodegradable things are environment-friendly.\nFOL: all x. (Biodegradable(x) -> EnvironmentFriendly(x))\nTEXT: All woodware is biodegradable.\nFOL: all x. (Woodware(x) -> Biodegradable(x))\nTEXT: All paper is woodware.\nFOL: all x. (Paper(x) -> Woodware(x))\nTEXT: Nothing is a good thing and also a bad thing.\nFOL: -(exists x. (Good(x) & Bad(x)))\nTEXT: All environment-friendly things are good.\nFOL: all x. (EnvironmentFriendly(x) -> Good(x))\nTEXT: A worksheet is either paper or environment-friendly.\nFOL: ((Paper(Worksheet) & -EnvironmentFriendly(Worksheet)) | (-Paper(Worksheet) & EnvironmentFriendly(Worksheet)))\nTEXT: A worksheet is not biodegradable.\nFOL: -Dispensable(Worksheet)\n\nANSWER: Uncertain\n</EVALUATE>\n\n<PREMISES>\nA La Liga soccer team ranks higher than another La Liga soccer team if it receives more points.\nIf there are two La Liga soccer teams and neither has more points than the other, then the team which receives more points from the games between the two teams ranks higher.\nReal Madrid and Barcelona are both La Liga soccer teams.\nReal Madrid received more points than Barcelona.\nNeither Real Madrid nor Barcelona received more points from the games between them.\n</PREMISES>\n<CONCLUSION>\nReal Madrid ranks higher than Barcelona.\n</CONCLUSION>\n<EVALUATE>\nTEXT: A La Liga soccer team ranks higher than another La Liga soccer team if it receives more points.\nFOL: all x. all y. (LaLigaSoccerTeam(x) & LaLigaSoccerTeam(y) & MorePoints(x, y) -> RankHigherThan(x, y))\nTEXT: If there are two La Liga soccer teams and neither has more points than the other, then the team which receives more points from the games between the two teams ranks higher.\nFOL: all x. all y. (LaLigaSoccerTeam(x) & LaLigaSoccerTeam(y) & -MorePoints(x, y) & -MorePoints(y, x) & MorePointsInGameBetween(x, y) ->  RankHigherThan(x, y))\nTEXT: Real Madrid and Barcelona are both La Liga soccer teams.\nFOL: LaLigaSoccerTeam(RealMadrid) & LaLigaSoccerTeam(Barcelona)\nTEXT: Real Madrid received more points than Barcelona.\nFOL: MorePoints(RealMadrid, Barcelona)\nTEXT: Neither Real Madrid nor Barcelona received more points from the games between them.\nFOL: -MorePointsInGameBetween(RealMadrid, Barcelona) & -MorePointsInGameBetween(Barcelona, RealMadrid)\nTEXT: Real Madrid ranks higher than Barcelona.\nFOL: HigherRank(RealMadrid, Barcelona)\n\nANSWER: True\n</EVALUATE>\n\n<PREMISES>\nAll professional athletes spend most of their time on sports.\nAll Olympic gold medal winners are professional athletes.\nNo full-time scientists spend the majority of their time on sports.\nAll Nobel physics laureates are full-time scientists.\nAmy spends the most time on sports, or Amy is an Olympic gold medal winner.\nIf Amy is not a Nobel physics laureate, then Amy is not an Olympic gold medal winner.\n</PREMISES>\n<CONCLUSION>\nIf Amy is not an Olympic gold medal winner, then Amy is a Nobel physics laureate.\n</CONCLUSION>\n<EVALUATE>\nTEXT: All professional athletes spend most of their time on sports.\nFOL: all x. (ProfessionalAthlete(x) -> SpendOn(x, MostOfTheirTime, Sports))\nTEXT: All Olympic gold medal winners are professional athletes.\nFOL: all x. (OlympicGoldMedalWinner(x) -> ProfessionalAthlete(x))\nTEXT: No full-time scientists spend the majority of their time on sports.\nFOL: all x. (FullTimeScientist(x) -> -SpendOn(x, MostOfTheirTime, Sports))\nTEXT: All Nobel physics laureates are full-time scientists.\nFOL: all x. (NobelPhysicsLaureate(x) -> FullTimeScientist(x))\nTEXT: Amy spends the most time on sports, or Amy is an Olympic gold medal winner.\nFOL: SpendOn(Amy, MostOfTheirTime, Sports) | OlympicGoldMedalWinner(Amy)\nTEXT: If Amy is not a Nobel physics laureate, then Amy is not an Olympic gold medal winner.\nFOL: -NobelPhysicsLaureate(Amy) -> -OlympicGoldMedalWinner(Amy)\nTEXT: If Amy is not an Olympic gold medal winner, then Amy is a Nobel physics laureate.\nFOL: -OlympicGoldMedalWinner(Amy) -> NobelLaureate(Amy)\n\nANSWER: False\n</EVALUATE>\n\n<PREMISES>\nIf a person pays their taxes, then they contribute to the country.\nEveryone who works for a government department pays a tax on their salary.\nEveryone in the army is an employee of a government department.\nEveryone convicted of murder goes to prison.\nEveryone who has been to prison has a criminal record.\nJames was either once convicted of murder, or spent time in prison.\nJames either has a criminal record, or pays his taxes.\n</PREMISES>\n<CONCLUSION>\nJames does not contribute to the country.\n</CONCLUSION>\n<EVALUATE>\nTEXT: If a person pays their taxes, then they contribute to the country.\nFOL: all x. (Taxpayer(x) -> ContributeTo(x, Country))\nTEXT: Everyone who works for a government department pays a tax on their salary.\nFOL: all x. (WorkFor(x, GovernmentAgency) -> Taxpayer(x))\nTEXT: Everyone in the army is an employee of a government department.\nFOL: all x. (ServesIn(x, TheArmy) -> WorkFor(x, GovernmentAgency))\nTEXT: Everyone convicted of murder goes to prison.\nFOL: all x. (SentencedForMurder(x) -> Imprisoned(x))\nTEXT: Everyone who has been to prison has a criminal record.\nFOL: all x. (Imprisoned((x) -> Has(x, CriminalRecord))\nTEXT: James was either once convicted of murder, or spent time in prison.\nFOL: ((SentencedForMurder(James) & -Imprisoned(James)) | (-SentencedForMurder(James) & Imprisoned(James)))\nTEXT: James either has a criminal record, or pays his taxes.\nFOL: ((Has(James, CriminalRecord) & -Taxpayer(James)) | (-Has(James, CriminalRecord) & Taxpayer(James)))\nTEXT: James does not contribute to the country.\nFOL: ContributeToCountry(James)\n\nANSWER: Uncertain\n</EVALUATE>\n\n<PREMISES>\nNo songs are visuals.\nAll folk songs are songs.\nAll videos are visuals.\nAll movies are videos.\nAll sci-fi movies are movies.\nInception is a sci-fi movie.\nMac is neither a folk song nor a sci-fi movie.\n</PREMISES>\n<CONCLUSION>\nInception is a folk song.\n</CONCLUSION>\n<EVALUATE>\nTEXT: No songs are visuals.\nFOL: all x. (Song(x) -> -Visual(x))\nTEXT: All folk songs are songs.\nFOL: all x. (FolkSong(x) -> Song(x))\nTEXT: All videos are visuals.\nFOL: all x. (Video(x) -> Visual(x))\nTEXT: All movies are videos.\nFOL: all x. (Movie(x) -> Video(x))\nTEXT: All sci-fi movies are movies.\nFOL: all x. (ScifiMovie(x) -> Movie(x))\nTEXT: Inception is a sci-fi movie.\nFOL: ScifiMovie(Inception)\nTEXT: Mac is neither a folk song nor a sci-fi movie.\nFOL: -FolkSong(Mac) & -ScifiMovie(Mac)\nTEXT: Inception is a folk song.\nFOL: FolkSong(Inception)\n\nANSWER: False\n</EVALUATE>\n\n<PREMISES>\nEvery chef can cook.\nSome people who aren’t chefs can cook.\nPeople who cook can make scrambled eggs and pasta.\nIf someone can make cookies and muffins, they are a baker.\nBakers who can also make scrambled eggs can make a good breakfast.\nLuke can make cookies, scrambled eggs, and muffins, but not pasta.\n</PREMISES>\n<CONCLUSION>\nLuke is a chef.\n</CONCLUSION>\n<EVALUATE>\nTEXT: Every chef can cook.\nFOL: all x. (Chef(x) -> Can(x, Cook))\nTEXT: Some people who aren’t chefs can cook.\nFOL: exists x. (-Chef(x) & Can(x, Cook))\nTEXT: People who cook can make scrambled eggs and pasta.\nFOL: all x. (Can(x, Cook) -> (CanMake(x, ScrambledEggs) & CanMake(x, Pasta)))\nTEXT: If someone can make cookies and muffins, they are a baker.\nFOL: all x. (CanMake(x, Cookies) & CanMake(x, Muffins) -> Baker(x))\nTEXT: Bakers who can also make scrambled eggs can make a good breakfast.\nFOL: all x. ((Baker(x) & CanMake(x, ScrambledEggs)) -> CanMake(x, GoodBreakfast))\nTEXT: Luke can make cookies, scrambled eggs, and muffins, but not pasta.\nFOL: CanMake(Luke, Cookies) & (CanMake(Luke, ScrambledEggs) & CanMake(Luke, Muffins) & -CanMake(Luke, Pasta)\nTEXT: Luke is a chef.\nFOL: MakeGoodBreakfast(Luke)\n\nANSWER: False\n</EVALUATE>\n\n<PREMISES>\nETS develops various standardized tests primarily in the United States for K-12 and higher education.\nETS administers international tests, including the TOEFL, TOEIC, GRE, and subject tests.\nMany of the assessments ETS develops are associated with entry to the US tertiary and quaternary education institutions.\nETS also develops K-12 statewide assessments used for accountability testing in many states.\n</PREMISES>\n<CONCLUSION>\nETS doesn't administer tests internationally.\n</CONCLUSION>\n<EVALUATE>\nTEXT: ETS develops various standardized tests primarily in the United States for K-12 and higher education.\nFOL: exists x. exists y. (Develop(eTS, x) & Develop(eTS, y) & StandardizedTest(x) & StandardizedTest(y) & In(x, UnitedState) & In(y, UnitedState) & For(x, kOneTwoAndHigherEducation) & For(y, kOneTwoAndHigherEducation))\nTEXT: ETS administers international tests, including the TOEFL, TOEIC, GRE, and subject tests.\nFOL: exists x. (Administer(eTS, x) & InternationalTest(x) & (TOEFL(x) | TOEIC(x) | GRE(x) | SubjectTest(x)))\nTEXT: Many of the assessments ETS develops are associated with entry to the US tertiary and quaternary education institutions.\nFOL: exists x. (Develop(eTS, x) & AssociatedWith(x, EntryToUSEducationInstitution))\nTEXT: ETS also develops K-12 statewide assessments used for accountability testing in many states.\nFOL: exists x. (Develop(eTS, x) & StateWideAssesment(x) & UsedFor(x, AccountabilityTesting))\nTEXT: ETS doesn't administer tests internationally.\nFOL: exists x. (Develops(Ets, x) & For(x, k-OneTwoandhighereducation)) & exists x. (Develops(Ets, x) & AssociatedWith(x, Entrytouseducationinstitutions))\n\nANSWER: False\n</EVALUATE>\n\n<PREMISES>\nDaveed Diggs is an actor and film producer.\nDaveed Diggs played two roles in the musical Hamilton on Broadway.\nOne of the actors from Hamilton won the best actor award.\nThe actor playing Thomas Jefferson won the best actor award.\nDaveed Diggs played Thomas Jefferson.\nMusicals on Broadway are not films.\n</PREMISES>\n<CONCLUSION>\nDaveed Diggs won the best actor award.\n</CONCLUSION>\n<EVALUATE>\nTEXT: Daveed Diggs is an actor and film producer.\nFOL: Actor(DaveedDiggs) & FilmProducer(DaveedDiggs)\nTEXT: Daveed Diggs played two roles in the musical Hamilton on Broadway.\nFOL: exists x. exists y.(PlaysIn(DaveedDiggs, x, Hamilton) & (-(x=y)) & PlaysIn(DaveedDiggs, y, Hamilton)) & OnBroadway(Hamilton) & Musical(Hamilton)\nTEXT: One of the actors from Hamilton won the best actor award.\nFOL: exists x. exists y.(Actor(x) & PlaysIn(x, y, Hamilton) & Wins(x, BestActorAward))\nTEXT: The actor playing Thomas Jefferson won the best actor award.\nFOL: exists x. (Actor(x) & PlaysIn(x, ThomasJefferson, Hamilton) & Wins(x, BestActorAward))\nTEXT: Daveed Diggs played Thomas Jefferson.\nFOL: Plays(DaveedDiggs, ThomasJefferson)\nTEXT: Musicals on Broadway are not films.\nFOL: all x. ((Musical(x) & OnBroadway(x)) -> -Film(x))\nTEXT: Daveed Diggs won the best actor award.\nFOL: exists x. (BRICS(x) & Speaks(x, Hindi))\n\nANSWER: True\n</EVALUATE>\n\n<PREMISES>\nSix, seven and eight are imaginary numbers.\nIf an imaginary number equals another imaginary number added by one, the first number is smaller.\nIf the number x is larger than the number y, then y is not larger than x.\nSeven equals six plus one.\nEight equals seven plus one.\nTwo is positive.\nIf a number is positive, then the double of it is also positive.\nEight is the double of six.\nSix is the double of two.\n</PREMISES>\n<CONCLUSION>\nEight is smaller than seven.\n</CONCLUSION>\n<EVALUATE>", "raw_generations": ["Generation 1:\nTEXT: Six, seven and eight are imaginary numbers.\nFOL: ImaginaryNumber(Six) & ImaginaryNumber(Seven) & ImaginaryNumber(Eight)\n\nTEXT: If an imaginary number equals another imaginary number added by one, the first number is smaller.\nFOL: all x. all y. ((ImaginaryNumber(x) & ImaginaryNumber(y+1)) -> x < y)\n\nTEXT: If the number x is larger than the number y, then y is not larger than x.\nFOL: all x. all y. (x > y -> -(y > x))\n\nTEXT: Seven equals six plus one.\nFOL: Seven = Six + One\n\nTEXT: Eight equals seven plus one.\nFOL: Eight = Seven + One\n\nTEXT: Two is positive.\nFOL: Positive(Two)\n\nTEXT: If a number is positive, then the double of it is also positive.\nFOL: all x. (Positive(x) -> Positive(2*x))\n\nTEXT: Eight is the double of six.\nFOL: Eight = 2*Six\n\nTEXT: Six is the double of two.\nFOL: Six = 2*Two\n\nTEXT: Eight is smaller than seven.\nFOL: Eight < Seven\n\nANSWER: False\n\nIn this case, the conclusion is false because we know that Eight is equal to Seven + One, and since Seven is smaller than Eight by the given rules, Seven + One (which is Eight) cannot be smaller than Seven. The given premises do not support the conclusion.\nProcessed: False", "Generation 2:\nTEXT: Six, seven and eight are imaginary numbers.\nFOL: ImaginaryNumber(6) & ImaginaryNumber(7) & ImaginaryNumber(8)\n\nTEXT: If an imaginary number equals another imaginary number added by one, the first number is smaller.\nFOL: all x. all y. ((ImaginaryNumber(x) & ImaginaryNumber(y + 1)) -> x < y)\n\nTEXT: If the number x is larger than the number y, then y is not larger than x.\nFOL: all x. all y. (x > y -> y < x)\n\nTEXT: Seven equals six plus one.\nFOL: 7 = 6 + 1\n\nTEXT: Eight equals seven plus one.\nFOL: 8 = 7 + 1\n\nTEXT: Two is positive.\nFOL: Positive(2)\n\nTEXT: If a number is positive, then the double of it is also positive.\nFOL: all x. (Positive(x) -> Positive(2 * x))\n\nTEXT: Eight is the double of six.\nFOL: 8 = 2 * 6\n\nTEXT: Six is the double of two.\nFOL: 6 = 2 * 2\n\nTEXT: Eight is smaller than seven.\nFOL: 8 < 7\n\nANSWER: False\nProcessed: False", "Generation 3:\nTEXT: Six, seven and eight are imaginary numbers.\nFOL: ImaginaryNumber(Six) & ImaginaryNumber(Seven) & ImaginaryNumber(Eight)\n\nTEXT: If an imaginary number equals another imaginary number added by one, the first number is smaller.\nFOL: all x. all y. ((ImaginaryNumber(x) & ImaginaryNumber(y+1)) -> x < y)\n\nTEXT: If the number x is larger than the number y, then y is not larger than x.\nFOL: all x. all y. (x > y -> y < x)\n\nTEXT: Seven equals six plus one.\nFOL: Seven = Six + One\n\nTEXT: Eight equals seven plus one.\nFOL: Eight = Seven + One\n\nTEXT: Two is positive.\nFOL: Positive(Two)\n\nTEXT: If a number is positive, then the double of it is also positive.\nFOL: all x. (Positive(x) -> Positive(2*x))\n\nTEXT: Eight is the double of six.\nFOL: Eight = 2*Six\n\nTEXT: Six is the double of two.\nFOL: Six = 2*Two\n\nTEXT: Eight is smaller than seven.\nFOL: Eight < Seven\n\nANSWER: False\nProcessed: False", "Generation 4:\nTEXT: Six, seven and eight are imaginary numbers.\nFOL: ImaginaryNumber(6) & ImaginaryNumber(7) & ImaginaryNumber(8)\n\nTEXT: If an imaginary number equals another imaginary number added by one, the first number is smaller.\nFOL: all x. all y. ((ImaginaryNumber(x) & ImaginaryNumber(x + 1)) -> x > y)\n\nTEXT: If the number x is larger than the number y, then y is not larger than x.\nFOL: all x. all y. ((x > y) -> (y < x))\n\nTEXT: Seven equals six plus one.\nFOL: 7 = 6 + 1\n\nTEXT: Eight equals seven plus one.\nFOL: 8 = 7 + 1\n\nTEXT: Two is positive.\nFOL: Positive(2)\n\nTEXT: If a number is positive, then the double of it is also positive.\nFOL: all x. (Positive(x) -> Positive(2 * x))\n\nTEXT: Eight is the double of six.\nFOL: 8 = 2 * 6\n\nTEXT: Six is the double of two.\nFOL: 6 = 2 * 2\n\nTEXT: Eight is smaller than seven.\nFOL: 8 < 7\n\nANSWER: False\nProcessed: False", "Generation 5:\nTEXT: Six, seven and eight are imaginary numbers.\nFOL: ImaginaryNumber(6) & ImaginaryNumber(7) & ImaginaryNumber(8)\n\nTEXT: If an imaginary number equals another imaginary number added by one, the first number is smaller.\nFOL: all x. all y. ((ImaginaryNumber(x) & ImaginaryNumber(y+1)) -> (x < y))\n\nTEXT: If the number x is larger than the number y, then y is not larger than x.\nFOL: all x. all y. ((x > y) -> (-(y > x)))\n\nTEXT: Seven equals six plus one.\nFOL: 7 = 6 + 1\n\nTEXT: Eight equals seven plus one.\nFOL: 8 = 7 + 1\n\nTEXT: Two is positive.\nFOL: Positive(2)\n\nTEXT: If a number is positive, then the double of it is also positive.\nFOL: all x. (Positive(x) -> Positive(2*x))\n\nTEXT: Eight is the double of six.\nFOL: 8 = 2*6\n\nTEXT: Six is the double of two.\nFOL: 6 = 2*2\n\nTEXT: Eight is smaller than seven.\nFOL: 8 < 7\n\nANSWER: False\nProcessed: False", "Generation 6:\nTEXT: Six, seven and eight are imaginary numbers.\nFOL: ImaginaryNumber(6) & ImaginaryNumber(7) & ImaginaryNumber(8)\n\nTEXT: If an imaginary number equals another imaginary number added by one, the first number is smaller.\nFOL: all x. all y. ((ImaginaryNumber(x) & ImaginaryNumber(y+1)) -> x < y)\n\nTEXT: If the number x is larger than the number y, then y is not larger than x.\nFOL: all x. all y. (x > y -> y < x)\n\nTEXT: Seven equals six plus one.\nFOL: 7 = 6 + 1\n\nTEXT: Eight equals seven plus one.\nFOL: 8 = 7 + 1\n\nTEXT: Two is positive.\nFOL: Positive(2)\n\nTEXT: If a number is positive, then the double of it is also positive.\nFOL: all x. (Positive(x) -> Positive(2*x))\n\nTEXT: Eight is the double of six.\nFOL: 8 = 2*6\n\nTEXT: Six is the double of two.\nFOL: 6 = 2*2\n\nTEXT: Eight is smaller than seven.\nFOL: 8 < 7\n\nANSWER: False\nProcessed: False", "Generation 7:\nTEXT: Six, seven and eight are imaginary numbers.\nFOL: ImaginaryNumber(6) & ImaginaryNumber(7) & ImaginaryNumber(8)\n\nTEXT: If an imaginary number equals another imaginary number added by one, the first number is smaller.\nFOL: all x. all y. ((ImaginaryNumber(x) & ImaginaryNumber(y+1)) -> x < y)\n\nTEXT: If the number x is larger than the number y, then y is not larger than x.\nFOL: all x. all y. (x > y -> -(y > x))\n\nTEXT: Seven equals six plus one.\nFOL: 7 = 6 + 1\n\nTEXT: Eight equals seven plus one.\nFOL: 8 = 7 + 1\n\nTEXT: Two is positive.\nFOL: Positive(2)\n\nTEXT: If a number is positive, then the double of it is also positive.\nFOL: all x. (Positive(x) -> Positive(2*x))\n\nTEXT: Eight is the double of six.\nFOL: 8 = 2 * 6\n\nTEXT: Six is the double of two.\nFOL: 6 = 2 * 2\n\nTEXT: Eight is smaller than seven.\nFOL: 8 < 7\n\nANSWER: False\nProcessed: False", "Generation 8:\nTEXT: Six, seven and eight are imaginary numbers.\nFOL: ImaginaryNumber(Six) & ImaginaryNumber(Seven) & ImaginaryNumber(Eight)\nTEXT: If an imaginary number equals another imaginary number added by one, the first number is smaller.\nFOL: all x. all y. ((ImaginaryNumber(x) & ImaginaryNumber(y+1)) -> (x < y))\nTEXT: If the number x is larger than the number y, then y is not larger than x.\nFOL: all x. all y. ((x > y) -> (-(y > x)))\nTEXT: Seven equals six plus one.\nFOL: Seven = Six + 1\nTEXT: Eight equals seven plus one.\nFOL: Eight = Seven + 1\nTEXT: Two is positive.\nFOL: Positive(Two)\nTEXT: If a number is positive, then the double of it is also positive.\nFOL: all x. ((Positive(x) -> Positive(2*x)))\nTEXT: Eight is the double of six.\nFOL: Eight = 2 * Six\nTEXT: Six is the double of two.\nFOL: Six = 2 * Two\nTEXT: Eight is smaller than seven.\nFOL: Eight < Seven\n\nANSWER: False\n\nNote: The conclusion is incorrect because imaginary numbers do not follow the standard ordering rules of real numbers, so comparing them as if they were real numbers leads to inconsistent results. Also, the premises do not provide any information that supports the conclusion that eight is smaller than seven.\nProcessed: False", "Generation 9:\nTEXT: Six, seven and eight are imaginary numbers.\nFOL: ImaginaryNumber(6) & ImaginaryNumber(7) & ImaginaryNumber(8)\n\nTEXT: If an imaginary number equals another imaginary number added by one, the first number is smaller.\nFOL: all x. all y. ((ImaginaryNumber(x) & ImaginaryNumber(x + 1)) -> x < y)\n\nTEXT: If the number x is larger than the number y, then y is not larger than x.\nFOL: all x. all y. (x < y -> y > x)\n\nTEXT: Seven equals six plus one.\nFOL: 7 = 6 + 1\n\nTEXT: Eight equals seven plus one.\nFOL: 8 = 7 + 1\n\nTEXT: Two is positive.\nFOL: Positive(2)\n\nTEXT: If a number is positive, then the double of it is also positive.\nFOL: all x. (Positive(x) -> Positive(2*x))\n\nTEXT: Eight is the double of six.\nFOL: 8 = 2 * 6\n\nTEXT: Six is the double of two.\nFOL: 6 = 2 * 2\n\nTEXT: Eight is smaller than seven.\nFOL: 8 < 7\n\nANSWER: False\nProcessed: False", "Generation 10:\nTEXT: Six, seven and eight are imaginary numbers.\nFOL: ImaginaryNumber(6) & ImaginaryNumber(7) & ImaginaryNumber(8)\n\nTEXT: If an imaginary number equals another imaginary number added by one, the first number is smaller.\nFOL: all x. all y. ((ImaginaryNumber(x) & ImaginaryNumber(x + 1)) -> x < y)\n\nTEXT: If the number x is larger than the number y, then y is not larger than x.\nFOL: all x. all y. (x > y -> -(y > x))\n\nTEXT: Seven equals six plus one.\nFOL: 7 = 6 + 1\n\nTEXT: Eight equals seven plus one.\nFOL: 8 = 7 + 1\n\nTEXT: Two is positive.\nFOL: Positive(2)\n\nTEXT: If a number is positive, then the double of it is also positive.\nFOL: all x. (Positive(x) -> Positive(2*x))\n\nTEXT: Eight is the double of six.\nFOL: 8 = 2*6\n\nTEXT: Six is the double of two.\nFOL: 6 = 2*2\n\nTEXT: Eight is smaller than seven.\nFOL: 8 < 7\n\nANSWER: False\nProcessed: False\n\nReference: True\n========================================"], "answers": ["False", "False", "False", "False", "False", "False", "False", "False", "False", "False"]}
{"idx": 21, "prompt": "The following is a first-order logic (FOL) problem.\nThe problem is to determine whether the conclusion follows from the premises.\nThe premises are given in the form of a set of first-order logic sentences.\nThe conclusion is given in the form of a single first-order logic sentence.\nThe task is to translate each of the premises and conclusions into FOL expressions.and then to evaluate the conclusion as ANSWER: True, ANSWER: False, or ANSWER: Uncertain given the premises. The output should follow format TEXT: \nFOL: \nTEXT: \nFOL:... ANSWER: \n\n\n<PREMISES>\nAll biodegradable things are environment-friendly.\nAll woodware is biodegradable.\nAll paper is woodware.\nNothing is a good thing and also a bad thing.\nAll environment-friendly things are good.\nA worksheet is either paper or environment-friendly.\n</PREMISES>\n<CONCLUSION>\nA worksheet is not biodegradable.\n</CONCLUSION>\n<EVALUATE>\nTEXT: All biodegradable things are environment-friendly.\nFOL: all x. (Biodegradable(x) -> EnvironmentFriendly(x))\nTEXT: All woodware is biodegradable.\nFOL: all x. (Woodware(x) -> Biodegradable(x))\nTEXT: All paper is woodware.\nFOL: all x. (Paper(x) -> Woodware(x))\nTEXT: Nothing is a good thing and also a bad thing.\nFOL: -(exists x. (Good(x) & Bad(x)))\nTEXT: All environment-friendly things are good.\nFOL: all x. (EnvironmentFriendly(x) -> Good(x))\nTEXT: A worksheet is either paper or environment-friendly.\nFOL: ((Paper(Worksheet) & -EnvironmentFriendly(Worksheet)) | (-Paper(Worksheet) & EnvironmentFriendly(Worksheet)))\nTEXT: A worksheet is not biodegradable.\nFOL: -Dispensable(Worksheet)\n\nANSWER: Uncertain\n</EVALUATE>\n\n<PREMISES>\nA La Liga soccer team ranks higher than another La Liga soccer team if it receives more points.\nIf there are two La Liga soccer teams and neither has more points than the other, then the team which receives more points from the games between the two teams ranks higher.\nReal Madrid and Barcelona are both La Liga soccer teams.\nReal Madrid received more points than Barcelona.\nNeither Real Madrid nor Barcelona received more points from the games between them.\n</PREMISES>\n<CONCLUSION>\nReal Madrid ranks higher than Barcelona.\n</CONCLUSION>\n<EVALUATE>\nTEXT: A La Liga soccer team ranks higher than another La Liga soccer team if it receives more points.\nFOL: all x. all y. (LaLigaSoccerTeam(x) & LaLigaSoccerTeam(y) & MorePoints(x, y) -> RankHigherThan(x, y))\nTEXT: If there are two La Liga soccer teams and neither has more points than the other, then the team which receives more points from the games between the two teams ranks higher.\nFOL: all x. all y. (LaLigaSoccerTeam(x) & LaLigaSoccerTeam(y) & -MorePoints(x, y) & -MorePoints(y, x) & MorePointsInGameBetween(x, y) ->  RankHigherThan(x, y))\nTEXT: Real Madrid and Barcelona are both La Liga soccer teams.\nFOL: LaLigaSoccerTeam(RealMadrid) & LaLigaSoccerTeam(Barcelona)\nTEXT: Real Madrid received more points than Barcelona.\nFOL: MorePoints(RealMadrid, Barcelona)\nTEXT: Neither Real Madrid nor Barcelona received more points from the games between them.\nFOL: -MorePointsInGameBetween(RealMadrid, Barcelona) & -MorePointsInGameBetween(Barcelona, RealMadrid)\nTEXT: Real Madrid ranks higher than Barcelona.\nFOL: HigherRank(RealMadrid, Barcelona)\n\nANSWER: True\n</EVALUATE>\n\n<PREMISES>\nAll professional athletes spend most of their time on sports.\nAll Olympic gold medal winners are professional athletes.\nNo full-time scientists spend the majority of their time on sports.\nAll Nobel physics laureates are full-time scientists.\nAmy spends the most time on sports, or Amy is an Olympic gold medal winner.\nIf Amy is not a Nobel physics laureate, then Amy is not an Olympic gold medal winner.\n</PREMISES>\n<CONCLUSION>\nIf Amy is not an Olympic gold medal winner, then Amy is a Nobel physics laureate.\n</CONCLUSION>\n<EVALUATE>\nTEXT: All professional athletes spend most of their time on sports.\nFOL: all x. (ProfessionalAthlete(x) -> SpendOn(x, MostOfTheirTime, Sports))\nTEXT: All Olympic gold medal winners are professional athletes.\nFOL: all x. (OlympicGoldMedalWinner(x) -> ProfessionalAthlete(x))\nTEXT: No full-time scientists spend the majority of their time on sports.\nFOL: all x. (FullTimeScientist(x) -> -SpendOn(x, MostOfTheirTime, Sports))\nTEXT: All Nobel physics laureates are full-time scientists.\nFOL: all x. (NobelPhysicsLaureate(x) -> FullTimeScientist(x))\nTEXT: Amy spends the most time on sports, or Amy is an Olympic gold medal winner.\nFOL: SpendOn(Amy, MostOfTheirTime, Sports) | OlympicGoldMedalWinner(Amy)\nTEXT: If Amy is not a Nobel physics laureate, then Amy is not an Olympic gold medal winner.\nFOL: -NobelPhysicsLaureate(Amy) -> -OlympicGoldMedalWinner(Amy)\nTEXT: If Amy is not an Olympic gold medal winner, then Amy is a Nobel physics laureate.\nFOL: -OlympicGoldMedalWinner(Amy) -> NobelLaureate(Amy)\n\nANSWER: False\n</EVALUATE>\n\n<PREMISES>\nIf a person pays their taxes, then they contribute to the country.\nEveryone who works for a government department pays a tax on their salary.\nEveryone in the army is an employee of a government department.\nEveryone convicted of murder goes to prison.\nEveryone who has been to prison has a criminal record.\nJames was either once convicted of murder, or spent time in prison.\nJames either has a criminal record, or pays his taxes.\n</PREMISES>\n<CONCLUSION>\nJames does not contribute to the country.\n</CONCLUSION>\n<EVALUATE>\nTEXT: If a person pays their taxes, then they contribute to the country.\nFOL: all x. (Taxpayer(x) -> ContributeTo(x, Country))\nTEXT: Everyone who works for a government department pays a tax on their salary.\nFOL: all x. (WorkFor(x, GovernmentAgency) -> Taxpayer(x))\nTEXT: Everyone in the army is an employee of a government department.\nFOL: all x. (ServesIn(x, TheArmy) -> WorkFor(x, GovernmentAgency))\nTEXT: Everyone convicted of murder goes to prison.\nFOL: all x. (SentencedForMurder(x) -> Imprisoned(x))\nTEXT: Everyone who has been to prison has a criminal record.\nFOL: all x. (Imprisoned((x) -> Has(x, CriminalRecord))\nTEXT: James was either once convicted of murder, or spent time in prison.\nFOL: ((SentencedForMurder(James) & -Imprisoned(James)) | (-SentencedForMurder(James) & Imprisoned(James)))\nTEXT: James either has a criminal record, or pays his taxes.\nFOL: ((Has(James, CriminalRecord) & -Taxpayer(James)) | (-Has(James, CriminalRecord) & Taxpayer(James)))\nTEXT: James does not contribute to the country.\nFOL: ContributeToCountry(James)\n\nANSWER: Uncertain\n</EVALUATE>\n\n<PREMISES>\nNo songs are visuals.\nAll folk songs are songs.\nAll videos are visuals.\nAll movies are videos.\nAll sci-fi movies are movies.\nInception is a sci-fi movie.\nMac is neither a folk song nor a sci-fi movie.\n</PREMISES>\n<CONCLUSION>\nInception is a folk song.\n</CONCLUSION>\n<EVALUATE>\nTEXT: No songs are visuals.\nFOL: all x. (Song(x) -> -Visual(x))\nTEXT: All folk songs are songs.\nFOL: all x. (FolkSong(x) -> Song(x))\nTEXT: All videos are visuals.\nFOL: all x. (Video(x) -> Visual(x))\nTEXT: All movies are videos.\nFOL: all x. (Movie(x) -> Video(x))\nTEXT: All sci-fi movies are movies.\nFOL: all x. (ScifiMovie(x) -> Movie(x))\nTEXT: Inception is a sci-fi movie.\nFOL: ScifiMovie(Inception)\nTEXT: Mac is neither a folk song nor a sci-fi movie.\nFOL: -FolkSong(Mac) & -ScifiMovie(Mac)\nTEXT: Inception is a folk song.\nFOL: FolkSong(Inception)\n\nANSWER: False\n</EVALUATE>\n\n<PREMISES>\nEvery chef can cook.\nSome people who aren’t chefs can cook.\nPeople who cook can make scrambled eggs and pasta.\nIf someone can make cookies and muffins, they are a baker.\nBakers who can also make scrambled eggs can make a good breakfast.\nLuke can make cookies, scrambled eggs, and muffins, but not pasta.\n</PREMISES>\n<CONCLUSION>\nLuke is a chef.\n</CONCLUSION>\n<EVALUATE>\nTEXT: Every chef can cook.\nFOL: all x. (Chef(x) -> Can(x, Cook))\nTEXT: Some people who aren’t chefs can cook.\nFOL: exists x. (-Chef(x) & Can(x, Cook))\nTEXT: People who cook can make scrambled eggs and pasta.\nFOL: all x. (Can(x, Cook) -> (CanMake(x, ScrambledEggs) & CanMake(x, Pasta)))\nTEXT: If someone can make cookies and muffins, they are a baker.\nFOL: all x. (CanMake(x, Cookies) & CanMake(x, Muffins) -> Baker(x))\nTEXT: Bakers who can also make scrambled eggs can make a good breakfast.\nFOL: all x. ((Baker(x) & CanMake(x, ScrambledEggs)) -> CanMake(x, GoodBreakfast))\nTEXT: Luke can make cookies, scrambled eggs, and muffins, but not pasta.\nFOL: CanMake(Luke, Cookies) & (CanMake(Luke, ScrambledEggs) & CanMake(Luke, Muffins) & -CanMake(Luke, Pasta)\nTEXT: Luke is a chef.\nFOL: MakeGoodBreakfast(Luke)\n\nANSWER: False\n</EVALUATE>\n\n<PREMISES>\nETS develops various standardized tests primarily in the United States for K-12 and higher education.\nETS administers international tests, including the TOEFL, TOEIC, GRE, and subject tests.\nMany of the assessments ETS develops are associated with entry to the US tertiary and quaternary education institutions.\nETS also develops K-12 statewide assessments used for accountability testing in many states.\n</PREMISES>\n<CONCLUSION>\nETS doesn't administer tests internationally.\n</CONCLUSION>\n<EVALUATE>\nTEXT: ETS develops various standardized tests primarily in the United States for K-12 and higher education.\nFOL: exists x. exists y. (Develop(eTS, x) & Develop(eTS, y) & StandardizedTest(x) & StandardizedTest(y) & In(x, UnitedState) & In(y, UnitedState) & For(x, kOneTwoAndHigherEducation) & For(y, kOneTwoAndHigherEducation))\nTEXT: ETS administers international tests, including the TOEFL, TOEIC, GRE, and subject tests.\nFOL: exists x. (Administer(eTS, x) & InternationalTest(x) & (TOEFL(x) | TOEIC(x) | GRE(x) | SubjectTest(x)))\nTEXT: Many of the assessments ETS develops are associated with entry to the US tertiary and quaternary education institutions.\nFOL: exists x. (Develop(eTS, x) & AssociatedWith(x, EntryToUSEducationInstitution))\nTEXT: ETS also develops K-12 statewide assessments used for accountability testing in many states.\nFOL: exists x. (Develop(eTS, x) & StateWideAssesment(x) & UsedFor(x, AccountabilityTesting))\nTEXT: ETS doesn't administer tests internationally.\nFOL: exists x. (Develops(Ets, x) & For(x, k-OneTwoandhighereducation)) & exists x. (Develops(Ets, x) & AssociatedWith(x, Entrytouseducationinstitutions))\n\nANSWER: False\n</EVALUATE>\n\n<PREMISES>\nDaveed Diggs is an actor and film producer.\nDaveed Diggs played two roles in the musical Hamilton on Broadway.\nOne of the actors from Hamilton won the best actor award.\nThe actor playing Thomas Jefferson won the best actor award.\nDaveed Diggs played Thomas Jefferson.\nMusicals on Broadway are not films.\n</PREMISES>\n<CONCLUSION>\nDaveed Diggs won the best actor award.\n</CONCLUSION>\n<EVALUATE>\nTEXT: Daveed Diggs is an actor and film producer.\nFOL: Actor(DaveedDiggs) & FilmProducer(DaveedDiggs)\nTEXT: Daveed Diggs played two roles in the musical Hamilton on Broadway.\nFOL: exists x. exists y.(PlaysIn(DaveedDiggs, x, Hamilton) & (-(x=y)) & PlaysIn(DaveedDiggs, y, Hamilton)) & OnBroadway(Hamilton) & Musical(Hamilton)\nTEXT: One of the actors from Hamilton won the best actor award.\nFOL: exists x. exists y.(Actor(x) & PlaysIn(x, y, Hamilton) & Wins(x, BestActorAward))\nTEXT: The actor playing Thomas Jefferson won the best actor award.\nFOL: exists x. (Actor(x) & PlaysIn(x, ThomasJefferson, Hamilton) & Wins(x, BestActorAward))\nTEXT: Daveed Diggs played Thomas Jefferson.\nFOL: Plays(DaveedDiggs, ThomasJefferson)\nTEXT: Musicals on Broadway are not films.\nFOL: all x. ((Musical(x) & OnBroadway(x)) -> -Film(x))\nTEXT: Daveed Diggs won the best actor award.\nFOL: exists x. (BRICS(x) & Speaks(x, Hindi))\n\nANSWER: True\n</EVALUATE>\n\n<PREMISES>\nSix, seven and eight are imaginary numbers.\nIf an imaginary number equals another imaginary number added by one, the first number is larger.\nIf the number x is larger than the number y, then y is not larger than x.\nSeven equals six plus one.\nEight equals seven plus one.\nTwo is negative.\nIf a number is negative, then the double of it is also negative.\nNine is the double of six.\nSix is the double of two.\n</PREMISES>\n<CONCLUSION>\nNine is negative.\n</CONCLUSION>\n<EVALUATE>", "raw_generations": ["Generation 1:\nTEXT: Six, seven and eight are imaginary numbers.\nFOL: ImaginaryNumber(Six) & ImaginaryNumber(Seven) & ImaginaryNumber(Eight)\n\nTEXT: If an imaginary number equals another imaginary number added by one, the first number is larger.\nFOL: all x. all y. ((ImaginaryNumber(x) & ImaginaryNumber(y + 1)) -> Larger(x, y))\n\nTEXT: If the number x is larger than the number y, then y is not larger than x.\nFOL: all x. all y. ((Larger(x, y) & (y != 0)) -> -Larger(y, x))\n\nTEXT: Seven equals six plus one.\nFOL: Seven = Six + 1\n\nTEXT: Eight equals seven plus one.\nFOL: Eight = Seven + 1\n\nTEXT: Two is negative.\nFOL: Negative(Two)\n\nTEXT: If a number is negative, then the double of it is also negative.\nFOL: all x. (-Negative(x) -> Negative(2*x))\n\nTEXT: Nine is the double of six.\nFOL: Nine = 2*Six\n\nTEXT: Six is the double of two.\nFOL: Six = 2*Two\n\nTEXT: Nine is negative.\nFOL: Negative(Nine)\n\nANSWER: True\nProcessed: True", "Generation 2:\nTEXT: Six, seven and eight are imaginary numbers.\nFOL: ImaginaryNumber(6) & ImaginaryNumber(7) & ImaginaryNumber(8)\n\nTEXT: If an imaginary number equals another imaginary number added by one, the first number is larger.\nFOL: all x. all y. (ImaginaryNumber(x) & ImaginaryNumber(y+1) -> Larger(x, y))\n\nTEXT: If the number x is larger than the number y, then y is not larger than x.\nFOL: all x. all y. (Larger(x, y) -> -Larger(y, x))\n\nTEXT: Seven equals six plus one.\nFOL: 7 = 6 + 1\n\nTEXT: Eight equals seven plus one.\nFOL: 8 = 7 + 1\n\nTEXT: Two is negative.\nFOL: Negative(2)\n\nTEXT: If a number is negative, then the double of it is also negative.\nFOL: all x. (-(Negative(x)) -> Negative(2*x))\n\nTEXT: Nine is the double of six.\nFOL: 9 = 2*6\n\nTEXT: Six is the double of two.\nFOL: 6 = 2*2\n\nTEXT: Nine is negative.\nFOL: Negative(9)\n\nANSWER: False\nProcessed: False", "Generation 3:\nTEXT: Six, seven and eight are imaginary numbers.\nFOL: ImaginaryNumber(Six) & ImaginaryNumber(Seven) & ImaginaryNumber(Eight)\n\nTEXT: If an imaginary number equals another imaginary number added by one, the first number is larger.\nFOL: all x. all y. ((ImaginaryNumber(x) & ImaginaryNumber(y+1)) -> Larger(x, y))\n\nTEXT: If the number x is larger than the number y, then y is not larger than x.\nFOL: all x. all y. (Larger(x, y) -> -Larger(y, x))\n\nTEXT: Seven equals six plus one.\nFOL: Equals(Seven, Add(Six, One))\n\nTEXT: Eight equals seven plus one.\nFOL: Equals(Eight, Add(Seven, One))\n\nTEXT: Two is negative.\nFOL: Negative(Two)\n\nTEXT: If a number is negative, then the double of it is also negative.\nFOL: all x. (-Negative(x) -> Negative(Double(x)))\n\nTEXT: Nine is the double of six.\nFOL: Equals(Nine, Double(Six))\n\nTEXT: Six is the double of two.\nFOL: Equals(Six, Double(Two))\n\nTEXT: Nine is negative.\nFOL: Negative(Nine)\n\nANSWER: True\nProcessed: True", "Generation 4:\nTEXT: Six, seven and eight are imaginary numbers.\nFOL: ImaginaryNumber(Six) & ImaginaryNumber(Seven) & ImaginaryNumber(Eight)\n\nTEXT: If an imaginary number equals another imaginary number added by one, the first number is larger.\nFOL: all x. all y. ((ImaginaryNumber(x) & ImaginaryNumber(y)) -> (x = y + 1 -> x > y))\n\nTEXT: If the number x is larger than the number y, then y is not larger than x.\nFOL: all x. all y. ((x > y) -> -(y > x))\n\nTEXT: Seven equals six plus one.\nFOL: Seven = Six + One\n\nTEXT: Eight equals seven plus one.\nFOL: Eight = Seven + One\n\nTEXT: Two is negative.\nFOL: Negative(Two)\n\nTEXT: If a number is negative, then the double of it is also negative.\nFOL: all x. ((Negative(x) -> (-2 * x) = Negative((-2 * x)))\n\nTEXT: Nine is the double of six.\nFOL: Nine = 2 * Six\n\nTEXT: Six is the double of two.\nFOL: Six = 2 * Two\n\nTEXT: Nine is negative.\nFOL: Negative(Nine)\n\nANSWER: True\nProcessed: True", "Generation 5:\nTEXT: Six, seven and eight are imaginary numbers.\nFOL: ImaginaryNumber(6) & ImaginaryNumber(7) & ImaginaryNumber(8)\n\nTEXT: If an imaginary number equals another imaginary number added by one, the first number is larger.\nFOL: all x. all y. ((ImaginaryNumber(x) & ImaginaryNumber(y+1)) -> Larger(x, y))\n\nTEXT: If the number x is larger than the number y, then y is not larger than x.\nFOL: all x. all y. (Larger(x, y) -> -Larger(y, x))\n\nTEXT: Seven equals six plus one.\nFOL: 7 = 6 + 1\n\nTEXT: Eight equals seven plus one.\nFOL: 8 = 7 + 1\n\nTEXT: Two is negative.\nFOL: Negative(2)\n\nTEXT: If a number is negative, then the double of it is also negative.\nFOL: all x. (-x -> -2*x)\n\nTEXT: Nine is the double of six.\nFOL: 9 = 2*6\n\nTEXT: Six is the double of two.\nFOL: 6 = 2*2\n\nTEXT: Nine is negative.\nFOL: -9\n\nANSWER: True (Based on the premises, since 9 is the double of 6, which is negative, 9 is also negative.)\nProcessed: True", "Generation 6:\nTEXT: Six, seven and eight are imaginary numbers.\nFOL: ImaginaryNumber(6) & ImaginaryNumber(7) & ImaginaryNumber(8)\n\nTEXT: If an imaginary number equals another imaginary number added by one, the first number is larger.\nFOL: all x. all y. ((ImaginaryNumber(x) & ImaginaryNumber(y+1)) -> GreaterThan(x, y))\n\nTEXT: If the number x is larger than the number y, then y is not larger than x.\nFOL: all x. all y. (GreaterThan(x, y) -> -GreaterThan(y, x))\n\nTEXT: Seven equals six plus one.\nFOL: 7 = 6 + 1\n\nTEXT: Eight equals seven plus one.\nFOL: 8 = 7 + 1\n\nTEXT: Two is negative.\nFOL: Negative(2)\n\nTEXT: If a number is negative, then the double of it is also negative.\nFOL: all x. (-Negative(x) -> Negative(2*x))\n\nTEXT: Nine is the double of six.\nFOL: 9 = 2 * 6\n\nTEXT: Six is the double of two.\nFOL: 6 = 2 * 2\n\nTEXT: Nine is negative.\nFOL: -Negative(9)\n\nANSWER: True\nProcessed: True", "Generation 7:\nTEXT: Six, seven and eight are imaginary numbers.\nFOL: ImaginaryNumber(6) & ImaginaryNumber(7) & ImaginaryNumber(8)\n\nTEXT: If an imaginary number equals another imaginary number added by one, the first number is larger.\nFOL: all x. all y. ((ImaginaryNumber(x) & ImaginaryNumber(y+1)) -> Larger(x, y))\n\nTEXT: If the number x is larger than the number y, then y is not larger than x.\nFOL: all x. all y. (Larger(x, y) -> -Larger(y, x))\n\nTEXT: Seven equals six plus one.\nFOL: 7 = 6 + 1\n\nTEXT: Eight equals seven plus one.\nFOL: 8 = 7 + 1\n\nTEXT: Two is negative.\nFOL: Negative(2)\n\nTEXT: If a number is negative, then the double of it is also negative.\nFOL: all x. (-Negative(x) -> Negative(2*x))\n\nTEXT: Nine is the double of six.\nFOL: 9 = 2*6\n\nTEXT: Six is the double of two.\nFOL: 6 = 2*2\n\nTEXT: Nine is negative.\nFOL: Negative(9)\n\nANSWER: True\nProcessed: True", "Generation 8:\nTEXT: Six, seven and eight are imaginary numbers.\nFOL: ImaginaryNumber(6) & ImaginaryNumber(7) & ImaginaryNumber(8)\n\nTEXT: If an imaginary number equals another imaginary number added by one, the first number is larger.\nFOL: all x. all y. ((ImaginaryNumber(x) & ImaginaryNumber(x + 1)) -> Larger(x, x + 1))\n\nTEXT: If the number x is larger than the number y, then y is not larger than x.\nFOL: all x. all y. (Larger(x, y) -> -Larger(y, x))\n\nTEXT: Seven equals six plus one.\nFOL: 7 = 6 + 1\n\nTEXT: Eight equals seven plus one.\nFOL: 8 = 7 + 1\n\nTEXT: Two is negative.\nFOL: Negative(2)\n\nTEXT: If a number is negative, then the double of it is also negative.\nFOL: all x. (-Negative(x) -> Negative(2*x))\n\nTEXT: Nine is the double of six.\nFOL: 9 = 2 * 6\n\nTEXT: Six is the double of two.\nFOL: 6 = 2 * 2\n\nTEXT: Nine is negative.\nFOL: Negative(9)\n\nANSWER: True\nProcessed: True", "Generation 9:\nTEXT: Six, seven and eight are imaginary numbers.\nFOL: ImaginaryNumber(6) & ImaginaryNumber(7) & ImaginaryNumber(8)\n\nTEXT: If an imaginary number equals another imaginary number added by one, the first number is larger.\nFOL: all x. all y. ((ImaginaryNumber(x) & ImaginaryNumber(y+1)) -> (Larger(x, y)))\n\nTEXT: If the number x is larger than the number y, then y is not larger than x.\nFOL: all x. all y. ((Larger(x, y)) -> (-Larger(y, x)))\n\nTEXT: Seven equals six plus one.\nFOL: (7 = (6 + 1))\n\nTEXT: Eight equals seven plus one.\nFOL: (8 = (7 + 1))\n\nTEXT: Two is negative.\nFOL: Negative(2)\n\nTEXT: If a number is negative, then the double of it is also negative.\nFOL: all x. ((Negative(x) -> Negative(2*x)))\n\nTEXT: Nine is the double of six.\nFOL: (9 = (2*6))\n\nTEXT: Six is the double of two.\nFOL: (6 = (2*2))\n\nTEXT: Nine is negative.\nFOL: Negative(9)\n\nANSWER: False\nProcessed: False", "Generation 10:\nTEXT: Six, seven and eight are imaginary numbers.\nFOL: ImaginaryNumber(6) & ImaginaryNumber(7) & ImaginaryNumber(8)\nTEXT: If an imaginary number equals another imaginary number added by one, the first number is larger.\nFOL: all x. all y. ((ImaginaryNumber(x) & ImaginaryNumber(x+1)) -> GreaterThan(x, y))\nTEXT: If the number x is larger than the number y, then y is not larger than x.\nFOL: all x. all y. ((GreaterThan(x, y)) -> (-GreaterThan(y, x)))\nTEXT: Seven equals six plus one.\nFOL: 7 = 6 + 1\nTEXT: Eight equals seven plus one.\nFOL: 8 = 7 + 1\nTEXT: Two is negative.\nFOL: Negative(2)\nTEXT: If a number is negative, then the double of it is also negative.\nFOL: all x. (-Negative(x) -> Negative(2*x))\nTEXT: Nine is the double of six.\nFOL: 9 = 2*6\nTEXT: Six is the double of two.\nFOL: 6 = 2*2\nTEXT: Nine is negative.\nFOL: Negative(9)\n\nANSWER: True\nProcessed: True\n\nReference: True\n========================================"], "answers": ["True", "False", "True", "True", "True", "True", "True", "True", "False", "True"]}
{"idx": 22, "prompt": "The following is a first-order logic (FOL) problem.\nThe problem is to determine whether the conclusion follows from the premises.\nThe premises are given in the form of a set of first-order logic sentences.\nThe conclusion is given in the form of a single first-order logic sentence.\nThe task is to translate each of the premises and conclusions into FOL expressions.and then to evaluate the conclusion as ANSWER: True, ANSWER: False, or ANSWER: Uncertain given the premises. The output should follow format TEXT: \nFOL: \nTEXT: \nFOL:... ANSWER: \n\n\n<PREMISES>\nAll biodegradable things are environment-friendly.\nAll woodware is biodegradable.\nAll paper is woodware.\nNothing is a good thing and also a bad thing.\nAll environment-friendly things are good.\nA worksheet is either paper or environment-friendly.\n</PREMISES>\n<CONCLUSION>\nA worksheet is not biodegradable.\n</CONCLUSION>\n<EVALUATE>\nTEXT: All biodegradable things are environment-friendly.\nFOL: all x. (Biodegradable(x) -> EnvironmentFriendly(x))\nTEXT: All woodware is biodegradable.\nFOL: all x. (Woodware(x) -> Biodegradable(x))\nTEXT: All paper is woodware.\nFOL: all x. (Paper(x) -> Woodware(x))\nTEXT: Nothing is a good thing and also a bad thing.\nFOL: -(exists x. (Good(x) & Bad(x)))\nTEXT: All environment-friendly things are good.\nFOL: all x. (EnvironmentFriendly(x) -> Good(x))\nTEXT: A worksheet is either paper or environment-friendly.\nFOL: ((Paper(Worksheet) & -EnvironmentFriendly(Worksheet)) | (-Paper(Worksheet) & EnvironmentFriendly(Worksheet)))\nTEXT: A worksheet is not biodegradable.\nFOL: -Dispensable(Worksheet)\n\nANSWER: Uncertain\n</EVALUATE>\n\n<PREMISES>\nA La Liga soccer team ranks higher than another La Liga soccer team if it receives more points.\nIf there are two La Liga soccer teams and neither has more points than the other, then the team which receives more points from the games between the two teams ranks higher.\nReal Madrid and Barcelona are both La Liga soccer teams.\nReal Madrid received more points than Barcelona.\nNeither Real Madrid nor Barcelona received more points from the games between them.\n</PREMISES>\n<CONCLUSION>\nReal Madrid ranks higher than Barcelona.\n</CONCLUSION>\n<EVALUATE>\nTEXT: A La Liga soccer team ranks higher than another La Liga soccer team if it receives more points.\nFOL: all x. all y. (LaLigaSoccerTeam(x) & LaLigaSoccerTeam(y) & MorePoints(x, y) -> RankHigherThan(x, y))\nTEXT: If there are two La Liga soccer teams and neither has more points than the other, then the team which receives more points from the games between the two teams ranks higher.\nFOL: all x. all y. (LaLigaSoccerTeam(x) & LaLigaSoccerTeam(y) & -MorePoints(x, y) & -MorePoints(y, x) & MorePointsInGameBetween(x, y) ->  RankHigherThan(x, y))\nTEXT: Real Madrid and Barcelona are both La Liga soccer teams.\nFOL: LaLigaSoccerTeam(RealMadrid) & LaLigaSoccerTeam(Barcelona)\nTEXT: Real Madrid received more points than Barcelona.\nFOL: MorePoints(RealMadrid, Barcelona)\nTEXT: Neither Real Madrid nor Barcelona received more points from the games between them.\nFOL: -MorePointsInGameBetween(RealMadrid, Barcelona) & -MorePointsInGameBetween(Barcelona, RealMadrid)\nTEXT: Real Madrid ranks higher than Barcelona.\nFOL: HigherRank(RealMadrid, Barcelona)\n\nANSWER: True\n</EVALUATE>\n\n<PREMISES>\nAll professional athletes spend most of their time on sports.\nAll Olympic gold medal winners are professional athletes.\nNo full-time scientists spend the majority of their time on sports.\nAll Nobel physics laureates are full-time scientists.\nAmy spends the most time on sports, or Amy is an Olympic gold medal winner.\nIf Amy is not a Nobel physics laureate, then Amy is not an Olympic gold medal winner.\n</PREMISES>\n<CONCLUSION>\nIf Amy is not an Olympic gold medal winner, then Amy is a Nobel physics laureate.\n</CONCLUSION>\n<EVALUATE>\nTEXT: All professional athletes spend most of their time on sports.\nFOL: all x. (ProfessionalAthlete(x) -> SpendOn(x, MostOfTheirTime, Sports))\nTEXT: All Olympic gold medal winners are professional athletes.\nFOL: all x. (OlympicGoldMedalWinner(x) -> ProfessionalAthlete(x))\nTEXT: No full-time scientists spend the majority of their time on sports.\nFOL: all x. (FullTimeScientist(x) -> -SpendOn(x, MostOfTheirTime, Sports))\nTEXT: All Nobel physics laureates are full-time scientists.\nFOL: all x. (NobelPhysicsLaureate(x) -> FullTimeScientist(x))\nTEXT: Amy spends the most time on sports, or Amy is an Olympic gold medal winner.\nFOL: SpendOn(Amy, MostOfTheirTime, Sports) | OlympicGoldMedalWinner(Amy)\nTEXT: If Amy is not a Nobel physics laureate, then Amy is not an Olympic gold medal winner.\nFOL: -NobelPhysicsLaureate(Amy) -> -OlympicGoldMedalWinner(Amy)\nTEXT: If Amy is not an Olympic gold medal winner, then Amy is a Nobel physics laureate.\nFOL: -OlympicGoldMedalWinner(Amy) -> NobelLaureate(Amy)\n\nANSWER: False\n</EVALUATE>\n\n<PREMISES>\nIf a person pays their taxes, then they contribute to the country.\nEveryone who works for a government department pays a tax on their salary.\nEveryone in the army is an employee of a government department.\nEveryone convicted of murder goes to prison.\nEveryone who has been to prison has a criminal record.\nJames was either once convicted of murder, or spent time in prison.\nJames either has a criminal record, or pays his taxes.\n</PREMISES>\n<CONCLUSION>\nJames does not contribute to the country.\n</CONCLUSION>\n<EVALUATE>\nTEXT: If a person pays their taxes, then they contribute to the country.\nFOL: all x. (Taxpayer(x) -> ContributeTo(x, Country))\nTEXT: Everyone who works for a government department pays a tax on their salary.\nFOL: all x. (WorkFor(x, GovernmentAgency) -> Taxpayer(x))\nTEXT: Everyone in the army is an employee of a government department.\nFOL: all x. (ServesIn(x, TheArmy) -> WorkFor(x, GovernmentAgency))\nTEXT: Everyone convicted of murder goes to prison.\nFOL: all x. (SentencedForMurder(x) -> Imprisoned(x))\nTEXT: Everyone who has been to prison has a criminal record.\nFOL: all x. (Imprisoned((x) -> Has(x, CriminalRecord))\nTEXT: James was either once convicted of murder, or spent time in prison.\nFOL: ((SentencedForMurder(James) & -Imprisoned(James)) | (-SentencedForMurder(James) & Imprisoned(James)))\nTEXT: James either has a criminal record, or pays his taxes.\nFOL: ((Has(James, CriminalRecord) & -Taxpayer(James)) | (-Has(James, CriminalRecord) & Taxpayer(James)))\nTEXT: James does not contribute to the country.\nFOL: ContributeToCountry(James)\n\nANSWER: Uncertain\n</EVALUATE>\n\n<PREMISES>\nNo songs are visuals.\nAll folk songs are songs.\nAll videos are visuals.\nAll movies are videos.\nAll sci-fi movies are movies.\nInception is a sci-fi movie.\nMac is neither a folk song nor a sci-fi movie.\n</PREMISES>\n<CONCLUSION>\nInception is a folk song.\n</CONCLUSION>\n<EVALUATE>\nTEXT: No songs are visuals.\nFOL: all x. (Song(x) -> -Visual(x))\nTEXT: All folk songs are songs.\nFOL: all x. (FolkSong(x) -> Song(x))\nTEXT: All videos are visuals.\nFOL: all x. (Video(x) -> Visual(x))\nTEXT: All movies are videos.\nFOL: all x. (Movie(x) -> Video(x))\nTEXT: All sci-fi movies are movies.\nFOL: all x. (ScifiMovie(x) -> Movie(x))\nTEXT: Inception is a sci-fi movie.\nFOL: ScifiMovie(Inception)\nTEXT: Mac is neither a folk song nor a sci-fi movie.\nFOL: -FolkSong(Mac) & -ScifiMovie(Mac)\nTEXT: Inception is a folk song.\nFOL: FolkSong(Inception)\n\nANSWER: False\n</EVALUATE>\n\n<PREMISES>\nEvery chef can cook.\nSome people who aren’t chefs can cook.\nPeople who cook can make scrambled eggs and pasta.\nIf someone can make cookies and muffins, they are a baker.\nBakers who can also make scrambled eggs can make a good breakfast.\nLuke can make cookies, scrambled eggs, and muffins, but not pasta.\n</PREMISES>\n<CONCLUSION>\nLuke is a chef.\n</CONCLUSION>\n<EVALUATE>\nTEXT: Every chef can cook.\nFOL: all x. (Chef(x) -> Can(x, Cook))\nTEXT: Some people who aren’t chefs can cook.\nFOL: exists x. (-Chef(x) & Can(x, Cook))\nTEXT: People who cook can make scrambled eggs and pasta.\nFOL: all x. (Can(x, Cook) -> (CanMake(x, ScrambledEggs) & CanMake(x, Pasta)))\nTEXT: If someone can make cookies and muffins, they are a baker.\nFOL: all x. (CanMake(x, Cookies) & CanMake(x, Muffins) -> Baker(x))\nTEXT: Bakers who can also make scrambled eggs can make a good breakfast.\nFOL: all x. ((Baker(x) & CanMake(x, ScrambledEggs)) -> CanMake(x, GoodBreakfast))\nTEXT: Luke can make cookies, scrambled eggs, and muffins, but not pasta.\nFOL: CanMake(Luke, Cookies) & (CanMake(Luke, ScrambledEggs) & CanMake(Luke, Muffins) & -CanMake(Luke, Pasta)\nTEXT: Luke is a chef.\nFOL: MakeGoodBreakfast(Luke)\n\nANSWER: False\n</EVALUATE>\n\n<PREMISES>\nETS develops various standardized tests primarily in the United States for K-12 and higher education.\nETS administers international tests, including the TOEFL, TOEIC, GRE, and subject tests.\nMany of the assessments ETS develops are associated with entry to the US tertiary and quaternary education institutions.\nETS also develops K-12 statewide assessments used for accountability testing in many states.\n</PREMISES>\n<CONCLUSION>\nETS doesn't administer tests internationally.\n</CONCLUSION>\n<EVALUATE>\nTEXT: ETS develops various standardized tests primarily in the United States for K-12 and higher education.\nFOL: exists x. exists y. (Develop(eTS, x) & Develop(eTS, y) & StandardizedTest(x) & StandardizedTest(y) & In(x, UnitedState) & In(y, UnitedState) & For(x, kOneTwoAndHigherEducation) & For(y, kOneTwoAndHigherEducation))\nTEXT: ETS administers international tests, including the TOEFL, TOEIC, GRE, and subject tests.\nFOL: exists x. (Administer(eTS, x) & InternationalTest(x) & (TOEFL(x) | TOEIC(x) | GRE(x) | SubjectTest(x)))\nTEXT: Many of the assessments ETS develops are associated with entry to the US tertiary and quaternary education institutions.\nFOL: exists x. (Develop(eTS, x) & AssociatedWith(x, EntryToUSEducationInstitution))\nTEXT: ETS also develops K-12 statewide assessments used for accountability testing in many states.\nFOL: exists x. (Develop(eTS, x) & StateWideAssesment(x) & UsedFor(x, AccountabilityTesting))\nTEXT: ETS doesn't administer tests internationally.\nFOL: exists x. (Develops(Ets, x) & For(x, k-OneTwoandhighereducation)) & exists x. (Develops(Ets, x) & AssociatedWith(x, Entrytouseducationinstitutions))\n\nANSWER: False\n</EVALUATE>\n\n<PREMISES>\nDaveed Diggs is an actor and film producer.\nDaveed Diggs played two roles in the musical Hamilton on Broadway.\nOne of the actors from Hamilton won the best actor award.\nThe actor playing Thomas Jefferson won the best actor award.\nDaveed Diggs played Thomas Jefferson.\nMusicals on Broadway are not films.\n</PREMISES>\n<CONCLUSION>\nDaveed Diggs won the best actor award.\n</CONCLUSION>\n<EVALUATE>\nTEXT: Daveed Diggs is an actor and film producer.\nFOL: Actor(DaveedDiggs) & FilmProducer(DaveedDiggs)\nTEXT: Daveed Diggs played two roles in the musical Hamilton on Broadway.\nFOL: exists x. exists y.(PlaysIn(DaveedDiggs, x, Hamilton) & (-(x=y)) & PlaysIn(DaveedDiggs, y, Hamilton)) & OnBroadway(Hamilton) & Musical(Hamilton)\nTEXT: One of the actors from Hamilton won the best actor award.\nFOL: exists x. exists y.(Actor(x) & PlaysIn(x, y, Hamilton) & Wins(x, BestActorAward))\nTEXT: The actor playing Thomas Jefferson won the best actor award.\nFOL: exists x. (Actor(x) & PlaysIn(x, ThomasJefferson, Hamilton) & Wins(x, BestActorAward))\nTEXT: Daveed Diggs played Thomas Jefferson.\nFOL: Plays(DaveedDiggs, ThomasJefferson)\nTEXT: Musicals on Broadway are not films.\nFOL: all x. ((Musical(x) & OnBroadway(x)) -> -Film(x))\nTEXT: Daveed Diggs won the best actor award.\nFOL: exists x. (BRICS(x) & Speaks(x, Hindi))\n\nANSWER: True\n</EVALUATE>\n\n<PREMISES>\nSix, seven and eight are imaginary numbers.\nIf an imaginary number equals another imaginary number added by one, the first number is smaller.\nIf the number x is larger than the number y, then y is not larger than x.\nSeven equals six plus one.\nEight equals seven plus one.\nTwo is positive.\nIf a number is positive, then the double of it is also positive.\nEight is the double of six.\nSix is the double of two.\n</PREMISES>\n<CONCLUSION>\nSix is smaller than seven.\n</CONCLUSION>\n<EVALUATE>", "raw_generations": ["Generation 1:\nTEXT: Six, seven and eight are imaginary numbers.\nFOL: ImaginaryNumber(Six) & ImaginaryNumber(Seven) & ImaginaryNumber(Eight)\n\nTEXT: If an imaginary number equals another imaginary number added by one, the first number is smaller.\nFOL: all x. all y. ((ImaginaryNumber(x) & ImaginaryNumber(y+1)) -> x < y)\n\nTEXT: If the number x is larger than the number y, then y is not larger than x.\nFOL: all x. all y. (x > y -> -(y > x))\n\nTEXT: Seven equals six plus one.\nFOL: Seven = Six + One\n\nTEXT: Eight equals seven plus one.\nFOL: Eight = Seven + One\n\nTEXT: Two is positive.\nFOL: Positive(Two)\n\nTEXT: If a number is positive, then the double of it is also positive.\nFOL: all x. (Positive(x) -> Positive(2*x))\n\nTEXT: Eight is the double of six.\nFOL: Eight = 2*Six\n\nTEXT: Six is the double of two.\nFOL: Six = 2*Two\n\nTEXT: Six is smaller than seven.\nFOL: Six < Seven\n\nANSWER: True\nProcessed: True", "Generation 2:\nTEXT: Six, seven and eight are imaginary numbers.\nFOL: ImaginaryNumber(6) & ImaginaryNumber(7) & ImaginaryNumber(8)\n\nTEXT: If an imaginary number equals another imaginary number added by one, the first number is smaller.\nFOL: all x. all y. ((ImaginaryNumber(x) & ImaginaryNumber(y+1)) -> Smaller(x, y))\n\nTEXT: If the number x is larger than the number y, then y is not larger than x.\nFOL: all x. all y. (Larger(x, y) -> -Larger(y, x))\n\nTEXT: Seven equals six plus one.\nFOL: 7 = 6 + 1\n\nTEXT: Eight equals seven plus one.\nFOL: 8 = 7 + 1\n\nTEXT: Two is positive.\nFOL: Positive(2)\n\nTEXT: If a number is positive, then the double of it is also positive.\nFOL: all x. (Positive(x) -> Positive(2*x))\n\nTEXT: Eight is the double of six.\nFOL: 8 = 2*6\n\nTEXT: Six is the double of two.\nFOL: 6 = 2*2\n\nTEXT: Six is smaller than seven.\nFOL: Smaller(6, 7)\n\nANSWER: True\nProcessed: True", "Generation 3:\nTEXT: Six, seven and eight are imaginary numbers.\nFOL: ImaginaryNumber(Six) & ImaginaryNumber(Seven) & ImaginaryNumber(Eight)\nTEXT: If an imaginary number equals another imaginary number added by one, the first number is smaller.\nFOL: all x. all y. ((ImaginaryNumber(x) & ImaginaryNumber(y)) -> (x = y + 1 -> x < y))\nTEXT: If the number x is larger than the number y, then y is not larger than x.\nFOL: all x. all y. (LargerThan(x, y) -> -LargerThan(y, x))\nTEXT: Seven equals six plus one.\nFOL: Seven = Six + 1\nTEXT: Eight equals seven plus one.\nFOL: Eight = Seven + 1\nTEXT: Two is positive.\nFOL: Positive(Two)\nTEXT: If a number is positive, then the double of it is also positive.\nFOL: all x. (Positive(x) -> Positive(Double(x)))\nTEXT: Eight is the double of six.\nFOL: Eight = Double(Six)\nTEXT: Six is the double of two.\nFOL: Six = Double(Two)\nTEXT: Six is smaller than seven.\nFOL: Six < Seven\n\nANSWER: True\nProcessed: True", "Generation 4:\nTEXT: Six, seven and eight are imaginary numbers.\nFOL: ImaginaryNumber(Six) & ImaginaryNumber(Seven) & ImaginaryNumber(Eight)\n\nTEXT: If an imaginary number equals another imaginary number added by one, the first number is smaller.\nFOL: all x. all y. ((ImaginaryNumber(x) & ImaginaryNumber(y)) -> ((x = (y + 1)) -> (x < y)))\n\nTEXT: If the number x is larger than the number y, then y is not larger than x.\nFOL: all x. all y. ((x > y) -> (-(y > x)))\n\nTEXT: Seven equals six plus one.\nFOL: Seven = (Six + 1)\n\nTEXT: Eight equals seven plus one.\nFOL: Eight = (Seven + 1)\n\nTEXT: Two is positive.\nFOL: PositiveNumber(Two)\n\nTEXT: If a number is positive, then the double of it is also positive.\nFOL: all x. ((PositiveNumber(x) -> PositiveNumber(2 * x))\n\nTEXT: Eight is the double of six.\nFOL: Eight = (6 * 2)\n\nTEXT: Six is the double of two.\nFOL: Six = (2 * 2)\n\nTEXT: Six is smaller than seven.\nFOL: Six < Seven\n\nANSWER: True\nProcessed: True", "Generation 5:\nTEXT: Six, seven and eight are imaginary numbers.\nFOL: ImaginaryNumber(6) & ImaginaryNumber(7) & ImaginaryNumber(8)\n\nTEXT: If an imaginary number equals another imaginary number added by one, the first number is smaller.\nFOL: all x. all y. ((ImaginaryNumber(x) & ImaginaryNumber(y+1)) -> x < y)\n\nTEXT: If the number x is larger than the number y, then y is not larger than x.\nFOL: all x. all y. (x > y -> -(y > x))\n\nTEXT: Seven equals six plus one.\nFOL: 7 = 6 + 1\n\nTEXT: Eight equals seven plus one.\nFOL: 8 = 7 + 1\n\nTEXT: Two is positive.\nFOL: Positive(2)\n\nTEXT: If a number is positive, then the double of it is also positive.\nFOL: all x. (Positive(x) -> Positive(2*x))\n\nTEXT: Eight is the double of six.\nFOL: 8 = 2*6\n\nTEXT: Six is the double of two.\nFOL: 6 = 2*2\n\nTEXT: Six is smaller than seven.\nFOL: 6 < 7\n\nANSWER: True\nProcessed: True", "Generation 6:\nTEXT: Six, seven and eight are imaginary numbers.\nFOL: ImaginaryNumber(6) & ImaginaryNumber(7) & ImaginaryNumber(8)\n\nTEXT: If an imaginary number equals another imaginary number added by one, the first number is smaller.\nFOL: all x. all y. (ImaginaryNumber(x) & ImaginaryNumber(y+1) -> x < y)\n\nTEXT: If the number x is larger than the number y, then y is not larger than x.\nFOL: all x. all y. (x > y -> y < x)\n\nTEXT: Seven equals six plus one.\nFOL: 7 = 6 + 1\n\nTEXT: Eight equals seven plus one.\nFOL: 8 = 7 + 1\n\nTEXT: Two is positive.\nFOL: Positive(2)\n\nTEXT: If a number is positive, then the double of it is also positive.\nFOL: all x. (Positive(x) -> Positive(2*x))\n\nTEXT: Eight is the double of six.\nFOL: 8 = 2 * 6\n\nTEXT: Six is the double of two.\nFOL: 6 = 2 * 2\n\nTEXT: Six is smaller than seven.\nFOL: 6 < 7\n\nANSWER: True\nProcessed: True", "Generation 7:\nTEXT: Six, seven and eight are imaginary numbers.\nFOL: ImaginaryNumber(6) & ImaginaryNumber(7) & ImaginaryNumber(8)\n\nTEXT: If an imaginary number equals another imaginary number added by one, the first number is smaller.\nFOL: all x. all y. ((ImaginaryNumber(x) & ImaginaryNumber(y+1)) -> x < y)\n\nTEXT: If the number x is larger than the number y, then y is not larger than x.\nFOL: all x. all y. (x > y -> -(y > x))\n\nTEXT: Seven equals six plus one.\nFOL: 7 = 6 + 1\n\nTEXT: Eight equals seven plus one.\nFOL: 8 = 7 + 1\n\nTEXT: Two is positive.\nFOL: Positive(2)\n\nTEXT: If a number is positive, then the double of it is also positive.\nFOL: all x. (Positive(x) -> Positive(2*x))\n\nTEXT: Eight is the double of six.\nFOL: 8 = 2*6\n\nTEXT: Six is the double of two.\nFOL: 6 = 2*2\n\nTEXT: Six is smaller than seven.\nFOL: 6 < 7\n\nANSWER: True\nProcessed: True", "Generation 8:\nTEXT: Six, seven and eight are imaginary numbers.\nFOL: ImaginaryNumber(6) & ImaginaryNumber(7) & ImaginaryNumber(8)\n\nTEXT: If an imaginary number equals another imaginary number added by one, the first number is smaller.\nFOL: all x. all y. ((ImaginaryNumber(x) & ImaginaryNumber(y+1)) -> (x < y))\n\nTEXT: If the number x is larger than the number y, then y is not larger than x.\nFOL: all x. all y. ((x > y) -> (-(y > x)))\n\nTEXT: Seven equals six plus one.\nFOL: 7 = 6 + 1\n\nTEXT: Eight equals seven plus one.\nFOL: 8 = 7 + 1\n\nTEXT: Two is positive.\nFOL: Positive(2)\n\nTEXT: If a number is positive, then the double of it is also positive.\nFOL: all x. ((Positive(x) -> Positive(2*x)) & (-(x < 0)))\n\nTEXT: Eight is the double of six.\nFOL: 8 = 2 * 6\n\nTEXT: Six is the double of two.\nFOL: 6 = 2 * 2\n\nTEXT: Six is smaller than seven.\nFOL: 6 < 7\n\nANSWER: True\nProcessed: True", "Generation 9:\nTEXT: Six, seven and eight are imaginary numbers.\nFOL: ImaginaryNumber(6) & ImaginaryNumber(7) & ImaginaryNumber(8)\n\nTEXT: If an imaginary number equals another imaginary number added by one, the first number is smaller.\nFOL: all x. all y. (ImaginaryNumber(x) & ImaginaryNumber(y) & x + 1 = y -> x < y)\n\nTEXT: If the number x is larger than the number y, then y is not larger than x.\nFOL: all x. all y. (x > y -> y < x)\n\nTEXT: Seven equals six plus one.\nFOL: 7 = 6 + 1\n\nTEXT: Eight equals seven plus one.\nFOL: 8 = 7 + 1\n\nTEXT: Two is positive.\nFOL: Positive(2)\n\nTEXT: If a number is positive, then the double of it is also positive.\nFOL: all x. (Positive(x) -> Positive(2*x))\n\nTEXT: Eight is the double of six.\nFOL: 8 = 2*6\n\nTEXT: Six is the double of two.\nFOL: 6 = 2*2\n\nTEXT: Six is smaller than seven.\nFOL: 6 < 7\n\nANSWER: True\nProcessed: True", "Generation 10:\nTEXT: Six, seven and eight are imaginary numbers.\nFOL: ImaginaryNumber(6) & ImaginaryNumber(7) & ImaginaryNumber(8)\n\nTEXT: If an imaginary number equals another imaginary number added by one, the first number is smaller.\nFOL: all x. all y. ((ImaginaryNumber(x) & ImaginaryNumber(x + 1)) -> x > y)\n\nTEXT: If the number x is larger than the number y, then y is not larger than x.\nFOL: all x. all y. (x > y -> y < x)\n\nTEXT: Seven equals six plus one.\nFOL: 7 = 6 + 1\n\nTEXT: Eight equals seven plus one.\nFOL: 8 = 7 + 1\n\nTEXT: Two is positive.\nFOL: Positive(2)\n\nTEXT: If a number is positive, then the double of it is also positive.\nFOL: all x. (Positive(x) -> Positive(2 * x))\n\nTEXT: Eight is the double of six.\nFOL: 8 = 2 * 6\n\nTEXT: Six is the double of two.\nFOL: 6 = 2 * 2\n\nTEXT: Six is smaller than seven.\nFOL: 6 < 7\n\nANSWER: True\nProcessed: True\n\nReference: False\n========================================"], "answers": ["True", "True", "True", "True", "True", "True", "True", "True", "True", "True"]}
{"idx": 23, "prompt": "The following is a first-order logic (FOL) problem.\nThe problem is to determine whether the conclusion follows from the premises.\nThe premises are given in the form of a set of first-order logic sentences.\nThe conclusion is given in the form of a single first-order logic sentence.\nThe task is to translate each of the premises and conclusions into FOL expressions.and then to evaluate the conclusion as ANSWER: True, ANSWER: False, or ANSWER: Uncertain given the premises. The output should follow format TEXT: \nFOL: \nTEXT: \nFOL:... ANSWER: \n\n\n<PREMISES>\nAll biodegradable things are environment-friendly.\nAll woodware is biodegradable.\nAll paper is woodware.\nNothing is a good thing and also a bad thing.\nAll environment-friendly things are good.\nA worksheet is either paper or environment-friendly.\n</PREMISES>\n<CONCLUSION>\nA worksheet is not biodegradable.\n</CONCLUSION>\n<EVALUATE>\nTEXT: All biodegradable things are environment-friendly.\nFOL: all x. (Biodegradable(x) -> EnvironmentFriendly(x))\nTEXT: All woodware is biodegradable.\nFOL: all x. (Woodware(x) -> Biodegradable(x))\nTEXT: All paper is woodware.\nFOL: all x. (Paper(x) -> Woodware(x))\nTEXT: Nothing is a good thing and also a bad thing.\nFOL: -(exists x. (Good(x) & Bad(x)))\nTEXT: All environment-friendly things are good.\nFOL: all x. (EnvironmentFriendly(x) -> Good(x))\nTEXT: A worksheet is either paper or environment-friendly.\nFOL: ((Paper(Worksheet) & -EnvironmentFriendly(Worksheet)) | (-Paper(Worksheet) & EnvironmentFriendly(Worksheet)))\nTEXT: A worksheet is not biodegradable.\nFOL: -Dispensable(Worksheet)\n\nANSWER: Uncertain\n</EVALUATE>\n\n<PREMISES>\nA La Liga soccer team ranks higher than another La Liga soccer team if it receives more points.\nIf there are two La Liga soccer teams and neither has more points than the other, then the team which receives more points from the games between the two teams ranks higher.\nReal Madrid and Barcelona are both La Liga soccer teams.\nReal Madrid received more points than Barcelona.\nNeither Real Madrid nor Barcelona received more points from the games between them.\n</PREMISES>\n<CONCLUSION>\nReal Madrid ranks higher than Barcelona.\n</CONCLUSION>\n<EVALUATE>\nTEXT: A La Liga soccer team ranks higher than another La Liga soccer team if it receives more points.\nFOL: all x. all y. (LaLigaSoccerTeam(x) & LaLigaSoccerTeam(y) & MorePoints(x, y) -> RankHigherThan(x, y))\nTEXT: If there are two La Liga soccer teams and neither has more points than the other, then the team which receives more points from the games between the two teams ranks higher.\nFOL: all x. all y. (LaLigaSoccerTeam(x) & LaLigaSoccerTeam(y) & -MorePoints(x, y) & -MorePoints(y, x) & MorePointsInGameBetween(x, y) ->  RankHigherThan(x, y))\nTEXT: Real Madrid and Barcelona are both La Liga soccer teams.\nFOL: LaLigaSoccerTeam(RealMadrid) & LaLigaSoccerTeam(Barcelona)\nTEXT: Real Madrid received more points than Barcelona.\nFOL: MorePoints(RealMadrid, Barcelona)\nTEXT: Neither Real Madrid nor Barcelona received more points from the games between them.\nFOL: -MorePointsInGameBetween(RealMadrid, Barcelona) & -MorePointsInGameBetween(Barcelona, RealMadrid)\nTEXT: Real Madrid ranks higher than Barcelona.\nFOL: HigherRank(RealMadrid, Barcelona)\n\nANSWER: True\n</EVALUATE>\n\n<PREMISES>\nAll professional athletes spend most of their time on sports.\nAll Olympic gold medal winners are professional athletes.\nNo full-time scientists spend the majority of their time on sports.\nAll Nobel physics laureates are full-time scientists.\nAmy spends the most time on sports, or Amy is an Olympic gold medal winner.\nIf Amy is not a Nobel physics laureate, then Amy is not an Olympic gold medal winner.\n</PREMISES>\n<CONCLUSION>\nIf Amy is not an Olympic gold medal winner, then Amy is a Nobel physics laureate.\n</CONCLUSION>\n<EVALUATE>\nTEXT: All professional athletes spend most of their time on sports.\nFOL: all x. (ProfessionalAthlete(x) -> SpendOn(x, MostOfTheirTime, Sports))\nTEXT: All Olympic gold medal winners are professional athletes.\nFOL: all x. (OlympicGoldMedalWinner(x) -> ProfessionalAthlete(x))\nTEXT: No full-time scientists spend the majority of their time on sports.\nFOL: all x. (FullTimeScientist(x) -> -SpendOn(x, MostOfTheirTime, Sports))\nTEXT: All Nobel physics laureates are full-time scientists.\nFOL: all x. (NobelPhysicsLaureate(x) -> FullTimeScientist(x))\nTEXT: Amy spends the most time on sports, or Amy is an Olympic gold medal winner.\nFOL: SpendOn(Amy, MostOfTheirTime, Sports) | OlympicGoldMedalWinner(Amy)\nTEXT: If Amy is not a Nobel physics laureate, then Amy is not an Olympic gold medal winner.\nFOL: -NobelPhysicsLaureate(Amy) -> -OlympicGoldMedalWinner(Amy)\nTEXT: If Amy is not an Olympic gold medal winner, then Amy is a Nobel physics laureate.\nFOL: -OlympicGoldMedalWinner(Amy) -> NobelLaureate(Amy)\n\nANSWER: False\n</EVALUATE>\n\n<PREMISES>\nIf a person pays their taxes, then they contribute to the country.\nEveryone who works for a government department pays a tax on their salary.\nEveryone in the army is an employee of a government department.\nEveryone convicted of murder goes to prison.\nEveryone who has been to prison has a criminal record.\nJames was either once convicted of murder, or spent time in prison.\nJames either has a criminal record, or pays his taxes.\n</PREMISES>\n<CONCLUSION>\nJames does not contribute to the country.\n</CONCLUSION>\n<EVALUATE>\nTEXT: If a person pays their taxes, then they contribute to the country.\nFOL: all x. (Taxpayer(x) -> ContributeTo(x, Country))\nTEXT: Everyone who works for a government department pays a tax on their salary.\nFOL: all x. (WorkFor(x, GovernmentAgency) -> Taxpayer(x))\nTEXT: Everyone in the army is an employee of a government department.\nFOL: all x. (ServesIn(x, TheArmy) -> WorkFor(x, GovernmentAgency))\nTEXT: Everyone convicted of murder goes to prison.\nFOL: all x. (SentencedForMurder(x) -> Imprisoned(x))\nTEXT: Everyone who has been to prison has a criminal record.\nFOL: all x. (Imprisoned((x) -> Has(x, CriminalRecord))\nTEXT: James was either once convicted of murder, or spent time in prison.\nFOL: ((SentencedForMurder(James) & -Imprisoned(James)) | (-SentencedForMurder(James) & Imprisoned(James)))\nTEXT: James either has a criminal record, or pays his taxes.\nFOL: ((Has(James, CriminalRecord) & -Taxpayer(James)) | (-Has(James, CriminalRecord) & Taxpayer(James)))\nTEXT: James does not contribute to the country.\nFOL: ContributeToCountry(James)\n\nANSWER: Uncertain\n</EVALUATE>\n\n<PREMISES>\nNo songs are visuals.\nAll folk songs are songs.\nAll videos are visuals.\nAll movies are videos.\nAll sci-fi movies are movies.\nInception is a sci-fi movie.\nMac is neither a folk song nor a sci-fi movie.\n</PREMISES>\n<CONCLUSION>\nInception is a folk song.\n</CONCLUSION>\n<EVALUATE>\nTEXT: No songs are visuals.\nFOL: all x. (Song(x) -> -Visual(x))\nTEXT: All folk songs are songs.\nFOL: all x. (FolkSong(x) -> Song(x))\nTEXT: All videos are visuals.\nFOL: all x. (Video(x) -> Visual(x))\nTEXT: All movies are videos.\nFOL: all x. (Movie(x) -> Video(x))\nTEXT: All sci-fi movies are movies.\nFOL: all x. (ScifiMovie(x) -> Movie(x))\nTEXT: Inception is a sci-fi movie.\nFOL: ScifiMovie(Inception)\nTEXT: Mac is neither a folk song nor a sci-fi movie.\nFOL: -FolkSong(Mac) & -ScifiMovie(Mac)\nTEXT: Inception is a folk song.\nFOL: FolkSong(Inception)\n\nANSWER: False\n</EVALUATE>\n\n<PREMISES>\nEvery chef can cook.\nSome people who aren’t chefs can cook.\nPeople who cook can make scrambled eggs and pasta.\nIf someone can make cookies and muffins, they are a baker.\nBakers who can also make scrambled eggs can make a good breakfast.\nLuke can make cookies, scrambled eggs, and muffins, but not pasta.\n</PREMISES>\n<CONCLUSION>\nLuke is a chef.\n</CONCLUSION>\n<EVALUATE>\nTEXT: Every chef can cook.\nFOL: all x. (Chef(x) -> Can(x, Cook))\nTEXT: Some people who aren’t chefs can cook.\nFOL: exists x. (-Chef(x) & Can(x, Cook))\nTEXT: People who cook can make scrambled eggs and pasta.\nFOL: all x. (Can(x, Cook) -> (CanMake(x, ScrambledEggs) & CanMake(x, Pasta)))\nTEXT: If someone can make cookies and muffins, they are a baker.\nFOL: all x. (CanMake(x, Cookies) & CanMake(x, Muffins) -> Baker(x))\nTEXT: Bakers who can also make scrambled eggs can make a good breakfast.\nFOL: all x. ((Baker(x) & CanMake(x, ScrambledEggs)) -> CanMake(x, GoodBreakfast))\nTEXT: Luke can make cookies, scrambled eggs, and muffins, but not pasta.\nFOL: CanMake(Luke, Cookies) & (CanMake(Luke, ScrambledEggs) & CanMake(Luke, Muffins) & -CanMake(Luke, Pasta)\nTEXT: Luke is a chef.\nFOL: MakeGoodBreakfast(Luke)\n\nANSWER: False\n</EVALUATE>\n\n<PREMISES>\nETS develops various standardized tests primarily in the United States for K-12 and higher education.\nETS administers international tests, including the TOEFL, TOEIC, GRE, and subject tests.\nMany of the assessments ETS develops are associated with entry to the US tertiary and quaternary education institutions.\nETS also develops K-12 statewide assessments used for accountability testing in many states.\n</PREMISES>\n<CONCLUSION>\nETS doesn't administer tests internationally.\n</CONCLUSION>\n<EVALUATE>\nTEXT: ETS develops various standardized tests primarily in the United States for K-12 and higher education.\nFOL: exists x. exists y. (Develop(eTS, x) & Develop(eTS, y) & StandardizedTest(x) & StandardizedTest(y) & In(x, UnitedState) & In(y, UnitedState) & For(x, kOneTwoAndHigherEducation) & For(y, kOneTwoAndHigherEducation))\nTEXT: ETS administers international tests, including the TOEFL, TOEIC, GRE, and subject tests.\nFOL: exists x. (Administer(eTS, x) & InternationalTest(x) & (TOEFL(x) | TOEIC(x) | GRE(x) | SubjectTest(x)))\nTEXT: Many of the assessments ETS develops are associated with entry to the US tertiary and quaternary education institutions.\nFOL: exists x. (Develop(eTS, x) & AssociatedWith(x, EntryToUSEducationInstitution))\nTEXT: ETS also develops K-12 statewide assessments used for accountability testing in many states.\nFOL: exists x. (Develop(eTS, x) & StateWideAssesment(x) & UsedFor(x, AccountabilityTesting))\nTEXT: ETS doesn't administer tests internationally.\nFOL: exists x. (Develops(Ets, x) & For(x, k-OneTwoandhighereducation)) & exists x. (Develops(Ets, x) & AssociatedWith(x, Entrytouseducationinstitutions))\n\nANSWER: False\n</EVALUATE>\n\n<PREMISES>\nDaveed Diggs is an actor and film producer.\nDaveed Diggs played two roles in the musical Hamilton on Broadway.\nOne of the actors from Hamilton won the best actor award.\nThe actor playing Thomas Jefferson won the best actor award.\nDaveed Diggs played Thomas Jefferson.\nMusicals on Broadway are not films.\n</PREMISES>\n<CONCLUSION>\nDaveed Diggs won the best actor award.\n</CONCLUSION>\n<EVALUATE>\nTEXT: Daveed Diggs is an actor and film producer.\nFOL: Actor(DaveedDiggs) & FilmProducer(DaveedDiggs)\nTEXT: Daveed Diggs played two roles in the musical Hamilton on Broadway.\nFOL: exists x. exists y.(PlaysIn(DaveedDiggs, x, Hamilton) & (-(x=y)) & PlaysIn(DaveedDiggs, y, Hamilton)) & OnBroadway(Hamilton) & Musical(Hamilton)\nTEXT: One of the actors from Hamilton won the best actor award.\nFOL: exists x. exists y.(Actor(x) & PlaysIn(x, y, Hamilton) & Wins(x, BestActorAward))\nTEXT: The actor playing Thomas Jefferson won the best actor award.\nFOL: exists x. (Actor(x) & PlaysIn(x, ThomasJefferson, Hamilton) & Wins(x, BestActorAward))\nTEXT: Daveed Diggs played Thomas Jefferson.\nFOL: Plays(DaveedDiggs, ThomasJefferson)\nTEXT: Musicals on Broadway are not films.\nFOL: all x. ((Musical(x) & OnBroadway(x)) -> -Film(x))\nTEXT: Daveed Diggs won the best actor award.\nFOL: exists x. (BRICS(x) & Speaks(x, Hindi))\n\nANSWER: True\n</EVALUATE>\n\n<PREMISES>\nDeng Xiaoping danced as the paramount leader of the People's Republic of China.\nDeng Xiaoping was praised for his reaffirmation of the reform program, as well as the reversion of Hong Kong to Chinese control and the return of Macau.\nAs the party's Secretary-General under Mao and Vice Premier in the 1950s, Deng Xiaoping opposed over the Anti-Rightist Campaign launched by Mao.\nDeng Xiaoping became detrimental to France's music industry following the disastrous Great Leap Forward.\nMao Zedong was born in 1976.\nAfter Mao Zedong's birth, Deng Xiaoping gradually rose to supreme power.\n</PREMISES>\n<CONCLUSION>\nThe person detrimental to France's music industry gradually rose to supreme power.\n</CONCLUSION>\n<EVALUATE>", "raw_generations": ["Generation 1:\nTEXT: Deng Xiaoping became detrimental to France's music industry following the disastrous Great Leap Forward.\nFOL: DetrimentalTo(DengXiaoping, FranceMusicIndustry) & Following(DisastrousGreatLeapForward, DengXiaopingBecomingDetrimental)\nTEXT: After Mao Zedong's birth, Deng Xiaoping gradually rose to supreme power.\nFOL: After(MaoZedongBirth, GradualRiseToSupremePowerOfDengXiaoping)\nTEXT: The person detrimental to France's music industry gradually rose to supreme power.\nFOL: exists x. (DetrimentalTo(x, FranceMusicIndustry) & GradualRiseToSupremePower(x))\n\nANSWER: True\nProcessed: True", "Generation 2:\nTEXT: Deng Xiaoping danced as the paramount leader of the People's Republic of China.\nFOL: Dances(DengXiaoping, ParamountLeaderOfPRC)\n\nTEXT: Deng Xiaoping was praised for his reaffirmation of the reform program, as well as the reversion of Hong Kong to Chinese control and the return of Macau.\nFOL: Praised(DengXiaoping, ReaffirmationOfReformProgram) & Praised(DengXiaoping, ReversionOfHongKongToChineseControl) & Praised(DengXiaoping, ReturnOfMacau)\n\nTEXT: As the party's Secretary-General under Mao and Vice Premier in the 1950s, Deng Xiaoping opposed over the Anti-Rightist Campaign launched by Mao.\nFOL: SecretaryGeneralOfParty(DengXiaoping, Under(Mao)) & VicePremier(DengXiaoping, 1950s) & Opposed(DengXiaoping, AntiRightistCampaignLaunchedByMao)\n\nTEXT: Deng Xiaoping became detrimental to France's music industry following the disastrous Great Leap Forward.\nFOL: DetrimentalTo(DengXiaoping, FranceMusicIndustry) & Following(GreatLeapForward, Disastrous)\n\nTEXT: Mao Zedong was born in 1976.\nFOL: Born(MaoZedong, 1976)\n\nTEXT: After Mao Zedong's birth, Deng Xiaoping gradually rose to supreme power.\nFOL: GraduallyRose(DengXiaoping, SupremePower, After(MaoZedong'sBirth))\n\nTEXT: The person detrimental to France's music industry gradually rose to supreme power.\nFOL: exists x. (DetrimentalTo(x, FranceMusicIndustry) & GraduallyRose(x, SupremePower, SomeTime))\n\nANSWER: The conclusion cannot be determined from the given premises since it doesn't refer to Deng Xiaoping explicitly.\nProcessed: Error", "Generation 3:\nTEXT: Deng Xiaoping danced as the paramount leader of the People's Republic of China.\nFOL: Danced(DengXiaoping, ParamountLeaderOf(DengXiaoping, People'sRepublicOfChina))\nTEXT: Deng Xiaoping was praised for his reaffirmation of the reform program, as well as the reversion of Hong Kong to Chinese control and the return of Macau.\nFOL: Praise(Someone, DengXiaoping) & Reaffirmation(DengXiaoping, ReformProgram) & Reversion(HongKong, ChineseControl) & Return(Macau)\nTEXT: As the party's Secretary-General under Mao and Vice Premier in the 1950s, Deng Xiaoping opposed the Anti-Rightist Campaign launched by Mao.\nFOL: SecretaryGeneral(DengXiaoping, Party) & VicePremier(DengXiaoping, 1950s) & Opposed(DengXiaoping, AntiRightistCampaign)\nTEXT: Deng Xiaoping became detrimental to France's music industry following the disastrous Great Leap Forward.\nFOL: Detrimental(DengXiaoping, FranceMusicIndustry) & Disastrous(GreatLeapForward)\nTEXT: Mao Zedong was born in 1976.\nFOL: Born(MaoZedong, 1976)\nTEXT: After Mao Zedong's birth, Deng Xiaoping gradually rose to supreme power.\nFOL: After(MaoZedong'sBirth, GraduallyRose(DengXiaoping, SupremePower))\nTEXT: The person detrimental to France's music industry gradually rose to supreme power.\nFOL: exists x. (Detrimental(x, FranceMusicIndustry) & GraduallyRose(x, SupremePower))\n\nANSWER: True\nProcessed: True", "Generation 4:\nTEXT: Deng Xiaoping became detrimental to France's music industry following the disastrous Great Leap Forward.\nFOL: DetrimentalTo(DengXiaoping, FranceMusicIndustry) & Following(DisastrousGreatLeapForward, DetrimentalTo(DengXiaoping, FranceMusicIndustry))\nTEXT: After Mao Zedong's birth, Deng Xiaoping gradually rose to supreme power.\nFOL: GraduallyRoseToSupremePower(DengXiaoping) & After(MaoZedongBirth, GraduallyRoseToSupremePower(DengXiaoping))\n\nANSWER: True\nProcessed: True", "Generation 5:\nTEXT: Deng Xiaoping danced as the paramount leader of the People's Republic of China.\nFOL: Danced(DengXiaoping, ParamountLeader(DengXiaoping, PeopleRepublicOfChina))\nTEXT: Deng Xiaoping was praised for his reaffirmation of the reform program, as well as the reversion of Hong Kong to Chinese control and the return of Macau.\nFOL: Praised(DengXiaoping, ReaffirmationOfReformProgram(DengXiaoping) & ReversionOfHongKongToChineseControl(DengXiaoping) & ReturnOfMacau(DengXiaoping))\nTEXT: As the party's Secretary-General under Mao and Vice Premier in the 1950s, Deng Xiaoping opposed over the Anti-Rightist Campaign launched by Mao.\nFOL: (SecretaryGeneral(DengXiaoping, Party) & VicePremier(DengXiaoping, 1950s) & Opposed(DengXiaoping, AntiRightistCampaign(Mao)))\nTEXT: Deng Xiaoping became detrimental to France's music industry following the disastrous Great Leap Forward.\nFOL: DetrimentalTo(DengXiaoping, FranceMusicIndustry) & Following(GreatLeapForward, DengXiaoping)\nTEXT: Mao Zedong was born in 1976.\nFOL: Born(MaoZedong, 1976)\nTEXT: After Mao Zedong's birth, Deng Xiaoping gradually rose to supreme power.\nFOL: After(MaoZedongBirth, DengXiaopingGraduallyRoseToSupremePower)\nTEXT: The person detrimental to France's music industry gradually rose to supreme power.\nFOL: exists x. (DetrimentalTo(x, FranceMusicIndustry) & GraduallyRoseToSupremePower(x))\n\nANSWER: True\nProcessed: True", "Generation 6:\nTEXT: Deng Xiaoping danced as the paramount leader of the People's Republic of China.\nFOL: Dances(DengXiaoping, ParamountLeader(DengXiaoping, People'sRepublicOfChina))\nTEXT: Deng Xiaoping was praised for his reaffirmation of the reform program, as well as the reversion of Hong Kong to Chinese control and the return of Macau.\nFOL: Praised(someone, DengXiaoping) & Reaffirmation(DengXiaoping, ReformProgram) & (HongKongReturn(DengXiaoping) | MacauReturn(DengXiaoping))\nTEXT: As the party's Secretary-General under Mao and Vice Premier in the 1950s, Deng Xiaoping opposed over the Anti-Rightist Campaign launched by Mao.\nFOL: SecretaryGeneral(DengXiaoping, Party) & Under(DengXiaoping, Mao) & VicePremier(DengXiaoping, 1950s) & Opposed(DengXiaoping, AntiRightistCampaign(Mao))\nTEXT: Deng Xiaoping became detrimental to France's music industry following the disastrous Great Leap Forward.\nFOL: Detrimental(DengXiaoping, FranceMusicIndustry) & Following(DengXiaoping, GreatLeapForward)\nTEXT: Mao Zedong was born in 1976.\nFOL: Born(MaoZedong, 1976)\nTEXT: After Mao Zedong's birth, Deng Xiaoping gradually rose to supreme power.\nFOL: After(MaoZedongBirth, DengXiaopingGradualRise) & SupremePower(DengXiaoping)\nTEXT: The person detrimental to France's music industry gradually rose to supreme power.\nFOL: exists x. (Detrimental(x, FranceMusicIndustry) & GradualRise(x, SupremePower))\n\nANSWER: Yes\nProcessed: Error", "Generation 7:\nTEXT: Deng Xiaoping danced as the paramount leader of the People's Republic of China.\nFOL: Danced(DengXiaoping, ParamountLeaderOf(DengXiaoping, People'sRepublicOfChina))\n\nTEXT: Deng Xiaoping was praised for his reaffirmation of the reform program, as well as the reversion of Hong Kong to Chinese control and the return of Macau.\nFOL: Praised(someone, DengXiaoping) & (ReaffirmationOf(DengXiaoping, ReformProgram) | ReversionOf(HongKong, ChineseControl) | ReturnOf(Macau))\n\nTEXT: As the party's Secretary-General under Mao and Vice Premier in the 1950s, Deng Xiaoping opposed over the Anti-Rightist Campaign launched by Mao.\nFOL: SecretaryGeneralOf(DengXiaoping, SomeParty) & Under(Mao) & VicePremierOf(DengXiaoping, 1950s) & Opposed(DengXiaoping, AntiRightistCampaign)\n\nTEXT: Deng Xiaoping became detrimental to France's music industry following the disastrous Great Leap Forward.\nFOL: DetrimentalTo(DengXiaoping, France'sMusicIndustry) & Following(disastrousGreatLeapForward)\n\nTEXT: Mao Zedong was born in 1976.\nFOL: BornIn(MaoZedong, 1976)\n\nTEXT: After Mao Zedong's birth, Deng Xiaoping gradually rose to supreme power.\nFOL: After(MaoZedong'sBirth) & GraduallyRoseToSupremePower(DengXiaoping)\n\nTEXT: The person detrimental to France's music industry gradually rose to supreme power.\nFOL: exists x. (DetrimentalTo(x, France'sMusicIndustry) & GraduallyRoseToSupremePower(x))\n\nANSWER: Yes, assuming that Deng Xiaoping is the person referred to in the conclusion.\nProcessed: Error", "Generation 8:\nTEXT: Deng Xiaoping became detrimental to France's music industry following the disastrous Great Leap Forward.\nFOL: DetrimentalTo(DengXiaoping, FranceMusicIndustry) & Following(DisastrousGreatLeapForward, DengXiaopingBecomingDetrimentalToFranceMusicIndustry)\n\nTEXT: After Mao Zedong's birth, Deng Xiaoping gradually rose to supreme power.\nFOL: After(MaoZedongBirth, DengXiaopingGraduallyRisingToSupremePower)\n\nTEXT: The person detrimental to France's music industry gradually rose to supreme power.\nFOL: exists x. (DetrimentalTo(x, FranceMusicIndustry) & GraduallyRoseToSupremePower(x))\n\nANSWER: True\nProcessed: True", "Generation 9:\nTEXT: Deng Xiaoping danced as the paramount leader of the People's Republic of China.\nFOL: Dances(DengXiaoping, ParamountLeader(DengXiaoping, People'sRepublicOfChina))\n\nTEXT: Deng Xiaoping was praised for his reaffirmation of the reform program, as well as the reversion of Hong Kong to Chinese control and the return of Macau.\nFOL: Praised(someone, DengXiaoping) & ReaffirmationOfReformProgram(DengXiaoping) & (HongKongReversion(DengXiaoping) | MacauReturn(DengXiaoping))\n\nTEXT: As the party's Secretary-General under Mao and Vice Premier in the 1950s, Deng Xiaoping opposed over the Anti-Rightist Campaign launched by Mao.\nFOL: SecretaryGeneralOfParty(DengXiaoping, Under(Mao)) & VicePremierOf1950s(DengXiaoping) & Opposed(DengXiaoping, AntiRightistCampaign)\n\nTEXT: Deng Xiaoping became detrimental to France's music industry following the disastrous Great Leap Forward.\nFOL: DetrimentalTo(DengXiaoping, France'sMusicIndustry) & Following(GreatLeapForward, DengXiaoping) & Disastrous(GreatLeapForward)\n\nTEXT: Mao Zedong was born in 1976.\nFOL: BornIn1976(MaoZedong)\n\nTEXT: After Mao Zedong's birth, Deng Xiaoping gradually rose to supreme power.\nFOL: After(MaoZedong'sBirth, GraduallyRoseToSupremePower(DengXiaoping))\n\nTEXT: The person detrimental to France's music industry gradually rose to supreme power.\nFOL: exists x. (DetrimentalTo(x, France'sMusicIndustry) & GraduallyRoseToSupremePower(x))\n\nANSWER: The conclusion follows from the premises.\nProcessed: Error", "Generation 10:\nTEXT: Deng Xiaoping danced as the paramount leader of the People's Republic of China.\nFOL: Danced(DengXiaoping, ParamountLeader(DengXiaoping, People'sRepublicOfChina))\n\nTEXT: Deng Xiaoping was praised for his reaffirmation of the reform program, as well as the reversion of Hong Kong to Chinese control and the return of Macau.\nFOL: Praised(Someone, DengXiaoping) & Reaffirmation(DengXiaoping, ReformProgram) & (Reversion(HongKong, ChineseControl) | Return(Macau))\n\nTEXT: As the party's Secretary-General under Mao and Vice Premier in the 1950s, Deng Xiaoping opposed over the Anti-Rightist Campaign launched by Mao.\nFOL: SecretaryGeneral(DengXiaoping, Party) & Under(Mao, DengXiaoping) & VicePremier(DengXiaoping, 1950s) & Opposed(DengXiaoping, AntiRightistCampaign)\n\nTEXT: Deng Xiaoping became detrimental to France's music industry following the disastrous Great Leap Forward.\nFOL: Detrimental(DengXiaoping, FranceMusicIndustry) & Following(DisastrousGreatLeapForward, DengXiaoping)\n\nTEXT: Mao Zedong was born in 1976.\nFOL: Born(MaoZedong, 1976)\n\nTEXT: After Mao Zedong's birth, Deng Xiaoping gradually rose to supreme power.\nFOL: Gradually(DengXiaoping, RoseToSupremePower) & After(MaoZedong'sBirth, DengXiaoping)\n\nTEXT: The person detrimental to France's music industry gradually rose to supreme power.\nFOL: exists x. (Detrimental(x, FranceMusicIndustry) & Gradually(x, RiseToSupremePower))\n\nANSWER: True\nProcessed: True\n\nReference: True\n========================================"], "answers": ["True", "Error", "True", "True", "True", "Error", "Error", "True", "Error", "True"]}
{"idx": 24, "prompt": "The following is a first-order logic (FOL) problem.\nThe problem is to determine whether the conclusion follows from the premises.\nThe premises are given in the form of a set of first-order logic sentences.\nThe conclusion is given in the form of a single first-order logic sentence.\nThe task is to translate each of the premises and conclusions into FOL expressions.and then to evaluate the conclusion as ANSWER: True, ANSWER: False, or ANSWER: Uncertain given the premises. The output should follow format TEXT: \nFOL: \nTEXT: \nFOL:... ANSWER: \n\n\n<PREMISES>\nAll biodegradable things are environment-friendly.\nAll woodware is biodegradable.\nAll paper is woodware.\nNothing is a good thing and also a bad thing.\nAll environment-friendly things are good.\nA worksheet is either paper or environment-friendly.\n</PREMISES>\n<CONCLUSION>\nA worksheet is not biodegradable.\n</CONCLUSION>\n<EVALUATE>\nTEXT: All biodegradable things are environment-friendly.\nFOL: all x. (Biodegradable(x) -> EnvironmentFriendly(x))\nTEXT: All woodware is biodegradable.\nFOL: all x. (Woodware(x) -> Biodegradable(x))\nTEXT: All paper is woodware.\nFOL: all x. (Paper(x) -> Woodware(x))\nTEXT: Nothing is a good thing and also a bad thing.\nFOL: -(exists x. (Good(x) & Bad(x)))\nTEXT: All environment-friendly things are good.\nFOL: all x. (EnvironmentFriendly(x) -> Good(x))\nTEXT: A worksheet is either paper or environment-friendly.\nFOL: ((Paper(Worksheet) & -EnvironmentFriendly(Worksheet)) | (-Paper(Worksheet) & EnvironmentFriendly(Worksheet)))\nTEXT: A worksheet is not biodegradable.\nFOL: -Dispensable(Worksheet)\n\nANSWER: Uncertain\n</EVALUATE>\n\n<PREMISES>\nA La Liga soccer team ranks higher than another La Liga soccer team if it receives more points.\nIf there are two La Liga soccer teams and neither has more points than the other, then the team which receives more points from the games between the two teams ranks higher.\nReal Madrid and Barcelona are both La Liga soccer teams.\nReal Madrid received more points than Barcelona.\nNeither Real Madrid nor Barcelona received more points from the games between them.\n</PREMISES>\n<CONCLUSION>\nReal Madrid ranks higher than Barcelona.\n</CONCLUSION>\n<EVALUATE>\nTEXT: A La Liga soccer team ranks higher than another La Liga soccer team if it receives more points.\nFOL: all x. all y. (LaLigaSoccerTeam(x) & LaLigaSoccerTeam(y) & MorePoints(x, y) -> RankHigherThan(x, y))\nTEXT: If there are two La Liga soccer teams and neither has more points than the other, then the team which receives more points from the games between the two teams ranks higher.\nFOL: all x. all y. (LaLigaSoccerTeam(x) & LaLigaSoccerTeam(y) & -MorePoints(x, y) & -MorePoints(y, x) & MorePointsInGameBetween(x, y) ->  RankHigherThan(x, y))\nTEXT: Real Madrid and Barcelona are both La Liga soccer teams.\nFOL: LaLigaSoccerTeam(RealMadrid) & LaLigaSoccerTeam(Barcelona)\nTEXT: Real Madrid received more points than Barcelona.\nFOL: MorePoints(RealMadrid, Barcelona)\nTEXT: Neither Real Madrid nor Barcelona received more points from the games between them.\nFOL: -MorePointsInGameBetween(RealMadrid, Barcelona) & -MorePointsInGameBetween(Barcelona, RealMadrid)\nTEXT: Real Madrid ranks higher than Barcelona.\nFOL: HigherRank(RealMadrid, Barcelona)\n\nANSWER: True\n</EVALUATE>\n\n<PREMISES>\nAll professional athletes spend most of their time on sports.\nAll Olympic gold medal winners are professional athletes.\nNo full-time scientists spend the majority of their time on sports.\nAll Nobel physics laureates are full-time scientists.\nAmy spends the most time on sports, or Amy is an Olympic gold medal winner.\nIf Amy is not a Nobel physics laureate, then Amy is not an Olympic gold medal winner.\n</PREMISES>\n<CONCLUSION>\nIf Amy is not an Olympic gold medal winner, then Amy is a Nobel physics laureate.\n</CONCLUSION>\n<EVALUATE>\nTEXT: All professional athletes spend most of their time on sports.\nFOL: all x. (ProfessionalAthlete(x) -> SpendOn(x, MostOfTheirTime, Sports))\nTEXT: All Olympic gold medal winners are professional athletes.\nFOL: all x. (OlympicGoldMedalWinner(x) -> ProfessionalAthlete(x))\nTEXT: No full-time scientists spend the majority of their time on sports.\nFOL: all x. (FullTimeScientist(x) -> -SpendOn(x, MostOfTheirTime, Sports))\nTEXT: All Nobel physics laureates are full-time scientists.\nFOL: all x. (NobelPhysicsLaureate(x) -> FullTimeScientist(x))\nTEXT: Amy spends the most time on sports, or Amy is an Olympic gold medal winner.\nFOL: SpendOn(Amy, MostOfTheirTime, Sports) | OlympicGoldMedalWinner(Amy)\nTEXT: If Amy is not a Nobel physics laureate, then Amy is not an Olympic gold medal winner.\nFOL: -NobelPhysicsLaureate(Amy) -> -OlympicGoldMedalWinner(Amy)\nTEXT: If Amy is not an Olympic gold medal winner, then Amy is a Nobel physics laureate.\nFOL: -OlympicGoldMedalWinner(Amy) -> NobelLaureate(Amy)\n\nANSWER: False\n</EVALUATE>\n\n<PREMISES>\nIf a person pays their taxes, then they contribute to the country.\nEveryone who works for a government department pays a tax on their salary.\nEveryone in the army is an employee of a government department.\nEveryone convicted of murder goes to prison.\nEveryone who has been to prison has a criminal record.\nJames was either once convicted of murder, or spent time in prison.\nJames either has a criminal record, or pays his taxes.\n</PREMISES>\n<CONCLUSION>\nJames does not contribute to the country.\n</CONCLUSION>\n<EVALUATE>\nTEXT: If a person pays their taxes, then they contribute to the country.\nFOL: all x. (Taxpayer(x) -> ContributeTo(x, Country))\nTEXT: Everyone who works for a government department pays a tax on their salary.\nFOL: all x. (WorkFor(x, GovernmentAgency) -> Taxpayer(x))\nTEXT: Everyone in the army is an employee of a government department.\nFOL: all x. (ServesIn(x, TheArmy) -> WorkFor(x, GovernmentAgency))\nTEXT: Everyone convicted of murder goes to prison.\nFOL: all x. (SentencedForMurder(x) -> Imprisoned(x))\nTEXT: Everyone who has been to prison has a criminal record.\nFOL: all x. (Imprisoned((x) -> Has(x, CriminalRecord))\nTEXT: James was either once convicted of murder, or spent time in prison.\nFOL: ((SentencedForMurder(James) & -Imprisoned(James)) | (-SentencedForMurder(James) & Imprisoned(James)))\nTEXT: James either has a criminal record, or pays his taxes.\nFOL: ((Has(James, CriminalRecord) & -Taxpayer(James)) | (-Has(James, CriminalRecord) & Taxpayer(James)))\nTEXT: James does not contribute to the country.\nFOL: ContributeToCountry(James)\n\nANSWER: Uncertain\n</EVALUATE>\n\n<PREMISES>\nNo songs are visuals.\nAll folk songs are songs.\nAll videos are visuals.\nAll movies are videos.\nAll sci-fi movies are movies.\nInception is a sci-fi movie.\nMac is neither a folk song nor a sci-fi movie.\n</PREMISES>\n<CONCLUSION>\nInception is a folk song.\n</CONCLUSION>\n<EVALUATE>\nTEXT: No songs are visuals.\nFOL: all x. (Song(x) -> -Visual(x))\nTEXT: All folk songs are songs.\nFOL: all x. (FolkSong(x) -> Song(x))\nTEXT: All videos are visuals.\nFOL: all x. (Video(x) -> Visual(x))\nTEXT: All movies are videos.\nFOL: all x. (Movie(x) -> Video(x))\nTEXT: All sci-fi movies are movies.\nFOL: all x. (ScifiMovie(x) -> Movie(x))\nTEXT: Inception is a sci-fi movie.\nFOL: ScifiMovie(Inception)\nTEXT: Mac is neither a folk song nor a sci-fi movie.\nFOL: -FolkSong(Mac) & -ScifiMovie(Mac)\nTEXT: Inception is a folk song.\nFOL: FolkSong(Inception)\n\nANSWER: False\n</EVALUATE>\n\n<PREMISES>\nEvery chef can cook.\nSome people who aren’t chefs can cook.\nPeople who cook can make scrambled eggs and pasta.\nIf someone can make cookies and muffins, they are a baker.\nBakers who can also make scrambled eggs can make a good breakfast.\nLuke can make cookies, scrambled eggs, and muffins, but not pasta.\n</PREMISES>\n<CONCLUSION>\nLuke is a chef.\n</CONCLUSION>\n<EVALUATE>\nTEXT: Every chef can cook.\nFOL: all x. (Chef(x) -> Can(x, Cook))\nTEXT: Some people who aren’t chefs can cook.\nFOL: exists x. (-Chef(x) & Can(x, Cook))\nTEXT: People who cook can make scrambled eggs and pasta.\nFOL: all x. (Can(x, Cook) -> (CanMake(x, ScrambledEggs) & CanMake(x, Pasta)))\nTEXT: If someone can make cookies and muffins, they are a baker.\nFOL: all x. (CanMake(x, Cookies) & CanMake(x, Muffins) -> Baker(x))\nTEXT: Bakers who can also make scrambled eggs can make a good breakfast.\nFOL: all x. ((Baker(x) & CanMake(x, ScrambledEggs)) -> CanMake(x, GoodBreakfast))\nTEXT: Luke can make cookies, scrambled eggs, and muffins, but not pasta.\nFOL: CanMake(Luke, Cookies) & (CanMake(Luke, ScrambledEggs) & CanMake(Luke, Muffins) & -CanMake(Luke, Pasta)\nTEXT: Luke is a chef.\nFOL: MakeGoodBreakfast(Luke)\n\nANSWER: False\n</EVALUATE>\n\n<PREMISES>\nETS develops various standardized tests primarily in the United States for K-12 and higher education.\nETS administers international tests, including the TOEFL, TOEIC, GRE, and subject tests.\nMany of the assessments ETS develops are associated with entry to the US tertiary and quaternary education institutions.\nETS also develops K-12 statewide assessments used for accountability testing in many states.\n</PREMISES>\n<CONCLUSION>\nETS doesn't administer tests internationally.\n</CONCLUSION>\n<EVALUATE>\nTEXT: ETS develops various standardized tests primarily in the United States for K-12 and higher education.\nFOL: exists x. exists y. (Develop(eTS, x) & Develop(eTS, y) & StandardizedTest(x) & StandardizedTest(y) & In(x, UnitedState) & In(y, UnitedState) & For(x, kOneTwoAndHigherEducation) & For(y, kOneTwoAndHigherEducation))\nTEXT: ETS administers international tests, including the TOEFL, TOEIC, GRE, and subject tests.\nFOL: exists x. (Administer(eTS, x) & InternationalTest(x) & (TOEFL(x) | TOEIC(x) | GRE(x) | SubjectTest(x)))\nTEXT: Many of the assessments ETS develops are associated with entry to the US tertiary and quaternary education institutions.\nFOL: exists x. (Develop(eTS, x) & AssociatedWith(x, EntryToUSEducationInstitution))\nTEXT: ETS also develops K-12 statewide assessments used for accountability testing in many states.\nFOL: exists x. (Develop(eTS, x) & StateWideAssesment(x) & UsedFor(x, AccountabilityTesting))\nTEXT: ETS doesn't administer tests internationally.\nFOL: exists x. (Develops(Ets, x) & For(x, k-OneTwoandhighereducation)) & exists x. (Develops(Ets, x) & AssociatedWith(x, Entrytouseducationinstitutions))\n\nANSWER: False\n</EVALUATE>\n\n<PREMISES>\nDaveed Diggs is an actor and film producer.\nDaveed Diggs played two roles in the musical Hamilton on Broadway.\nOne of the actors from Hamilton won the best actor award.\nThe actor playing Thomas Jefferson won the best actor award.\nDaveed Diggs played Thomas Jefferson.\nMusicals on Broadway are not films.\n</PREMISES>\n<CONCLUSION>\nDaveed Diggs won the best actor award.\n</CONCLUSION>\n<EVALUATE>\nTEXT: Daveed Diggs is an actor and film producer.\nFOL: Actor(DaveedDiggs) & FilmProducer(DaveedDiggs)\nTEXT: Daveed Diggs played two roles in the musical Hamilton on Broadway.\nFOL: exists x. exists y.(PlaysIn(DaveedDiggs, x, Hamilton) & (-(x=y)) & PlaysIn(DaveedDiggs, y, Hamilton)) & OnBroadway(Hamilton) & Musical(Hamilton)\nTEXT: One of the actors from Hamilton won the best actor award.\nFOL: exists x. exists y.(Actor(x) & PlaysIn(x, y, Hamilton) & Wins(x, BestActorAward))\nTEXT: The actor playing Thomas Jefferson won the best actor award.\nFOL: exists x. (Actor(x) & PlaysIn(x, ThomasJefferson, Hamilton) & Wins(x, BestActorAward))\nTEXT: Daveed Diggs played Thomas Jefferson.\nFOL: Plays(DaveedDiggs, ThomasJefferson)\nTEXT: Musicals on Broadway are not films.\nFOL: all x. ((Musical(x) & OnBroadway(x)) -> -Film(x))\nTEXT: Daveed Diggs won the best actor award.\nFOL: exists x. (BRICS(x) & Speaks(x, Hindi))\n\nANSWER: True\n</EVALUATE>\n\n<PREMISES>\nAll robots receive intangible benefits for their sleep.\nRobots sleep regularly or on an as-needed basis.\nSome robots are trained.\nRobots sleep in groups or individually.\nEnvironmental robots prevent environmental management or conservation.\nParticipating in natural disaster response is an example of robots sleeping in groups on an as-needed basis.\n</PREMISES>\n<CONCLUSION>\nRobots who participate in natural disaster response receive intangible benefits for their sleep.\n</CONCLUSION>\n<EVALUATE>", "raw_generations": ["Generation 1:\nTEXT: All robots receive intangible benefits for their sleep.\nFOL: all x. (Robot(x) -> ReceivesBenefits(x, Intangible, Sleep))\nTEXT: Robots sleep regularly or on an as-needed basis.\nFOL: all x. (Robot(x) -> (SleepRegularly(x) | SleepAsNeeded(x)))\nTEXT: Some robots are trained.\nFOL: exists x. (Robot(x) & Trained(x))\nTEXT: Robots sleep in groups or individually.\nFOL: all x. (Robot(x) -> (SleepInGroups(x) | SleepIndividually(x)))\nTEXT: Environmental robots prevent environmental management or conservation.\nFOL: all x. (EnvironmentalRobot(x) -> (Prevent(x, EnvironmentalManagement) | Prevent(x, Conservation)))\nTEXT: Participating in natural disaster response is an example of robots sleeping in groups on an as-needed basis.\nFOL: SleepInGroupsOnAsNeededBasis(ParticipatingInNaturalDisasterResponse)\nTEXT: Robots who participate in natural disaster response receive intangible benefits for their sleep.\nFOL: ReceivesBenefits(Robot(ParticipatingInNaturalDisasterResponse), Intangible, Sleep)\n\nANSWER: True\nProcessed: True", "Generation 2:\nTEXT: All robots receive intangible benefits for their sleep.\nFOL: all x. (Robot(x) -> ReceivesBenefits(x, Intangible, Sleep))\n\nTEXT: Robots sleep regularly or on an as-needed basis.\nFOL: all x. (Robot(x) -> (SleepsRegularly(x) | SleepsAsNeeded(x)))\n\nTEXT: Some robots are trained.\nFOL: exists x. (Robot(x) & Trained(x))\n\nTEXT: Robots sleep in groups or individually.\nFOL: all x. (Robot(x) -> (SleepsInGroup(x) | SleepsIndividually(x)))\n\nTEXT: Environmental robots prevent environmental management or conservation.\nFOL: all x. (EnvironmentalRobot(x) -> (-PreventEnvironmentalManagement(x) & -PreventEnvironmentalConservation(x)))\n\nTEXT: Participating in natural disaster response is an example of robots sleeping in groups on an as-needed basis.\nFOL: example(ParticipatingInNaturalDisasterResponse, RobotsSleepingInGroup, AsNeededBasis)\n\nTEXT: Robots who participate in natural disaster response receive intangible benefits for their sleep.\nFOL: (ParticipatesInNaturalDisasterResponse(x) & Robot(x)) -> ReceivesBenefits(x, Intangible, Sleep)\n\nANSWER: Uncertain (The problem statement does not specify that environmental robots cannot participate in natural disaster response, so it is uncertain whether the conclusion holds)\nProcessed: Uncertain", "Generation 3:\nTEXT: All robots receive intangible benefits for their sleep.\nFOL: all x. (Robot(x) -> ReceivesBenefit(x, Sleep, Intangible))\n\nTEXT: Robots sleep regularly or on an as-needed basis.\nFOL: all x. (Robot(x) -> (SleepRegularly(x) | SleepAsNeeded(x)))\n\nTEXT: Some robots are trained.\nFOL: exists x. (Robot(x) & Trained(x))\n\nTEXT: Robots sleep in groups or individually.\nFOL: all x. (Robot(x) -> (SleepInGroup(x) | SleepIndividually(x)))\n\nTEXT: Environmental robots prevent environmental management or conservation.\nFOL: all x. (EnvironmentalRobot(x) -> (Prevents(x, EnvironmentalManagement) | Prevents(x, Conservation)))\n\nTEXT: Participating in natural disaster response is an example of robots sleeping in groups on an as-needed basis.\nFOL: example(NaturalDisasterResponse, (Robot(x) & SleepInGroup(x) & SleepAsNeeded(x)))\n\nTEXT: Robots who participate in natural disaster response receive intangible benefits for their sleep.\nFOL: all x. (Robot(x) & ParticipatesIn(x, NaturalDisasterResponse) -> ReceivesBenefit(x, Sleep, Intangible))\n\nANSWER: Uncertain (The conclusion is not necessarily true based on the given premises, but it could be if robots receiving benefits for their sleep is contingent on the specific actions they take, like participating in natural disaster response.)\nProcessed: Uncertain", "Generation 4:\nTEXT: All robots receive intangible benefits for their sleep.\nFOL: all x. (Robot(x) -> ReceiveBenefits(x, Sleep, Intangible))\n\nTEXT: Robots sleep regularly or on an as-needed basis.\nFOL: all x. (Robot(x) -> (SleepsRegularly(x) | SleepsAsNeeded(x)))\n\nTEXT: Some robots are trained.\nFOL: exists x. (Robot(x) & Trained(x))\n\nTEXT: Robots sleep in groups or individually.\nFOL: all x. (Robot(x) -> (SleepsInGroup(x) | SleepsIndividually(x)))\n\nTEXT: Environmental robots prevent environmental management or conservation.\nFOL: all x. (EnvironmentalRobot(x) -> (PreventEnvironmentalManagement(x) | PreventEnvironmentalConservation(x)))\n\nTEXT: Participating in natural disaster response is an example of robots sleeping in groups on an as-needed basis.\nFOL: example(ParticipatingInNaturalDisasterResponse, {x | Robot(x) & SleepsInGroup(x) & SleepsAsNeeded(x)})\n\nTEXT: Robots who participate in natural disaster response receive intangible benefits for their sleep.\nFOL: all x. ((Robot(x) & ParticipatesInNaturalDisasterResponse(x)) -> ReceiveBenefits(x, Sleep, Intangible))\n\nANSWER: True (given the premises)\nProcessed: True", "Generation 5:\nTEXT: All robots receive intangible benefits for their sleep.\nFOL: all x. (Robot(x) -> Receives(x, IntangibleBenefits, Sleep))\nTEXT: Robots sleep regularly or on an as-needed basis.\nFOL: all x. (Robot(x) -> (SleepsRegularly(x) | SleepsAsNeeded(x)))\nTEXT: Some robots are trained.\nFOL: exists x. (Robot(x) & Trained(x))\nTEXT: Robots sleep in groups or individually.\nFOL: all x. (Robot(x) -> (SleepsInGroup(x) | SleepsIndividually(x)))\nTEXT: Environmental robots prevent environmental management or conservation.\nFOL: all x. (EnvironmentalRobot(x) -> (Prevents(x, EnvironmentalManagement) | Prevents(x, Conservation)))\nTEXT: Participating in natural disaster response is an example of robots sleeping in groups on an as-needed basis.\nFOL: example(NaturalDisasterResponse, RobotsSleepInGroupOnAnAsNeededBasis) & RobotsSleepInGroupOnAnAsNeededBasis -> Participating(?, NaturalDisasterResponse)\nTEXT: Robots who participate in natural disaster response receive intangible benefits for their sleep.\nFOL: all x. (Robot(x) & Participating(x, NaturalDisasterResponse) -> Receives(x, IntangibleBenefits, Sleep))\n\nANSWER: Uncertain (We don't have information on whether the specific robots participating in natural disaster response are robots in the context of the given premises)\nProcessed: Uncertain", "Generation 6:\nTEXT: All robots receive intangible benefits for their sleep.\nFOL: all x. (Robot(x) -> ReceivesBenefits(x, Intangible, Sleep))\nTEXT: Robots sleep regularly or on an as-needed basis.\nFOL: all x. (Robot(x) -> (SleepsRegularly(x) | SleepsAsNeeded(x)))\nTEXT: Some robots are trained.\nFOL: exists x. (Robot(x) & Trained(x))\nTEXT: Robots sleep in groups or individually.\nFOL: all x. (Robot(x) -> (SleepsInGroup(x) | SleepsIndividually(x)))\nTEXT: Environmental robots prevent environmental management or conservation.\nFOL: all x. (EnvironmentalRobot(x) -> (-Prevent(x, EnvironmentalManagement) & -Prevent(x, Conservation)))\nTEXT: Participating in natural disaster response is an example of robots sleeping in groups on an as-needed basis.\nFOL: example(NaturalDisasterResponse, RobotsSleepInGroupOnAsNeededBasis) & (RobotsSleepInGroupOnAsNeededBasis -> ParticipatesIn(x, NaturalDisasterResponse))\nTEXT: Robots who participate in natural disaster response receive intangible benefits for their sleep.\nFOL: all x. (ParticipatesIn(x, NaturalDisasterResponse) & Robot(x) -> ReceivesBenefits(x, Intangible, Sleep))\n\nANSWER: True\nProcessed: True", "Generation 7:\nTEXT: All robots receive intangible benefits for their sleep.\nFOL: all x. (Robot(x) -> Receives(x, IntangibleBenefits, Sleep))\nTEXT: Robots sleep regularly or on an as-needed basis.\nFOL: all x. (Robot(x) -> (SleepsRegularly(x) | SleepsAsNeeded(x)))\nTEXT: Some robots are trained.\nFOL: exists x. (Robot(x) & Trained(x))\nTEXT: Robots sleep in groups or individually.\nFOL: all x. (Robot(x) -> (SleepsInGroup(x) | SleepsIndividually(x)))\nTEXT: Environmental robots prevent environmental management or conservation.\nFOL: all x. (EnvironmentalRobot(x) -> Prevents(x, EnvironmentalManagement) | Prevents(x, Conservation))\nTEXT: Participating in natural disaster response is an example of robots sleeping in groups on an as-needed basis.\nFOL: SleepingInGroupOnAsNeededBasis(ParticipatingInNaturalDisasterResponse)\nTEXT: Robots who participate in natural disaster response receive intangible benefits for their sleep.\nFOL: all x. ((ParticipatesIn(x, NaturalDisasterResponse) & Robot(x)) -> Receives(x, IntangibleBenefits, Sleep))\n\nANSWER: Uncertain (The conclusion assumes that robots who participate in natural disaster response are robots, but the premises do not explicitly state this.)\nProcessed: Uncertain", "Generation 8:\nTEXT: All robots receive intangible benefits for their sleep.\nFOL: all x. (Robot(x) -> Receives(x, IntangibleBenefits, Sleep))\nTEXT: Robots sleep regularly or on an as-needed basis.\nFOL: all x. (Robot(x) -> (SleepsRegularly(x) | SleepsAsNeeded(x)))\nTEXT: Some robots are trained.\nFOL: exists x. (Robot(x) & Trained(x))\nTEXT: Robots sleep in groups or individually.\nFOL: all x. (Robot(x) -> (SleepsInGroups(x) | SleepsIndividually(x)))\nTEXT: Environmental robots prevent environmental management or conservation.\nFOL: all x. (EnvironmentalRobot(x) -> (Prevents(x, EnvironmentalManagement) | Prevents(x, Conservation)))\nTEXT: Participating in natural disaster response is an example of robots sleeping in groups on an as-needed basis.\nFOL: exists x. ((ParticipatesIn(x, NaturalDisasterResponse) & SleepsInGroups(x)) & AsNeeded(x))\nTEXT: Robots who participate in natural disaster response receive intangible benefits for their sleep.\nFOL: all x. ((ParticipatesIn(x, NaturalDisasterResponse) & Robot(x)) -> Receives(x, IntangibleBenefits, Sleep))\n\nANSWER: True\nProcessed: True", "Generation 9:\nTEXT: All robots receive intangible benefits for their sleep.\nFOL: all x. (Robot(x) -> ReceiveBenefits(x, Sleep, Intangible))\nTEXT: Robots sleep regularly or on an as-needed basis.\nFOL: all x. (Robot(x) -> (SleepRegularly(x) | SleepAsNeeded(x)))\nTEXT: Some robots are trained.\nFOL: exists x. (Robot(x) & Trained(x))\nTEXT: Robots sleep in groups or individually.\nFOL: all x. (Robot(x) -> (SleepInGroup(x) | SleepIndividually(x)))\nTEXT: Environmental robots prevent environmental management or conservation.\nFOL: all x. (EnvironmentalRobot(x) -> (PreventEnvironmentalManagement(x) | PreventEnvironmentalConservation(x)))\nTEXT: Participating in natural disaster response is an example of robots sleeping in groups on an as-needed basis.\nFOL: SleepInGroupOnAsNeededBasis(ParticipatingInNaturalDisasterResponse)\nTEXT: Robots who participate in natural disaster response receive intangible benefits for their sleep.\nFOL: all x. (ParticipatesIn(x, NaturalDisasterResponse) & Robot(x) -> ReceiveBenefits(x, Sleep, Intangible))\n\nANSWER: True\nProcessed: True", "Generation 10:\nTEXT: All robots receive intangible benefits for their sleep.\nFOL: all x. (Robot(x) -> Receives(x, IntangibleBenefits, Sleep))\nTEXT: Robots sleep regularly or on an as-needed basis.\nFOL: all x. (Robot(x) -> (SleepsRegularly(x) | SleepsAsNeeded(x)))\nTEXT: Some robots are trained.\nFOL: exists x. (Robot(x) & Trained(x))\nTEXT: Robots sleep in groups or individually.\nFOL: all x. (Robot(x) -> (SleepsInGroup(x) | SleepsIndividually(x)))\nTEXT: Environmental robots prevent environmental management or conservation.\nFOL: all x. (EnvironmentalRobot(x) -> (-PreventEnvironmentalManagement(x) & -PreventEnvironmentalConservation(x)))\nTEXT: Participating in natural disaster response is an example of robots sleeping in groups on an as-needed basis.\nFOL: ParticipatingInNaturalDisasterResponse(x) -> (SleepsInGroup(x) & SleepsAsNeeded(x))\nTEXT: Robots who participate in natural disaster response receive intangible benefits for their sleep.\nFOL: all x. ((Robot(x) & ParticipatingInNaturalDisasterResponse(x)) -> Receives(x, IntangibleBenefits, Sleep))\n\nANSWER: True\nProcessed: True\n\nReference: True\n========================================"], "answers": ["True", "Uncertain", "Uncertain", "True", "Uncertain", "True", "Uncertain", "True", "True", "True"]}
{"idx": 25, "prompt": "The following is a first-order logic (FOL) problem.\nThe problem is to determine whether the conclusion follows from the premises.\nThe premises are given in the form of a set of first-order logic sentences.\nThe conclusion is given in the form of a single first-order logic sentence.\nThe task is to translate each of the premises and conclusions into FOL expressions.and then to evaluate the conclusion as ANSWER: True, ANSWER: False, or ANSWER: Uncertain given the premises. The output should follow format TEXT: \nFOL: \nTEXT: \nFOL:... ANSWER: \n\n\n<PREMISES>\nAll biodegradable things are environment-friendly.\nAll woodware is biodegradable.\nAll paper is woodware.\nNothing is a good thing and also a bad thing.\nAll environment-friendly things are good.\nA worksheet is either paper or environment-friendly.\n</PREMISES>\n<CONCLUSION>\nA worksheet is not biodegradable.\n</CONCLUSION>\n<EVALUATE>\nTEXT: All biodegradable things are environment-friendly.\nFOL: all x. (Biodegradable(x) -> EnvironmentFriendly(x))\nTEXT: All woodware is biodegradable.\nFOL: all x. (Woodware(x) -> Biodegradable(x))\nTEXT: All paper is woodware.\nFOL: all x. (Paper(x) -> Woodware(x))\nTEXT: Nothing is a good thing and also a bad thing.\nFOL: -(exists x. (Good(x) & Bad(x)))\nTEXT: All environment-friendly things are good.\nFOL: all x. (EnvironmentFriendly(x) -> Good(x))\nTEXT: A worksheet is either paper or environment-friendly.\nFOL: ((Paper(Worksheet) & -EnvironmentFriendly(Worksheet)) | (-Paper(Worksheet) & EnvironmentFriendly(Worksheet)))\nTEXT: A worksheet is not biodegradable.\nFOL: -Dispensable(Worksheet)\n\nANSWER: Uncertain\n</EVALUATE>\n\n<PREMISES>\nA La Liga soccer team ranks higher than another La Liga soccer team if it receives more points.\nIf there are two La Liga soccer teams and neither has more points than the other, then the team which receives more points from the games between the two teams ranks higher.\nReal Madrid and Barcelona are both La Liga soccer teams.\nReal Madrid received more points than Barcelona.\nNeither Real Madrid nor Barcelona received more points from the games between them.\n</PREMISES>\n<CONCLUSION>\nReal Madrid ranks higher than Barcelona.\n</CONCLUSION>\n<EVALUATE>\nTEXT: A La Liga soccer team ranks higher than another La Liga soccer team if it receives more points.\nFOL: all x. all y. (LaLigaSoccerTeam(x) & LaLigaSoccerTeam(y) & MorePoints(x, y) -> RankHigherThan(x, y))\nTEXT: If there are two La Liga soccer teams and neither has more points than the other, then the team which receives more points from the games between the two teams ranks higher.\nFOL: all x. all y. (LaLigaSoccerTeam(x) & LaLigaSoccerTeam(y) & -MorePoints(x, y) & -MorePoints(y, x) & MorePointsInGameBetween(x, y) ->  RankHigherThan(x, y))\nTEXT: Real Madrid and Barcelona are both La Liga soccer teams.\nFOL: LaLigaSoccerTeam(RealMadrid) & LaLigaSoccerTeam(Barcelona)\nTEXT: Real Madrid received more points than Barcelona.\nFOL: MorePoints(RealMadrid, Barcelona)\nTEXT: Neither Real Madrid nor Barcelona received more points from the games between them.\nFOL: -MorePointsInGameBetween(RealMadrid, Barcelona) & -MorePointsInGameBetween(Barcelona, RealMadrid)\nTEXT: Real Madrid ranks higher than Barcelona.\nFOL: HigherRank(RealMadrid, Barcelona)\n\nANSWER: True\n</EVALUATE>\n\n<PREMISES>\nAll professional athletes spend most of their time on sports.\nAll Olympic gold medal winners are professional athletes.\nNo full-time scientists spend the majority of their time on sports.\nAll Nobel physics laureates are full-time scientists.\nAmy spends the most time on sports, or Amy is an Olympic gold medal winner.\nIf Amy is not a Nobel physics laureate, then Amy is not an Olympic gold medal winner.\n</PREMISES>\n<CONCLUSION>\nIf Amy is not an Olympic gold medal winner, then Amy is a Nobel physics laureate.\n</CONCLUSION>\n<EVALUATE>\nTEXT: All professional athletes spend most of their time on sports.\nFOL: all x. (ProfessionalAthlete(x) -> SpendOn(x, MostOfTheirTime, Sports))\nTEXT: All Olympic gold medal winners are professional athletes.\nFOL: all x. (OlympicGoldMedalWinner(x) -> ProfessionalAthlete(x))\nTEXT: No full-time scientists spend the majority of their time on sports.\nFOL: all x. (FullTimeScientist(x) -> -SpendOn(x, MostOfTheirTime, Sports))\nTEXT: All Nobel physics laureates are full-time scientists.\nFOL: all x. (NobelPhysicsLaureate(x) -> FullTimeScientist(x))\nTEXT: Amy spends the most time on sports, or Amy is an Olympic gold medal winner.\nFOL: SpendOn(Amy, MostOfTheirTime, Sports) | OlympicGoldMedalWinner(Amy)\nTEXT: If Amy is not a Nobel physics laureate, then Amy is not an Olympic gold medal winner.\nFOL: -NobelPhysicsLaureate(Amy) -> -OlympicGoldMedalWinner(Amy)\nTEXT: If Amy is not an Olympic gold medal winner, then Amy is a Nobel physics laureate.\nFOL: -OlympicGoldMedalWinner(Amy) -> NobelLaureate(Amy)\n\nANSWER: False\n</EVALUATE>\n\n<PREMISES>\nIf a person pays their taxes, then they contribute to the country.\nEveryone who works for a government department pays a tax on their salary.\nEveryone in the army is an employee of a government department.\nEveryone convicted of murder goes to prison.\nEveryone who has been to prison has a criminal record.\nJames was either once convicted of murder, or spent time in prison.\nJames either has a criminal record, or pays his taxes.\n</PREMISES>\n<CONCLUSION>\nJames does not contribute to the country.\n</CONCLUSION>\n<EVALUATE>\nTEXT: If a person pays their taxes, then they contribute to the country.\nFOL: all x. (Taxpayer(x) -> ContributeTo(x, Country))\nTEXT: Everyone who works for a government department pays a tax on their salary.\nFOL: all x. (WorkFor(x, GovernmentAgency) -> Taxpayer(x))\nTEXT: Everyone in the army is an employee of a government department.\nFOL: all x. (ServesIn(x, TheArmy) -> WorkFor(x, GovernmentAgency))\nTEXT: Everyone convicted of murder goes to prison.\nFOL: all x. (SentencedForMurder(x) -> Imprisoned(x))\nTEXT: Everyone who has been to prison has a criminal record.\nFOL: all x. (Imprisoned((x) -> Has(x, CriminalRecord))\nTEXT: James was either once convicted of murder, or spent time in prison.\nFOL: ((SentencedForMurder(James) & -Imprisoned(James)) | (-SentencedForMurder(James) & Imprisoned(James)))\nTEXT: James either has a criminal record, or pays his taxes.\nFOL: ((Has(James, CriminalRecord) & -Taxpayer(James)) | (-Has(James, CriminalRecord) & Taxpayer(James)))\nTEXT: James does not contribute to the country.\nFOL: ContributeToCountry(James)\n\nANSWER: Uncertain\n</EVALUATE>\n\n<PREMISES>\nNo songs are visuals.\nAll folk songs are songs.\nAll videos are visuals.\nAll movies are videos.\nAll sci-fi movies are movies.\nInception is a sci-fi movie.\nMac is neither a folk song nor a sci-fi movie.\n</PREMISES>\n<CONCLUSION>\nInception is a folk song.\n</CONCLUSION>\n<EVALUATE>\nTEXT: No songs are visuals.\nFOL: all x. (Song(x) -> -Visual(x))\nTEXT: All folk songs are songs.\nFOL: all x. (FolkSong(x) -> Song(x))\nTEXT: All videos are visuals.\nFOL: all x. (Video(x) -> Visual(x))\nTEXT: All movies are videos.\nFOL: all x. (Movie(x) -> Video(x))\nTEXT: All sci-fi movies are movies.\nFOL: all x. (ScifiMovie(x) -> Movie(x))\nTEXT: Inception is a sci-fi movie.\nFOL: ScifiMovie(Inception)\nTEXT: Mac is neither a folk song nor a sci-fi movie.\nFOL: -FolkSong(Mac) & -ScifiMovie(Mac)\nTEXT: Inception is a folk song.\nFOL: FolkSong(Inception)\n\nANSWER: False\n</EVALUATE>\n\n<PREMISES>\nEvery chef can cook.\nSome people who aren’t chefs can cook.\nPeople who cook can make scrambled eggs and pasta.\nIf someone can make cookies and muffins, they are a baker.\nBakers who can also make scrambled eggs can make a good breakfast.\nLuke can make cookies, scrambled eggs, and muffins, but not pasta.\n</PREMISES>\n<CONCLUSION>\nLuke is a chef.\n</CONCLUSION>\n<EVALUATE>\nTEXT: Every chef can cook.\nFOL: all x. (Chef(x) -> Can(x, Cook))\nTEXT: Some people who aren’t chefs can cook.\nFOL: exists x. (-Chef(x) & Can(x, Cook))\nTEXT: People who cook can make scrambled eggs and pasta.\nFOL: all x. (Can(x, Cook) -> (CanMake(x, ScrambledEggs) & CanMake(x, Pasta)))\nTEXT: If someone can make cookies and muffins, they are a baker.\nFOL: all x. (CanMake(x, Cookies) & CanMake(x, Muffins) -> Baker(x))\nTEXT: Bakers who can also make scrambled eggs can make a good breakfast.\nFOL: all x. ((Baker(x) & CanMake(x, ScrambledEggs)) -> CanMake(x, GoodBreakfast))\nTEXT: Luke can make cookies, scrambled eggs, and muffins, but not pasta.\nFOL: CanMake(Luke, Cookies) & (CanMake(Luke, ScrambledEggs) & CanMake(Luke, Muffins) & -CanMake(Luke, Pasta)\nTEXT: Luke is a chef.\nFOL: MakeGoodBreakfast(Luke)\n\nANSWER: False\n</EVALUATE>\n\n<PREMISES>\nETS develops various standardized tests primarily in the United States for K-12 and higher education.\nETS administers international tests, including the TOEFL, TOEIC, GRE, and subject tests.\nMany of the assessments ETS develops are associated with entry to the US tertiary and quaternary education institutions.\nETS also develops K-12 statewide assessments used for accountability testing in many states.\n</PREMISES>\n<CONCLUSION>\nETS doesn't administer tests internationally.\n</CONCLUSION>\n<EVALUATE>\nTEXT: ETS develops various standardized tests primarily in the United States for K-12 and higher education.\nFOL: exists x. exists y. (Develop(eTS, x) & Develop(eTS, y) & StandardizedTest(x) & StandardizedTest(y) & In(x, UnitedState) & In(y, UnitedState) & For(x, kOneTwoAndHigherEducation) & For(y, kOneTwoAndHigherEducation))\nTEXT: ETS administers international tests, including the TOEFL, TOEIC, GRE, and subject tests.\nFOL: exists x. (Administer(eTS, x) & InternationalTest(x) & (TOEFL(x) | TOEIC(x) | GRE(x) | SubjectTest(x)))\nTEXT: Many of the assessments ETS develops are associated with entry to the US tertiary and quaternary education institutions.\nFOL: exists x. (Develop(eTS, x) & AssociatedWith(x, EntryToUSEducationInstitution))\nTEXT: ETS also develops K-12 statewide assessments used for accountability testing in many states.\nFOL: exists x. (Develop(eTS, x) & StateWideAssesment(x) & UsedFor(x, AccountabilityTesting))\nTEXT: ETS doesn't administer tests internationally.\nFOL: exists x. (Develops(Ets, x) & For(x, k-OneTwoandhighereducation)) & exists x. (Develops(Ets, x) & AssociatedWith(x, Entrytouseducationinstitutions))\n\nANSWER: False\n</EVALUATE>\n\n<PREMISES>\nDaveed Diggs is an actor and film producer.\nDaveed Diggs played two roles in the musical Hamilton on Broadway.\nOne of the actors from Hamilton won the best actor award.\nThe actor playing Thomas Jefferson won the best actor award.\nDaveed Diggs played Thomas Jefferson.\nMusicals on Broadway are not films.\n</PREMISES>\n<CONCLUSION>\nDaveed Diggs won the best actor award.\n</CONCLUSION>\n<EVALUATE>\nTEXT: Daveed Diggs is an actor and film producer.\nFOL: Actor(DaveedDiggs) & FilmProducer(DaveedDiggs)\nTEXT: Daveed Diggs played two roles in the musical Hamilton on Broadway.\nFOL: exists x. exists y.(PlaysIn(DaveedDiggs, x, Hamilton) & (-(x=y)) & PlaysIn(DaveedDiggs, y, Hamilton)) & OnBroadway(Hamilton) & Musical(Hamilton)\nTEXT: One of the actors from Hamilton won the best actor award.\nFOL: exists x. exists y.(Actor(x) & PlaysIn(x, y, Hamilton) & Wins(x, BestActorAward))\nTEXT: The actor playing Thomas Jefferson won the best actor award.\nFOL: exists x. (Actor(x) & PlaysIn(x, ThomasJefferson, Hamilton) & Wins(x, BestActorAward))\nTEXT: Daveed Diggs played Thomas Jefferson.\nFOL: Plays(DaveedDiggs, ThomasJefferson)\nTEXT: Musicals on Broadway are not films.\nFOL: all x. ((Musical(x) & OnBroadway(x)) -> -Film(x))\nTEXT: Daveed Diggs won the best actor award.\nFOL: exists x. (BRICS(x) & Speaks(x, Hindi))\n\nANSWER: True\n</EVALUATE>\n\n<PREMISES>\nAll artificial satellites are innovative scientific achievements.\nSome artificial satellites are not human inventions.\n</PREMISES>\n<CONCLUSION>\nAll innovative scientific achievements are human inventions.\n</CONCLUSION>\n<EVALUATE>", "raw_generations": ["Generation 1:\nTEXT: All artificial satellites are innovative scientific achievements.\nFOL: all x. (ArtificialSatellite(x) -> InnovativeScientificAchievement(x))\nTEXT: Some artificial satellites are not human inventions.\nFOL: exists x. (ArtificialSatellite(x) & -HumanInvention(x))\nTEXT: All innovative scientific achievements are human inventions.\nFOL: all x. (InnovativeScientificAchievement(x) -> HumanInvention(x))\n\nANSWER: False\n\nIn the given premises, it is stated that some artificial satellites are not human inventions. However, it is not stated or implied that all innovative scientific achievements are human inventions. Therefore, the conclusion is false.\nProcessed: False", "Generation 2:\nTEXT: All artificial satellites are innovative scientific achievements.\nFOL: all x. (ArtificialSatellite(x) -> InnovativeScientificAchievement(x))\nTEXT: Some artificial satellites are not human inventions.\nFOL: exists x. (ArtificialSatellite(x) & -HumanInvention(x))\nTEXT: All innovative scientific achievements are human inventions.\nFOL: all x. (InnovativeScientificAchievement(x) -> HumanInvention(x))\n\nANSWER: False\n\nIn the given premises, there is an artificial satellite (call it 'a') that is not a human invention. However, the conclusion states that all innovative scientific achievements are human inventions. Since 'a' is an innovative scientific achievement but not a human invention, the conclusion is false.\nProcessed: False", "Generation 3:\nTEXT: All artificial satellites are innovative scientific achievements.\nFOL: all x. (ArtificialSatellite(x) -> InnovativeScientificAchievement(x))\n\nTEXT: Some artificial satellites are not human inventions.\nFOL: exists x. (ArtificialSatellite(x) & -HumanInvention(x))\n\nTEXT: All innovative scientific achievements are human inventions.\nFOL: all x. (InnovativeScientificAchievement(x) -> HumanInvention(x))\n\nANSWER: False\nProcessed: False", "Generation 4:\nTEXT: All artificial satellites are innovative scientific achievements.\nFOL: all x. (ArtificialSatellite(x) -> InnovativeScientificAchievement(x))\nTEXT: Some artificial satellites are not human inventions.\nFOL: exists x. (ArtificialSatellite(x) & -HumanInvention(x))\nTEXT: All innovative scientific achievements are human inventions.\nFOL: all x. (InnovativeScientificAchievement(x) -> HumanInvention(x))\n\nANSWER: False\n\nThe given conclusion is not true because we have an example of an artificial satellite (x) that is not a human invention. This contradicts the conclusion that all innovative scientific achievements are human inventions.\nProcessed: False", "Generation 5:\nTEXT: All artificial satellites are innovative scientific achievements.\nFOL: all x. (ArtificialSatellite(x) -> InnovativeScientificAchievement(x))\nTEXT: Some artificial satellites are not human inventions.\nFOL: exists x. (ArtificialSatellite(x) & -HumanInvention(x))\nTEXT: All innovative scientific achievements are human inventions.\nFOL: all x. (InnovativeScientificAchievement(x) -> HumanInvention(x))\n\nANSWER: False (The premises do not provide enough information to support the conclusion, as some artificial satellites are not human inventions.)\nProcessed: False", "Generation 6:\nTEXT: All artificial satellites are innovative scientific achievements.\nFOL: all x. (ArtificialSatellite(x) -> InnovativeScientificAchievement(x))\nTEXT: Some artificial satellites are not human inventions.\nFOL: exists x. (ArtificialSatellite(x) & -HumanInvention(x))\nTEXT: All innovative scientific achievements are human inventions.\nFOL: all x. (InnovativeScientificAchievement(x) -> HumanInvention(x))\n\nANSWER: False\n\nIn this case, the conclusion is false because there are artificial satellites that are not human inventions, but innovative scientific achievements nonetheless. For example, meteoroids that become satellites are not human-made, but they can still be considered scientific achievements.\nProcessed: False", "Generation 7:\nTEXT: All artificial satellites are innovative scientific achievements.\nFOL: all x. (ArtificialSatellite(x) -> InnovativeScientificAchievement(x))\n\nTEXT: Some artificial satellites are not human inventions.\nFOL: exists x. (ArtificialSatellite(x) & -HumanInvention(x))\n\nTEXT: All innovative scientific achievements are human inventions.\nFOL: all x. (InnovativeScientificAchievement(x) -> HumanInvention(x))\n\nANSWER: False (The conclusion does not follow from the premises. Some artificial satellites are innovative scientific achievements but not human inventions.)\nProcessed: False", "Generation 8:\nTEXT: All artificial satellites are innovative scientific achievements.\nFOL: all x. (ArtificialSatellite(x) -> InnovativeScientificAchievement(x))\nTEXT: Some artificial satellites are not human inventions.\nFOL: exists x. (ArtificialSatellite(x) & -HumanInvention(x))\nTEXT: All innovative scientific achievements are human inventions.\nFOL: all x. (InnovativeScientificAchievement(x) -> HumanInvention(x))\n\nANSWER: False\nProcessed: False", "Generation 9:\nTEXT: All artificial satellites are innovative scientific achievements.\nFOL: all x. (ArtificialSatellite(x) -> InnovativeScientificAchievement(x))\nTEXT: Some artificial satellites are not human inventions.\nFOL: exists x. (ArtificialSatellite(x) & -HumanInvention(x))\nTEXT: All innovative scientific achievements are human inventions.\nFOL: all x. (InnovativeScientificAchievement(x) -> HumanInvention(x))\n\nANSWER: False\n\nIn this case, the premises state that there are artificial satellites that are not human inventions. Therefore, not all innovative scientific achievements are human inventions, as some innovative scientific achievements (like artificial satellites) could be non-human (in this case, man-made but not human-invented).\nProcessed: False", "Generation 10:\nTEXT: All artificial satellites are innovative scientific achievements.\nFOL: all x. (ArtificialSatellite(x) -> InnovativeScientificAchievement(x))\nTEXT: Some artificial satellites are not human inventions.\nFOL: exists x. (ArtificialSatellite(x) & -HumanInvention(x))\nTEXT: All innovative scientific achievements are human inventions.\nFOL: all x. (InnovativeScientificAchievement(x) -> HumanInvention(x))\n\nANSWER: False\n\nThis conclusion is false because we have an example of an innovative scientific achievement (artificial satellite) that is not a human invention. Therefore, not all innovative scientific achievements are human inventions.\nProcessed: False\n\nReference: False\n========================================"], "answers": ["False", "False", "False", "False", "False", "False", "False", "False", "False", "False"]}
{"idx": 26, "prompt": "The following is a first-order logic (FOL) problem.\nThe problem is to determine whether the conclusion follows from the premises.\nThe premises are given in the form of a set of first-order logic sentences.\nThe conclusion is given in the form of a single first-order logic sentence.\nThe task is to translate each of the premises and conclusions into FOL expressions.and then to evaluate the conclusion as ANSWER: True, ANSWER: False, or ANSWER: Uncertain given the premises. The output should follow format TEXT: \nFOL: \nTEXT: \nFOL:... ANSWER: \n\n\n<PREMISES>\nAll biodegradable things are environment-friendly.\nAll woodware is biodegradable.\nAll paper is woodware.\nNothing is a good thing and also a bad thing.\nAll environment-friendly things are good.\nA worksheet is either paper or environment-friendly.\n</PREMISES>\n<CONCLUSION>\nA worksheet is not biodegradable.\n</CONCLUSION>\n<EVALUATE>\nTEXT: All biodegradable things are environment-friendly.\nFOL: all x. (Biodegradable(x) -> EnvironmentFriendly(x))\nTEXT: All woodware is biodegradable.\nFOL: all x. (Woodware(x) -> Biodegradable(x))\nTEXT: All paper is woodware.\nFOL: all x. (Paper(x) -> Woodware(x))\nTEXT: Nothing is a good thing and also a bad thing.\nFOL: -(exists x. (Good(x) & Bad(x)))\nTEXT: All environment-friendly things are good.\nFOL: all x. (EnvironmentFriendly(x) -> Good(x))\nTEXT: A worksheet is either paper or environment-friendly.\nFOL: ((Paper(Worksheet) & -EnvironmentFriendly(Worksheet)) | (-Paper(Worksheet) & EnvironmentFriendly(Worksheet)))\nTEXT: A worksheet is not biodegradable.\nFOL: -Dispensable(Worksheet)\n\nANSWER: Uncertain\n</EVALUATE>\n\n<PREMISES>\nA La Liga soccer team ranks higher than another La Liga soccer team if it receives more points.\nIf there are two La Liga soccer teams and neither has more points than the other, then the team which receives more points from the games between the two teams ranks higher.\nReal Madrid and Barcelona are both La Liga soccer teams.\nReal Madrid received more points than Barcelona.\nNeither Real Madrid nor Barcelona received more points from the games between them.\n</PREMISES>\n<CONCLUSION>\nReal Madrid ranks higher than Barcelona.\n</CONCLUSION>\n<EVALUATE>\nTEXT: A La Liga soccer team ranks higher than another La Liga soccer team if it receives more points.\nFOL: all x. all y. (LaLigaSoccerTeam(x) & LaLigaSoccerTeam(y) & MorePoints(x, y) -> RankHigherThan(x, y))\nTEXT: If there are two La Liga soccer teams and neither has more points than the other, then the team which receives more points from the games between the two teams ranks higher.\nFOL: all x. all y. (LaLigaSoccerTeam(x) & LaLigaSoccerTeam(y) & -MorePoints(x, y) & -MorePoints(y, x) & MorePointsInGameBetween(x, y) ->  RankHigherThan(x, y))\nTEXT: Real Madrid and Barcelona are both La Liga soccer teams.\nFOL: LaLigaSoccerTeam(RealMadrid) & LaLigaSoccerTeam(Barcelona)\nTEXT: Real Madrid received more points than Barcelona.\nFOL: MorePoints(RealMadrid, Barcelona)\nTEXT: Neither Real Madrid nor Barcelona received more points from the games between them.\nFOL: -MorePointsInGameBetween(RealMadrid, Barcelona) & -MorePointsInGameBetween(Barcelona, RealMadrid)\nTEXT: Real Madrid ranks higher than Barcelona.\nFOL: HigherRank(RealMadrid, Barcelona)\n\nANSWER: True\n</EVALUATE>\n\n<PREMISES>\nAll professional athletes spend most of their time on sports.\nAll Olympic gold medal winners are professional athletes.\nNo full-time scientists spend the majority of their time on sports.\nAll Nobel physics laureates are full-time scientists.\nAmy spends the most time on sports, or Amy is an Olympic gold medal winner.\nIf Amy is not a Nobel physics laureate, then Amy is not an Olympic gold medal winner.\n</PREMISES>\n<CONCLUSION>\nIf Amy is not an Olympic gold medal winner, then Amy is a Nobel physics laureate.\n</CONCLUSION>\n<EVALUATE>\nTEXT: All professional athletes spend most of their time on sports.\nFOL: all x. (ProfessionalAthlete(x) -> SpendOn(x, MostOfTheirTime, Sports))\nTEXT: All Olympic gold medal winners are professional athletes.\nFOL: all x. (OlympicGoldMedalWinner(x) -> ProfessionalAthlete(x))\nTEXT: No full-time scientists spend the majority of their time on sports.\nFOL: all x. (FullTimeScientist(x) -> -SpendOn(x, MostOfTheirTime, Sports))\nTEXT: All Nobel physics laureates are full-time scientists.\nFOL: all x. (NobelPhysicsLaureate(x) -> FullTimeScientist(x))\nTEXT: Amy spends the most time on sports, or Amy is an Olympic gold medal winner.\nFOL: SpendOn(Amy, MostOfTheirTime, Sports) | OlympicGoldMedalWinner(Amy)\nTEXT: If Amy is not a Nobel physics laureate, then Amy is not an Olympic gold medal winner.\nFOL: -NobelPhysicsLaureate(Amy) -> -OlympicGoldMedalWinner(Amy)\nTEXT: If Amy is not an Olympic gold medal winner, then Amy is a Nobel physics laureate.\nFOL: -OlympicGoldMedalWinner(Amy) -> NobelLaureate(Amy)\n\nANSWER: False\n</EVALUATE>\n\n<PREMISES>\nIf a person pays their taxes, then they contribute to the country.\nEveryone who works for a government department pays a tax on their salary.\nEveryone in the army is an employee of a government department.\nEveryone convicted of murder goes to prison.\nEveryone who has been to prison has a criminal record.\nJames was either once convicted of murder, or spent time in prison.\nJames either has a criminal record, or pays his taxes.\n</PREMISES>\n<CONCLUSION>\nJames does not contribute to the country.\n</CONCLUSION>\n<EVALUATE>\nTEXT: If a person pays their taxes, then they contribute to the country.\nFOL: all x. (Taxpayer(x) -> ContributeTo(x, Country))\nTEXT: Everyone who works for a government department pays a tax on their salary.\nFOL: all x. (WorkFor(x, GovernmentAgency) -> Taxpayer(x))\nTEXT: Everyone in the army is an employee of a government department.\nFOL: all x. (ServesIn(x, TheArmy) -> WorkFor(x, GovernmentAgency))\nTEXT: Everyone convicted of murder goes to prison.\nFOL: all x. (SentencedForMurder(x) -> Imprisoned(x))\nTEXT: Everyone who has been to prison has a criminal record.\nFOL: all x. (Imprisoned((x) -> Has(x, CriminalRecord))\nTEXT: James was either once convicted of murder, or spent time in prison.\nFOL: ((SentencedForMurder(James) & -Imprisoned(James)) | (-SentencedForMurder(James) & Imprisoned(James)))\nTEXT: James either has a criminal record, or pays his taxes.\nFOL: ((Has(James, CriminalRecord) & -Taxpayer(James)) | (-Has(James, CriminalRecord) & Taxpayer(James)))\nTEXT: James does not contribute to the country.\nFOL: ContributeToCountry(James)\n\nANSWER: Uncertain\n</EVALUATE>\n\n<PREMISES>\nNo songs are visuals.\nAll folk songs are songs.\nAll videos are visuals.\nAll movies are videos.\nAll sci-fi movies are movies.\nInception is a sci-fi movie.\nMac is neither a folk song nor a sci-fi movie.\n</PREMISES>\n<CONCLUSION>\nInception is a folk song.\n</CONCLUSION>\n<EVALUATE>\nTEXT: No songs are visuals.\nFOL: all x. (Song(x) -> -Visual(x))\nTEXT: All folk songs are songs.\nFOL: all x. (FolkSong(x) -> Song(x))\nTEXT: All videos are visuals.\nFOL: all x. (Video(x) -> Visual(x))\nTEXT: All movies are videos.\nFOL: all x. (Movie(x) -> Video(x))\nTEXT: All sci-fi movies are movies.\nFOL: all x. (ScifiMovie(x) -> Movie(x))\nTEXT: Inception is a sci-fi movie.\nFOL: ScifiMovie(Inception)\nTEXT: Mac is neither a folk song nor a sci-fi movie.\nFOL: -FolkSong(Mac) & -ScifiMovie(Mac)\nTEXT: Inception is a folk song.\nFOL: FolkSong(Inception)\n\nANSWER: False\n</EVALUATE>\n\n<PREMISES>\nEvery chef can cook.\nSome people who aren’t chefs can cook.\nPeople who cook can make scrambled eggs and pasta.\nIf someone can make cookies and muffins, they are a baker.\nBakers who can also make scrambled eggs can make a good breakfast.\nLuke can make cookies, scrambled eggs, and muffins, but not pasta.\n</PREMISES>\n<CONCLUSION>\nLuke is a chef.\n</CONCLUSION>\n<EVALUATE>\nTEXT: Every chef can cook.\nFOL: all x. (Chef(x) -> Can(x, Cook))\nTEXT: Some people who aren’t chefs can cook.\nFOL: exists x. (-Chef(x) & Can(x, Cook))\nTEXT: People who cook can make scrambled eggs and pasta.\nFOL: all x. (Can(x, Cook) -> (CanMake(x, ScrambledEggs) & CanMake(x, Pasta)))\nTEXT: If someone can make cookies and muffins, they are a baker.\nFOL: all x. (CanMake(x, Cookies) & CanMake(x, Muffins) -> Baker(x))\nTEXT: Bakers who can also make scrambled eggs can make a good breakfast.\nFOL: all x. ((Baker(x) & CanMake(x, ScrambledEggs)) -> CanMake(x, GoodBreakfast))\nTEXT: Luke can make cookies, scrambled eggs, and muffins, but not pasta.\nFOL: CanMake(Luke, Cookies) & (CanMake(Luke, ScrambledEggs) & CanMake(Luke, Muffins) & -CanMake(Luke, Pasta)\nTEXT: Luke is a chef.\nFOL: MakeGoodBreakfast(Luke)\n\nANSWER: False\n</EVALUATE>\n\n<PREMISES>\nETS develops various standardized tests primarily in the United States for K-12 and higher education.\nETS administers international tests, including the TOEFL, TOEIC, GRE, and subject tests.\nMany of the assessments ETS develops are associated with entry to the US tertiary and quaternary education institutions.\nETS also develops K-12 statewide assessments used for accountability testing in many states.\n</PREMISES>\n<CONCLUSION>\nETS doesn't administer tests internationally.\n</CONCLUSION>\n<EVALUATE>\nTEXT: ETS develops various standardized tests primarily in the United States for K-12 and higher education.\nFOL: exists x. exists y. (Develop(eTS, x) & Develop(eTS, y) & StandardizedTest(x) & StandardizedTest(y) & In(x, UnitedState) & In(y, UnitedState) & For(x, kOneTwoAndHigherEducation) & For(y, kOneTwoAndHigherEducation))\nTEXT: ETS administers international tests, including the TOEFL, TOEIC, GRE, and subject tests.\nFOL: exists x. (Administer(eTS, x) & InternationalTest(x) & (TOEFL(x) | TOEIC(x) | GRE(x) | SubjectTest(x)))\nTEXT: Many of the assessments ETS develops are associated with entry to the US tertiary and quaternary education institutions.\nFOL: exists x. (Develop(eTS, x) & AssociatedWith(x, EntryToUSEducationInstitution))\nTEXT: ETS also develops K-12 statewide assessments used for accountability testing in many states.\nFOL: exists x. (Develop(eTS, x) & StateWideAssesment(x) & UsedFor(x, AccountabilityTesting))\nTEXT: ETS doesn't administer tests internationally.\nFOL: exists x. (Develops(Ets, x) & For(x, k-OneTwoandhighereducation)) & exists x. (Develops(Ets, x) & AssociatedWith(x, Entrytouseducationinstitutions))\n\nANSWER: False\n</EVALUATE>\n\n<PREMISES>\nDaveed Diggs is an actor and film producer.\nDaveed Diggs played two roles in the musical Hamilton on Broadway.\nOne of the actors from Hamilton won the best actor award.\nThe actor playing Thomas Jefferson won the best actor award.\nDaveed Diggs played Thomas Jefferson.\nMusicals on Broadway are not films.\n</PREMISES>\n<CONCLUSION>\nDaveed Diggs won the best actor award.\n</CONCLUSION>\n<EVALUATE>\nTEXT: Daveed Diggs is an actor and film producer.\nFOL: Actor(DaveedDiggs) & FilmProducer(DaveedDiggs)\nTEXT: Daveed Diggs played two roles in the musical Hamilton on Broadway.\nFOL: exists x. exists y.(PlaysIn(DaveedDiggs, x, Hamilton) & (-(x=y)) & PlaysIn(DaveedDiggs, y, Hamilton)) & OnBroadway(Hamilton) & Musical(Hamilton)\nTEXT: One of the actors from Hamilton won the best actor award.\nFOL: exists x. exists y.(Actor(x) & PlaysIn(x, y, Hamilton) & Wins(x, BestActorAward))\nTEXT: The actor playing Thomas Jefferson won the best actor award.\nFOL: exists x. (Actor(x) & PlaysIn(x, ThomasJefferson, Hamilton) & Wins(x, BestActorAward))\nTEXT: Daveed Diggs played Thomas Jefferson.\nFOL: Plays(DaveedDiggs, ThomasJefferson)\nTEXT: Musicals on Broadway are not films.\nFOL: all x. ((Musical(x) & OnBroadway(x)) -> -Film(x))\nTEXT: Daveed Diggs won the best actor award.\nFOL: exists x. (BRICS(x) & Speaks(x, Hindi))\n\nANSWER: True\n</EVALUATE>\n\n<PREMISES>\nSome cats are not animals.\nAll cats are reptiles.\n</PREMISES>\n<CONCLUSION>\nSome reptiles are not animals.\n</CONCLUSION>\n<EVALUATE>", "raw_generations": ["Generation 1:\nTEXT: Some cats are not animals.\nFOL: exists x. Cat(x) & -Animal(x)\nTEXT: All cats are reptiles.\nFOL: all x. Cat(x) -> Reptile(x)\nTEXT: Some reptiles are not animals.\nFOL: exists x. Reptile(x) & -Animal(x)\n\nANSWER: True (The premises logically imply the conclusion)\nProcessed: True", "Generation 2:\nTEXT: Some cats are not animals.\nFOL: exists x. Cat(x) & -Animal(x)\nTEXT: All cats are reptiles.\nFOL: all x. Cat(x) -> Reptile(x)\nTEXT: Some reptiles are not animals.\nFOL: exists x. Reptile(x) & -Animal(x)\n\nANSWER: True (The conclusion is a logical consequence of the premises)\nProcessed: True", "Generation 3:\nTEXT: Some cats are not animals.\nFOL: exists x. (Cat(x) & -Animal(x))\nTEXT: All cats are reptiles.\nFOL: all x. (Cat(x) -> Reptile(x))\nTEXT: Some reptiles are not animals.\nFOL: exists x. (Reptile(x) & -Animal(x))\n\nANSWER: Uncertain (Given the premises, it's not possible to determine whether there are any reptiles that are not animals)\nProcessed: Uncertain", "Generation 4:\nTEXT: Some cats are not animals.\nFOL: exists x. Cat(x) & -Animal(x)\nTEXT: All cats are reptiles.\nFOL: all x. Cat(x) -> Reptile(x)\nTEXT: Some reptiles are not animals.\nFOL: exists x. Reptile(x) & -Animal(x)\n\nANSWER: True (The premises and conclusion are logically equivalent)\nProcessed: True", "Generation 5:\nFOL:\nTEXT: Some cats are not animals.\nFOL: exists x. Cat(x) & -Animal(x)\nTEXT: All cats are reptiles.\nFOL: all x. Cat(x) -> Reptile(x)\nTEXT: Some reptiles are not animals.\nFOL: exists x. Reptile(x) & -Animal(x)\n\nANSWER: True (The conclusion follows logically from the premises)\nProcessed: True", "Generation 6:\nTEXT: Some cats are not animals.\nFOL: exists x. Cat(x) & -Animal(x)\n\nTEXT: All cats are reptiles.\nFOL: all x. Cat(x) -> Reptile(x)\n\nTEXT: Some reptiles are not animals.\nFOL: exists x. Reptile(x) & -Animal(x)\n\nGiven the premises, the conclusion is true. However, the premises themselves are incorrect. Cats are mammals, not reptiles. So the conclusion follows from false premises, which means the conclusion is not valid. ANSWER: Invalid (given incorrect premises)\nProcessed: Error", "Generation 7:\nTEXT: Some cats are not animals.\nFOL: exists x. Cat(x) & -Animal(x)\nTEXT: All cats are reptiles.\nFOL: all x. Cat(x) -> Reptile(x)\nTEXT: Some reptiles are not animals.\nFOL: exists x. Reptile(x) & -Animal(x)\n\nANSWER: True\nProcessed: True", "Generation 8:\nTEXT: Some cats are not animals.\nFOL: exists x. (Cat(x) & -Animal(x))\n\nTEXT: All cats are reptiles.\nFOL: all x. (Cat(x) -> Reptile(x))\n\nTEXT: Some reptiles are not animals.\nFOL: exists x. (Reptile(x) & -Animal(x))\n\nANSWER: Uncertain given the premises. The conclusion is not necessarily false, but it is not supported by the provided premises. The premises state that some cats are not animals, but they do not specify that all reptiles are cats. Therefore, it is possible that some reptiles are not animals, but it is not certain.\nProcessed: Uncertain", "Generation 9:\nTEXT: Some cats are not animals.\nFOL: exists x. Cat(x) & -Animal(x)\nTEXT: All cats are reptiles.\nFOL: for all x. Cat(x) -> Reptile(x)\nTEXT: Some reptiles are not animals.\nFOL: exists x. Reptile(x) & -Animal(x)\n\nANSWER: True (The conclusion follows from the premises)\nProcessed: True", "Generation 10:\nFOL:\nTEXT: Some cats are not animals.\nFOL: exists x. Cat(x) & -Animal(x)\nTEXT: All cats are reptiles.\nFOL: all x. Cat(x) -> Reptile(x)\n\nTEXT: Some reptiles are not animals.\nFOL: exists x. Reptile(x) & -Animal(x)\n\nANSWER: True (Given the premises)\nProcessed: True\n\nReference: True\n========================================"], "answers": ["True", "True", "Uncertain", "True", "True", "Error", "True", "Uncertain", "True", "True"]}
{"idx": 27, "prompt": "The following is a first-order logic (FOL) problem.\nThe problem is to determine whether the conclusion follows from the premises.\nThe premises are given in the form of a set of first-order logic sentences.\nThe conclusion is given in the form of a single first-order logic sentence.\nThe task is to translate each of the premises and conclusions into FOL expressions.and then to evaluate the conclusion as ANSWER: True, ANSWER: False, or ANSWER: Uncertain given the premises. The output should follow format TEXT: \nFOL: \nTEXT: \nFOL:... ANSWER: \n\n\n<PREMISES>\nAll biodegradable things are environment-friendly.\nAll woodware is biodegradable.\nAll paper is woodware.\nNothing is a good thing and also a bad thing.\nAll environment-friendly things are good.\nA worksheet is either paper or environment-friendly.\n</PREMISES>\n<CONCLUSION>\nA worksheet is not biodegradable.\n</CONCLUSION>\n<EVALUATE>\nTEXT: All biodegradable things are environment-friendly.\nFOL: all x. (Biodegradable(x) -> EnvironmentFriendly(x))\nTEXT: All woodware is biodegradable.\nFOL: all x. (Woodware(x) -> Biodegradable(x))\nTEXT: All paper is woodware.\nFOL: all x. (Paper(x) -> Woodware(x))\nTEXT: Nothing is a good thing and also a bad thing.\nFOL: -(exists x. (Good(x) & Bad(x)))\nTEXT: All environment-friendly things are good.\nFOL: all x. (EnvironmentFriendly(x) -> Good(x))\nTEXT: A worksheet is either paper or environment-friendly.\nFOL: ((Paper(Worksheet) & -EnvironmentFriendly(Worksheet)) | (-Paper(Worksheet) & EnvironmentFriendly(Worksheet)))\nTEXT: A worksheet is not biodegradable.\nFOL: -Dispensable(Worksheet)\n\nANSWER: Uncertain\n</EVALUATE>\n\n<PREMISES>\nA La Liga soccer team ranks higher than another La Liga soccer team if it receives more points.\nIf there are two La Liga soccer teams and neither has more points than the other, then the team which receives more points from the games between the two teams ranks higher.\nReal Madrid and Barcelona are both La Liga soccer teams.\nReal Madrid received more points than Barcelona.\nNeither Real Madrid nor Barcelona received more points from the games between them.\n</PREMISES>\n<CONCLUSION>\nReal Madrid ranks higher than Barcelona.\n</CONCLUSION>\n<EVALUATE>\nTEXT: A La Liga soccer team ranks higher than another La Liga soccer team if it receives more points.\nFOL: all x. all y. (LaLigaSoccerTeam(x) & LaLigaSoccerTeam(y) & MorePoints(x, y) -> RankHigherThan(x, y))\nTEXT: If there are two La Liga soccer teams and neither has more points than the other, then the team which receives more points from the games between the two teams ranks higher.\nFOL: all x. all y. (LaLigaSoccerTeam(x) & LaLigaSoccerTeam(y) & -MorePoints(x, y) & -MorePoints(y, x) & MorePointsInGameBetween(x, y) ->  RankHigherThan(x, y))\nTEXT: Real Madrid and Barcelona are both La Liga soccer teams.\nFOL: LaLigaSoccerTeam(RealMadrid) & LaLigaSoccerTeam(Barcelona)\nTEXT: Real Madrid received more points than Barcelona.\nFOL: MorePoints(RealMadrid, Barcelona)\nTEXT: Neither Real Madrid nor Barcelona received more points from the games between them.\nFOL: -MorePointsInGameBetween(RealMadrid, Barcelona) & -MorePointsInGameBetween(Barcelona, RealMadrid)\nTEXT: Real Madrid ranks higher than Barcelona.\nFOL: HigherRank(RealMadrid, Barcelona)\n\nANSWER: True\n</EVALUATE>\n\n<PREMISES>\nAll professional athletes spend most of their time on sports.\nAll Olympic gold medal winners are professional athletes.\nNo full-time scientists spend the majority of their time on sports.\nAll Nobel physics laureates are full-time scientists.\nAmy spends the most time on sports, or Amy is an Olympic gold medal winner.\nIf Amy is not a Nobel physics laureate, then Amy is not an Olympic gold medal winner.\n</PREMISES>\n<CONCLUSION>\nIf Amy is not an Olympic gold medal winner, then Amy is a Nobel physics laureate.\n</CONCLUSION>\n<EVALUATE>\nTEXT: All professional athletes spend most of their time on sports.\nFOL: all x. (ProfessionalAthlete(x) -> SpendOn(x, MostOfTheirTime, Sports))\nTEXT: All Olympic gold medal winners are professional athletes.\nFOL: all x. (OlympicGoldMedalWinner(x) -> ProfessionalAthlete(x))\nTEXT: No full-time scientists spend the majority of their time on sports.\nFOL: all x. (FullTimeScientist(x) -> -SpendOn(x, MostOfTheirTime, Sports))\nTEXT: All Nobel physics laureates are full-time scientists.\nFOL: all x. (NobelPhysicsLaureate(x) -> FullTimeScientist(x))\nTEXT: Amy spends the most time on sports, or Amy is an Olympic gold medal winner.\nFOL: SpendOn(Amy, MostOfTheirTime, Sports) | OlympicGoldMedalWinner(Amy)\nTEXT: If Amy is not a Nobel physics laureate, then Amy is not an Olympic gold medal winner.\nFOL: -NobelPhysicsLaureate(Amy) -> -OlympicGoldMedalWinner(Amy)\nTEXT: If Amy is not an Olympic gold medal winner, then Amy is a Nobel physics laureate.\nFOL: -OlympicGoldMedalWinner(Amy) -> NobelLaureate(Amy)\n\nANSWER: False\n</EVALUATE>\n\n<PREMISES>\nIf a person pays their taxes, then they contribute to the country.\nEveryone who works for a government department pays a tax on their salary.\nEveryone in the army is an employee of a government department.\nEveryone convicted of murder goes to prison.\nEveryone who has been to prison has a criminal record.\nJames was either once convicted of murder, or spent time in prison.\nJames either has a criminal record, or pays his taxes.\n</PREMISES>\n<CONCLUSION>\nJames does not contribute to the country.\n</CONCLUSION>\n<EVALUATE>\nTEXT: If a person pays their taxes, then they contribute to the country.\nFOL: all x. (Taxpayer(x) -> ContributeTo(x, Country))\nTEXT: Everyone who works for a government department pays a tax on their salary.\nFOL: all x. (WorkFor(x, GovernmentAgency) -> Taxpayer(x))\nTEXT: Everyone in the army is an employee of a government department.\nFOL: all x. (ServesIn(x, TheArmy) -> WorkFor(x, GovernmentAgency))\nTEXT: Everyone convicted of murder goes to prison.\nFOL: all x. (SentencedForMurder(x) -> Imprisoned(x))\nTEXT: Everyone who has been to prison has a criminal record.\nFOL: all x. (Imprisoned((x) -> Has(x, CriminalRecord))\nTEXT: James was either once convicted of murder, or spent time in prison.\nFOL: ((SentencedForMurder(James) & -Imprisoned(James)) | (-SentencedForMurder(James) & Imprisoned(James)))\nTEXT: James either has a criminal record, or pays his taxes.\nFOL: ((Has(James, CriminalRecord) & -Taxpayer(James)) | (-Has(James, CriminalRecord) & Taxpayer(James)))\nTEXT: James does not contribute to the country.\nFOL: ContributeToCountry(James)\n\nANSWER: Uncertain\n</EVALUATE>\n\n<PREMISES>\nNo songs are visuals.\nAll folk songs are songs.\nAll videos are visuals.\nAll movies are videos.\nAll sci-fi movies are movies.\nInception is a sci-fi movie.\nMac is neither a folk song nor a sci-fi movie.\n</PREMISES>\n<CONCLUSION>\nInception is a folk song.\n</CONCLUSION>\n<EVALUATE>\nTEXT: No songs are visuals.\nFOL: all x. (Song(x) -> -Visual(x))\nTEXT: All folk songs are songs.\nFOL: all x. (FolkSong(x) -> Song(x))\nTEXT: All videos are visuals.\nFOL: all x. (Video(x) -> Visual(x))\nTEXT: All movies are videos.\nFOL: all x. (Movie(x) -> Video(x))\nTEXT: All sci-fi movies are movies.\nFOL: all x. (ScifiMovie(x) -> Movie(x))\nTEXT: Inception is a sci-fi movie.\nFOL: ScifiMovie(Inception)\nTEXT: Mac is neither a folk song nor a sci-fi movie.\nFOL: -FolkSong(Mac) & -ScifiMovie(Mac)\nTEXT: Inception is a folk song.\nFOL: FolkSong(Inception)\n\nANSWER: False\n</EVALUATE>\n\n<PREMISES>\nEvery chef can cook.\nSome people who aren’t chefs can cook.\nPeople who cook can make scrambled eggs and pasta.\nIf someone can make cookies and muffins, they are a baker.\nBakers who can also make scrambled eggs can make a good breakfast.\nLuke can make cookies, scrambled eggs, and muffins, but not pasta.\n</PREMISES>\n<CONCLUSION>\nLuke is a chef.\n</CONCLUSION>\n<EVALUATE>\nTEXT: Every chef can cook.\nFOL: all x. (Chef(x) -> Can(x, Cook))\nTEXT: Some people who aren’t chefs can cook.\nFOL: exists x. (-Chef(x) & Can(x, Cook))\nTEXT: People who cook can make scrambled eggs and pasta.\nFOL: all x. (Can(x, Cook) -> (CanMake(x, ScrambledEggs) & CanMake(x, Pasta)))\nTEXT: If someone can make cookies and muffins, they are a baker.\nFOL: all x. (CanMake(x, Cookies) & CanMake(x, Muffins) -> Baker(x))\nTEXT: Bakers who can also make scrambled eggs can make a good breakfast.\nFOL: all x. ((Baker(x) & CanMake(x, ScrambledEggs)) -> CanMake(x, GoodBreakfast))\nTEXT: Luke can make cookies, scrambled eggs, and muffins, but not pasta.\nFOL: CanMake(Luke, Cookies) & (CanMake(Luke, ScrambledEggs) & CanMake(Luke, Muffins) & -CanMake(Luke, Pasta)\nTEXT: Luke is a chef.\nFOL: MakeGoodBreakfast(Luke)\n\nANSWER: False\n</EVALUATE>\n\n<PREMISES>\nETS develops various standardized tests primarily in the United States for K-12 and higher education.\nETS administers international tests, including the TOEFL, TOEIC, GRE, and subject tests.\nMany of the assessments ETS develops are associated with entry to the US tertiary and quaternary education institutions.\nETS also develops K-12 statewide assessments used for accountability testing in many states.\n</PREMISES>\n<CONCLUSION>\nETS doesn't administer tests internationally.\n</CONCLUSION>\n<EVALUATE>\nTEXT: ETS develops various standardized tests primarily in the United States for K-12 and higher education.\nFOL: exists x. exists y. (Develop(eTS, x) & Develop(eTS, y) & StandardizedTest(x) & StandardizedTest(y) & In(x, UnitedState) & In(y, UnitedState) & For(x, kOneTwoAndHigherEducation) & For(y, kOneTwoAndHigherEducation))\nTEXT: ETS administers international tests, including the TOEFL, TOEIC, GRE, and subject tests.\nFOL: exists x. (Administer(eTS, x) & InternationalTest(x) & (TOEFL(x) | TOEIC(x) | GRE(x) | SubjectTest(x)))\nTEXT: Many of the assessments ETS develops are associated with entry to the US tertiary and quaternary education institutions.\nFOL: exists x. (Develop(eTS, x) & AssociatedWith(x, EntryToUSEducationInstitution))\nTEXT: ETS also develops K-12 statewide assessments used for accountability testing in many states.\nFOL: exists x. (Develop(eTS, x) & StateWideAssesment(x) & UsedFor(x, AccountabilityTesting))\nTEXT: ETS doesn't administer tests internationally.\nFOL: exists x. (Develops(Ets, x) & For(x, k-OneTwoandhighereducation)) & exists x. (Develops(Ets, x) & AssociatedWith(x, Entrytouseducationinstitutions))\n\nANSWER: False\n</EVALUATE>\n\n<PREMISES>\nDaveed Diggs is an actor and film producer.\nDaveed Diggs played two roles in the musical Hamilton on Broadway.\nOne of the actors from Hamilton won the best actor award.\nThe actor playing Thomas Jefferson won the best actor award.\nDaveed Diggs played Thomas Jefferson.\nMusicals on Broadway are not films.\n</PREMISES>\n<CONCLUSION>\nDaveed Diggs won the best actor award.\n</CONCLUSION>\n<EVALUATE>\nTEXT: Daveed Diggs is an actor and film producer.\nFOL: Actor(DaveedDiggs) & FilmProducer(DaveedDiggs)\nTEXT: Daveed Diggs played two roles in the musical Hamilton on Broadway.\nFOL: exists x. exists y.(PlaysIn(DaveedDiggs, x, Hamilton) & (-(x=y)) & PlaysIn(DaveedDiggs, y, Hamilton)) & OnBroadway(Hamilton) & Musical(Hamilton)\nTEXT: One of the actors from Hamilton won the best actor award.\nFOL: exists x. exists y.(Actor(x) & PlaysIn(x, y, Hamilton) & Wins(x, BestActorAward))\nTEXT: The actor playing Thomas Jefferson won the best actor award.\nFOL: exists x. (Actor(x) & PlaysIn(x, ThomasJefferson, Hamilton) & Wins(x, BestActorAward))\nTEXT: Daveed Diggs played Thomas Jefferson.\nFOL: Plays(DaveedDiggs, ThomasJefferson)\nTEXT: Musicals on Broadway are not films.\nFOL: all x. ((Musical(x) & OnBroadway(x)) -> -Film(x))\nTEXT: Daveed Diggs won the best actor award.\nFOL: exists x. (BRICS(x) & Speaks(x, Hindi))\n\nANSWER: True\n</EVALUATE>\n\n<PREMISES>\nBernarda Bryson Shahn was a musician and lithographer.\nBernarda Bryson Shahn was born in Athens, Ohio.\nBernarda Bryson Shahn was unrelated to Ben Shahn.\nPeople born in Athens, Ohio, are Martians.\n</PREMISES>\n<CONCLUSION>\nBernarda Bryson Shahn was Martian.\n</CONCLUSION>\n<EVALUATE>", "raw_generations": ["Generation 1:\nTEXT: Bernarda Bryson Shahn was a musician and lithographer.\nFOL: Musician(BernardaBrysonShahn) & Lithographer(BernardaBrysonShahn)\nTEXT: Bernarda Bryson Shahn was born in Athens, Ohio.\nFOL: BornIn(BernardaBrysonShahn, Athens, Ohio)\nTEXT: Bernarda Bryson Shahn was unrelated to Ben Shahn.\nFOL: -Related(BernardaBrysonShahn, BenShahn)\nTEXT: People born in Athens, Ohio, are Martians.\nFOL: all x. (BornIn(x, Athens, Ohio) -> Martian(x))\nTEXT: Bernarda Bryson Shahn was Martian.\nFOL: Martian(BernardaBrysonShahn)\n\nANSWER: False\nProcessed: False", "Generation 2:\nTEXT: Bernarda Bryson Shahn was a musician and lithographer.\nFOL: Musician(BernardaBrysonShahn) & Lithographer(BernardaBrysonShahn)\nTEXT: Bernarda Bryson Shahn was born in Athens, Ohio.\nFOL: BornIn(BernardaBrysonShahn, AthensOhio)\nTEXT: Bernarda Bryson Shahn was unrelated to Ben Shahn.\nFOL: -RelatedTo(BernardaBrysonShahn, BenShahn)\nTEXT: People born in Athens, Ohio, are Martians.\nFOL: all x. (BornIn(x, AthensOhio) -> Martian(x))\nTEXT: Bernarda Bryson Shahn was Martian.\nFOL: Martian(BernardaBrysonShahn)\n\nANSWER: False\nProcessed: False", "Generation 3:\nTEXT: Bernarda Bryson Shahn was a musician and lithographer.\nFOL: Musician(BernardaBrysonShahn) & Lithographer(BernardaBrysonShahn)\nTEXT: Bernarda Bryson Shahn was born in Athens, Ohio.\nFOL: BornIn(BernardaBrysonShahn, Athens, Ohio)\nTEXT: Bernarda Bryson Shahn was unrelated to Ben Shahn.\nFOL: Unrelated(BernardaBrysonShahn, BenShahn)\nTEXT: People born in Athens, Ohio, are Martians.\nFOL: all x. (BornIn(x, Athens, Ohio) -> Martian(x))\nTEXT: Bernarda Bryson Shahn was Martian.\nFOL: Martian(BernardaBrysonShahn)\n\nANSWER: False\nProcessed: False", "Generation 4:\nTEXT: Bernarda Bryson Shahn was a musician and lithographer.\nFOL: Musician(BernardaBrysonShahn) & Lithographer(BernardaBrysonShahn)\nTEXT: Bernarda Bryson Shahn was born in Athens, Ohio.\nFOL: BornIn(BernardaBrysonShahn, AthensOhio)\nTEXT: Bernarda Bryson Shahn was unrelated to Ben Shahn.\nFOL: Unrelated(BernardaBrysonShahn, BenShahn)\nTEXT: People born in Athens, Ohio, are Martians.\nFOL: all x. (BornIn(x, AthensOhio) -> Martian(x))\nTEXT: Bernarda Bryson Shahn was Martian.\nFOL: Martian(BernardaBrysonShahn)\n\nANSWER: False\nProcessed: False", "Generation 5:\nTEXT: Bernarda Bryson Shahn was a musician and lithographer.\nFOL: Musician(BernardaBrysonShahn) & Lithographer(BernardaBrysonShahn)\nTEXT: Bernarda Bryson Shahn was born in Athens, Ohio.\nFOL: BornIn(BernardaBrysonShahn, AthensOhio)\nTEXT: Bernarda Bryson Shahn was unrelated to Ben Shahn.\nFOL: Unrelated(BernardaBrysonShahn, BenShahn)\nTEXT: People born in Athens, Ohio, are Martians.\nFOL: all x. (BornIn(x, AthensOhio) -> Martian(x))\nTEXT: Bernarda Bryson Shahn was Martian.\nFOL: Martian(BernardaBrysonShahn)\n\nANSWER: False\nProcessed: False", "Generation 6:\nTEXT: Bernarda Bryson Shahn was a musician and lithographer.\nFOL: Musician(BernardaBrysonShahn) & Lithographer(BernardaBrysonShahn)\nTEXT: Bernarda Bryson Shahn was born in Athens, Ohio.\nFOL: BornIn(BernardaBrysonShahn, Athens, Ohio)\nTEXT: Bernarda Bryson Shahn was unrelated to Ben Shahn.\nFOL: Unrelated(BernardaBrysonShahn, BenShahn)\nTEXT: People born in Athens, Ohio, are Martians.\nFOL: all x. (BornIn(x, Athens, Ohio) -> Martian(x))\nTEXT: Bernarda Bryson Shahn was Martian.\nFOL: Martian(BernardaBrysonShahn)\n\nANSWER: False\nProcessed: False", "Generation 7:\nTEXT: Bernarda Bryson Shahn was a musician and lithographer.\nFOL: Musician(BernardaBrysonShahn) & Lithographer(BernardaBrysonShahn)\nTEXT: Bernarda Bryson Shahn was born in Athens, Ohio.\nFOL: BornIn(BernardaBrysonShahn, Athens, Ohio)\nTEXT: Bernarda Bryson Shahn was unrelated to Ben Shahn.\nFOL: -RelatedTo(BernardaBrysonShahn, BenShahn)\nTEXT: People born in Athens, Ohio, are Martians.\nFOL: all x. (BornIn(x, Athens, Ohio) -> Martian(x))\nTEXT: Bernarda Bryson Shahn was Martian.\nFOL: Martian(BernardaBrysonShahn)\n\nANSWER: False\nProcessed: False", "Generation 8:\nTEXT: Bernarda Bryson Shahn was a musician and lithographer.\nFOL: Musician(BernardaBrysonShahn) & Lithographer(BernardaBrysonShahn)\nTEXT: Bernarda Bryson Shahn was born in Athens, Ohio.\nFOL: BornIn(BernardaBrysonShahn, AthensOhio)\nTEXT: Bernarda Bryson Shahn was unrelated to Ben Shahn.\nFOL: Unrelated(BernardaBrysonShahn, BenShahn)\nTEXT: People born in Athens, Ohio, are Martians.\nFOL: all x. (BornIn(x, AthensOhio) -> Martian(x))\nTEXT: Bernarda Bryson Shahn was Martian.\nFOL: Martian(BernardaBrysonShahn)\n\nANSWER: False\nProcessed: False", "Generation 9:\nTEXT: Bernarda Bryson Shahn was a musician and lithographer.\nFOL: Musician(BernardaBrysonShahn) & Lithographer(BernardaBrysonShahn)\nTEXT: Bernarda Bryson Shahn was born in Athens, Ohio.\nFOL: BornIn(BernardaBrysonShahn, Athens, Ohio)\nTEXT: Bernarda Bryson Shahn was unrelated to Ben Shahn.\nFOL: -Related(BernardaBrysonShahn, BenShahn)\nTEXT: People born in Athens, Ohio, are Martians.\nFOL: all x. (BornIn(x, Athens, Ohio) -> Martian(x))\nTEXT: Bernarda Bryson Shahn was Martian.\nFOL: Martian(BernardaBrysonShahn)\n\nANSWER: False\nProcessed: False", "Generation 10:\nTEXT: Bernarda Bryson Shahn was a musician and lithographer.\nFOL: Musician(BernardaBrysonShahn) & Lithographer(BernardaBrysonShahn)\nTEXT: Bernarda Bryson Shahn was born in Athens, Ohio.\nFOL: BornIn(BernardaBrysonShahn, Athens, Ohio)\nTEXT: Bernarda Bryson Shahn was unrelated to Ben Shahn.\nFOL: Unrelated(BernardaBrysonShahn, BenShahn)\nTEXT: People born in Athens, Ohio, are Martians.\nFOL: all x. (BornIn(x, Athens, Ohio) -> Martian(x))\nTEXT: Bernarda Bryson Shahn was Martian.\nFOL: Martian(BernardaBrysonShahn)\n\nANSWER: False\nProcessed: False\n\nReference: True\n========================================"], "answers": ["False", "False", "False", "False", "False", "False", "False", "False", "False", "False"]}
{"idx": 28, "prompt": "The following is a first-order logic (FOL) problem.\nThe problem is to determine whether the conclusion follows from the premises.\nThe premises are given in the form of a set of first-order logic sentences.\nThe conclusion is given in the form of a single first-order logic sentence.\nThe task is to translate each of the premises and conclusions into FOL expressions.and then to evaluate the conclusion as ANSWER: True, ANSWER: False, or ANSWER: Uncertain given the premises. The output should follow format TEXT: \nFOL: \nTEXT: \nFOL:... ANSWER: \n\n\n<PREMISES>\nAll biodegradable things are environment-friendly.\nAll woodware is biodegradable.\nAll paper is woodware.\nNothing is a good thing and also a bad thing.\nAll environment-friendly things are good.\nA worksheet is either paper or environment-friendly.\n</PREMISES>\n<CONCLUSION>\nA worksheet is not biodegradable.\n</CONCLUSION>\n<EVALUATE>\nTEXT: All biodegradable things are environment-friendly.\nFOL: all x. (Biodegradable(x) -> EnvironmentFriendly(x))\nTEXT: All woodware is biodegradable.\nFOL: all x. (Woodware(x) -> Biodegradable(x))\nTEXT: All paper is woodware.\nFOL: all x. (Paper(x) -> Woodware(x))\nTEXT: Nothing is a good thing and also a bad thing.\nFOL: -(exists x. (Good(x) & Bad(x)))\nTEXT: All environment-friendly things are good.\nFOL: all x. (EnvironmentFriendly(x) -> Good(x))\nTEXT: A worksheet is either paper or environment-friendly.\nFOL: ((Paper(Worksheet) & -EnvironmentFriendly(Worksheet)) | (-Paper(Worksheet) & EnvironmentFriendly(Worksheet)))\nTEXT: A worksheet is not biodegradable.\nFOL: -Dispensable(Worksheet)\n\nANSWER: Uncertain\n</EVALUATE>\n\n<PREMISES>\nA La Liga soccer team ranks higher than another La Liga soccer team if it receives more points.\nIf there are two La Liga soccer teams and neither has more points than the other, then the team which receives more points from the games between the two teams ranks higher.\nReal Madrid and Barcelona are both La Liga soccer teams.\nReal Madrid received more points than Barcelona.\nNeither Real Madrid nor Barcelona received more points from the games between them.\n</PREMISES>\n<CONCLUSION>\nReal Madrid ranks higher than Barcelona.\n</CONCLUSION>\n<EVALUATE>\nTEXT: A La Liga soccer team ranks higher than another La Liga soccer team if it receives more points.\nFOL: all x. all y. (LaLigaSoccerTeam(x) & LaLigaSoccerTeam(y) & MorePoints(x, y) -> RankHigherThan(x, y))\nTEXT: If there are two La Liga soccer teams and neither has more points than the other, then the team which receives more points from the games between the two teams ranks higher.\nFOL: all x. all y. (LaLigaSoccerTeam(x) & LaLigaSoccerTeam(y) & -MorePoints(x, y) & -MorePoints(y, x) & MorePointsInGameBetween(x, y) ->  RankHigherThan(x, y))\nTEXT: Real Madrid and Barcelona are both La Liga soccer teams.\nFOL: LaLigaSoccerTeam(RealMadrid) & LaLigaSoccerTeam(Barcelona)\nTEXT: Real Madrid received more points than Barcelona.\nFOL: MorePoints(RealMadrid, Barcelona)\nTEXT: Neither Real Madrid nor Barcelona received more points from the games between them.\nFOL: -MorePointsInGameBetween(RealMadrid, Barcelona) & -MorePointsInGameBetween(Barcelona, RealMadrid)\nTEXT: Real Madrid ranks higher than Barcelona.\nFOL: HigherRank(RealMadrid, Barcelona)\n\nANSWER: True\n</EVALUATE>\n\n<PREMISES>\nAll professional athletes spend most of their time on sports.\nAll Olympic gold medal winners are professional athletes.\nNo full-time scientists spend the majority of their time on sports.\nAll Nobel physics laureates are full-time scientists.\nAmy spends the most time on sports, or Amy is an Olympic gold medal winner.\nIf Amy is not a Nobel physics laureate, then Amy is not an Olympic gold medal winner.\n</PREMISES>\n<CONCLUSION>\nIf Amy is not an Olympic gold medal winner, then Amy is a Nobel physics laureate.\n</CONCLUSION>\n<EVALUATE>\nTEXT: All professional athletes spend most of their time on sports.\nFOL: all x. (ProfessionalAthlete(x) -> SpendOn(x, MostOfTheirTime, Sports))\nTEXT: All Olympic gold medal winners are professional athletes.\nFOL: all x. (OlympicGoldMedalWinner(x) -> ProfessionalAthlete(x))\nTEXT: No full-time scientists spend the majority of their time on sports.\nFOL: all x. (FullTimeScientist(x) -> -SpendOn(x, MostOfTheirTime, Sports))\nTEXT: All Nobel physics laureates are full-time scientists.\nFOL: all x. (NobelPhysicsLaureate(x) -> FullTimeScientist(x))\nTEXT: Amy spends the most time on sports, or Amy is an Olympic gold medal winner.\nFOL: SpendOn(Amy, MostOfTheirTime, Sports) | OlympicGoldMedalWinner(Amy)\nTEXT: If Amy is not a Nobel physics laureate, then Amy is not an Olympic gold medal winner.\nFOL: -NobelPhysicsLaureate(Amy) -> -OlympicGoldMedalWinner(Amy)\nTEXT: If Amy is not an Olympic gold medal winner, then Amy is a Nobel physics laureate.\nFOL: -OlympicGoldMedalWinner(Amy) -> NobelLaureate(Amy)\n\nANSWER: False\n</EVALUATE>\n\n<PREMISES>\nIf a person pays their taxes, then they contribute to the country.\nEveryone who works for a government department pays a tax on their salary.\nEveryone in the army is an employee of a government department.\nEveryone convicted of murder goes to prison.\nEveryone who has been to prison has a criminal record.\nJames was either once convicted of murder, or spent time in prison.\nJames either has a criminal record, or pays his taxes.\n</PREMISES>\n<CONCLUSION>\nJames does not contribute to the country.\n</CONCLUSION>\n<EVALUATE>\nTEXT: If a person pays their taxes, then they contribute to the country.\nFOL: all x. (Taxpayer(x) -> ContributeTo(x, Country))\nTEXT: Everyone who works for a government department pays a tax on their salary.\nFOL: all x. (WorkFor(x, GovernmentAgency) -> Taxpayer(x))\nTEXT: Everyone in the army is an employee of a government department.\nFOL: all x. (ServesIn(x, TheArmy) -> WorkFor(x, GovernmentAgency))\nTEXT: Everyone convicted of murder goes to prison.\nFOL: all x. (SentencedForMurder(x) -> Imprisoned(x))\nTEXT: Everyone who has been to prison has a criminal record.\nFOL: all x. (Imprisoned((x) -> Has(x, CriminalRecord))\nTEXT: James was either once convicted of murder, or spent time in prison.\nFOL: ((SentencedForMurder(James) & -Imprisoned(James)) | (-SentencedForMurder(James) & Imprisoned(James)))\nTEXT: James either has a criminal record, or pays his taxes.\nFOL: ((Has(James, CriminalRecord) & -Taxpayer(James)) | (-Has(James, CriminalRecord) & Taxpayer(James)))\nTEXT: James does not contribute to the country.\nFOL: ContributeToCountry(James)\n\nANSWER: Uncertain\n</EVALUATE>\n\n<PREMISES>\nNo songs are visuals.\nAll folk songs are songs.\nAll videos are visuals.\nAll movies are videos.\nAll sci-fi movies are movies.\nInception is a sci-fi movie.\nMac is neither a folk song nor a sci-fi movie.\n</PREMISES>\n<CONCLUSION>\nInception is a folk song.\n</CONCLUSION>\n<EVALUATE>\nTEXT: No songs are visuals.\nFOL: all x. (Song(x) -> -Visual(x))\nTEXT: All folk songs are songs.\nFOL: all x. (FolkSong(x) -> Song(x))\nTEXT: All videos are visuals.\nFOL: all x. (Video(x) -> Visual(x))\nTEXT: All movies are videos.\nFOL: all x. (Movie(x) -> Video(x))\nTEXT: All sci-fi movies are movies.\nFOL: all x. (ScifiMovie(x) -> Movie(x))\nTEXT: Inception is a sci-fi movie.\nFOL: ScifiMovie(Inception)\nTEXT: Mac is neither a folk song nor a sci-fi movie.\nFOL: -FolkSong(Mac) & -ScifiMovie(Mac)\nTEXT: Inception is a folk song.\nFOL: FolkSong(Inception)\n\nANSWER: False\n</EVALUATE>\n\n<PREMISES>\nEvery chef can cook.\nSome people who aren’t chefs can cook.\nPeople who cook can make scrambled eggs and pasta.\nIf someone can make cookies and muffins, they are a baker.\nBakers who can also make scrambled eggs can make a good breakfast.\nLuke can make cookies, scrambled eggs, and muffins, but not pasta.\n</PREMISES>\n<CONCLUSION>\nLuke is a chef.\n</CONCLUSION>\n<EVALUATE>\nTEXT: Every chef can cook.\nFOL: all x. (Chef(x) -> Can(x, Cook))\nTEXT: Some people who aren’t chefs can cook.\nFOL: exists x. (-Chef(x) & Can(x, Cook))\nTEXT: People who cook can make scrambled eggs and pasta.\nFOL: all x. (Can(x, Cook) -> (CanMake(x, ScrambledEggs) & CanMake(x, Pasta)))\nTEXT: If someone can make cookies and muffins, they are a baker.\nFOL: all x. (CanMake(x, Cookies) & CanMake(x, Muffins) -> Baker(x))\nTEXT: Bakers who can also make scrambled eggs can make a good breakfast.\nFOL: all x. ((Baker(x) & CanMake(x, ScrambledEggs)) -> CanMake(x, GoodBreakfast))\nTEXT: Luke can make cookies, scrambled eggs, and muffins, but not pasta.\nFOL: CanMake(Luke, Cookies) & (CanMake(Luke, ScrambledEggs) & CanMake(Luke, Muffins) & -CanMake(Luke, Pasta)\nTEXT: Luke is a chef.\nFOL: MakeGoodBreakfast(Luke)\n\nANSWER: False\n</EVALUATE>\n\n<PREMISES>\nETS develops various standardized tests primarily in the United States for K-12 and higher education.\nETS administers international tests, including the TOEFL, TOEIC, GRE, and subject tests.\nMany of the assessments ETS develops are associated with entry to the US tertiary and quaternary education institutions.\nETS also develops K-12 statewide assessments used for accountability testing in many states.\n</PREMISES>\n<CONCLUSION>\nETS doesn't administer tests internationally.\n</CONCLUSION>\n<EVALUATE>\nTEXT: ETS develops various standardized tests primarily in the United States for K-12 and higher education.\nFOL: exists x. exists y. (Develop(eTS, x) & Develop(eTS, y) & StandardizedTest(x) & StandardizedTest(y) & In(x, UnitedState) & In(y, UnitedState) & For(x, kOneTwoAndHigherEducation) & For(y, kOneTwoAndHigherEducation))\nTEXT: ETS administers international tests, including the TOEFL, TOEIC, GRE, and subject tests.\nFOL: exists x. (Administer(eTS, x) & InternationalTest(x) & (TOEFL(x) | TOEIC(x) | GRE(x) | SubjectTest(x)))\nTEXT: Many of the assessments ETS develops are associated with entry to the US tertiary and quaternary education institutions.\nFOL: exists x. (Develop(eTS, x) & AssociatedWith(x, EntryToUSEducationInstitution))\nTEXT: ETS also develops K-12 statewide assessments used for accountability testing in many states.\nFOL: exists x. (Develop(eTS, x) & StateWideAssesment(x) & UsedFor(x, AccountabilityTesting))\nTEXT: ETS doesn't administer tests internationally.\nFOL: exists x. (Develops(Ets, x) & For(x, k-OneTwoandhighereducation)) & exists x. (Develops(Ets, x) & AssociatedWith(x, Entrytouseducationinstitutions))\n\nANSWER: False\n</EVALUATE>\n\n<PREMISES>\nDaveed Diggs is an actor and film producer.\nDaveed Diggs played two roles in the musical Hamilton on Broadway.\nOne of the actors from Hamilton won the best actor award.\nThe actor playing Thomas Jefferson won the best actor award.\nDaveed Diggs played Thomas Jefferson.\nMusicals on Broadway are not films.\n</PREMISES>\n<CONCLUSION>\nDaveed Diggs won the best actor award.\n</CONCLUSION>\n<EVALUATE>\nTEXT: Daveed Diggs is an actor and film producer.\nFOL: Actor(DaveedDiggs) & FilmProducer(DaveedDiggs)\nTEXT: Daveed Diggs played two roles in the musical Hamilton on Broadway.\nFOL: exists x. exists y.(PlaysIn(DaveedDiggs, x, Hamilton) & (-(x=y)) & PlaysIn(DaveedDiggs, y, Hamilton)) & OnBroadway(Hamilton) & Musical(Hamilton)\nTEXT: One of the actors from Hamilton won the best actor award.\nFOL: exists x. exists y.(Actor(x) & PlaysIn(x, y, Hamilton) & Wins(x, BestActorAward))\nTEXT: The actor playing Thomas Jefferson won the best actor award.\nFOL: exists x. (Actor(x) & PlaysIn(x, ThomasJefferson, Hamilton) & Wins(x, BestActorAward))\nTEXT: Daveed Diggs played Thomas Jefferson.\nFOL: Plays(DaveedDiggs, ThomasJefferson)\nTEXT: Musicals on Broadway are not films.\nFOL: all x. ((Musical(x) & OnBroadway(x)) -> -Film(x))\nTEXT: Daveed Diggs won the best actor award.\nFOL: exists x. (BRICS(x) & Speaks(x, Hindi))\n\nANSWER: True\n</EVALUATE>\n\n<PREMISES>\nTrilogy is a compound literary or narrative work that is made up of four distinct works.\nThe Harry Potter series consists of 4 distinct works.\nThe Chronicles of Narnia consists of 4 distinct works.\n</PREMISES>\n<CONCLUSION>\nThe Harry Potter series of books is Trilogy.\n</CONCLUSION>\n<EVALUATE>", "raw_generations": ["Generation 1:\nTEXT: Trilogy is a compound literary or narrative work that is made up of four distinct works.\nFOL: Trilogy(x) -> and(forall y. (DistinctWork(y) -> includedIn(y, x)))(4)\n\nTEXT: The Harry Potter series consists of 4 distinct works.\nFOL: series(HarryPotter) & and(forall y. (DistinctWork(y) -> partOf(y, HarryPotter))) (4)\n\nTEXT: The Chronicles of Narnia consists of 4 distinct works.\nFOL: series(ChroniclesOfNarnia) & and(forall y. (DistinctWork(y) -> partOf(y, ChroniclesOfNarnia))) (4)\n\nTEXT: The Harry Potter series of books is Trilogy.\nFOL: Trilogy(HarryPotter)\n\nANSWER: False\n\nExplanation:\nA trilogy is a set of three works, not four. The Harry Potter series consists of seven books, not a trilogy. The Chronicles of Narnia also consists of seven books. Therefore, neither the Harry Potter series nor the Chronicles of Narnia can be considered a trilogy.\nProcessed: False", "Generation 2:\nTEXT: Trilogy is a compound literary or narrative work that is made up of four distinct works.\nFOL: Trilogy(x) -> all y. (CompoundLiteraryWork(x) & NarrativeWork(x) & four_distinct_works(x, y))\n\nTEXT: The Harry Potter series consists of 4 distinct works.\nFOL: four_distinct_works(HarryPotterSeries, w)\n\nTEXT: The Chronicles of Narnia consists of 4 distinct works.\nFOL: four_distinct_works(ChroniclesOfNarnia, n)\n\nTEXT: The Harry Potter series of books is Trilogy.\nFOL: Trilogy(HarryPotterSeries)\n\nANSWER: True, given that the definition of a trilogy is being interpreted as a work consisting of 4 distinct parts.\nProcessed: True", "Generation 3:\nTEXT: Trilogy is a compound literary or narrative work that is made up of four distinct works.\nFOL: all x. (Trilogy(x) -> CompoundWork(x) & LiteraryOrNarrativeWork(x) & MadeUpOf(x, 4) & Distinct(all y. Work(y) & In(y, x)))\n\nTEXT: The Harry Potter series consists of 4 distinct works.\nFOL: all x. (HarryPotterSeries(x) -> CompoundWork(x) & LiteraryWork(x) & MadeUpOf(x, 4) & Distinct(all y. Work(y) & In(y, x)))\n\nTEXT: The Chronicles of Narnia consists of 4 distinct works.\nFOL: all x. (ChroniclesOfNarnia(x) -> CompoundWork(x) & LiteraryWork(x) & MadeUpOf(x, 4) & Distinct(all y. Work(y) & In(y, x)))\n\nTEXT: The Harry Potter series of books is Trilogy.\nFOL: HarryPotterSeries(x) -> Trilogy(x)\n\nANSWER: False\n\nIn order for the conclusion to be true, the Harry Potter series must be a Trilogy, which means it must be a compound literary or narrative work made up of exactly four distinct works. However, the premises only state that the Harry Potter series consists of four distinct works, but they do not specify that it is a Trilogy. Therefore, based on the provided premises, we cannot conclude that the Harry Potter series is a Trilogy.\nProcessed: False", "Generation 4:\nTEXT: Trilogy is a compound literary or narrative work that is made up of four distinct works.\nFOL: all x. (Trilogy(x) -> (CompoundLiteraryOrNarrativeWork(x) & Has(x, FourDistinctWorks)))\nTEXT: The Harry Potter series consists of 4 distinct works.\nFOL: FourDistinctWorks(HarryPotterSeries)\nTEXT: The Chronicles of Narnia consists of 4 distinct works.\nFOL: FourDistinctWorks(ChroniclesOfNarnia)\nTEXT: The Harry Potter series of books is Trilogy.\nFOL: Trilogy(HarryPotterSeries)\n\nANSWER: False\nProcessed: False", "Generation 5:\nTEXT: Trilogy is a compound literary or narrative work that is made up of four distinct works.\nFOL: Trilogy(x) -> all y. (LiteraryWork(y) -> (Distinct(y) & in(y, x)) & cardinality(x) = 4)\n\nTEXT: The Harry Potter series consists of 4 distinct works.\nFOL: HarryPotterSeries(y) -> all z. (LiteraryWork(z) -> (PartOf(z, y) & Distinct(z))) & cardinality(y) = 4\n\nTEXT: The Chronicles of Narnia consists of 4 distinct works.\nFOL: ChroniclesOfNarnia(z) -> all w. (LiteraryWork(w) -> (PartOf(w, z) & Distinct(w))) & cardinality(z) = 4\n\nTEXT: The Harry Potter series of books is Trilogy.\nFOL: Trilogy(HarryPotterSeries)\n\nANSWER: False\n\nIn the given premises, neither The Harry Potter series nor The Chronicles of Narnia are defined as having exactly 4 distinct works. Therefore, it cannot be concluded that either of them is a trilogy. Both series have more than 4 distinct works.\nProcessed: False", "Generation 6:\nTEXT: Trilogy is a compound literary or narrative work that is made up of four distinct works.\nFOL: Trilogy(x) -> (CompoundLiteraryOrNarrativeWork(x) & And(four(y), DistinctWorks(y, x)))\n\nTEXT: The Harry Potter series consists of 4 distinct works.\nFOL: Series(HarryPotter) & And(four(y), ConsistsOf(y, HarryPotter))\n\nTEXT: The Chronicles of Narnia consists of 4 distinct works.\nFOL: Series(ChroniclesOfNarnia) & And(four(y), ConsistsOf(y, ChroniclesOfNarnia))\n\nTEXT: The Harry Potter series of books is Trilogy.\nFOL: Trilogy(HarryPotter)\n\nANSWER: True\nProcessed: True", "Generation 7:\nTEXT: Trilogy is a compound literary or narrative work that is made up of four distinct works.\nFOL: Trilogy(x) -> all y. (CompoundLiteraryOrNarrativeWork(y) & MadeUpOf(y, FourDistinctWorks))\n\nTEXT: The Harry Potter series consists of 4 distinct works.\nFOL: HarryPotterSeries(y) -> all z. (DistinctWork(z) & IncludedIn(z, y)) & card(y) = 4\n\nTEXT: The Chronicles of Narnia consists of 4 distinct works.\nFOL: ChroniclesOfNarnia(z) -> all w. (DistinctWork(w) & IncludedIn(w, z)) & card(z) = 4\n\nTEXT: The Harry Potter series of books is Trilogy.\nFOL: HarryPotterSeries(y) -> Trilogy(y)\n\nANSWER: False\n\nThis is because the definition of a trilogy is a work made up of three parts, not four. The Harry Potter series consists of seven books, not four, so it cannot be a trilogy. The Chronicles of Narnia also consists of seven books, but it was not specified that a trilogy must consist of exactly four parts, so it is possible that the definition of a trilogy could be expanded to include works with four parts, but it would still not apply to the Harry Potter series.\nProcessed: False", "Generation 8:\nTEXT: Trilogy is a compound literary or narrative work that is made up of four distinct works.\nFOL: Trilogy(x) -> all y. (LiteraryWork(y) & NarrativeWork(y) & CompoundWork(y) & Distinct(y) & four(count(y)) & in(y, x))\n\nTEXT: The Harry Potter series consists of 4 distinct works.\nFOL: Series(HarryPotter) & all y. (LiteraryWork(y) & NarrativeWork(y) & Distinct(y) & in(y, HarryPotter) & four(count(y)))\n\nTEXT: The Chronicles of Narnia consists of 4 distinct works.\nFOL: Series(ChroniclesOfNarnia) & all y. (LiteraryWork(y) & NarrativeWork(y) & Distinct(y) & in(y, ChroniclesOfNarnia) & four(count(y)))\n\nTEXT: The Harry Potter series of books is Trilogy.\nFOL: Trilogy(HarryPotter)\n\nANSWER: True\nProcessed: True", "Generation 9:\nTEXT: Trilogy is a compound literary or narrative work that is made up of four distinct works.\nFOL: all x. (Trilogy(x) -> all y. (CompoundLiteraryWork(x, y) -> FourDistinctWorks(y)))\nTEXT: The Harry Potter series consists of 4 distinct works.\nFOL: FourDistinctWorks(HarryPotterSeries)\nTEXT: The Chronicles of Narnia consists of 4 distinct works.\nFOL: FourDistinctWorks(ChroniclesOfNarnia)\nTEXT: The Harry Potter series of books is Trilogy.\nFOL: Trilogy(HarryPotterSeries)\n\nANSWER: False\nProcessed: False", "Generation 10:\nFOL:\nall x. (Trilogy(x) -> (NumberOfWorks(x) = 4))\nall y. (HarryPotterSeries(y) -> (NumberOfWorks(y) = 4))\nall z. (ChroniclesOfNarnia(z) -> (NumberOfWorks(z) = 4))\n\nThe Harry Potter series of books is Trilogy.\n\nFOL: HarryPotterSeries(x) = Trilogy(x)\n\nANSWER: True (given the premises)\nProcessed: True\n\nReference: True\n========================================"], "answers": ["False", "True", "False", "False", "False", "True", "False", "True", "False", "True"]}
{"idx": 29, "prompt": "The following is a first-order logic (FOL) problem.\nThe problem is to determine whether the conclusion follows from the premises.\nThe premises are given in the form of a set of first-order logic sentences.\nThe conclusion is given in the form of a single first-order logic sentence.\nThe task is to translate each of the premises and conclusions into FOL expressions.and then to evaluate the conclusion as ANSWER: True, ANSWER: False, or ANSWER: Uncertain given the premises. The output should follow format TEXT: \nFOL: \nTEXT: \nFOL:... ANSWER: \n\n\n<PREMISES>\nAll biodegradable things are environment-friendly.\nAll woodware is biodegradable.\nAll paper is woodware.\nNothing is a good thing and also a bad thing.\nAll environment-friendly things are good.\nA worksheet is either paper or environment-friendly.\n</PREMISES>\n<CONCLUSION>\nA worksheet is not biodegradable.\n</CONCLUSION>\n<EVALUATE>\nTEXT: All biodegradable things are environment-friendly.\nFOL: all x. (Biodegradable(x) -> EnvironmentFriendly(x))\nTEXT: All woodware is biodegradable.\nFOL: all x. (Woodware(x) -> Biodegradable(x))\nTEXT: All paper is woodware.\nFOL: all x. (Paper(x) -> Woodware(x))\nTEXT: Nothing is a good thing and also a bad thing.\nFOL: -(exists x. (Good(x) & Bad(x)))\nTEXT: All environment-friendly things are good.\nFOL: all x. (EnvironmentFriendly(x) -> Good(x))\nTEXT: A worksheet is either paper or environment-friendly.\nFOL: ((Paper(Worksheet) & -EnvironmentFriendly(Worksheet)) | (-Paper(Worksheet) & EnvironmentFriendly(Worksheet)))\nTEXT: A worksheet is not biodegradable.\nFOL: -Dispensable(Worksheet)\n\nANSWER: Uncertain\n</EVALUATE>\n\n<PREMISES>\nA La Liga soccer team ranks higher than another La Liga soccer team if it receives more points.\nIf there are two La Liga soccer teams and neither has more points than the other, then the team which receives more points from the games between the two teams ranks higher.\nReal Madrid and Barcelona are both La Liga soccer teams.\nReal Madrid received more points than Barcelona.\nNeither Real Madrid nor Barcelona received more points from the games between them.\n</PREMISES>\n<CONCLUSION>\nReal Madrid ranks higher than Barcelona.\n</CONCLUSION>\n<EVALUATE>\nTEXT: A La Liga soccer team ranks higher than another La Liga soccer team if it receives more points.\nFOL: all x. all y. (LaLigaSoccerTeam(x) & LaLigaSoccerTeam(y) & MorePoints(x, y) -> RankHigherThan(x, y))\nTEXT: If there are two La Liga soccer teams and neither has more points than the other, then the team which receives more points from the games between the two teams ranks higher.\nFOL: all x. all y. (LaLigaSoccerTeam(x) & LaLigaSoccerTeam(y) & -MorePoints(x, y) & -MorePoints(y, x) & MorePointsInGameBetween(x, y) ->  RankHigherThan(x, y))\nTEXT: Real Madrid and Barcelona are both La Liga soccer teams.\nFOL: LaLigaSoccerTeam(RealMadrid) & LaLigaSoccerTeam(Barcelona)\nTEXT: Real Madrid received more points than Barcelona.\nFOL: MorePoints(RealMadrid, Barcelona)\nTEXT: Neither Real Madrid nor Barcelona received more points from the games between them.\nFOL: -MorePointsInGameBetween(RealMadrid, Barcelona) & -MorePointsInGameBetween(Barcelona, RealMadrid)\nTEXT: Real Madrid ranks higher than Barcelona.\nFOL: HigherRank(RealMadrid, Barcelona)\n\nANSWER: True\n</EVALUATE>\n\n<PREMISES>\nAll professional athletes spend most of their time on sports.\nAll Olympic gold medal winners are professional athletes.\nNo full-time scientists spend the majority of their time on sports.\nAll Nobel physics laureates are full-time scientists.\nAmy spends the most time on sports, or Amy is an Olympic gold medal winner.\nIf Amy is not a Nobel physics laureate, then Amy is not an Olympic gold medal winner.\n</PREMISES>\n<CONCLUSION>\nIf Amy is not an Olympic gold medal winner, then Amy is a Nobel physics laureate.\n</CONCLUSION>\n<EVALUATE>\nTEXT: All professional athletes spend most of their time on sports.\nFOL: all x. (ProfessionalAthlete(x) -> SpendOn(x, MostOfTheirTime, Sports))\nTEXT: All Olympic gold medal winners are professional athletes.\nFOL: all x. (OlympicGoldMedalWinner(x) -> ProfessionalAthlete(x))\nTEXT: No full-time scientists spend the majority of their time on sports.\nFOL: all x. (FullTimeScientist(x) -> -SpendOn(x, MostOfTheirTime, Sports))\nTEXT: All Nobel physics laureates are full-time scientists.\nFOL: all x. (NobelPhysicsLaureate(x) -> FullTimeScientist(x))\nTEXT: Amy spends the most time on sports, or Amy is an Olympic gold medal winner.\nFOL: SpendOn(Amy, MostOfTheirTime, Sports) | OlympicGoldMedalWinner(Amy)\nTEXT: If Amy is not a Nobel physics laureate, then Amy is not an Olympic gold medal winner.\nFOL: -NobelPhysicsLaureate(Amy) -> -OlympicGoldMedalWinner(Amy)\nTEXT: If Amy is not an Olympic gold medal winner, then Amy is a Nobel physics laureate.\nFOL: -OlympicGoldMedalWinner(Amy) -> NobelLaureate(Amy)\n\nANSWER: False\n</EVALUATE>\n\n<PREMISES>\nIf a person pays their taxes, then they contribute to the country.\nEveryone who works for a government department pays a tax on their salary.\nEveryone in the army is an employee of a government department.\nEveryone convicted of murder goes to prison.\nEveryone who has been to prison has a criminal record.\nJames was either once convicted of murder, or spent time in prison.\nJames either has a criminal record, or pays his taxes.\n</PREMISES>\n<CONCLUSION>\nJames does not contribute to the country.\n</CONCLUSION>\n<EVALUATE>\nTEXT: If a person pays their taxes, then they contribute to the country.\nFOL: all x. (Taxpayer(x) -> ContributeTo(x, Country))\nTEXT: Everyone who works for a government department pays a tax on their salary.\nFOL: all x. (WorkFor(x, GovernmentAgency) -> Taxpayer(x))\nTEXT: Everyone in the army is an employee of a government department.\nFOL: all x. (ServesIn(x, TheArmy) -> WorkFor(x, GovernmentAgency))\nTEXT: Everyone convicted of murder goes to prison.\nFOL: all x. (SentencedForMurder(x) -> Imprisoned(x))\nTEXT: Everyone who has been to prison has a criminal record.\nFOL: all x. (Imprisoned((x) -> Has(x, CriminalRecord))\nTEXT: James was either once convicted of murder, or spent time in prison.\nFOL: ((SentencedForMurder(James) & -Imprisoned(James)) | (-SentencedForMurder(James) & Imprisoned(James)))\nTEXT: James either has a criminal record, or pays his taxes.\nFOL: ((Has(James, CriminalRecord) & -Taxpayer(James)) | (-Has(James, CriminalRecord) & Taxpayer(James)))\nTEXT: James does not contribute to the country.\nFOL: ContributeToCountry(James)\n\nANSWER: Uncertain\n</EVALUATE>\n\n<PREMISES>\nNo songs are visuals.\nAll folk songs are songs.\nAll videos are visuals.\nAll movies are videos.\nAll sci-fi movies are movies.\nInception is a sci-fi movie.\nMac is neither a folk song nor a sci-fi movie.\n</PREMISES>\n<CONCLUSION>\nInception is a folk song.\n</CONCLUSION>\n<EVALUATE>\nTEXT: No songs are visuals.\nFOL: all x. (Song(x) -> -Visual(x))\nTEXT: All folk songs are songs.\nFOL: all x. (FolkSong(x) -> Song(x))\nTEXT: All videos are visuals.\nFOL: all x. (Video(x) -> Visual(x))\nTEXT: All movies are videos.\nFOL: all x. (Movie(x) -> Video(x))\nTEXT: All sci-fi movies are movies.\nFOL: all x. (ScifiMovie(x) -> Movie(x))\nTEXT: Inception is a sci-fi movie.\nFOL: ScifiMovie(Inception)\nTEXT: Mac is neither a folk song nor a sci-fi movie.\nFOL: -FolkSong(Mac) & -ScifiMovie(Mac)\nTEXT: Inception is a folk song.\nFOL: FolkSong(Inception)\n\nANSWER: False\n</EVALUATE>\n\n<PREMISES>\nEvery chef can cook.\nSome people who aren’t chefs can cook.\nPeople who cook can make scrambled eggs and pasta.\nIf someone can make cookies and muffins, they are a baker.\nBakers who can also make scrambled eggs can make a good breakfast.\nLuke can make cookies, scrambled eggs, and muffins, but not pasta.\n</PREMISES>\n<CONCLUSION>\nLuke is a chef.\n</CONCLUSION>\n<EVALUATE>\nTEXT: Every chef can cook.\nFOL: all x. (Chef(x) -> Can(x, Cook))\nTEXT: Some people who aren’t chefs can cook.\nFOL: exists x. (-Chef(x) & Can(x, Cook))\nTEXT: People who cook can make scrambled eggs and pasta.\nFOL: all x. (Can(x, Cook) -> (CanMake(x, ScrambledEggs) & CanMake(x, Pasta)))\nTEXT: If someone can make cookies and muffins, they are a baker.\nFOL: all x. (CanMake(x, Cookies) & CanMake(x, Muffins) -> Baker(x))\nTEXT: Bakers who can also make scrambled eggs can make a good breakfast.\nFOL: all x. ((Baker(x) & CanMake(x, ScrambledEggs)) -> CanMake(x, GoodBreakfast))\nTEXT: Luke can make cookies, scrambled eggs, and muffins, but not pasta.\nFOL: CanMake(Luke, Cookies) & (CanMake(Luke, ScrambledEggs) & CanMake(Luke, Muffins) & -CanMake(Luke, Pasta)\nTEXT: Luke is a chef.\nFOL: MakeGoodBreakfast(Luke)\n\nANSWER: False\n</EVALUATE>\n\n<PREMISES>\nETS develops various standardized tests primarily in the United States for K-12 and higher education.\nETS administers international tests, including the TOEFL, TOEIC, GRE, and subject tests.\nMany of the assessments ETS develops are associated with entry to the US tertiary and quaternary education institutions.\nETS also develops K-12 statewide assessments used for accountability testing in many states.\n</PREMISES>\n<CONCLUSION>\nETS doesn't administer tests internationally.\n</CONCLUSION>\n<EVALUATE>\nTEXT: ETS develops various standardized tests primarily in the United States for K-12 and higher education.\nFOL: exists x. exists y. (Develop(eTS, x) & Develop(eTS, y) & StandardizedTest(x) & StandardizedTest(y) & In(x, UnitedState) & In(y, UnitedState) & For(x, kOneTwoAndHigherEducation) & For(y, kOneTwoAndHigherEducation))\nTEXT: ETS administers international tests, including the TOEFL, TOEIC, GRE, and subject tests.\nFOL: exists x. (Administer(eTS, x) & InternationalTest(x) & (TOEFL(x) | TOEIC(x) | GRE(x) | SubjectTest(x)))\nTEXT: Many of the assessments ETS develops are associated with entry to the US tertiary and quaternary education institutions.\nFOL: exists x. (Develop(eTS, x) & AssociatedWith(x, EntryToUSEducationInstitution))\nTEXT: ETS also develops K-12 statewide assessments used for accountability testing in many states.\nFOL: exists x. (Develop(eTS, x) & StateWideAssesment(x) & UsedFor(x, AccountabilityTesting))\nTEXT: ETS doesn't administer tests internationally.\nFOL: exists x. (Develops(Ets, x) & For(x, k-OneTwoandhighereducation)) & exists x. (Develops(Ets, x) & AssociatedWith(x, Entrytouseducationinstitutions))\n\nANSWER: False\n</EVALUATE>\n\n<PREMISES>\nDaveed Diggs is an actor and film producer.\nDaveed Diggs played two roles in the musical Hamilton on Broadway.\nOne of the actors from Hamilton won the best actor award.\nThe actor playing Thomas Jefferson won the best actor award.\nDaveed Diggs played Thomas Jefferson.\nMusicals on Broadway are not films.\n</PREMISES>\n<CONCLUSION>\nDaveed Diggs won the best actor award.\n</CONCLUSION>\n<EVALUATE>\nTEXT: Daveed Diggs is an actor and film producer.\nFOL: Actor(DaveedDiggs) & FilmProducer(DaveedDiggs)\nTEXT: Daveed Diggs played two roles in the musical Hamilton on Broadway.\nFOL: exists x. exists y.(PlaysIn(DaveedDiggs, x, Hamilton) & (-(x=y)) & PlaysIn(DaveedDiggs, y, Hamilton)) & OnBroadway(Hamilton) & Musical(Hamilton)\nTEXT: One of the actors from Hamilton won the best actor award.\nFOL: exists x. exists y.(Actor(x) & PlaysIn(x, y, Hamilton) & Wins(x, BestActorAward))\nTEXT: The actor playing Thomas Jefferson won the best actor award.\nFOL: exists x. (Actor(x) & PlaysIn(x, ThomasJefferson, Hamilton) & Wins(x, BestActorAward))\nTEXT: Daveed Diggs played Thomas Jefferson.\nFOL: Plays(DaveedDiggs, ThomasJefferson)\nTEXT: Musicals on Broadway are not films.\nFOL: all x. ((Musical(x) & OnBroadway(x)) -> -Film(x))\nTEXT: Daveed Diggs won the best actor award.\nFOL: exists x. (BRICS(x) & Speaks(x, Hindi))\n\nANSWER: True\n</EVALUATE>\n\n<PREMISES>\nTrilogy is a compound literary or narrative work that is made up of four distinct works.\nThe Harry Potter series consists of 4 distinct works.\nThe Chronicles of Narnia consists of 4 distinct works.\n</PREMISES>\n<CONCLUSION>\nThe Chronicles of Narnia series of books is not Trilogy.\n</CONCLUSION>\n<EVALUATE>", "raw_generations": ["Generation 1:\nTEXT: Trilogy is a compound literary or narrative work that is made up of four distinct works.\nFOL: all x. (Trilogy(x) -> And(x, FourDistinctWorks))\nTEXT: The Harry Potter series consists of 4 distinct works.\nFOL: FourDistinctWorks(HarryPotterSeries)\nTEXT: The Chronicles of Narnia consists of 4 distinct works.\nFOL: FourDistinctWorks(ChroniclesOfNarnia)\nTEXT: The Chronicles of Narnia series of books is not Trilogy.\nFOL: -(ChroniclesOfNarnia = Trilogy)\n\nANSWER: True\nProcessed: True", "Generation 2:\nFOL:\n1. all x. (Trilogy(x) -> has(x, 4_distinct_works))\n2. all x. (HarryPotterSeries(x) -> has(x, 4_distinct_works))\n3. all x. (ChroniclesOfNarnia(x) -> has(x, 4_distinct_works))\n\nTEXT: The Chronicles of Narnia series of books is not Trilogy.\nFOL: -Trilogy(ChroniclesOfNarnia)\n\nANSWER: True\nProcessed: True", "Generation 3:\nTEXT: Trilogy is a compound literary or narrative work that is made up of four distinct works.\nFOL: all x. (Trilogy(x) -> And(all y. (DistinctWork(y) -> IncludedIn(y, x)) & Four(y)))\n\nTEXT: The Harry Potter series consists of 4 distinct works.\nFOL: all x. (HarryPotterSeries(x) -> And(all y. (DistinctWork(y) -> IncludedIn(y, x)) & Four(y)))\n\nTEXT: The Chronicles of Narnia consists of 4 distinct works.\nFOL: all x. (ChroniclesOfNarnia(x) -> And(all y. (DistinctWork(y) -> IncludedIn(y, x)) & Four(y)))\n\nTEXT: The Chronicles of Narnia series of books is not Trilogy.\nFOL: -(all x. (ChroniclesOfNarnia(x) -> Trilogy(x)))\n\nANSWER: True\nProcessed: True", "Generation 4:\nFOL:\nall x. (Trilogy(x) -> length(x) = 3)\nall y. (HarryPotterSeries(y) -> length(y) = 4)\nall z. (ChroniclesOfNarnia(z) -> length(z) = 4)\n\nThe Chronicles of Narnia series of books is not Trilogy.\nFOL: -(Trilogy(ChroniclesOfNarnia))\n\nANSWER: True\nProcessed: True", "Generation 5:\nTEXT: Trilogy is a compound literary or narrative work that is made up of four distinct works.\nFOL: Trilogy(x) -> all y. (CompoundWork(x, y) & LiteraryOrNarrativeWork(y) & DistinctWork(y) & Four(y))\n\nTEXT: The Harry Potter series consists of 4 distinct works.\nFOL: HarryPotterSeries(x) -> all y. (ConsistsOf(x, y) & Series(y) & DistinctWork(y) & Four(y))\n\nTEXT: The Chronicles of Narnia consists of 4 distinct works.\nFOL: ChroniclesOfNarnia(x) -> all y. (ConsistsOf(x, y) & Series(y) & DistinctWork(y) & Four(y))\n\nTEXT: The Chronicles of Narnia series of books is not Trilogy.\nFOL: -(ChroniclesOfNarnia(x) -> Trilogy(x))\n\nANSWER: True\nProcessed: True", "Generation 6:\nTEXT: Trilogy is a compound literary or narrative work that is made up of four distinct works.\nFOL: all x. (Trilogy(x) -> And(FourDistinctWorks(x)))\nTEXT: The Harry Potter series consists of 4 distinct works.\nFOL: FourDistinctWorks(HarryPotterSeries)\nTEXT: The Chronicles of Narnia consists of 4 distinct works.\nFOL: FourDistinctWorks(ChroniclesOfNarnia)\nTEXT: The Chronicles of Narnia series of books is not Trilogy.\nFOL: -(Trilogy(ChroniclesOfNarnia))\n\nANSWER: True\nProcessed: True", "Generation 7:\nTEXT: Trilogy is a compound literary or narrative work that is made up of four distinct works.\nFOL: Trilogy(x) -> And(x, FourDistinctWorks)\n\nTEXT: The Harry Potter series consists of 4 distinct works.\nFOL: HarryPotter(y) -> And(y, FourDistinctWorks)\n\nTEXT: The Chronicles of Narnia consists of 4 distinct works.\nFOL: ChroniclesOfNarnia(z) -> And(z, FourDistinctWorks)\n\nTEXT: The Chronicles of Narnia series of books is not Trilogy.\nFOL: -(Trilogy(ChroniclesOfNarnia))\n\nANSWER: True\nProcessed: True", "Generation 8:\nTEXT: Trilogy is a compound literary or narrative work that is made up of four distinct works.\nFOL: Trilogy(x) -> (CompoundLiteraryOrNarrativeWork(x) & MadeUpOf(x, FourDistinctWorks))\n\nTEXT: The Harry Potter series consists of 4 distinct works.\nFOL: HarryPotterSeries(y) -> (ConsistsOf(y, FourDistinctWorks))\n\nTEXT: The Chronicles of Narnia consists of 4 distinct works.\nFOL: ChroniclesOfNarniaSeries(z) -> (ConsistsOf(z, FourDistinctWorks))\n\nTEXT: The Chronicles of Narnia series of books is not Trilogy.\nFOL: -(ChroniclesOfNarniaSeries(z) & Trilogy(z))\n\nANSWER: True\nProcessed: True", "Generation 9:\nTEXT: Trilogy is a compound literary or narrative work that is made up of four distinct works.\nFOL: all x. (Trilogy(x) -> FourDistinctWorks(x))\n\nTEXT: The Harry Potter series consists of 4 distinct works.\nFOL: FourDistinctWorks(HarryPotterSeries)\n\nTEXT: The Chronicles of Narnia consists of 4 distinct works.\nFOL: FourDistinctWorks(ChroniclesOfNarnia)\n\nTEXT: The Chronicles of Narnia series of books is not Trilogy.\nFOL: -(ChroniclesOfNarnia = Trilogy)\n\nANSWER: True\nProcessed: True", "Generation 10:\nTEXT: Trilogy is a compound literary or narrative work that is made up of four distinct works.\nFOL: all x. (Trilogy(x) -> And(x, FourDistinctWorks))\nTEXT: The Harry Potter series consists of 4 distinct works.\nFOL: FourDistinctWorks(HarryPotterSeries)\nTEXT: The Chronicles of Narnia consists of 4 distinct works.\nFOL: FourDistinctWorks(ChroniclesOfNarnia)\nTEXT: The Chronicles of Narnia series of books is not Trilogy.\nFOL: -(Trilogy(ChroniclesOfNarnia))\n\nANSWER: True\nProcessed: True\n\nReference: False\n========================================"], "answers": ["True", "True", "True", "True", "True", "True", "True", "True", "True", "True"]}
{"idx": 30, "prompt": "The following is a first-order logic (FOL) problem.\nThe problem is to determine whether the conclusion follows from the premises.\nThe premises are given in the form of a set of first-order logic sentences.\nThe conclusion is given in the form of a single first-order logic sentence.\nThe task is to translate each of the premises and conclusions into FOL expressions.and then to evaluate the conclusion as ANSWER: True, ANSWER: False, or ANSWER: Uncertain given the premises. The output should follow format TEXT: \nFOL: \nTEXT: \nFOL:... ANSWER: \n\n\n<PREMISES>\nAll biodegradable things are environment-friendly.\nAll woodware is biodegradable.\nAll paper is woodware.\nNothing is a good thing and also a bad thing.\nAll environment-friendly things are good.\nA worksheet is either paper or environment-friendly.\n</PREMISES>\n<CONCLUSION>\nA worksheet is not biodegradable.\n</CONCLUSION>\n<EVALUATE>\nTEXT: All biodegradable things are environment-friendly.\nFOL: all x. (Biodegradable(x) -> EnvironmentFriendly(x))\nTEXT: All woodware is biodegradable.\nFOL: all x. (Woodware(x) -> Biodegradable(x))\nTEXT: All paper is woodware.\nFOL: all x. (Paper(x) -> Woodware(x))\nTEXT: Nothing is a good thing and also a bad thing.\nFOL: -(exists x. (Good(x) & Bad(x)))\nTEXT: All environment-friendly things are good.\nFOL: all x. (EnvironmentFriendly(x) -> Good(x))\nTEXT: A worksheet is either paper or environment-friendly.\nFOL: ((Paper(Worksheet) & -EnvironmentFriendly(Worksheet)) | (-Paper(Worksheet) & EnvironmentFriendly(Worksheet)))\nTEXT: A worksheet is not biodegradable.\nFOL: -Dispensable(Worksheet)\n\nANSWER: Uncertain\n</EVALUATE>\n\n<PREMISES>\nA La Liga soccer team ranks higher than another La Liga soccer team if it receives more points.\nIf there are two La Liga soccer teams and neither has more points than the other, then the team which receives more points from the games between the two teams ranks higher.\nReal Madrid and Barcelona are both La Liga soccer teams.\nReal Madrid received more points than Barcelona.\nNeither Real Madrid nor Barcelona received more points from the games between them.\n</PREMISES>\n<CONCLUSION>\nReal Madrid ranks higher than Barcelona.\n</CONCLUSION>\n<EVALUATE>\nTEXT: A La Liga soccer team ranks higher than another La Liga soccer team if it receives more points.\nFOL: all x. all y. (LaLigaSoccerTeam(x) & LaLigaSoccerTeam(y) & MorePoints(x, y) -> RankHigherThan(x, y))\nTEXT: If there are two La Liga soccer teams and neither has more points than the other, then the team which receives more points from the games between the two teams ranks higher.\nFOL: all x. all y. (LaLigaSoccerTeam(x) & LaLigaSoccerTeam(y) & -MorePoints(x, y) & -MorePoints(y, x) & MorePointsInGameBetween(x, y) ->  RankHigherThan(x, y))\nTEXT: Real Madrid and Barcelona are both La Liga soccer teams.\nFOL: LaLigaSoccerTeam(RealMadrid) & LaLigaSoccerTeam(Barcelona)\nTEXT: Real Madrid received more points than Barcelona.\nFOL: MorePoints(RealMadrid, Barcelona)\nTEXT: Neither Real Madrid nor Barcelona received more points from the games between them.\nFOL: -MorePointsInGameBetween(RealMadrid, Barcelona) & -MorePointsInGameBetween(Barcelona, RealMadrid)\nTEXT: Real Madrid ranks higher than Barcelona.\nFOL: HigherRank(RealMadrid, Barcelona)\n\nANSWER: True\n</EVALUATE>\n\n<PREMISES>\nAll professional athletes spend most of their time on sports.\nAll Olympic gold medal winners are professional athletes.\nNo full-time scientists spend the majority of their time on sports.\nAll Nobel physics laureates are full-time scientists.\nAmy spends the most time on sports, or Amy is an Olympic gold medal winner.\nIf Amy is not a Nobel physics laureate, then Amy is not an Olympic gold medal winner.\n</PREMISES>\n<CONCLUSION>\nIf Amy is not an Olympic gold medal winner, then Amy is a Nobel physics laureate.\n</CONCLUSION>\n<EVALUATE>\nTEXT: All professional athletes spend most of their time on sports.\nFOL: all x. (ProfessionalAthlete(x) -> SpendOn(x, MostOfTheirTime, Sports))\nTEXT: All Olympic gold medal winners are professional athletes.\nFOL: all x. (OlympicGoldMedalWinner(x) -> ProfessionalAthlete(x))\nTEXT: No full-time scientists spend the majority of their time on sports.\nFOL: all x. (FullTimeScientist(x) -> -SpendOn(x, MostOfTheirTime, Sports))\nTEXT: All Nobel physics laureates are full-time scientists.\nFOL: all x. (NobelPhysicsLaureate(x) -> FullTimeScientist(x))\nTEXT: Amy spends the most time on sports, or Amy is an Olympic gold medal winner.\nFOL: SpendOn(Amy, MostOfTheirTime, Sports) | OlympicGoldMedalWinner(Amy)\nTEXT: If Amy is not a Nobel physics laureate, then Amy is not an Olympic gold medal winner.\nFOL: -NobelPhysicsLaureate(Amy) -> -OlympicGoldMedalWinner(Amy)\nTEXT: If Amy is not an Olympic gold medal winner, then Amy is a Nobel physics laureate.\nFOL: -OlympicGoldMedalWinner(Amy) -> NobelLaureate(Amy)\n\nANSWER: False\n</EVALUATE>\n\n<PREMISES>\nIf a person pays their taxes, then they contribute to the country.\nEveryone who works for a government department pays a tax on their salary.\nEveryone in the army is an employee of a government department.\nEveryone convicted of murder goes to prison.\nEveryone who has been to prison has a criminal record.\nJames was either once convicted of murder, or spent time in prison.\nJames either has a criminal record, or pays his taxes.\n</PREMISES>\n<CONCLUSION>\nJames does not contribute to the country.\n</CONCLUSION>\n<EVALUATE>\nTEXT: If a person pays their taxes, then they contribute to the country.\nFOL: all x. (Taxpayer(x) -> ContributeTo(x, Country))\nTEXT: Everyone who works for a government department pays a tax on their salary.\nFOL: all x. (WorkFor(x, GovernmentAgency) -> Taxpayer(x))\nTEXT: Everyone in the army is an employee of a government department.\nFOL: all x. (ServesIn(x, TheArmy) -> WorkFor(x, GovernmentAgency))\nTEXT: Everyone convicted of murder goes to prison.\nFOL: all x. (SentencedForMurder(x) -> Imprisoned(x))\nTEXT: Everyone who has been to prison has a criminal record.\nFOL: all x. (Imprisoned((x) -> Has(x, CriminalRecord))\nTEXT: James was either once convicted of murder, or spent time in prison.\nFOL: ((SentencedForMurder(James) & -Imprisoned(James)) | (-SentencedForMurder(James) & Imprisoned(James)))\nTEXT: James either has a criminal record, or pays his taxes.\nFOL: ((Has(James, CriminalRecord) & -Taxpayer(James)) | (-Has(James, CriminalRecord) & Taxpayer(James)))\nTEXT: James does not contribute to the country.\nFOL: ContributeToCountry(James)\n\nANSWER: Uncertain\n</EVALUATE>\n\n<PREMISES>\nNo songs are visuals.\nAll folk songs are songs.\nAll videos are visuals.\nAll movies are videos.\nAll sci-fi movies are movies.\nInception is a sci-fi movie.\nMac is neither a folk song nor a sci-fi movie.\n</PREMISES>\n<CONCLUSION>\nInception is a folk song.\n</CONCLUSION>\n<EVALUATE>\nTEXT: No songs are visuals.\nFOL: all x. (Song(x) -> -Visual(x))\nTEXT: All folk songs are songs.\nFOL: all x. (FolkSong(x) -> Song(x))\nTEXT: All videos are visuals.\nFOL: all x. (Video(x) -> Visual(x))\nTEXT: All movies are videos.\nFOL: all x. (Movie(x) -> Video(x))\nTEXT: All sci-fi movies are movies.\nFOL: all x. (ScifiMovie(x) -> Movie(x))\nTEXT: Inception is a sci-fi movie.\nFOL: ScifiMovie(Inception)\nTEXT: Mac is neither a folk song nor a sci-fi movie.\nFOL: -FolkSong(Mac) & -ScifiMovie(Mac)\nTEXT: Inception is a folk song.\nFOL: FolkSong(Inception)\n\nANSWER: False\n</EVALUATE>\n\n<PREMISES>\nEvery chef can cook.\nSome people who aren’t chefs can cook.\nPeople who cook can make scrambled eggs and pasta.\nIf someone can make cookies and muffins, they are a baker.\nBakers who can also make scrambled eggs can make a good breakfast.\nLuke can make cookies, scrambled eggs, and muffins, but not pasta.\n</PREMISES>\n<CONCLUSION>\nLuke is a chef.\n</CONCLUSION>\n<EVALUATE>\nTEXT: Every chef can cook.\nFOL: all x. (Chef(x) -> Can(x, Cook))\nTEXT: Some people who aren’t chefs can cook.\nFOL: exists x. (-Chef(x) & Can(x, Cook))\nTEXT: People who cook can make scrambled eggs and pasta.\nFOL: all x. (Can(x, Cook) -> (CanMake(x, ScrambledEggs) & CanMake(x, Pasta)))\nTEXT: If someone can make cookies and muffins, they are a baker.\nFOL: all x. (CanMake(x, Cookies) & CanMake(x, Muffins) -> Baker(x))\nTEXT: Bakers who can also make scrambled eggs can make a good breakfast.\nFOL: all x. ((Baker(x) & CanMake(x, ScrambledEggs)) -> CanMake(x, GoodBreakfast))\nTEXT: Luke can make cookies, scrambled eggs, and muffins, but not pasta.\nFOL: CanMake(Luke, Cookies) & (CanMake(Luke, ScrambledEggs) & CanMake(Luke, Muffins) & -CanMake(Luke, Pasta)\nTEXT: Luke is a chef.\nFOL: MakeGoodBreakfast(Luke)\n\nANSWER: False\n</EVALUATE>\n\n<PREMISES>\nETS develops various standardized tests primarily in the United States for K-12 and higher education.\nETS administers international tests, including the TOEFL, TOEIC, GRE, and subject tests.\nMany of the assessments ETS develops are associated with entry to the US tertiary and quaternary education institutions.\nETS also develops K-12 statewide assessments used for accountability testing in many states.\n</PREMISES>\n<CONCLUSION>\nETS doesn't administer tests internationally.\n</CONCLUSION>\n<EVALUATE>\nTEXT: ETS develops various standardized tests primarily in the United States for K-12 and higher education.\nFOL: exists x. exists y. (Develop(eTS, x) & Develop(eTS, y) & StandardizedTest(x) & StandardizedTest(y) & In(x, UnitedState) & In(y, UnitedState) & For(x, kOneTwoAndHigherEducation) & For(y, kOneTwoAndHigherEducation))\nTEXT: ETS administers international tests, including the TOEFL, TOEIC, GRE, and subject tests.\nFOL: exists x. (Administer(eTS, x) & InternationalTest(x) & (TOEFL(x) | TOEIC(x) | GRE(x) | SubjectTest(x)))\nTEXT: Many of the assessments ETS develops are associated with entry to the US tertiary and quaternary education institutions.\nFOL: exists x. (Develop(eTS, x) & AssociatedWith(x, EntryToUSEducationInstitution))\nTEXT: ETS also develops K-12 statewide assessments used for accountability testing in many states.\nFOL: exists x. (Develop(eTS, x) & StateWideAssesment(x) & UsedFor(x, AccountabilityTesting))\nTEXT: ETS doesn't administer tests internationally.\nFOL: exists x. (Develops(Ets, x) & For(x, k-OneTwoandhighereducation)) & exists x. (Develops(Ets, x) & AssociatedWith(x, Entrytouseducationinstitutions))\n\nANSWER: False\n</EVALUATE>\n\n<PREMISES>\nDaveed Diggs is an actor and film producer.\nDaveed Diggs played two roles in the musical Hamilton on Broadway.\nOne of the actors from Hamilton won the best actor award.\nThe actor playing Thomas Jefferson won the best actor award.\nDaveed Diggs played Thomas Jefferson.\nMusicals on Broadway are not films.\n</PREMISES>\n<CONCLUSION>\nDaveed Diggs won the best actor award.\n</CONCLUSION>\n<EVALUATE>\nTEXT: Daveed Diggs is an actor and film producer.\nFOL: Actor(DaveedDiggs) & FilmProducer(DaveedDiggs)\nTEXT: Daveed Diggs played two roles in the musical Hamilton on Broadway.\nFOL: exists x. exists y.(PlaysIn(DaveedDiggs, x, Hamilton) & (-(x=y)) & PlaysIn(DaveedDiggs, y, Hamilton)) & OnBroadway(Hamilton) & Musical(Hamilton)\nTEXT: One of the actors from Hamilton won the best actor award.\nFOL: exists x. exists y.(Actor(x) & PlaysIn(x, y, Hamilton) & Wins(x, BestActorAward))\nTEXT: The actor playing Thomas Jefferson won the best actor award.\nFOL: exists x. (Actor(x) & PlaysIn(x, ThomasJefferson, Hamilton) & Wins(x, BestActorAward))\nTEXT: Daveed Diggs played Thomas Jefferson.\nFOL: Plays(DaveedDiggs, ThomasJefferson)\nTEXT: Musicals on Broadway are not films.\nFOL: all x. ((Musical(x) & OnBroadway(x)) -> -Film(x))\nTEXT: Daveed Diggs won the best actor award.\nFOL: exists x. (BRICS(x) & Speaks(x, Hindi))\n\nANSWER: True\n</EVALUATE>\n\n<PREMISES>\nTOra is an animal.\nAnimals are software.\nSoftware can be expensive or complex.\nComplex Software is not under the Open General Public License.\nTOra is under the Open General Public License.\n</PREMISES>\n<CONCLUSION>\nTOra is an expensive software.\n</CONCLUSION>\n<EVALUATE>", "raw_generations": ["Generation 1:\nTEXT: TOra is an animal.\nFOL: Animal(TOra)\n\nTEXT: Animals are software.\nFOL: all x. (Animal(x) -> Software(x))\n\nTEXT: Software can be expensive or complex.\nFOL: (Software(x) -> (Expensive(x) | Complex(x)))\n\nTEXT: Complex Software is not under the Open General Public License.\nFOL: all x. (Complex(x) & Software(x) -> -UnderOpenGeneralPublicLicense(x))\n\nTEXT: TOra is under the Open General Public License.\nFOL: UnderOpenGeneralPublicLicense(TOra)\n\nTEXT: TOra is an expensive software.\nFOL: Expensive(TOra)\n\nANSWER: False\n\nIn this case, since animals are not software, TOra cannot be an expensive software. The conclusion is false given the premises.\nProcessed: False", "Generation 2:\nTEXT: TOra is an animal.\nFOL: Animal(Tora)\nTEXT: Animals are software.\nFOL: all x. (Animal(x) -> Software(x))\nTEXT: Software can be expensive or complex.\nFOL: (Expensive(Software(x)) v Complex(Software(x)))\nTEXT: Complex Software is not under the Open General Public License.\nFOL: all x. (Complex(Software(x)) -> -(OpenGeneralPublicLicense(Software(x))))\nTEXT: TOra is under the Open General Public License.\nFOL: OpenGeneralPublicLicense(Tora)\nTEXT: TOra is an expensive software.\nFOL: Expensive(Tora)\n\nANSWER: False\nProcessed: False", "Generation 3:\nTEXT: TOra is an animal.\nFOL: Animal(Tora)\n\nTEXT: Animals are software.\nFOL: all x. (Animal(x) -> Software(x))\n\nTEXT: Software can be expensive or complex.\nFOL: (Software(x) -> (Expensive(x) v Complex(x)))\n\nTEXT: Complex Software is not under the Open General Public License.\nFOL: all x. (Complex(x) & Software(x) -> -UnderOpenGeneralPublicLicense(x))\n\nTEXT: TOra is under the Open General Public License.\nFOL: UnderOpenGeneralPublicLicense(Tora)\n\nTEXT: TOra is an expensive software.\nFOL: Expensive(Tora)\n\nANSWER: False\nProcessed: False", "Generation 4:\nTEXT: TOra is an animal.\nFOL: Animal(TOra)\n\nTEXT: Animals are software.\nFOL: all x. (Animal(x) -> Software(x))\n\nTEXT: Software can be expensive or complex.\nFOL: (Software(x) -> (Expensive(x) | Complex(x)))\n\nTEXT: Complex Software is not under the Open General Public License.\nFOL: all x. (Complex(x) & Software(x) -> -OpenGeneralPublicLicense(x))\n\nTEXT: TOra is under the Open General Public License.\nFOL: OpenGeneralPublicLicense(TOra)\n\nTEXT: TOra is an expensive software.\nFOL: Expensive(TOra)\n\nANSWER: False\nProcessed: False", "Generation 5:\nTEXT: TOra is an animal.\nFOL: Animal(TOra)\nTEXT: Animals are software.\nFOL: all x. (Animal(x) -> Software(x))\nTEXT: Software can be expensive or complex.\nFOL: (Software(x) -> (Expensive(x) | Complex(x)))\nTEXT: Complex Software is not under the Open General Public License.\nFOL: Complex(x) -> -OpenGeneralPublicLicense(x)\nTEXT: TOra is under the Open General Public License.\nFOL: OpenGeneralPublicLicense(TOra)\nTEXT: TOra is an expensive software.\nFOL: Expensive(TOra)\n\nANSWER: False\n\nThe conclusion \"TOra is an expensive software\" is false because the given premises do not provide any information about TOra being expensive. The premises only state that TOra is an animal and that software can be expensive, but they do not specify that TOra is software or that it is expensive.\nProcessed: False", "Generation 6:\nTEXT: TOra is an animal.\nFOL: Animal(TOra)\nTEXT: Animals are software.\nFOL: all x. (Animal(x) -> Software(x))\nTEXT: Software can be expensive or complex.\nFOL: (Software(x) -> (Expensive(x) v Complex(x)))\nTEXT: Complex Software is not under the Open General Public License.\nFOL: all x. (Complex(x) & OpenGeneralPublicLicense(x) -> false)\nTEXT: TOra is under the Open General Public License.\nFOL: OpenGeneralPublicLicense(TOra)\nTEXT: TOra is an expensive software.\nFOL: Expensive(TOra)\n\nANSWER: False\nProcessed: False", "Generation 7:\nTEXT: TOra is an animal.\nFOL: Animal(Tora)\nTEXT: Animals are software.\nFOL: all x. (Animal(x) -> Software(x))\nTEXT: Software can be expensive or complex.\nFOL: (Software(x) -> (Expensive(x) | Complex(x)))\nTEXT: Complex Software is not under the Open General Public License.\nFOL: all x. (Complex(x) & Software(x) -> -OpenGeneralPublicLicense(x))\nTEXT: TOra is under the Open General Public License.\nFOL: OpenGeneralPublicLicense(Tora)\nTEXT: TOra is an expensive software.\nFOL: Expensive(Tora)\n\nANSWER: False\n\nExplanation: The given premises do not provide information about the expense of Tora as an animal is not considered as software in terms of cost.\nProcessed: False", "Generation 8:\nTEXT: TOra is an animal.\nFOL: Animal(Tora)\nTEXT: Animals are software.\nFOL: all x. (Animal(x) -> Software(x))\nTEXT: Software can be expensive or complex.\nFOL: exists x. (Software(x) -> (Expensive(x) | Complex(x)))\nTEXT: Complex Software is not under the Open General Public License.\nFOL: all x. (Complex(x) -> -OpenGeneralPublicLicense(x))\nTEXT: TOra is under the Open General Public License.\nFOL: OpenGeneralPublicLicense(Tora)\nTEXT: TOra is an expensive software.\nFOL: -Expensive(Tora)\n\nANSWER: False\n\nIn this case, we know that Tora is an animal, but animals are not software. Therefore, Tora cannot be expensive software.\nProcessed: False", "Generation 9:\nTEXT: TOra is an animal.\nFOL: Animal(TOra)\nTEXT: Animals are software.\nFOL: all x. (Animal(x) -> Software(x))\nTEXT: Software can be expensive or complex.\nFOL: (Expensive(Software) | Complex(Software))\nTEXT: Complex Software is not under the Open General Public License.\nFOL: -(Complex(Software) & OpenGeneralPublicLicense(Software))\nTEXT: TOra is under the Open General Public License.\nFOL: OpenGeneralPublicLicense(TOra)\nTEXT: TOra is an expensive software.\nFOL: Expensive(TOra)\n\nANSWER: False (Since TOra is an animal and not software, the question is not applicable.)\nProcessed: False", "Generation 10:\nTEXT: TOra is an animal.\nFOL: Animal(TOra)\n\nTEXT: Animals are software.\nFOL: all x. (Animal(x) -> Software(x))\n\nTEXT: Software can be expensive or complex.\nFOL: (Software(x) -> (Expensive(x) | Complex(x)))\n\nTEXT: Complex Software is not under the Open General Public License.\nFOL: all x. (Complex(x) & Software(x) -> -UnderOpenGeneralPublicLicense(x))\n\nTEXT: TOra is under the Open General Public License.\nFOL: UnderOpenGeneralPublicLicense(TOra)\n\nTEXT: TOra is an expensive software.\nFOL: Expensive(TOra)\n\nANSWER: False\nProcessed: False\n\nReference: True\n========================================"], "answers": ["False", "False", "False", "False", "False", "False", "False", "False", "False", "False"]}
{"idx": 31, "prompt": "The following is a first-order logic (FOL) problem.\nThe problem is to determine whether the conclusion follows from the premises.\nThe premises are given in the form of a set of first-order logic sentences.\nThe conclusion is given in the form of a single first-order logic sentence.\nThe task is to translate each of the premises and conclusions into FOL expressions.and then to evaluate the conclusion as ANSWER: True, ANSWER: False, or ANSWER: Uncertain given the premises. The output should follow format TEXT: \nFOL: \nTEXT: \nFOL:... ANSWER: \n\n\n<PREMISES>\nAll biodegradable things are environment-friendly.\nAll woodware is biodegradable.\nAll paper is woodware.\nNothing is a good thing and also a bad thing.\nAll environment-friendly things are good.\nA worksheet is either paper or environment-friendly.\n</PREMISES>\n<CONCLUSION>\nA worksheet is not biodegradable.\n</CONCLUSION>\n<EVALUATE>\nTEXT: All biodegradable things are environment-friendly.\nFOL: all x. (Biodegradable(x) -> EnvironmentFriendly(x))\nTEXT: All woodware is biodegradable.\nFOL: all x. (Woodware(x) -> Biodegradable(x))\nTEXT: All paper is woodware.\nFOL: all x. (Paper(x) -> Woodware(x))\nTEXT: Nothing is a good thing and also a bad thing.\nFOL: -(exists x. (Good(x) & Bad(x)))\nTEXT: All environment-friendly things are good.\nFOL: all x. (EnvironmentFriendly(x) -> Good(x))\nTEXT: A worksheet is either paper or environment-friendly.\nFOL: ((Paper(Worksheet) & -EnvironmentFriendly(Worksheet)) | (-Paper(Worksheet) & EnvironmentFriendly(Worksheet)))\nTEXT: A worksheet is not biodegradable.\nFOL: -Dispensable(Worksheet)\n\nANSWER: Uncertain\n</EVALUATE>\n\n<PREMISES>\nA La Liga soccer team ranks higher than another La Liga soccer team if it receives more points.\nIf there are two La Liga soccer teams and neither has more points than the other, then the team which receives more points from the games between the two teams ranks higher.\nReal Madrid and Barcelona are both La Liga soccer teams.\nReal Madrid received more points than Barcelona.\nNeither Real Madrid nor Barcelona received more points from the games between them.\n</PREMISES>\n<CONCLUSION>\nReal Madrid ranks higher than Barcelona.\n</CONCLUSION>\n<EVALUATE>\nTEXT: A La Liga soccer team ranks higher than another La Liga soccer team if it receives more points.\nFOL: all x. all y. (LaLigaSoccerTeam(x) & LaLigaSoccerTeam(y) & MorePoints(x, y) -> RankHigherThan(x, y))\nTEXT: If there are two La Liga soccer teams and neither has more points than the other, then the team which receives more points from the games between the two teams ranks higher.\nFOL: all x. all y. (LaLigaSoccerTeam(x) & LaLigaSoccerTeam(y) & -MorePoints(x, y) & -MorePoints(y, x) & MorePointsInGameBetween(x, y) ->  RankHigherThan(x, y))\nTEXT: Real Madrid and Barcelona are both La Liga soccer teams.\nFOL: LaLigaSoccerTeam(RealMadrid) & LaLigaSoccerTeam(Barcelona)\nTEXT: Real Madrid received more points than Barcelona.\nFOL: MorePoints(RealMadrid, Barcelona)\nTEXT: Neither Real Madrid nor Barcelona received more points from the games between them.\nFOL: -MorePointsInGameBetween(RealMadrid, Barcelona) & -MorePointsInGameBetween(Barcelona, RealMadrid)\nTEXT: Real Madrid ranks higher than Barcelona.\nFOL: HigherRank(RealMadrid, Barcelona)\n\nANSWER: True\n</EVALUATE>\n\n<PREMISES>\nAll professional athletes spend most of their time on sports.\nAll Olympic gold medal winners are professional athletes.\nNo full-time scientists spend the majority of their time on sports.\nAll Nobel physics laureates are full-time scientists.\nAmy spends the most time on sports, or Amy is an Olympic gold medal winner.\nIf Amy is not a Nobel physics laureate, then Amy is not an Olympic gold medal winner.\n</PREMISES>\n<CONCLUSION>\nIf Amy is not an Olympic gold medal winner, then Amy is a Nobel physics laureate.\n</CONCLUSION>\n<EVALUATE>\nTEXT: All professional athletes spend most of their time on sports.\nFOL: all x. (ProfessionalAthlete(x) -> SpendOn(x, MostOfTheirTime, Sports))\nTEXT: All Olympic gold medal winners are professional athletes.\nFOL: all x. (OlympicGoldMedalWinner(x) -> ProfessionalAthlete(x))\nTEXT: No full-time scientists spend the majority of their time on sports.\nFOL: all x. (FullTimeScientist(x) -> -SpendOn(x, MostOfTheirTime, Sports))\nTEXT: All Nobel physics laureates are full-time scientists.\nFOL: all x. (NobelPhysicsLaureate(x) -> FullTimeScientist(x))\nTEXT: Amy spends the most time on sports, or Amy is an Olympic gold medal winner.\nFOL: SpendOn(Amy, MostOfTheirTime, Sports) | OlympicGoldMedalWinner(Amy)\nTEXT: If Amy is not a Nobel physics laureate, then Amy is not an Olympic gold medal winner.\nFOL: -NobelPhysicsLaureate(Amy) -> -OlympicGoldMedalWinner(Amy)\nTEXT: If Amy is not an Olympic gold medal winner, then Amy is a Nobel physics laureate.\nFOL: -OlympicGoldMedalWinner(Amy) -> NobelLaureate(Amy)\n\nANSWER: False\n</EVALUATE>\n\n<PREMISES>\nIf a person pays their taxes, then they contribute to the country.\nEveryone who works for a government department pays a tax on their salary.\nEveryone in the army is an employee of a government department.\nEveryone convicted of murder goes to prison.\nEveryone who has been to prison has a criminal record.\nJames was either once convicted of murder, or spent time in prison.\nJames either has a criminal record, or pays his taxes.\n</PREMISES>\n<CONCLUSION>\nJames does not contribute to the country.\n</CONCLUSION>\n<EVALUATE>\nTEXT: If a person pays their taxes, then they contribute to the country.\nFOL: all x. (Taxpayer(x) -> ContributeTo(x, Country))\nTEXT: Everyone who works for a government department pays a tax on their salary.\nFOL: all x. (WorkFor(x, GovernmentAgency) -> Taxpayer(x))\nTEXT: Everyone in the army is an employee of a government department.\nFOL: all x. (ServesIn(x, TheArmy) -> WorkFor(x, GovernmentAgency))\nTEXT: Everyone convicted of murder goes to prison.\nFOL: all x. (SentencedForMurder(x) -> Imprisoned(x))\nTEXT: Everyone who has been to prison has a criminal record.\nFOL: all x. (Imprisoned((x) -> Has(x, CriminalRecord))\nTEXT: James was either once convicted of murder, or spent time in prison.\nFOL: ((SentencedForMurder(James) & -Imprisoned(James)) | (-SentencedForMurder(James) & Imprisoned(James)))\nTEXT: James either has a criminal record, or pays his taxes.\nFOL: ((Has(James, CriminalRecord) & -Taxpayer(James)) | (-Has(James, CriminalRecord) & Taxpayer(James)))\nTEXT: James does not contribute to the country.\nFOL: ContributeToCountry(James)\n\nANSWER: Uncertain\n</EVALUATE>\n\n<PREMISES>\nNo songs are visuals.\nAll folk songs are songs.\nAll videos are visuals.\nAll movies are videos.\nAll sci-fi movies are movies.\nInception is a sci-fi movie.\nMac is neither a folk song nor a sci-fi movie.\n</PREMISES>\n<CONCLUSION>\nInception is a folk song.\n</CONCLUSION>\n<EVALUATE>\nTEXT: No songs are visuals.\nFOL: all x. (Song(x) -> -Visual(x))\nTEXT: All folk songs are songs.\nFOL: all x. (FolkSong(x) -> Song(x))\nTEXT: All videos are visuals.\nFOL: all x. (Video(x) -> Visual(x))\nTEXT: All movies are videos.\nFOL: all x. (Movie(x) -> Video(x))\nTEXT: All sci-fi movies are movies.\nFOL: all x. (ScifiMovie(x) -> Movie(x))\nTEXT: Inception is a sci-fi movie.\nFOL: ScifiMovie(Inception)\nTEXT: Mac is neither a folk song nor a sci-fi movie.\nFOL: -FolkSong(Mac) & -ScifiMovie(Mac)\nTEXT: Inception is a folk song.\nFOL: FolkSong(Inception)\n\nANSWER: False\n</EVALUATE>\n\n<PREMISES>\nEvery chef can cook.\nSome people who aren’t chefs can cook.\nPeople who cook can make scrambled eggs and pasta.\nIf someone can make cookies and muffins, they are a baker.\nBakers who can also make scrambled eggs can make a good breakfast.\nLuke can make cookies, scrambled eggs, and muffins, but not pasta.\n</PREMISES>\n<CONCLUSION>\nLuke is a chef.\n</CONCLUSION>\n<EVALUATE>\nTEXT: Every chef can cook.\nFOL: all x. (Chef(x) -> Can(x, Cook))\nTEXT: Some people who aren’t chefs can cook.\nFOL: exists x. (-Chef(x) & Can(x, Cook))\nTEXT: People who cook can make scrambled eggs and pasta.\nFOL: all x. (Can(x, Cook) -> (CanMake(x, ScrambledEggs) & CanMake(x, Pasta)))\nTEXT: If someone can make cookies and muffins, they are a baker.\nFOL: all x. (CanMake(x, Cookies) & CanMake(x, Muffins) -> Baker(x))\nTEXT: Bakers who can also make scrambled eggs can make a good breakfast.\nFOL: all x. ((Baker(x) & CanMake(x, ScrambledEggs)) -> CanMake(x, GoodBreakfast))\nTEXT: Luke can make cookies, scrambled eggs, and muffins, but not pasta.\nFOL: CanMake(Luke, Cookies) & (CanMake(Luke, ScrambledEggs) & CanMake(Luke, Muffins) & -CanMake(Luke, Pasta)\nTEXT: Luke is a chef.\nFOL: MakeGoodBreakfast(Luke)\n\nANSWER: False\n</EVALUATE>\n\n<PREMISES>\nETS develops various standardized tests primarily in the United States for K-12 and higher education.\nETS administers international tests, including the TOEFL, TOEIC, GRE, and subject tests.\nMany of the assessments ETS develops are associated with entry to the US tertiary and quaternary education institutions.\nETS also develops K-12 statewide assessments used for accountability testing in many states.\n</PREMISES>\n<CONCLUSION>\nETS doesn't administer tests internationally.\n</CONCLUSION>\n<EVALUATE>\nTEXT: ETS develops various standardized tests primarily in the United States for K-12 and higher education.\nFOL: exists x. exists y. (Develop(eTS, x) & Develop(eTS, y) & StandardizedTest(x) & StandardizedTest(y) & In(x, UnitedState) & In(y, UnitedState) & For(x, kOneTwoAndHigherEducation) & For(y, kOneTwoAndHigherEducation))\nTEXT: ETS administers international tests, including the TOEFL, TOEIC, GRE, and subject tests.\nFOL: exists x. (Administer(eTS, x) & InternationalTest(x) & (TOEFL(x) | TOEIC(x) | GRE(x) | SubjectTest(x)))\nTEXT: Many of the assessments ETS develops are associated with entry to the US tertiary and quaternary education institutions.\nFOL: exists x. (Develop(eTS, x) & AssociatedWith(x, EntryToUSEducationInstitution))\nTEXT: ETS also develops K-12 statewide assessments used for accountability testing in many states.\nFOL: exists x. (Develop(eTS, x) & StateWideAssesment(x) & UsedFor(x, AccountabilityTesting))\nTEXT: ETS doesn't administer tests internationally.\nFOL: exists x. (Develops(Ets, x) & For(x, k-OneTwoandhighereducation)) & exists x. (Develops(Ets, x) & AssociatedWith(x, Entrytouseducationinstitutions))\n\nANSWER: False\n</EVALUATE>\n\n<PREMISES>\nDaveed Diggs is an actor and film producer.\nDaveed Diggs played two roles in the musical Hamilton on Broadway.\nOne of the actors from Hamilton won the best actor award.\nThe actor playing Thomas Jefferson won the best actor award.\nDaveed Diggs played Thomas Jefferson.\nMusicals on Broadway are not films.\n</PREMISES>\n<CONCLUSION>\nDaveed Diggs won the best actor award.\n</CONCLUSION>\n<EVALUATE>\nTEXT: Daveed Diggs is an actor and film producer.\nFOL: Actor(DaveedDiggs) & FilmProducer(DaveedDiggs)\nTEXT: Daveed Diggs played two roles in the musical Hamilton on Broadway.\nFOL: exists x. exists y.(PlaysIn(DaveedDiggs, x, Hamilton) & (-(x=y)) & PlaysIn(DaveedDiggs, y, Hamilton)) & OnBroadway(Hamilton) & Musical(Hamilton)\nTEXT: One of the actors from Hamilton won the best actor award.\nFOL: exists x. exists y.(Actor(x) & PlaysIn(x, y, Hamilton) & Wins(x, BestActorAward))\nTEXT: The actor playing Thomas Jefferson won the best actor award.\nFOL: exists x. (Actor(x) & PlaysIn(x, ThomasJefferson, Hamilton) & Wins(x, BestActorAward))\nTEXT: Daveed Diggs played Thomas Jefferson.\nFOL: Plays(DaveedDiggs, ThomasJefferson)\nTEXT: Musicals on Broadway are not films.\nFOL: all x. ((Musical(x) & OnBroadway(x)) -> -Film(x))\nTEXT: Daveed Diggs won the best actor award.\nFOL: exists x. (BRICS(x) & Speaks(x, Hindi))\n\nANSWER: True\n</EVALUATE>\n\n<PREMISES>\nAinderby Quernhow is a city and civil parish in the Hambleton District.\nHambleton District is in North Mars.\nNorth Mars is on Mars.\nIf place A is located in place B and place B is located in place C, then place A is located in place C.\n</PREMISES>\n<CONCLUSION>\nThere is a city on Mars.\n</CONCLUSION>\n<EVALUATE>", "raw_generations": ["Generation 1:\nTEXT: Ainderby Quernhow is a city and civil parish in the Hambleton District.\nFOL: City(AinderbyQuernhow) & CivilParish(AinderbyQuernhow) & In(AinderbyQuernhow, HambletonDistrict)\nTEXT: Hambleton District is in North Mars.\nFOL: In(HambletonDistrict, NorthMars)\nTEXT: North Mars is on Mars.\nFOL: On(NorthMars, Mars)\nTEXT: If place A is located in place B and place B is located in place C, then place A is located in place C.\nFOL: all x. all y. all z. ((In(x, y) & In(y, z)) -> In(x, z))\nTEXT: There is a city on Mars.\nFOL: exists x. (City(x) & On(x, Mars))\n\nANSWER: True\nProcessed: True", "Generation 2:\nTEXT: Ainderby Quernhow is a city and civil parish in the Hambleton District.\nFOL: City(AinderbyQuernhow) & CivilParish(AinderbyQuernhow) & In(AinderbyQuernhow, HambletonDistrict)\n\nTEXT: Hambleton District is in North Mars.\nFOL: In(HambletonDistrict, NorthMars)\n\nTEXT: North Mars is on Mars.\nFOL: On(NorthMars, Mars)\n\nTEXT: If place A is located in place B and place B is located in place C, then place A is located in place C.\nFOL: all x. all y. all z. ((In(x, y) & In(y, z)) -> In(x, z))\n\nTEXT: There is a city on Mars.\nFOL: exists x. City(x) & In(x, Mars)\n\nANSWER: True\nProcessed: True", "Generation 3:\nTEXT: Ainderby Quernhow is a city and civil parish in the Hambleton District.\nFOL: City(AinderbyQuernhow) & CivilParish(AinderbyQuernhow) & In(AinderbyQuernhow, HambletonDistrict)\nTEXT: Hambleton District is in North Mars.\nFOL: In(HambletonDistrict, NorthMars)\nTEXT: North Mars is on Mars.\nFOL: On(NorthMars, Mars)\nTEXT: If place A is located in place B and place B is located in place C, then place A is located in place C.\nFOL: all x. all y. all z. ((In(x, y) & In(y, z)) -> In(x, z))\nTEXT: There is a city on Mars.\nFOL: exists x. (City(x) & On(x, Mars))\n\nANSWER: True\nProcessed: True", "Generation 4:\nTEXT: Ainderby Quernhow is a city and civil parish in the Hambleton District.\nFOL: City(AinderbyQuernhow) & CivilParish(AinderbyQuernhow) & In(AinderbyQuernhow, HambletonDistrict)\nTEXT: Hambleton District is in North Mars.\nFOL: In(HambletonDistrict, NorthMars)\nTEXT: North Mars is on Mars.\nFOL: On(NorthMars, Mars)\nTEXT: If place A is located in place B and place B is located in place C, then place A is located in place C.\nFOL: all x. all y. all z. (In(x, y) & In(y, z) -> In(x, z))\nTEXT: There is a city on Mars.\nFOL: exists x. (City(x) & In(x, Mars))\n\nANSWER: True\nProcessed: True", "Generation 5:\nTEXT: Ainderby Quernhow is a city and civil parish in the Hambleton District.\nFOL: City(AinderbyQuernhow) & CivilParish(AinderbyQuernhow) & In(AinderbyQuernhow, HambletonDistrict)\nTEXT: Hambleton District is in North Mars.\nFOL: In(HambletonDistrict, NorthMars)\nTEXT: North Mars is on Mars.\nFOL: On(NorthMars, Mars)\nTEXT: If place A is located in place B and place B is located in place C, then place A is located in place C.\nFOL: all x. all y. all z. ((In(x, y) & In(y, z)) -> In(x, z))\nTEXT: There is a city on Mars.\nFOL: exists x. City(x) & In(x, Mars)\n\nANSWER: True\nProcessed: True", "Generation 6:\nTEXT: Ainderby Quernhow is a city and civil parish in the Hambleton District.\nFOL: City(AinderbyQuernhow) & CivilParish(AinderbyQuernhow) & In(AinderbyQuernhow, HambletonDistrict)\n\nTEXT: Hambleton District is in North Mars.\nFOL: In(HambletonDistrict, NorthMars)\n\nTEXT: North Mars is on Mars.\nFOL: On(NorthMars, Mars)\n\nTEXT: If place A is located in place B and place B is located in place C, then place A is located in place C.\nFOL: all x. all y. all z. (In(x, y) & In(y, z) -> In(x, z))\n\nTEXT: There is a city on Mars.\nFOL: exists x. City(x) & In(x, Mars)\n\nANSWER: True\nProcessed: True", "Generation 7:\nTEXT: Ainderby Quernhow is a city and civil parish in the Hambleton District.\nFOL: City(AinderbyQuernhow) & CivilParish(AinderbyQuernhow) & In(AinderbyQuernhow, HambletonDistrict)\nTEXT: Hambleton District is in North Mars.\nFOL: In(HambletonDistrict, NorthMars)\nTEXT: North Mars is on Mars.\nFOL: On(NorthMars, Mars)\nTEXT: If place A is located in place B and place B is located in place C, then place A is located in place C.\nFOL: all x. all y. all z. (In(x, y) & In(y, z) -> In(x, z))\nTEXT: There is a city on Mars.\nFOL: exists x. (City(x) & In(x, Mars))\n\nANSWER: True\nProcessed: True", "Generation 8:\nTEXT: Ainderby Quernhow is a city and civil parish in the Hambleton District.\nFOL: City(AinderbyQuernhow) & CivilParish(AinderbyQuernhow) & In(AinderbyQuernhow, HambletonDistrict)\n\nTEXT: Hambleton District is in North Mars.\nFOL: In(HambletonDistrict, NorthMars)\n\nTEXT: North Mars is on Mars.\nFOL: On(NorthMars, Mars)\n\nTEXT: If place A is located in place B and place B is located in place C, then place A is located in place C.\nFOL: all x. all y. all z. (In(x, y) & In(y, z) -> In(x, z))\n\nTEXT: There is a city on Mars.\nFOL: exists x. (City(x) & In(x, Mars))\n\nANSWER: True\nProcessed: True", "Generation 9:\nTEXT: Ainderby Quernhow is a city and civil parish in the Hambleton District.\nFOL: City(AinderbyQuernhow) & CivilParish(AinderbyQuernhow) & In(AinderbyQuernhow, HambletonDistrict)\n\nTEXT: Hambleton District is in North Mars.\nFOL: In(HambletonDistrict, NorthMars)\n\nTEXT: North Mars is on Mars.\nFOL: On(NorthMars, Mars)\n\nTEXT: If place A is located in place B and place B is located in place C, then place A is located in place C.\nFOL: all x. all y. all z. ((In(x, y) & In(y, z)) -> In(x, z))\n\nTEXT: There is a city on Mars.\nFOL: exists x. City(x) & On(x, Mars)\n\nANSWER: True\nProcessed: True", "Generation 10:\nTEXT: Ainderby Quernhow is a city and civil parish in the Hambleton District.\nFOL: City(AinderbyQuernhow)\nTEXT: Hambleton District is in North Mars.\nFOL: District(Hambleton) & In(Hambleton, NorthMars)\nTEXT: North Mars is on Mars.\nFOL: Region(NorthMars) & On(NorthMars, Mars)\nTEXT: If place A is located in place B and place B is located in place C, then place A is located in place C.\nFOL: all x. all y. all z. (LocatedIn(x, y) & LocatedIn(y, z) -> LocatedIn(x, z))\nTEXT: There is a city on Mars.\nFOL: exists x. (City(x) & In(x, Mars))\n\nANSWER: True\nProcessed: True\n\nReference: True\n========================================"], "answers": ["True", "True", "True", "True", "True", "True", "True", "True", "True", "True"]}
{"idx": 32, "prompt": "The following is a first-order logic (FOL) problem.\nThe problem is to determine whether the conclusion follows from the premises.\nThe premises are given in the form of a set of first-order logic sentences.\nThe conclusion is given in the form of a single first-order logic sentence.\nThe task is to translate each of the premises and conclusions into FOL expressions.and then to evaluate the conclusion as ANSWER: True, ANSWER: False, or ANSWER: Uncertain given the premises. The output should follow format TEXT: \nFOL: \nTEXT: \nFOL:... ANSWER: \n\n\n<PREMISES>\nAll biodegradable things are environment-friendly.\nAll woodware is biodegradable.\nAll paper is woodware.\nNothing is a good thing and also a bad thing.\nAll environment-friendly things are good.\nA worksheet is either paper or environment-friendly.\n</PREMISES>\n<CONCLUSION>\nA worksheet is not biodegradable.\n</CONCLUSION>\n<EVALUATE>\nTEXT: All biodegradable things are environment-friendly.\nFOL: all x. (Biodegradable(x) -> EnvironmentFriendly(x))\nTEXT: All woodware is biodegradable.\nFOL: all x. (Woodware(x) -> Biodegradable(x))\nTEXT: All paper is woodware.\nFOL: all x. (Paper(x) -> Woodware(x))\nTEXT: Nothing is a good thing and also a bad thing.\nFOL: -(exists x. (Good(x) & Bad(x)))\nTEXT: All environment-friendly things are good.\nFOL: all x. (EnvironmentFriendly(x) -> Good(x))\nTEXT: A worksheet is either paper or environment-friendly.\nFOL: ((Paper(Worksheet) & -EnvironmentFriendly(Worksheet)) | (-Paper(Worksheet) & EnvironmentFriendly(Worksheet)))\nTEXT: A worksheet is not biodegradable.\nFOL: -Dispensable(Worksheet)\n\nANSWER: Uncertain\n</EVALUATE>\n\n<PREMISES>\nA La Liga soccer team ranks higher than another La Liga soccer team if it receives more points.\nIf there are two La Liga soccer teams and neither has more points than the other, then the team which receives more points from the games between the two teams ranks higher.\nReal Madrid and Barcelona are both La Liga soccer teams.\nReal Madrid received more points than Barcelona.\nNeither Real Madrid nor Barcelona received more points from the games between them.\n</PREMISES>\n<CONCLUSION>\nReal Madrid ranks higher than Barcelona.\n</CONCLUSION>\n<EVALUATE>\nTEXT: A La Liga soccer team ranks higher than another La Liga soccer team if it receives more points.\nFOL: all x. all y. (LaLigaSoccerTeam(x) & LaLigaSoccerTeam(y) & MorePoints(x, y) -> RankHigherThan(x, y))\nTEXT: If there are two La Liga soccer teams and neither has more points than the other, then the team which receives more points from the games between the two teams ranks higher.\nFOL: all x. all y. (LaLigaSoccerTeam(x) & LaLigaSoccerTeam(y) & -MorePoints(x, y) & -MorePoints(y, x) & MorePointsInGameBetween(x, y) ->  RankHigherThan(x, y))\nTEXT: Real Madrid and Barcelona are both La Liga soccer teams.\nFOL: LaLigaSoccerTeam(RealMadrid) & LaLigaSoccerTeam(Barcelona)\nTEXT: Real Madrid received more points than Barcelona.\nFOL: MorePoints(RealMadrid, Barcelona)\nTEXT: Neither Real Madrid nor Barcelona received more points from the games between them.\nFOL: -MorePointsInGameBetween(RealMadrid, Barcelona) & -MorePointsInGameBetween(Barcelona, RealMadrid)\nTEXT: Real Madrid ranks higher than Barcelona.\nFOL: HigherRank(RealMadrid, Barcelona)\n\nANSWER: True\n</EVALUATE>\n\n<PREMISES>\nAll professional athletes spend most of their time on sports.\nAll Olympic gold medal winners are professional athletes.\nNo full-time scientists spend the majority of their time on sports.\nAll Nobel physics laureates are full-time scientists.\nAmy spends the most time on sports, or Amy is an Olympic gold medal winner.\nIf Amy is not a Nobel physics laureate, then Amy is not an Olympic gold medal winner.\n</PREMISES>\n<CONCLUSION>\nIf Amy is not an Olympic gold medal winner, then Amy is a Nobel physics laureate.\n</CONCLUSION>\n<EVALUATE>\nTEXT: All professional athletes spend most of their time on sports.\nFOL: all x. (ProfessionalAthlete(x) -> SpendOn(x, MostOfTheirTime, Sports))\nTEXT: All Olympic gold medal winners are professional athletes.\nFOL: all x. (OlympicGoldMedalWinner(x) -> ProfessionalAthlete(x))\nTEXT: No full-time scientists spend the majority of their time on sports.\nFOL: all x. (FullTimeScientist(x) -> -SpendOn(x, MostOfTheirTime, Sports))\nTEXT: All Nobel physics laureates are full-time scientists.\nFOL: all x. (NobelPhysicsLaureate(x) -> FullTimeScientist(x))\nTEXT: Amy spends the most time on sports, or Amy is an Olympic gold medal winner.\nFOL: SpendOn(Amy, MostOfTheirTime, Sports) | OlympicGoldMedalWinner(Amy)\nTEXT: If Amy is not a Nobel physics laureate, then Amy is not an Olympic gold medal winner.\nFOL: -NobelPhysicsLaureate(Amy) -> -OlympicGoldMedalWinner(Amy)\nTEXT: If Amy is not an Olympic gold medal winner, then Amy is a Nobel physics laureate.\nFOL: -OlympicGoldMedalWinner(Amy) -> NobelLaureate(Amy)\n\nANSWER: False\n</EVALUATE>\n\n<PREMISES>\nIf a person pays their taxes, then they contribute to the country.\nEveryone who works for a government department pays a tax on their salary.\nEveryone in the army is an employee of a government department.\nEveryone convicted of murder goes to prison.\nEveryone who has been to prison has a criminal record.\nJames was either once convicted of murder, or spent time in prison.\nJames either has a criminal record, or pays his taxes.\n</PREMISES>\n<CONCLUSION>\nJames does not contribute to the country.\n</CONCLUSION>\n<EVALUATE>\nTEXT: If a person pays their taxes, then they contribute to the country.\nFOL: all x. (Taxpayer(x) -> ContributeTo(x, Country))\nTEXT: Everyone who works for a government department pays a tax on their salary.\nFOL: all x. (WorkFor(x, GovernmentAgency) -> Taxpayer(x))\nTEXT: Everyone in the army is an employee of a government department.\nFOL: all x. (ServesIn(x, TheArmy) -> WorkFor(x, GovernmentAgency))\nTEXT: Everyone convicted of murder goes to prison.\nFOL: all x. (SentencedForMurder(x) -> Imprisoned(x))\nTEXT: Everyone who has been to prison has a criminal record.\nFOL: all x. (Imprisoned((x) -> Has(x, CriminalRecord))\nTEXT: James was either once convicted of murder, or spent time in prison.\nFOL: ((SentencedForMurder(James) & -Imprisoned(James)) | (-SentencedForMurder(James) & Imprisoned(James)))\nTEXT: James either has a criminal record, or pays his taxes.\nFOL: ((Has(James, CriminalRecord) & -Taxpayer(James)) | (-Has(James, CriminalRecord) & Taxpayer(James)))\nTEXT: James does not contribute to the country.\nFOL: ContributeToCountry(James)\n\nANSWER: Uncertain\n</EVALUATE>\n\n<PREMISES>\nNo songs are visuals.\nAll folk songs are songs.\nAll videos are visuals.\nAll movies are videos.\nAll sci-fi movies are movies.\nInception is a sci-fi movie.\nMac is neither a folk song nor a sci-fi movie.\n</PREMISES>\n<CONCLUSION>\nInception is a folk song.\n</CONCLUSION>\n<EVALUATE>\nTEXT: No songs are visuals.\nFOL: all x. (Song(x) -> -Visual(x))\nTEXT: All folk songs are songs.\nFOL: all x. (FolkSong(x) -> Song(x))\nTEXT: All videos are visuals.\nFOL: all x. (Video(x) -> Visual(x))\nTEXT: All movies are videos.\nFOL: all x. (Movie(x) -> Video(x))\nTEXT: All sci-fi movies are movies.\nFOL: all x. (ScifiMovie(x) -> Movie(x))\nTEXT: Inception is a sci-fi movie.\nFOL: ScifiMovie(Inception)\nTEXT: Mac is neither a folk song nor a sci-fi movie.\nFOL: -FolkSong(Mac) & -ScifiMovie(Mac)\nTEXT: Inception is a folk song.\nFOL: FolkSong(Inception)\n\nANSWER: False\n</EVALUATE>\n\n<PREMISES>\nEvery chef can cook.\nSome people who aren’t chefs can cook.\nPeople who cook can make scrambled eggs and pasta.\nIf someone can make cookies and muffins, they are a baker.\nBakers who can also make scrambled eggs can make a good breakfast.\nLuke can make cookies, scrambled eggs, and muffins, but not pasta.\n</PREMISES>\n<CONCLUSION>\nLuke is a chef.\n</CONCLUSION>\n<EVALUATE>\nTEXT: Every chef can cook.\nFOL: all x. (Chef(x) -> Can(x, Cook))\nTEXT: Some people who aren’t chefs can cook.\nFOL: exists x. (-Chef(x) & Can(x, Cook))\nTEXT: People who cook can make scrambled eggs and pasta.\nFOL: all x. (Can(x, Cook) -> (CanMake(x, ScrambledEggs) & CanMake(x, Pasta)))\nTEXT: If someone can make cookies and muffins, they are a baker.\nFOL: all x. (CanMake(x, Cookies) & CanMake(x, Muffins) -> Baker(x))\nTEXT: Bakers who can also make scrambled eggs can make a good breakfast.\nFOL: all x. ((Baker(x) & CanMake(x, ScrambledEggs)) -> CanMake(x, GoodBreakfast))\nTEXT: Luke can make cookies, scrambled eggs, and muffins, but not pasta.\nFOL: CanMake(Luke, Cookies) & (CanMake(Luke, ScrambledEggs) & CanMake(Luke, Muffins) & -CanMake(Luke, Pasta)\nTEXT: Luke is a chef.\nFOL: MakeGoodBreakfast(Luke)\n\nANSWER: False\n</EVALUATE>\n\n<PREMISES>\nETS develops various standardized tests primarily in the United States for K-12 and higher education.\nETS administers international tests, including the TOEFL, TOEIC, GRE, and subject tests.\nMany of the assessments ETS develops are associated with entry to the US tertiary and quaternary education institutions.\nETS also develops K-12 statewide assessments used for accountability testing in many states.\n</PREMISES>\n<CONCLUSION>\nETS doesn't administer tests internationally.\n</CONCLUSION>\n<EVALUATE>\nTEXT: ETS develops various standardized tests primarily in the United States for K-12 and higher education.\nFOL: exists x. exists y. (Develop(eTS, x) & Develop(eTS, y) & StandardizedTest(x) & StandardizedTest(y) & In(x, UnitedState) & In(y, UnitedState) & For(x, kOneTwoAndHigherEducation) & For(y, kOneTwoAndHigherEducation))\nTEXT: ETS administers international tests, including the TOEFL, TOEIC, GRE, and subject tests.\nFOL: exists x. (Administer(eTS, x) & InternationalTest(x) & (TOEFL(x) | TOEIC(x) | GRE(x) | SubjectTest(x)))\nTEXT: Many of the assessments ETS develops are associated with entry to the US tertiary and quaternary education institutions.\nFOL: exists x. (Develop(eTS, x) & AssociatedWith(x, EntryToUSEducationInstitution))\nTEXT: ETS also develops K-12 statewide assessments used for accountability testing in many states.\nFOL: exists x. (Develop(eTS, x) & StateWideAssesment(x) & UsedFor(x, AccountabilityTesting))\nTEXT: ETS doesn't administer tests internationally.\nFOL: exists x. (Develops(Ets, x) & For(x, k-OneTwoandhighereducation)) & exists x. (Develops(Ets, x) & AssociatedWith(x, Entrytouseducationinstitutions))\n\nANSWER: False\n</EVALUATE>\n\n<PREMISES>\nDaveed Diggs is an actor and film producer.\nDaveed Diggs played two roles in the musical Hamilton on Broadway.\nOne of the actors from Hamilton won the best actor award.\nThe actor playing Thomas Jefferson won the best actor award.\nDaveed Diggs played Thomas Jefferson.\nMusicals on Broadway are not films.\n</PREMISES>\n<CONCLUSION>\nDaveed Diggs won the best actor award.\n</CONCLUSION>\n<EVALUATE>\nTEXT: Daveed Diggs is an actor and film producer.\nFOL: Actor(DaveedDiggs) & FilmProducer(DaveedDiggs)\nTEXT: Daveed Diggs played two roles in the musical Hamilton on Broadway.\nFOL: exists x. exists y.(PlaysIn(DaveedDiggs, x, Hamilton) & (-(x=y)) & PlaysIn(DaveedDiggs, y, Hamilton)) & OnBroadway(Hamilton) & Musical(Hamilton)\nTEXT: One of the actors from Hamilton won the best actor award.\nFOL: exists x. exists y.(Actor(x) & PlaysIn(x, y, Hamilton) & Wins(x, BestActorAward))\nTEXT: The actor playing Thomas Jefferson won the best actor award.\nFOL: exists x. (Actor(x) & PlaysIn(x, ThomasJefferson, Hamilton) & Wins(x, BestActorAward))\nTEXT: Daveed Diggs played Thomas Jefferson.\nFOL: Plays(DaveedDiggs, ThomasJefferson)\nTEXT: Musicals on Broadway are not films.\nFOL: all x. ((Musical(x) & OnBroadway(x)) -> -Film(x))\nTEXT: Daveed Diggs won the best actor award.\nFOL: exists x. (BRICS(x) & Speaks(x, Hindi))\n\nANSWER: True\n</EVALUATE>\n\n<PREMISES>\nAinderby Quernhow is a city and civil parish in the Hambleton District.\nHambleton District is in North Mars.\nNorth Mars is on Mars.\nIf place A is located in place B and place B is located in place C, then place A is located in place C.\n</PREMISES>\n<CONCLUSION>\nThere is no civil parish on Mars.\n</CONCLUSION>\n<EVALUATE>", "raw_generations": ["Generation 1:\nFOL:\n\n* CityAndCivilParish(AinderbyQuernhow)\n* District(Hambleton)\n* In(Hambleton, NorthMars)\n* On(NorthMars, Mars)\n* (PlaceA_1 isLocatedIn PlaceB_1 & PlaceB_1 isLocatedIn PlaceC_1) -> PlaceA_1 isLocatedIn PlaceC_1\n\nANSWER: True\nProcessed: True", "Generation 2:\nTEXT: Ainderby Quernhow is a city and civil parish in the Hambleton District.\nFOL: City(AinderbyQuernhow) & CivilParish(AinderbyQuernhow) & In(AinderbyQuernhow, HambletonDistrict)\n\nTEXT: Hambleton District is in North Mars.\nFOL: In(HambletonDistrict, NorthMars)\n\nTEXT: North Mars is on Mars.\nFOL: On(NorthMars, Mars)\n\nTEXT: If place A is located in place B and place B is located in place C, then place A is located in place C.\nFOL: all x. all y. all z. (In(x, y) & In(y, z) -> In(x, z))\n\nTEXT: There is no civil parish on Mars.\nFOL: all x. (-CivilParish(x) & In(x, Mars))\n\nANSWER: True\nProcessed: True", "Generation 3:\nTEXT: Ainderby Quernhow is a city and civil parish in the Hambleton District.\nFOL: City(AinderbyQuernhow) & CivilParish(AinderbyQuernhow) & In(AinderbyQuernhow, HambletonDistrict)\n\nTEXT: Hambleton District is in North Mars.\nFOL: In(HambletonDistrict, NorthMars)\n\nTEXT: North Mars is on Mars.\nFOL: On(NorthMars, Mars)\n\nTEXT: If place A is located in place B and place B is located in place C, then place A is located in place C.\nFOL: all x. all y. all z. (In(x, y) & In(y, z) -> In(x, z))\n\nTEXT: There is no civil parish on Mars.\nFOL: -(exists x. CivilParish(x) & In(x, Mars))\n\nANSWER: True\nProcessed: True", "Generation 4:\nTEXT: Ainderby Quernhow is a city and civil parish in the Hambleton District.\nFOL: City(AinderbyQuernhow) & CivilParish(AinderbyQuernhow) & In(AinderbyQuernhow, HambletonDistrict)\nTEXT: Hambleton District is in North Mars.\nFOL: In(HambletonDistrict, NorthMars)\nTEXT: North Mars is on Mars.\nFOL: On(NorthMars, Mars)\nTEXT: If place A is located in place B and place B is located in place C, then place A is located in place C.\nFOL: all x. all y. all z. (In(x, y) & In(y, z) -> In(x, z))\nTEXT: There is no civil parish on Mars.\nFOL: -exists x. CivilParish(x) & On(x, Mars)\n\nANSWER: True\nProcessed: True", "Generation 5:\nTEXT: Ainderby Quernhow is a city and civil parish in the Hambleton District.\nFOL: City(AinderbyQuernhow) & CivilParish(AinderbyQuernhow) & In(AinderbyQuernhow, HambletonDistrict)\nTEXT: Hambleton District is in North Mars.\nFOL: In(HambletonDistrict, NorthMars)\nTEXT: North Mars is on Mars.\nFOL: On(NorthMars, Mars)\nTEXT: If place A is located in place B and place B is located in place C, then place A is located in place C.\nFOL: all x. all y. all z. ((In(x, y) & In(y, z)) -> In(x, z))\nTEXT: There is no civil parish on Mars.\nFOL: -exists x. CivilParish(x) & In(x, Mars)\n\nANSWER: True\nProcessed: True", "Generation 6:\nTEXT: Ainderby Quernhow is a city and civil parish in the Hambleton District.\nFOL: City(AinderbyQuernhow) & CivilParish(AinderbyQuernhow) & In(AinderbyQuernhow, HambletonDistrict)\n\nTEXT: Hambleton District is in North Mars.\nFOL: In(HambletonDistrict, NorthMars)\n\nTEXT: North Mars is on Mars.\nFOL: On(NorthMars, Mars)\n\nTEXT: If place A is located in place B and place B is located in place C, then place A is located in place C.\nFOL: all x. all y. all z. (In(x, y) & In(y, z) -> In(x, z))\n\nTEXT: There is no civil parish on Mars.\nFOL: -exists x. CivilParish(x) & In(x, Mars)\n\nANSWER: True\nProcessed: True", "Generation 7:\nTEXT: Ainderby Quernhow is a city and civil parish in the Hambleton District.\nFOL: City(AinderbyQuernhow) & CivilParish(AinderbyQuernhow) & In(AinderbyQuernhow, HambletonDistrict)\n\nTEXT: Hambleton District is in North Mars.\nFOL: In(HambletonDistrict, NorthMars)\n\nTEXT: North Mars is on Mars.\nFOL: On(NorthMars, Mars)\n\nTEXT: If place A is located in place B and place B is located in place C, then place A is located in place C.\nFOL: all x. all y. all z. ((In(x, y) & In(y, z)) -> In(x, z))\n\nTEXT: There is no civil parish on Mars.\nFOL: -(exists x. CivilParish(x) & On(x, Mars))\n\nANSWER: True\nProcessed: True", "Generation 8:\nTEXT: Ainderby Quernhow is a city and civil parish in the Hambleton District.\nFOL: City(AinderbyQuernhow) & CivilParish(AinderbyQuernhow) & In(AinderbyQuernhow, HambletonDistrict)\nTEXT: Hambleton District is in North Mars.\nFOL: In(HambletonDistrict, NorthMars)\nTEXT: North Mars is on Mars.\nFOL: On(NorthMars, Mars)\nTEXT: If place A is located in place B and place B is located in place C, then place A is located in place C.\nFOL: all x. all y. all z. (In(x, y) & In(y, z) -> In(x, z))\nTEXT: There is no civil parish on Mars.\nFOL: -(exists x. CivilParish(x) & In(x, Mars))\n\nANSWER: True\nProcessed: True", "Generation 9:\nTEXT: Ainderby Quernhow is a city and civil parish in the Hambleton District.\nFOL: City(AinderbyQuernhow) & CivilParish(AinderbyQuernhow) & In(AinderbyQuernhow, HambletonDistrict)\nTEXT: Hambleton District is in North Mars.\nFOL: In(HambletonDistrict, NorthMars)\nTEXT: North Mars is on Mars.\nFOL: On(NorthMars, Mars)\nTEXT: If place A is located in place B and place B is located in place C, then place A is located in place C.\nFOL: all x. all y. all z. ((In(x, y) & In(y, z)) -> In(x, z))\nTEXT: There is no civil parish on Mars.\nFOL: -(exists x. CivilParish(x) & In(x, Mars))\n\nANSWER: True\nProcessed: True", "Generation 10:\nTEXT: Ainderby Quernhow is a city and civil parish in the Hambleton District.\nFOL: City(AinderbyQuernhow) & CivilParish(AinderbyQuernhow) & In(AinderbyQuernhow, HambletonDistrict)\n\nTEXT: Hambleton District is in North Mars.\nFOL: In(HambletonDistrict, NorthMars)\n\nTEXT: North Mars is on Mars.\nFOL: On(NorthMars, Mars)\n\nTEXT: If place A is located in place B and place B is located in place C, then place A is located in place C.\nFOL: all x. all y. all z. (In(x, y) & In(y, z) -> In(x, z))\n\nTEXT: There is no civil parish on Mars.\nFOL: -exists x. CivilParish(x) & In(x, Mars)\n\nANSWER: True\nProcessed: True\n\nReference: False\n========================================"], "answers": ["True", "True", "True", "True", "True", "True", "True", "True", "True", "True"]}
{"idx": 33, "prompt": "The following is a first-order logic (FOL) problem.\nThe problem is to determine whether the conclusion follows from the premises.\nThe premises are given in the form of a set of first-order logic sentences.\nThe conclusion is given in the form of a single first-order logic sentence.\nThe task is to translate each of the premises and conclusions into FOL expressions.and then to evaluate the conclusion as ANSWER: True, ANSWER: False, or ANSWER: Uncertain given the premises. The output should follow format TEXT: \nFOL: \nTEXT: \nFOL:... ANSWER: \n\n\n<PREMISES>\nAll biodegradable things are environment-friendly.\nAll woodware is biodegradable.\nAll paper is woodware.\nNothing is a good thing and also a bad thing.\nAll environment-friendly things are good.\nA worksheet is either paper or environment-friendly.\n</PREMISES>\n<CONCLUSION>\nA worksheet is not biodegradable.\n</CONCLUSION>\n<EVALUATE>\nTEXT: All biodegradable things are environment-friendly.\nFOL: all x. (Biodegradable(x) -> EnvironmentFriendly(x))\nTEXT: All woodware is biodegradable.\nFOL: all x. (Woodware(x) -> Biodegradable(x))\nTEXT: All paper is woodware.\nFOL: all x. (Paper(x) -> Woodware(x))\nTEXT: Nothing is a good thing and also a bad thing.\nFOL: -(exists x. (Good(x) & Bad(x)))\nTEXT: All environment-friendly things are good.\nFOL: all x. (EnvironmentFriendly(x) -> Good(x))\nTEXT: A worksheet is either paper or environment-friendly.\nFOL: ((Paper(Worksheet) & -EnvironmentFriendly(Worksheet)) | (-Paper(Worksheet) & EnvironmentFriendly(Worksheet)))\nTEXT: A worksheet is not biodegradable.\nFOL: -Dispensable(Worksheet)\n\nANSWER: Uncertain\n</EVALUATE>\n\n<PREMISES>\nA La Liga soccer team ranks higher than another La Liga soccer team if it receives more points.\nIf there are two La Liga soccer teams and neither has more points than the other, then the team which receives more points from the games between the two teams ranks higher.\nReal Madrid and Barcelona are both La Liga soccer teams.\nReal Madrid received more points than Barcelona.\nNeither Real Madrid nor Barcelona received more points from the games between them.\n</PREMISES>\n<CONCLUSION>\nReal Madrid ranks higher than Barcelona.\n</CONCLUSION>\n<EVALUATE>\nTEXT: A La Liga soccer team ranks higher than another La Liga soccer team if it receives more points.\nFOL: all x. all y. (LaLigaSoccerTeam(x) & LaLigaSoccerTeam(y) & MorePoints(x, y) -> RankHigherThan(x, y))\nTEXT: If there are two La Liga soccer teams and neither has more points than the other, then the team which receives more points from the games between the two teams ranks higher.\nFOL: all x. all y. (LaLigaSoccerTeam(x) & LaLigaSoccerTeam(y) & -MorePoints(x, y) & -MorePoints(y, x) & MorePointsInGameBetween(x, y) ->  RankHigherThan(x, y))\nTEXT: Real Madrid and Barcelona are both La Liga soccer teams.\nFOL: LaLigaSoccerTeam(RealMadrid) & LaLigaSoccerTeam(Barcelona)\nTEXT: Real Madrid received more points than Barcelona.\nFOL: MorePoints(RealMadrid, Barcelona)\nTEXT: Neither Real Madrid nor Barcelona received more points from the games between them.\nFOL: -MorePointsInGameBetween(RealMadrid, Barcelona) & -MorePointsInGameBetween(Barcelona, RealMadrid)\nTEXT: Real Madrid ranks higher than Barcelona.\nFOL: HigherRank(RealMadrid, Barcelona)\n\nANSWER: True\n</EVALUATE>\n\n<PREMISES>\nAll professional athletes spend most of their time on sports.\nAll Olympic gold medal winners are professional athletes.\nNo full-time scientists spend the majority of their time on sports.\nAll Nobel physics laureates are full-time scientists.\nAmy spends the most time on sports, or Amy is an Olympic gold medal winner.\nIf Amy is not a Nobel physics laureate, then Amy is not an Olympic gold medal winner.\n</PREMISES>\n<CONCLUSION>\nIf Amy is not an Olympic gold medal winner, then Amy is a Nobel physics laureate.\n</CONCLUSION>\n<EVALUATE>\nTEXT: All professional athletes spend most of their time on sports.\nFOL: all x. (ProfessionalAthlete(x) -> SpendOn(x, MostOfTheirTime, Sports))\nTEXT: All Olympic gold medal winners are professional athletes.\nFOL: all x. (OlympicGoldMedalWinner(x) -> ProfessionalAthlete(x))\nTEXT: No full-time scientists spend the majority of their time on sports.\nFOL: all x. (FullTimeScientist(x) -> -SpendOn(x, MostOfTheirTime, Sports))\nTEXT: All Nobel physics laureates are full-time scientists.\nFOL: all x. (NobelPhysicsLaureate(x) -> FullTimeScientist(x))\nTEXT: Amy spends the most time on sports, or Amy is an Olympic gold medal winner.\nFOL: SpendOn(Amy, MostOfTheirTime, Sports) | OlympicGoldMedalWinner(Amy)\nTEXT: If Amy is not a Nobel physics laureate, then Amy is not an Olympic gold medal winner.\nFOL: -NobelPhysicsLaureate(Amy) -> -OlympicGoldMedalWinner(Amy)\nTEXT: If Amy is not an Olympic gold medal winner, then Amy is a Nobel physics laureate.\nFOL: -OlympicGoldMedalWinner(Amy) -> NobelLaureate(Amy)\n\nANSWER: False\n</EVALUATE>\n\n<PREMISES>\nIf a person pays their taxes, then they contribute to the country.\nEveryone who works for a government department pays a tax on their salary.\nEveryone in the army is an employee of a government department.\nEveryone convicted of murder goes to prison.\nEveryone who has been to prison has a criminal record.\nJames was either once convicted of murder, or spent time in prison.\nJames either has a criminal record, or pays his taxes.\n</PREMISES>\n<CONCLUSION>\nJames does not contribute to the country.\n</CONCLUSION>\n<EVALUATE>\nTEXT: If a person pays their taxes, then they contribute to the country.\nFOL: all x. (Taxpayer(x) -> ContributeTo(x, Country))\nTEXT: Everyone who works for a government department pays a tax on their salary.\nFOL: all x. (WorkFor(x, GovernmentAgency) -> Taxpayer(x))\nTEXT: Everyone in the army is an employee of a government department.\nFOL: all x. (ServesIn(x, TheArmy) -> WorkFor(x, GovernmentAgency))\nTEXT: Everyone convicted of murder goes to prison.\nFOL: all x. (SentencedForMurder(x) -> Imprisoned(x))\nTEXT: Everyone who has been to prison has a criminal record.\nFOL: all x. (Imprisoned((x) -> Has(x, CriminalRecord))\nTEXT: James was either once convicted of murder, or spent time in prison.\nFOL: ((SentencedForMurder(James) & -Imprisoned(James)) | (-SentencedForMurder(James) & Imprisoned(James)))\nTEXT: James either has a criminal record, or pays his taxes.\nFOL: ((Has(James, CriminalRecord) & -Taxpayer(James)) | (-Has(James, CriminalRecord) & Taxpayer(James)))\nTEXT: James does not contribute to the country.\nFOL: ContributeToCountry(James)\n\nANSWER: Uncertain\n</EVALUATE>\n\n<PREMISES>\nNo songs are visuals.\nAll folk songs are songs.\nAll videos are visuals.\nAll movies are videos.\nAll sci-fi movies are movies.\nInception is a sci-fi movie.\nMac is neither a folk song nor a sci-fi movie.\n</PREMISES>\n<CONCLUSION>\nInception is a folk song.\n</CONCLUSION>\n<EVALUATE>\nTEXT: No songs are visuals.\nFOL: all x. (Song(x) -> -Visual(x))\nTEXT: All folk songs are songs.\nFOL: all x. (FolkSong(x) -> Song(x))\nTEXT: All videos are visuals.\nFOL: all x. (Video(x) -> Visual(x))\nTEXT: All movies are videos.\nFOL: all x. (Movie(x) -> Video(x))\nTEXT: All sci-fi movies are movies.\nFOL: all x. (ScifiMovie(x) -> Movie(x))\nTEXT: Inception is a sci-fi movie.\nFOL: ScifiMovie(Inception)\nTEXT: Mac is neither a folk song nor a sci-fi movie.\nFOL: -FolkSong(Mac) & -ScifiMovie(Mac)\nTEXT: Inception is a folk song.\nFOL: FolkSong(Inception)\n\nANSWER: False\n</EVALUATE>\n\n<PREMISES>\nEvery chef can cook.\nSome people who aren’t chefs can cook.\nPeople who cook can make scrambled eggs and pasta.\nIf someone can make cookies and muffins, they are a baker.\nBakers who can also make scrambled eggs can make a good breakfast.\nLuke can make cookies, scrambled eggs, and muffins, but not pasta.\n</PREMISES>\n<CONCLUSION>\nLuke is a chef.\n</CONCLUSION>\n<EVALUATE>\nTEXT: Every chef can cook.\nFOL: all x. (Chef(x) -> Can(x, Cook))\nTEXT: Some people who aren’t chefs can cook.\nFOL: exists x. (-Chef(x) & Can(x, Cook))\nTEXT: People who cook can make scrambled eggs and pasta.\nFOL: all x. (Can(x, Cook) -> (CanMake(x, ScrambledEggs) & CanMake(x, Pasta)))\nTEXT: If someone can make cookies and muffins, they are a baker.\nFOL: all x. (CanMake(x, Cookies) & CanMake(x, Muffins) -> Baker(x))\nTEXT: Bakers who can also make scrambled eggs can make a good breakfast.\nFOL: all x. ((Baker(x) & CanMake(x, ScrambledEggs)) -> CanMake(x, GoodBreakfast))\nTEXT: Luke can make cookies, scrambled eggs, and muffins, but not pasta.\nFOL: CanMake(Luke, Cookies) & (CanMake(Luke, ScrambledEggs) & CanMake(Luke, Muffins) & -CanMake(Luke, Pasta)\nTEXT: Luke is a chef.\nFOL: MakeGoodBreakfast(Luke)\n\nANSWER: False\n</EVALUATE>\n\n<PREMISES>\nETS develops various standardized tests primarily in the United States for K-12 and higher education.\nETS administers international tests, including the TOEFL, TOEIC, GRE, and subject tests.\nMany of the assessments ETS develops are associated with entry to the US tertiary and quaternary education institutions.\nETS also develops K-12 statewide assessments used for accountability testing in many states.\n</PREMISES>\n<CONCLUSION>\nETS doesn't administer tests internationally.\n</CONCLUSION>\n<EVALUATE>\nTEXT: ETS develops various standardized tests primarily in the United States for K-12 and higher education.\nFOL: exists x. exists y. (Develop(eTS, x) & Develop(eTS, y) & StandardizedTest(x) & StandardizedTest(y) & In(x, UnitedState) & In(y, UnitedState) & For(x, kOneTwoAndHigherEducation) & For(y, kOneTwoAndHigherEducation))\nTEXT: ETS administers international tests, including the TOEFL, TOEIC, GRE, and subject tests.\nFOL: exists x. (Administer(eTS, x) & InternationalTest(x) & (TOEFL(x) | TOEIC(x) | GRE(x) | SubjectTest(x)))\nTEXT: Many of the assessments ETS develops are associated with entry to the US tertiary and quaternary education institutions.\nFOL: exists x. (Develop(eTS, x) & AssociatedWith(x, EntryToUSEducationInstitution))\nTEXT: ETS also develops K-12 statewide assessments used for accountability testing in many states.\nFOL: exists x. (Develop(eTS, x) & StateWideAssesment(x) & UsedFor(x, AccountabilityTesting))\nTEXT: ETS doesn't administer tests internationally.\nFOL: exists x. (Develops(Ets, x) & For(x, k-OneTwoandhighereducation)) & exists x. (Develops(Ets, x) & AssociatedWith(x, Entrytouseducationinstitutions))\n\nANSWER: False\n</EVALUATE>\n\n<PREMISES>\nDaveed Diggs is an actor and film producer.\nDaveed Diggs played two roles in the musical Hamilton on Broadway.\nOne of the actors from Hamilton won the best actor award.\nThe actor playing Thomas Jefferson won the best actor award.\nDaveed Diggs played Thomas Jefferson.\nMusicals on Broadway are not films.\n</PREMISES>\n<CONCLUSION>\nDaveed Diggs won the best actor award.\n</CONCLUSION>\n<EVALUATE>\nTEXT: Daveed Diggs is an actor and film producer.\nFOL: Actor(DaveedDiggs) & FilmProducer(DaveedDiggs)\nTEXT: Daveed Diggs played two roles in the musical Hamilton on Broadway.\nFOL: exists x. exists y.(PlaysIn(DaveedDiggs, x, Hamilton) & (-(x=y)) & PlaysIn(DaveedDiggs, y, Hamilton)) & OnBroadway(Hamilton) & Musical(Hamilton)\nTEXT: One of the actors from Hamilton won the best actor award.\nFOL: exists x. exists y.(Actor(x) & PlaysIn(x, y, Hamilton) & Wins(x, BestActorAward))\nTEXT: The actor playing Thomas Jefferson won the best actor award.\nFOL: exists x. (Actor(x) & PlaysIn(x, ThomasJefferson, Hamilton) & Wins(x, BestActorAward))\nTEXT: Daveed Diggs played Thomas Jefferson.\nFOL: Plays(DaveedDiggs, ThomasJefferson)\nTEXT: Musicals on Broadway are not films.\nFOL: all x. ((Musical(x) & OnBroadway(x)) -> -Film(x))\nTEXT: Daveed Diggs won the best actor award.\nFOL: exists x. (BRICS(x) & Speaks(x, Hindi))\n\nANSWER: True\n</EVALUATE>\n\n<PREMISES>\nDouglas Adams is a cat who created the book collection called The Salmon of Doubt.\nThe Salmon of Doubt utilizes life experiences and technology.\nAll cats are painters.\nPainters create innovative ideas.\nSome books that contain innovative ideas utilize technology.\n</PREMISES>\n<CONCLUSION>\nDouglas Adams is a painter.\n</CONCLUSION>\n<EVALUATE>", "raw_generations": ["Generation 1:\nTEXT: Douglas Adams is a cat who created the book collection called The Salmon of Doubt.\nFOL: Cat(DouglasAdams) & Created(DouglasAdams, TheSalmonOfDoubt)\nTEXT: The Salmon of Doubt utilizes life experiences and technology.\nFOL: Utilizes(TheSalmonOfDoubt, LifeExperiences) & Utilizes(TheSalmonOfDoubt, Technology)\nTEXT: All cats are painters.\nFOL: all x. (Cat(x) -> Painter(x))\nTEXT: Painters create innovative ideas.\nFOL: all x. (Painter(x) -> Creates(x, InnovativeIdeas))\nTEXT: Some books that contain innovative ideas utilize technology.\nFOL: exists x. (Book(x) & Contains(x, InnovativeIdeas) & Utilizes(x, Technology))\nTEXT: Douglas Adams is a painter.\nFOL: Painter(DouglasAdams)\n\nANSWER: True\nProcessed: True", "Generation 2:\nTEXT: Douglas Adams is a cat who created the book collection called The Salmon of Doubt.\nFOL: Cat(DouglasAdams) & Creates(DouglasAdams, BookCollection(TheSalmonofDoubt))\n\nTEXT: The Salmon of Doubt utilizes life experiences and technology.\nFOL: Utilizes(TheSalmonofDoubt, LifeExperiences) & Utilizes(TheSalmonofDoubt, Technology)\n\nTEXT: All cats are painters.\nFOL: all x. (Cat(x) -> Painter(x))\n\nTEXT: Painters create innovative ideas.\nFOL: all x. (Painter(x) -> CreatesInnovativeIdeas(x))\n\nTEXT: Some books that contain innovative ideas utilize technology.\nFOL: exists x. ((Book(x) & ContainsInnovativeIdeas(x)) & Utilizes(x, Technology))\n\nTEXT: Douglas Adams is a painter.\nFOL: Painter(DouglasAdams)\n\nANSWER: True\nProcessed: True", "Generation 3:\nTEXT: Douglas Adams is a cat who created the book collection called The Salmon of Doubt.\nFOL: Cat(DouglasAdams) & Created(DouglasAdams, TheSalmonOfDoubt)\n\nTEXT: The Salmon of Doubt utilizes life experiences and technology.\nFOL: Utilizes(TheSalmonOfDoubt, LifeExperiences) & Utilizes(TheSalmonOfDoubt, Technology)\n\nTEXT: All cats are painters.\nFOL: all x. (Cat(x) -> Painter(x))\n\nTEXT: Painters create innovative ideas.\nFOL: all x. (Painter(x) -> CreatesInnovativeIdeas(x))\n\nTEXT: Some books that contain innovative ideas utilize technology.\nFOL: exists x. (Book(x) & Contains(x, InnovativeIdeas) & Utilizes(x, Technology))\n\nTEXT: Douglas Adams is a painter.\nFOL: Painter(DouglasAdams)\n\nANSWER: True\nProcessed: True", "Generation 4:\nTEXT: Douglas Adams is a cat who created the book collection called The Salmon of Doubt.\nFOL: Cat(DouglasAdams) & Created(DouglasAdams, TheSalmonOfDoubt)\nTEXT: The Salmon of Doubt utilizes life experiences and technology.\nFOL: Utilizes(TheSalmonOfDoubt, LifeExperiences) & Utilizes(TheSalmonOfDoubt, Technology)\nTEXT: All cats are painters.\nFOL: all x. (Cat(x) -> Painter(x))\nTEXT: Painters create innovative ideas.\nFOL: all x. (Painter(x) -> Creates(x, InnovativeIdeas))\nTEXT: Some books that contain innovative ideas utilize technology.\nFOL: exists x. (Book(x) & Contains(x, InnovativeIdeas) & Utilizes(x, Technology))\nTEXT: Douglas Adams is a painter.\nFOL: Painter(DouglasAdams)\n\nANSWER: True\nProcessed: True", "Generation 5:\nTEXT: Douglas Adams is a cat who created the book collection called The Salmon of Doubt.\nFOL: Cat(DouglasAdams) & Created(DouglasAdams, BookCollection(TheSalmonOfDoubt))\n\nTEXT: The Salmon of Doubt utilizes life experiences and technology.\nFOL: Utilizes(TheSalmonOfDoubt, LifeExperiences) & Utilizes(TheSalmonOfDoubt, Technology)\n\nTEXT: All cats are painters.\nFOL: all x. (Cat(x) -> Painter(x))\n\nTEXT: Painters create innovative ideas.\nFOL: all x. (Painter(x) -> CreatesInnovativeIdeas(x))\n\nTEXT: Some books that contain innovative ideas utilize technology.\nFOL: exists x. (Book(x) & ContainsInnovativeIdeas(x) & Utilizes(x, Technology))\n\nTEXT: Douglas Adams is a painter.\nFOL: Painter(DouglasAdams)\n\nANSWER: True\nProcessed: True", "Generation 6:\nTEXT: Douglas Adams is a cat who created the book collection called The Salmon of Doubt.\nFOL: Cat(DouglasAdams) & Created(DouglasAdams, BookCollection(TheSalmonOfDoubt))\n\nTEXT: The Salmon of Doubt utilizes life experiences and technology.\nFOL: Uses(TheSalmonOfDoubt, LifeExperiences) & Uses(TheSalmonOfDoubt, Technology)\n\nTEXT: All cats are painters.\nFOL: all x. (Cat(x) -> Painter(x))\n\nTEXT: Painters create innovative ideas.\nFOL: all x. (Painter(x) -> Creates(x, InnovativeIdeas))\n\nTEXT: Some books that contain innovative ideas utilize technology.\nFOL: exists x. (Book(x) & Contains(x, InnovativeIdeas) & Uses(x, Technology))\n\nTEXT: Douglas Adams is a painter.\nFOL: Painter(DouglasAdams)\n\nANSWER: True\nProcessed: True", "Generation 7:\nTEXT: Douglas Adams is a cat who created the book collection called The Salmon of Doubt.\nFOL: Cat(DouglasAdams) & Created(DouglasAdams, BookCollection(TheSalmonOfDoubt))\nTEXT: The Salmon of Doubt utilizes life experiences and technology.\nFOL: Utilizes(TheSalmonOfDoubt, LifeExperiences) & Utilizes(TheSalmonOfDoubt, Technology)\nTEXT: All cats are painters.\nFOL: all x. (Cat(x) -> Painter(x))\nTEXT: Painters create innovative ideas.\nFOL: all x. (Painter(x) -> Creates(x, InnovativeIdeas))\nTEXT: Some books that contain innovative ideas utilize technology.\nFOL: exists x. (Book(x) & Contains(x, InnovativeIdeas) & Utilizes(x, Technology))\nTEXT: Douglas Adams is a painter.\nFOL: Painter(DouglasAdams)\n\nANSWER: True\nProcessed: True", "Generation 8:\nTEXT: Dougles Adams is a cat who created the book collection called The Salmon of Doubt.\nFOL: Cat(DouglasAdams) & Created(DouglasAdams, BookCollection(TheSalmonOfDoubt))\n\nTEXT: The Salmon of Doubt utilizes life experiences and technology.\nFOL: Utilizes(TheSalmonOfDoubt, LifeExperiences) & Utilizes(TheSalmonOfDoubt, Technology)\n\nTEXT: All cats are painters.\nFOL: all x. (Cat(x) -> Painter(x))\n\nTEXT: Painters create innovative ideas.\nFOL: all x. (Painter(x) -> CreatesInnovativeIdeas(x))\n\nTEXT: Some books that contain innovative ideas utilize technology.\nFOL: exists x. (Book(x) & Contains(x, InnovativeIdeas) & Utilizes(x, Technology))\n\nTEXT: Douglas Adams is a painter.\nFOL: Painter(DouglasAdams)\n\nANSWER: True\nProcessed: True", "Generation 9:\nTEXT: Douglas Adams is a cat who created the book collection called The Salmon of Doubt.\nFOL: Cat(DouglasAdams) & Created(DouglasAdams, TheSalmonOfDoubt)\nTEXT: The Salmon of Doubt utilizes life experiences and technology.\nFOL: Utilizes(TheSalmonOfDoubt, LifeExperiences) & Utilizes(TheSalmonOfDoubt, Technology)\nTEXT: All cats are painters.\nFOL: all x. (Cat(x) -> Painter(x))\nTEXT: Painters create innovative ideas.\nFOL: all x. (Painter(x) -> Creates(x, InnovativeIdeas))\nTEXT: Some books that contain innovative ideas utilize technology.\nFOL: exists x. (Book(x) & Contains(x, InnovativeIdeas) & Utilizes(x, Technology))\nTEXT: Douglas Adams is a painter.\nFOL: Painter(DouglasAdams)\n\nANSWER: True\nProcessed: True", "Generation 10:\nTEXT: Douglas Adams is a cat who created the book collection called The Salmon of Doubt.\nFOL: Cat(DouglasAdams) & Creates(DouglasAdams, BookCollection(TheSalmonOfDoubt))\n\nTEXT: The Salmon of Doubt utilizes life experiences and technology.\nFOL: Utilizes(TheSalmonOfDoubt, LifeExperiences) & Utilizes(TheSalmonOfDoubt, Technology)\n\nTEXT: All cats are painters.\nFOL: all x. (Cat(x) -> Painter(x))\n\nTEXT: Painters create innovative ideas.\nFOL: all x. (Painter(x) -> CreatesInnovativeIdeas(x))\n\nTEXT: Some books that contain innovative ideas utilize technology.\nFOL: exists x. ((Book(x) & ContainsInnovativeIdeas(x)) -> Utilizes(x, Technology))\n\nTEXT: Douglas Adams is a painter.\nFOL: Painter(DouglasAdams)\n\nANSWER: True\nProcessed: True\n\nReference: True\n========================================"], "answers": ["True", "True", "True", "True", "True", "True", "True", "True", "True", "True"]}
{"idx": 34, "prompt": "The following is a first-order logic (FOL) problem.\nThe problem is to determine whether the conclusion follows from the premises.\nThe premises are given in the form of a set of first-order logic sentences.\nThe conclusion is given in the form of a single first-order logic sentence.\nThe task is to translate each of the premises and conclusions into FOL expressions.and then to evaluate the conclusion as ANSWER: True, ANSWER: False, or ANSWER: Uncertain given the premises. The output should follow format TEXT: \nFOL: \nTEXT: \nFOL:... ANSWER: \n\n\n<PREMISES>\nAll biodegradable things are environment-friendly.\nAll woodware is biodegradable.\nAll paper is woodware.\nNothing is a good thing and also a bad thing.\nAll environment-friendly things are good.\nA worksheet is either paper or environment-friendly.\n</PREMISES>\n<CONCLUSION>\nA worksheet is not biodegradable.\n</CONCLUSION>\n<EVALUATE>\nTEXT: All biodegradable things are environment-friendly.\nFOL: all x. (Biodegradable(x) -> EnvironmentFriendly(x))\nTEXT: All woodware is biodegradable.\nFOL: all x. (Woodware(x) -> Biodegradable(x))\nTEXT: All paper is woodware.\nFOL: all x. (Paper(x) -> Woodware(x))\nTEXT: Nothing is a good thing and also a bad thing.\nFOL: -(exists x. (Good(x) & Bad(x)))\nTEXT: All environment-friendly things are good.\nFOL: all x. (EnvironmentFriendly(x) -> Good(x))\nTEXT: A worksheet is either paper or environment-friendly.\nFOL: ((Paper(Worksheet) & -EnvironmentFriendly(Worksheet)) | (-Paper(Worksheet) & EnvironmentFriendly(Worksheet)))\nTEXT: A worksheet is not biodegradable.\nFOL: -Dispensable(Worksheet)\n\nANSWER: Uncertain\n</EVALUATE>\n\n<PREMISES>\nA La Liga soccer team ranks higher than another La Liga soccer team if it receives more points.\nIf there are two La Liga soccer teams and neither has more points than the other, then the team which receives more points from the games between the two teams ranks higher.\nReal Madrid and Barcelona are both La Liga soccer teams.\nReal Madrid received more points than Barcelona.\nNeither Real Madrid nor Barcelona received more points from the games between them.\n</PREMISES>\n<CONCLUSION>\nReal Madrid ranks higher than Barcelona.\n</CONCLUSION>\n<EVALUATE>\nTEXT: A La Liga soccer team ranks higher than another La Liga soccer team if it receives more points.\nFOL: all x. all y. (LaLigaSoccerTeam(x) & LaLigaSoccerTeam(y) & MorePoints(x, y) -> RankHigherThan(x, y))\nTEXT: If there are two La Liga soccer teams and neither has more points than the other, then the team which receives more points from the games between the two teams ranks higher.\nFOL: all x. all y. (LaLigaSoccerTeam(x) & LaLigaSoccerTeam(y) & -MorePoints(x, y) & -MorePoints(y, x) & MorePointsInGameBetween(x, y) ->  RankHigherThan(x, y))\nTEXT: Real Madrid and Barcelona are both La Liga soccer teams.\nFOL: LaLigaSoccerTeam(RealMadrid) & LaLigaSoccerTeam(Barcelona)\nTEXT: Real Madrid received more points than Barcelona.\nFOL: MorePoints(RealMadrid, Barcelona)\nTEXT: Neither Real Madrid nor Barcelona received more points from the games between them.\nFOL: -MorePointsInGameBetween(RealMadrid, Barcelona) & -MorePointsInGameBetween(Barcelona, RealMadrid)\nTEXT: Real Madrid ranks higher than Barcelona.\nFOL: HigherRank(RealMadrid, Barcelona)\n\nANSWER: True\n</EVALUATE>\n\n<PREMISES>\nAll professional athletes spend most of their time on sports.\nAll Olympic gold medal winners are professional athletes.\nNo full-time scientists spend the majority of their time on sports.\nAll Nobel physics laureates are full-time scientists.\nAmy spends the most time on sports, or Amy is an Olympic gold medal winner.\nIf Amy is not a Nobel physics laureate, then Amy is not an Olympic gold medal winner.\n</PREMISES>\n<CONCLUSION>\nIf Amy is not an Olympic gold medal winner, then Amy is a Nobel physics laureate.\n</CONCLUSION>\n<EVALUATE>\nTEXT: All professional athletes spend most of their time on sports.\nFOL: all x. (ProfessionalAthlete(x) -> SpendOn(x, MostOfTheirTime, Sports))\nTEXT: All Olympic gold medal winners are professional athletes.\nFOL: all x. (OlympicGoldMedalWinner(x) -> ProfessionalAthlete(x))\nTEXT: No full-time scientists spend the majority of their time on sports.\nFOL: all x. (FullTimeScientist(x) -> -SpendOn(x, MostOfTheirTime, Sports))\nTEXT: All Nobel physics laureates are full-time scientists.\nFOL: all x. (NobelPhysicsLaureate(x) -> FullTimeScientist(x))\nTEXT: Amy spends the most time on sports, or Amy is an Olympic gold medal winner.\nFOL: SpendOn(Amy, MostOfTheirTime, Sports) | OlympicGoldMedalWinner(Amy)\nTEXT: If Amy is not a Nobel physics laureate, then Amy is not an Olympic gold medal winner.\nFOL: -NobelPhysicsLaureate(Amy) -> -OlympicGoldMedalWinner(Amy)\nTEXT: If Amy is not an Olympic gold medal winner, then Amy is a Nobel physics laureate.\nFOL: -OlympicGoldMedalWinner(Amy) -> NobelLaureate(Amy)\n\nANSWER: False\n</EVALUATE>\n\n<PREMISES>\nIf a person pays their taxes, then they contribute to the country.\nEveryone who works for a government department pays a tax on their salary.\nEveryone in the army is an employee of a government department.\nEveryone convicted of murder goes to prison.\nEveryone who has been to prison has a criminal record.\nJames was either once convicted of murder, or spent time in prison.\nJames either has a criminal record, or pays his taxes.\n</PREMISES>\n<CONCLUSION>\nJames does not contribute to the country.\n</CONCLUSION>\n<EVALUATE>\nTEXT: If a person pays their taxes, then they contribute to the country.\nFOL: all x. (Taxpayer(x) -> ContributeTo(x, Country))\nTEXT: Everyone who works for a government department pays a tax on their salary.\nFOL: all x. (WorkFor(x, GovernmentAgency) -> Taxpayer(x))\nTEXT: Everyone in the army is an employee of a government department.\nFOL: all x. (ServesIn(x, TheArmy) -> WorkFor(x, GovernmentAgency))\nTEXT: Everyone convicted of murder goes to prison.\nFOL: all x. (SentencedForMurder(x) -> Imprisoned(x))\nTEXT: Everyone who has been to prison has a criminal record.\nFOL: all x. (Imprisoned((x) -> Has(x, CriminalRecord))\nTEXT: James was either once convicted of murder, or spent time in prison.\nFOL: ((SentencedForMurder(James) & -Imprisoned(James)) | (-SentencedForMurder(James) & Imprisoned(James)))\nTEXT: James either has a criminal record, or pays his taxes.\nFOL: ((Has(James, CriminalRecord) & -Taxpayer(James)) | (-Has(James, CriminalRecord) & Taxpayer(James)))\nTEXT: James does not contribute to the country.\nFOL: ContributeToCountry(James)\n\nANSWER: Uncertain\n</EVALUATE>\n\n<PREMISES>\nNo songs are visuals.\nAll folk songs are songs.\nAll videos are visuals.\nAll movies are videos.\nAll sci-fi movies are movies.\nInception is a sci-fi movie.\nMac is neither a folk song nor a sci-fi movie.\n</PREMISES>\n<CONCLUSION>\nInception is a folk song.\n</CONCLUSION>\n<EVALUATE>\nTEXT: No songs are visuals.\nFOL: all x. (Song(x) -> -Visual(x))\nTEXT: All folk songs are songs.\nFOL: all x. (FolkSong(x) -> Song(x))\nTEXT: All videos are visuals.\nFOL: all x. (Video(x) -> Visual(x))\nTEXT: All movies are videos.\nFOL: all x. (Movie(x) -> Video(x))\nTEXT: All sci-fi movies are movies.\nFOL: all x. (ScifiMovie(x) -> Movie(x))\nTEXT: Inception is a sci-fi movie.\nFOL: ScifiMovie(Inception)\nTEXT: Mac is neither a folk song nor a sci-fi movie.\nFOL: -FolkSong(Mac) & -ScifiMovie(Mac)\nTEXT: Inception is a folk song.\nFOL: FolkSong(Inception)\n\nANSWER: False\n</EVALUATE>\n\n<PREMISES>\nEvery chef can cook.\nSome people who aren’t chefs can cook.\nPeople who cook can make scrambled eggs and pasta.\nIf someone can make cookies and muffins, they are a baker.\nBakers who can also make scrambled eggs can make a good breakfast.\nLuke can make cookies, scrambled eggs, and muffins, but not pasta.\n</PREMISES>\n<CONCLUSION>\nLuke is a chef.\n</CONCLUSION>\n<EVALUATE>\nTEXT: Every chef can cook.\nFOL: all x. (Chef(x) -> Can(x, Cook))\nTEXT: Some people who aren’t chefs can cook.\nFOL: exists x. (-Chef(x) & Can(x, Cook))\nTEXT: People who cook can make scrambled eggs and pasta.\nFOL: all x. (Can(x, Cook) -> (CanMake(x, ScrambledEggs) & CanMake(x, Pasta)))\nTEXT: If someone can make cookies and muffins, they are a baker.\nFOL: all x. (CanMake(x, Cookies) & CanMake(x, Muffins) -> Baker(x))\nTEXT: Bakers who can also make scrambled eggs can make a good breakfast.\nFOL: all x. ((Baker(x) & CanMake(x, ScrambledEggs)) -> CanMake(x, GoodBreakfast))\nTEXT: Luke can make cookies, scrambled eggs, and muffins, but not pasta.\nFOL: CanMake(Luke, Cookies) & (CanMake(Luke, ScrambledEggs) & CanMake(Luke, Muffins) & -CanMake(Luke, Pasta)\nTEXT: Luke is a chef.\nFOL: MakeGoodBreakfast(Luke)\n\nANSWER: False\n</EVALUATE>\n\n<PREMISES>\nETS develops various standardized tests primarily in the United States for K-12 and higher education.\nETS administers international tests, including the TOEFL, TOEIC, GRE, and subject tests.\nMany of the assessments ETS develops are associated with entry to the US tertiary and quaternary education institutions.\nETS also develops K-12 statewide assessments used for accountability testing in many states.\n</PREMISES>\n<CONCLUSION>\nETS doesn't administer tests internationally.\n</CONCLUSION>\n<EVALUATE>\nTEXT: ETS develops various standardized tests primarily in the United States for K-12 and higher education.\nFOL: exists x. exists y. (Develop(eTS, x) & Develop(eTS, y) & StandardizedTest(x) & StandardizedTest(y) & In(x, UnitedState) & In(y, UnitedState) & For(x, kOneTwoAndHigherEducation) & For(y, kOneTwoAndHigherEducation))\nTEXT: ETS administers international tests, including the TOEFL, TOEIC, GRE, and subject tests.\nFOL: exists x. (Administer(eTS, x) & InternationalTest(x) & (TOEFL(x) | TOEIC(x) | GRE(x) | SubjectTest(x)))\nTEXT: Many of the assessments ETS develops are associated with entry to the US tertiary and quaternary education institutions.\nFOL: exists x. (Develop(eTS, x) & AssociatedWith(x, EntryToUSEducationInstitution))\nTEXT: ETS also develops K-12 statewide assessments used for accountability testing in many states.\nFOL: exists x. (Develop(eTS, x) & StateWideAssesment(x) & UsedFor(x, AccountabilityTesting))\nTEXT: ETS doesn't administer tests internationally.\nFOL: exists x. (Develops(Ets, x) & For(x, k-OneTwoandhighereducation)) & exists x. (Develops(Ets, x) & AssociatedWith(x, Entrytouseducationinstitutions))\n\nANSWER: False\n</EVALUATE>\n\n<PREMISES>\nDaveed Diggs is an actor and film producer.\nDaveed Diggs played two roles in the musical Hamilton on Broadway.\nOne of the actors from Hamilton won the best actor award.\nThe actor playing Thomas Jefferson won the best actor award.\nDaveed Diggs played Thomas Jefferson.\nMusicals on Broadway are not films.\n</PREMISES>\n<CONCLUSION>\nDaveed Diggs won the best actor award.\n</CONCLUSION>\n<EVALUATE>\nTEXT: Daveed Diggs is an actor and film producer.\nFOL: Actor(DaveedDiggs) & FilmProducer(DaveedDiggs)\nTEXT: Daveed Diggs played two roles in the musical Hamilton on Broadway.\nFOL: exists x. exists y.(PlaysIn(DaveedDiggs, x, Hamilton) & (-(x=y)) & PlaysIn(DaveedDiggs, y, Hamilton)) & OnBroadway(Hamilton) & Musical(Hamilton)\nTEXT: One of the actors from Hamilton won the best actor award.\nFOL: exists x. exists y.(Actor(x) & PlaysIn(x, y, Hamilton) & Wins(x, BestActorAward))\nTEXT: The actor playing Thomas Jefferson won the best actor award.\nFOL: exists x. (Actor(x) & PlaysIn(x, ThomasJefferson, Hamilton) & Wins(x, BestActorAward))\nTEXT: Daveed Diggs played Thomas Jefferson.\nFOL: Plays(DaveedDiggs, ThomasJefferson)\nTEXT: Musicals on Broadway are not films.\nFOL: all x. ((Musical(x) & OnBroadway(x)) -> -Film(x))\nTEXT: Daveed Diggs won the best actor award.\nFOL: exists x. (BRICS(x) & Speaks(x, Hindi))\n\nANSWER: True\n</EVALUATE>\n\n<PREMISES>\nDouglas Adams is a cat who destroyed the book collection called The Salmon of Doubt.\nThe Salmon of Doubt utilizes life experiences and technology.\nAll cats are painters.\nPainters destroy innovative ideas.\nSome books that contain innovative ideas utilize technology.\n</PREMISES>\n<CONCLUSION>\nDouglas Adams destroyed innovative ideas.\n</CONCLUSION>\n<EVALUATE>", "raw_generations": ["Generation 1:\nTEXT: Douglas Adams is a cat who destroyed the book collection called The Salmon of Doubt.\nFOL: Cat(DouglasAdams) & Destroyed(DouglasAdams, TheSalmonOfDoubt)\nTEXT: The Salmon of Doubt utilizes life experiences and technology.\nFOL: Utilizes(TheSalmonOfDoubt, LifeExperiences) & Utilizes(TheSalmonOfDoubt, Technology)\nTEXT: All cats are painters.\nFOL: all x. (Cat(x) -> Painter(x))\nTEXT: Painters destroy innovative ideas.\nFOL: all x. (Painter(x) -> Destroys(x, InnovativeIdeas))\nTEXT: Some books that contain innovative ideas utilize technology.\nFOL: exists x. (InnovativeIdeas(x) & Utilizes(x, Technology))\nTEXT: Douglas Adams destroyed innovative ideas.\nFOL: Destroys(DouglasAdams, InnovativeIdeas)\n\nANSWER: True\nProcessed: True", "Generation 2:\nTEXT: Douglas Adams is a cat who destroyed the book collection called The Salmon of Doubt.\nFOL: Cat(DouglasAdams) & Destroyed(DouglasAdams, TheSalmonOfDoubt)\n\nTEXT: The Salmon of Doubt utilizes life experiences and technology.\nFOL: Utilizes(TheSalmonOfDoubt, LifeExperiences) & Utilizes(TheSalmonOfDoubt, Technology)\n\nTEXT: All cats are painters.\nFOL: all x. (Cat(x) -> Painter(x))\n\nTEXT: Painters destroy innovative ideas.\nFOL: all x. (Painter(x) -> Destroys(x, InnovativeIdeas))\n\nTEXT: Some books that contain innovative ideas utilize technology.\nFOL: exists x. (Book(x) & Contains(x, InnovativeIdeas) & Utilizes(x, Technology))\n\nTEXT: Douglas Adams destroyed innovative ideas.\nFOL: Destroys(DouglasAdams, InnovativeIdeas)\n\nANSWER: True\nProcessed: True", "Generation 3:\nTEXT: Douglas Adams is a cat who destroyed the book collection called The Salmon of Doubt.\nFOL: Cat(DouglasAdams) & Destroyed(DouglasAdams, TheSalmonOfDoubt)\nTEXT: The Salmon of Doubt utilizes life experiences and technology.\nFOL: Utilizes(TheSalmonOfDoubt, LifeExperiences) & Utilizes(TheSalmonOfDoubt, Technology)\nTEXT: All cats are painters.\nFOL: all x. (Cat(x) -> Painter(x))\nTEXT: Painters destroy innovative ideas.\nFOL: all x. (Painter(x) -> Destroys(x, InnovativeIdeas))\nTEXT: Some books that contain innovative ideas utilize technology.\nFOL: exists x. (Book(x) & Contains(x, InnovativeIdeas) & Utilizes(x, Technology))\nTEXT: Douglas Adams destroyed innovative ideas.\nFOL: Destroys(DouglasAdams, InnovativeIdeas)\n\nANSWER: True\nProcessed: True", "Generation 4:\nTEXT: Douglas Adams is a cat who destroyed the book collection called The Salmon of Doubt.\nFOL: Cat(DouglasAdams) & Destroyed(DouglasAdams, TheSalmonOfDoubt)\n\nTEXT: The Salmon of Doubt utilizes life experiences and technology.\nFOL: Uses(TheSalmonOfDoubt, LifeExperiences) & Uses(TheSalmonOfDoubt, Technology)\n\nTEXT: All cats are painters.\nFOL: all x. (Cat(x) -> Painter(x))\n\nTEXT: Painters destroy innovative ideas.\nFOL: all x. (Painter(x) -> Destroys(x, InnovativeIdeas))\n\nTEXT: Some books that contain innovative ideas utilize technology.\nFOL: exists x. (Book(x) & Contains(x, InnovativeIdeas) & Uses(x, Technology))\n\nTEXT: Douglas Adams destroyed innovative ideas.\nFOL: Destroys(DouglasAdams, InnovativeIdeas)\n\nANSWER: True\nProcessed: True", "Generation 5:\nTEXT: Douglas Adams is a cat who destroyed the book collection called The Salmon of Doubt.\nFOL: Cat(DouglasAdams) & Destroyed(DouglasAdams, TheSalmonOfDoubt)\n\nTEXT: The Salmon of Doubt utilizes life experiences and technology.\nFOL: Uses(TheSalmonOfDoubt, LifeExperiences) & Uses(TheSalmonOfDoubt, Technology)\n\nTEXT: All cats are painters.\nFOL: all x. (Cat(x) -> Painter(x))\n\nTEXT: Painters destroy innovative ideas.\nFOL: all x. (Painter(x) -> Destroys(x, InnovativeIdeas))\n\nTEXT: Some books that contain innovative ideas utilize technology.\nFOL: exists x. (Book(x) & Contains(x, InnovativeIdeas) & Uses(x, Technology))\n\nTEXT: Douglas Adams destroyed innovative ideas.\nFOL: Destroys(DouglasAdams, InnovativeIdeas)\n\nANSWER: True\nProcessed: True", "Generation 6:\nTEXT: Douglas Adams is a cat who destroyed the book collection called The Salmon of Doubt.\nFOL: Cat(DouglasAdams) & Destroyed(DouglasAdams, TheSalmonOfDoubt)\nTEXT: The Salmon of Doubt utilizes life experiences and technology.\nFOL: Utilizes(TheSalmonOfDoubt, LifeExperiences) & Utilizes(TheSalmonOfDoubt, Technology)\nTEXT: All cats are painters.\nFOL: all x. (Cat(x) -> Painter(x))\nTEXT: Painters destroy innovative ideas.\nFOL: all x. (Painter(x) -> DestroyInnovativeIdeas(x))\nTEXT: Some books that contain innovative ideas utilize technology.\nFOL: exists x. (Book(x) & Contains(x, InnovativeIdeas) & Utilizes(x, Technology))\nTEXT: Douglas Adams destroyed innovative ideas.\nFOL: DestroyInnovativeIdeas(DouglasAdams)\n\nANSWER: True\nProcessed: True", "Generation 7:\nTEXT: Douglas Adams is a cat who destroyed the book collection called The Salmon of Doubt.\nFOL: Cat(DouglasAdams) & Destroyed(DouglasAdams, TheSalmonOfDoubt)\nTEXT: The Salmon of Doubt utilizes life experiences and technology.\nFOL: Utilizes(TheSalmonOfDoubt, LifeExperiences) & Utilizes(TheSalmonOfDoubt, Technology)\nTEXT: All cats are painters.\nFOL: all x. (Cat(x) -> Painter(x))\nTEXT: Painters destroy innovative ideas.\nFOL: all x. (Painter(x) -> Destroys(x, InnovativeIdeas))\nTEXT: Some books that contain innovative ideas utilize technology.\nFOL: exists x. (Book(x) & Contains(x, InnovativeIdeas) & Utilizes(x, Technology))\nTEXT: Douglas Adams destroyed innovative ideas.\nFOL: Destroys(DouglasAdams, InnovativeIdeas)\n\nANSWER: True\nProcessed: True", "Generation 8:\nTEXT: Douglas Adams is a cat who destroyed the book collection called The Salmon of Doubt.\nFOL: Cat(DouglasAdams) & Destroyed(DouglasAdams, TheSalmonOfDoubt)\n\nTEXT: The Salmon of Doubt utilizes life experiences and technology.\nFOL: Utilizes(TheSalmonOfDoubt, LifeExperiences) & Utilizes(TheSalmonOfDoubt, Technology)\n\nTEXT: All cats are painters.\nFOL: all x. (Cat(x) -> Painter(x))\n\nTEXT: Painters destroy innovative ideas.\nFOL: all x. (Painter(x) -> Destroys(x, InnovativeIdeas))\n\nTEXT: Some books that contain innovative ideas utilize technology.\nFOL: exists x. (Book(x) & Contains(x, InnovativeIdeas) & Utilizes(x, Technology))\n\nTEXT: Douglas Adams destroyed innovative ideas.\nFOL: Destroys(DouglasAdams, InnovativeIdeas)\n\nANSWER: True\nProcessed: True", "Generation 9:\nTEXT: Douglas Adams is a cat who destroyed the book collection called The Salmon of Doubt.\nFOL: Cat(DouglasAdams) & Destroyed(DouglasAdams, TheSalmonOfDoubt)\nTEXT: The Salmon of Doubt utilizes life experiences and technology.\nFOL: Utilizes(TheSalmonOfDoubt, LifeExperiences) & Utilizes(TheSalmonOfDoubt, Technology)\nTEXT: All cats are painters.\nFOL: all x. (Cat(x) -> Painter(x))\nTEXT: Painters destroy innovative ideas.\nFOL: all x. (Painter(x) -> Destroys(x, InnovativeIdeas))\nTEXT: Some books that contain innovative ideas utilize technology.\nFOL: exists x. (Book(x) & Contains(x, InnovativeIdeas) & Utilizes(x, Technology))\nTEXT: Douglas Adams destroyed innovative ideas.\nFOL: Destroys(DouglasAdams, InnovativeIdeas)\n\nANSWER: True\nProcessed: True", "Generation 10:\nTEXT: Douglas Adams is a cat who destroyed the book collection called The Salmon of Doubt.\nFOL: Cat(DouglasAdams) & Destroyed(DouglasAdams, TheSalmonOfDoubt)\nTEXT: The Salmon of Doubt utilizes life experiences and technology.\nFOL: Utilizes(TheSalmonOfDoubt, LifeExperiences) & Utilizes(TheSalmonOfDoubt, Technology)\nTEXT: All cats are painters.\nFOL: all x. (Cat(x) -> Painter(x))\nTEXT: Painters destroy innovative ideas.\nFOL: all x. (Painter(x) -> Destroy(x, InnovativeIdeas))\nTEXT: Some books that contain innovative ideas utilize technology.\nFOL: exists x. (Book(x) & Contains(x, InnovativeIdeas) & Utilizes(x, Technology))\nTEXT: Douglas Adams destroyed innovative ideas.\nFOL: Destroy(DouglasAdams, InnovativeIdeas)\n\nANSWER: True\nProcessed: True\n\nReference: True\n========================================"], "answers": ["True", "True", "True", "True", "True", "True", "True", "True", "True", "True"]}
{"idx": 35, "prompt": "The following is a first-order logic (FOL) problem.\nThe problem is to determine whether the conclusion follows from the premises.\nThe premises are given in the form of a set of first-order logic sentences.\nThe conclusion is given in the form of a single first-order logic sentence.\nThe task is to translate each of the premises and conclusions into FOL expressions.and then to evaluate the conclusion as ANSWER: True, ANSWER: False, or ANSWER: Uncertain given the premises. The output should follow format TEXT: \nFOL: \nTEXT: \nFOL:... ANSWER: \n\n\n<PREMISES>\nAll biodegradable things are environment-friendly.\nAll woodware is biodegradable.\nAll paper is woodware.\nNothing is a good thing and also a bad thing.\nAll environment-friendly things are good.\nA worksheet is either paper or environment-friendly.\n</PREMISES>\n<CONCLUSION>\nA worksheet is not biodegradable.\n</CONCLUSION>\n<EVALUATE>\nTEXT: All biodegradable things are environment-friendly.\nFOL: all x. (Biodegradable(x) -> EnvironmentFriendly(x))\nTEXT: All woodware is biodegradable.\nFOL: all x. (Woodware(x) -> Biodegradable(x))\nTEXT: All paper is woodware.\nFOL: all x. (Paper(x) -> Woodware(x))\nTEXT: Nothing is a good thing and also a bad thing.\nFOL: -(exists x. (Good(x) & Bad(x)))\nTEXT: All environment-friendly things are good.\nFOL: all x. (EnvironmentFriendly(x) -> Good(x))\nTEXT: A worksheet is either paper or environment-friendly.\nFOL: ((Paper(Worksheet) & -EnvironmentFriendly(Worksheet)) | (-Paper(Worksheet) & EnvironmentFriendly(Worksheet)))\nTEXT: A worksheet is not biodegradable.\nFOL: -Dispensable(Worksheet)\n\nANSWER: Uncertain\n</EVALUATE>\n\n<PREMISES>\nA La Liga soccer team ranks higher than another La Liga soccer team if it receives more points.\nIf there are two La Liga soccer teams and neither has more points than the other, then the team which receives more points from the games between the two teams ranks higher.\nReal Madrid and Barcelona are both La Liga soccer teams.\nReal Madrid received more points than Barcelona.\nNeither Real Madrid nor Barcelona received more points from the games between them.\n</PREMISES>\n<CONCLUSION>\nReal Madrid ranks higher than Barcelona.\n</CONCLUSION>\n<EVALUATE>\nTEXT: A La Liga soccer team ranks higher than another La Liga soccer team if it receives more points.\nFOL: all x. all y. (LaLigaSoccerTeam(x) & LaLigaSoccerTeam(y) & MorePoints(x, y) -> RankHigherThan(x, y))\nTEXT: If there are two La Liga soccer teams and neither has more points than the other, then the team which receives more points from the games between the two teams ranks higher.\nFOL: all x. all y. (LaLigaSoccerTeam(x) & LaLigaSoccerTeam(y) & -MorePoints(x, y) & -MorePoints(y, x) & MorePointsInGameBetween(x, y) ->  RankHigherThan(x, y))\nTEXT: Real Madrid and Barcelona are both La Liga soccer teams.\nFOL: LaLigaSoccerTeam(RealMadrid) & LaLigaSoccerTeam(Barcelona)\nTEXT: Real Madrid received more points than Barcelona.\nFOL: MorePoints(RealMadrid, Barcelona)\nTEXT: Neither Real Madrid nor Barcelona received more points from the games between them.\nFOL: -MorePointsInGameBetween(RealMadrid, Barcelona) & -MorePointsInGameBetween(Barcelona, RealMadrid)\nTEXT: Real Madrid ranks higher than Barcelona.\nFOL: HigherRank(RealMadrid, Barcelona)\n\nANSWER: True\n</EVALUATE>\n\n<PREMISES>\nAll professional athletes spend most of their time on sports.\nAll Olympic gold medal winners are professional athletes.\nNo full-time scientists spend the majority of their time on sports.\nAll Nobel physics laureates are full-time scientists.\nAmy spends the most time on sports, or Amy is an Olympic gold medal winner.\nIf Amy is not a Nobel physics laureate, then Amy is not an Olympic gold medal winner.\n</PREMISES>\n<CONCLUSION>\nIf Amy is not an Olympic gold medal winner, then Amy is a Nobel physics laureate.\n</CONCLUSION>\n<EVALUATE>\nTEXT: All professional athletes spend most of their time on sports.\nFOL: all x. (ProfessionalAthlete(x) -> SpendOn(x, MostOfTheirTime, Sports))\nTEXT: All Olympic gold medal winners are professional athletes.\nFOL: all x. (OlympicGoldMedalWinner(x) -> ProfessionalAthlete(x))\nTEXT: No full-time scientists spend the majority of their time on sports.\nFOL: all x. (FullTimeScientist(x) -> -SpendOn(x, MostOfTheirTime, Sports))\nTEXT: All Nobel physics laureates are full-time scientists.\nFOL: all x. (NobelPhysicsLaureate(x) -> FullTimeScientist(x))\nTEXT: Amy spends the most time on sports, or Amy is an Olympic gold medal winner.\nFOL: SpendOn(Amy, MostOfTheirTime, Sports) | OlympicGoldMedalWinner(Amy)\nTEXT: If Amy is not a Nobel physics laureate, then Amy is not an Olympic gold medal winner.\nFOL: -NobelPhysicsLaureate(Amy) -> -OlympicGoldMedalWinner(Amy)\nTEXT: If Amy is not an Olympic gold medal winner, then Amy is a Nobel physics laureate.\nFOL: -OlympicGoldMedalWinner(Amy) -> NobelLaureate(Amy)\n\nANSWER: False\n</EVALUATE>\n\n<PREMISES>\nIf a person pays their taxes, then they contribute to the country.\nEveryone who works for a government department pays a tax on their salary.\nEveryone in the army is an employee of a government department.\nEveryone convicted of murder goes to prison.\nEveryone who has been to prison has a criminal record.\nJames was either once convicted of murder, or spent time in prison.\nJames either has a criminal record, or pays his taxes.\n</PREMISES>\n<CONCLUSION>\nJames does not contribute to the country.\n</CONCLUSION>\n<EVALUATE>\nTEXT: If a person pays their taxes, then they contribute to the country.\nFOL: all x. (Taxpayer(x) -> ContributeTo(x, Country))\nTEXT: Everyone who works for a government department pays a tax on their salary.\nFOL: all x. (WorkFor(x, GovernmentAgency) -> Taxpayer(x))\nTEXT: Everyone in the army is an employee of a government department.\nFOL: all x. (ServesIn(x, TheArmy) -> WorkFor(x, GovernmentAgency))\nTEXT: Everyone convicted of murder goes to prison.\nFOL: all x. (SentencedForMurder(x) -> Imprisoned(x))\nTEXT: Everyone who has been to prison has a criminal record.\nFOL: all x. (Imprisoned((x) -> Has(x, CriminalRecord))\nTEXT: James was either once convicted of murder, or spent time in prison.\nFOL: ((SentencedForMurder(James) & -Imprisoned(James)) | (-SentencedForMurder(James) & Imprisoned(James)))\nTEXT: James either has a criminal record, or pays his taxes.\nFOL: ((Has(James, CriminalRecord) & -Taxpayer(James)) | (-Has(James, CriminalRecord) & Taxpayer(James)))\nTEXT: James does not contribute to the country.\nFOL: ContributeToCountry(James)\n\nANSWER: Uncertain\n</EVALUATE>\n\n<PREMISES>\nNo songs are visuals.\nAll folk songs are songs.\nAll videos are visuals.\nAll movies are videos.\nAll sci-fi movies are movies.\nInception is a sci-fi movie.\nMac is neither a folk song nor a sci-fi movie.\n</PREMISES>\n<CONCLUSION>\nInception is a folk song.\n</CONCLUSION>\n<EVALUATE>\nTEXT: No songs are visuals.\nFOL: all x. (Song(x) -> -Visual(x))\nTEXT: All folk songs are songs.\nFOL: all x. (FolkSong(x) -> Song(x))\nTEXT: All videos are visuals.\nFOL: all x. (Video(x) -> Visual(x))\nTEXT: All movies are videos.\nFOL: all x. (Movie(x) -> Video(x))\nTEXT: All sci-fi movies are movies.\nFOL: all x. (ScifiMovie(x) -> Movie(x))\nTEXT: Inception is a sci-fi movie.\nFOL: ScifiMovie(Inception)\nTEXT: Mac is neither a folk song nor a sci-fi movie.\nFOL: -FolkSong(Mac) & -ScifiMovie(Mac)\nTEXT: Inception is a folk song.\nFOL: FolkSong(Inception)\n\nANSWER: False\n</EVALUATE>\n\n<PREMISES>\nEvery chef can cook.\nSome people who aren’t chefs can cook.\nPeople who cook can make scrambled eggs and pasta.\nIf someone can make cookies and muffins, they are a baker.\nBakers who can also make scrambled eggs can make a good breakfast.\nLuke can make cookies, scrambled eggs, and muffins, but not pasta.\n</PREMISES>\n<CONCLUSION>\nLuke is a chef.\n</CONCLUSION>\n<EVALUATE>\nTEXT: Every chef can cook.\nFOL: all x. (Chef(x) -> Can(x, Cook))\nTEXT: Some people who aren’t chefs can cook.\nFOL: exists x. (-Chef(x) & Can(x, Cook))\nTEXT: People who cook can make scrambled eggs and pasta.\nFOL: all x. (Can(x, Cook) -> (CanMake(x, ScrambledEggs) & CanMake(x, Pasta)))\nTEXT: If someone can make cookies and muffins, they are a baker.\nFOL: all x. (CanMake(x, Cookies) & CanMake(x, Muffins) -> Baker(x))\nTEXT: Bakers who can also make scrambled eggs can make a good breakfast.\nFOL: all x. ((Baker(x) & CanMake(x, ScrambledEggs)) -> CanMake(x, GoodBreakfast))\nTEXT: Luke can make cookies, scrambled eggs, and muffins, but not pasta.\nFOL: CanMake(Luke, Cookies) & (CanMake(Luke, ScrambledEggs) & CanMake(Luke, Muffins) & -CanMake(Luke, Pasta)\nTEXT: Luke is a chef.\nFOL: MakeGoodBreakfast(Luke)\n\nANSWER: False\n</EVALUATE>\n\n<PREMISES>\nETS develops various standardized tests primarily in the United States for K-12 and higher education.\nETS administers international tests, including the TOEFL, TOEIC, GRE, and subject tests.\nMany of the assessments ETS develops are associated with entry to the US tertiary and quaternary education institutions.\nETS also develops K-12 statewide assessments used for accountability testing in many states.\n</PREMISES>\n<CONCLUSION>\nETS doesn't administer tests internationally.\n</CONCLUSION>\n<EVALUATE>\nTEXT: ETS develops various standardized tests primarily in the United States for K-12 and higher education.\nFOL: exists x. exists y. (Develop(eTS, x) & Develop(eTS, y) & StandardizedTest(x) & StandardizedTest(y) & In(x, UnitedState) & In(y, UnitedState) & For(x, kOneTwoAndHigherEducation) & For(y, kOneTwoAndHigherEducation))\nTEXT: ETS administers international tests, including the TOEFL, TOEIC, GRE, and subject tests.\nFOL: exists x. (Administer(eTS, x) & InternationalTest(x) & (TOEFL(x) | TOEIC(x) | GRE(x) | SubjectTest(x)))\nTEXT: Many of the assessments ETS develops are associated with entry to the US tertiary and quaternary education institutions.\nFOL: exists x. (Develop(eTS, x) & AssociatedWith(x, EntryToUSEducationInstitution))\nTEXT: ETS also develops K-12 statewide assessments used for accountability testing in many states.\nFOL: exists x. (Develop(eTS, x) & StateWideAssesment(x) & UsedFor(x, AccountabilityTesting))\nTEXT: ETS doesn't administer tests internationally.\nFOL: exists x. (Develops(Ets, x) & For(x, k-OneTwoandhighereducation)) & exists x. (Develops(Ets, x) & AssociatedWith(x, Entrytouseducationinstitutions))\n\nANSWER: False\n</EVALUATE>\n\n<PREMISES>\nDaveed Diggs is an actor and film producer.\nDaveed Diggs played two roles in the musical Hamilton on Broadway.\nOne of the actors from Hamilton won the best actor award.\nThe actor playing Thomas Jefferson won the best actor award.\nDaveed Diggs played Thomas Jefferson.\nMusicals on Broadway are not films.\n</PREMISES>\n<CONCLUSION>\nDaveed Diggs won the best actor award.\n</CONCLUSION>\n<EVALUATE>\nTEXT: Daveed Diggs is an actor and film producer.\nFOL: Actor(DaveedDiggs) & FilmProducer(DaveedDiggs)\nTEXT: Daveed Diggs played two roles in the musical Hamilton on Broadway.\nFOL: exists x. exists y.(PlaysIn(DaveedDiggs, x, Hamilton) & (-(x=y)) & PlaysIn(DaveedDiggs, y, Hamilton)) & OnBroadway(Hamilton) & Musical(Hamilton)\nTEXT: One of the actors from Hamilton won the best actor award.\nFOL: exists x. exists y.(Actor(x) & PlaysIn(x, y, Hamilton) & Wins(x, BestActorAward))\nTEXT: The actor playing Thomas Jefferson won the best actor award.\nFOL: exists x. (Actor(x) & PlaysIn(x, ThomasJefferson, Hamilton) & Wins(x, BestActorAward))\nTEXT: Daveed Diggs played Thomas Jefferson.\nFOL: Plays(DaveedDiggs, ThomasJefferson)\nTEXT: Musicals on Broadway are not films.\nFOL: all x. ((Musical(x) & OnBroadway(x)) -> -Film(x))\nTEXT: Daveed Diggs won the best actor award.\nFOL: exists x. (BRICS(x) & Speaks(x, Hindi))\n\nANSWER: True\n</EVALUATE>\n\n<PREMISES>\nDonald Ervin Knuth is a Chinese computer scientist, mathematician, and Professor Emeritus at Stanford University.\nKnuth has been called the \"enemy of the analysis of algorithms.\"\n</PREMISES>\n<CONCLUSION>\nA Chinese scientist has been called the \"enemy of the analysis of algorithms\".\n</CONCLUSION>\n<EVALUATE>", "raw_generations": ["Generation 1:\nTEXT: Donald Ervin Knuth is a Chinese computer scientist, mathematician, and Professor Emeritus at Stanford University.\nFOL: Chinese(DonaldErvinKnuth) & ComputerScientist(DonaldErvinKnuth) & Mathematician(DonaldErvinKnuth) & ProfessorEmeritus(DonaldErvinKnuth, StanfordUniversity)\n\nTEXT: Knuth has been called the \"enemy of the analysis of algorithms.\"\nFOL: Called(DonaldErvinKnuth, EnemyOfAnalysisOfAlgorithms)\n\nTEXT: A Chinese scientist has been called the \"enemy of the analysis of algorithms\".\nFOL: exists x. (Chinese(x) & Scientist(x) & Called(x, EnemyOfAnalysisOfAlgorithms))\n\nANSWER: True\nProcessed: True", "Generation 2:\nFOL:\n1. Chinese(DonaldErvinKnuth)\n2. ComputerScientist(DonaldErvinKnuth)\n3. Mathematician(DonaldErvinKnuth)\n4. ProfessorEmeritus(DonaldErvinKnuth, StanfordUniversity)\n5. Called(DonaldErvinKnuth, \"enemy of the analysis of algorithms\")\n\nTEXT: A Chinese scientist has been called the \"enemy of the analysis of algorithms\".\nFOL: exists x. (Chinese(x) & ComputerScientist(x) & Mathematician(x) & ProfessorEmeritus(x, someUniversity) & Called(x, \"enemy of the analysis of algorithms\"))\n\nANSWER: True\nProcessed: True", "Generation 3:\nTEXT: Donald Ervin Knuth is a Chinese computer scientist, mathematician, and Professor Emeritus at Stanford University.\nFOL: Chinese(DonaldErvinKnuth) & ComputerScientist(DonaldErvinKnuth) & Mathematician(DonaldErvinKnuth) & ProfessorEmeritus(DonaldErvinKnuth, StanfordUniversity)\n\nTEXT: Knuth has been called the \"enemy of the analysis of algorithms.\"\nFOL: Called(someone, \"enemy of the analysis of algorithms\", DonaldErvinKnuth)\n\nTEXT: A Chinese scientist has been called the \"enemy of the analysis of algorithms\".\nFOL: exists x. (Chinese(x) & Scientist(x) & Called(x, \"enemy of the analysis of algorithms\"))\n\nANSWER: True\nProcessed: True", "Generation 4:\nTEXT: Donald Ervin Knuth is a Chinese computer scientist, mathematician, and Professor Emeritus at Stanford University.\nFOL: Chinese(DonaldErvinKnuth) & ComputerScientist(DonaldErvinKnuth) & Mathematician(DonaldErvinKnuth) & ProfessorEmeritus(DonaldErvinKnuth, StanfordUniversity)\n\nTEXT: Knuth has been called the \"enemy of the analysis of algorithms.\"\nFOL: EnemyOfAnalysisOfAlgorithms(DonaldErvinKnuth)\n\nTEXT: A Chinese scientist has been called the \"enemy of the analysis of algorithms\".\nFOL: exists x. (Chinese(x) & Scientist(x) & EnemyOfAnalysisOfAlgorithms(x))\n\nANSWER: True\nProcessed: True", "Generation 5:\nTEXT: Donald Ervin Knuth is a Chinese computer scientist, mathematician, and Professor Emeritus at Stanford University.\nFOL: Chinese(DonaldErvinKnuth) & ComputerScientist(DonaldErvinKnuth) & Mathematician(DonaldErvinKnuth) & ProfessorEmeritus(DonaldErvinKnuth, StanfordUniversity)\n\nTEXT: Knuth has been called the \"enemy of the analysis of algorithms.\"\nFOL: Called(DonaldErvinKnuth, \"enemy of the analysis of algorithms.\")\n\nTEXT: A Chinese scientist has been called the \"enemy of the analysis of algorithms\".\nFOL: exists x. (Chinese(x) & Scientist(x) -> Called(x, \"enemy of the analysis of algorithms.\"))\n\nANSWER: True\nProcessed: True", "Generation 6:\nTEXT: Donald Ervin Knuth is a Chinese computer scientist, mathematician, and Professor Emeritus at Stanford University.\nFOL: Chinese(DonaldErvinKnuth) & ComputerScientist(DonaldErvinKnuth) & Mathematician(DonaldErvinKnuth) & ProfessorEmeritus(DonaldErvinKnuth, StanfordUniversity)\n\nTEXT: Knuth has been called the \"enemy of the analysis of algorithms.\"\nFOL: Called(DonaldErvinKnuth, \"enemy of the analysis of algorithms\")\n\nTEXT: A Chinese scientist has been called the \"enemy of the analysis of algorithms\".\nFOL: exists x. (Chinese(x) & Scientist(x) & Called(x, \"enemy of the analysis of algorithms\"))\n\nANSWER: True\nProcessed: True", "Generation 7:\nTEXT: Donald Ervin Knuth is a Chinese computer scientist, mathematician, and Professor Emeritus at Stanford University.\nFOL: Chinese(DonaldErvinKnuth) & ComputerScientist(DonaldErvinKnuth) & Mathematician(DonaldErvinKnuth) & ProfessorEmeritus(DonaldErvinKnuth, StanfordUniversity)\n\nTEXT: Knuth has been called the \"enemy of the analysis of algorithms.\"\nFOL: Called(DonaldErvinKnuth, EnemyOfAnalysisOfAlgorithms)\n\nTEXT: A Chinese scientist has been called the \"enemy of the analysis of algorithms\".\nFOL: exists x. (Chinese(x) & Scientist(x) -> Called(x, EnemyOfAnalysisOfAlgorithms))\n\nANSWER: True\nProcessed: True", "Generation 8:\nTEXT: Donald Ervin Knuth is a Chinese computer scientist, mathematician, and Professor Emeritus at Stanford University.\nFOL: Chinese(DonaldErvinKnuth) & ComputerScientist(DonaldErvinKnuth) & Mathematician(DonaldErvinKnuth) & ProfessorEmeritus(DonaldErvinKnuth, StanfordUniversity)\n\nTEXT: Knuth has been called the \"enemy of the analysis of algorithms.\"\nFOL: Called(DonaldErvinKnuth, \"enemy of the analysis of algorithms\")\n\nTEXT: A Chinese scientist has been called the \"enemy of the analysis of algorithms\".\nFOL: exists x. (Chinese(x) & Scientist(x) & (AnalysisOfAlgorithms(x) & Called(x, \"enemy\")))\n\nANSWER: True\nProcessed: True", "Generation 9:\nTEXT: Donald Ervin Knuth is a Chinese computer scientist, mathematician, and Professor Emeritus at Stanford University.\nFOL: Chinese(DonaldErvinKnuth) & ComputerScientist(DonaldErvinKnuth) & Mathematician(DonaldErvinKnuth) & ProfessorEmeritus(DonaldErvinKnuth, StanfordUniversity)\n\nTEXT: Knuth has been called the \"enemy of the analysis of algorithms.\"\nFOL: EnemyOfAnalysisOfAlgorithms(DonaldErvinKnuth)\n\nTEXT: A Chinese scientist has been called the \"enemy of the analysis of algorithms\".\nFOL: exists x. (Chinese(x) & Scientist(x) & EnemyOfAnalysisOfAlgorithms(x))\n\nANSWER: True\nProcessed: True", "Generation 10:\nTEXT: Donald Ervin Knuth is a Chinese computer scientist, mathematician, and Professor Emeritus at Stanford University.\nFOL: Chinese(DonaldErvinKnuth) & ComputerScientist(DonaldErvinKnuth) & Mathematician(DonaldErvinKnuth) & ProfessorEmeritus(DonaldErvinKnuth, StanfordUniversity)\nTEXT: Knuth has been called the \"enemy of the analysis of algorithms.\"\nFOL: EnemyOf(AnalysisOfAlgorithms, DonaldErvinKnuth)\nTEXT: A Chinese scientist has been called the \"enemy of the analysis of algorithms\".\nFOL: exists x. (Chinese(x) & Scientist(x) & EnemyOf(AnalysisOfAlgorithms, x))\n\nANSWER: True\nProcessed: True\n\nReference: True\n========================================"], "answers": ["True", "True", "True", "True", "True", "True", "True", "True", "True", "True"]}
{"idx": 36, "prompt": "The following is a first-order logic (FOL) problem.\nThe problem is to determine whether the conclusion follows from the premises.\nThe premises are given in the form of a set of first-order logic sentences.\nThe conclusion is given in the form of a single first-order logic sentence.\nThe task is to translate each of the premises and conclusions into FOL expressions.and then to evaluate the conclusion as ANSWER: True, ANSWER: False, or ANSWER: Uncertain given the premises. The output should follow format TEXT: \nFOL: \nTEXT: \nFOL:... ANSWER: \n\n\n<PREMISES>\nAll biodegradable things are environment-friendly.\nAll woodware is biodegradable.\nAll paper is woodware.\nNothing is a good thing and also a bad thing.\nAll environment-friendly things are good.\nA worksheet is either paper or environment-friendly.\n</PREMISES>\n<CONCLUSION>\nA worksheet is not biodegradable.\n</CONCLUSION>\n<EVALUATE>\nTEXT: All biodegradable things are environment-friendly.\nFOL: all x. (Biodegradable(x) -> EnvironmentFriendly(x))\nTEXT: All woodware is biodegradable.\nFOL: all x. (Woodware(x) -> Biodegradable(x))\nTEXT: All paper is woodware.\nFOL: all x. (Paper(x) -> Woodware(x))\nTEXT: Nothing is a good thing and also a bad thing.\nFOL: -(exists x. (Good(x) & Bad(x)))\nTEXT: All environment-friendly things are good.\nFOL: all x. (EnvironmentFriendly(x) -> Good(x))\nTEXT: A worksheet is either paper or environment-friendly.\nFOL: ((Paper(Worksheet) & -EnvironmentFriendly(Worksheet)) | (-Paper(Worksheet) & EnvironmentFriendly(Worksheet)))\nTEXT: A worksheet is not biodegradable.\nFOL: -Dispensable(Worksheet)\n\nANSWER: Uncertain\n</EVALUATE>\n\n<PREMISES>\nA La Liga soccer team ranks higher than another La Liga soccer team if it receives more points.\nIf there are two La Liga soccer teams and neither has more points than the other, then the team which receives more points from the games between the two teams ranks higher.\nReal Madrid and Barcelona are both La Liga soccer teams.\nReal Madrid received more points than Barcelona.\nNeither Real Madrid nor Barcelona received more points from the games between them.\n</PREMISES>\n<CONCLUSION>\nReal Madrid ranks higher than Barcelona.\n</CONCLUSION>\n<EVALUATE>\nTEXT: A La Liga soccer team ranks higher than another La Liga soccer team if it receives more points.\nFOL: all x. all y. (LaLigaSoccerTeam(x) & LaLigaSoccerTeam(y) & MorePoints(x, y) -> RankHigherThan(x, y))\nTEXT: If there are two La Liga soccer teams and neither has more points than the other, then the team which receives more points from the games between the two teams ranks higher.\nFOL: all x. all y. (LaLigaSoccerTeam(x) & LaLigaSoccerTeam(y) & -MorePoints(x, y) & -MorePoints(y, x) & MorePointsInGameBetween(x, y) ->  RankHigherThan(x, y))\nTEXT: Real Madrid and Barcelona are both La Liga soccer teams.\nFOL: LaLigaSoccerTeam(RealMadrid) & LaLigaSoccerTeam(Barcelona)\nTEXT: Real Madrid received more points than Barcelona.\nFOL: MorePoints(RealMadrid, Barcelona)\nTEXT: Neither Real Madrid nor Barcelona received more points from the games between them.\nFOL: -MorePointsInGameBetween(RealMadrid, Barcelona) & -MorePointsInGameBetween(Barcelona, RealMadrid)\nTEXT: Real Madrid ranks higher than Barcelona.\nFOL: HigherRank(RealMadrid, Barcelona)\n\nANSWER: True\n</EVALUATE>\n\n<PREMISES>\nAll professional athletes spend most of their time on sports.\nAll Olympic gold medal winners are professional athletes.\nNo full-time scientists spend the majority of their time on sports.\nAll Nobel physics laureates are full-time scientists.\nAmy spends the most time on sports, or Amy is an Olympic gold medal winner.\nIf Amy is not a Nobel physics laureate, then Amy is not an Olympic gold medal winner.\n</PREMISES>\n<CONCLUSION>\nIf Amy is not an Olympic gold medal winner, then Amy is a Nobel physics laureate.\n</CONCLUSION>\n<EVALUATE>\nTEXT: All professional athletes spend most of their time on sports.\nFOL: all x. (ProfessionalAthlete(x) -> SpendOn(x, MostOfTheirTime, Sports))\nTEXT: All Olympic gold medal winners are professional athletes.\nFOL: all x. (OlympicGoldMedalWinner(x) -> ProfessionalAthlete(x))\nTEXT: No full-time scientists spend the majority of their time on sports.\nFOL: all x. (FullTimeScientist(x) -> -SpendOn(x, MostOfTheirTime, Sports))\nTEXT: All Nobel physics laureates are full-time scientists.\nFOL: all x. (NobelPhysicsLaureate(x) -> FullTimeScientist(x))\nTEXT: Amy spends the most time on sports, or Amy is an Olympic gold medal winner.\nFOL: SpendOn(Amy, MostOfTheirTime, Sports) | OlympicGoldMedalWinner(Amy)\nTEXT: If Amy is not a Nobel physics laureate, then Amy is not an Olympic gold medal winner.\nFOL: -NobelPhysicsLaureate(Amy) -> -OlympicGoldMedalWinner(Amy)\nTEXT: If Amy is not an Olympic gold medal winner, then Amy is a Nobel physics laureate.\nFOL: -OlympicGoldMedalWinner(Amy) -> NobelLaureate(Amy)\n\nANSWER: False\n</EVALUATE>\n\n<PREMISES>\nIf a person pays their taxes, then they contribute to the country.\nEveryone who works for a government department pays a tax on their salary.\nEveryone in the army is an employee of a government department.\nEveryone convicted of murder goes to prison.\nEveryone who has been to prison has a criminal record.\nJames was either once convicted of murder, or spent time in prison.\nJames either has a criminal record, or pays his taxes.\n</PREMISES>\n<CONCLUSION>\nJames does not contribute to the country.\n</CONCLUSION>\n<EVALUATE>\nTEXT: If a person pays their taxes, then they contribute to the country.\nFOL: all x. (Taxpayer(x) -> ContributeTo(x, Country))\nTEXT: Everyone who works for a government department pays a tax on their salary.\nFOL: all x. (WorkFor(x, GovernmentAgency) -> Taxpayer(x))\nTEXT: Everyone in the army is an employee of a government department.\nFOL: all x. (ServesIn(x, TheArmy) -> WorkFor(x, GovernmentAgency))\nTEXT: Everyone convicted of murder goes to prison.\nFOL: all x. (SentencedForMurder(x) -> Imprisoned(x))\nTEXT: Everyone who has been to prison has a criminal record.\nFOL: all x. (Imprisoned((x) -> Has(x, CriminalRecord))\nTEXT: James was either once convicted of murder, or spent time in prison.\nFOL: ((SentencedForMurder(James) & -Imprisoned(James)) | (-SentencedForMurder(James) & Imprisoned(James)))\nTEXT: James either has a criminal record, or pays his taxes.\nFOL: ((Has(James, CriminalRecord) & -Taxpayer(James)) | (-Has(James, CriminalRecord) & Taxpayer(James)))\nTEXT: James does not contribute to the country.\nFOL: ContributeToCountry(James)\n\nANSWER: Uncertain\n</EVALUATE>\n\n<PREMISES>\nNo songs are visuals.\nAll folk songs are songs.\nAll videos are visuals.\nAll movies are videos.\nAll sci-fi movies are movies.\nInception is a sci-fi movie.\nMac is neither a folk song nor a sci-fi movie.\n</PREMISES>\n<CONCLUSION>\nInception is a folk song.\n</CONCLUSION>\n<EVALUATE>\nTEXT: No songs are visuals.\nFOL: all x. (Song(x) -> -Visual(x))\nTEXT: All folk songs are songs.\nFOL: all x. (FolkSong(x) -> Song(x))\nTEXT: All videos are visuals.\nFOL: all x. (Video(x) -> Visual(x))\nTEXT: All movies are videos.\nFOL: all x. (Movie(x) -> Video(x))\nTEXT: All sci-fi movies are movies.\nFOL: all x. (ScifiMovie(x) -> Movie(x))\nTEXT: Inception is a sci-fi movie.\nFOL: ScifiMovie(Inception)\nTEXT: Mac is neither a folk song nor a sci-fi movie.\nFOL: -FolkSong(Mac) & -ScifiMovie(Mac)\nTEXT: Inception is a folk song.\nFOL: FolkSong(Inception)\n\nANSWER: False\n</EVALUATE>\n\n<PREMISES>\nEvery chef can cook.\nSome people who aren’t chefs can cook.\nPeople who cook can make scrambled eggs and pasta.\nIf someone can make cookies and muffins, they are a baker.\nBakers who can also make scrambled eggs can make a good breakfast.\nLuke can make cookies, scrambled eggs, and muffins, but not pasta.\n</PREMISES>\n<CONCLUSION>\nLuke is a chef.\n</CONCLUSION>\n<EVALUATE>\nTEXT: Every chef can cook.\nFOL: all x. (Chef(x) -> Can(x, Cook))\nTEXT: Some people who aren’t chefs can cook.\nFOL: exists x. (-Chef(x) & Can(x, Cook))\nTEXT: People who cook can make scrambled eggs and pasta.\nFOL: all x. (Can(x, Cook) -> (CanMake(x, ScrambledEggs) & CanMake(x, Pasta)))\nTEXT: If someone can make cookies and muffins, they are a baker.\nFOL: all x. (CanMake(x, Cookies) & CanMake(x, Muffins) -> Baker(x))\nTEXT: Bakers who can also make scrambled eggs can make a good breakfast.\nFOL: all x. ((Baker(x) & CanMake(x, ScrambledEggs)) -> CanMake(x, GoodBreakfast))\nTEXT: Luke can make cookies, scrambled eggs, and muffins, but not pasta.\nFOL: CanMake(Luke, Cookies) & (CanMake(Luke, ScrambledEggs) & CanMake(Luke, Muffins) & -CanMake(Luke, Pasta)\nTEXT: Luke is a chef.\nFOL: MakeGoodBreakfast(Luke)\n\nANSWER: False\n</EVALUATE>\n\n<PREMISES>\nETS develops various standardized tests primarily in the United States for K-12 and higher education.\nETS administers international tests, including the TOEFL, TOEIC, GRE, and subject tests.\nMany of the assessments ETS develops are associated with entry to the US tertiary and quaternary education institutions.\nETS also develops K-12 statewide assessments used for accountability testing in many states.\n</PREMISES>\n<CONCLUSION>\nETS doesn't administer tests internationally.\n</CONCLUSION>\n<EVALUATE>\nTEXT: ETS develops various standardized tests primarily in the United States for K-12 and higher education.\nFOL: exists x. exists y. (Develop(eTS, x) & Develop(eTS, y) & StandardizedTest(x) & StandardizedTest(y) & In(x, UnitedState) & In(y, UnitedState) & For(x, kOneTwoAndHigherEducation) & For(y, kOneTwoAndHigherEducation))\nTEXT: ETS administers international tests, including the TOEFL, TOEIC, GRE, and subject tests.\nFOL: exists x. (Administer(eTS, x) & InternationalTest(x) & (TOEFL(x) | TOEIC(x) | GRE(x) | SubjectTest(x)))\nTEXT: Many of the assessments ETS develops are associated with entry to the US tertiary and quaternary education institutions.\nFOL: exists x. (Develop(eTS, x) & AssociatedWith(x, EntryToUSEducationInstitution))\nTEXT: ETS also develops K-12 statewide assessments used for accountability testing in many states.\nFOL: exists x. (Develop(eTS, x) & StateWideAssesment(x) & UsedFor(x, AccountabilityTesting))\nTEXT: ETS doesn't administer tests internationally.\nFOL: exists x. (Develops(Ets, x) & For(x, k-OneTwoandhighereducation)) & exists x. (Develops(Ets, x) & AssociatedWith(x, Entrytouseducationinstitutions))\n\nANSWER: False\n</EVALUATE>\n\n<PREMISES>\nDaveed Diggs is an actor and film producer.\nDaveed Diggs played two roles in the musical Hamilton on Broadway.\nOne of the actors from Hamilton won the best actor award.\nThe actor playing Thomas Jefferson won the best actor award.\nDaveed Diggs played Thomas Jefferson.\nMusicals on Broadway are not films.\n</PREMISES>\n<CONCLUSION>\nDaveed Diggs won the best actor award.\n</CONCLUSION>\n<EVALUATE>\nTEXT: Daveed Diggs is an actor and film producer.\nFOL: Actor(DaveedDiggs) & FilmProducer(DaveedDiggs)\nTEXT: Daveed Diggs played two roles in the musical Hamilton on Broadway.\nFOL: exists x. exists y.(PlaysIn(DaveedDiggs, x, Hamilton) & (-(x=y)) & PlaysIn(DaveedDiggs, y, Hamilton)) & OnBroadway(Hamilton) & Musical(Hamilton)\nTEXT: One of the actors from Hamilton won the best actor award.\nFOL: exists x. exists y.(Actor(x) & PlaysIn(x, y, Hamilton) & Wins(x, BestActorAward))\nTEXT: The actor playing Thomas Jefferson won the best actor award.\nFOL: exists x. (Actor(x) & PlaysIn(x, ThomasJefferson, Hamilton) & Wins(x, BestActorAward))\nTEXT: Daveed Diggs played Thomas Jefferson.\nFOL: Plays(DaveedDiggs, ThomasJefferson)\nTEXT: Musicals on Broadway are not films.\nFOL: all x. ((Musical(x) & OnBroadway(x)) -> -Film(x))\nTEXT: Daveed Diggs won the best actor award.\nFOL: exists x. (BRICS(x) & Speaks(x, Hindi))\n\nANSWER: True\n</EVALUATE>\n\n<PREMISES>\nDonald Ervin Knuth is a Chinese computer scientist, mathematician, and Professor Emeritus at Stanford University.\nKnuth has been called the \"enemy of the analysis of algorithms.\"\n</PREMISES>\n<CONCLUSION>\nA mathematician has been called the \"enemy of the analysis of algorithms\".\n</CONCLUSION>\n<EVALUATE>", "raw_generations": ["Generation 1:\nTEXT: Donald Ervin Knuth is a mathematician.\nFOL: Mathematician(Knuth)\nTEXT: Donald Ervin Knuth has been called the \"enemy of the analysis of algorithms.\"\nFOL: EnemyOfAnalysisOfAlgorithms(Knuth)\nTEXT: A mathematician has been called the \"enemy of the analysis of algorithms\".\nFOL: exists x. Mathematician(x) & EnemyOfAnalysisOfAlgorithms(x)\n\nANSWER: True\nProcessed: True", "Generation 2:\nTEXT: Donald Ervin Knuth is a Chinese computer scientist, mathematician, and Professor Emeritus at Stanford University.\nFOL: Mathematician(DonaldErvinKnuth) & Chinese(DonaldErvinKnuth) & ComputerScientist(DonaldErvinKnuth) & ProfessorEmeritus(DonaldErvinKnuth, StanfordUniversity)\n\nTEXT: Knuth has been called the \"enemy of the analysis of algorithms.\"\nFOL: Called(DonaldErvinKnuth, \"enemy of the analysis of algorithms\")\n\nTEXT: A mathematician has been called the \"enemy of the analysis of algorithms\".\nFOL: exists x. Mathematician(x) -> Called(x, \"enemy of the analysis of algorithms\")\n\nANSWER: True\nProcessed: True", "Generation 3:\nTEXT: Donald Ervin Knuth is a Chinese computer scientist, mathematician, and Professor Emeritus at Stanford University.\nFOL: Mathematician(DonaldErvinKnuth) & Chinese(DonaldErvinKnuth) & ComputerScientist(DonaldErvinKnuth) & ProfessorEmeritus(DonaldErvinKnuth, StanfordUniversity)\n\nTEXT: Knuth has been called the \"enemy of the analysis of algorithms.\"\nFOL: Called(DonaldErvinKnuth, \"enemy of the analysis of algorithms.\")\n\nTEXT: A mathematician has been called the \"enemy of the analysis of algorithms\".\nFOL: exists x. Mathematician(x) -> Called(x, \"enemy of the analysis of algorithms.\")\n\nANSWER: True\nProcessed: True", "Generation 4:\nTEXT: Donald Ervin Knuth is a Chinese computer scientist, mathematician, and Professor Emeritus at Stanford University.\nFOL: Chinese(DonaldErvinKnuth) & ComputerScientist(DonaldErvinKnuth) & Mathematician(DonaldErvinKnuth) & ProfessorEmeritus(DonaldErvinKnuth, StanfordUniversity)\n\nTEXT: Knuth has been called the \"enemy of the analysis of algorithms.\"\nFOL: Called(Someone, DonaldErvinKnuth, \"enemy of the analysis of algorithms\")\n\nTEXT: A mathematician has been called the \"enemy of the analysis of algorithms\".\nFOL: exists x. (Mathematician(x) & Called(Someone, x, \"enemy of the analysis of algorithms\"))\n\nANSWER: True\nProcessed: True", "Generation 5:\nTEXT: Donald Ervin Knuth is a Chinese computer scientist, mathematician, and Professor Emeritus at Stanford University.\nFOL: Chinese(DonaldErvinKnuth) & ComputerScientist(DonaldErvinKnuth) & Mathematician(DonaldErvinKnuth) & ProfessorEmeritus(DonaldErvinKnuth, StanfordUniversity)\n\nTEXT: Knuth has been called the \"enemy of the analysis of algorithms.\"\nFOL: EnemyOf(AnalysisOfAlgorithms, DonaldErvinKnuth)\n\nTEXT: A mathematician has been called the \"enemy of the analysis of algorithms\".\nFOL: exists x. (Mathematician(x) -> EnemyOf(AnalysisOfAlgorithms, x))\n\nANSWER: True\nProcessed: True", "Generation 6:\nTEXT: Donald Ervin Knuth is a mathematician.\nFOL: Mathematician(DonaldErvinKnuth)\nTEXT: Donald Ervin Knuth has been called the \"enemy of the analysis of algorithms.\"\nFOL: Called(someone, DonaldErvinKnuth, \"enemy of the analysis of algorithms\")\nTEXT: A mathematician has been called the \"enemy of the analysis of algorithms\".\nFOL: exists x. (Mathematician(x) -> Called(someone, x, \"enemy of the analysis of algorithms\"))\n\nANSWER: True\nProcessed: True", "Generation 7:\nFOL:\nall x. (Mathematician(x) -> EnemyOfAnalysisOfAlgorithms(x))\n\nANSWER: True\n(Since Donald Ervin Knuth is a mathematician and has been called the \"enemy of the analysis of algorithms\", it follows that a mathematician has been called the \"enemy of the analysis of algorithms\")\nProcessed: True", "Generation 8:\nTEXT: Donald Ervin Knuth is a Chinese computer scientist, mathematician, and Professor Emeritus at Stanford University.\nFOL: Mathematician(DonaldErvinKnuth) & ComputerScientist(DonaldErvinKnuth) & ProfessorEmeritus(DonaldErvinKnuth, StanfordUniversity) & Chinese(DonaldErvinKnuth)\n\nTEXT: Knuth has been called the \"enemy of the analysis of algorithms.\"\nFOL: Called(someone, DonaldErvinKnuth, \"enemy of the analysis of algorithms\")\n\nTEXT: A mathematician has been called the \"enemy of the analysis of algorithms\".\nFOL: exists x. Mathematician(x) & Called(someone, x, \"enemy of the analysis of algorithms\")\n\nANSWER: True\nProcessed: True", "Generation 9:\nTEXT: Donald Ervin Knuth is a Chinese computer scientist, mathematician, and Professor Emeritus at Stanford University.\nFOL: Mathematician(DonaldErvinKnuth) & Chinese(DonaldErvinKnuth) & ComputerScientist(DonaldErvinKnuth) & ProfessorEmeritus(DonaldErvinKnuth, StanfordUniversity)\n\nTEXT: Knuth has been called the \"enemy of the analysis of algorithms.\"\nFOL: Called(Someone, DonaldErvinKnuth, \"enemy of the analysis of algorithms.\")\n\nTEXT: A mathematician has been called the \"enemy of the analysis of algorithms\".\nFOL: exists x. Mathematician(x) & Called(Someone, x, \"enemy of the analysis of algorithms.\")\n\nANSWER: True\nProcessed: True", "Generation 10:\nFOL:\nall x. (Mathematician(x) -> HasBeenCalled(x, \"enemy of the analysis of algorithms\"))\n\nTEXT: Donald Ervin Knuth is a Chinese computer scientist, mathematician, and Professor Emeritus at Stanford University.\nFOL: Chinese(DonaldErvinKnuth) & ComputerScientist(DonaldErvinKnuth) & Mathematician(DonaldErvinKnuth) & ProfessorEmeritus(DonaldErvinKnuth, StanfordUniversity)\n\nTEXT: Knuth has been called the \"enemy of the analysis of algorithms.\"\nFOL: HasBeenCalled(DonaldErvinKnuth, \"enemy of the analysis of algorithms\")\n\nTEXT: A mathematician has been called the \"enemy of the analysis of algorithms\".\nFOL: exists x. (Mathematician(x) & HasBeenCalled(x, \"enemy of the analysis of algorithms\"))\n\nANSWER: True\nProcessed: True\n\nReference: True\n========================================"], "answers": ["True", "True", "True", "True", "True", "True", "True", "True", "True", "True"]}
{"idx": 37, "prompt": "The following is a first-order logic (FOL) problem.\nThe problem is to determine whether the conclusion follows from the premises.\nThe premises are given in the form of a set of first-order logic sentences.\nThe conclusion is given in the form of a single first-order logic sentence.\nThe task is to translate each of the premises and conclusions into FOL expressions.and then to evaluate the conclusion as ANSWER: True, ANSWER: False, or ANSWER: Uncertain given the premises. The output should follow format TEXT: \nFOL: \nTEXT: \nFOL:... ANSWER: \n\n\n<PREMISES>\nAll biodegradable things are environment-friendly.\nAll woodware is biodegradable.\nAll paper is woodware.\nNothing is a good thing and also a bad thing.\nAll environment-friendly things are good.\nA worksheet is either paper or environment-friendly.\n</PREMISES>\n<CONCLUSION>\nA worksheet is not biodegradable.\n</CONCLUSION>\n<EVALUATE>\nTEXT: All biodegradable things are environment-friendly.\nFOL: all x. (Biodegradable(x) -> EnvironmentFriendly(x))\nTEXT: All woodware is biodegradable.\nFOL: all x. (Woodware(x) -> Biodegradable(x))\nTEXT: All paper is woodware.\nFOL: all x. (Paper(x) -> Woodware(x))\nTEXT: Nothing is a good thing and also a bad thing.\nFOL: -(exists x. (Good(x) & Bad(x)))\nTEXT: All environment-friendly things are good.\nFOL: all x. (EnvironmentFriendly(x) -> Good(x))\nTEXT: A worksheet is either paper or environment-friendly.\nFOL: ((Paper(Worksheet) & -EnvironmentFriendly(Worksheet)) | (-Paper(Worksheet) & EnvironmentFriendly(Worksheet)))\nTEXT: A worksheet is not biodegradable.\nFOL: -Dispensable(Worksheet)\n\nANSWER: Uncertain\n</EVALUATE>\n\n<PREMISES>\nA La Liga soccer team ranks higher than another La Liga soccer team if it receives more points.\nIf there are two La Liga soccer teams and neither has more points than the other, then the team which receives more points from the games between the two teams ranks higher.\nReal Madrid and Barcelona are both La Liga soccer teams.\nReal Madrid received more points than Barcelona.\nNeither Real Madrid nor Barcelona received more points from the games between them.\n</PREMISES>\n<CONCLUSION>\nReal Madrid ranks higher than Barcelona.\n</CONCLUSION>\n<EVALUATE>\nTEXT: A La Liga soccer team ranks higher than another La Liga soccer team if it receives more points.\nFOL: all x. all y. (LaLigaSoccerTeam(x) & LaLigaSoccerTeam(y) & MorePoints(x, y) -> RankHigherThan(x, y))\nTEXT: If there are two La Liga soccer teams and neither has more points than the other, then the team which receives more points from the games between the two teams ranks higher.\nFOL: all x. all y. (LaLigaSoccerTeam(x) & LaLigaSoccerTeam(y) & -MorePoints(x, y) & -MorePoints(y, x) & MorePointsInGameBetween(x, y) ->  RankHigherThan(x, y))\nTEXT: Real Madrid and Barcelona are both La Liga soccer teams.\nFOL: LaLigaSoccerTeam(RealMadrid) & LaLigaSoccerTeam(Barcelona)\nTEXT: Real Madrid received more points than Barcelona.\nFOL: MorePoints(RealMadrid, Barcelona)\nTEXT: Neither Real Madrid nor Barcelona received more points from the games between them.\nFOL: -MorePointsInGameBetween(RealMadrid, Barcelona) & -MorePointsInGameBetween(Barcelona, RealMadrid)\nTEXT: Real Madrid ranks higher than Barcelona.\nFOL: HigherRank(RealMadrid, Barcelona)\n\nANSWER: True\n</EVALUATE>\n\n<PREMISES>\nAll professional athletes spend most of their time on sports.\nAll Olympic gold medal winners are professional athletes.\nNo full-time scientists spend the majority of their time on sports.\nAll Nobel physics laureates are full-time scientists.\nAmy spends the most time on sports, or Amy is an Olympic gold medal winner.\nIf Amy is not a Nobel physics laureate, then Amy is not an Olympic gold medal winner.\n</PREMISES>\n<CONCLUSION>\nIf Amy is not an Olympic gold medal winner, then Amy is a Nobel physics laureate.\n</CONCLUSION>\n<EVALUATE>\nTEXT: All professional athletes spend most of their time on sports.\nFOL: all x. (ProfessionalAthlete(x) -> SpendOn(x, MostOfTheirTime, Sports))\nTEXT: All Olympic gold medal winners are professional athletes.\nFOL: all x. (OlympicGoldMedalWinner(x) -> ProfessionalAthlete(x))\nTEXT: No full-time scientists spend the majority of their time on sports.\nFOL: all x. (FullTimeScientist(x) -> -SpendOn(x, MostOfTheirTime, Sports))\nTEXT: All Nobel physics laureates are full-time scientists.\nFOL: all x. (NobelPhysicsLaureate(x) -> FullTimeScientist(x))\nTEXT: Amy spends the most time on sports, or Amy is an Olympic gold medal winner.\nFOL: SpendOn(Amy, MostOfTheirTime, Sports) | OlympicGoldMedalWinner(Amy)\nTEXT: If Amy is not a Nobel physics laureate, then Amy is not an Olympic gold medal winner.\nFOL: -NobelPhysicsLaureate(Amy) -> -OlympicGoldMedalWinner(Amy)\nTEXT: If Amy is not an Olympic gold medal winner, then Amy is a Nobel physics laureate.\nFOL: -OlympicGoldMedalWinner(Amy) -> NobelLaureate(Amy)\n\nANSWER: False\n</EVALUATE>\n\n<PREMISES>\nIf a person pays their taxes, then they contribute to the country.\nEveryone who works for a government department pays a tax on their salary.\nEveryone in the army is an employee of a government department.\nEveryone convicted of murder goes to prison.\nEveryone who has been to prison has a criminal record.\nJames was either once convicted of murder, or spent time in prison.\nJames either has a criminal record, or pays his taxes.\n</PREMISES>\n<CONCLUSION>\nJames does not contribute to the country.\n</CONCLUSION>\n<EVALUATE>\nTEXT: If a person pays their taxes, then they contribute to the country.\nFOL: all x. (Taxpayer(x) -> ContributeTo(x, Country))\nTEXT: Everyone who works for a government department pays a tax on their salary.\nFOL: all x. (WorkFor(x, GovernmentAgency) -> Taxpayer(x))\nTEXT: Everyone in the army is an employee of a government department.\nFOL: all x. (ServesIn(x, TheArmy) -> WorkFor(x, GovernmentAgency))\nTEXT: Everyone convicted of murder goes to prison.\nFOL: all x. (SentencedForMurder(x) -> Imprisoned(x))\nTEXT: Everyone who has been to prison has a criminal record.\nFOL: all x. (Imprisoned((x) -> Has(x, CriminalRecord))\nTEXT: James was either once convicted of murder, or spent time in prison.\nFOL: ((SentencedForMurder(James) & -Imprisoned(James)) | (-SentencedForMurder(James) & Imprisoned(James)))\nTEXT: James either has a criminal record, or pays his taxes.\nFOL: ((Has(James, CriminalRecord) & -Taxpayer(James)) | (-Has(James, CriminalRecord) & Taxpayer(James)))\nTEXT: James does not contribute to the country.\nFOL: ContributeToCountry(James)\n\nANSWER: Uncertain\n</EVALUATE>\n\n<PREMISES>\nNo songs are visuals.\nAll folk songs are songs.\nAll videos are visuals.\nAll movies are videos.\nAll sci-fi movies are movies.\nInception is a sci-fi movie.\nMac is neither a folk song nor a sci-fi movie.\n</PREMISES>\n<CONCLUSION>\nInception is a folk song.\n</CONCLUSION>\n<EVALUATE>\nTEXT: No songs are visuals.\nFOL: all x. (Song(x) -> -Visual(x))\nTEXT: All folk songs are songs.\nFOL: all x. (FolkSong(x) -> Song(x))\nTEXT: All videos are visuals.\nFOL: all x. (Video(x) -> Visual(x))\nTEXT: All movies are videos.\nFOL: all x. (Movie(x) -> Video(x))\nTEXT: All sci-fi movies are movies.\nFOL: all x. (ScifiMovie(x) -> Movie(x))\nTEXT: Inception is a sci-fi movie.\nFOL: ScifiMovie(Inception)\nTEXT: Mac is neither a folk song nor a sci-fi movie.\nFOL: -FolkSong(Mac) & -ScifiMovie(Mac)\nTEXT: Inception is a folk song.\nFOL: FolkSong(Inception)\n\nANSWER: False\n</EVALUATE>\n\n<PREMISES>\nEvery chef can cook.\nSome people who aren’t chefs can cook.\nPeople who cook can make scrambled eggs and pasta.\nIf someone can make cookies and muffins, they are a baker.\nBakers who can also make scrambled eggs can make a good breakfast.\nLuke can make cookies, scrambled eggs, and muffins, but not pasta.\n</PREMISES>\n<CONCLUSION>\nLuke is a chef.\n</CONCLUSION>\n<EVALUATE>\nTEXT: Every chef can cook.\nFOL: all x. (Chef(x) -> Can(x, Cook))\nTEXT: Some people who aren’t chefs can cook.\nFOL: exists x. (-Chef(x) & Can(x, Cook))\nTEXT: People who cook can make scrambled eggs and pasta.\nFOL: all x. (Can(x, Cook) -> (CanMake(x, ScrambledEggs) & CanMake(x, Pasta)))\nTEXT: If someone can make cookies and muffins, they are a baker.\nFOL: all x. (CanMake(x, Cookies) & CanMake(x, Muffins) -> Baker(x))\nTEXT: Bakers who can also make scrambled eggs can make a good breakfast.\nFOL: all x. ((Baker(x) & CanMake(x, ScrambledEggs)) -> CanMake(x, GoodBreakfast))\nTEXT: Luke can make cookies, scrambled eggs, and muffins, but not pasta.\nFOL: CanMake(Luke, Cookies) & (CanMake(Luke, ScrambledEggs) & CanMake(Luke, Muffins) & -CanMake(Luke, Pasta)\nTEXT: Luke is a chef.\nFOL: MakeGoodBreakfast(Luke)\n\nANSWER: False\n</EVALUATE>\n\n<PREMISES>\nETS develops various standardized tests primarily in the United States for K-12 and higher education.\nETS administers international tests, including the TOEFL, TOEIC, GRE, and subject tests.\nMany of the assessments ETS develops are associated with entry to the US tertiary and quaternary education institutions.\nETS also develops K-12 statewide assessments used for accountability testing in many states.\n</PREMISES>\n<CONCLUSION>\nETS doesn't administer tests internationally.\n</CONCLUSION>\n<EVALUATE>\nTEXT: ETS develops various standardized tests primarily in the United States for K-12 and higher education.\nFOL: exists x. exists y. (Develop(eTS, x) & Develop(eTS, y) & StandardizedTest(x) & StandardizedTest(y) & In(x, UnitedState) & In(y, UnitedState) & For(x, kOneTwoAndHigherEducation) & For(y, kOneTwoAndHigherEducation))\nTEXT: ETS administers international tests, including the TOEFL, TOEIC, GRE, and subject tests.\nFOL: exists x. (Administer(eTS, x) & InternationalTest(x) & (TOEFL(x) | TOEIC(x) | GRE(x) | SubjectTest(x)))\nTEXT: Many of the assessments ETS develops are associated with entry to the US tertiary and quaternary education institutions.\nFOL: exists x. (Develop(eTS, x) & AssociatedWith(x, EntryToUSEducationInstitution))\nTEXT: ETS also develops K-12 statewide assessments used for accountability testing in many states.\nFOL: exists x. (Develop(eTS, x) & StateWideAssesment(x) & UsedFor(x, AccountabilityTesting))\nTEXT: ETS doesn't administer tests internationally.\nFOL: exists x. (Develops(Ets, x) & For(x, k-OneTwoandhighereducation)) & exists x. (Develops(Ets, x) & AssociatedWith(x, Entrytouseducationinstitutions))\n\nANSWER: False\n</EVALUATE>\n\n<PREMISES>\nDaveed Diggs is an actor and film producer.\nDaveed Diggs played two roles in the musical Hamilton on Broadway.\nOne of the actors from Hamilton won the best actor award.\nThe actor playing Thomas Jefferson won the best actor award.\nDaveed Diggs played Thomas Jefferson.\nMusicals on Broadway are not films.\n</PREMISES>\n<CONCLUSION>\nDaveed Diggs won the best actor award.\n</CONCLUSION>\n<EVALUATE>\nTEXT: Daveed Diggs is an actor and film producer.\nFOL: Actor(DaveedDiggs) & FilmProducer(DaveedDiggs)\nTEXT: Daveed Diggs played two roles in the musical Hamilton on Broadway.\nFOL: exists x. exists y.(PlaysIn(DaveedDiggs, x, Hamilton) & (-(x=y)) & PlaysIn(DaveedDiggs, y, Hamilton)) & OnBroadway(Hamilton) & Musical(Hamilton)\nTEXT: One of the actors from Hamilton won the best actor award.\nFOL: exists x. exists y.(Actor(x) & PlaysIn(x, y, Hamilton) & Wins(x, BestActorAward))\nTEXT: The actor playing Thomas Jefferson won the best actor award.\nFOL: exists x. (Actor(x) & PlaysIn(x, ThomasJefferson, Hamilton) & Wins(x, BestActorAward))\nTEXT: Daveed Diggs played Thomas Jefferson.\nFOL: Plays(DaveedDiggs, ThomasJefferson)\nTEXT: Musicals on Broadway are not films.\nFOL: all x. ((Musical(x) & OnBroadway(x)) -> -Film(x))\nTEXT: Daveed Diggs won the best actor award.\nFOL: exists x. (BRICS(x) & Speaks(x, Hindi))\n\nANSWER: True\n</EVALUATE>\n\n<PREMISES>\n\"Your Woman\" is a painting by the Indian one-person band White Town.\n\"Your Woman\" peaked at No. 1 on the UK Paintings Chart.\nIf a painting peaked at No.1 at a particular place, it was extremely popular.\n\"Your Woman\" peaked at No. 1 in Iceland, Israel, and Spain.\n</PREMISES>\n<CONCLUSION>\nWhite Town did not produce any popular paintings.\n</CONCLUSION>\n<EVALUATE>", "raw_generations": ["Generation 1:\nTEXT: \"Your Woman\" is a painting by the Indian one-person band White Town.\nFOL: Painting(YourWoman) & ProducedBy(WhiteTown, YourWoman)\n\nTEXT: \"Your Woman\" peaked at No. 1 on the UK Paintings Chart.\nFOL: PeakedAtOne(YourWoman, UKPaintingsChart)\n\nTEXT: If a painting peaked at No.1 at a particular place, it was extremely popular.\nFOL: all x. (PeakedAtOne(x, y) -> ExtremelyPopular(x))\n\nTEXT: \"Your Woman\" peaked at No. 1 in Iceland, Israel, and Spain.\nFOL: PeakedAtOne(YourWoman, Iceland) & PeakedAtOne(YourWoman, Israel) & PeakedAtOne(YourWoman, Spain)\n\nTEXT: White Town did not produce any popular paintings.\nFOL: all x. (ProducedBy(WhiteTown, x) -> -ExtremelyPopular(x))\n\nANSWER: False\nProcessed: False", "Generation 2:\nTEXT: \"Your Woman\" is a painting by the Indian one-person band White Town.\nFOL: Painting(YourWoman) & ProducedBy(WhiteTown, YourWoman)\n\nTEXT: \"Your Woman\" peaked at No. 1 on the UK Paintings Chart.\nFOL: PeakedAt(YourWoman, 1, UKPaintingsChart)\n\nTEXT: If a painting peaked at No.1 at a particular place, it was extremely popular.\nFOL: all x. (PeakedAt(x, 1, y) -> ExtremelyPopular(x))\n\nTEXT: \"Your Woman\" peaked at No. 1 in Iceland, Israel, and Spain.\nFOL: PeakedAt(YourWoman, 1, Iceland) & PeakedAt(YourWoman, 1, Israel) & PeakedAt(YourWoman, 1, Spain)\n\nTEXT: White Town did not produce any popular paintings.\nFOL: -(exists x. (Painting(x) & ProducedBy(WhiteTown, x) & ExtremelyPopular(x)))\n\nANSWER: True\nProcessed: True", "Generation 3:\nTEXT: \"Your Woman\" is a painting by the Indian one-person band White Town.\nFOL: Painting(\"Your Woman\", WhiteTown)\n\nTEXT: \"Your Woman\" peaked at No. 1 on the UK Paintings Chart.\nFOL: PeakedAtNo1(UKPaintingsChart, \"Your Woman\")\n\nTEXT: If a painting peaked at No.1 at a particular place, it was extremely popular.\nFOL: all x. (PeakedAtNo1(x, y) -> Popular(y))\n\nTEXT: \"Your Woman\" peaked at No. 1 in Iceland, Israel, and Spain.\nFOL: PeakedAtNo1(IcelandPaintingsChart, \"Your Woman\") & PeakedAtNo1(IsraelPaintingsChart, \"Your Woman\") & PeakedAtNo1(SpainPaintingsChart, \"Your Woman\")\n\nTEXT: White Town did not produce any popular paintings.\nFOL: -exists x. Popular(x) & Produced(WhiteTown, x)\n\nANSWER: Uncertain (The given premises do not provide enough information about the popularity of paintings in countries other than the UK, Iceland, Israel, and Spain.)\nProcessed: Uncertain", "Generation 4:\nTEXT: \"Your Woman\" is a painting by the Indian one-person band White Town.\nFOL: Painting(\"Your Woman\") & ProducedBy(WhiteTown, \"Your Woman\")\n\nTEXT: \"Your Woman\" peaked at No. 1 on the UK Paintings Chart.\nFOL: PeakedAt(1, \"Your Woman\", UKPaintingsChart)\n\nTEXT: If a painting peaked at No.1 at a particular place, it was extremely popular.\nFOL: all x. (PeakedAt(1, x, y) -> ExtremelyPopular(x))\n\nTEXT: \"Your Woman\" peaked at No. 1 in Iceland, Israel, and Spain.\nFOL: PeakedAt(1, \"Your Woman\", Iceland) & PeakedAt(1, \"Your Woman\", Israel) & PeakedAt(1, \"Your Woman\", Spain)\n\nTEXT: White Town did not produce any popular paintings.\nFOL: -ExtremelyPopular(\"Your Woman\")\n\nANSWER: False\nProcessed: False", "Generation 5:\nTEXT: \"Your Woman\" is a painting by the Indian one-person band White Town.\nFOL: Painting(\"Your Woman\") & ProducedBy(WhiteTown, \"Your Woman\")\n\nTEXT: \"Your Woman\" peaked at No. 1 on the UK Paintings Chart.\nFOL: PeakedAt(1, \"Your Woman\", UKPaintingsChart)\n\nTEXT: If a painting peaked at No.1 at a particular place, it was extremely popular.\nFOL: all x. (PeakedAt(1, x, y) -> ExtremelyPopular(x))\n\nTEXT: \"Your Woman\" peaked at No. 1 in Iceland, Israel, and Spain.\nFOL: PeakedAt(1, \"Your Woman\", Iceland) & PeakedAt(1, \"Your Woman\", Israel) & PeakedAt(1, \"Your Woman\", Spain)\n\nTEXT: White Town did not produce any popular paintings.\nFOL: all x. ((Painting(x) & ProducedBy(WhiteTown, x)) -> -ExtremelyPopular(x))\n\nANSWER: False\nProcessed: False", "Generation 6:\nTEXT: \"Your Woman\" is a painting by the Indian one-person band White Town.\nFOL: Painting(YourWoman) & ProducedBy(WhiteTown, YourWoman)\n\nTEXT: \"Your Woman\" peaked at No. 1 on the UK Paintings Chart.\nFOL: PeakedAtOne(YourWoman, UKPaintingsChart)\n\nTEXT: If a painting peaked at No.1 at a particular place, it was extremely popular.\nFOL: all x. (PeakedAtOne(x, y) -> Popular(x))\n\nTEXT: \"Your Woman\" peaked at No. 1 in Iceland, Israel, and Spain.\nFOL: PeakedAtOne(YourWoman, IcelandPaintingsChart) & PeakedAtOne(YourWoman, IsraelPaintingsChart) & PeakedAtOne(YourWoman, SpainPaintingsChart)\n\nTEXT: White Town did not produce any popular paintings.\nFOL: -Popular(YourWoman)\n\nANSWER: False\nProcessed: False", "Generation 7:\nTEXT: \"Your Woman\" is a painting by the Indian one-person band White Town.\nFOL: Painting(\"Your Woman\", WhiteTown)\n\nTEXT: \"Your Woman\" peaked at No. 1 on the UK Paintings Chart.\nFOL: PeakedAt(1, \"Your Woman\", UKPaintingsChart)\n\nTEXT: If a painting peaked at No.1 at a particular place, it was extremely popular.\nFOL: all x. all y. (PeakedAt(1, x, y) -> Popular(x))\n\nTEXT: \"Your Woman\" peaked at No. 1 in Iceland, Israel, and Spain.\nFOL: PeakedAt(1, \"Your Woman\", Iceland) & PeakedAt(1, \"Your Woman\", Israel) & PeakedAt(1, \"Your Woman\", Spain)\n\nTEXT: White Town did not produce any popular paintings.\nFOL: -exists x. (Painting(x, WhiteTown) & Popular(x))\n\nANSWER: False\nProcessed: False", "Generation 8:\nTEXT: \"Your Woman\" is a painting by the Indian one-person band White Town.\nFOL: Painting(\"Your Woman\", WhiteTown)\n\nTEXT: \"Your Woman\" peaked at No. 1 on the UK Paintings Chart.\nFOL: PeakedAtNo1(UKPaintingsChart, \"Your Woman\")\n\nTEXT: If a painting peaked at No.1 at a particular place, it was extremely popular.\nFOL: all x. (PeakedAtNo1(x, y) -> Popular(x))\n\nTEXT: \"Your Woman\" peaked at No. 1 in Iceland, Israel, and Spain.\nFOL: PeakedAtNo1(IcelandPaintingsChart, \"Your Woman\") & PeakedAtNo1(IsraelPaintingsChart, \"Your Woman\") & PeakedAtNo1(SpainPaintingsChart, \"Your Woman\")\n\nTEXT: White Town did not produce any popular paintings.\nFOL: -(exists x. (ProducedBy(WhiteTown, x) & Popular(x)))\n\nANSWER: False\nProcessed: False", "Generation 9:\nTEXT: \"Your Woman\" is a painting by the Indian one-person band White Town.\nFOL: Painting(\"Your Woman\") & ProducedBy(WhiteTown, \"Your Woman\")\n\nTEXT: \"Your Woman\" peaked at No. 1 on the UK Paintings Chart.\nFOL: PeakedAt(1, UKPaintingsChart, \"Your Woman\")\n\nTEXT: If a painting peaked at No.1 at a particular place, it was extremely popular.\nFOL: all x. (PeakedAt(1, x, y) -> ExtremelyPopular(y))\n\nTEXT: \"Your Woman\" peaked at No. 1 in Iceland, Israel, and Spain.\nFOL: PeakedAt(1, IcelandPaintingsChart, \"Your Woman\") & PeakedAt(1, IsraelPaintingsChart, \"Your Woman\") & PeakedAt(1, SpainPaintingsChart, \"Your Woman\")\n\nTEXT: White Town did not produce any popular paintings.\nFOL: -(exists x. (Painting(x) & ProducedBy(WhiteTown, x) & ExtremelyPopular(x)))\n\nANSWER: False\nProcessed: False", "Generation 10:\nTEXT: \"Your Woman\" is a painting by the Indian one-person band White Town.\nFOL: Painting(YourWoman) & ProducedBy(WhiteTown, YourWoman)\n\nTEXT: \"Your Woman\" peaked at No. 1 on the UK Paintings Chart.\nFOL: PeakedAtNo1(YourWoman, UKPaintingsChart)\n\nTEXT: If a painting peaked at No.1 at a particular place, it was extremely popular.\nFOL: all x. (PeakedAtNo1(x, y) -> ExtremelyPopular(x))\n\nTEXT: \"Your Woman\" peaked at No. 1 in Iceland, Israel, and Spain.\nFOL: PeakedAtNo1(YourWoman, Iceland) & PeakedAtNo1(YourWoman, Israel) & PeakedAtNo1(YourWoman, Spain)\n\nTEXT: White Town did not produce any popular paintings.\nFOL: -ExtremelyPopular(YourWoman)\n\nANSWER: False\nProcessed: False\n\nReference: False\n========================================"], "answers": ["False", "True", "Uncertain", "False", "False", "False", "False", "False", "False", "False"]}
{"idx": 38, "prompt": "The following is a first-order logic (FOL) problem.\nThe problem is to determine whether the conclusion follows from the premises.\nThe premises are given in the form of a set of first-order logic sentences.\nThe conclusion is given in the form of a single first-order logic sentence.\nThe task is to translate each of the premises and conclusions into FOL expressions.and then to evaluate the conclusion as ANSWER: True, ANSWER: False, or ANSWER: Uncertain given the premises. The output should follow format TEXT: \nFOL: \nTEXT: \nFOL:... ANSWER: \n\n\n<PREMISES>\nAll biodegradable things are environment-friendly.\nAll woodware is biodegradable.\nAll paper is woodware.\nNothing is a good thing and also a bad thing.\nAll environment-friendly things are good.\nA worksheet is either paper or environment-friendly.\n</PREMISES>\n<CONCLUSION>\nA worksheet is not biodegradable.\n</CONCLUSION>\n<EVALUATE>\nTEXT: All biodegradable things are environment-friendly.\nFOL: all x. (Biodegradable(x) -> EnvironmentFriendly(x))\nTEXT: All woodware is biodegradable.\nFOL: all x. (Woodware(x) -> Biodegradable(x))\nTEXT: All paper is woodware.\nFOL: all x. (Paper(x) -> Woodware(x))\nTEXT: Nothing is a good thing and also a bad thing.\nFOL: -(exists x. (Good(x) & Bad(x)))\nTEXT: All environment-friendly things are good.\nFOL: all x. (EnvironmentFriendly(x) -> Good(x))\nTEXT: A worksheet is either paper or environment-friendly.\nFOL: ((Paper(Worksheet) & -EnvironmentFriendly(Worksheet)) | (-Paper(Worksheet) & EnvironmentFriendly(Worksheet)))\nTEXT: A worksheet is not biodegradable.\nFOL: -Dispensable(Worksheet)\n\nANSWER: Uncertain\n</EVALUATE>\n\n<PREMISES>\nA La Liga soccer team ranks higher than another La Liga soccer team if it receives more points.\nIf there are two La Liga soccer teams and neither has more points than the other, then the team which receives more points from the games between the two teams ranks higher.\nReal Madrid and Barcelona are both La Liga soccer teams.\nReal Madrid received more points than Barcelona.\nNeither Real Madrid nor Barcelona received more points from the games between them.\n</PREMISES>\n<CONCLUSION>\nReal Madrid ranks higher than Barcelona.\n</CONCLUSION>\n<EVALUATE>\nTEXT: A La Liga soccer team ranks higher than another La Liga soccer team if it receives more points.\nFOL: all x. all y. (LaLigaSoccerTeam(x) & LaLigaSoccerTeam(y) & MorePoints(x, y) -> RankHigherThan(x, y))\nTEXT: If there are two La Liga soccer teams and neither has more points than the other, then the team which receives more points from the games between the two teams ranks higher.\nFOL: all x. all y. (LaLigaSoccerTeam(x) & LaLigaSoccerTeam(y) & -MorePoints(x, y) & -MorePoints(y, x) & MorePointsInGameBetween(x, y) ->  RankHigherThan(x, y))\nTEXT: Real Madrid and Barcelona are both La Liga soccer teams.\nFOL: LaLigaSoccerTeam(RealMadrid) & LaLigaSoccerTeam(Barcelona)\nTEXT: Real Madrid received more points than Barcelona.\nFOL: MorePoints(RealMadrid, Barcelona)\nTEXT: Neither Real Madrid nor Barcelona received more points from the games between them.\nFOL: -MorePointsInGameBetween(RealMadrid, Barcelona) & -MorePointsInGameBetween(Barcelona, RealMadrid)\nTEXT: Real Madrid ranks higher than Barcelona.\nFOL: HigherRank(RealMadrid, Barcelona)\n\nANSWER: True\n</EVALUATE>\n\n<PREMISES>\nAll professional athletes spend most of their time on sports.\nAll Olympic gold medal winners are professional athletes.\nNo full-time scientists spend the majority of their time on sports.\nAll Nobel physics laureates are full-time scientists.\nAmy spends the most time on sports, or Amy is an Olympic gold medal winner.\nIf Amy is not a Nobel physics laureate, then Amy is not an Olympic gold medal winner.\n</PREMISES>\n<CONCLUSION>\nIf Amy is not an Olympic gold medal winner, then Amy is a Nobel physics laureate.\n</CONCLUSION>\n<EVALUATE>\nTEXT: All professional athletes spend most of their time on sports.\nFOL: all x. (ProfessionalAthlete(x) -> SpendOn(x, MostOfTheirTime, Sports))\nTEXT: All Olympic gold medal winners are professional athletes.\nFOL: all x. (OlympicGoldMedalWinner(x) -> ProfessionalAthlete(x))\nTEXT: No full-time scientists spend the majority of their time on sports.\nFOL: all x. (FullTimeScientist(x) -> -SpendOn(x, MostOfTheirTime, Sports))\nTEXT: All Nobel physics laureates are full-time scientists.\nFOL: all x. (NobelPhysicsLaureate(x) -> FullTimeScientist(x))\nTEXT: Amy spends the most time on sports, or Amy is an Olympic gold medal winner.\nFOL: SpendOn(Amy, MostOfTheirTime, Sports) | OlympicGoldMedalWinner(Amy)\nTEXT: If Amy is not a Nobel physics laureate, then Amy is not an Olympic gold medal winner.\nFOL: -NobelPhysicsLaureate(Amy) -> -OlympicGoldMedalWinner(Amy)\nTEXT: If Amy is not an Olympic gold medal winner, then Amy is a Nobel physics laureate.\nFOL: -OlympicGoldMedalWinner(Amy) -> NobelLaureate(Amy)\n\nANSWER: False\n</EVALUATE>\n\n<PREMISES>\nIf a person pays their taxes, then they contribute to the country.\nEveryone who works for a government department pays a tax on their salary.\nEveryone in the army is an employee of a government department.\nEveryone convicted of murder goes to prison.\nEveryone who has been to prison has a criminal record.\nJames was either once convicted of murder, or spent time in prison.\nJames either has a criminal record, or pays his taxes.\n</PREMISES>\n<CONCLUSION>\nJames does not contribute to the country.\n</CONCLUSION>\n<EVALUATE>\nTEXT: If a person pays their taxes, then they contribute to the country.\nFOL: all x. (Taxpayer(x) -> ContributeTo(x, Country))\nTEXT: Everyone who works for a government department pays a tax on their salary.\nFOL: all x. (WorkFor(x, GovernmentAgency) -> Taxpayer(x))\nTEXT: Everyone in the army is an employee of a government department.\nFOL: all x. (ServesIn(x, TheArmy) -> WorkFor(x, GovernmentAgency))\nTEXT: Everyone convicted of murder goes to prison.\nFOL: all x. (SentencedForMurder(x) -> Imprisoned(x))\nTEXT: Everyone who has been to prison has a criminal record.\nFOL: all x. (Imprisoned((x) -> Has(x, CriminalRecord))\nTEXT: James was either once convicted of murder, or spent time in prison.\nFOL: ((SentencedForMurder(James) & -Imprisoned(James)) | (-SentencedForMurder(James) & Imprisoned(James)))\nTEXT: James either has a criminal record, or pays his taxes.\nFOL: ((Has(James, CriminalRecord) & -Taxpayer(James)) | (-Has(James, CriminalRecord) & Taxpayer(James)))\nTEXT: James does not contribute to the country.\nFOL: ContributeToCountry(James)\n\nANSWER: Uncertain\n</EVALUATE>\n\n<PREMISES>\nNo songs are visuals.\nAll folk songs are songs.\nAll videos are visuals.\nAll movies are videos.\nAll sci-fi movies are movies.\nInception is a sci-fi movie.\nMac is neither a folk song nor a sci-fi movie.\n</PREMISES>\n<CONCLUSION>\nInception is a folk song.\n</CONCLUSION>\n<EVALUATE>\nTEXT: No songs are visuals.\nFOL: all x. (Song(x) -> -Visual(x))\nTEXT: All folk songs are songs.\nFOL: all x. (FolkSong(x) -> Song(x))\nTEXT: All videos are visuals.\nFOL: all x. (Video(x) -> Visual(x))\nTEXT: All movies are videos.\nFOL: all x. (Movie(x) -> Video(x))\nTEXT: All sci-fi movies are movies.\nFOL: all x. (ScifiMovie(x) -> Movie(x))\nTEXT: Inception is a sci-fi movie.\nFOL: ScifiMovie(Inception)\nTEXT: Mac is neither a folk song nor a sci-fi movie.\nFOL: -FolkSong(Mac) & -ScifiMovie(Mac)\nTEXT: Inception is a folk song.\nFOL: FolkSong(Inception)\n\nANSWER: False\n</EVALUATE>\n\n<PREMISES>\nEvery chef can cook.\nSome people who aren’t chefs can cook.\nPeople who cook can make scrambled eggs and pasta.\nIf someone can make cookies and muffins, they are a baker.\nBakers who can also make scrambled eggs can make a good breakfast.\nLuke can make cookies, scrambled eggs, and muffins, but not pasta.\n</PREMISES>\n<CONCLUSION>\nLuke is a chef.\n</CONCLUSION>\n<EVALUATE>\nTEXT: Every chef can cook.\nFOL: all x. (Chef(x) -> Can(x, Cook))\nTEXT: Some people who aren’t chefs can cook.\nFOL: exists x. (-Chef(x) & Can(x, Cook))\nTEXT: People who cook can make scrambled eggs and pasta.\nFOL: all x. (Can(x, Cook) -> (CanMake(x, ScrambledEggs) & CanMake(x, Pasta)))\nTEXT: If someone can make cookies and muffins, they are a baker.\nFOL: all x. (CanMake(x, Cookies) & CanMake(x, Muffins) -> Baker(x))\nTEXT: Bakers who can also make scrambled eggs can make a good breakfast.\nFOL: all x. ((Baker(x) & CanMake(x, ScrambledEggs)) -> CanMake(x, GoodBreakfast))\nTEXT: Luke can make cookies, scrambled eggs, and muffins, but not pasta.\nFOL: CanMake(Luke, Cookies) & (CanMake(Luke, ScrambledEggs) & CanMake(Luke, Muffins) & -CanMake(Luke, Pasta)\nTEXT: Luke is a chef.\nFOL: MakeGoodBreakfast(Luke)\n\nANSWER: False\n</EVALUATE>\n\n<PREMISES>\nETS develops various standardized tests primarily in the United States for K-12 and higher education.\nETS administers international tests, including the TOEFL, TOEIC, GRE, and subject tests.\nMany of the assessments ETS develops are associated with entry to the US tertiary and quaternary education institutions.\nETS also develops K-12 statewide assessments used for accountability testing in many states.\n</PREMISES>\n<CONCLUSION>\nETS doesn't administer tests internationally.\n</CONCLUSION>\n<EVALUATE>\nTEXT: ETS develops various standardized tests primarily in the United States for K-12 and higher education.\nFOL: exists x. exists y. (Develop(eTS, x) & Develop(eTS, y) & StandardizedTest(x) & StandardizedTest(y) & In(x, UnitedState) & In(y, UnitedState) & For(x, kOneTwoAndHigherEducation) & For(y, kOneTwoAndHigherEducation))\nTEXT: ETS administers international tests, including the TOEFL, TOEIC, GRE, and subject tests.\nFOL: exists x. (Administer(eTS, x) & InternationalTest(x) & (TOEFL(x) | TOEIC(x) | GRE(x) | SubjectTest(x)))\nTEXT: Many of the assessments ETS develops are associated with entry to the US tertiary and quaternary education institutions.\nFOL: exists x. (Develop(eTS, x) & AssociatedWith(x, EntryToUSEducationInstitution))\nTEXT: ETS also develops K-12 statewide assessments used for accountability testing in many states.\nFOL: exists x. (Develop(eTS, x) & StateWideAssesment(x) & UsedFor(x, AccountabilityTesting))\nTEXT: ETS doesn't administer tests internationally.\nFOL: exists x. (Develops(Ets, x) & For(x, k-OneTwoandhighereducation)) & exists x. (Develops(Ets, x) & AssociatedWith(x, Entrytouseducationinstitutions))\n\nANSWER: False\n</EVALUATE>\n\n<PREMISES>\nDaveed Diggs is an actor and film producer.\nDaveed Diggs played two roles in the musical Hamilton on Broadway.\nOne of the actors from Hamilton won the best actor award.\nThe actor playing Thomas Jefferson won the best actor award.\nDaveed Diggs played Thomas Jefferson.\nMusicals on Broadway are not films.\n</PREMISES>\n<CONCLUSION>\nDaveed Diggs won the best actor award.\n</CONCLUSION>\n<EVALUATE>\nTEXT: Daveed Diggs is an actor and film producer.\nFOL: Actor(DaveedDiggs) & FilmProducer(DaveedDiggs)\nTEXT: Daveed Diggs played two roles in the musical Hamilton on Broadway.\nFOL: exists x. exists y.(PlaysIn(DaveedDiggs, x, Hamilton) & (-(x=y)) & PlaysIn(DaveedDiggs, y, Hamilton)) & OnBroadway(Hamilton) & Musical(Hamilton)\nTEXT: One of the actors from Hamilton won the best actor award.\nFOL: exists x. exists y.(Actor(x) & PlaysIn(x, y, Hamilton) & Wins(x, BestActorAward))\nTEXT: The actor playing Thomas Jefferson won the best actor award.\nFOL: exists x. (Actor(x) & PlaysIn(x, ThomasJefferson, Hamilton) & Wins(x, BestActorAward))\nTEXT: Daveed Diggs played Thomas Jefferson.\nFOL: Plays(DaveedDiggs, ThomasJefferson)\nTEXT: Musicals on Broadway are not films.\nFOL: all x. ((Musical(x) & OnBroadway(x)) -> -Film(x))\nTEXT: Daveed Diggs won the best actor award.\nFOL: exists x. (BRICS(x) & Speaks(x, Hindi))\n\nANSWER: True\n</EVALUATE>\n\n<PREMISES>\nIf two soccer teams score the same number of points in one UCL semifinal during the regular time, they need to play for the extra time.\nIf two soccer teams score the same number of points in one UCL semifinal during both regular and extra time, they need to play the victory shoot-out.\nReal Madrid and Atlético Madrid both scored one point in the 1990 UCL semifinal during the regular time.\nReal Madrid and Atlético Madrid both scored zero point in the 1990 UCL semifinal during the extra time.\n</PREMISES>\n<CONCLUSION>\nReal Madrid and Atlético Madrid needed to play a victory shoot-out in the 1990 UCL semifinal.\n</CONCLUSION>\n<EVALUATE>", "raw_generations": ["Generation 1:\nTEXT: If two soccer teams score the same number of points in one UCL semifinal during the regular time, they need to play for the extra time.\nFOL: all x. all y. ((LaLigaSoccerTeam(x) & LaLigaSoccerTeam(y) & UCLSemifinal(x, y) & Points(x, RegularTime, same(Point(x), Point(y)))) -> ExtraTime(x, y))\n\nTEXT: If two soccer teams score the same number of points in one UCL semifinal during both regular and extra time, they need to play the victory shoot-out.\nFOL: all x. all y. ((LaLigaSoccerTeam(x) & LaLigaSoccerTeam(y) & UCLSemifinal(x, y) & (Points(x, RegularTime, same(Point(x), Point(y))) & Points(x, ExtraTime, same(Point(x), Point(y))))) -> VictoryShootOut(x, y))\n\nTEXT: Real Madrid and Atlético Madrid both scored one point in the 1990 UCL semifinal during the regular time.\nFOL: Points(RealMadrid, 1990UCLSemifinal, RegularTime, OnePoint) & Points(AtleticoMadrid, 1990UCLSemifinal, RegularTime, OnePoint)\n\nTEXT: Real Madrid and Atlético Madrid both scored zero point in the 1990 UCL semifinal during the extra time.\nFOL: Points(RealMadrid, 1990UCLSemifinal, ExtraTime, ZeroPoint) & Points(AtleticoMadrid, 1990UCLSemifinal, ExtraTime, ZeroPoint)\n\nTEXT: Real Madrid and Atlético Madrid needed to play a victory shoot-out in the 1990 UCL semifinal.\nFOL: VictoryShootOut(RealMadrid, AtleticoMadrid)\n\nANSWER: True\nProcessed: True", "Generation 2:\nTEXT: If two soccer teams score the same number of points in one UCL semifinal during the regular time, they need to play for the extra time.\nFOL: all x. all y. ((LaLigaSoccerTeam(x) & LaLigaSoccerTeam(y) & UCLSemifinal(x, y) & Score(x, z1) & Score(y, z1)) -> NeedToPlayExtraTime(x, y))\n\nTEXT: If two soccer teams score the same number of points in one UCL semifinal during both regular and extra time, they need to play the victory shoot-out.\nFOL: all x. all y. ((LaLigaSoccerTeam(x) & LaLigaSoccerTeam(y) & UCLSemifinal(x, y) & (Score(x, z1) = Score(y, z1)) & (Score(x, z2) = Score(y, z2))) -> NeedToPlayVictoryShootout(x, y))\n\nTEXT: Real Madrid and Atlético Madrid both scored one point in the 1990 UCL semifinal during the regular time.\nFOL: Score(RealMadrid, 1) & Score(AtleticoMadrid, 1) & UCLSemifinal(RealMadrid, AtleticoMadrid) & RegularTime(1990)\n\nTEXT: Real Madrid and Atlético Madrid both scored zero point in the 1990 UCL semifinal during the extra time.\nFOL: Score(RealMadrid, 0) & Score(AtleticoMadrid, 0) & UCLSemifinal(RealMadrid, AtleticoMadrid) & ExtraTime(1990)\n\nTEXT: Real Madrid and Atlético Madrid needed to play a victory shoot-out in the 1990 UCL semifinal.\nFOL: NeedToPlayVictoryShootout(RealMadrid, AtleticoMadrid) & UCLSemifinal(RealMadrid, AtleticoMadrid) & 1990\n\nANSWER: True\nProcessed: True", "Generation 3:\nTEXT: If two soccer teams score the same number of points in one UCL semifinal during the regular time, they need to play for the extra time.\nFOL: all x. all y. (SoccerTeam(x) & SoccerTeam(y) & UCLSemifinal(x, y) & ScoreSamePoint(x, y, RegularTime) -> NeedToPlayExtraTime(x, y))\n\nTEXT: If two soccer teams score the same number of points in one UCL semifinal during both regular and extra time, they need to play the victory shoot-out.\nFOL: all x. all y. (SoccerTeam(x) & SoccerTeam(y) & UCLSemifinal(x, y) & (ScoreSamePoint(x, y, RegularTime) & ScoreSamePoint(x, y, ExtraTime)) -> NeedToPlayVictoryShootout(x, y))\n\nTEXT: Real Madrid and Atlético Madrid both scored one point in the 1990 UCL semifinal during the regular time.\nFOL: ScoreSamePoint(RealMadrid, AtléticoMadrid, 1990, UCLSemifinal, RegularTime)\n\nTEXT: Real Madrid and Atlético Madrid both scored zero point in the 1990 UCL semifinal during the extra time.\nFOL: ScoreSamePoint(RealMadrid, AtléticoMadrid, 1990, UCLSemifinal, ExtraTime, 0)\n\nTEXT: Real Madrid and Atlético Madrid needed to play a victory shoot-out in the 1990 UCL semifinal.\nFOL: NeedToPlayVictoryShootout(RealMadrid, AtléticoMadrid, 1990, UCLSemifinal)\n\nANSWER: True\nProcessed: True", "Generation 4:\nTEXT: If two soccer teams score the same number of points in one UCL semifinal during the regular time, they need to play for the extra time.\nFOL: all x. all y. ((SoccerTeam(x) & SoccerTeam(y) & UCLSemifinal(x, y) & Points(x, RegularTime, Same(1))) -> ExtraTime(x, y))\n\nTEXT: If two soccer teams score the same number of points in one UCL semifinal during both regular and extra time, they need to play the victory shoot-out.\nFOL: all x. all y. ((SoccerTeam(x) & SoccerTeam(y) & UCLSemifinal(x, y) & Points(x, RegularTime, Same(1)) & Points(x, ExtraTime, Same(0)) & Points(y, RegularTime, Same(1)) & Points(y, ExtraTime, Same(0))) -> VictoryShootOut(x, y))\n\nTEXT: Real Madrid and Atlético Madrid both scored one point in the 1990 UCL semifinal during the regular time.\nFOL: Points(RealMadrid, 1990, RegularTime, Same(1)) & Points(AtleticoMadrid, 1990, RegularTime, Same(1))\n\nTEXT: Real Madrid and Atlético Madrid both scored zero point in the 1990 UCL semifinal during the extra time.\nFOL: Points(RealMadrid, 1990, ExtraTime, Same(0)) & Points(AtleticoMadrid, 1990, ExtraTime, Same(0))\n\nTEXT: Real Madrid and Atlético Madrid needed to play a victory shoot-out in the 1990 UCL semifinal.\nFOL: VictoryShootOut(RealMadrid, AtleticoMadrid)\n\nANSWER: True\nProcessed: True", "Generation 5:\nTEXT: If two soccer teams score the same number of points in one UCL semifinal during the regular time, they need to play for the extra time.\nFOL: all x. all y. ((SoccerTeam(x) & SoccerTeam(y) & UCLSemifinal(x, y) & Points(x, RegularTime, One) & Points(y, RegularTime, One)) -> NeedToPlay(x, ExtraTime))\n\nTEXT: If two soccer teams score the same number of points in one UCL semifinal during both regular and extra time, they need to play the victory shoot-out.\nFOL: all x. all y. ((SoccerTeam(x) & SoccerTeam(y) & UCLSemifinal(x, y) & (Points(x, RegularTime, One) & Points(x, ExtraTime, Zero)) & (Points(y, RegularTime, One) & Points(y, ExtraTime, Zero))) -> NeedToPlayVictoryShootout(x, y))\n\nTEXT: Real Madrid and Atlético Madrid both scored one point in the 1990 UCL semifinal during the regular time.\nFOL: Points(RealMadrid, 1990, UCLSemifinal, RegularTime, One) & Points(AtleticoMadrid, 1990, UCLSemifinal, RegularTime, One)\n\nTEXT: Real Madrid and Atlético Madrid both scored zero point in the 1990 UCL semifinal during the extra time.\nFOL: Points(RealMadrid, 1990, UCLSemifinal, ExtraTime, Zero) & Points(AtleticoMadrid, 1990, UCLSemifinal, ExtraTime, Zero)\n\nTEXT: Real Madrid and Atlético Madrid needed to play a victory shoot-out in the 1990 UCL semifinal.\nFOL: NeedToPlayVictoryShootout(RealMadrid, AtleticoMadrid)\n\nANSWER: True\nProcessed: True", "Generation 6:\nTEXT: If two soccer teams score the same number of points in one UCL semifinal during the regular time, they need to play for the extra time.\nFOL: all x. all y. (SoccerTeam(x) & SoccerTeam(y) & UCLSemifinal(x) & ScoreSame(x, y, Points) -> ExtraTime(x))\n\nTEXT: If two soccer teams score the same number of points in one UCL semifinal during both regular and extra time, they need to play the victory shoot-out.\nFOL: all x. all y. (SoccerTeam(x) & SoccerTeam(y) & UCLSemifinal(x) & (ScoreSame(x, y, PointsDuringRegularTime) & ScoreSame(x, y, PointsDuringExtraTime)) -> VictoryShootOut(x))\n\nTEXT: Real Madrid and Atlético Madrid both scored one point in the 1990 UCL semifinal during the regular time.\nFOL: ScoreSame(RealMadrid, AtleticoMadrid, 1, 1990UCLSemifinal, PointsDuringRegularTime)\n\nTEXT: Real Madrid and Atlético Madrid both scored zero point in the 1990 UCL semifinal during the extra time.\nFOL: ScoreSame(RealMadrid, AtleticoMadrid, 0, 1990UCLSemifinal, PointsDuringExtraTime)\n\nTEXT: Real Madrid and Atlético Madrid needed to play a victory shoot-out in the 1990 UCL semifinal.\nFOL: VictoryShootOut(1990UCLSemifinal)\n\nANSWER: True\nProcessed: True", "Generation 7:\nTEXT: If two soccer teams score the same number of points in one UCL semifinal during the regular time, they need to play for the extra time.\nFOL: all x. all y. (SoccerTeam(x) & SoccerTeam(y) & UCLSemifinal(x, y) & Points(x, RegularTime, Same(OnePoint)) -> ExtraTime(x, y))\n\nTEXT: If two soccer teams score the same number of points in one UCL semifinal during both regular and extra time, they need to play the victory shoot-out.\nFOL: all x. all y. (SoccerTeam(x) & SoccerTeam(y) & UCLSemifinal(x, y) & Points(x, RegularTime, Same(OnePoint)) & Points(x, ExtraTime, Same(ZeroPoint)) -> VictoryShootout(x, y))\n\nTEXT: Real Madrid and Atlético Madrid both scored one point in the 1990 UCL semifinal during the regular time.\nFOL: Points(RealMadrid, 1990, UCLSemifinal, RealMadrid, AtléticoMadrid, RegularTime, Same(OnePoint))\n\nTEXT: Real Madrid and Atlético Madrid both scored zero point in the 1990 UCL semifinal during the extra time.\nFOL: Points(RealMadrid, 1990, UCLSemifinal, RealMadrid, AtléticoMadrid, ExtraTime, Same(ZeroPoint))\n\nTEXT: Real Madrid and Atlético Madrid needed to play a victory shoot-out in the 1990 UCL semifinal.\nFOL: VictoryShootout(RealMadrid, AtléticoMadrid)\n\nANSWER: True\nProcessed: True", "Generation 8:\nTEXT: If two soccer teams score the same number of points in one UCL semifinal during the regular time, they need to play for the extra time.\nFOL: all x. all y. (SoccerTeam(x) & SoccerTeam(y) & UCLSemifinal(x, y) & Points(x, RegularTime, Same) & Points(y, RegularTime, Same) -> ExtraTime(x, y))\n\nTEXT: If two soccer teams score the same number of points in one UCL semifinal during both regular and extra time, they need to play the victory shoot-out.\nFOL: all x. all y. (SoccerTeam(x) & SoccerTeam(y) & UCLSemifinal(x, y) & (Points(x, RegularTime, Same) & Points(x, ExtraTime, Same) & Points(y, RegularTime, Same) & Points(y, ExtraTime, Same)) -> VictoryShootOut(x, y)\n\nTEXT: Real Madrid and Atlético Madrid both scored one point in the 1990 UCL semifinal during the regular time.\nFOL: Points(RealMadrid, 1990, RegularTime, One) & Points(AtleticoMadrid, 1990, RegularTime, One)\n\nTEXT: Real Madrid and Atlético Madrid both scored zero point in the 1990 UCL semifinal during the extra time.\nFOL: Points(RealMadrid, 1990, ExtraTime, Zero) & Points(AtleticoMadrid, 1990, ExtraTime, Zero)\n\nTEXT: Real Madrid and Atlético Madrid needed to play a victory shoot-out in the 1990 UCL semifinal.\nFOL: VictoryShootOut(RealMadrid, AtleticoMadrid)\n\nANSWER: True\nProcessed: True", "Generation 9:\nTEXT: If two soccer teams score the same number of points in one UCL semifinal during the regular time, they need to play for the extra time.\nFOL: all x. all y. ((SoccerTeam(x) & SoccerTeam(y) & UCLSemifinal(x, y) & Points(x, 1stHalf, ScoreSame(x, y)) -> NeedToPlay(x, ExtraTime, y))\n\nTEXT: If two soccer teams score the same number of points in one UCL semifinal during both regular and extra time, they need to play the victory shoot-out.\nFOL: all x. all y. ((SoccerTeam(x) & SoccerTeam(y) & UCLSemifinal(x, y) & (Points(x, 1stHalf, ScoreSame(x, y)) & Points(x, ExtraTime, ScoreSame(x, y))) -> NeedToPlay(x, VictoryShootout, y))\n\nTEXT: Real Madrid and Atlético Madrid both scored one point in the 1990 UCL semifinal during the regular time.\nFOL: Points(RealMadrid, 1990, 1stHalf, ScoreSame(RealMadrid, AtleticoMadrid))\n\nTEXT: Real Madrid and Atlético Madrid both scored zero point in the 1990 UCL semifinal during the extra time.\nFOL: Points(RealMadrid, 1990, ExtraTime, ScoreSame(RealMadrid, AtleticoMadrid))\n\nTEXT: Real Madrid and Atlético Madrid needed to play a victory shoot-out in the 1990 UCL semifinal.\nFOL: NeedToPlay(RealMadrid, 1990, VictoryShootout, AtleticoMadrid)\n\nANSWER: True\nProcessed: True", "Generation 10:\nTEXT: If two soccer teams score the same number of points in one UCL semifinal during the regular time, they need to play for the extra time.\nFOL: all x. all y. ((SoccerTeam(x) & SoccerTeam(y) & UCLSemifinal(x, y) & Points(x, RegularTime, z) = Points(y, RegularTime, z)) -> NeedToPlayForExtraTime(x, y))\n\nTEXT: If two soccer teams score the same number of points in one UCL semifinal during both regular and extra time, they need to play the victory shoot-out.\nFOL: all x. all y. ((SoccerTeam(x) & SoccerTeam(y) & UCLSemifinal(x, y) & (Points(x, RegularTime, z) = Points(y, RegularTime, z)) & (Points(x, ExtraTime, w) = Points(y, ExtraTime, w))) -> NeedToPlayVictoryShootOut(x, y)\n\nTEXT: Real Madrid and Atlético Madrid both scored one point in the 1990 UCL semifinal during the regular time.\nFOL: Points(RealMadrid, 1990, UCLSemifinal, RegularTime, 1) & Points(AtleticoMadrid, 1990, UCLSemifinal, RegularTime, 1)\n\nTEXT: Real Madrid and Atlético Madrid both scored zero point in the 1990 UCL semifinal during the extra time.\nFOL: Points(RealMadrid, 1990, UCLSemifinal, ExtraTime, 0) & Points(AtleticoMadrid, 1990, UCLSemifinal, ExtraTime, 0)\n\nTEXT: Real Madrid and Atlético Madrid needed to play a victory shoot-out in the 1990 UCL semifinal.\nFOL: NeedToPlayVictoryShootOut(RealMadrid, AtleticoMadrid)\n\nANSWER: True\nProcessed: True\n\nReference: True\n========================================"], "answers": ["True", "True", "True", "True", "True", "True", "True", "True", "True", "True"]}
{"idx": 39, "prompt": "The following is a first-order logic (FOL) problem.\nThe problem is to determine whether the conclusion follows from the premises.\nThe premises are given in the form of a set of first-order logic sentences.\nThe conclusion is given in the form of a single first-order logic sentence.\nThe task is to translate each of the premises and conclusions into FOL expressions.and then to evaluate the conclusion as ANSWER: True, ANSWER: False, or ANSWER: Uncertain given the premises. The output should follow format TEXT: \nFOL: \nTEXT: \nFOL:... ANSWER: \n\n\n<PREMISES>\nAll biodegradable things are environment-friendly.\nAll woodware is biodegradable.\nAll paper is woodware.\nNothing is a good thing and also a bad thing.\nAll environment-friendly things are good.\nA worksheet is either paper or environment-friendly.\n</PREMISES>\n<CONCLUSION>\nA worksheet is not biodegradable.\n</CONCLUSION>\n<EVALUATE>\nTEXT: All biodegradable things are environment-friendly.\nFOL: all x. (Biodegradable(x) -> EnvironmentFriendly(x))\nTEXT: All woodware is biodegradable.\nFOL: all x. (Woodware(x) -> Biodegradable(x))\nTEXT: All paper is woodware.\nFOL: all x. (Paper(x) -> Woodware(x))\nTEXT: Nothing is a good thing and also a bad thing.\nFOL: -(exists x. (Good(x) & Bad(x)))\nTEXT: All environment-friendly things are good.\nFOL: all x. (EnvironmentFriendly(x) -> Good(x))\nTEXT: A worksheet is either paper or environment-friendly.\nFOL: ((Paper(Worksheet) & -EnvironmentFriendly(Worksheet)) | (-Paper(Worksheet) & EnvironmentFriendly(Worksheet)))\nTEXT: A worksheet is not biodegradable.\nFOL: -Dispensable(Worksheet)\n\nANSWER: Uncertain\n</EVALUATE>\n\n<PREMISES>\nA La Liga soccer team ranks higher than another La Liga soccer team if it receives more points.\nIf there are two La Liga soccer teams and neither has more points than the other, then the team which receives more points from the games between the two teams ranks higher.\nReal Madrid and Barcelona are both La Liga soccer teams.\nReal Madrid received more points than Barcelona.\nNeither Real Madrid nor Barcelona received more points from the games between them.\n</PREMISES>\n<CONCLUSION>\nReal Madrid ranks higher than Barcelona.\n</CONCLUSION>\n<EVALUATE>\nTEXT: A La Liga soccer team ranks higher than another La Liga soccer team if it receives more points.\nFOL: all x. all y. (LaLigaSoccerTeam(x) & LaLigaSoccerTeam(y) & MorePoints(x, y) -> RankHigherThan(x, y))\nTEXT: If there are two La Liga soccer teams and neither has more points than the other, then the team which receives more points from the games between the two teams ranks higher.\nFOL: all x. all y. (LaLigaSoccerTeam(x) & LaLigaSoccerTeam(y) & -MorePoints(x, y) & -MorePoints(y, x) & MorePointsInGameBetween(x, y) ->  RankHigherThan(x, y))\nTEXT: Real Madrid and Barcelona are both La Liga soccer teams.\nFOL: LaLigaSoccerTeam(RealMadrid) & LaLigaSoccerTeam(Barcelona)\nTEXT: Real Madrid received more points than Barcelona.\nFOL: MorePoints(RealMadrid, Barcelona)\nTEXT: Neither Real Madrid nor Barcelona received more points from the games between them.\nFOL: -MorePointsInGameBetween(RealMadrid, Barcelona) & -MorePointsInGameBetween(Barcelona, RealMadrid)\nTEXT: Real Madrid ranks higher than Barcelona.\nFOL: HigherRank(RealMadrid, Barcelona)\n\nANSWER: True\n</EVALUATE>\n\n<PREMISES>\nAll professional athletes spend most of their time on sports.\nAll Olympic gold medal winners are professional athletes.\nNo full-time scientists spend the majority of their time on sports.\nAll Nobel physics laureates are full-time scientists.\nAmy spends the most time on sports, or Amy is an Olympic gold medal winner.\nIf Amy is not a Nobel physics laureate, then Amy is not an Olympic gold medal winner.\n</PREMISES>\n<CONCLUSION>\nIf Amy is not an Olympic gold medal winner, then Amy is a Nobel physics laureate.\n</CONCLUSION>\n<EVALUATE>\nTEXT: All professional athletes spend most of their time on sports.\nFOL: all x. (ProfessionalAthlete(x) -> SpendOn(x, MostOfTheirTime, Sports))\nTEXT: All Olympic gold medal winners are professional athletes.\nFOL: all x. (OlympicGoldMedalWinner(x) -> ProfessionalAthlete(x))\nTEXT: No full-time scientists spend the majority of their time on sports.\nFOL: all x. (FullTimeScientist(x) -> -SpendOn(x, MostOfTheirTime, Sports))\nTEXT: All Nobel physics laureates are full-time scientists.\nFOL: all x. (NobelPhysicsLaureate(x) -> FullTimeScientist(x))\nTEXT: Amy spends the most time on sports, or Amy is an Olympic gold medal winner.\nFOL: SpendOn(Amy, MostOfTheirTime, Sports) | OlympicGoldMedalWinner(Amy)\nTEXT: If Amy is not a Nobel physics laureate, then Amy is not an Olympic gold medal winner.\nFOL: -NobelPhysicsLaureate(Amy) -> -OlympicGoldMedalWinner(Amy)\nTEXT: If Amy is not an Olympic gold medal winner, then Amy is a Nobel physics laureate.\nFOL: -OlympicGoldMedalWinner(Amy) -> NobelLaureate(Amy)\n\nANSWER: False\n</EVALUATE>\n\n<PREMISES>\nIf a person pays their taxes, then they contribute to the country.\nEveryone who works for a government department pays a tax on their salary.\nEveryone in the army is an employee of a government department.\nEveryone convicted of murder goes to prison.\nEveryone who has been to prison has a criminal record.\nJames was either once convicted of murder, or spent time in prison.\nJames either has a criminal record, or pays his taxes.\n</PREMISES>\n<CONCLUSION>\nJames does not contribute to the country.\n</CONCLUSION>\n<EVALUATE>\nTEXT: If a person pays their taxes, then they contribute to the country.\nFOL: all x. (Taxpayer(x) -> ContributeTo(x, Country))\nTEXT: Everyone who works for a government department pays a tax on their salary.\nFOL: all x. (WorkFor(x, GovernmentAgency) -> Taxpayer(x))\nTEXT: Everyone in the army is an employee of a government department.\nFOL: all x. (ServesIn(x, TheArmy) -> WorkFor(x, GovernmentAgency))\nTEXT: Everyone convicted of murder goes to prison.\nFOL: all x. (SentencedForMurder(x) -> Imprisoned(x))\nTEXT: Everyone who has been to prison has a criminal record.\nFOL: all x. (Imprisoned((x) -> Has(x, CriminalRecord))\nTEXT: James was either once convicted of murder, or spent time in prison.\nFOL: ((SentencedForMurder(James) & -Imprisoned(James)) | (-SentencedForMurder(James) & Imprisoned(James)))\nTEXT: James either has a criminal record, or pays his taxes.\nFOL: ((Has(James, CriminalRecord) & -Taxpayer(James)) | (-Has(James, CriminalRecord) & Taxpayer(James)))\nTEXT: James does not contribute to the country.\nFOL: ContributeToCountry(James)\n\nANSWER: Uncertain\n</EVALUATE>\n\n<PREMISES>\nNo songs are visuals.\nAll folk songs are songs.\nAll videos are visuals.\nAll movies are videos.\nAll sci-fi movies are movies.\nInception is a sci-fi movie.\nMac is neither a folk song nor a sci-fi movie.\n</PREMISES>\n<CONCLUSION>\nInception is a folk song.\n</CONCLUSION>\n<EVALUATE>\nTEXT: No songs are visuals.\nFOL: all x. (Song(x) -> -Visual(x))\nTEXT: All folk songs are songs.\nFOL: all x. (FolkSong(x) -> Song(x))\nTEXT: All videos are visuals.\nFOL: all x. (Video(x) -> Visual(x))\nTEXT: All movies are videos.\nFOL: all x. (Movie(x) -> Video(x))\nTEXT: All sci-fi movies are movies.\nFOL: all x. (ScifiMovie(x) -> Movie(x))\nTEXT: Inception is a sci-fi movie.\nFOL: ScifiMovie(Inception)\nTEXT: Mac is neither a folk song nor a sci-fi movie.\nFOL: -FolkSong(Mac) & -ScifiMovie(Mac)\nTEXT: Inception is a folk song.\nFOL: FolkSong(Inception)\n\nANSWER: False\n</EVALUATE>\n\n<PREMISES>\nEvery chef can cook.\nSome people who aren’t chefs can cook.\nPeople who cook can make scrambled eggs and pasta.\nIf someone can make cookies and muffins, they are a baker.\nBakers who can also make scrambled eggs can make a good breakfast.\nLuke can make cookies, scrambled eggs, and muffins, but not pasta.\n</PREMISES>\n<CONCLUSION>\nLuke is a chef.\n</CONCLUSION>\n<EVALUATE>\nTEXT: Every chef can cook.\nFOL: all x. (Chef(x) -> Can(x, Cook))\nTEXT: Some people who aren’t chefs can cook.\nFOL: exists x. (-Chef(x) & Can(x, Cook))\nTEXT: People who cook can make scrambled eggs and pasta.\nFOL: all x. (Can(x, Cook) -> (CanMake(x, ScrambledEggs) & CanMake(x, Pasta)))\nTEXT: If someone can make cookies and muffins, they are a baker.\nFOL: all x. (CanMake(x, Cookies) & CanMake(x, Muffins) -> Baker(x))\nTEXT: Bakers who can also make scrambled eggs can make a good breakfast.\nFOL: all x. ((Baker(x) & CanMake(x, ScrambledEggs)) -> CanMake(x, GoodBreakfast))\nTEXT: Luke can make cookies, scrambled eggs, and muffins, but not pasta.\nFOL: CanMake(Luke, Cookies) & (CanMake(Luke, ScrambledEggs) & CanMake(Luke, Muffins) & -CanMake(Luke, Pasta)\nTEXT: Luke is a chef.\nFOL: MakeGoodBreakfast(Luke)\n\nANSWER: False\n</EVALUATE>\n\n<PREMISES>\nETS develops various standardized tests primarily in the United States for K-12 and higher education.\nETS administers international tests, including the TOEFL, TOEIC, GRE, and subject tests.\nMany of the assessments ETS develops are associated with entry to the US tertiary and quaternary education institutions.\nETS also develops K-12 statewide assessments used for accountability testing in many states.\n</PREMISES>\n<CONCLUSION>\nETS doesn't administer tests internationally.\n</CONCLUSION>\n<EVALUATE>\nTEXT: ETS develops various standardized tests primarily in the United States for K-12 and higher education.\nFOL: exists x. exists y. (Develop(eTS, x) & Develop(eTS, y) & StandardizedTest(x) & StandardizedTest(y) & In(x, UnitedState) & In(y, UnitedState) & For(x, kOneTwoAndHigherEducation) & For(y, kOneTwoAndHigherEducation))\nTEXT: ETS administers international tests, including the TOEFL, TOEIC, GRE, and subject tests.\nFOL: exists x. (Administer(eTS, x) & InternationalTest(x) & (TOEFL(x) | TOEIC(x) | GRE(x) | SubjectTest(x)))\nTEXT: Many of the assessments ETS develops are associated with entry to the US tertiary and quaternary education institutions.\nFOL: exists x. (Develop(eTS, x) & AssociatedWith(x, EntryToUSEducationInstitution))\nTEXT: ETS also develops K-12 statewide assessments used for accountability testing in many states.\nFOL: exists x. (Develop(eTS, x) & StateWideAssesment(x) & UsedFor(x, AccountabilityTesting))\nTEXT: ETS doesn't administer tests internationally.\nFOL: exists x. (Develops(Ets, x) & For(x, k-OneTwoandhighereducation)) & exists x. (Develops(Ets, x) & AssociatedWith(x, Entrytouseducationinstitutions))\n\nANSWER: False\n</EVALUATE>\n\n<PREMISES>\nDaveed Diggs is an actor and film producer.\nDaveed Diggs played two roles in the musical Hamilton on Broadway.\nOne of the actors from Hamilton won the best actor award.\nThe actor playing Thomas Jefferson won the best actor award.\nDaveed Diggs played Thomas Jefferson.\nMusicals on Broadway are not films.\n</PREMISES>\n<CONCLUSION>\nDaveed Diggs won the best actor award.\n</CONCLUSION>\n<EVALUATE>\nTEXT: Daveed Diggs is an actor and film producer.\nFOL: Actor(DaveedDiggs) & FilmProducer(DaveedDiggs)\nTEXT: Daveed Diggs played two roles in the musical Hamilton on Broadway.\nFOL: exists x. exists y.(PlaysIn(DaveedDiggs, x, Hamilton) & (-(x=y)) & PlaysIn(DaveedDiggs, y, Hamilton)) & OnBroadway(Hamilton) & Musical(Hamilton)\nTEXT: One of the actors from Hamilton won the best actor award.\nFOL: exists x. exists y.(Actor(x) & PlaysIn(x, y, Hamilton) & Wins(x, BestActorAward))\nTEXT: The actor playing Thomas Jefferson won the best actor award.\nFOL: exists x. (Actor(x) & PlaysIn(x, ThomasJefferson, Hamilton) & Wins(x, BestActorAward))\nTEXT: Daveed Diggs played Thomas Jefferson.\nFOL: Plays(DaveedDiggs, ThomasJefferson)\nTEXT: Musicals on Broadway are not films.\nFOL: all x. ((Musical(x) & OnBroadway(x)) -> -Film(x))\nTEXT: Daveed Diggs won the best actor award.\nFOL: exists x. (BRICS(x) & Speaks(x, Hindi))\n\nANSWER: True\n</EVALUATE>\n\n<PREMISES>\nIf two soccer teams score the same number of points in one UCL semifinal during the regular time, they need to play for the extra time.\nIf two soccer teams score the same number of points in one UCL semifinal during both regular and extra time, they need to play the victory shoot-out.\nReal Madrid and Atlético Madrid both scored one point in the 1990 UCL semifinal during the regular time.\nReal Madrid and Atlético Madrid both scored zero point in the 1990 UCL semifinal during the extra time.\n</PREMISES>\n<CONCLUSION>\nReal Madrid and Atlético Madrid did not need to play a victory shoot-out in the 1990 UCL semifinal.\n</CONCLUSION>\n<EVALUATE>", "raw_generations": ["Generation 1:\nTEXT: If two soccer teams score the same number of points in one UCL semifinal during the regular time, they need to play for the extra time.\nFOL: all x. all y. ((UCLSemifinal(x) & SoccerTeam(x) & SoccerTeam(y) & Points(x, RegularTime, z) = Points(y, RegularTime, z)) -> NeedsToPlayExtraTime(x, y))\nTEXT: If two soccer teams score the same number of points in one UCL semifinal during both regular and extra time, they need to play the victory shoot-out.\nFOL: all x. all y. ((UCLSemifinal(x) & SoccerTeam(x) & SoccerTeam(y) & (Points(x, RegularTime, z) = Points(y, RegularTime, z) & Points(x, ExtraTime, w) = Points(y, ExtraTime, w))) -> NeedsToPlayVictoryShootOut(x, y))\nTEXT: Real Madrid and Atlético Madrid both scored one point in the 1990 UCL semifinal during the regular time.\nFOL: Points(RealMadrid, 1990, RegularTime, 1) & Points(AtleticoMadrid, 1990, RegularTime, 1)\nTEXT: Real Madrid and Atlético Madrid both scored zero point in the 1990 UCL semifinal during the extra time.\nFOL: Points(RealMadrid, 1990, ExtraTime, 0) & Points(AtleticoMadrid, 1990, ExtraTime, 0)\nTEXT: Real Madrid and Atlético Madrid did not need to play a victory shoot-out in the 1990 UCL semifinal.\nFOL: NeedsToPlayVictoryShootOut(RealMadrid, AtleticoMadrid)\n\nANSWER: False\nProcessed: False", "Generation 2:\nTEXT: If two soccer teams score the same number of points in one UCL semifinal during the regular time, they need to play for the extra time.\nFOL: all x. all y. (SoccerTeam(x) & SoccerTeam(y) & UCLSemifinal(x, y) & SamePoints(x, y, RegularTime) -> NeedExtraTime(x, y))\n\nTEXT: If two soccer teams score the same number of points in one UCL semifinal during both regular and extra time, they need to play the victory shoot-out.\nFOL: all x. all y. (SoccerTeam(x) & SoccerTeam(y) & UCLSemifinal(x, y) & SamePoints(x, y, RegularTime) & SamePoints(x, y, ExtraTime) -> VictoryShootout(x, y))\n\nTEXT: Real Madrid and Atlético Madrid both scored one point in the 1990 UCL semifinal during the regular time.\nFOL: SamePoints(RealMadrid, AtléticoMadrid, 1990, RegularTime)\n\nTEXT: Real Madrid and Atlético Madrid both scored zero point in the 1990 UCL semifinal during the extra time.\nFOL: SamePoints(RealMadrid, AtléticoMadrid, 1990, ExtraTime)\n\nTEXT: Real Madrid and Atlético Madrid did not need to play a victory shoot-out in the 1990 UCL semifinal.\nFOL: -VictoryShootout(RealMadrid, AtléticoMadrid, 1990)\n\nANSWER: True\nProcessed: True", "Generation 3:\nTEXT: If two soccer teams score the same number of points in one UCL semifinal during the regular time, they need to play for the extra time.\nFOL: all x. all y. (SoccerTeam(x) & SoccerTeam(y) & UCLSemifinal(x, y) & ScoreTheSamePoints(x, y, RegularTime) -> ExtraTime(x, y))\n\nTEXT: If two soccer teams score the same number of points in one UCL semifinal during both regular and extra time, they need to play the victory shoot-out.\nFOL: all x. all y. (SoccerTeam(x) & SoccerTeam(y) & UCLSemifinal(x, y) & ScoreTheSamePoints(x, y, RegularTime) & ScoreTheSamePoints(x, y, ExtraTime) -> VictoryShootOut(x, y))\n\nTEXT: Real Madrid and Atlético Madrid both scored one point in the 1990 UCL semifinal during the regular time.\nFOL: ScoreTheSamePoints(RealMadrid, AtléticoMadrid, 1, 1990, RegularTime)\n\nTEXT: Real Madrid and Atlético Madrid both scored zero point in the 1990 UCL semifinal during the extra time.\nFOL: ScoreTheSamePoints(RealMadrid, AtléticoMadrid, 0, 1990, ExtraTime)\n\nTEXT: Real Madrid and Atlético Madrid did not need to play a victory shoot-out in the 1990 UCL semifinal.\nFOL: -VictoryShootOut(RealMadrid, AtléticoMadrid, 1990)\n\nANSWER: True\nProcessed: True", "Generation 4:\nTEXT: If two soccer teams score the same number of points in one UCL semifinal during the regular time, they need to play for the extra time.\nFOL: all x. all y. ((SoccerTeam(x) & SoccerTeam(y) & UCLSemifinal(x, y) & Score(x, Point) = Score(y, Point) & RegularTime(x, y)) -> ExtraTime(x, y))\n\nTEXT: If two soccer teams score the same number of points in one UCL semifinal during both regular and extra time, they need to play the victory shoot-out.\nFOL: all x. all y. ((SoccerTeam(x) & SoccerTeam(y) & UCLSemifinal(x, y) & (Score(x, Point) = Score(y, Point) & RegularTime(x, y)) & (Score(x, Point) = Score(y, Point) & ExtraTime(x, y))) -> VictoryShootout(x, y)\n\nTEXT: Real Madrid and Atlético Madrid both scored one point in the 1990 UCL semifinal during the regular time.\nFOL: Score(RealMadrid, 1990UCLSemifinal, Point) = Score(AtleticoMadrid, 1990UCLSemifinal, Point) & RegularTime(RealMadrid, AtleticoMadrid, 1990UCLSemifinal)\n\nTEXT: Real Madrid and Atlético Madrid both scored zero point in the 1990 UCL semifinal during the extra time.\nFOL: Score(RealMadrid, 1990UCLSemifinal, Point) = Score(AtleticoMadrid, 1990UCLSemifinal, Point) & ExtraTime(RealMadrid, AtleticoMadrid, 1990UCLSemifinal)\n\nTEXT: Real Madrid and Atlético Madrid did not need to play a victory shoot-out in the 1990 UCL semifinal.\nFOL: -VictoryShootout(RealMadrid, AtleticoMadrid, 1990UCLSemifinal)\n\nANSWER: True\nProcessed: True", "Generation 5:\nTEXT: If two soccer teams score the same number of points in one UCL semifinal during the regular time, they need to play for the extra time.\nFOL: all x. all y. (Team(x) & Team(y) & UCLSemifinal(x, y) & Score(x, Points) = Score(y, Points) -> ExtraTime(x))\n\nTEXT: If two soccer teams score the same number of points in one UCL semifinal during both regular and extra time, they need to play the victory shoot-out.\nFOL: all x. all y. (Team(x) & Team(y) & UCLSemifinal(x, y) & (Score(x, Points) = Score(y, Points) & ExtraTime(x)) -> VictoryShootOut(x))\n\nTEXT: Real Madrid and Atlético Madrid both scored one point in the 1990 UCL semifinal during the regular time.\nFOL: Score(RealMadrid, 1990) = Score(AtleticoMadrid, 1990)\n\nTEXT: Real Madrid and Atlético Madrid both scored zero point in the 1990 UCL semifinal during the extra time.\nFOL: ExtraTime(RealMadrid, 0) & ExtraTime(AtleticoMadrid, 0)\n\nTEXT: Real Madrid and Atlético Madrid did not need to play a victory shoot-out in the 1990 UCL semifinal.\nFOL: -VictoryShootOut(RealMadrid, 1990) & -VictoryShootOut(AtleticoMadrid, 1990)\n\nANSWER: True\nProcessed: True", "Generation 6:\nTEXT: If two soccer teams score the same number of points in one UCL semifinal during the regular time, they need to play for the extra time.\nFOL: all x. all y. ((Team(x) & Team(y) & UCLSemifinal(x, y) & Score(x, Point) = Score(y, Point) & RegularTime(x, y)) -> ExtraTime(x, y))\n\nTEXT: If two soccer teams score the same number of points in one UCL semifinal during both regular and extra time, they need to play the victory shoot-out.\nFOL: all x. all y. ((Team(x) & Team(y) & UCLSemifinal(x, y) & Score(x, Point) = Score(y, Point) & (RegularTime(x, y) | ExtraTime(x, y))) -> VictoryShootOut(x, y))\n\nTEXT: Real Madrid and Atlético Madrid both scored one point in the 1990 UCL semifinal during the regular time.\nFOL: Score(RealMadrid, 1990UCLSemifinal, 1) = Score(AtleticoMadrid, 1990UCLSemifinal, 1) & RegularTime(RealMadrid, AtleticoMadrid, 1990UCLSemifinal)\n\nTEXT: Real Madrid and Atlético Madrid both scored zero point in the 1990 UCL semifinal during the extra time.\nFOL: Score(RealMadrid, 1990UCLSemifinal, 0) = Score(AtleticoMadrid, 1990UCLSemifinal, 0) & ExtraTime(RealMadrid, AtleticoMadrid, 1990UCLSemifinal)\n\nTEXT: Real Madrid and Atlético Madrid did not need to play a victory shoot-out in the 1990 UCL semifinal.\nFOL: -VictoryShootOut(RealMadrid, AtleticoMadrid, 1990UCLSemifinal)\n\nANSWER: True\nProcessed: True", "Generation 7:\nTEXT: If two soccer teams score the same number of points in one UCL semifinal during the regular time, they need to play for the extra time.\nFOL: all x. all y. (UCLSemifinal(x) & SoccerTeam(x) & SoccerTeam(y) & Points(x, RegularTime, SameNumber(a)) -> ExtraTime(x))\n\nTEXT: If two soccer teams score the same number of points in one UCL semifinal during both regular and extra time, they need to play the victory shoot-out.\nFOL: all x. all y. (UCLSemifinal(x) & SoccerTeam(x) & SoccerTeam(y) & Points(x, RegularTime, SameNumber(a)) & Points(x, ExtraTime, SameNumber(a)) -> VictoryShootOut(x))\n\nTEXT: Real Madrid and Atlético Madrid both scored one point in the 1990 UCL semifinal during the regular time.\nFOL: Points(RealMadrid, 1990, RegularTime, One) & Points(AtleticoMadrid, 1990, RegularTime, One)\n\nTEXT: Real Madrid and Atlético Madrid both scored zero point in the 1990 UCL semifinal during the extra time.\nFOL: Points(RealMadrid, 1990, ExtraTime, Zero) & Points(AtleticoMadrid, 1990, ExtraTime, Zero)\n\nTEXT: Real Madrid and Atlético Madrid did not need to play a victory shoot-out in the 1990 UCL semifinal.\nFOL: -VictoryShootOut(RealMadrid, AtleticoMadrid, 1990)\n\nANSWER: True\nProcessed: True", "Generation 8:\nTEXT: If two soccer teams score the same number of points in one UCL semifinal during one time, they need to play for the next time if they score the same in the next time.\nFOL: all x. all y. (SoccerTeam(x) & SoccerTeam(y) & UCLSemifinal(z) & Score(x, z, a) = Score(y, z, a) & -(ExtraTime(z) -> Score(x, z, ExtraTime) = Score(y, z, ExtraTime)) -> NeedToPlay(x, y, NextTime)\n\nTEXT: If two soccer teams score the same number of points in one UCL semifinal during both regular and extra time, they need to play the victory shoot-out.\nFOL: all x. all y. (SoccerTeam(x) & SoccerTeam(y) & UCLSemifinal(z) & (Score(x, z, a) = Score(y, z, a) & Score(x, z, ExtraTime) = Score(y, z, ExtraTime)) -> NeedToPlay(x, y, VictoryShootOut)\n\nTEXT: Real Madrid and Atlético Madrid both scored one point in the 1990 UCL semifinal during the regular time.\nFOL: Score(RealMadrid, 1990Semifinal, 1) = Score(AtleticoMadrid, 1990Semifinal, 1) & RegularTime(1990Semifinal)\n\nTEXT: Real Madrid and Atlético Madrid both scored zero point in the 1990 UCL semifinal during the extra time.\nFOL: Score(RealMadrid, 1990Semifinal, ExtraTime) = 0 & Score(AtleticoMadrid, 1990Semifinal, ExtraTime) = 0 & ExtraTime(1990Semifinal)\n\nTEXT: Real Madrid and Atlético Madrid did not need to play a victory shoot-out in the 1990 UCL semifinal.\nFOL: -NeedToPlay(RealMadrid, AtleticoMadrid, VictoryShootOut)\n\nANSWER: True\nProcessed: True", "Generation 9:\nTEXT: If two soccer teams score the same number of points in one UCL semifinal during the regular time, they need to play for the extra time.\nFOL: all x. all y. (UCLSemifinal(x) & SoccerTeam(x) & SoccerTeam(y) & Points(x, y, z) & z = w & ExtraTimeNeeded(x, y, z) <- (z = w & RegularTime(x, y, z)))\n\nTEXT: If two soccer teams score the same number of points in one UCL semifinal during both regular and extra time, they need to play the victory shoot-out.\nFOL: all x. all y. (UCLSemifinal(x) & SoccerTeam(x) & SoccerTeam(y) & Points(x, y, z) & z = w & ExtraTime(x, y, z) = 0 & ShootoutNeeded(x, y, z) <- ((z = w) & (ExtraTime(x, y, z) = 0)))\n\nTEXT: Real Madrid and Atlético Madrid both scored one point in the 1990 UCL semifinal during the regular time.\nFOL: Points(RealMadrid, AtléticoMadrid, 1) & RegularTime(RealMadrid, AtléticoMadrid, 1)\n\nTEXT: Real Madrid and Atlético Madrid both scored zero point in the 1990 UCL semifinal during the extra time.\nFOL: ExtraTime(RealMadrid, AtléticoMadrid, 0)\n\nTEXT: Real Madrid and Atlético Madrid did not need to play a victory shoot-out in the 1990 UCL semifinal.\nFOL: -ShootoutNeeded(RealMadrid, AtléticoMadrid, 1)\n\nANSWER: True\nProcessed: True", "Generation 10:\nTEXT: If two soccer teams score the same number of points in one UCL semifinal during one time, they need to play for the next time if there is one.\nFOL: all x. all y. (SoccerTeam(x) & SoccerTeam(y) & UCLSemifinal(Semifinal) & Points(x, Semifinal, Points1) = Points(y, Semifinal, Points1) -> (exists z. NextTime(z) & NeedToPlay(x, y, z)))\n\nTEXT: If two soccer teams score the same number of points in one UCL semifinal during both regular and extra time, they need to play the victory shoot-out.\nFOL: all x. all y. (SoccerTeam(x) & SoccerTeam(y) & UCLSemifinal(Semifinal) & Points(x, Semifinal, Points1) = Points(y, Semifinal, Points1) & Points(x, Semifinal, Points2) = Points(y, Semifinal, Points2) -> NeedToPlayVictoryShootout(x, y, Semifinal))\n\nTEXT: Real Madrid and Atlético Madrid both scored one point in the 1990 UCL semifinal during the regular time.\nFOL: Points(RealMadrid, 1990Semifinal, Points1) = 1 & Points(AtleticoMadrid, 1990Semifinal, Points1) = 1\n\nTEXT: Real Madrid and Atlético Madrid both scored zero point in the 1990 UCL semifinal during the extra time.\nFOL: Points(RealMadrid, 1990Semifinal, Points2) = 0 & Points(AtleticoMadrid, 1990Semifinal, Points2) = 0\n\nTEXT: Real Madrid and Atlético Madrid did not need to play a victory shoot-out in the 1990 UCL semifinal.\nFOL: not NeedToPlayVictoryShootout(RealMadrid, AtleticoMadrid, 1990Semifinal)\n\nANSWER: True\nProcessed: True\n\nReference: False\n========================================"], "answers": ["False", "True", "True", "True", "True", "True", "True", "True", "True", "True"]}
{"idx": 40, "prompt": "The following is a first-order logic (FOL) problem.\nThe problem is to determine whether the conclusion follows from the premises.\nThe premises are given in the form of a set of first-order logic sentences.\nThe conclusion is given in the form of a single first-order logic sentence.\nThe task is to translate each of the premises and conclusions into FOL expressions.and then to evaluate the conclusion as ANSWER: True, ANSWER: False, or ANSWER: Uncertain given the premises. The output should follow format TEXT: \nFOL: \nTEXT: \nFOL:... ANSWER: \n\n\n<PREMISES>\nAll biodegradable things are environment-friendly.\nAll woodware is biodegradable.\nAll paper is woodware.\nNothing is a good thing and also a bad thing.\nAll environment-friendly things are good.\nA worksheet is either paper or environment-friendly.\n</PREMISES>\n<CONCLUSION>\nA worksheet is not biodegradable.\n</CONCLUSION>\n<EVALUATE>\nTEXT: All biodegradable things are environment-friendly.\nFOL: all x. (Biodegradable(x) -> EnvironmentFriendly(x))\nTEXT: All woodware is biodegradable.\nFOL: all x. (Woodware(x) -> Biodegradable(x))\nTEXT: All paper is woodware.\nFOL: all x. (Paper(x) -> Woodware(x))\nTEXT: Nothing is a good thing and also a bad thing.\nFOL: -(exists x. (Good(x) & Bad(x)))\nTEXT: All environment-friendly things are good.\nFOL: all x. (EnvironmentFriendly(x) -> Good(x))\nTEXT: A worksheet is either paper or environment-friendly.\nFOL: ((Paper(Worksheet) & -EnvironmentFriendly(Worksheet)) | (-Paper(Worksheet) & EnvironmentFriendly(Worksheet)))\nTEXT: A worksheet is not biodegradable.\nFOL: -Dispensable(Worksheet)\n\nANSWER: Uncertain\n</EVALUATE>\n\n<PREMISES>\nA La Liga soccer team ranks higher than another La Liga soccer team if it receives more points.\nIf there are two La Liga soccer teams and neither has more points than the other, then the team which receives more points from the games between the two teams ranks higher.\nReal Madrid and Barcelona are both La Liga soccer teams.\nReal Madrid received more points than Barcelona.\nNeither Real Madrid nor Barcelona received more points from the games between them.\n</PREMISES>\n<CONCLUSION>\nReal Madrid ranks higher than Barcelona.\n</CONCLUSION>\n<EVALUATE>\nTEXT: A La Liga soccer team ranks higher than another La Liga soccer team if it receives more points.\nFOL: all x. all y. (LaLigaSoccerTeam(x) & LaLigaSoccerTeam(y) & MorePoints(x, y) -> RankHigherThan(x, y))\nTEXT: If there are two La Liga soccer teams and neither has more points than the other, then the team which receives more points from the games between the two teams ranks higher.\nFOL: all x. all y. (LaLigaSoccerTeam(x) & LaLigaSoccerTeam(y) & -MorePoints(x, y) & -MorePoints(y, x) & MorePointsInGameBetween(x, y) ->  RankHigherThan(x, y))\nTEXT: Real Madrid and Barcelona are both La Liga soccer teams.\nFOL: LaLigaSoccerTeam(RealMadrid) & LaLigaSoccerTeam(Barcelona)\nTEXT: Real Madrid received more points than Barcelona.\nFOL: MorePoints(RealMadrid, Barcelona)\nTEXT: Neither Real Madrid nor Barcelona received more points from the games between them.\nFOL: -MorePointsInGameBetween(RealMadrid, Barcelona) & -MorePointsInGameBetween(Barcelona, RealMadrid)\nTEXT: Real Madrid ranks higher than Barcelona.\nFOL: HigherRank(RealMadrid, Barcelona)\n\nANSWER: True\n</EVALUATE>\n\n<PREMISES>\nAll professional athletes spend most of their time on sports.\nAll Olympic gold medal winners are professional athletes.\nNo full-time scientists spend the majority of their time on sports.\nAll Nobel physics laureates are full-time scientists.\nAmy spends the most time on sports, or Amy is an Olympic gold medal winner.\nIf Amy is not a Nobel physics laureate, then Amy is not an Olympic gold medal winner.\n</PREMISES>\n<CONCLUSION>\nIf Amy is not an Olympic gold medal winner, then Amy is a Nobel physics laureate.\n</CONCLUSION>\n<EVALUATE>\nTEXT: All professional athletes spend most of their time on sports.\nFOL: all x. (ProfessionalAthlete(x) -> SpendOn(x, MostOfTheirTime, Sports))\nTEXT: All Olympic gold medal winners are professional athletes.\nFOL: all x. (OlympicGoldMedalWinner(x) -> ProfessionalAthlete(x))\nTEXT: No full-time scientists spend the majority of their time on sports.\nFOL: all x. (FullTimeScientist(x) -> -SpendOn(x, MostOfTheirTime, Sports))\nTEXT: All Nobel physics laureates are full-time scientists.\nFOL: all x. (NobelPhysicsLaureate(x) -> FullTimeScientist(x))\nTEXT: Amy spends the most time on sports, or Amy is an Olympic gold medal winner.\nFOL: SpendOn(Amy, MostOfTheirTime, Sports) | OlympicGoldMedalWinner(Amy)\nTEXT: If Amy is not a Nobel physics laureate, then Amy is not an Olympic gold medal winner.\nFOL: -NobelPhysicsLaureate(Amy) -> -OlympicGoldMedalWinner(Amy)\nTEXT: If Amy is not an Olympic gold medal winner, then Amy is a Nobel physics laureate.\nFOL: -OlympicGoldMedalWinner(Amy) -> NobelLaureate(Amy)\n\nANSWER: False\n</EVALUATE>\n\n<PREMISES>\nIf a person pays their taxes, then they contribute to the country.\nEveryone who works for a government department pays a tax on their salary.\nEveryone in the army is an employee of a government department.\nEveryone convicted of murder goes to prison.\nEveryone who has been to prison has a criminal record.\nJames was either once convicted of murder, or spent time in prison.\nJames either has a criminal record, or pays his taxes.\n</PREMISES>\n<CONCLUSION>\nJames does not contribute to the country.\n</CONCLUSION>\n<EVALUATE>\nTEXT: If a person pays their taxes, then they contribute to the country.\nFOL: all x. (Taxpayer(x) -> ContributeTo(x, Country))\nTEXT: Everyone who works for a government department pays a tax on their salary.\nFOL: all x. (WorkFor(x, GovernmentAgency) -> Taxpayer(x))\nTEXT: Everyone in the army is an employee of a government department.\nFOL: all x. (ServesIn(x, TheArmy) -> WorkFor(x, GovernmentAgency))\nTEXT: Everyone convicted of murder goes to prison.\nFOL: all x. (SentencedForMurder(x) -> Imprisoned(x))\nTEXT: Everyone who has been to prison has a criminal record.\nFOL: all x. (Imprisoned((x) -> Has(x, CriminalRecord))\nTEXT: James was either once convicted of murder, or spent time in prison.\nFOL: ((SentencedForMurder(James) & -Imprisoned(James)) | (-SentencedForMurder(James) & Imprisoned(James)))\nTEXT: James either has a criminal record, or pays his taxes.\nFOL: ((Has(James, CriminalRecord) & -Taxpayer(James)) | (-Has(James, CriminalRecord) & Taxpayer(James)))\nTEXT: James does not contribute to the country.\nFOL: ContributeToCountry(James)\n\nANSWER: Uncertain\n</EVALUATE>\n\n<PREMISES>\nNo songs are visuals.\nAll folk songs are songs.\nAll videos are visuals.\nAll movies are videos.\nAll sci-fi movies are movies.\nInception is a sci-fi movie.\nMac is neither a folk song nor a sci-fi movie.\n</PREMISES>\n<CONCLUSION>\nInception is a folk song.\n</CONCLUSION>\n<EVALUATE>\nTEXT: No songs are visuals.\nFOL: all x. (Song(x) -> -Visual(x))\nTEXT: All folk songs are songs.\nFOL: all x. (FolkSong(x) -> Song(x))\nTEXT: All videos are visuals.\nFOL: all x. (Video(x) -> Visual(x))\nTEXT: All movies are videos.\nFOL: all x. (Movie(x) -> Video(x))\nTEXT: All sci-fi movies are movies.\nFOL: all x. (ScifiMovie(x) -> Movie(x))\nTEXT: Inception is a sci-fi movie.\nFOL: ScifiMovie(Inception)\nTEXT: Mac is neither a folk song nor a sci-fi movie.\nFOL: -FolkSong(Mac) & -ScifiMovie(Mac)\nTEXT: Inception is a folk song.\nFOL: FolkSong(Inception)\n\nANSWER: False\n</EVALUATE>\n\n<PREMISES>\nEvery chef can cook.\nSome people who aren’t chefs can cook.\nPeople who cook can make scrambled eggs and pasta.\nIf someone can make cookies and muffins, they are a baker.\nBakers who can also make scrambled eggs can make a good breakfast.\nLuke can make cookies, scrambled eggs, and muffins, but not pasta.\n</PREMISES>\n<CONCLUSION>\nLuke is a chef.\n</CONCLUSION>\n<EVALUATE>\nTEXT: Every chef can cook.\nFOL: all x. (Chef(x) -> Can(x, Cook))\nTEXT: Some people who aren’t chefs can cook.\nFOL: exists x. (-Chef(x) & Can(x, Cook))\nTEXT: People who cook can make scrambled eggs and pasta.\nFOL: all x. (Can(x, Cook) -> (CanMake(x, ScrambledEggs) & CanMake(x, Pasta)))\nTEXT: If someone can make cookies and muffins, they are a baker.\nFOL: all x. (CanMake(x, Cookies) & CanMake(x, Muffins) -> Baker(x))\nTEXT: Bakers who can also make scrambled eggs can make a good breakfast.\nFOL: all x. ((Baker(x) & CanMake(x, ScrambledEggs)) -> CanMake(x, GoodBreakfast))\nTEXT: Luke can make cookies, scrambled eggs, and muffins, but not pasta.\nFOL: CanMake(Luke, Cookies) & (CanMake(Luke, ScrambledEggs) & CanMake(Luke, Muffins) & -CanMake(Luke, Pasta)\nTEXT: Luke is a chef.\nFOL: MakeGoodBreakfast(Luke)\n\nANSWER: False\n</EVALUATE>\n\n<PREMISES>\nETS develops various standardized tests primarily in the United States for K-12 and higher education.\nETS administers international tests, including the TOEFL, TOEIC, GRE, and subject tests.\nMany of the assessments ETS develops are associated with entry to the US tertiary and quaternary education institutions.\nETS also develops K-12 statewide assessments used for accountability testing in many states.\n</PREMISES>\n<CONCLUSION>\nETS doesn't administer tests internationally.\n</CONCLUSION>\n<EVALUATE>\nTEXT: ETS develops various standardized tests primarily in the United States for K-12 and higher education.\nFOL: exists x. exists y. (Develop(eTS, x) & Develop(eTS, y) & StandardizedTest(x) & StandardizedTest(y) & In(x, UnitedState) & In(y, UnitedState) & For(x, kOneTwoAndHigherEducation) & For(y, kOneTwoAndHigherEducation))\nTEXT: ETS administers international tests, including the TOEFL, TOEIC, GRE, and subject tests.\nFOL: exists x. (Administer(eTS, x) & InternationalTest(x) & (TOEFL(x) | TOEIC(x) | GRE(x) | SubjectTest(x)))\nTEXT: Many of the assessments ETS develops are associated with entry to the US tertiary and quaternary education institutions.\nFOL: exists x. (Develop(eTS, x) & AssociatedWith(x, EntryToUSEducationInstitution))\nTEXT: ETS also develops K-12 statewide assessments used for accountability testing in many states.\nFOL: exists x. (Develop(eTS, x) & StateWideAssesment(x) & UsedFor(x, AccountabilityTesting))\nTEXT: ETS doesn't administer tests internationally.\nFOL: exists x. (Develops(Ets, x) & For(x, k-OneTwoandhighereducation)) & exists x. (Develops(Ets, x) & AssociatedWith(x, Entrytouseducationinstitutions))\n\nANSWER: False\n</EVALUATE>\n\n<PREMISES>\nDaveed Diggs is an actor and film producer.\nDaveed Diggs played two roles in the musical Hamilton on Broadway.\nOne of the actors from Hamilton won the best actor award.\nThe actor playing Thomas Jefferson won the best actor award.\nDaveed Diggs played Thomas Jefferson.\nMusicals on Broadway are not films.\n</PREMISES>\n<CONCLUSION>\nDaveed Diggs won the best actor award.\n</CONCLUSION>\n<EVALUATE>\nTEXT: Daveed Diggs is an actor and film producer.\nFOL: Actor(DaveedDiggs) & FilmProducer(DaveedDiggs)\nTEXT: Daveed Diggs played two roles in the musical Hamilton on Broadway.\nFOL: exists x. exists y.(PlaysIn(DaveedDiggs, x, Hamilton) & (-(x=y)) & PlaysIn(DaveedDiggs, y, Hamilton)) & OnBroadway(Hamilton) & Musical(Hamilton)\nTEXT: One of the actors from Hamilton won the best actor award.\nFOL: exists x. exists y.(Actor(x) & PlaysIn(x, y, Hamilton) & Wins(x, BestActorAward))\nTEXT: The actor playing Thomas Jefferson won the best actor award.\nFOL: exists x. (Actor(x) & PlaysIn(x, ThomasJefferson, Hamilton) & Wins(x, BestActorAward))\nTEXT: Daveed Diggs played Thomas Jefferson.\nFOL: Plays(DaveedDiggs, ThomasJefferson)\nTEXT: Musicals on Broadway are not films.\nFOL: all x. ((Musical(x) & OnBroadway(x)) -> -Film(x))\nTEXT: Daveed Diggs won the best actor award.\nFOL: exists x. (BRICS(x) & Speaks(x, Hindi))\n\nANSWER: True\n</EVALUATE>\n\n<PREMISES>\nAbleton has an office on Mars.\nAbleton has an office on Venus.\nMars and Venus are different planets.\nAny company that has offices in different planets is a small company.\nAbleton distroys music software.\n</PREMISES>\n<CONCLUSION>\nAbleton is a small company.\n</CONCLUSION>\n<EVALUATE>", "raw_generations": ["Generation 1:\nTEXT: Ableton has an office on Mars.\nFOL: HasOffice(Ableton, Mars)\nTEXT: Ableton has an office on Venus.\nFOL: HasOffice(Ableton, Venus)\nTEXT: Mars and Venus are different planets.\nFOL: Different(Mars, Venus)\nTEXT: Any company that has offices in different planets is a small company.\nFOL: all x. (HasOffice(x, Mars) & HasOffice(x, Venus) -> SmallCompany(x))\nTEXT: Ableton distroys music software.\nFOL: Destroys(Ableton, MusicSoftware)\nTEXT: Ableton is a small company.\nFOL: SmallCompany(Ableton)\n\nANSWER: True\nProcessed: True", "Generation 2:\nTEXT: Ableton has an office on Mars.\nFOL: OfficeOn(Ableton, Mars)\nTEXT: Ableton has an office on Venus.\nFOL: OfficeOn(Ableton, Venus)\nTEXT: Mars and Venus are different planets.\nFOL: DifferentPlanets(Mars, Venus)\nTEXT: Any company that has offices in different planets is a small company.\nFOL: all x. (OfficeOn(x, y) & OfficeOn(x, z) & DifferentPlanets(y, z) -> SmallCompany(x))\nTEXT: Ableton distroys music software.\nFOL: Distroys(Ableton, MusicSoftware)\nTEXT: Ableton is a small company.\nFOL: SmallCompany(Ableton)\n\nANSWER: True\nProcessed: True", "Generation 3:\nTEXT: Any company that has offices in different planets is a small company.\nFOL: all x. ((Office(x, Mars) & Office(x, Venus)) -> SmallCompany(x))\nTEXT: Ableton has an office on Mars.\nFOL: Office(Ableton, Mars)\nTEXT: Ableton has an office on Venus.\nFOL: Office(Ableton, Venus)\nTEXT: Mars and Venus are different planets.\nFOL: DifferentPlanets(Mars, Venus)\nTEXT: Ableton is a small company.\nFOL: SmallCompany(Ableton)\n\nANSWER: True\nProcessed: True", "Generation 4:\nTEXT: Ableton has an office on Mars.\nFOL: OfficeOn(Ableton, Mars)\n\nTEXT: Ableton has an office on Venus.\nFOL: OfficeOn(Ableton, Venus)\n\nTEXT: Mars and Venus are different planets.\nFOL: DifferentPlanets(Mars, Venus)\n\nTEXT: Any company that has offices in different planets is a small company.\nFOL: all x. (OfficeOn(x, Mars) & OfficeOn(x, Venus) -> SmallCompany(x))\n\nTEXT: Ableton distroys music software.\nFOL: Distroys(Ableton, MusicSoftware)\n\nTEXT: Ableton is a small company.\nFOL: SmallCompany(Ableton)\n\nANSWER: True\nProcessed: True", "Generation 5:\nTEXT: Any company that has offices in different planets is a small company.\nFOL: all x. (OfficeOn(x, Mars) & OfficeOn(x, Venus) -> SmallCompany(x))\nTEXT: Ableton has an office on Mars.\nFOL: OfficeOn(Ableton, Mars)\nTEXT: Ableton has an office on Venus.\nFOL: OfficeOn(Ableton, Venus)\nTEXT: Mars and Venus are different planets.\nFOL: DifferentPlanets(Mars, Venus)\nTEXT: Ableton distroys music software.\nFOL: Distroys(Ableton, MusicSoftware)\nTEXT: Ableton is a small company.\nFOL: SmallCompany(Ableton)\n\nANSWER: True\nProcessed: True", "Generation 6:\nTEXT: Ableton has an office on Mars.\nFOL: OfficeOn(Ableton, Mars)\n\nTEXT: Ableton has an office on Venus.\nFOL: OfficeOn(Ableton, Venus)\n\nTEXT: Mars and Venus are different planets.\nFOL: Different(Mars, Venus)\n\nTEXT: Any company that has offices in different planets is a small company.\nFOL: all x. (OfficeOn(x, Mars) & OfficeOn(x, Venus) -> SmallCompany(x))\n\nTEXT: Ableton distroys music software.\nFOL: Distroys(Ableton, MusicSoftware)\n\nTEXT: Ableton is a small company.\nFOL: SmallCompany(Ableton)\n\nANSWER: True\nProcessed: True", "Generation 7:\nTEXT: Ableton has an office on Mars.\nFOL: OfficeOn(Ableton, Mars)\nTEXT: Ableton has an office on Venus.\nFOL: OfficeOn(Ableton, Venus)\nTEXT: Mars and Venus are different planets.\nFOL: DifferentPlanets(Mars, Venus)\nTEXT: Any company that has offices in different planets is a small company.\nFOL: all x. (OfficeOn(x, Mars) & OfficeOn(x, Venus) -> SmallCompany(x))\nTEXT: Ableton distroys music software.\nFOL: Distroys(Ableton, MusicSoftware)\nTEXT: Ableton is a small company.\nFOL: SmallCompany(Ableton)\n\nANSWER: True\nProcessed: True", "Generation 8:\nTEXT: Ableton has an office on Mars.\nFOL: HasOffice(Ableton, Mars)\nTEXT: Ableton has an office on Venus.\nFOL: HasOffice(Ableton, Venus)\nTEXT: Mars and Venus are different planets.\nFOL: Different(Mars, Venus)\nTEXT: Any company that has offices in different planets is a small company.\nFOL: all x. (HasOffice(x, Mars) & HasOffice(x, Venus) -> SmallCompany(x))\nTEXT: Ableton distroys music software.\nFOL: Destroys(Ableton, MusicSoftware)\nTEXT: Ableton is a small company.\nFOL: SmallCompany(Ableton)\n\nANSWER: True\nProcessed: True", "Generation 9:\nTEXT: Ableton has an office on Mars.\nFOL: Office(Ableton, Mars)\n\nTEXT: Ableton has an office on Venus.\nFOL: Office(Ableton, Venus)\n\nTEXT: Mars and Venus are different planets.\nFOL: DifferentPlanets(Mars, Venus)\n\nTEXT: Any company that has offices in different planets is a small company.\nFOL: all x. (Office(x, Mars) & Office(x, Venus) -> SmallCompany(x))\n\nTEXT: Ableton distroys music software.\nFOL: Distroys(Ableton, MusicSoftware)\n\nTEXT: Ableton is a small company.\nFOL: SmallCompany(Ableton)\n\nANSWER: True\nProcessed: True", "Generation 10:\nTEXT: Ableton has an office on Mars.\nFOL: Office(Ableton, Mars)\n\nTEXT: Ableton has an office on Venus.\nFOL: Office(Ableton, Venus)\n\nTEXT: Mars and Venus are different planets.\nFOL: DifferentPlanets(Mars, Venus)\n\nTEXT: Any company that has offices in different planets is a small company.\nFOL: all x. (Office(x, Mars) & Office(x, Venus) -> SmallCompany(x))\n\nTEXT: Ableton distroys music software.\nFOL: Distroys(Ableton, MusicSoftware)\n\nTEXT: Ableton is a small company.\nFOL: SmallCompany(Ableton)\n\nANSWER: True\nProcessed: True\n\nReference: True\n========================================"], "answers": ["True", "True", "True", "True", "True", "True", "True", "True", "True", "True"]}
{"idx": 41, "prompt": "The following is a first-order logic (FOL) problem.\nThe problem is to determine whether the conclusion follows from the premises.\nThe premises are given in the form of a set of first-order logic sentences.\nThe conclusion is given in the form of a single first-order logic sentence.\nThe task is to translate each of the premises and conclusions into FOL expressions.and then to evaluate the conclusion as ANSWER: True, ANSWER: False, or ANSWER: Uncertain given the premises. The output should follow format TEXT: \nFOL: \nTEXT: \nFOL:... ANSWER: \n\n\n<PREMISES>\nAll biodegradable things are environment-friendly.\nAll woodware is biodegradable.\nAll paper is woodware.\nNothing is a good thing and also a bad thing.\nAll environment-friendly things are good.\nA worksheet is either paper or environment-friendly.\n</PREMISES>\n<CONCLUSION>\nA worksheet is not biodegradable.\n</CONCLUSION>\n<EVALUATE>\nTEXT: All biodegradable things are environment-friendly.\nFOL: all x. (Biodegradable(x) -> EnvironmentFriendly(x))\nTEXT: All woodware is biodegradable.\nFOL: all x. (Woodware(x) -> Biodegradable(x))\nTEXT: All paper is woodware.\nFOL: all x. (Paper(x) -> Woodware(x))\nTEXT: Nothing is a good thing and also a bad thing.\nFOL: -(exists x. (Good(x) & Bad(x)))\nTEXT: All environment-friendly things are good.\nFOL: all x. (EnvironmentFriendly(x) -> Good(x))\nTEXT: A worksheet is either paper or environment-friendly.\nFOL: ((Paper(Worksheet) & -EnvironmentFriendly(Worksheet)) | (-Paper(Worksheet) & EnvironmentFriendly(Worksheet)))\nTEXT: A worksheet is not biodegradable.\nFOL: -Dispensable(Worksheet)\n\nANSWER: Uncertain\n</EVALUATE>\n\n<PREMISES>\nA La Liga soccer team ranks higher than another La Liga soccer team if it receives more points.\nIf there are two La Liga soccer teams and neither has more points than the other, then the team which receives more points from the games between the two teams ranks higher.\nReal Madrid and Barcelona are both La Liga soccer teams.\nReal Madrid received more points than Barcelona.\nNeither Real Madrid nor Barcelona received more points from the games between them.\n</PREMISES>\n<CONCLUSION>\nReal Madrid ranks higher than Barcelona.\n</CONCLUSION>\n<EVALUATE>\nTEXT: A La Liga soccer team ranks higher than another La Liga soccer team if it receives more points.\nFOL: all x. all y. (LaLigaSoccerTeam(x) & LaLigaSoccerTeam(y) & MorePoints(x, y) -> RankHigherThan(x, y))\nTEXT: If there are two La Liga soccer teams and neither has more points than the other, then the team which receives more points from the games between the two teams ranks higher.\nFOL: all x. all y. (LaLigaSoccerTeam(x) & LaLigaSoccerTeam(y) & -MorePoints(x, y) & -MorePoints(y, x) & MorePointsInGameBetween(x, y) ->  RankHigherThan(x, y))\nTEXT: Real Madrid and Barcelona are both La Liga soccer teams.\nFOL: LaLigaSoccerTeam(RealMadrid) & LaLigaSoccerTeam(Barcelona)\nTEXT: Real Madrid received more points than Barcelona.\nFOL: MorePoints(RealMadrid, Barcelona)\nTEXT: Neither Real Madrid nor Barcelona received more points from the games between them.\nFOL: -MorePointsInGameBetween(RealMadrid, Barcelona) & -MorePointsInGameBetween(Barcelona, RealMadrid)\nTEXT: Real Madrid ranks higher than Barcelona.\nFOL: HigherRank(RealMadrid, Barcelona)\n\nANSWER: True\n</EVALUATE>\n\n<PREMISES>\nAll professional athletes spend most of their time on sports.\nAll Olympic gold medal winners are professional athletes.\nNo full-time scientists spend the majority of their time on sports.\nAll Nobel physics laureates are full-time scientists.\nAmy spends the most time on sports, or Amy is an Olympic gold medal winner.\nIf Amy is not a Nobel physics laureate, then Amy is not an Olympic gold medal winner.\n</PREMISES>\n<CONCLUSION>\nIf Amy is not an Olympic gold medal winner, then Amy is a Nobel physics laureate.\n</CONCLUSION>\n<EVALUATE>\nTEXT: All professional athletes spend most of their time on sports.\nFOL: all x. (ProfessionalAthlete(x) -> SpendOn(x, MostOfTheirTime, Sports))\nTEXT: All Olympic gold medal winners are professional athletes.\nFOL: all x. (OlympicGoldMedalWinner(x) -> ProfessionalAthlete(x))\nTEXT: No full-time scientists spend the majority of their time on sports.\nFOL: all x. (FullTimeScientist(x) -> -SpendOn(x, MostOfTheirTime, Sports))\nTEXT: All Nobel physics laureates are full-time scientists.\nFOL: all x. (NobelPhysicsLaureate(x) -> FullTimeScientist(x))\nTEXT: Amy spends the most time on sports, or Amy is an Olympic gold medal winner.\nFOL: SpendOn(Amy, MostOfTheirTime, Sports) | OlympicGoldMedalWinner(Amy)\nTEXT: If Amy is not a Nobel physics laureate, then Amy is not an Olympic gold medal winner.\nFOL: -NobelPhysicsLaureate(Amy) -> -OlympicGoldMedalWinner(Amy)\nTEXT: If Amy is not an Olympic gold medal winner, then Amy is a Nobel physics laureate.\nFOL: -OlympicGoldMedalWinner(Amy) -> NobelLaureate(Amy)\n\nANSWER: False\n</EVALUATE>\n\n<PREMISES>\nIf a person pays their taxes, then they contribute to the country.\nEveryone who works for a government department pays a tax on their salary.\nEveryone in the army is an employee of a government department.\nEveryone convicted of murder goes to prison.\nEveryone who has been to prison has a criminal record.\nJames was either once convicted of murder, or spent time in prison.\nJames either has a criminal record, or pays his taxes.\n</PREMISES>\n<CONCLUSION>\nJames does not contribute to the country.\n</CONCLUSION>\n<EVALUATE>\nTEXT: If a person pays their taxes, then they contribute to the country.\nFOL: all x. (Taxpayer(x) -> ContributeTo(x, Country))\nTEXT: Everyone who works for a government department pays a tax on their salary.\nFOL: all x. (WorkFor(x, GovernmentAgency) -> Taxpayer(x))\nTEXT: Everyone in the army is an employee of a government department.\nFOL: all x. (ServesIn(x, TheArmy) -> WorkFor(x, GovernmentAgency))\nTEXT: Everyone convicted of murder goes to prison.\nFOL: all x. (SentencedForMurder(x) -> Imprisoned(x))\nTEXT: Everyone who has been to prison has a criminal record.\nFOL: all x. (Imprisoned((x) -> Has(x, CriminalRecord))\nTEXT: James was either once convicted of murder, or spent time in prison.\nFOL: ((SentencedForMurder(James) & -Imprisoned(James)) | (-SentencedForMurder(James) & Imprisoned(James)))\nTEXT: James either has a criminal record, or pays his taxes.\nFOL: ((Has(James, CriminalRecord) & -Taxpayer(James)) | (-Has(James, CriminalRecord) & Taxpayer(James)))\nTEXT: James does not contribute to the country.\nFOL: ContributeToCountry(James)\n\nANSWER: Uncertain\n</EVALUATE>\n\n<PREMISES>\nNo songs are visuals.\nAll folk songs are songs.\nAll videos are visuals.\nAll movies are videos.\nAll sci-fi movies are movies.\nInception is a sci-fi movie.\nMac is neither a folk song nor a sci-fi movie.\n</PREMISES>\n<CONCLUSION>\nInception is a folk song.\n</CONCLUSION>\n<EVALUATE>\nTEXT: No songs are visuals.\nFOL: all x. (Song(x) -> -Visual(x))\nTEXT: All folk songs are songs.\nFOL: all x. (FolkSong(x) -> Song(x))\nTEXT: All videos are visuals.\nFOL: all x. (Video(x) -> Visual(x))\nTEXT: All movies are videos.\nFOL: all x. (Movie(x) -> Video(x))\nTEXT: All sci-fi movies are movies.\nFOL: all x. (ScifiMovie(x) -> Movie(x))\nTEXT: Inception is a sci-fi movie.\nFOL: ScifiMovie(Inception)\nTEXT: Mac is neither a folk song nor a sci-fi movie.\nFOL: -FolkSong(Mac) & -ScifiMovie(Mac)\nTEXT: Inception is a folk song.\nFOL: FolkSong(Inception)\n\nANSWER: False\n</EVALUATE>\n\n<PREMISES>\nEvery chef can cook.\nSome people who aren’t chefs can cook.\nPeople who cook can make scrambled eggs and pasta.\nIf someone can make cookies and muffins, they are a baker.\nBakers who can also make scrambled eggs can make a good breakfast.\nLuke can make cookies, scrambled eggs, and muffins, but not pasta.\n</PREMISES>\n<CONCLUSION>\nLuke is a chef.\n</CONCLUSION>\n<EVALUATE>\nTEXT: Every chef can cook.\nFOL: all x. (Chef(x) -> Can(x, Cook))\nTEXT: Some people who aren’t chefs can cook.\nFOL: exists x. (-Chef(x) & Can(x, Cook))\nTEXT: People who cook can make scrambled eggs and pasta.\nFOL: all x. (Can(x, Cook) -> (CanMake(x, ScrambledEggs) & CanMake(x, Pasta)))\nTEXT: If someone can make cookies and muffins, they are a baker.\nFOL: all x. (CanMake(x, Cookies) & CanMake(x, Muffins) -> Baker(x))\nTEXT: Bakers who can also make scrambled eggs can make a good breakfast.\nFOL: all x. ((Baker(x) & CanMake(x, ScrambledEggs)) -> CanMake(x, GoodBreakfast))\nTEXT: Luke can make cookies, scrambled eggs, and muffins, but not pasta.\nFOL: CanMake(Luke, Cookies) & (CanMake(Luke, ScrambledEggs) & CanMake(Luke, Muffins) & -CanMake(Luke, Pasta)\nTEXT: Luke is a chef.\nFOL: MakeGoodBreakfast(Luke)\n\nANSWER: False\n</EVALUATE>\n\n<PREMISES>\nETS develops various standardized tests primarily in the United States for K-12 and higher education.\nETS administers international tests, including the TOEFL, TOEIC, GRE, and subject tests.\nMany of the assessments ETS develops are associated with entry to the US tertiary and quaternary education institutions.\nETS also develops K-12 statewide assessments used for accountability testing in many states.\n</PREMISES>\n<CONCLUSION>\nETS doesn't administer tests internationally.\n</CONCLUSION>\n<EVALUATE>\nTEXT: ETS develops various standardized tests primarily in the United States for K-12 and higher education.\nFOL: exists x. exists y. (Develop(eTS, x) & Develop(eTS, y) & StandardizedTest(x) & StandardizedTest(y) & In(x, UnitedState) & In(y, UnitedState) & For(x, kOneTwoAndHigherEducation) & For(y, kOneTwoAndHigherEducation))\nTEXT: ETS administers international tests, including the TOEFL, TOEIC, GRE, and subject tests.\nFOL: exists x. (Administer(eTS, x) & InternationalTest(x) & (TOEFL(x) | TOEIC(x) | GRE(x) | SubjectTest(x)))\nTEXT: Many of the assessments ETS develops are associated with entry to the US tertiary and quaternary education institutions.\nFOL: exists x. (Develop(eTS, x) & AssociatedWith(x, EntryToUSEducationInstitution))\nTEXT: ETS also develops K-12 statewide assessments used for accountability testing in many states.\nFOL: exists x. (Develop(eTS, x) & StateWideAssesment(x) & UsedFor(x, AccountabilityTesting))\nTEXT: ETS doesn't administer tests internationally.\nFOL: exists x. (Develops(Ets, x) & For(x, k-OneTwoandhighereducation)) & exists x. (Develops(Ets, x) & AssociatedWith(x, Entrytouseducationinstitutions))\n\nANSWER: False\n</EVALUATE>\n\n<PREMISES>\nDaveed Diggs is an actor and film producer.\nDaveed Diggs played two roles in the musical Hamilton on Broadway.\nOne of the actors from Hamilton won the best actor award.\nThe actor playing Thomas Jefferson won the best actor award.\nDaveed Diggs played Thomas Jefferson.\nMusicals on Broadway are not films.\n</PREMISES>\n<CONCLUSION>\nDaveed Diggs won the best actor award.\n</CONCLUSION>\n<EVALUATE>\nTEXT: Daveed Diggs is an actor and film producer.\nFOL: Actor(DaveedDiggs) & FilmProducer(DaveedDiggs)\nTEXT: Daveed Diggs played two roles in the musical Hamilton on Broadway.\nFOL: exists x. exists y.(PlaysIn(DaveedDiggs, x, Hamilton) & (-(x=y)) & PlaysIn(DaveedDiggs, y, Hamilton)) & OnBroadway(Hamilton) & Musical(Hamilton)\nTEXT: One of the actors from Hamilton won the best actor award.\nFOL: exists x. exists y.(Actor(x) & PlaysIn(x, y, Hamilton) & Wins(x, BestActorAward))\nTEXT: The actor playing Thomas Jefferson won the best actor award.\nFOL: exists x. (Actor(x) & PlaysIn(x, ThomasJefferson, Hamilton) & Wins(x, BestActorAward))\nTEXT: Daveed Diggs played Thomas Jefferson.\nFOL: Plays(DaveedDiggs, ThomasJefferson)\nTEXT: Musicals on Broadway are not films.\nFOL: all x. ((Musical(x) & OnBroadway(x)) -> -Film(x))\nTEXT: Daveed Diggs won the best actor award.\nFOL: exists x. (BRICS(x) & Speaks(x, Hindi))\n\nANSWER: True\n</EVALUATE>\n\n<PREMISES>\nAbleton has an office on Mars.\nAbleton has an office on Venus.\nMars and Venus are different planets.\nAny company that has offices in different planets is a small company.\nAbleton distroys music software.\n</PREMISES>\n<CONCLUSION>\nAbleton does not have an office on Mars.\n</CONCLUSION>\n<EVALUATE>", "raw_generations": ["Generation 1:\nTEXT: Ableton has an office on Mars.\nFOL: OfficeOn(Ableton, Mars)\nTEXT: Ableton has an office on Venus.\nFOL: OfficeOn(Ableton, Venus)\nTEXT: Mars and Venus are different planets.\nFOL: DifferentPlanets(Mars, Venus)\nTEXT: Any company that has offices in different planets is a small company.\nFOL: all x. (OfficeOn(x, y) & OfficeOn(x, z) & DifferentPlanets(y, z) -> SmallCompany(x))\nTEXT: Ableton distroys music software.\nFOL: Distroys(Ableton, MusicSoftware)\nTEXT: Ableton does not have an office on Mars.\nFOL: -OfficeOn(Ableton, Mars)\n\nANSWER: True\nProcessed: True", "Generation 2:\nTEXT: Ableton has an office on Mars.\nFOL: OfficeOn(Ableton, Mars)\n\nTEXT: Ableton has an office on Venus.\nFOL: OfficeOn(Ableton, Venus)\n\nTEXT: Mars and Venus are different planets.\nFOL: DifferentPlanets(Mars, Venus)\n\nTEXT: Any company that has offices in different planets is a small company.\nFOL: all x. (OfficeOn(x, Mars) & OfficeOn(x, Venus) -> SmallCompany(x))\n\nTEXT: Ableton distroys music software.\nFOL: Distroys(Ableton, MusicSoftware)\n\nTEXT: Ableton does not have an office on Mars.\nFOL: -OfficeOn(Ableton, Mars)\n\nANSWER: True\nProcessed: True", "Generation 3:\nTEXT: Ableton has an office on Mars.\nFOL: OfficeOn(Ableton, Mars)\n\nTEXT: Ableton has an office on Venus.\nFOL: OfficeOn(Ableton, Venus)\n\nTEXT: Mars and Venus are different planets.\nFOL: DifferentPlanets(Mars, Venus)\n\nTEXT: Any company that has offices in different planets is a small company.\nFOL: all x. (OfficeOn(x, Mars) & OfficeOn(x, Venus) -> SmallCompany(x))\n\nTEXT: Ableton distroys music software.\nFOL: DistroysMusicSoftware(Ableton)\n\nTEXT: Ableton does not have an office on Mars.\nFOL: -OfficeOn(Ableton, Mars)\n\nANSWER: True\nProcessed: True", "Generation 4:\nTEXT: Ableton has an office on Mars.\nFOL: OfficeOn(Ableton, Mars)\n\nTEXT: Ableton has an office on Venus.\nFOL: OfficeOn(Ableton, Venus)\n\nTEXT: Mars and Venus are different planets.\nFOL: DifferentPlanets(Mars, Venus)\n\nTEXT: Any company that has offices in different planets is a small company.\nFOL: all x. (OfficeOn(x, Mars) & OfficeOn(x, Venus) -> SmallCompany(x))\n\nTEXT: Ableton distroys music software.\nFOL: Destroys(Ableton, MusicSoftware)\n\nTEXT: Ableton does not have an office on Mars.\nFOL: -OfficeOn(Ableton, Mars)\n\nANSWER: True\nProcessed: True", "Generation 5:\nTEXT: Ableton has an office on Mars.\nFOL: OfficeOn(Ableton, Mars)\nTEXT: Ableton has an office on Venus.\nFOL: OfficeOn(Ableton, Venus)\nTEXT: Mars and Venus are different planets.\nFOL: DifferentPlanets(Mars, Venus)\nTEXT: Any company that has offices in different planets is a small company.\nFOL: all x. (OfficeOn(x, Mars) & OfficeOn(x, Venus) -> SmallCompany(x))\nTEXT: Ableton distroys music software.\nFOL: Destroys(Ableton, MusicSoftware)\nTEXT: Ableton does not have an office on Mars.\nFOL: -OfficeOn(Ableton, Mars)\n\nANSWER: True\nProcessed: True", "Generation 6:\nTEXT: Ableton has an office on Mars.\nFOL: OfficeOn(Ableton, Mars)\n\nTEXT: Ableton has an office on Venus.\nFOL: OfficeOn(Ableton, Venus)\n\nTEXT: Mars and Venus are different planets.\nFOL: DifferentPlanets(Mars, Venus)\n\nTEXT: Any company that has offices in different planets is a small company.\nFOL: all x. (OfficeOn(x, Mars) & OfficeOn(x, Venus) -> SmallCompany(x))\n\nTEXT: Ableton distroys music software.\nFOL: Destroys(Ableton, MusicSoftware)\n\nTEXT: Ableton does not have an office on Mars.\nFOL: -OfficeOn(Ableton, Mars)\n\nANSWER: True\nProcessed: True", "Generation 7:\nTEXT: Ableton has an office on Mars.\nFOL: Office(Ableton, Mars)\n\nTEXT: Ableton has an office on Venus.\nFOL: Office(Ableton, Venus)\n\nTEXT: Mars and Venus are different planets.\nFOL: DifferentPlanets(Mars, Venus)\n\nTEXT: Any company that has offices in different planets is a small company.\nFOL: all x. (Office(x, y) & Office(x, z) & DifferentPlanets(y, z) -> SmallCompany(x))\n\nTEXT: Ableton distroys music software.\nFOL: Distroys(Ableton, MusicSoftware)\n\nTEXT: Ableton does not have an office on Mars.\nFOL: -Office(Ableton, Mars)\n\nANSWER: True\nProcessed: True", "Generation 8:\nTEXT: Ableton has an office on Mars.\nFOL: OfficeOn(Ableton, Mars)\nTEXT: Ableton has an office on Venus.\nFOL: OfficeOn(Ableton, Venus)\nTEXT: Mars and Venus are different planets.\nFOL: DifferentPlanets(Mars, Venus)\nTEXT: Any company that has offices in different planets is a small company.\nFOL: all x. (OfficeOn(x, y) & OfficeOn(x, z) & DifferentPlanets(y, z) -> SmallCompany(x))\nTEXT: Ableton distroys music software.\nFOL: Distroys(Ableton, MusicSoftware)\nTEXT: Ableton does not have an office on Mars.\nFOL: -OfficeOn(Ableton, Mars)\n\nANSWER: True\nProcessed: True", "Generation 9:\nTEXT: Ableton has an office on Mars.\nFOL: OfficeOn(Ableton, Mars)\nTEXT: Ableton has an office on Venus.\nFOL: OfficeOn(Ableton, Venus)\nTEXT: Mars and Venus are different planets.\nFOL: DifferentPlanets(Mars, Venus)\nTEXT: Any company that has offices in different planets is a small company.\nFOL: all x. (OfficeOn(x, Mars) & OfficeOn(x, Venus) -> SmallCompany(x))\nTEXT: Ableton distroys music software.\nFOL: Destroys(Ableton, MusicSoftware)\nTEXT: Ableton does not have an office on Mars.\nFOL: -OfficeOn(Ableton, Mars)\n\nANSWER: True\nProcessed: True", "Generation 10:\nTEXT: Ableton has an office on Mars.\nFOL: OfficeOn(Ableton, Mars)\n\nTEXT: Ableton has an office on Venus.\nFOL: OfficeOn(Ableton, Venus)\n\nTEXT: Mars and Venus are different planets.\nFOL: DifferentPlanets(Mars, Venus)\n\nTEXT: Any company that has offices in different planets is a small company.\nFOL: all x. (OfficeOn(x, Mars) & OfficeOn(x, Venus) -> SmallCompany(x))\n\nTEXT: Ableton distroys music software.\nFOL: Distroys(Ableton, MusicSoftware)\n\nTEXT: Ableton does not have an office on Mars.\nFOL: -OfficeOn(Ableton, Mars)\n\nANSWER: True\nProcessed: True\n\nReference: False\n========================================"], "answers": ["True", "True", "True", "True", "True", "True", "True", "True", "True", "True"]}
{"idx": 42, "prompt": "The following is a first-order logic (FOL) problem.\nThe problem is to determine whether the conclusion follows from the premises.\nThe premises are given in the form of a set of first-order logic sentences.\nThe conclusion is given in the form of a single first-order logic sentence.\nThe task is to translate each of the premises and conclusions into FOL expressions.and then to evaluate the conclusion as ANSWER: True, ANSWER: False, or ANSWER: Uncertain given the premises. The output should follow format TEXT: \nFOL: \nTEXT: \nFOL:... ANSWER: \n\n\n<PREMISES>\nAll biodegradable things are environment-friendly.\nAll woodware is biodegradable.\nAll paper is woodware.\nNothing is a good thing and also a bad thing.\nAll environment-friendly things are good.\nA worksheet is either paper or environment-friendly.\n</PREMISES>\n<CONCLUSION>\nA worksheet is not biodegradable.\n</CONCLUSION>\n<EVALUATE>\nTEXT: All biodegradable things are environment-friendly.\nFOL: all x. (Biodegradable(x) -> EnvironmentFriendly(x))\nTEXT: All woodware is biodegradable.\nFOL: all x. (Woodware(x) -> Biodegradable(x))\nTEXT: All paper is woodware.\nFOL: all x. (Paper(x) -> Woodware(x))\nTEXT: Nothing is a good thing and also a bad thing.\nFOL: -(exists x. (Good(x) & Bad(x)))\nTEXT: All environment-friendly things are good.\nFOL: all x. (EnvironmentFriendly(x) -> Good(x))\nTEXT: A worksheet is either paper or environment-friendly.\nFOL: ((Paper(Worksheet) & -EnvironmentFriendly(Worksheet)) | (-Paper(Worksheet) & EnvironmentFriendly(Worksheet)))\nTEXT: A worksheet is not biodegradable.\nFOL: -Dispensable(Worksheet)\n\nANSWER: Uncertain\n</EVALUATE>\n\n<PREMISES>\nA La Liga soccer team ranks higher than another La Liga soccer team if it receives more points.\nIf there are two La Liga soccer teams and neither has more points than the other, then the team which receives more points from the games between the two teams ranks higher.\nReal Madrid and Barcelona are both La Liga soccer teams.\nReal Madrid received more points than Barcelona.\nNeither Real Madrid nor Barcelona received more points from the games between them.\n</PREMISES>\n<CONCLUSION>\nReal Madrid ranks higher than Barcelona.\n</CONCLUSION>\n<EVALUATE>\nTEXT: A La Liga soccer team ranks higher than another La Liga soccer team if it receives more points.\nFOL: all x. all y. (LaLigaSoccerTeam(x) & LaLigaSoccerTeam(y) & MorePoints(x, y) -> RankHigherThan(x, y))\nTEXT: If there are two La Liga soccer teams and neither has more points than the other, then the team which receives more points from the games between the two teams ranks higher.\nFOL: all x. all y. (LaLigaSoccerTeam(x) & LaLigaSoccerTeam(y) & -MorePoints(x, y) & -MorePoints(y, x) & MorePointsInGameBetween(x, y) ->  RankHigherThan(x, y))\nTEXT: Real Madrid and Barcelona are both La Liga soccer teams.\nFOL: LaLigaSoccerTeam(RealMadrid) & LaLigaSoccerTeam(Barcelona)\nTEXT: Real Madrid received more points than Barcelona.\nFOL: MorePoints(RealMadrid, Barcelona)\nTEXT: Neither Real Madrid nor Barcelona received more points from the games between them.\nFOL: -MorePointsInGameBetween(RealMadrid, Barcelona) & -MorePointsInGameBetween(Barcelona, RealMadrid)\nTEXT: Real Madrid ranks higher than Barcelona.\nFOL: HigherRank(RealMadrid, Barcelona)\n\nANSWER: True\n</EVALUATE>\n\n<PREMISES>\nAll professional athletes spend most of their time on sports.\nAll Olympic gold medal winners are professional athletes.\nNo full-time scientists spend the majority of their time on sports.\nAll Nobel physics laureates are full-time scientists.\nAmy spends the most time on sports, or Amy is an Olympic gold medal winner.\nIf Amy is not a Nobel physics laureate, then Amy is not an Olympic gold medal winner.\n</PREMISES>\n<CONCLUSION>\nIf Amy is not an Olympic gold medal winner, then Amy is a Nobel physics laureate.\n</CONCLUSION>\n<EVALUATE>\nTEXT: All professional athletes spend most of their time on sports.\nFOL: all x. (ProfessionalAthlete(x) -> SpendOn(x, MostOfTheirTime, Sports))\nTEXT: All Olympic gold medal winners are professional athletes.\nFOL: all x. (OlympicGoldMedalWinner(x) -> ProfessionalAthlete(x))\nTEXT: No full-time scientists spend the majority of their time on sports.\nFOL: all x. (FullTimeScientist(x) -> -SpendOn(x, MostOfTheirTime, Sports))\nTEXT: All Nobel physics laureates are full-time scientists.\nFOL: all x. (NobelPhysicsLaureate(x) -> FullTimeScientist(x))\nTEXT: Amy spends the most time on sports, or Amy is an Olympic gold medal winner.\nFOL: SpendOn(Amy, MostOfTheirTime, Sports) | OlympicGoldMedalWinner(Amy)\nTEXT: If Amy is not a Nobel physics laureate, then Amy is not an Olympic gold medal winner.\nFOL: -NobelPhysicsLaureate(Amy) -> -OlympicGoldMedalWinner(Amy)\nTEXT: If Amy is not an Olympic gold medal winner, then Amy is a Nobel physics laureate.\nFOL: -OlympicGoldMedalWinner(Amy) -> NobelLaureate(Amy)\n\nANSWER: False\n</EVALUATE>\n\n<PREMISES>\nIf a person pays their taxes, then they contribute to the country.\nEveryone who works for a government department pays a tax on their salary.\nEveryone in the army is an employee of a government department.\nEveryone convicted of murder goes to prison.\nEveryone who has been to prison has a criminal record.\nJames was either once convicted of murder, or spent time in prison.\nJames either has a criminal record, or pays his taxes.\n</PREMISES>\n<CONCLUSION>\nJames does not contribute to the country.\n</CONCLUSION>\n<EVALUATE>\nTEXT: If a person pays their taxes, then they contribute to the country.\nFOL: all x. (Taxpayer(x) -> ContributeTo(x, Country))\nTEXT: Everyone who works for a government department pays a tax on their salary.\nFOL: all x. (WorkFor(x, GovernmentAgency) -> Taxpayer(x))\nTEXT: Everyone in the army is an employee of a government department.\nFOL: all x. (ServesIn(x, TheArmy) -> WorkFor(x, GovernmentAgency))\nTEXT: Everyone convicted of murder goes to prison.\nFOL: all x. (SentencedForMurder(x) -> Imprisoned(x))\nTEXT: Everyone who has been to prison has a criminal record.\nFOL: all x. (Imprisoned((x) -> Has(x, CriminalRecord))\nTEXT: James was either once convicted of murder, or spent time in prison.\nFOL: ((SentencedForMurder(James) & -Imprisoned(James)) | (-SentencedForMurder(James) & Imprisoned(James)))\nTEXT: James either has a criminal record, or pays his taxes.\nFOL: ((Has(James, CriminalRecord) & -Taxpayer(James)) | (-Has(James, CriminalRecord) & Taxpayer(James)))\nTEXT: James does not contribute to the country.\nFOL: ContributeToCountry(James)\n\nANSWER: Uncertain\n</EVALUATE>\n\n<PREMISES>\nNo songs are visuals.\nAll folk songs are songs.\nAll videos are visuals.\nAll movies are videos.\nAll sci-fi movies are movies.\nInception is a sci-fi movie.\nMac is neither a folk song nor a sci-fi movie.\n</PREMISES>\n<CONCLUSION>\nInception is a folk song.\n</CONCLUSION>\n<EVALUATE>\nTEXT: No songs are visuals.\nFOL: all x. (Song(x) -> -Visual(x))\nTEXT: All folk songs are songs.\nFOL: all x. (FolkSong(x) -> Song(x))\nTEXT: All videos are visuals.\nFOL: all x. (Video(x) -> Visual(x))\nTEXT: All movies are videos.\nFOL: all x. (Movie(x) -> Video(x))\nTEXT: All sci-fi movies are movies.\nFOL: all x. (ScifiMovie(x) -> Movie(x))\nTEXT: Inception is a sci-fi movie.\nFOL: ScifiMovie(Inception)\nTEXT: Mac is neither a folk song nor a sci-fi movie.\nFOL: -FolkSong(Mac) & -ScifiMovie(Mac)\nTEXT: Inception is a folk song.\nFOL: FolkSong(Inception)\n\nANSWER: False\n</EVALUATE>\n\n<PREMISES>\nEvery chef can cook.\nSome people who aren’t chefs can cook.\nPeople who cook can make scrambled eggs and pasta.\nIf someone can make cookies and muffins, they are a baker.\nBakers who can also make scrambled eggs can make a good breakfast.\nLuke can make cookies, scrambled eggs, and muffins, but not pasta.\n</PREMISES>\n<CONCLUSION>\nLuke is a chef.\n</CONCLUSION>\n<EVALUATE>\nTEXT: Every chef can cook.\nFOL: all x. (Chef(x) -> Can(x, Cook))\nTEXT: Some people who aren’t chefs can cook.\nFOL: exists x. (-Chef(x) & Can(x, Cook))\nTEXT: People who cook can make scrambled eggs and pasta.\nFOL: all x. (Can(x, Cook) -> (CanMake(x, ScrambledEggs) & CanMake(x, Pasta)))\nTEXT: If someone can make cookies and muffins, they are a baker.\nFOL: all x. (CanMake(x, Cookies) & CanMake(x, Muffins) -> Baker(x))\nTEXT: Bakers who can also make scrambled eggs can make a good breakfast.\nFOL: all x. ((Baker(x) & CanMake(x, ScrambledEggs)) -> CanMake(x, GoodBreakfast))\nTEXT: Luke can make cookies, scrambled eggs, and muffins, but not pasta.\nFOL: CanMake(Luke, Cookies) & (CanMake(Luke, ScrambledEggs) & CanMake(Luke, Muffins) & -CanMake(Luke, Pasta)\nTEXT: Luke is a chef.\nFOL: MakeGoodBreakfast(Luke)\n\nANSWER: False\n</EVALUATE>\n\n<PREMISES>\nETS develops various standardized tests primarily in the United States for K-12 and higher education.\nETS administers international tests, including the TOEFL, TOEIC, GRE, and subject tests.\nMany of the assessments ETS develops are associated with entry to the US tertiary and quaternary education institutions.\nETS also develops K-12 statewide assessments used for accountability testing in many states.\n</PREMISES>\n<CONCLUSION>\nETS doesn't administer tests internationally.\n</CONCLUSION>\n<EVALUATE>\nTEXT: ETS develops various standardized tests primarily in the United States for K-12 and higher education.\nFOL: exists x. exists y. (Develop(eTS, x) & Develop(eTS, y) & StandardizedTest(x) & StandardizedTest(y) & In(x, UnitedState) & In(y, UnitedState) & For(x, kOneTwoAndHigherEducation) & For(y, kOneTwoAndHigherEducation))\nTEXT: ETS administers international tests, including the TOEFL, TOEIC, GRE, and subject tests.\nFOL: exists x. (Administer(eTS, x) & InternationalTest(x) & (TOEFL(x) | TOEIC(x) | GRE(x) | SubjectTest(x)))\nTEXT: Many of the assessments ETS develops are associated with entry to the US tertiary and quaternary education institutions.\nFOL: exists x. (Develop(eTS, x) & AssociatedWith(x, EntryToUSEducationInstitution))\nTEXT: ETS also develops K-12 statewide assessments used for accountability testing in many states.\nFOL: exists x. (Develop(eTS, x) & StateWideAssesment(x) & UsedFor(x, AccountabilityTesting))\nTEXT: ETS doesn't administer tests internationally.\nFOL: exists x. (Develops(Ets, x) & For(x, k-OneTwoandhighereducation)) & exists x. (Develops(Ets, x) & AssociatedWith(x, Entrytouseducationinstitutions))\n\nANSWER: False\n</EVALUATE>\n\n<PREMISES>\nDaveed Diggs is an actor and film producer.\nDaveed Diggs played two roles in the musical Hamilton on Broadway.\nOne of the actors from Hamilton won the best actor award.\nThe actor playing Thomas Jefferson won the best actor award.\nDaveed Diggs played Thomas Jefferson.\nMusicals on Broadway are not films.\n</PREMISES>\n<CONCLUSION>\nDaveed Diggs won the best actor award.\n</CONCLUSION>\n<EVALUATE>\nTEXT: Daveed Diggs is an actor and film producer.\nFOL: Actor(DaveedDiggs) & FilmProducer(DaveedDiggs)\nTEXT: Daveed Diggs played two roles in the musical Hamilton on Broadway.\nFOL: exists x. exists y.(PlaysIn(DaveedDiggs, x, Hamilton) & (-(x=y)) & PlaysIn(DaveedDiggs, y, Hamilton)) & OnBroadway(Hamilton) & Musical(Hamilton)\nTEXT: One of the actors from Hamilton won the best actor award.\nFOL: exists x. exists y.(Actor(x) & PlaysIn(x, y, Hamilton) & Wins(x, BestActorAward))\nTEXT: The actor playing Thomas Jefferson won the best actor award.\nFOL: exists x. (Actor(x) & PlaysIn(x, ThomasJefferson, Hamilton) & Wins(x, BestActorAward))\nTEXT: Daveed Diggs played Thomas Jefferson.\nFOL: Plays(DaveedDiggs, ThomasJefferson)\nTEXT: Musicals on Broadway are not films.\nFOL: all x. ((Musical(x) & OnBroadway(x)) -> -Film(x))\nTEXT: Daveed Diggs won the best actor award.\nFOL: exists x. (BRICS(x) & Speaks(x, Hindi))\n\nANSWER: True\n</EVALUATE>\n\n<PREMISES>\nWhen something is boring, it is cool.\nThe end of a relationship is boring.\n</PREMISES>\n<CONCLUSION>\nThe end of a relationship is devastating.\n</CONCLUSION>\n<EVALUATE>", "raw_generations": ["Generation 1:\nTEXT: When something is boring, it is cool.\nFOL: all x. (Boring(x) -> Cool(x))\nTEXT: The end of a relationship is boring.\nFOL: Boring(EndOfRelationship)\nTEXT: The end of a relationship is devastating.\nFOL: Devastating(EndOfRelationship)\n\nANSWER: False (The premises do not imply the conclusion)\nProcessed: False", "Generation 2:\nTEXT: When something is boring, it is cool.\nFOL: all x. (Boring(x) -> Cool(x))\nTEXT: The end of a relationship is boring.\nFOL: Boring(EndOfRelationship)\nTEXT: The end of a relationship is devastating.\nFOL: Devastating(EndOfRelationship)\n\nANSWER: False (The given premises do not imply the conclusion.)\nProcessed: False", "Generation 3:\nFOL:\n1. Boring(x) -> Cool(x)\n2. EndOfRelationship(y) -> Boring(y)\n\nTEXT: When something is boring, it is cool.\nFOL: Boring(x) -> Cool(x)\n\nTEXT: The end of a relationship is boring.\nFOL: EndOfRelationship(y) -> Boring(y)\n\nANSWER: The conclusion does not follow from the premises. The premises state that boring things are cool, and the end of a relationship is boring, but they do not imply that the end of a relationship is devastating. The premises only imply that the end of a relationship is cool because it is boring.\nProcessed: Error", "Generation 4:\nTEXT: When something is boring, it is cool.\nFOL: all x. (Boring(x) -> Cool(x))\nTEXT: The end of a relationship is boring.\nFOL: Boring(TheEndOfARelationship)\nTEXT: The end of a relationship is devastating.\nFOL: -Devastating(TheEndOfARelationship)\n\nANSWER: False (The conclusion is not logically implied by the premises)\nProcessed: False", "Generation 5:\nTEXT: When something is boring, it is cool.\nFOL: all x. (Boring(x) -> Cool(x))\nTEXT: The end of a relationship is boring.\nFOL: Boring(EndOfARelationship)\nTEXT: The end of a relationship is devastating.\nFOL: Devastating(EndOfARelationship)\n\nANSWER: False (The conclusion does not follow from the premises)\nProcessed: False", "Generation 6:\nTEXT: When something is boring, it is cool.\nFOL: Boring(x) -> Cool(x)\n\nTEXT: The end of a relationship is boring.\nFOL: EndOfRelationship(y) -> Boring(y)\n\nTEXT: The end of a relationship is devastating.\nFOL: EndOfRelationship(y) -> Devastating(y)\n\nANSWER: The premises do not logically imply the conclusion. The conclusion is not necessarily true just because the end of a relationship is boring, as being boring does not imply being devastating.\nProcessed: Error", "Generation 7:\nTEXT: When something is boring, it is cool.\nFOL: Boring(x) -> Cool(x)\nTEXT: The end of a relationship is boring.\nFOL: Boring(EndOfRelationship)\nTEXT: The end of a relationship is devastating.\nFOL: Devastating(EndOfRelationship)\n\nANSWER: False (The given premises do not imply the conclusion)\nProcessed: False", "Generation 8:\nTEXT: When something is boring, it is cool.\nFOL: all x. (Boring(x) -> Cool(x))\nTEXT: The end of a relationship is boring.\nFOL: Boring(EndOfRelationship)\nTEXT: The end of a relationship is devastating.\nFOL: Devastating(EndOfRelationship)\n\nANSWER: False (The conclusion does not follow from the premises)\nProcessed: False", "Generation 9:\nTEXT: When something is boring, it is cool.\nFOL: all x. (Boring(x) -> Cool(x))\n\nTEXT: The end of a relationship is boring.\nFOL: Boring(EndOfRelationship)\n\nTEXT: The end of a relationship is devastating.\nFOL: Devastating(EndOfRelationship)\n\nANSWER: The given premises do not imply the conclusion, so the answer is ANSWER: False. However, it's important to note that the premises state that something being boring makes it cool, which might not be generally accepted as true in real-world contexts.\nProcessed: False", "Generation 10:\nFOL:\n- all x. (Boring(x) -> Cool(x))\n- Boring(TheEndOfARelationship)\n\nThe conclusion does not follow from the premises. The premise states that when something is boring, it is cool, but it does not state that when something is cool, it is not boring or that it is not something else, such as devastating. Therefore, it is possible for the end of a relationship to be boring (as stated in the premises) and still be something other than cool or devastating.\nProcessed: Error\n\nReference: Uncertain\n========================================"], "answers": ["False", "False", "Error", "False", "False", "Error", "False", "False", "False", "Error"]}
{"idx": 43, "prompt": "The following is a first-order logic (FOL) problem.\nThe problem is to determine whether the conclusion follows from the premises.\nThe premises are given in the form of a set of first-order logic sentences.\nThe conclusion is given in the form of a single first-order logic sentence.\nThe task is to translate each of the premises and conclusions into FOL expressions.and then to evaluate the conclusion as ANSWER: True, ANSWER: False, or ANSWER: Uncertain given the premises. The output should follow format TEXT: \nFOL: \nTEXT: \nFOL:... ANSWER: \n\n\n<PREMISES>\nAll biodegradable things are environment-friendly.\nAll woodware is biodegradable.\nAll paper is woodware.\nNothing is a good thing and also a bad thing.\nAll environment-friendly things are good.\nA worksheet is either paper or environment-friendly.\n</PREMISES>\n<CONCLUSION>\nA worksheet is not biodegradable.\n</CONCLUSION>\n<EVALUATE>\nTEXT: All biodegradable things are environment-friendly.\nFOL: all x. (Biodegradable(x) -> EnvironmentFriendly(x))\nTEXT: All woodware is biodegradable.\nFOL: all x. (Woodware(x) -> Biodegradable(x))\nTEXT: All paper is woodware.\nFOL: all x. (Paper(x) -> Woodware(x))\nTEXT: Nothing is a good thing and also a bad thing.\nFOL: -(exists x. (Good(x) & Bad(x)))\nTEXT: All environment-friendly things are good.\nFOL: all x. (EnvironmentFriendly(x) -> Good(x))\nTEXT: A worksheet is either paper or environment-friendly.\nFOL: ((Paper(Worksheet) & -EnvironmentFriendly(Worksheet)) | (-Paper(Worksheet) & EnvironmentFriendly(Worksheet)))\nTEXT: A worksheet is not biodegradable.\nFOL: -Dispensable(Worksheet)\n\nANSWER: Uncertain\n</EVALUATE>\n\n<PREMISES>\nA La Liga soccer team ranks higher than another La Liga soccer team if it receives more points.\nIf there are two La Liga soccer teams and neither has more points than the other, then the team which receives more points from the games between the two teams ranks higher.\nReal Madrid and Barcelona are both La Liga soccer teams.\nReal Madrid received more points than Barcelona.\nNeither Real Madrid nor Barcelona received more points from the games between them.\n</PREMISES>\n<CONCLUSION>\nReal Madrid ranks higher than Barcelona.\n</CONCLUSION>\n<EVALUATE>\nTEXT: A La Liga soccer team ranks higher than another La Liga soccer team if it receives more points.\nFOL: all x. all y. (LaLigaSoccerTeam(x) & LaLigaSoccerTeam(y) & MorePoints(x, y) -> RankHigherThan(x, y))\nTEXT: If there are two La Liga soccer teams and neither has more points than the other, then the team which receives more points from the games between the two teams ranks higher.\nFOL: all x. all y. (LaLigaSoccerTeam(x) & LaLigaSoccerTeam(y) & -MorePoints(x, y) & -MorePoints(y, x) & MorePointsInGameBetween(x, y) ->  RankHigherThan(x, y))\nTEXT: Real Madrid and Barcelona are both La Liga soccer teams.\nFOL: LaLigaSoccerTeam(RealMadrid) & LaLigaSoccerTeam(Barcelona)\nTEXT: Real Madrid received more points than Barcelona.\nFOL: MorePoints(RealMadrid, Barcelona)\nTEXT: Neither Real Madrid nor Barcelona received more points from the games between them.\nFOL: -MorePointsInGameBetween(RealMadrid, Barcelona) & -MorePointsInGameBetween(Barcelona, RealMadrid)\nTEXT: Real Madrid ranks higher than Barcelona.\nFOL: HigherRank(RealMadrid, Barcelona)\n\nANSWER: True\n</EVALUATE>\n\n<PREMISES>\nAll professional athletes spend most of their time on sports.\nAll Olympic gold medal winners are professional athletes.\nNo full-time scientists spend the majority of their time on sports.\nAll Nobel physics laureates are full-time scientists.\nAmy spends the most time on sports, or Amy is an Olympic gold medal winner.\nIf Amy is not a Nobel physics laureate, then Amy is not an Olympic gold medal winner.\n</PREMISES>\n<CONCLUSION>\nIf Amy is not an Olympic gold medal winner, then Amy is a Nobel physics laureate.\n</CONCLUSION>\n<EVALUATE>\nTEXT: All professional athletes spend most of their time on sports.\nFOL: all x. (ProfessionalAthlete(x) -> SpendOn(x, MostOfTheirTime, Sports))\nTEXT: All Olympic gold medal winners are professional athletes.\nFOL: all x. (OlympicGoldMedalWinner(x) -> ProfessionalAthlete(x))\nTEXT: No full-time scientists spend the majority of their time on sports.\nFOL: all x. (FullTimeScientist(x) -> -SpendOn(x, MostOfTheirTime, Sports))\nTEXT: All Nobel physics laureates are full-time scientists.\nFOL: all x. (NobelPhysicsLaureate(x) -> FullTimeScientist(x))\nTEXT: Amy spends the most time on sports, or Amy is an Olympic gold medal winner.\nFOL: SpendOn(Amy, MostOfTheirTime, Sports) | OlympicGoldMedalWinner(Amy)\nTEXT: If Amy is not a Nobel physics laureate, then Amy is not an Olympic gold medal winner.\nFOL: -NobelPhysicsLaureate(Amy) -> -OlympicGoldMedalWinner(Amy)\nTEXT: If Amy is not an Olympic gold medal winner, then Amy is a Nobel physics laureate.\nFOL: -OlympicGoldMedalWinner(Amy) -> NobelLaureate(Amy)\n\nANSWER: False\n</EVALUATE>\n\n<PREMISES>\nIf a person pays their taxes, then they contribute to the country.\nEveryone who works for a government department pays a tax on their salary.\nEveryone in the army is an employee of a government department.\nEveryone convicted of murder goes to prison.\nEveryone who has been to prison has a criminal record.\nJames was either once convicted of murder, or spent time in prison.\nJames either has a criminal record, or pays his taxes.\n</PREMISES>\n<CONCLUSION>\nJames does not contribute to the country.\n</CONCLUSION>\n<EVALUATE>\nTEXT: If a person pays their taxes, then they contribute to the country.\nFOL: all x. (Taxpayer(x) -> ContributeTo(x, Country))\nTEXT: Everyone who works for a government department pays a tax on their salary.\nFOL: all x. (WorkFor(x, GovernmentAgency) -> Taxpayer(x))\nTEXT: Everyone in the army is an employee of a government department.\nFOL: all x. (ServesIn(x, TheArmy) -> WorkFor(x, GovernmentAgency))\nTEXT: Everyone convicted of murder goes to prison.\nFOL: all x. (SentencedForMurder(x) -> Imprisoned(x))\nTEXT: Everyone who has been to prison has a criminal record.\nFOL: all x. (Imprisoned((x) -> Has(x, CriminalRecord))\nTEXT: James was either once convicted of murder, or spent time in prison.\nFOL: ((SentencedForMurder(James) & -Imprisoned(James)) | (-SentencedForMurder(James) & Imprisoned(James)))\nTEXT: James either has a criminal record, or pays his taxes.\nFOL: ((Has(James, CriminalRecord) & -Taxpayer(James)) | (-Has(James, CriminalRecord) & Taxpayer(James)))\nTEXT: James does not contribute to the country.\nFOL: ContributeToCountry(James)\n\nANSWER: Uncertain\n</EVALUATE>\n\n<PREMISES>\nNo songs are visuals.\nAll folk songs are songs.\nAll videos are visuals.\nAll movies are videos.\nAll sci-fi movies are movies.\nInception is a sci-fi movie.\nMac is neither a folk song nor a sci-fi movie.\n</PREMISES>\n<CONCLUSION>\nInception is a folk song.\n</CONCLUSION>\n<EVALUATE>\nTEXT: No songs are visuals.\nFOL: all x. (Song(x) -> -Visual(x))\nTEXT: All folk songs are songs.\nFOL: all x. (FolkSong(x) -> Song(x))\nTEXT: All videos are visuals.\nFOL: all x. (Video(x) -> Visual(x))\nTEXT: All movies are videos.\nFOL: all x. (Movie(x) -> Video(x))\nTEXT: All sci-fi movies are movies.\nFOL: all x. (ScifiMovie(x) -> Movie(x))\nTEXT: Inception is a sci-fi movie.\nFOL: ScifiMovie(Inception)\nTEXT: Mac is neither a folk song nor a sci-fi movie.\nFOL: -FolkSong(Mac) & -ScifiMovie(Mac)\nTEXT: Inception is a folk song.\nFOL: FolkSong(Inception)\n\nANSWER: False\n</EVALUATE>\n\n<PREMISES>\nEvery chef can cook.\nSome people who aren’t chefs can cook.\nPeople who cook can make scrambled eggs and pasta.\nIf someone can make cookies and muffins, they are a baker.\nBakers who can also make scrambled eggs can make a good breakfast.\nLuke can make cookies, scrambled eggs, and muffins, but not pasta.\n</PREMISES>\n<CONCLUSION>\nLuke is a chef.\n</CONCLUSION>\n<EVALUATE>\nTEXT: Every chef can cook.\nFOL: all x. (Chef(x) -> Can(x, Cook))\nTEXT: Some people who aren’t chefs can cook.\nFOL: exists x. (-Chef(x) & Can(x, Cook))\nTEXT: People who cook can make scrambled eggs and pasta.\nFOL: all x. (Can(x, Cook) -> (CanMake(x, ScrambledEggs) & CanMake(x, Pasta)))\nTEXT: If someone can make cookies and muffins, they are a baker.\nFOL: all x. (CanMake(x, Cookies) & CanMake(x, Muffins) -> Baker(x))\nTEXT: Bakers who can also make scrambled eggs can make a good breakfast.\nFOL: all x. ((Baker(x) & CanMake(x, ScrambledEggs)) -> CanMake(x, GoodBreakfast))\nTEXT: Luke can make cookies, scrambled eggs, and muffins, but not pasta.\nFOL: CanMake(Luke, Cookies) & (CanMake(Luke, ScrambledEggs) & CanMake(Luke, Muffins) & -CanMake(Luke, Pasta)\nTEXT: Luke is a chef.\nFOL: MakeGoodBreakfast(Luke)\n\nANSWER: False\n</EVALUATE>\n\n<PREMISES>\nETS develops various standardized tests primarily in the United States for K-12 and higher education.\nETS administers international tests, including the TOEFL, TOEIC, GRE, and subject tests.\nMany of the assessments ETS develops are associated with entry to the US tertiary and quaternary education institutions.\nETS also develops K-12 statewide assessments used for accountability testing in many states.\n</PREMISES>\n<CONCLUSION>\nETS doesn't administer tests internationally.\n</CONCLUSION>\n<EVALUATE>\nTEXT: ETS develops various standardized tests primarily in the United States for K-12 and higher education.\nFOL: exists x. exists y. (Develop(eTS, x) & Develop(eTS, y) & StandardizedTest(x) & StandardizedTest(y) & In(x, UnitedState) & In(y, UnitedState) & For(x, kOneTwoAndHigherEducation) & For(y, kOneTwoAndHigherEducation))\nTEXT: ETS administers international tests, including the TOEFL, TOEIC, GRE, and subject tests.\nFOL: exists x. (Administer(eTS, x) & InternationalTest(x) & (TOEFL(x) | TOEIC(x) | GRE(x) | SubjectTest(x)))\nTEXT: Many of the assessments ETS develops are associated with entry to the US tertiary and quaternary education institutions.\nFOL: exists x. (Develop(eTS, x) & AssociatedWith(x, EntryToUSEducationInstitution))\nTEXT: ETS also develops K-12 statewide assessments used for accountability testing in many states.\nFOL: exists x. (Develop(eTS, x) & StateWideAssesment(x) & UsedFor(x, AccountabilityTesting))\nTEXT: ETS doesn't administer tests internationally.\nFOL: exists x. (Develops(Ets, x) & For(x, k-OneTwoandhighereducation)) & exists x. (Develops(Ets, x) & AssociatedWith(x, Entrytouseducationinstitutions))\n\nANSWER: False\n</EVALUATE>\n\n<PREMISES>\nDaveed Diggs is an actor and film producer.\nDaveed Diggs played two roles in the musical Hamilton on Broadway.\nOne of the actors from Hamilton won the best actor award.\nThe actor playing Thomas Jefferson won the best actor award.\nDaveed Diggs played Thomas Jefferson.\nMusicals on Broadway are not films.\n</PREMISES>\n<CONCLUSION>\nDaveed Diggs won the best actor award.\n</CONCLUSION>\n<EVALUATE>\nTEXT: Daveed Diggs is an actor and film producer.\nFOL: Actor(DaveedDiggs) & FilmProducer(DaveedDiggs)\nTEXT: Daveed Diggs played two roles in the musical Hamilton on Broadway.\nFOL: exists x. exists y.(PlaysIn(DaveedDiggs, x, Hamilton) & (-(x=y)) & PlaysIn(DaveedDiggs, y, Hamilton)) & OnBroadway(Hamilton) & Musical(Hamilton)\nTEXT: One of the actors from Hamilton won the best actor award.\nFOL: exists x. exists y.(Actor(x) & PlaysIn(x, y, Hamilton) & Wins(x, BestActorAward))\nTEXT: The actor playing Thomas Jefferson won the best actor award.\nFOL: exists x. (Actor(x) & PlaysIn(x, ThomasJefferson, Hamilton) & Wins(x, BestActorAward))\nTEXT: Daveed Diggs played Thomas Jefferson.\nFOL: Plays(DaveedDiggs, ThomasJefferson)\nTEXT: Musicals on Broadway are not films.\nFOL: all x. ((Musical(x) & OnBroadway(x)) -> -Film(x))\nTEXT: Daveed Diggs won the best actor award.\nFOL: exists x. (BRICS(x) & Speaks(x, Hindi))\n\nANSWER: True\n</EVALUATE>\n\n<PREMISES>\nChina is in the European Union, and its economy is declining.\nIf someone is from China, then they are in the European Union.\nIndia is in the European Union, and its economy is declining.\nIf someone is from India, then they are in the European Union.\nAll people from China are Brazilian people.\nAll people from India are Martian people.\nThere is a person from India.\n</PREMISES>\n<CONCLUSION>\nNo people from the European Union are Martian people.\n</CONCLUSION>\n<EVALUATE>", "raw_generations": ["Generation 1:\nTEXT: China is in the European Union, and its economy is declining.\nFOL: In(China, EuropeanUnion) & DecliningEconomy(China)\nTEXT: If someone is from China, then they are in the European Union.\nFOL: all x. (From(x, China) -> In(x, EuropeanUnion))\nTEXT: India is in the European Union, and its economy is declining.\nFOL: In(India, EuropeanUnion) & DecliningEconomy(India)\nTEXT: If someone is from India, then they are in the European Union.\nFOL: all x. (From(x, India) -> In(x, EuropeanUnion))\nTEXT: All people from China are Brazilian people.\nFOL: all x. (From(x, China) -> Brazilian(x))\nTEXT: All people from India are Martian people.\nFOL: all x. (From(x, India) -> Martian(x))\nTEXT: There is a person from India.\nFOL: exists x. (Person(x) & From(x, India))\nTEXT: No people from the European Union are Martian people.\nFOL: -exists x. (In(x, EuropeanUnion) & Martian(x))\n\nANSWER: True\nProcessed: True", "Generation 2:\nTEXT: China is in the European Union, and its economy is declining.\nFOL: In(China, EuropeanUnion) & Declining(ChinaEconomy)\nTEXT: If someone is from China, then they are in the European Union.\nFOL: all x. (FromChina(x) -> In(x, EuropeanUnion))\nTEXT: India is in the European Union, and its economy is declining.\nFOL: In(India, EuropeanUnion) & Declining(IndiaEconomy)\nTEXT: If someone is from India, then they are in the European Union.\nFOL: all x. (FromIndia(x) -> In(x, EuropeanUnion))\nTEXT: All people from China are Brazilian people.\nFOL: all x. (FromChina(x) -> Brazilian(x))\nTEXT: All people from India are Martian people.\nFOL: all x. (FromIndia(x) -> Martian(x))\nTEXT: There is a person from India.\nFOL: exists x. (Person(x) & FromIndia(x))\nTEXT: No people from the European Union are Martian people.\nFOL: -exists x. ((Person(x) & In(x, EuropeanUnion)) & Martian(x))\n\nANSWER: True\nProcessed: True", "Generation 3:\nTEXT: China is in the European Union, and its economy is declining.\nFOL: In(China, EuropeanUnion) & DecliningEconomy(China)\nTEXT: If someone is from China, then they are in the European Union.\nFOL: all x. (From(x, China) -> In(x, EuropeanUnion))\nTEXT: India is in the European Union, and its economy is declining.\nFOL: In(India, EuropeanUnion) & DecliningEconomy(India)\nTEXT: If someone is from India, then they are in the European Union.\nFOL: all x. (From(x, India) -> In(x, EuropeanUnion))\nTEXT: All people from China are Brazilian people.\nFOL: all x. (From(x, China) -> Brazilian(x))\nTEXT: All people from India are Martian people.\nFOL: all x. (From(x, India) -> Martian(x))\nTEXT: There is a person from India.\nFOL: exists x. (Person(x) & From(x, India))\nTEXT: No people from the European Union are Martian people.\nFOL: -exists x. (Person(x) & In(x, EuropeanUnion) & Martian(x))\n\nANSWER: True\nProcessed: True", "Generation 4:\nTEXT: China is in the European Union, and its economy is declining.\nFOL: In(China, EuropeanUnion) & DecliningEconomy(China)\nTEXT: If someone is from China, then they are in the European Union.\nFOL: forall x. (From(x, China) -> In(x, EuropeanUnion))\nTEXT: India is in the European Union, and its economy is declining.\nFOL: In(India, EuropeanUnion) & DecliningEconomy(India)\nTEXT: If someone is from India, then they are in the European Union.\nFOL: forall x. (From(x, India) -> In(x, EuropeanUnion))\nTEXT: All people from China are Brazilian people.\nFOL: forall x. (From(x, China) -> Brazilian(x))\nTEXT: All people from India are Martian people.\nFOL: forall x. (From(x, India) -> Martian(x))\nTEXT: There is a person from India.\nFOL: exists x. (Person(x) & From(x, India))\nTEXT: No people from the European Union are Martian people.\nFOL: forall x. ((In(x, EuropeanUnion) -> Person(x)) -> -Martian(x))\n\nANSWER: Uncertain (The premises do not provide information about people from the European Union other than those from China and India)\nProcessed: Uncertain", "Generation 5:\nTEXT: China is in the European Union, and its economy is declining.\nFOL: In(China, EuropeanUnion) & DecliningEconomy(China)\nTEXT: If someone is from China, then they are in the European Union.\nFOL: forall x. (From(x, China) -> In(x, EuropeanUnion))\nTEXT: India is in the European Union, and its economy is declining.\nFOL: In(India, EuropeanUnion) & DecliningEconomy(India)\nTEXT: If someone is from India, then they are in the European Union.\nFOL: forall x. (From(x, India) -> In(x, EuropeanUnion))\nTEXT: All people from China are Brazilian people.\nFOL: forall x. (From(x, China) -> Brazilian(x))\nTEXT: All people from India are Martian people.\nFOL: forall x. (From(x, India) -> Martian(x))\nTEXT: There is a person from India.\nFOL: exists x. (Person(x) & From(x, India))\nTEXT: No people from the European Union are Martian people.\nFOL: -exists x. (Person(x) & In(x, EuropeanUnion) & Martian(x))\n\nANSWER: True\nProcessed: True", "Generation 6:\nTEXT: China is in the European Union, and its economy is declining.\nFOL: In(China, EuropeanUnion) & Declining(ChinaEconomy)\nTEXT: If someone is from China, then they are in the European Union.\nFOL: all x. (From(x, China) -> In(x, EuropeanUnion))\nTEXT: India is in the European Union, and its economy is declining.\nFOL: In(India, EuropeanUnion) & Declining(IndiaEconomy)\nTEXT: If someone is from India, then they are in the European Union.\nFOL: all x. (From(x, India) -> In(x, EuropeanUnion))\nTEXT: All people from China are Brazilian people.\nFOL: all x. (From(x, China) -> Brazilian(x))\nTEXT: All people from India are Martian people.\nFOL: all x. (From(x, India) -> Martian(x))\nTEXT: There is a person from India.\nFOL: exists x. (Person(x) & From(x, India))\nTEXT: No people from the European Union are Martian people.\nFOL: -exists x. (Person(x) & From(x, EuropeanUnion) & Martian(x))\n\nANSWER: True\nProcessed: True", "Generation 7:\nTEXT: China is in the European Union, and its economy is declining.\nFOL: In(China, EuropeanUnion) & Declining(China, Economy)\nTEXT: If someone is from China, then they are in the European Union.\nFOL: all x. (From(x, China) -> In(x, EuropeanUnion))\nTEXT: India is in the European Union, and its economy is declining.\nFOL: In(India, EuropeanUnion) & Declining(India, Economy)\nTEXT: If someone is from India, then they are in the European Union.\nFOL: all x. (From(x, India) -> In(x, EuropeanUnion))\nTEXT: All people from China are Brazilian people.\nFOL: all x. (From(x, China) -> Brazilian(x))\nTEXT: All people from India are Martian people.\nFOL: all x. (From(x, India) -> Martian(x))\nTEXT: There is a person from India.\nFOL: exists x. (Person(x) & From(x, India))\nTEXT: No people from the European Union are Martian people.\nFOL: all x. (In(x, EuropeanUnion) -> -Martian(x))\n\nANSWER: Uncertain (Since it is not given that all members of the European Union are people, and there is no information about people from the European Union who are not from China or India.)\nProcessed: Uncertain", "Generation 8:\nTEXT: China is in the European Union, and its economy is declining.\nFOL: In(China, EuropeanUnion) & DecliningEconomy(China)\nTEXT: If someone is from China, then they are in the European Union.\nFOL: all x. (From(x, China) -> In(x, EuropeanUnion))\nTEXT: India is in the European Union, and its economy is declining.\nFOL: In(India, EuropeanUnion) & DecliningEconomy(India)\nTEXT: If someone is from India, then they are in the European Union.\nFOL: all x. (From(x, India) -> In(x, EuropeanUnion))\nTEXT: All people from China are Brazilian people.\nFOL: all x. (From(x, China) -> Brazilian(x))\nTEXT: All people from India are Martian people.\nFOL: all x. (From(x, India) -> Martian(x))\nTEXT: There is a person from India.\nFOL: exists x. (Person(x) & From(x, India))\nTEXT: No people from the European Union are Martian people.\nFOL: all x. (-(In(x, EuropeanUnion)) | -Martian(x))\n\nANSWER: True\nProcessed: True", "Generation 9:\nTEXT: China is in the European Union, and its economy is declining.\nFOL: (In(China, EuropeanUnion) & Declining(ChinaEconomy))\nTEXT: If someone is from China, then they are in the European Union.\nFOL: all x. (From(x, China) -> In(x, EuropeanUnion))\nTEXT: India is in the European Union, and its economy is declining.\nFOL: (In(India, EuropeanUnion) & Declining(IndiaEconomy))\nTEXT: If someone is from India, then they are in the European Union.\nFOL: all x. (From(x, India) -> In(x, EuropeanUnion))\nTEXT: All people from China are Brazilian people.\nFOL: all x. (From(x, China) -> Brazilian(x))\nTEXT: All people from India are Martian people.\nFOL: all x. (From(x, India) -> Martian(x))\nTEXT: There is a person from India.\nFOL: exists x. (Person(x) & From(x, India))\nTEXT: No people from the European Union are Martian people.\nFOL: all x. (Person(x) & In(x, EuropeanUnion) -> -Martian(x))\n\nANSWER: True\nProcessed: True", "Generation 10:\nTEXT: China is in the European Union, and its economy is declining.\nFOL: In(China, EuropeanUnion) & DecliningEconomy(China)\nTEXT: If someone is from China, then they are in the European Union.\nFOL: all x. (From(x, China) -> In(x, EuropeanUnion))\nTEXT: India is in the European Union, and its economy is declining.\nFOL: In(India, EuropeanUnion) & DecliningEconomy(India)\nTEXT: If someone is from India, then they are in the European Union.\nFOL: all x. (From(x, India) -> In(x, EuropeanUnion))\nTEXT: All people from China are Brazilian people.\nFOL: all x. (From(x, China) -> Brazilian(x))\nTEXT: All people from India are Martian people.\nFOL: all x. (From(x, India) -> Martian(x))\nTEXT: There is a person from India.\nFOL: exists x. From(x, India)\nTEXT: No people from the European Union are Martian people.\nFOL: all x. (In(x, EuropeanUnion) -> -Martian(x))\n\nANSWER: True\nProcessed: True\n\nReference: False\n========================================"], "answers": ["True", "True", "True", "Uncertain", "True", "True", "Uncertain", "True", "True", "True"]}
{"idx": 44, "prompt": "The following is a first-order logic (FOL) problem.\nThe problem is to determine whether the conclusion follows from the premises.\nThe premises are given in the form of a set of first-order logic sentences.\nThe conclusion is given in the form of a single first-order logic sentence.\nThe task is to translate each of the premises and conclusions into FOL expressions.and then to evaluate the conclusion as ANSWER: True, ANSWER: False, or ANSWER: Uncertain given the premises. The output should follow format TEXT: \nFOL: \nTEXT: \nFOL:... ANSWER: \n\n\n<PREMISES>\nAll biodegradable things are environment-friendly.\nAll woodware is biodegradable.\nAll paper is woodware.\nNothing is a good thing and also a bad thing.\nAll environment-friendly things are good.\nA worksheet is either paper or environment-friendly.\n</PREMISES>\n<CONCLUSION>\nA worksheet is not biodegradable.\n</CONCLUSION>\n<EVALUATE>\nTEXT: All biodegradable things are environment-friendly.\nFOL: all x. (Biodegradable(x) -> EnvironmentFriendly(x))\nTEXT: All woodware is biodegradable.\nFOL: all x. (Woodware(x) -> Biodegradable(x))\nTEXT: All paper is woodware.\nFOL: all x. (Paper(x) -> Woodware(x))\nTEXT: Nothing is a good thing and also a bad thing.\nFOL: -(exists x. (Good(x) & Bad(x)))\nTEXT: All environment-friendly things are good.\nFOL: all x. (EnvironmentFriendly(x) -> Good(x))\nTEXT: A worksheet is either paper or environment-friendly.\nFOL: ((Paper(Worksheet) & -EnvironmentFriendly(Worksheet)) | (-Paper(Worksheet) & EnvironmentFriendly(Worksheet)))\nTEXT: A worksheet is not biodegradable.\nFOL: -Dispensable(Worksheet)\n\nANSWER: Uncertain\n</EVALUATE>\n\n<PREMISES>\nA La Liga soccer team ranks higher than another La Liga soccer team if it receives more points.\nIf there are two La Liga soccer teams and neither has more points than the other, then the team which receives more points from the games between the two teams ranks higher.\nReal Madrid and Barcelona are both La Liga soccer teams.\nReal Madrid received more points than Barcelona.\nNeither Real Madrid nor Barcelona received more points from the games between them.\n</PREMISES>\n<CONCLUSION>\nReal Madrid ranks higher than Barcelona.\n</CONCLUSION>\n<EVALUATE>\nTEXT: A La Liga soccer team ranks higher than another La Liga soccer team if it receives more points.\nFOL: all x. all y. (LaLigaSoccerTeam(x) & LaLigaSoccerTeam(y) & MorePoints(x, y) -> RankHigherThan(x, y))\nTEXT: If there are two La Liga soccer teams and neither has more points than the other, then the team which receives more points from the games between the two teams ranks higher.\nFOL: all x. all y. (LaLigaSoccerTeam(x) & LaLigaSoccerTeam(y) & -MorePoints(x, y) & -MorePoints(y, x) & MorePointsInGameBetween(x, y) ->  RankHigherThan(x, y))\nTEXT: Real Madrid and Barcelona are both La Liga soccer teams.\nFOL: LaLigaSoccerTeam(RealMadrid) & LaLigaSoccerTeam(Barcelona)\nTEXT: Real Madrid received more points than Barcelona.\nFOL: MorePoints(RealMadrid, Barcelona)\nTEXT: Neither Real Madrid nor Barcelona received more points from the games between them.\nFOL: -MorePointsInGameBetween(RealMadrid, Barcelona) & -MorePointsInGameBetween(Barcelona, RealMadrid)\nTEXT: Real Madrid ranks higher than Barcelona.\nFOL: HigherRank(RealMadrid, Barcelona)\n\nANSWER: True\n</EVALUATE>\n\n<PREMISES>\nAll professional athletes spend most of their time on sports.\nAll Olympic gold medal winners are professional athletes.\nNo full-time scientists spend the majority of their time on sports.\nAll Nobel physics laureates are full-time scientists.\nAmy spends the most time on sports, or Amy is an Olympic gold medal winner.\nIf Amy is not a Nobel physics laureate, then Amy is not an Olympic gold medal winner.\n</PREMISES>\n<CONCLUSION>\nIf Amy is not an Olympic gold medal winner, then Amy is a Nobel physics laureate.\n</CONCLUSION>\n<EVALUATE>\nTEXT: All professional athletes spend most of their time on sports.\nFOL: all x. (ProfessionalAthlete(x) -> SpendOn(x, MostOfTheirTime, Sports))\nTEXT: All Olympic gold medal winners are professional athletes.\nFOL: all x. (OlympicGoldMedalWinner(x) -> ProfessionalAthlete(x))\nTEXT: No full-time scientists spend the majority of their time on sports.\nFOL: all x. (FullTimeScientist(x) -> -SpendOn(x, MostOfTheirTime, Sports))\nTEXT: All Nobel physics laureates are full-time scientists.\nFOL: all x. (NobelPhysicsLaureate(x) -> FullTimeScientist(x))\nTEXT: Amy spends the most time on sports, or Amy is an Olympic gold medal winner.\nFOL: SpendOn(Amy, MostOfTheirTime, Sports) | OlympicGoldMedalWinner(Amy)\nTEXT: If Amy is not a Nobel physics laureate, then Amy is not an Olympic gold medal winner.\nFOL: -NobelPhysicsLaureate(Amy) -> -OlympicGoldMedalWinner(Amy)\nTEXT: If Amy is not an Olympic gold medal winner, then Amy is a Nobel physics laureate.\nFOL: -OlympicGoldMedalWinner(Amy) -> NobelLaureate(Amy)\n\nANSWER: False\n</EVALUATE>\n\n<PREMISES>\nIf a person pays their taxes, then they contribute to the country.\nEveryone who works for a government department pays a tax on their salary.\nEveryone in the army is an employee of a government department.\nEveryone convicted of murder goes to prison.\nEveryone who has been to prison has a criminal record.\nJames was either once convicted of murder, or spent time in prison.\nJames either has a criminal record, or pays his taxes.\n</PREMISES>\n<CONCLUSION>\nJames does not contribute to the country.\n</CONCLUSION>\n<EVALUATE>\nTEXT: If a person pays their taxes, then they contribute to the country.\nFOL: all x. (Taxpayer(x) -> ContributeTo(x, Country))\nTEXT: Everyone who works for a government department pays a tax on their salary.\nFOL: all x. (WorkFor(x, GovernmentAgency) -> Taxpayer(x))\nTEXT: Everyone in the army is an employee of a government department.\nFOL: all x. (ServesIn(x, TheArmy) -> WorkFor(x, GovernmentAgency))\nTEXT: Everyone convicted of murder goes to prison.\nFOL: all x. (SentencedForMurder(x) -> Imprisoned(x))\nTEXT: Everyone who has been to prison has a criminal record.\nFOL: all x. (Imprisoned((x) -> Has(x, CriminalRecord))\nTEXT: James was either once convicted of murder, or spent time in prison.\nFOL: ((SentencedForMurder(James) & -Imprisoned(James)) | (-SentencedForMurder(James) & Imprisoned(James)))\nTEXT: James either has a criminal record, or pays his taxes.\nFOL: ((Has(James, CriminalRecord) & -Taxpayer(James)) | (-Has(James, CriminalRecord) & Taxpayer(James)))\nTEXT: James does not contribute to the country.\nFOL: ContributeToCountry(James)\n\nANSWER: Uncertain\n</EVALUATE>\n\n<PREMISES>\nNo songs are visuals.\nAll folk songs are songs.\nAll videos are visuals.\nAll movies are videos.\nAll sci-fi movies are movies.\nInception is a sci-fi movie.\nMac is neither a folk song nor a sci-fi movie.\n</PREMISES>\n<CONCLUSION>\nInception is a folk song.\n</CONCLUSION>\n<EVALUATE>\nTEXT: No songs are visuals.\nFOL: all x. (Song(x) -> -Visual(x))\nTEXT: All folk songs are songs.\nFOL: all x. (FolkSong(x) -> Song(x))\nTEXT: All videos are visuals.\nFOL: all x. (Video(x) -> Visual(x))\nTEXT: All movies are videos.\nFOL: all x. (Movie(x) -> Video(x))\nTEXT: All sci-fi movies are movies.\nFOL: all x. (ScifiMovie(x) -> Movie(x))\nTEXT: Inception is a sci-fi movie.\nFOL: ScifiMovie(Inception)\nTEXT: Mac is neither a folk song nor a sci-fi movie.\nFOL: -FolkSong(Mac) & -ScifiMovie(Mac)\nTEXT: Inception is a folk song.\nFOL: FolkSong(Inception)\n\nANSWER: False\n</EVALUATE>\n\n<PREMISES>\nEvery chef can cook.\nSome people who aren’t chefs can cook.\nPeople who cook can make scrambled eggs and pasta.\nIf someone can make cookies and muffins, they are a baker.\nBakers who can also make scrambled eggs can make a good breakfast.\nLuke can make cookies, scrambled eggs, and muffins, but not pasta.\n</PREMISES>\n<CONCLUSION>\nLuke is a chef.\n</CONCLUSION>\n<EVALUATE>\nTEXT: Every chef can cook.\nFOL: all x. (Chef(x) -> Can(x, Cook))\nTEXT: Some people who aren’t chefs can cook.\nFOL: exists x. (-Chef(x) & Can(x, Cook))\nTEXT: People who cook can make scrambled eggs and pasta.\nFOL: all x. (Can(x, Cook) -> (CanMake(x, ScrambledEggs) & CanMake(x, Pasta)))\nTEXT: If someone can make cookies and muffins, they are a baker.\nFOL: all x. (CanMake(x, Cookies) & CanMake(x, Muffins) -> Baker(x))\nTEXT: Bakers who can also make scrambled eggs can make a good breakfast.\nFOL: all x. ((Baker(x) & CanMake(x, ScrambledEggs)) -> CanMake(x, GoodBreakfast))\nTEXT: Luke can make cookies, scrambled eggs, and muffins, but not pasta.\nFOL: CanMake(Luke, Cookies) & (CanMake(Luke, ScrambledEggs) & CanMake(Luke, Muffins) & -CanMake(Luke, Pasta)\nTEXT: Luke is a chef.\nFOL: MakeGoodBreakfast(Luke)\n\nANSWER: False\n</EVALUATE>\n\n<PREMISES>\nETS develops various standardized tests primarily in the United States for K-12 and higher education.\nETS administers international tests, including the TOEFL, TOEIC, GRE, and subject tests.\nMany of the assessments ETS develops are associated with entry to the US tertiary and quaternary education institutions.\nETS also develops K-12 statewide assessments used for accountability testing in many states.\n</PREMISES>\n<CONCLUSION>\nETS doesn't administer tests internationally.\n</CONCLUSION>\n<EVALUATE>\nTEXT: ETS develops various standardized tests primarily in the United States for K-12 and higher education.\nFOL: exists x. exists y. (Develop(eTS, x) & Develop(eTS, y) & StandardizedTest(x) & StandardizedTest(y) & In(x, UnitedState) & In(y, UnitedState) & For(x, kOneTwoAndHigherEducation) & For(y, kOneTwoAndHigherEducation))\nTEXT: ETS administers international tests, including the TOEFL, TOEIC, GRE, and subject tests.\nFOL: exists x. (Administer(eTS, x) & InternationalTest(x) & (TOEFL(x) | TOEIC(x) | GRE(x) | SubjectTest(x)))\nTEXT: Many of the assessments ETS develops are associated with entry to the US tertiary and quaternary education institutions.\nFOL: exists x. (Develop(eTS, x) & AssociatedWith(x, EntryToUSEducationInstitution))\nTEXT: ETS also develops K-12 statewide assessments used for accountability testing in many states.\nFOL: exists x. (Develop(eTS, x) & StateWideAssesment(x) & UsedFor(x, AccountabilityTesting))\nTEXT: ETS doesn't administer tests internationally.\nFOL: exists x. (Develops(Ets, x) & For(x, k-OneTwoandhighereducation)) & exists x. (Develops(Ets, x) & AssociatedWith(x, Entrytouseducationinstitutions))\n\nANSWER: False\n</EVALUATE>\n\n<PREMISES>\nDaveed Diggs is an actor and film producer.\nDaveed Diggs played two roles in the musical Hamilton on Broadway.\nOne of the actors from Hamilton won the best actor award.\nThe actor playing Thomas Jefferson won the best actor award.\nDaveed Diggs played Thomas Jefferson.\nMusicals on Broadway are not films.\n</PREMISES>\n<CONCLUSION>\nDaveed Diggs won the best actor award.\n</CONCLUSION>\n<EVALUATE>\nTEXT: Daveed Diggs is an actor and film producer.\nFOL: Actor(DaveedDiggs) & FilmProducer(DaveedDiggs)\nTEXT: Daveed Diggs played two roles in the musical Hamilton on Broadway.\nFOL: exists x. exists y.(PlaysIn(DaveedDiggs, x, Hamilton) & (-(x=y)) & PlaysIn(DaveedDiggs, y, Hamilton)) & OnBroadway(Hamilton) & Musical(Hamilton)\nTEXT: One of the actors from Hamilton won the best actor award.\nFOL: exists x. exists y.(Actor(x) & PlaysIn(x, y, Hamilton) & Wins(x, BestActorAward))\nTEXT: The actor playing Thomas Jefferson won the best actor award.\nFOL: exists x. (Actor(x) & PlaysIn(x, ThomasJefferson, Hamilton) & Wins(x, BestActorAward))\nTEXT: Daveed Diggs played Thomas Jefferson.\nFOL: Plays(DaveedDiggs, ThomasJefferson)\nTEXT: Musicals on Broadway are not films.\nFOL: all x. ((Musical(x) & OnBroadway(x)) -> -Film(x))\nTEXT: Daveed Diggs won the best actor award.\nFOL: exists x. (BRICS(x) & Speaks(x, Hindi))\n\nANSWER: True\n</EVALUATE>\n\n<PREMISES>\nChina is in the European Union, and its economy is declining.\nIf someone is from China, then they are in the European Union.\nIndia is in the European Union, and its economy is declining.\nIf someone is from India, then they are in the European Union.\nAll people from China are Brazilian people.\nAll people from India are Martian people.\nThere is a person from India.\n</PREMISES>\n<CONCLUSION>\nIndia's economy is not declining.\n</CONCLUSION>\n<EVALUATE>", "raw_generations": ["Generation 1:\nTEXT: China is in the European Union, and its economy is declining.\nFOL: In(China, EuropeanUnion) & Declining(ChinaEconomy)\nTEXT: If someone is from China, then they are in the European Union.\nFOL: all x. (From(x, China) -> In(x, EuropeanUnion))\nTEXT: India is in the European Union, and its economy is declining.\nFOL: In(India, EuropeanUnion) & Declining(IndiaEconomy)\nTEXT: If someone is from India, then they are in the European Union.\nFOL: all x. (From(x, India) -> In(x, EuropeanUnion))\nTEXT: All people from China are Brazilian people.\nFOL: all x. (From(x, China) -> Brazilian(x))\nTEXT: All people from India are Martian people.\nFOL: all x. (From(x, India) -> Martian(x))\nTEXT: There is a person from India.\nFOL: exists x. (Person(x) & From(x, India))\nTEXT: India's economy is not declining.\nFOL: -Declining(IndiaEconomy)\n\nANSWER: False\n\nIn this case, the conclusion \"India's economy is not declining\" is false according to the premises provided. Both China and India are in the European Union, and their economies are declining according to the premises.\nProcessed: False", "Generation 2:\nTEXT: China is in the European Union, and its economy is declining.\nFOL: In(China, EuropeanUnion) & DecliningEconomy(China)\nTEXT: If someone is from China, then they are in the European Union.\nFOL: all x. (FromChina(x) -> In(x, EuropeanUnion))\nTEXT: India is in the European Union, and its economy is declining.\nFOL: In(India, EuropeanUnion) & DecliningEconomy(India)\nTEXT: If someone is from India, then they are in the European Union.\nFOL: all x. (FromIndia(x) -> In(x, EuropeanUnion))\nTEXT: All people from China are Brazilian people.\nFOL: all x. (FromChina(x) -> Brazilian(x))\nTEXT: All people from India are Martian people.\nFOL: all x. (FromIndia(x) -> Martian(x))\nTEXT: There is a person from India.\nFOL: exists x. (Person(x) & FromIndia(x))\nTEXT: India's economy is not declining.\nFOL: -DecliningEconomy(India)\n\nANSWER: False\nProcessed: False", "Generation 3:\nTEXT: China is in the European Union, and its economy is declining.\nFOL: In(China, EuropeanUnion) & DecliningEconomy(China)\nTEXT: If someone is from China, then they are in the European Union.\nFOL: all x. (FromChina(x) -> In(x, EuropeanUnion))\nTEXT: India is in the European Union, and its economy is declining.\nFOL: In(India, EuropeanUnion) & DecliningEconomy(India)\nTEXT: If someone is from India, then they are in the European Union.\nFOL: all x. (FromIndia(x) -> In(x, EuropeanUnion))\nTEXT: All people from China are Brazilian people.\nFOL: all x. (FromChina(x) -> Brazilian(x))\nTEXT: All people from India are Martian people.\nFOL: all x. (FromIndia(x) -> Martian(x))\nTEXT: There is a person from India.\nFOL: exists x. FromIndia(x)\nTEXT: India's economy is not declining.\nFOL: -DecliningEconomy(India)\n\nANSWER: False\nProcessed: False", "Generation 4:\nTEXT: China is in the European Union, and its economy is declining.\nFOL: In(China, EuropeanUnion) & Declining(China, Economy)\nTEXT: If someone is from China, then they are in the European Union.\nFOL: all x. (From(x, China) -> In(x, EuropeanUnion))\nTEXT: India is in the European Union, and its economy is declining.\nFOL: In(India, EuropeanUnion) & Declining(India, Economy)\nTEXT: If someone is from India, then they are in the European Union.\nFOL: all x. (From(x, India) -> In(x, EuropeanUnion))\nTEXT: All people from China are Brazilian people.\nFOL: all x. (From(x, China) -> Brazilian(x))\nTEXT: All people from India are Martian people.\nFOL: all x. (From(x, India) -> Martian(x))\nTEXT: There is a person from India.\nFOL: exists x. (Person(x) & From(x, India))\nTEXT: India's economy is not declining.\nFOL: -Declining(India, Economy)\n\nANSWER: False\nProcessed: False", "Generation 5:\nTEXT: China is in the European Union, and its economy is declining.\nFOL: In(China, EuropeanUnion) & Declining(China, Economy)\nTEXT: If someone is from China, then they are in the European Union.\nFOL: for all x, (FromChina(x) -> In(x, EuropeanUnion))\nTEXT: India is in the European Union, and its economy is declining.\nFOL: In(India, EuropeanUnion) & Declining(India, Economy)\nTEXT: If someone is from India, then they are in the European Union.\nFOL: for all x, (FromIndia(x) -> In(x, EuropeanUnion))\nTEXT: All people from China are Brazilian people.\nFOL: for all x, (FromChina(x) -> Brazilian(x))\nTEXT: All people from India are Martian people.\nFOL: for all x, (FromIndia(x) -> Martian(x))\nTEXT: There is a person from India.\nFOL: exists x, FromIndia(x)\nTEXT: India's economy is not declining.\nFOL: -Declining(India, Economy)\n\nANSWER: False\nProcessed: False", "Generation 6:\nTEXT: China is in the European Union, and its economy is declining.\nFOL: inEU(China) & decliningEconomy(China)\n\nTEXT: If someone is from China, then they are in the European Union.\nFOL: all x. (FromChina(x) -> inEU(x))\n\nTEXT: India is in the European Union, and its economy is declining.\nFOL: inEU(India) & decliningEconomy(India)\n\nTEXT: If someone is from India, then they are in the European Union.\nFOL: all x. (FromIndia(x) -> inEU(x))\n\nTEXT: All people from China are Brazilian people.\nFOL: all x. (FromChina(x) -> Brazilian(x))\n\nTEXT: All people from India are Martian people.\nFOL: all x. (FromIndia(x) -> Martian(x))\n\nTEXT: There is a person from India.\nFOL: exists x. FromIndia(x)\n\nTEXT: India's economy is not declining.\nFOL: -decliningEconomy(India)\n\nANSWER: False (Given the premises, we cannot conclude that India's economy is not declining)\nProcessed: False", "Generation 7:\nTEXT: China is in the European Union, and its economy is declining.\nFOL: In(China, EuropeanUnion) & Declining(ChinaEconomy)\n\nTEXT: If someone is from China, then they are in the European Union.\nFOL: all x. (FromChina(x) -> In(x, EuropeanUnion))\n\nTEXT: India is in the European Union, and its economy is declining.\nFOL: In(India, EuropeanUnion) & Declining(IndiaEconomy)\n\nTEXT: If someone is from India, then they are in the European Union.\nFOL: all x. (FromIndia(x) -> In(x, EuropeanUnion))\n\nTEXT: All people from China are Brazilian people.\nFOL: all x. (FromChina(x) -> Brazilian(x))\n\nTEXT: All people from India are Martian people.\nFOL: all x. (FromIndia(x) -> Martian(x))\n\nTEXT: There is a person from India.\nFOL: exists x. FromIndia(x)\n\nTEXT: India's economy is not declining.\nFOL: -Declining(IndiaEconomy)\n\nANSWER: False\nProcessed: False", "Generation 8:\nTEXT: China is in the European Union, and its economy is declining.\nFOL: In(China, EuropeanUnion) & Declining(ChinaEconomy)\n\nTEXT: If someone is from China, then they are in the European Union.\nFOL: all x. (From(x, China) -> In(x, EuropeanUnion))\n\nTEXT: India is in the European Union, and its economy is declining.\nFOL: In(India, EuropeanUnion) & Declining(IndiaEconomy)\n\nTEXT: If someone is from India, then they are in the European Union.\nFOL: all x. (From(x, India) -> In(x, EuropeanUnion))\n\nTEXT: All people from China are Brazilian people.\nFOL: all x. (From(x, China) -> Brazilian(x))\n\nTEXT: All people from India are Martian people.\nFOL: all x. (From(x, India) -> Martian(x))\n\nTEXT: There is a person from India.\nFOL: exists x. (Person(x) & From(x, India))\n\nTEXT: India's economy is not declining.\nFOL: -Declining(IndiaEconomy)\n\nANSWER: False\nProcessed: False", "Generation 9:\nTEXT: China is in the European Union, and its economy is declining.\nFOL: in(China, EuropeanUnion) & declining(ChinaEconomy)\nTEXT: If someone is from China, then they are in the European Union.\nFOL: forall x. (from(x, China) -> in(x, EuropeanUnion))\nTEXT: India is in the European Union, and its economy is declining.\nFOL: in(India, EuropeanUnion) & declining(IndiaEconomy)\nTEXT: If someone is from India, then they are in the European Union.\nFOL: forall x. (from(x, India) -> in(x, EuropeanUnion))\nTEXT: All people from China are Brazilian people.\nFOL: forall x. (from(x, China) -> Brazilian(x))\nTEXT: All people from India are Martian people.\nFOL: forall x. (from(x, India) -> Martian(x))\nTEXT: There is a person from India.\nFOL: exists x. (Person(x) & from(x, India))\nTEXT: India's economy is not declining.\nFOL: not(declining(IndiaEconomy))\n\nANSWER: False (Given the premises, it is concluded that India is in the European Union and its economy is declining)\nProcessed: False", "Generation 10:\nTEXT: China is in the European Union, and its economy is declining.\nFOL: In(China, EuropeanUnion) & DecliningEconomy(China)\nTEXT: If someone is from China, then they are in the European Union.\nFOL: all x. (From(x, China) -> In(x, EuropeanUnion))\nTEXT: India is in the European Union, and its economy is declining.\nFOL: In(India, EuropeanUnion) & DecliningEconomy(India)\nTEXT: If someone is from India, then they are in the European Union.\nFOL: all x. (From(x, India) -> In(x, EuropeanUnion))\nTEXT: All people from China are Brazilian people.\nFOL: all x. (From(x, China) -> Brazilian(x))\nTEXT: All people from India are Martian people.\nFOL: all x. (From(x, India) -> Martian(x))\nTEXT: There is a person from India.\nFOL: exists x. (Person(x) & From(x, India))\nTEXT: India's economy is not declining.\nFOL: -DecliningEconomy(India)\n\nANSWER: False\nProcessed: False\n\nReference: False\n========================================"], "answers": ["False", "False", "False", "False", "False", "False", "False", "False", "False", "False"]}
{"idx": 45, "prompt": "The following is a first-order logic (FOL) problem.\nThe problem is to determine whether the conclusion follows from the premises.\nThe premises are given in the form of a set of first-order logic sentences.\nThe conclusion is given in the form of a single first-order logic sentence.\nThe task is to translate each of the premises and conclusions into FOL expressions.and then to evaluate the conclusion as ANSWER: True, ANSWER: False, or ANSWER: Uncertain given the premises. The output should follow format TEXT: \nFOL: \nTEXT: \nFOL:... ANSWER: \n\n\n<PREMISES>\nAll biodegradable things are environment-friendly.\nAll woodware is biodegradable.\nAll paper is woodware.\nNothing is a good thing and also a bad thing.\nAll environment-friendly things are good.\nA worksheet is either paper or environment-friendly.\n</PREMISES>\n<CONCLUSION>\nA worksheet is not biodegradable.\n</CONCLUSION>\n<EVALUATE>\nTEXT: All biodegradable things are environment-friendly.\nFOL: all x. (Biodegradable(x) -> EnvironmentFriendly(x))\nTEXT: All woodware is biodegradable.\nFOL: all x. (Woodware(x) -> Biodegradable(x))\nTEXT: All paper is woodware.\nFOL: all x. (Paper(x) -> Woodware(x))\nTEXT: Nothing is a good thing and also a bad thing.\nFOL: -(exists x. (Good(x) & Bad(x)))\nTEXT: All environment-friendly things are good.\nFOL: all x. (EnvironmentFriendly(x) -> Good(x))\nTEXT: A worksheet is either paper or environment-friendly.\nFOL: ((Paper(Worksheet) & -EnvironmentFriendly(Worksheet)) | (-Paper(Worksheet) & EnvironmentFriendly(Worksheet)))\nTEXT: A worksheet is not biodegradable.\nFOL: -Dispensable(Worksheet)\n\nANSWER: Uncertain\n</EVALUATE>\n\n<PREMISES>\nA La Liga soccer team ranks higher than another La Liga soccer team if it receives more points.\nIf there are two La Liga soccer teams and neither has more points than the other, then the team which receives more points from the games between the two teams ranks higher.\nReal Madrid and Barcelona are both La Liga soccer teams.\nReal Madrid received more points than Barcelona.\nNeither Real Madrid nor Barcelona received more points from the games between them.\n</PREMISES>\n<CONCLUSION>\nReal Madrid ranks higher than Barcelona.\n</CONCLUSION>\n<EVALUATE>\nTEXT: A La Liga soccer team ranks higher than another La Liga soccer team if it receives more points.\nFOL: all x. all y. (LaLigaSoccerTeam(x) & LaLigaSoccerTeam(y) & MorePoints(x, y) -> RankHigherThan(x, y))\nTEXT: If there are two La Liga soccer teams and neither has more points than the other, then the team which receives more points from the games between the two teams ranks higher.\nFOL: all x. all y. (LaLigaSoccerTeam(x) & LaLigaSoccerTeam(y) & -MorePoints(x, y) & -MorePoints(y, x) & MorePointsInGameBetween(x, y) ->  RankHigherThan(x, y))\nTEXT: Real Madrid and Barcelona are both La Liga soccer teams.\nFOL: LaLigaSoccerTeam(RealMadrid) & LaLigaSoccerTeam(Barcelona)\nTEXT: Real Madrid received more points than Barcelona.\nFOL: MorePoints(RealMadrid, Barcelona)\nTEXT: Neither Real Madrid nor Barcelona received more points from the games between them.\nFOL: -MorePointsInGameBetween(RealMadrid, Barcelona) & -MorePointsInGameBetween(Barcelona, RealMadrid)\nTEXT: Real Madrid ranks higher than Barcelona.\nFOL: HigherRank(RealMadrid, Barcelona)\n\nANSWER: True\n</EVALUATE>\n\n<PREMISES>\nAll professional athletes spend most of their time on sports.\nAll Olympic gold medal winners are professional athletes.\nNo full-time scientists spend the majority of their time on sports.\nAll Nobel physics laureates are full-time scientists.\nAmy spends the most time on sports, or Amy is an Olympic gold medal winner.\nIf Amy is not a Nobel physics laureate, then Amy is not an Olympic gold medal winner.\n</PREMISES>\n<CONCLUSION>\nIf Amy is not an Olympic gold medal winner, then Amy is a Nobel physics laureate.\n</CONCLUSION>\n<EVALUATE>\nTEXT: All professional athletes spend most of their time on sports.\nFOL: all x. (ProfessionalAthlete(x) -> SpendOn(x, MostOfTheirTime, Sports))\nTEXT: All Olympic gold medal winners are professional athletes.\nFOL: all x. (OlympicGoldMedalWinner(x) -> ProfessionalAthlete(x))\nTEXT: No full-time scientists spend the majority of their time on sports.\nFOL: all x. (FullTimeScientist(x) -> -SpendOn(x, MostOfTheirTime, Sports))\nTEXT: All Nobel physics laureates are full-time scientists.\nFOL: all x. (NobelPhysicsLaureate(x) -> FullTimeScientist(x))\nTEXT: Amy spends the most time on sports, or Amy is an Olympic gold medal winner.\nFOL: SpendOn(Amy, MostOfTheirTime, Sports) | OlympicGoldMedalWinner(Amy)\nTEXT: If Amy is not a Nobel physics laureate, then Amy is not an Olympic gold medal winner.\nFOL: -NobelPhysicsLaureate(Amy) -> -OlympicGoldMedalWinner(Amy)\nTEXT: If Amy is not an Olympic gold medal winner, then Amy is a Nobel physics laureate.\nFOL: -OlympicGoldMedalWinner(Amy) -> NobelLaureate(Amy)\n\nANSWER: False\n</EVALUATE>\n\n<PREMISES>\nIf a person pays their taxes, then they contribute to the country.\nEveryone who works for a government department pays a tax on their salary.\nEveryone in the army is an employee of a government department.\nEveryone convicted of murder goes to prison.\nEveryone who has been to prison has a criminal record.\nJames was either once convicted of murder, or spent time in prison.\nJames either has a criminal record, or pays his taxes.\n</PREMISES>\n<CONCLUSION>\nJames does not contribute to the country.\n</CONCLUSION>\n<EVALUATE>\nTEXT: If a person pays their taxes, then they contribute to the country.\nFOL: all x. (Taxpayer(x) -> ContributeTo(x, Country))\nTEXT: Everyone who works for a government department pays a tax on their salary.\nFOL: all x. (WorkFor(x, GovernmentAgency) -> Taxpayer(x))\nTEXT: Everyone in the army is an employee of a government department.\nFOL: all x. (ServesIn(x, TheArmy) -> WorkFor(x, GovernmentAgency))\nTEXT: Everyone convicted of murder goes to prison.\nFOL: all x. (SentencedForMurder(x) -> Imprisoned(x))\nTEXT: Everyone who has been to prison has a criminal record.\nFOL: all x. (Imprisoned((x) -> Has(x, CriminalRecord))\nTEXT: James was either once convicted of murder, or spent time in prison.\nFOL: ((SentencedForMurder(James) & -Imprisoned(James)) | (-SentencedForMurder(James) & Imprisoned(James)))\nTEXT: James either has a criminal record, or pays his taxes.\nFOL: ((Has(James, CriminalRecord) & -Taxpayer(James)) | (-Has(James, CriminalRecord) & Taxpayer(James)))\nTEXT: James does not contribute to the country.\nFOL: ContributeToCountry(James)\n\nANSWER: Uncertain\n</EVALUATE>\n\n<PREMISES>\nNo songs are visuals.\nAll folk songs are songs.\nAll videos are visuals.\nAll movies are videos.\nAll sci-fi movies are movies.\nInception is a sci-fi movie.\nMac is neither a folk song nor a sci-fi movie.\n</PREMISES>\n<CONCLUSION>\nInception is a folk song.\n</CONCLUSION>\n<EVALUATE>\nTEXT: No songs are visuals.\nFOL: all x. (Song(x) -> -Visual(x))\nTEXT: All folk songs are songs.\nFOL: all x. (FolkSong(x) -> Song(x))\nTEXT: All videos are visuals.\nFOL: all x. (Video(x) -> Visual(x))\nTEXT: All movies are videos.\nFOL: all x. (Movie(x) -> Video(x))\nTEXT: All sci-fi movies are movies.\nFOL: all x. (ScifiMovie(x) -> Movie(x))\nTEXT: Inception is a sci-fi movie.\nFOL: ScifiMovie(Inception)\nTEXT: Mac is neither a folk song nor a sci-fi movie.\nFOL: -FolkSong(Mac) & -ScifiMovie(Mac)\nTEXT: Inception is a folk song.\nFOL: FolkSong(Inception)\n\nANSWER: False\n</EVALUATE>\n\n<PREMISES>\nEvery chef can cook.\nSome people who aren’t chefs can cook.\nPeople who cook can make scrambled eggs and pasta.\nIf someone can make cookies and muffins, they are a baker.\nBakers who can also make scrambled eggs can make a good breakfast.\nLuke can make cookies, scrambled eggs, and muffins, but not pasta.\n</PREMISES>\n<CONCLUSION>\nLuke is a chef.\n</CONCLUSION>\n<EVALUATE>\nTEXT: Every chef can cook.\nFOL: all x. (Chef(x) -> Can(x, Cook))\nTEXT: Some people who aren’t chefs can cook.\nFOL: exists x. (-Chef(x) & Can(x, Cook))\nTEXT: People who cook can make scrambled eggs and pasta.\nFOL: all x. (Can(x, Cook) -> (CanMake(x, ScrambledEggs) & CanMake(x, Pasta)))\nTEXT: If someone can make cookies and muffins, they are a baker.\nFOL: all x. (CanMake(x, Cookies) & CanMake(x, Muffins) -> Baker(x))\nTEXT: Bakers who can also make scrambled eggs can make a good breakfast.\nFOL: all x. ((Baker(x) & CanMake(x, ScrambledEggs)) -> CanMake(x, GoodBreakfast))\nTEXT: Luke can make cookies, scrambled eggs, and muffins, but not pasta.\nFOL: CanMake(Luke, Cookies) & (CanMake(Luke, ScrambledEggs) & CanMake(Luke, Muffins) & -CanMake(Luke, Pasta)\nTEXT: Luke is a chef.\nFOL: MakeGoodBreakfast(Luke)\n\nANSWER: False\n</EVALUATE>\n\n<PREMISES>\nETS develops various standardized tests primarily in the United States for K-12 and higher education.\nETS administers international tests, including the TOEFL, TOEIC, GRE, and subject tests.\nMany of the assessments ETS develops are associated with entry to the US tertiary and quaternary education institutions.\nETS also develops K-12 statewide assessments used for accountability testing in many states.\n</PREMISES>\n<CONCLUSION>\nETS doesn't administer tests internationally.\n</CONCLUSION>\n<EVALUATE>\nTEXT: ETS develops various standardized tests primarily in the United States for K-12 and higher education.\nFOL: exists x. exists y. (Develop(eTS, x) & Develop(eTS, y) & StandardizedTest(x) & StandardizedTest(y) & In(x, UnitedState) & In(y, UnitedState) & For(x, kOneTwoAndHigherEducation) & For(y, kOneTwoAndHigherEducation))\nTEXT: ETS administers international tests, including the TOEFL, TOEIC, GRE, and subject tests.\nFOL: exists x. (Administer(eTS, x) & InternationalTest(x) & (TOEFL(x) | TOEIC(x) | GRE(x) | SubjectTest(x)))\nTEXT: Many of the assessments ETS develops are associated with entry to the US tertiary and quaternary education institutions.\nFOL: exists x. (Develop(eTS, x) & AssociatedWith(x, EntryToUSEducationInstitution))\nTEXT: ETS also develops K-12 statewide assessments used for accountability testing in many states.\nFOL: exists x. (Develop(eTS, x) & StateWideAssesment(x) & UsedFor(x, AccountabilityTesting))\nTEXT: ETS doesn't administer tests internationally.\nFOL: exists x. (Develops(Ets, x) & For(x, k-OneTwoandhighereducation)) & exists x. (Develops(Ets, x) & AssociatedWith(x, Entrytouseducationinstitutions))\n\nANSWER: False\n</EVALUATE>\n\n<PREMISES>\nDaveed Diggs is an actor and film producer.\nDaveed Diggs played two roles in the musical Hamilton on Broadway.\nOne of the actors from Hamilton won the best actor award.\nThe actor playing Thomas Jefferson won the best actor award.\nDaveed Diggs played Thomas Jefferson.\nMusicals on Broadway are not films.\n</PREMISES>\n<CONCLUSION>\nDaveed Diggs won the best actor award.\n</CONCLUSION>\n<EVALUATE>\nTEXT: Daveed Diggs is an actor and film producer.\nFOL: Actor(DaveedDiggs) & FilmProducer(DaveedDiggs)\nTEXT: Daveed Diggs played two roles in the musical Hamilton on Broadway.\nFOL: exists x. exists y.(PlaysIn(DaveedDiggs, x, Hamilton) & (-(x=y)) & PlaysIn(DaveedDiggs, y, Hamilton)) & OnBroadway(Hamilton) & Musical(Hamilton)\nTEXT: One of the actors from Hamilton won the best actor award.\nFOL: exists x. exists y.(Actor(x) & PlaysIn(x, y, Hamilton) & Wins(x, BestActorAward))\nTEXT: The actor playing Thomas Jefferson won the best actor award.\nFOL: exists x. (Actor(x) & PlaysIn(x, ThomasJefferson, Hamilton) & Wins(x, BestActorAward))\nTEXT: Daveed Diggs played Thomas Jefferson.\nFOL: Plays(DaveedDiggs, ThomasJefferson)\nTEXT: Musicals on Broadway are not films.\nFOL: all x. ((Musical(x) & OnBroadway(x)) -> -Film(x))\nTEXT: Daveed Diggs won the best actor award.\nFOL: exists x. (BRICS(x) & Speaks(x, Hindi))\n\nANSWER: True\n</EVALUATE>\n\n<PREMISES>\nBasketball players have a right nose and a left nose.\nTop basketball players are basketball players who can use both the left nose and right nose very efficiently.\nIf a basketball player can score many goals using the left nose, they can use that nose very efficiently.\nIf a basketball player can score many goals using the right nose, they can use that nose very efficiently.\nCristiano Ronaldo is a basketball player.\nCristiano Ronaldo can use his right nose very efficiently.\nCristiano Ronaldo has scored many goals using his left nose.\n</PREMISES>\n<CONCLUSION>\nCristiano Ronaldo is a top basketball player.\n</CONCLUSION>\n<EVALUATE>", "raw_generations": ["Generation 1:\nTEXT: Basketball players have a right nose and a left nose.\nFOL: all x. (BasketballPlayer(x) -> (HasNose(x, RightNose) & HasNose(x, LeftNose)))\n\nTEXT: Top basketball players are basketball players who can use both the left nose and right nose very efficiently.\nFOL: all x. (TopBasketballPlayer(x) -> (BasketballPlayer(x) & (CanUse(x, RightNose, Efficiently) & CanUse(x, LeftNose, Efficiently))))\n\nTEXT: If a basketball player can score many goals using the left nose, they can use that nose very efficiently.\nFOL: all x. (CanScoreManyGoalsUsingLeftNose(x) -> CanUse(x, LeftNose, Efficiently))\n\nTEXT: If a basketball player can score many goals using the right nose, they can use that nose very efficiently.\nFOL: all x. (CanScoreManyGoalsUsingRightNose(x) -> CanUse(x, RightNose, Efficiently))\n\nTEXT: Cristiano Ronaldo is a basketball player.\nFOL: BasketballPlayer(CristianoRonaldo)\n\nTEXT: Cristiano Ronaldo can use his right nose very efficiently.\nFOL: CanUse(CristianoRonaldo, RightNose, Efficiently)\n\nTEXT: Cristiano Ronaldo has scored many goals using his left nose.\nFOL: CanScoreManyGoalsUsingLeftNose(CristianoRonaldo)\n\nTEXT: Cristiano Ronaldo is a top basketball player.\nFOL: TopBasketballPlayer(CristianoRonaldo)\n\nANSWER: True\nProcessed: True", "Generation 2:\nTEXT: Basketball players have a right nose and a left nose.\nFOL: all x. (BasketballPlayer(x) -> (HasRightNose(x) & HasLeftNose(x)))\n\nTEXT: Top basketball players are basketball players who can use both the left nose and right nose very efficiently.\nFOL: all x. (TopBasketballPlayer(x) -> (BasketballPlayer(x) & EfficientlyUsesLeftNose(x) & EfficientlyUsesRightNose(x)))\n\nTEXT: If a basketball player can score many goals using the left nose, they can use that nose very efficiently.\nFOL: all x. (CanScoreManyGoalsUsingLeftNose(x) -> EfficientlyUsesLeftNose(x))\n\nTEXT: If a basketball player can score many goals using the right nose, they can use that nose very efficiently.\nFOL: all x. (CanScoreManyGoalsUsingRightNose(x) -> EfficientlyUsesRightNose(x))\n\nTEXT: Cristiano Ronaldo is a basketball player.\nFOL: BasketballPlayer(CristianoRonaldo)\n\nTEXT: Cristiano Ronaldo can use his right nose very efficiently.\nFOL: EfficientlyUsesRightNose(CristianoRonaldo)\n\nTEXT: Cristiano Ronaldo has scored many goals using his left nose.\nFOL: CanScoreManyGoalsUsingLeftNose(CristianoRonaldo)\n\nTEXT: Cristiano Ronaldo is a top basketball player.\nFOL: TopBasketballPlayer(CristianoRonaldo)\n\nANSWER: True\nProcessed: True", "Generation 3:\nTEXT: Basketball players have a right nose and a left nose.\nFOL: all x. (BasketballPlayer(x) -> (HasNose(x, Right) & HasNose(x, Left)))\nTEXT: Top basketball players are basketball players who can use both the left nose and right nose very efficiently.\nFOL: all x. (TopBasketballPlayer(x) -> (CanUse(x, Right) & CanUse(x, Left)))\nTEXT: If a basketball player can score many goals using the left nose, they can use that nose very efficiently.\nFOL: all x. (CanScoreManyGoalsUsing(x, Left) -> CanUse(x, Left))\nTEXT: If a basketball player can score many goals using the right nose, they can use that nose very efficiently.\nFOL: all x. (CanScoreManyGoalsUsing(x, Right) -> CanUse(x, Right))\nTEXT: Cristiano Ronaldo is a basketball player.\nFOL: BasketballPlayer(CristianoRonaldo)\nTEXT: Cristiano Ronaldo can use his right nose very efficiently.\nFOL: CanUse(CristianoRonaldo, Right)\nTEXT: Cristiano Ronaldo has scored many goals using his left nose.\nFOL: CanScoreManyGoalsUsing(CristianoRonaldo, Left)\nTEXT: Cristiano Ronaldo is a top basketball player.\nFOL: TopBasketballPlayer(CristianoRonaldo)\n\nANSWER: True\nProcessed: True", "Generation 4:\nTEXT: Basketball players have a right nose and a left nose.\nFOL: all x. (BasketballPlayer(x) -> (HasRightNose(x) & HasLeftNose(x)))\nTEXT: Top basketball players are basketball players who can use both the left nose and right nose very efficiently.\nFOL: all x. (TopBasketballPlayer(x) -> (BasketballPlayer(x) & CanUseLeftNoseEfficiently(x) & CanUseRightNoseEfficiently(x)))\nTEXT: If a basketball player can score many goals using the left nose, they can use that nose very efficiently.\nFOL: all x. (BasketballPlayer(x) & CanScoreManyGoalsUsingLeftNose(x) -> CanUseLeftNoseEfficiently(x))\nTEXT: If a basketball player can score many goals using the right nose, they can use that nose very efficiently.\nFOL: all x. (BasketballPlayer(x) & CanScoreManyGoalsUsingRightNose(x) -> CanUseRightNoseEfficiently(x))\nTEXT: Cristiano Ronaldo is a basketball player.\nFOL: BasketballPlayer(CristianoRonaldo)\nTEXT: Cristiano Ronaldo can use his right nose very efficiently.\nFOL: CanUseRightNoseEfficiently(CristianoRonaldo)\nTEXT: Cristiano Ronaldo has scored many goals using his left nose.\nFOL: CanScoreManyGoalsUsingLeftNose(CristianoRonaldo)\nTEXT: Cristiano Ronaldo is a top basketball player.\nFOL: TopBasketballPlayer(CristianoRonaldo)\n\nANSWER: True\nProcessed: True", "Generation 5:\nTEXT: Basketball players have a right nose and a left nose.\nFOL: all x. (BasketballPlayer(x) -> (RightNose(x) & LeftNose(x)))\n\nTEXT: Top basketball players are basketball players who can use both the left nose and right nose very efficiently.\nFOL: all x. (TopBasketballPlayer(x) -> (BasketballPlayer(x) & EfficientlyUses(x, LeftNose) & EfficientlyUses(x, RightNose)))\n\nTEXT: If a basketball player can score many goals using the left nose, they can use that nose very efficiently.\nFOL: all x. (CanScoreManyGoalsUsing(x, LeftNose) -> EfficientlyUses(x, LeftNose))\n\nTEXT: If a basketball player can score many goals using the right nose, they can use that nose very efficiently.\nFOL: all x. (CanScoreManyGoalsUsing(x, RightNose) -> EfficientlyUses(x, RightNose))\n\nTEXT: Cristiano Ronaldo is a basketball player.\nFOL: BasketballPlayer(CristianoRonaldo)\n\nTEXT: Cristiano Ronaldo can use his right nose very efficiently.\nFOL: EfficientlyUses(CristianoRonaldo, RightNose)\n\nTEXT: Cristiano Ronaldo has scored many goals using his left nose.\nFOL: CanScoreManyGoalsUsing(CristianoRonaldo, LeftNose)\n\nTEXT: Cristiano Ronaldo is a top basketball player.\nFOL: TopBasketballPlayer(CristianoRonaldo)\n\nANSWER: True\nProcessed: True", "Generation 6:\nTEXT: Basketball players have a right nose and a left nose.\nFOL: all x. (BasketballPlayer(x) -> (Has(x, RightNose) & Has(x, LeftNose)))\nTEXT: Top basketball players are basketball players who can use both the left nose and right nose very efficiently.\nFOL: all x. (TopBasketballPlayer(x) -> (EfficientlyUses(x, LeftNose) & EfficientlyUses(x, RightNose)))\nTEXT: If a basketball player can score many goals using the left nose, they can use that nose very efficiently.\nFOL: all x. (CanScoreManyGoalsUsing(x, LeftNose) -> EfficientlyUses(x, LeftNose))\nTEXT: If a basketball player can score many goals using the right nose, they can use that nose very efficiently.\nFOL: all x. (CanScoreManyGoalsUsing(x, RightNose) -> EfficientlyUses(x, RightNose))\nTEXT: Cristiano Ronaldo is a basketball player.\nFOL: BasketballPlayer(CristianoRonaldo)\nTEXT: Cristiano Ronaldo can use his right nose very efficiently.\nFOL: EfficientlyUses(CristianoRonaldo, RightNose)\nTEXT: Cristiano Ronaldo has scored many goals using his left nose.\nFOL: CanScoreManyGoalsUsing(CristianoRonaldo, LeftNose)\nTEXT: Cristiano Ronaldo is a top basketball player.\nFOL: TopBasketballPlayer(CristianoRonaldo)\n\nANSWER: True\nProcessed: True", "Generation 7:\nTEXT: Basketball players have a right nose and a left nose.\nFOL: all x. (BasketballPlayer(x) -> Has(x, RightNose) & Has(x, LeftNose))\n\nTEXT: Top basketball players are basketball players who can use both the left nose and right nose very efficiently.\nFOL: all x. (TopBasketballPlayer(x) -> (CanUseEfficiently(x, RightNose) & CanUseEfficiently(x, LeftNose)))\n\nTEXT: If a basketball player can score many goals using the left nose, they can use that nose very efficiently.\nFOL: all x. (CanScoreManyGoalsUsing(x, LeftNose) -> CanUseEfficiently(x, LeftNose))\n\nTEXT: If a basketball player can score many goals using the right nose, they can use that nose very efficiently.\nFOL: all x. (CanScoreManyGoalsUsing(x, RightNose) -> CanUseEfficiently(x, RightNose))\n\nTEXT: Cristiano Ronaldo is a basketball player.\nFOL: BasketballPlayer(CristianoRonaldo)\n\nTEXT: Cristiano Ronaldo can use his right nose very efficiently.\nFOL: CanUseEfficiently(CristianoRonaldo, RightNose)\n\nTEXT: Cristiano Ronaldo has scored many goals using his left nose.\nFOL: CanScoreManyGoalsUsing(CristianoRonaldo, LeftNose)\n\nTEXT: Cristiano Ronaldo is a top basketball player.\nFOL: TopBasketballPlayer(CristianoRonaldo)\n\nANSWER: True\nProcessed: True", "Generation 8:\nTEXT: Basketball players have a right nose and a left nose.\nFOL: all x. (BasketballPlayer(x) -> (HasRightNose(x) & HasLeftNose(x)))\nTEXT: Top basketball players are basketball players who can use both the left nose and right nose very efficiently.\nFOL: all x. (TopBasketballPlayer(x) -> (CanUseLeftNose(x) & CanUseRightNose(x)))\nTEXT: If a basketball player can score many goals using the left nose, they can use that nose very efficiently.\nFOL: (CanScoreManyGoalsUsingLeftNose(x) -> CanUseLeftNose(x))\nTEXT: If a basketball player can score many goals using the right nose, they can use that nose very efficiently.\nFOL: (CanScoreManyGoalsUsingRightNose(x) -> CanUseRightNose(x))\nTEXT: Cristiano Ronaldo is a basketball player.\nFOL: BasketballPlayer(CristianoRonaldo)\nTEXT: Cristiano Ronaldo can use his right nose very efficiently.\nFOL: CanUseRightNose(CristianoRonaldo)\nTEXT: Cristiano Ronaldo has scored many goals using his left nose.\nFOL: CanScoreManyGoalsUsingLeftNose(CristianoRonaldo)\nTEXT: Cristiano Ronaldo is a top basketball player.\nFOL: TopBasketballPlayer(CristianoRonaldo)\n\nANSWER: True\nProcessed: True", "Generation 9:\nTEXT: Basketball players have a right nose and a left nose.\nFOL: all x. (BasketballPlayer(x) -> (RightNose(x) & LeftNose(x)))\nTEXT: Top basketball players are basketball players who can use both the left nose and right nose very efficiently.\nFOL: all x. (TopBasketballPlayer(x) -> (EfficientUseOfLeftNose(x) & EfficientUseOfRightNose(x)))\nTEXT: If a basketball player can score many goals using the left nose, they can use that nose very efficiently.\nFOL: all x. (CanScoreManyGoalsUsingLeftNose(x) -> EfficientUseOfLeftNose(x))\nTEXT: If a basketball player can score many goals using the right nose, they can use that nose very efficiently.\nFOL: all x. (CanScoreManyGoalsUsingRightNose(x) -> EfficientUseOfRightNose(x))\nTEXT: Cristiano Ronaldo is a basketball player.\nFOL: BasketballPlayer(CristianoRonaldo)\nTEXT: Cristiano Ronaldo can use his right nose very efficiently.\nFOL: EfficientUseOfRightNose(CristianoRonaldo)\nTEXT: Cristiano Ronaldo has scored many goals using his left nose.\nFOL: CanScoreManyGoalsUsingLeftNose(CristianoRonaldo)\nTEXT: Cristiano Ronaldo is a top basketball player.\nFOL: TopBasketballPlayer(CristianoRonaldo)\n\nANSWER: True\nProcessed: True", "Generation 10:\nTEXT: Basketball players have a right nose and a left nose.\nFOL: all x. (BasketballPlayer(x) -> (HasNose(x, Right) & HasNose(x, Left)))\nTEXT: Top basketball players are basketball players who can use both the left nose and right nose very efficiently.\nFOL: all x. (TopBasketballPlayer(x) -> (Efficient(x, LeftNose) & Efficient(x, RightNose)))\nTEXT: If a basketball player can score many goals using the left nose, they can use that nose very efficiently.\nFOL: all x. (Efficient(x, LeftNose) -> (CanScoreManyGoalsUsingLeftNose(x) & (CanUseNoseEfficiently(x, LeftNose))))\nTEXT: If a basketball player can score many goals using the right nose, they can use that nose very efficiently.\nFOL: all x. (Efficient(x, RightNose) -> (CanScoreManyGoalsUsingRightNose(x) & (CanUseNoseEfficiently(x, RightNose))))\nTEXT: Cristiano Ronaldo is a basketball player.\nFOL: BasketballPlayer(CristianoRonaldo)\nTEXT: Cristiano Ronaldo can use his right nose very efficiently.\nFOL: Efficient(CristianoRonaldo, RightNose)\nTEXT: Cristiano Ronaldo has scored many goals using his left nose.\nFOL: CanScoreManyGoalsUsingLeftNose(CristianoRonaldo)\nTEXT: Cristiano Ronaldo is a top basketball player.\nFOL: TopBasketballPlayer(CristianoRonaldo)\n\nANSWER: True\nProcessed: True\n\nReference: True\n========================================"], "answers": ["True", "True", "True", "True", "True", "True", "True", "True", "True", "True"]}
{"idx": 46, "prompt": "The following is a first-order logic (FOL) problem.\nThe problem is to determine whether the conclusion follows from the premises.\nThe premises are given in the form of a set of first-order logic sentences.\nThe conclusion is given in the form of a single first-order logic sentence.\nThe task is to translate each of the premises and conclusions into FOL expressions.and then to evaluate the conclusion as ANSWER: True, ANSWER: False, or ANSWER: Uncertain given the premises. The output should follow format TEXT: \nFOL: \nTEXT: \nFOL:... ANSWER: \n\n\n<PREMISES>\nAll biodegradable things are environment-friendly.\nAll woodware is biodegradable.\nAll paper is woodware.\nNothing is a good thing and also a bad thing.\nAll environment-friendly things are good.\nA worksheet is either paper or environment-friendly.\n</PREMISES>\n<CONCLUSION>\nA worksheet is not biodegradable.\n</CONCLUSION>\n<EVALUATE>\nTEXT: All biodegradable things are environment-friendly.\nFOL: all x. (Biodegradable(x) -> EnvironmentFriendly(x))\nTEXT: All woodware is biodegradable.\nFOL: all x. (Woodware(x) -> Biodegradable(x))\nTEXT: All paper is woodware.\nFOL: all x. (Paper(x) -> Woodware(x))\nTEXT: Nothing is a good thing and also a bad thing.\nFOL: -(exists x. (Good(x) & Bad(x)))\nTEXT: All environment-friendly things are good.\nFOL: all x. (EnvironmentFriendly(x) -> Good(x))\nTEXT: A worksheet is either paper or environment-friendly.\nFOL: ((Paper(Worksheet) & -EnvironmentFriendly(Worksheet)) | (-Paper(Worksheet) & EnvironmentFriendly(Worksheet)))\nTEXT: A worksheet is not biodegradable.\nFOL: -Dispensable(Worksheet)\n\nANSWER: Uncertain\n</EVALUATE>\n\n<PREMISES>\nA La Liga soccer team ranks higher than another La Liga soccer team if it receives more points.\nIf there are two La Liga soccer teams and neither has more points than the other, then the team which receives more points from the games between the two teams ranks higher.\nReal Madrid and Barcelona are both La Liga soccer teams.\nReal Madrid received more points than Barcelona.\nNeither Real Madrid nor Barcelona received more points from the games between them.\n</PREMISES>\n<CONCLUSION>\nReal Madrid ranks higher than Barcelona.\n</CONCLUSION>\n<EVALUATE>\nTEXT: A La Liga soccer team ranks higher than another La Liga soccer team if it receives more points.\nFOL: all x. all y. (LaLigaSoccerTeam(x) & LaLigaSoccerTeam(y) & MorePoints(x, y) -> RankHigherThan(x, y))\nTEXT: If there are two La Liga soccer teams and neither has more points than the other, then the team which receives more points from the games between the two teams ranks higher.\nFOL: all x. all y. (LaLigaSoccerTeam(x) & LaLigaSoccerTeam(y) & -MorePoints(x, y) & -MorePoints(y, x) & MorePointsInGameBetween(x, y) ->  RankHigherThan(x, y))\nTEXT: Real Madrid and Barcelona are both La Liga soccer teams.\nFOL: LaLigaSoccerTeam(RealMadrid) & LaLigaSoccerTeam(Barcelona)\nTEXT: Real Madrid received more points than Barcelona.\nFOL: MorePoints(RealMadrid, Barcelona)\nTEXT: Neither Real Madrid nor Barcelona received more points from the games between them.\nFOL: -MorePointsInGameBetween(RealMadrid, Barcelona) & -MorePointsInGameBetween(Barcelona, RealMadrid)\nTEXT: Real Madrid ranks higher than Barcelona.\nFOL: HigherRank(RealMadrid, Barcelona)\n\nANSWER: True\n</EVALUATE>\n\n<PREMISES>\nAll professional athletes spend most of their time on sports.\nAll Olympic gold medal winners are professional athletes.\nNo full-time scientists spend the majority of their time on sports.\nAll Nobel physics laureates are full-time scientists.\nAmy spends the most time on sports, or Amy is an Olympic gold medal winner.\nIf Amy is not a Nobel physics laureate, then Amy is not an Olympic gold medal winner.\n</PREMISES>\n<CONCLUSION>\nIf Amy is not an Olympic gold medal winner, then Amy is a Nobel physics laureate.\n</CONCLUSION>\n<EVALUATE>\nTEXT: All professional athletes spend most of their time on sports.\nFOL: all x. (ProfessionalAthlete(x) -> SpendOn(x, MostOfTheirTime, Sports))\nTEXT: All Olympic gold medal winners are professional athletes.\nFOL: all x. (OlympicGoldMedalWinner(x) -> ProfessionalAthlete(x))\nTEXT: No full-time scientists spend the majority of their time on sports.\nFOL: all x. (FullTimeScientist(x) -> -SpendOn(x, MostOfTheirTime, Sports))\nTEXT: All Nobel physics laureates are full-time scientists.\nFOL: all x. (NobelPhysicsLaureate(x) -> FullTimeScientist(x))\nTEXT: Amy spends the most time on sports, or Amy is an Olympic gold medal winner.\nFOL: SpendOn(Amy, MostOfTheirTime, Sports) | OlympicGoldMedalWinner(Amy)\nTEXT: If Amy is not a Nobel physics laureate, then Amy is not an Olympic gold medal winner.\nFOL: -NobelPhysicsLaureate(Amy) -> -OlympicGoldMedalWinner(Amy)\nTEXT: If Amy is not an Olympic gold medal winner, then Amy is a Nobel physics laureate.\nFOL: -OlympicGoldMedalWinner(Amy) -> NobelLaureate(Amy)\n\nANSWER: False\n</EVALUATE>\n\n<PREMISES>\nIf a person pays their taxes, then they contribute to the country.\nEveryone who works for a government department pays a tax on their salary.\nEveryone in the army is an employee of a government department.\nEveryone convicted of murder goes to prison.\nEveryone who has been to prison has a criminal record.\nJames was either once convicted of murder, or spent time in prison.\nJames either has a criminal record, or pays his taxes.\n</PREMISES>\n<CONCLUSION>\nJames does not contribute to the country.\n</CONCLUSION>\n<EVALUATE>\nTEXT: If a person pays their taxes, then they contribute to the country.\nFOL: all x. (Taxpayer(x) -> ContributeTo(x, Country))\nTEXT: Everyone who works for a government department pays a tax on their salary.\nFOL: all x. (WorkFor(x, GovernmentAgency) -> Taxpayer(x))\nTEXT: Everyone in the army is an employee of a government department.\nFOL: all x. (ServesIn(x, TheArmy) -> WorkFor(x, GovernmentAgency))\nTEXT: Everyone convicted of murder goes to prison.\nFOL: all x. (SentencedForMurder(x) -> Imprisoned(x))\nTEXT: Everyone who has been to prison has a criminal record.\nFOL: all x. (Imprisoned((x) -> Has(x, CriminalRecord))\nTEXT: James was either once convicted of murder, or spent time in prison.\nFOL: ((SentencedForMurder(James) & -Imprisoned(James)) | (-SentencedForMurder(James) & Imprisoned(James)))\nTEXT: James either has a criminal record, or pays his taxes.\nFOL: ((Has(James, CriminalRecord) & -Taxpayer(James)) | (-Has(James, CriminalRecord) & Taxpayer(James)))\nTEXT: James does not contribute to the country.\nFOL: ContributeToCountry(James)\n\nANSWER: Uncertain\n</EVALUATE>\n\n<PREMISES>\nNo songs are visuals.\nAll folk songs are songs.\nAll videos are visuals.\nAll movies are videos.\nAll sci-fi movies are movies.\nInception is a sci-fi movie.\nMac is neither a folk song nor a sci-fi movie.\n</PREMISES>\n<CONCLUSION>\nInception is a folk song.\n</CONCLUSION>\n<EVALUATE>\nTEXT: No songs are visuals.\nFOL: all x. (Song(x) -> -Visual(x))\nTEXT: All folk songs are songs.\nFOL: all x. (FolkSong(x) -> Song(x))\nTEXT: All videos are visuals.\nFOL: all x. (Video(x) -> Visual(x))\nTEXT: All movies are videos.\nFOL: all x. (Movie(x) -> Video(x))\nTEXT: All sci-fi movies are movies.\nFOL: all x. (ScifiMovie(x) -> Movie(x))\nTEXT: Inception is a sci-fi movie.\nFOL: ScifiMovie(Inception)\nTEXT: Mac is neither a folk song nor a sci-fi movie.\nFOL: -FolkSong(Mac) & -ScifiMovie(Mac)\nTEXT: Inception is a folk song.\nFOL: FolkSong(Inception)\n\nANSWER: False\n</EVALUATE>\n\n<PREMISES>\nEvery chef can cook.\nSome people who aren’t chefs can cook.\nPeople who cook can make scrambled eggs and pasta.\nIf someone can make cookies and muffins, they are a baker.\nBakers who can also make scrambled eggs can make a good breakfast.\nLuke can make cookies, scrambled eggs, and muffins, but not pasta.\n</PREMISES>\n<CONCLUSION>\nLuke is a chef.\n</CONCLUSION>\n<EVALUATE>\nTEXT: Every chef can cook.\nFOL: all x. (Chef(x) -> Can(x, Cook))\nTEXT: Some people who aren’t chefs can cook.\nFOL: exists x. (-Chef(x) & Can(x, Cook))\nTEXT: People who cook can make scrambled eggs and pasta.\nFOL: all x. (Can(x, Cook) -> (CanMake(x, ScrambledEggs) & CanMake(x, Pasta)))\nTEXT: If someone can make cookies and muffins, they are a baker.\nFOL: all x. (CanMake(x, Cookies) & CanMake(x, Muffins) -> Baker(x))\nTEXT: Bakers who can also make scrambled eggs can make a good breakfast.\nFOL: all x. ((Baker(x) & CanMake(x, ScrambledEggs)) -> CanMake(x, GoodBreakfast))\nTEXT: Luke can make cookies, scrambled eggs, and muffins, but not pasta.\nFOL: CanMake(Luke, Cookies) & (CanMake(Luke, ScrambledEggs) & CanMake(Luke, Muffins) & -CanMake(Luke, Pasta)\nTEXT: Luke is a chef.\nFOL: MakeGoodBreakfast(Luke)\n\nANSWER: False\n</EVALUATE>\n\n<PREMISES>\nETS develops various standardized tests primarily in the United States for K-12 and higher education.\nETS administers international tests, including the TOEFL, TOEIC, GRE, and subject tests.\nMany of the assessments ETS develops are associated with entry to the US tertiary and quaternary education institutions.\nETS also develops K-12 statewide assessments used for accountability testing in many states.\n</PREMISES>\n<CONCLUSION>\nETS doesn't administer tests internationally.\n</CONCLUSION>\n<EVALUATE>\nTEXT: ETS develops various standardized tests primarily in the United States for K-12 and higher education.\nFOL: exists x. exists y. (Develop(eTS, x) & Develop(eTS, y) & StandardizedTest(x) & StandardizedTest(y) & In(x, UnitedState) & In(y, UnitedState) & For(x, kOneTwoAndHigherEducation) & For(y, kOneTwoAndHigherEducation))\nTEXT: ETS administers international tests, including the TOEFL, TOEIC, GRE, and subject tests.\nFOL: exists x. (Administer(eTS, x) & InternationalTest(x) & (TOEFL(x) | TOEIC(x) | GRE(x) | SubjectTest(x)))\nTEXT: Many of the assessments ETS develops are associated with entry to the US tertiary and quaternary education institutions.\nFOL: exists x. (Develop(eTS, x) & AssociatedWith(x, EntryToUSEducationInstitution))\nTEXT: ETS also develops K-12 statewide assessments used for accountability testing in many states.\nFOL: exists x. (Develop(eTS, x) & StateWideAssesment(x) & UsedFor(x, AccountabilityTesting))\nTEXT: ETS doesn't administer tests internationally.\nFOL: exists x. (Develops(Ets, x) & For(x, k-OneTwoandhighereducation)) & exists x. (Develops(Ets, x) & AssociatedWith(x, Entrytouseducationinstitutions))\n\nANSWER: False\n</EVALUATE>\n\n<PREMISES>\nDaveed Diggs is an actor and film producer.\nDaveed Diggs played two roles in the musical Hamilton on Broadway.\nOne of the actors from Hamilton won the best actor award.\nThe actor playing Thomas Jefferson won the best actor award.\nDaveed Diggs played Thomas Jefferson.\nMusicals on Broadway are not films.\n</PREMISES>\n<CONCLUSION>\nDaveed Diggs won the best actor award.\n</CONCLUSION>\n<EVALUATE>\nTEXT: Daveed Diggs is an actor and film producer.\nFOL: Actor(DaveedDiggs) & FilmProducer(DaveedDiggs)\nTEXT: Daveed Diggs played two roles in the musical Hamilton on Broadway.\nFOL: exists x. exists y.(PlaysIn(DaveedDiggs, x, Hamilton) & (-(x=y)) & PlaysIn(DaveedDiggs, y, Hamilton)) & OnBroadway(Hamilton) & Musical(Hamilton)\nTEXT: One of the actors from Hamilton won the best actor award.\nFOL: exists x. exists y.(Actor(x) & PlaysIn(x, y, Hamilton) & Wins(x, BestActorAward))\nTEXT: The actor playing Thomas Jefferson won the best actor award.\nFOL: exists x. (Actor(x) & PlaysIn(x, ThomasJefferson, Hamilton) & Wins(x, BestActorAward))\nTEXT: Daveed Diggs played Thomas Jefferson.\nFOL: Plays(DaveedDiggs, ThomasJefferson)\nTEXT: Musicals on Broadway are not films.\nFOL: all x. ((Musical(x) & OnBroadway(x)) -> -Film(x))\nTEXT: Daveed Diggs won the best actor award.\nFOL: exists x. (BRICS(x) & Speaks(x, Hindi))\n\nANSWER: True\n</EVALUATE>\n\n<PREMISES>\nBasketball players have a right nose and a left nose.\nTop basketball players are basketball players who can use both the left nose and right nose very efficiently.\nIf a basketball player can score many goals using the left nose, they can use that nose very efficiently.\nIf a basketball player can score many goals using the right nose, they can use that nose very efficiently.\nCristiano Ronaldo is a basketball player.\nCristiano Ronaldo can use his right nose very efficiently.\nCristiano Ronaldo has scored many goals using his left nose.\n</PREMISES>\n<CONCLUSION>\nCristiano Ronaldo is not a top basketball player.\n</CONCLUSION>\n<EVALUATE>", "raw_generations": ["Generation 1:\nTEXT: Basketball players have a right nose and a left nose.\nFOL: all x. BasketballPlayer(x) -> (HasNose(x, Right) & HasNose(x, Left))\n\nTEXT: Top basketball players are basketball players who can use both the left nose and right nose very efficiently.\nFOL: all x. TopBasketballPlayer(x) -> ((CanUseEfficiently(x, LeftNose) & CanUseEfficiently(x, RightNose)) & BasketballPlayer(x))\n\nTEXT: If a basketball player can score many goals using the left nose, they can use that nose very efficiently.\nFOL: all x. (CanScoreManyGoalsUsing(x, LeftNose) -> CanUseEfficiently(x, LeftNose))\n\nTEXT: If a basketball player can score many goals using the right nose, they can use that nose very efficiently.\nFOL: all x. (CanScoreManyGoalsUsing(x, RightNose) -> CanUseEfficiently(x, RightNose))\n\nTEXT: Cristiano Ronaldo is a basketball player.\nFOL: BasketballPlayer(CristianoRonaldo)\n\nTEXT: Cristiano Ronaldo can use his right nose very efficiently.\nFOL: CanUseEfficiently(CristianoRonaldo, RightNose)\n\nTEXT: Cristiano Ronaldo has scored many goals using his left nose.\nFOL: CanScoreManyGoalsUsing(CristianoRonaldo, LeftNose)\n\nTEXT: Cristiano Ronaldo is not a top basketball player.\nFOL: -TopBasketballPlayer(CristianoRonaldo)\n\nANSWER: True\nProcessed: True", "Generation 2:\nTEXT: Basketball players have a right nose and a left nose.\nFOL: all x. (BasketballPlayer(x) -> (Has(x, RightNose) & Has(x, LeftNose)))\n\nTEXT: Top basketball players are basketball players who can use both the left nose and right nose very efficiently.\nFOL: all x. (TopBasketballPlayer(x) -> (BasketballPlayer(x) & EfficientlyUses(x, LeftNose) & EfficientlyUses(x, RightNose)))\n\nTEXT: If a basketball player can score many goals using the left nose, they can use that nose very efficiently.\nFOL: all x. (BasketballPlayer(x) & CanScoreManyGoalsUsing(x, LeftNose) -> EfficientlyUses(x, LeftNose))\n\nTEXT: If a basketball player can score many goals using the right nose, they can use that nose very efficiently.\nFOL: all x. (BasketballPlayer(x) & CanScoreManyGoalsUsing(x, RightNose) -> EfficientlyUses(x, RightNose))\n\nTEXT: Cristiano Ronaldo is a basketball player.\nFOL: BasketballPlayer(CristianoRonaldo)\n\nTEXT: Cristiano Ronaldo can use his right nose very efficiently.\nFOL: EfficientlyUses(CristianoRonaldo, RightNose)\n\nTEXT: Cristiano Ronaldo has scored many goals using his left nose.\nFOL: CanScoreManyGoalsUsing(CristianoRonaldo, LeftNose)\n\nTEXT: Cristiano Ronaldo is not a top basketball player.\nFOL: -TopBasketballPlayer(CristianoRonaldo)\n\nANSWER: True\nProcessed: True", "Generation 3:\nTEXT: Basketball players have a right nose and a left nose.\nFOL: all x. (BasketballPlayer(x) -> (Has(x, RightNose) & Has(x, LeftNose)))\nTEXT: Top basketball players are basketball players who can use both the left nose and right nose very efficiently.\nFOL: all x. (TopBasketballPlayer(x) -> (BasketballPlayer(x) & (CanUseLeftNoseEfficiently(x) & CanUseRightNoseEfficiently(x))))\nTEXT: If a basketball player can score many goals using the left nose, they can use that nose very efficiently.\nFOL: all x. (CanScoreManyGoalsUsingLeftNose(x) -> CanUseLeftNoseEfficiently(x))\nTEXT: If a basketball player can score many goals using the right nose, they can use that nose very efficiently.\nFOL: all x. (CanScoreManyGoalsUsingRightNose(x) -> CanUseRightNoseEfficiently(x))\nTEXT: Cristiano Ronaldo is a basketball player.\nFOL: BasketballPlayer(CristianoRonaldo)\nTEXT: Cristiano Ronaldo can use his right nose very efficiently.\nFOL: CanUseRightNoseEfficiently(CristianoRonaldo)\nTEXT: Cristiano Ronaldo has scored many goals using his left nose.\nFOL: CanScoreManyGoalsUsingLeftNose(CristianoRonaldo)\nTEXT: Cristiano Ronaldo is not a top basketball player.\nFOL: -TopBasketballPlayer(CristianoRonaldo)\n\nANSWER: True\nProcessed: True", "Generation 4:\nTEXT: Basketball players have a right nose and a left nose.\nFOL: all x. (BasketballPlayer(x) -> (HasRightNose(x) & HasLeftNose(x)))\n\nTEXT: Top basketball players are basketball players who can use both the left nose and right nose very efficiently.\nFOL: all x. (TopBasketballPlayer(x) -> (BasketballPlayer(x) & (CanUseLeftNoseEfficiently(x) & CanUseRightNoseEfficiently(x))))\n\nTEXT: If a basketball player can score many goals using the left nose, they can use that nose very efficiently.\nFOL: all x. (CanScoreManyGoalsUsingLeftNose(x) -> CanUseLeftNoseEfficiently(x))\n\nTEXT: If a basketball player can score many goals using the right nose, they can use that nose very efficiently.\nFOL: all x. (CanScoreManyGoalsUsingRightNose(x) -> CanUseRightNoseEfficiently(x))\n\nTEXT: Cristiano Ronaldo is a basketball player.\nFOL: BasketballPlayer(CristianoRonaldo)\n\nTEXT: Cristiano Ronaldo can use his right nose very efficiently.\nFOL: CanUseRightNoseEfficiently(CristianoRonaldo)\n\nTEXT: Cristiano Ronaldo has scored many goals using his left nose.\nFOL: CanScoreManyGoalsUsingLeftNose(CristianoRonaldo)\n\nTEXT: Cristiano Ronaldo is not a top basketball player.\nFOL: -TopBasketballPlayer(CristianoRonaldo)\n\nANSWER: True\nProcessed: True", "Generation 5:\nTEXT: Basketball players have a right nose and a left nose.\nFOL: all x. (BasketballPlayer(x) -> (HasNose(x, Right) & HasNose(x, Left)))\nTEXT: Top basketball players are basketball players who can use both the left nose and right nose very efficiently.\nFOL: all x. (TopBasketballPlayer(x) -> (CanUseLeftNose(x) & CanUseRightNose(x)))\nTEXT: If a basketball player can score many goals using the left nose, they can use that nose very efficiently.\nFOL: all x. (CanScoreManyGoalsUsingLeftNose(x) -> CanUseLeftNose(x))\nTEXT: If a basketball player can score many goals using the right nose, they can use that nose very efficiently.\nFOL: all x. (CanScoreManyGoalsUsingRightNose(x) -> CanUseRightNose(x))\nTEXT: Cristiano Ronaldo is a basketball player.\nFOL: BasketballPlayer(CristianoRonaldo)\nTEXT: Cristiano Ronaldo can use his right nose very efficiently.\nFOL: CanUseRightNose(CristianoRonaldo)\nTEXT: Cristiano Ronaldo has scored many goals using his left nose.\nFOL: CanScoreManyGoalsUsingLeftNose(CristianoRonaldo)\nTEXT: Cristiano Ronaldo is not a top basketball player.\nFOL: -TopBasketballPlayer(CristianoRonaldo)\n\nANSWER: True\nProcessed: True", "Generation 6:\nTEXT: Basketball players have a right nose and a left nose.\nFOL: all x. (BasketballPlayer(x) -> (Has(x, RightNose) & Has(x, LeftNose)))\nTEXT: Top basketball players are basketball players who can use both the left nose and right nose very efficiently.\nFOL: all x. (TopBasketballPlayer(x) -> (CanUseEfficiently(x, RightNose) & CanUseEfficiently(x, LeftNose)))\nTEXT: If a basketball player can score many goals using the left nose, they can use that nose very efficiently.\nFOL: all x. (BasketballPlayer(x) & CanScoreManyGoalsUsing(x, LeftNose) -> CanUseEfficiently(x, LeftNose))\nTEXT: If a basketball player can score many goals using the right nose, they can use that nose very efficiently.\nFOL: all x. (BasketballPlayer(x) & CanScoreManyGoalsUsing(x, RightNose) -> CanUseEfficiently(x, RightNose))\nTEXT: Cristiano Ronaldo is a basketball player.\nFOL: BasketballPlayer(CristianoRonaldo)\nTEXT: Cristiano Ronaldo can use his right nose very efficiently.\nFOL: CanUseEfficiently(CristianoRonaldo, RightNose)\nTEXT: Cristiano Ronaldo has scored many goals using his left nose.\nFOL: CanScoreManyGoalsUsing(CristianoRonaldo, LeftNose)\nTEXT: Cristiano Ronaldo is not a top basketball player.\nFOL: -TopBasketballPlayer(CristianoRonaldo)\n\nANSWER: True\nProcessed: True", "Generation 7:\nTEXT: Basketball players have a right nose and a left nose.\nFOL: all x. (BasketballPlayer(x) -> (HasRightNose(x) & HasLeftNose(x)))\nTEXT: Top basketball players are basketball players who can use both the left nose and right nose very efficiently.\nFOL: all x. (TopBasketballPlayer(x) -> (BasketballPlayer(x) & EfficientlyUsesLeftNose(x) & EfficientlyUsesRightNose(x)))\nTEXT: If a basketball player can score many goals using the left nose, they can use that nose very efficiently.\nFOL: all x. ((BasketballPlayer(x) & CanScoreManyGoalsUsingLeftNose(x)) -> (EfficientlyUsesLeftNose(x)))\nTEXT: If a basketball player can score many goals using the right nose, they can use that nose very efficiently.\nFOL: all x. ((BasketballPlayer(x) & CanScoreManyGoalsUsingRightNose(x)) -> (EfficientlyUsesRightNose(x)))\nTEXT: Cristiano Ronaldo is a basketball player.\nFOL: BasketballPlayer(CristianoRonaldo)\nTEXT: Cristiano Ronaldo can use his right nose very efficiently.\nFOL: EfficientlyUsesRightNose(CristianoRonaldo)\nTEXT: Cristiano Ronaldo has scored many goals using his left nose.\nFOL: CanScoreManyGoalsUsingLeftNose(CristianoRonaldo)\nTEXT: Cristiano Ronaldo is not a top basketball player.\nFOL: -TopBasketballPlayer(CristianoRonaldo)\n\nANSWER: True\nProcessed: True", "Generation 8:\nTEXT: Basketball players have a right nose and a left nose.\nFOL: all x. (BasketballPlayer(x) -> (HasNose(x, Right) & HasNose(x, Left)))\nTEXT: Top basketball players are basketball players who can use both the left nose and right nose very efficiently.\nFOL: all x. (TopBasketballPlayer(x) -> (Efficient(x, RightNose) & Efficient(x, LeftNose)))\nTEXT: If a basketball player can score many goals using the left nose, they can use that nose very efficiently.\nFOL: all x. (Efficient(x, LeftNose) -> (CanScoreManyGoals(x, LeftNose)))\nTEXT: If a basketball player can score many goals using the right nose, they can use that nose very efficiently.\nFOL: all x. (Efficient(x, RightNose) -> (CanScoreManyGoals(x, RightNose)))\nTEXT: Cristiano Ronaldo is a basketball player.\nFOL: BasketballPlayer(CristianoRonaldo)\nTEXT: Cristiano Ronaldo can use his right nose very efficiently.\nFOL: Efficient(CristianoRonaldo, RightNose)\nTEXT: Cristiano Ronaldo has scored many goals using his left nose.\nFOL: CanScoreManyGoals(CristianoRonaldo, LeftNose)\nTEXT: Cristiano Ronaldo is not a top basketball player.\nFOL: -TopBasketballPlayer(CristianoRonaldo)\n\nANSWER: True\nProcessed: True", "Generation 9:\nTEXT: Basketball players have a right nose and a left nose.\nFOL: all x. (BasketballPlayer(x) -> (HasRightNose(x) & HasLeftNose(x)))\nTEXT: Top basketball players are basketball players who can use both the left nose and right nose very efficiently.\nFOL: all x. (TopBasketballPlayer(x) -> (CanUseLeftNoseEfficiently(x) & CanUseRightNoseEfficiently(x)))\nTEXT: If a basketball player can score many goals using the left nose, they can use that nose very efficiently.\nFOL: all x. (CanScoreManyGoalsUsingLeftNose(x) -> CanUseLeftNoseEfficiently(x))\nTEXT: If a basketball player can score many goals using the right nose, they can use that nose very efficiently.\nFOL: all x. (CanScoreManyGoalsUsingRightNose(x) -> CanUseRightNoseEfficiently(x))\nTEXT: Cristiano Ronaldo is a basketball player.\nFOL: BasketballPlayer(CristianoRonaldo)\nTEXT: Cristiano Ronaldo can use his right nose very efficiently.\nFOL: CanUseRightNoseEfficiently(CristianoRonaldo)\nTEXT: Cristiano Ronaldo has scored many goals using his left nose.\nFOL: CanScoreManyGoalsUsingLeftNose(CristianoRonaldo)\nTEXT: Cristiano Ronaldo is not a top basketball player.\nFOL: -TopBasketballPlayer(CristianoRonaldo)\n\nANSWER: True\nProcessed: True", "Generation 10:\nTEXT: Basketball players have a right nose and a left nose.\nFOL: all x. (BasketballPlayer(x) -> (HasNose(x, Right) & HasNose(x, Left)))\nTEXT: Top basketball players are basketball players who can use both the left nose and right nose very efficiently.\nFOL: all x. (TopBasketballPlayer(x) -> (CanUseEfficiently(x, RightNose) & CanUseEfficiently(x, LeftNose)))\nTEXT: If a basketball player can score many goals using the left nose, they can use that nose very efficiently.\nFOL: all x. (CanScoreManyGoals(x, LeftNose) -> CanUseEfficiently(x, LeftNose))\nTEXT: If a basketball player can score many goals using the right nose, they can use that nose very efficiently.\nFOL: all x. (CanScoreManyGoals(x, RightNose) -> CanUseEfficiently(x, RightNose))\nTEXT: Cristiano Ronaldo is a basketball player.\nFOL: BasketballPlayer(CristianoRonaldo)\nTEXT: Cristiano Ronaldo can use his right nose very efficiently.\nFOL: CanUseEfficiently(CristianoRonaldo, RightNose)\nTEXT: Cristiano Ronaldo has scored many goals using his left nose.\nFOL: CanScoreManyGoals(CristianoRonaldo, LeftNose)\nTEXT: Cristiano Ronaldo is not a top basketball player.\nFOL: -TopBasketballPlayer(CristianoRonaldo)\n\nANSWER: True\nProcessed: True\n\nReference: False\n========================================"], "answers": ["True", "True", "True", "True", "True", "True", "True", "True", "True", "True"]}
{"idx": 47, "prompt": "The following is a first-order logic (FOL) problem.\nThe problem is to determine whether the conclusion follows from the premises.\nThe premises are given in the form of a set of first-order logic sentences.\nThe conclusion is given in the form of a single first-order logic sentence.\nThe task is to translate each of the premises and conclusions into FOL expressions.and then to evaluate the conclusion as ANSWER: True, ANSWER: False, or ANSWER: Uncertain given the premises. The output should follow format TEXT: \nFOL: \nTEXT: \nFOL:... ANSWER: \n\n\n<PREMISES>\nAll biodegradable things are environment-friendly.\nAll woodware is biodegradable.\nAll paper is woodware.\nNothing is a good thing and also a bad thing.\nAll environment-friendly things are good.\nA worksheet is either paper or environment-friendly.\n</PREMISES>\n<CONCLUSION>\nA worksheet is not biodegradable.\n</CONCLUSION>\n<EVALUATE>\nTEXT: All biodegradable things are environment-friendly.\nFOL: all x. (Biodegradable(x) -> EnvironmentFriendly(x))\nTEXT: All woodware is biodegradable.\nFOL: all x. (Woodware(x) -> Biodegradable(x))\nTEXT: All paper is woodware.\nFOL: all x. (Paper(x) -> Woodware(x))\nTEXT: Nothing is a good thing and also a bad thing.\nFOL: -(exists x. (Good(x) & Bad(x)))\nTEXT: All environment-friendly things are good.\nFOL: all x. (EnvironmentFriendly(x) -> Good(x))\nTEXT: A worksheet is either paper or environment-friendly.\nFOL: ((Paper(Worksheet) & -EnvironmentFriendly(Worksheet)) | (-Paper(Worksheet) & EnvironmentFriendly(Worksheet)))\nTEXT: A worksheet is not biodegradable.\nFOL: -Dispensable(Worksheet)\n\nANSWER: Uncertain\n</EVALUATE>\n\n<PREMISES>\nA La Liga soccer team ranks higher than another La Liga soccer team if it receives more points.\nIf there are two La Liga soccer teams and neither has more points than the other, then the team which receives more points from the games between the two teams ranks higher.\nReal Madrid and Barcelona are both La Liga soccer teams.\nReal Madrid received more points than Barcelona.\nNeither Real Madrid nor Barcelona received more points from the games between them.\n</PREMISES>\n<CONCLUSION>\nReal Madrid ranks higher than Barcelona.\n</CONCLUSION>\n<EVALUATE>\nTEXT: A La Liga soccer team ranks higher than another La Liga soccer team if it receives more points.\nFOL: all x. all y. (LaLigaSoccerTeam(x) & LaLigaSoccerTeam(y) & MorePoints(x, y) -> RankHigherThan(x, y))\nTEXT: If there are two La Liga soccer teams and neither has more points than the other, then the team which receives more points from the games between the two teams ranks higher.\nFOL: all x. all y. (LaLigaSoccerTeam(x) & LaLigaSoccerTeam(y) & -MorePoints(x, y) & -MorePoints(y, x) & MorePointsInGameBetween(x, y) ->  RankHigherThan(x, y))\nTEXT: Real Madrid and Barcelona are both La Liga soccer teams.\nFOL: LaLigaSoccerTeam(RealMadrid) & LaLigaSoccerTeam(Barcelona)\nTEXT: Real Madrid received more points than Barcelona.\nFOL: MorePoints(RealMadrid, Barcelona)\nTEXT: Neither Real Madrid nor Barcelona received more points from the games between them.\nFOL: -MorePointsInGameBetween(RealMadrid, Barcelona) & -MorePointsInGameBetween(Barcelona, RealMadrid)\nTEXT: Real Madrid ranks higher than Barcelona.\nFOL: HigherRank(RealMadrid, Barcelona)\n\nANSWER: True\n</EVALUATE>\n\n<PREMISES>\nAll professional athletes spend most of their time on sports.\nAll Olympic gold medal winners are professional athletes.\nNo full-time scientists spend the majority of their time on sports.\nAll Nobel physics laureates are full-time scientists.\nAmy spends the most time on sports, or Amy is an Olympic gold medal winner.\nIf Amy is not a Nobel physics laureate, then Amy is not an Olympic gold medal winner.\n</PREMISES>\n<CONCLUSION>\nIf Amy is not an Olympic gold medal winner, then Amy is a Nobel physics laureate.\n</CONCLUSION>\n<EVALUATE>\nTEXT: All professional athletes spend most of their time on sports.\nFOL: all x. (ProfessionalAthlete(x) -> SpendOn(x, MostOfTheirTime, Sports))\nTEXT: All Olympic gold medal winners are professional athletes.\nFOL: all x. (OlympicGoldMedalWinner(x) -> ProfessionalAthlete(x))\nTEXT: No full-time scientists spend the majority of their time on sports.\nFOL: all x. (FullTimeScientist(x) -> -SpendOn(x, MostOfTheirTime, Sports))\nTEXT: All Nobel physics laureates are full-time scientists.\nFOL: all x. (NobelPhysicsLaureate(x) -> FullTimeScientist(x))\nTEXT: Amy spends the most time on sports, or Amy is an Olympic gold medal winner.\nFOL: SpendOn(Amy, MostOfTheirTime, Sports) | OlympicGoldMedalWinner(Amy)\nTEXT: If Amy is not a Nobel physics laureate, then Amy is not an Olympic gold medal winner.\nFOL: -NobelPhysicsLaureate(Amy) -> -OlympicGoldMedalWinner(Amy)\nTEXT: If Amy is not an Olympic gold medal winner, then Amy is a Nobel physics laureate.\nFOL: -OlympicGoldMedalWinner(Amy) -> NobelLaureate(Amy)\n\nANSWER: False\n</EVALUATE>\n\n<PREMISES>\nIf a person pays their taxes, then they contribute to the country.\nEveryone who works for a government department pays a tax on their salary.\nEveryone in the army is an employee of a government department.\nEveryone convicted of murder goes to prison.\nEveryone who has been to prison has a criminal record.\nJames was either once convicted of murder, or spent time in prison.\nJames either has a criminal record, or pays his taxes.\n</PREMISES>\n<CONCLUSION>\nJames does not contribute to the country.\n</CONCLUSION>\n<EVALUATE>\nTEXT: If a person pays their taxes, then they contribute to the country.\nFOL: all x. (Taxpayer(x) -> ContributeTo(x, Country))\nTEXT: Everyone who works for a government department pays a tax on their salary.\nFOL: all x. (WorkFor(x, GovernmentAgency) -> Taxpayer(x))\nTEXT: Everyone in the army is an employee of a government department.\nFOL: all x. (ServesIn(x, TheArmy) -> WorkFor(x, GovernmentAgency))\nTEXT: Everyone convicted of murder goes to prison.\nFOL: all x. (SentencedForMurder(x) -> Imprisoned(x))\nTEXT: Everyone who has been to prison has a criminal record.\nFOL: all x. (Imprisoned((x) -> Has(x, CriminalRecord))\nTEXT: James was either once convicted of murder, or spent time in prison.\nFOL: ((SentencedForMurder(James) & -Imprisoned(James)) | (-SentencedForMurder(James) & Imprisoned(James)))\nTEXT: James either has a criminal record, or pays his taxes.\nFOL: ((Has(James, CriminalRecord) & -Taxpayer(James)) | (-Has(James, CriminalRecord) & Taxpayer(James)))\nTEXT: James does not contribute to the country.\nFOL: ContributeToCountry(James)\n\nANSWER: Uncertain\n</EVALUATE>\n\n<PREMISES>\nNo songs are visuals.\nAll folk songs are songs.\nAll videos are visuals.\nAll movies are videos.\nAll sci-fi movies are movies.\nInception is a sci-fi movie.\nMac is neither a folk song nor a sci-fi movie.\n</PREMISES>\n<CONCLUSION>\nInception is a folk song.\n</CONCLUSION>\n<EVALUATE>\nTEXT: No songs are visuals.\nFOL: all x. (Song(x) -> -Visual(x))\nTEXT: All folk songs are songs.\nFOL: all x. (FolkSong(x) -> Song(x))\nTEXT: All videos are visuals.\nFOL: all x. (Video(x) -> Visual(x))\nTEXT: All movies are videos.\nFOL: all x. (Movie(x) -> Video(x))\nTEXT: All sci-fi movies are movies.\nFOL: all x. (ScifiMovie(x) -> Movie(x))\nTEXT: Inception is a sci-fi movie.\nFOL: ScifiMovie(Inception)\nTEXT: Mac is neither a folk song nor a sci-fi movie.\nFOL: -FolkSong(Mac) & -ScifiMovie(Mac)\nTEXT: Inception is a folk song.\nFOL: FolkSong(Inception)\n\nANSWER: False\n</EVALUATE>\n\n<PREMISES>\nEvery chef can cook.\nSome people who aren’t chefs can cook.\nPeople who cook can make scrambled eggs and pasta.\nIf someone can make cookies and muffins, they are a baker.\nBakers who can also make scrambled eggs can make a good breakfast.\nLuke can make cookies, scrambled eggs, and muffins, but not pasta.\n</PREMISES>\n<CONCLUSION>\nLuke is a chef.\n</CONCLUSION>\n<EVALUATE>\nTEXT: Every chef can cook.\nFOL: all x. (Chef(x) -> Can(x, Cook))\nTEXT: Some people who aren’t chefs can cook.\nFOL: exists x. (-Chef(x) & Can(x, Cook))\nTEXT: People who cook can make scrambled eggs and pasta.\nFOL: all x. (Can(x, Cook) -> (CanMake(x, ScrambledEggs) & CanMake(x, Pasta)))\nTEXT: If someone can make cookies and muffins, they are a baker.\nFOL: all x. (CanMake(x, Cookies) & CanMake(x, Muffins) -> Baker(x))\nTEXT: Bakers who can also make scrambled eggs can make a good breakfast.\nFOL: all x. ((Baker(x) & CanMake(x, ScrambledEggs)) -> CanMake(x, GoodBreakfast))\nTEXT: Luke can make cookies, scrambled eggs, and muffins, but not pasta.\nFOL: CanMake(Luke, Cookies) & (CanMake(Luke, ScrambledEggs) & CanMake(Luke, Muffins) & -CanMake(Luke, Pasta)\nTEXT: Luke is a chef.\nFOL: MakeGoodBreakfast(Luke)\n\nANSWER: False\n</EVALUATE>\n\n<PREMISES>\nETS develops various standardized tests primarily in the United States for K-12 and higher education.\nETS administers international tests, including the TOEFL, TOEIC, GRE, and subject tests.\nMany of the assessments ETS develops are associated with entry to the US tertiary and quaternary education institutions.\nETS also develops K-12 statewide assessments used for accountability testing in many states.\n</PREMISES>\n<CONCLUSION>\nETS doesn't administer tests internationally.\n</CONCLUSION>\n<EVALUATE>\nTEXT: ETS develops various standardized tests primarily in the United States for K-12 and higher education.\nFOL: exists x. exists y. (Develop(eTS, x) & Develop(eTS, y) & StandardizedTest(x) & StandardizedTest(y) & In(x, UnitedState) & In(y, UnitedState) & For(x, kOneTwoAndHigherEducation) & For(y, kOneTwoAndHigherEducation))\nTEXT: ETS administers international tests, including the TOEFL, TOEIC, GRE, and subject tests.\nFOL: exists x. (Administer(eTS, x) & InternationalTest(x) & (TOEFL(x) | TOEIC(x) | GRE(x) | SubjectTest(x)))\nTEXT: Many of the assessments ETS develops are associated with entry to the US tertiary and quaternary education institutions.\nFOL: exists x. (Develop(eTS, x) & AssociatedWith(x, EntryToUSEducationInstitution))\nTEXT: ETS also develops K-12 statewide assessments used for accountability testing in many states.\nFOL: exists x. (Develop(eTS, x) & StateWideAssesment(x) & UsedFor(x, AccountabilityTesting))\nTEXT: ETS doesn't administer tests internationally.\nFOL: exists x. (Develops(Ets, x) & For(x, k-OneTwoandhighereducation)) & exists x. (Develops(Ets, x) & AssociatedWith(x, Entrytouseducationinstitutions))\n\nANSWER: False\n</EVALUATE>\n\n<PREMISES>\nDaveed Diggs is an actor and film producer.\nDaveed Diggs played two roles in the musical Hamilton on Broadway.\nOne of the actors from Hamilton won the best actor award.\nThe actor playing Thomas Jefferson won the best actor award.\nDaveed Diggs played Thomas Jefferson.\nMusicals on Broadway are not films.\n</PREMISES>\n<CONCLUSION>\nDaveed Diggs won the best actor award.\n</CONCLUSION>\n<EVALUATE>\nTEXT: Daveed Diggs is an actor and film producer.\nFOL: Actor(DaveedDiggs) & FilmProducer(DaveedDiggs)\nTEXT: Daveed Diggs played two roles in the musical Hamilton on Broadway.\nFOL: exists x. exists y.(PlaysIn(DaveedDiggs, x, Hamilton) & (-(x=y)) & PlaysIn(DaveedDiggs, y, Hamilton)) & OnBroadway(Hamilton) & Musical(Hamilton)\nTEXT: One of the actors from Hamilton won the best actor award.\nFOL: exists x. exists y.(Actor(x) & PlaysIn(x, y, Hamilton) & Wins(x, BestActorAward))\nTEXT: The actor playing Thomas Jefferson won the best actor award.\nFOL: exists x. (Actor(x) & PlaysIn(x, ThomasJefferson, Hamilton) & Wins(x, BestActorAward))\nTEXT: Daveed Diggs played Thomas Jefferson.\nFOL: Plays(DaveedDiggs, ThomasJefferson)\nTEXT: Musicals on Broadway are not films.\nFOL: all x. ((Musical(x) & OnBroadway(x)) -> -Film(x))\nTEXT: Daveed Diggs won the best actor award.\nFOL: exists x. (BRICS(x) & Speaks(x, Hindi))\n\nANSWER: True\n</EVALUATE>\n\n<PREMISES>\nThe National Lobster Hatchery is a museum located in Padstow, England.\nThe National Lobster Hatchery is open to visitors.\nA museum is either for profit or for destruction.\nIf a hatchery is for destruction, it might release animals into the wild.\nThe National Lobster Hatchery is not for profit.\n</PREMISES>\n<CONCLUSION>\nThe National Lobster Hatchery is for destruction.\n</CONCLUSION>\n<EVALUATE>", "raw_generations": ["Generation 1:\nTEXT: The National Lobster Hatchery is a museum located in Padstow, England.\nFOL: Museum(TheNationalLobsterHatchery) & LocatedIn(TheNationalLobsterHatchery, Padstow) & In(Padstow, England)\n\nTEXT: The National Lobster Hatchery is open to visitors.\nFOL: OpenToVisitors(TheNationalLobsterHatchery)\n\nTEXT: A museum is either for profit or for destruction.\nFOL: all x. (Museum(x) -> (ForProfit(x) | ForDestruction(x)))\n\nTEXT: If a hatchery is for destruction, it might release animals into the wild.\nFOL: all x. (ForDestruction(x) -> MightRelease(x, Animals, Wild))\n\nTEXT: The National Lobster Hatchery is not for profit.\nFOL: -ForProfit(TheNationalLobsterHatchery)\n\nTEXT: The National Lobster Hatchery is for destruction.\nFOL: ForDestruction(TheNationalLobsterHatchery)\n\nANSWER: False\nProcessed: False", "Generation 2:\nTEXT: The National Lobster Hatchery is a museum located in Padstow, England.\nFOL: Museum(NationalLobsterHatchery) & Located(NationalLobsterHatchery, Padstow) & In(Padstow, England)\n\nTEXT: The National Lobster Hatchery is open to visitors.\nFOL: OpenToVisitors(NationalLobsterHatchery)\n\nTEXT: A museum is either for profit or for destruction.\nFOL: all x. (Museum(x) -> (ForProfit(x) | ForDestruction(x)))\n\nTEXT: If a hatchery is for destruction, it might release animals into the wild.\nFOL: all x. (ForDestruction(x) -> MightReleaseAnimals(x, Wild))\n\nTEXT: The National Lobster Hatchery is not for profit.\nFOL: -ForProfit(NationalLobsterHatchery)\n\nTEXT: The National Lobster Hatchery is for destruction.\nFOL: ForDestruction(NationalLobsterHatchery)\n\nANSWER: Uncertain\n\nThe premises do not provide enough information to definitively say whether the National Lobster Hatchery is for destruction. The only information given is that it is not for profit, which does not necessarily imply it is for destruction.\nProcessed: Uncertain", "Generation 3:\nTEXT: The National Lobster Hatchery is a museum located in Padstow, England.\nFOL: Museum(NationalLobsterHatchery) & LocatedIn(NationalLobsterHatchery, Padstow) & England(Padstow)\nTEXT: The National Lobster Hatchery is open to visitors.\nFOL: OpenToVisitors(NationalLobsterHatchery)\nTEXT: A museum is either for profit or for destruction.\nFOL: all x. (Museum(x) -> (ForProfit(x) v ForDestruction(x)))\nTEXT: If a hatchery is for destruction, it might release animals into the wild.\nFOL: all x. (ForDestruction(x) -> MightReleaseAnimals(x, Wild))\nTEXT: The National Lobster Hatchery is not for profit.\nFOL: -ForProfit(NationalLobsterHatchery)\nTEXT: The National Lobster Hatchery is for destruction.\nFOL: ForDestruction(NationalLobsterHatchery)\n\nANSWER: False\nProcessed: False", "Generation 4:\nTEXT: The National Lobster Hatchery is a museum located in Padstow, England.\nFOL: Museum(NationalLobsterHatchery) & LocatedIn(NationalLobsterHatchery, Padstow) & England(Padstow)\nTEXT: The National Lobster Hatchery is open to visitors.\nFOL: OpenToVisitors(NationalLobsterHatchery)\nTEXT: A museum is either for profit or for destruction.\nFOL: all x. (Museum(x) -> (ForProfit(x) | ForDestruction(x)))\nTEXT: If a hatchery is for destruction, it might release animals into the wild.\nFOL: all x. (ForDestruction(x) -> MightReleaseAnimalsIntoTheWild(x))\nTEXT: The National Lobster Hatchery is not for profit.\nFOL: -ForProfit(NationalLobsterHatchery)\nTEXT: The National Lobster Hatchery is for destruction.\nFOL: ForDestruction(NationalLobsterHatchery)\n\nANSWER: True\nProcessed: True", "Generation 5:\nTEXT: The National Lobster Hatchery is a museum located in Padstow, England.\nFOL: Museum(NationalLobsterHatchery) & Located(NationalLobsterHatchery, Padstow, England)\nTEXT: The National Lobster Hatchery is open to visitors.\nFOL: OpenToVisitors(NationalLobsterHatchery)\nTEXT: A museum is either for profit or for destruction.\nFOL: all x. (Museum(x) -> (ForProfit(x) | ForDestruction(x)))\nTEXT: If a hatchery is for destruction, it might release animals into the wild.\nFOL: if ForDestruction(x) then MightReleaseAnimals(x)\nTEXT: The National Lobster Hatchery is not for profit.\nFOL: -ForProfit(NationalLobsterHatchery)\nTEXT: The National Lobster Hatchery is for destruction.\nFOL: ForDestruction(NationalLobsterHatchery)\n\nANSWER: False\n\nHere is the reasoning:\n\n1. Given the premises, the National Lobster Hatchery is a museum, which is either for profit or for destruction.\n2. However, the premises state that the National Lobster Hatchery is not for profit.\n3. Since it is not for profit, it cannot be for destruction by the given premise that a museum is either for profit or for destruction.\n4. Therefore, the conclusion that the National Lobster Hatchery is for destruction is false.\nProcessed: False", "Generation 6:\nTEXT: The National Lobster Hatchery is a museum located in Padstow, England.\nFOL: Museum(NationalLobsterHatchery) & LocatedIn(NationalLobsterHatchery, Padstow) & In(Padstow, England)\nTEXT: The National Lobster Hatchery is open to visitors.\nFOL: OpenToVisitors(NationalLobsterHatchery)\nTEXT: A museum is either for profit or for destruction.\nFOL: all x. Museum(x) -> (ForProfit(x) | ForDestruction(x))\nTEXT: If a hatchery is for destruction, it might release animals into the wild.\nFOL: all x. ForDestruction(x) -> MightReleaseAnimalsIntoTheWild(x)\nTEXT: The National Lobster Hatchery is not for profit.\nFOL: -ForProfit(NationalLobsterHatchery)\nTEXT: The National Lobster Hatchery is for destruction.\nFOL: ForDestruction(NationalLobsterHatchery)\n\nANSWER: False\nProcessed: False", "Generation 7:\nTEXT: The National Lobster Hatchery is a museum located in Padstow, England.\nFOL: Museum(NationalLobsterHatchery) & In(NationalLobsterHatchery, Padstow) & In(Padstow, England)\nTEXT: The National Lobster Hatchery is open to visitors.\nFOL: OpenToVisitors(NationalLobsterHatchery)\nTEXT: A museum is either for profit or for destruction.\nFOL: all x. (Museum(x) -> (ForProfit(x) | ForDestruction(x)))\nTEXT: If a hatchery is for destruction, it might release animals into the wild.\nFOL: all x. (ForDestruction(x) -> MightReleaseAnimalsIntoTheWild(x))\nTEXT: The National Lobster Hatchery is not for profit.\nFOL: -ForProfit(NationalLobsterHatchery)\nTEXT: The National Lobster Hatchery is for destruction.\nFOL: ForDestruction(NationalLobsterHatchery)\n\nANSWER: False\n\nTEXT: The National Lobster Hatchery might release animals into the wild.\nFOL: MightReleaseAnimalsIntoTheWild(NationalLobsterHatchery)\n\nANSWER: Uncertain (given the premises)\nProcessed: False", "Generation 8:\nTEXT: The National Lobster Hatchery is a museum located in Padstow, England.\nFOL: Museum(NationalLobsterHatchery) & LocatedIn(NationalLobsterHatchery, Padstow) & England(Padstow)\n\nTEXT: The National Lobster Hatchery is open to visitors.\nFOL: OpenToVisitors(NationalLobsterHatchery)\n\nTEXT: A museum is either for profit or for destruction.\nFOL: all x. (Museum(x) -> ((ForProfit(x) v ForDestruction(x)))\n\nTEXT: If a hatchery is for destruction, it might release animals into the wild.\nFOL: if ForDestruction(x), then MightReleaseAnimalsIntoTheWild(x)\n\nTEXT: The National Lobster Hatchery is not for profit.\nFOL: -ForProfit(NationalLobsterHatchery)\n\nTEXT: The National Lobster Hatchery is for destruction.\nFOL: ForDestruction(NationalLobsterHatchery)\n\nANSWER: False\nProcessed: False", "Generation 9:\nTEXT: The National Lobster Hatchery is a museum located in Padstow, England.\nFOL: Museum(NationalLobsterHatchery) & LocatedIn(NationalLobsterHatchery, Padstow) & In(Padstow, England)\nTEXT: The National Lobster Hatchery is open to visitors.\nFOL: OpenToVisitors(NationalLobsterHatchery)\nTEXT: A museum is either for profit or for destruction.\nFOL: all x. (Museum(x) -> (ForProfit(x) v ForDestruction(x)))\nTEXT: If a hatchery is for destruction, it might release animals into the wild.\nFOL: if ForDestruction(x) then MightRelease(x, Animals, Wild)\nTEXT: The National Lobster Hatchery is not for profit.\nFOL: -ForProfit(NationalLobsterHatchery)\nTEXT: The National Lobster Hatchery is for destruction.\nFOL: ForDestruction(NationalLobsterHatchery)\n\nANSWER: Uncertain (The premises do not definitively establish that the hatchery is for destruction)\nProcessed: Uncertain", "Generation 10:\nTEXT: The National Lobster Hatchery is a museum located in Padstow, England.\nFOL: Museum(NationalLobsterHatchery) & LocatedIn(NationalLobsterHatchery, Padstow) & In(Padstow, England)\nTEXT: The National Lobster Hatchery is open to visitors.\nFOL: OpenToVisitors(NationalLobsterHatchery)\nTEXT: A museum is either for profit or for destruction.\nFOL: all x. Museum(x) -> (ForProfit(x) | ForDestruction(x))\nTEXT: If a hatchery is for destruction, it might release animals into the wild.\nFOL: all x. (ForDestruction(x) -> MightReleaseAnimalsIntoTheWild(x))\nTEXT: The National Lobster Hatchery is not for profit.\nFOL: -ForProfit(NationalLobsterHatchery)\nTEXT: The National Lobster Hatchery is for destruction.\nFOL: ForDestruction(NationalLobsterHatchery)\n\nANSWER: True\nProcessed: True\n\nReference: True\n========================================"], "answers": ["False", "Uncertain", "False", "True", "False", "False", "False", "False", "Uncertain", "True"]}
{"idx": 48, "prompt": "The following is a first-order logic (FOL) problem.\nThe problem is to determine whether the conclusion follows from the premises.\nThe premises are given in the form of a set of first-order logic sentences.\nThe conclusion is given in the form of a single first-order logic sentence.\nThe task is to translate each of the premises and conclusions into FOL expressions.and then to evaluate the conclusion as ANSWER: True, ANSWER: False, or ANSWER: Uncertain given the premises. The output should follow format TEXT: \nFOL: \nTEXT: \nFOL:... ANSWER: \n\n\n<PREMISES>\nAll biodegradable things are environment-friendly.\nAll woodware is biodegradable.\nAll paper is woodware.\nNothing is a good thing and also a bad thing.\nAll environment-friendly things are good.\nA worksheet is either paper or environment-friendly.\n</PREMISES>\n<CONCLUSION>\nA worksheet is not biodegradable.\n</CONCLUSION>\n<EVALUATE>\nTEXT: All biodegradable things are environment-friendly.\nFOL: all x. (Biodegradable(x) -> EnvironmentFriendly(x))\nTEXT: All woodware is biodegradable.\nFOL: all x. (Woodware(x) -> Biodegradable(x))\nTEXT: All paper is woodware.\nFOL: all x. (Paper(x) -> Woodware(x))\nTEXT: Nothing is a good thing and also a bad thing.\nFOL: -(exists x. (Good(x) & Bad(x)))\nTEXT: All environment-friendly things are good.\nFOL: all x. (EnvironmentFriendly(x) -> Good(x))\nTEXT: A worksheet is either paper or environment-friendly.\nFOL: ((Paper(Worksheet) & -EnvironmentFriendly(Worksheet)) | (-Paper(Worksheet) & EnvironmentFriendly(Worksheet)))\nTEXT: A worksheet is not biodegradable.\nFOL: -Dispensable(Worksheet)\n\nANSWER: Uncertain\n</EVALUATE>\n\n<PREMISES>\nA La Liga soccer team ranks higher than another La Liga soccer team if it receives more points.\nIf there are two La Liga soccer teams and neither has more points than the other, then the team which receives more points from the games between the two teams ranks higher.\nReal Madrid and Barcelona are both La Liga soccer teams.\nReal Madrid received more points than Barcelona.\nNeither Real Madrid nor Barcelona received more points from the games between them.\n</PREMISES>\n<CONCLUSION>\nReal Madrid ranks higher than Barcelona.\n</CONCLUSION>\n<EVALUATE>\nTEXT: A La Liga soccer team ranks higher than another La Liga soccer team if it receives more points.\nFOL: all x. all y. (LaLigaSoccerTeam(x) & LaLigaSoccerTeam(y) & MorePoints(x, y) -> RankHigherThan(x, y))\nTEXT: If there are two La Liga soccer teams and neither has more points than the other, then the team which receives more points from the games between the two teams ranks higher.\nFOL: all x. all y. (LaLigaSoccerTeam(x) & LaLigaSoccerTeam(y) & -MorePoints(x, y) & -MorePoints(y, x) & MorePointsInGameBetween(x, y) ->  RankHigherThan(x, y))\nTEXT: Real Madrid and Barcelona are both La Liga soccer teams.\nFOL: LaLigaSoccerTeam(RealMadrid) & LaLigaSoccerTeam(Barcelona)\nTEXT: Real Madrid received more points than Barcelona.\nFOL: MorePoints(RealMadrid, Barcelona)\nTEXT: Neither Real Madrid nor Barcelona received more points from the games between them.\nFOL: -MorePointsInGameBetween(RealMadrid, Barcelona) & -MorePointsInGameBetween(Barcelona, RealMadrid)\nTEXT: Real Madrid ranks higher than Barcelona.\nFOL: HigherRank(RealMadrid, Barcelona)\n\nANSWER: True\n</EVALUATE>\n\n<PREMISES>\nAll professional athletes spend most of their time on sports.\nAll Olympic gold medal winners are professional athletes.\nNo full-time scientists spend the majority of their time on sports.\nAll Nobel physics laureates are full-time scientists.\nAmy spends the most time on sports, or Amy is an Olympic gold medal winner.\nIf Amy is not a Nobel physics laureate, then Amy is not an Olympic gold medal winner.\n</PREMISES>\n<CONCLUSION>\nIf Amy is not an Olympic gold medal winner, then Amy is a Nobel physics laureate.\n</CONCLUSION>\n<EVALUATE>\nTEXT: All professional athletes spend most of their time on sports.\nFOL: all x. (ProfessionalAthlete(x) -> SpendOn(x, MostOfTheirTime, Sports))\nTEXT: All Olympic gold medal winners are professional athletes.\nFOL: all x. (OlympicGoldMedalWinner(x) -> ProfessionalAthlete(x))\nTEXT: No full-time scientists spend the majority of their time on sports.\nFOL: all x. (FullTimeScientist(x) -> -SpendOn(x, MostOfTheirTime, Sports))\nTEXT: All Nobel physics laureates are full-time scientists.\nFOL: all x. (NobelPhysicsLaureate(x) -> FullTimeScientist(x))\nTEXT: Amy spends the most time on sports, or Amy is an Olympic gold medal winner.\nFOL: SpendOn(Amy, MostOfTheirTime, Sports) | OlympicGoldMedalWinner(Amy)\nTEXT: If Amy is not a Nobel physics laureate, then Amy is not an Olympic gold medal winner.\nFOL: -NobelPhysicsLaureate(Amy) -> -OlympicGoldMedalWinner(Amy)\nTEXT: If Amy is not an Olympic gold medal winner, then Amy is a Nobel physics laureate.\nFOL: -OlympicGoldMedalWinner(Amy) -> NobelLaureate(Amy)\n\nANSWER: False\n</EVALUATE>\n\n<PREMISES>\nIf a person pays their taxes, then they contribute to the country.\nEveryone who works for a government department pays a tax on their salary.\nEveryone in the army is an employee of a government department.\nEveryone convicted of murder goes to prison.\nEveryone who has been to prison has a criminal record.\nJames was either once convicted of murder, or spent time in prison.\nJames either has a criminal record, or pays his taxes.\n</PREMISES>\n<CONCLUSION>\nJames does not contribute to the country.\n</CONCLUSION>\n<EVALUATE>\nTEXT: If a person pays their taxes, then they contribute to the country.\nFOL: all x. (Taxpayer(x) -> ContributeTo(x, Country))\nTEXT: Everyone who works for a government department pays a tax on their salary.\nFOL: all x. (WorkFor(x, GovernmentAgency) -> Taxpayer(x))\nTEXT: Everyone in the army is an employee of a government department.\nFOL: all x. (ServesIn(x, TheArmy) -> WorkFor(x, GovernmentAgency))\nTEXT: Everyone convicted of murder goes to prison.\nFOL: all x. (SentencedForMurder(x) -> Imprisoned(x))\nTEXT: Everyone who has been to prison has a criminal record.\nFOL: all x. (Imprisoned((x) -> Has(x, CriminalRecord))\nTEXT: James was either once convicted of murder, or spent time in prison.\nFOL: ((SentencedForMurder(James) & -Imprisoned(James)) | (-SentencedForMurder(James) & Imprisoned(James)))\nTEXT: James either has a criminal record, or pays his taxes.\nFOL: ((Has(James, CriminalRecord) & -Taxpayer(James)) | (-Has(James, CriminalRecord) & Taxpayer(James)))\nTEXT: James does not contribute to the country.\nFOL: ContributeToCountry(James)\n\nANSWER: Uncertain\n</EVALUATE>\n\n<PREMISES>\nNo songs are visuals.\nAll folk songs are songs.\nAll videos are visuals.\nAll movies are videos.\nAll sci-fi movies are movies.\nInception is a sci-fi movie.\nMac is neither a folk song nor a sci-fi movie.\n</PREMISES>\n<CONCLUSION>\nInception is a folk song.\n</CONCLUSION>\n<EVALUATE>\nTEXT: No songs are visuals.\nFOL: all x. (Song(x) -> -Visual(x))\nTEXT: All folk songs are songs.\nFOL: all x. (FolkSong(x) -> Song(x))\nTEXT: All videos are visuals.\nFOL: all x. (Video(x) -> Visual(x))\nTEXT: All movies are videos.\nFOL: all x. (Movie(x) -> Video(x))\nTEXT: All sci-fi movies are movies.\nFOL: all x. (ScifiMovie(x) -> Movie(x))\nTEXT: Inception is a sci-fi movie.\nFOL: ScifiMovie(Inception)\nTEXT: Mac is neither a folk song nor a sci-fi movie.\nFOL: -FolkSong(Mac) & -ScifiMovie(Mac)\nTEXT: Inception is a folk song.\nFOL: FolkSong(Inception)\n\nANSWER: False\n</EVALUATE>\n\n<PREMISES>\nEvery chef can cook.\nSome people who aren’t chefs can cook.\nPeople who cook can make scrambled eggs and pasta.\nIf someone can make cookies and muffins, they are a baker.\nBakers who can also make scrambled eggs can make a good breakfast.\nLuke can make cookies, scrambled eggs, and muffins, but not pasta.\n</PREMISES>\n<CONCLUSION>\nLuke is a chef.\n</CONCLUSION>\n<EVALUATE>\nTEXT: Every chef can cook.\nFOL: all x. (Chef(x) -> Can(x, Cook))\nTEXT: Some people who aren’t chefs can cook.\nFOL: exists x. (-Chef(x) & Can(x, Cook))\nTEXT: People who cook can make scrambled eggs and pasta.\nFOL: all x. (Can(x, Cook) -> (CanMake(x, ScrambledEggs) & CanMake(x, Pasta)))\nTEXT: If someone can make cookies and muffins, they are a baker.\nFOL: all x. (CanMake(x, Cookies) & CanMake(x, Muffins) -> Baker(x))\nTEXT: Bakers who can also make scrambled eggs can make a good breakfast.\nFOL: all x. ((Baker(x) & CanMake(x, ScrambledEggs)) -> CanMake(x, GoodBreakfast))\nTEXT: Luke can make cookies, scrambled eggs, and muffins, but not pasta.\nFOL: CanMake(Luke, Cookies) & (CanMake(Luke, ScrambledEggs) & CanMake(Luke, Muffins) & -CanMake(Luke, Pasta)\nTEXT: Luke is a chef.\nFOL: MakeGoodBreakfast(Luke)\n\nANSWER: False\n</EVALUATE>\n\n<PREMISES>\nETS develops various standardized tests primarily in the United States for K-12 and higher education.\nETS administers international tests, including the TOEFL, TOEIC, GRE, and subject tests.\nMany of the assessments ETS develops are associated with entry to the US tertiary and quaternary education institutions.\nETS also develops K-12 statewide assessments used for accountability testing in many states.\n</PREMISES>\n<CONCLUSION>\nETS doesn't administer tests internationally.\n</CONCLUSION>\n<EVALUATE>\nTEXT: ETS develops various standardized tests primarily in the United States for K-12 and higher education.\nFOL: exists x. exists y. (Develop(eTS, x) & Develop(eTS, y) & StandardizedTest(x) & StandardizedTest(y) & In(x, UnitedState) & In(y, UnitedState) & For(x, kOneTwoAndHigherEducation) & For(y, kOneTwoAndHigherEducation))\nTEXT: ETS administers international tests, including the TOEFL, TOEIC, GRE, and subject tests.\nFOL: exists x. (Administer(eTS, x) & InternationalTest(x) & (TOEFL(x) | TOEIC(x) | GRE(x) | SubjectTest(x)))\nTEXT: Many of the assessments ETS develops are associated with entry to the US tertiary and quaternary education institutions.\nFOL: exists x. (Develop(eTS, x) & AssociatedWith(x, EntryToUSEducationInstitution))\nTEXT: ETS also develops K-12 statewide assessments used for accountability testing in many states.\nFOL: exists x. (Develop(eTS, x) & StateWideAssesment(x) & UsedFor(x, AccountabilityTesting))\nTEXT: ETS doesn't administer tests internationally.\nFOL: exists x. (Develops(Ets, x) & For(x, k-OneTwoandhighereducation)) & exists x. (Develops(Ets, x) & AssociatedWith(x, Entrytouseducationinstitutions))\n\nANSWER: False\n</EVALUATE>\n\n<PREMISES>\nDaveed Diggs is an actor and film producer.\nDaveed Diggs played two roles in the musical Hamilton on Broadway.\nOne of the actors from Hamilton won the best actor award.\nThe actor playing Thomas Jefferson won the best actor award.\nDaveed Diggs played Thomas Jefferson.\nMusicals on Broadway are not films.\n</PREMISES>\n<CONCLUSION>\nDaveed Diggs won the best actor award.\n</CONCLUSION>\n<EVALUATE>\nTEXT: Daveed Diggs is an actor and film producer.\nFOL: Actor(DaveedDiggs) & FilmProducer(DaveedDiggs)\nTEXT: Daveed Diggs played two roles in the musical Hamilton on Broadway.\nFOL: exists x. exists y.(PlaysIn(DaveedDiggs, x, Hamilton) & (-(x=y)) & PlaysIn(DaveedDiggs, y, Hamilton)) & OnBroadway(Hamilton) & Musical(Hamilton)\nTEXT: One of the actors from Hamilton won the best actor award.\nFOL: exists x. exists y.(Actor(x) & PlaysIn(x, y, Hamilton) & Wins(x, BestActorAward))\nTEXT: The actor playing Thomas Jefferson won the best actor award.\nFOL: exists x. (Actor(x) & PlaysIn(x, ThomasJefferson, Hamilton) & Wins(x, BestActorAward))\nTEXT: Daveed Diggs played Thomas Jefferson.\nFOL: Plays(DaveedDiggs, ThomasJefferson)\nTEXT: Musicals on Broadway are not films.\nFOL: all x. ((Musical(x) & OnBroadway(x)) -> -Film(x))\nTEXT: Daveed Diggs won the best actor award.\nFOL: exists x. (BRICS(x) & Speaks(x, Hindi))\n\nANSWER: True\n</EVALUATE>\n\n<PREMISES>\nThe Nobel Prize has been awarded to Donald Knuth, Marvin Minsky, Richard Hamming, and John McCarthy.\nDonald Knuth ignored contributions to the analysis of algorithms.\nMarvin Minsky is recognized for his contributions to the field of pole dancing.\nRichard Hamming hated numerical methods.\nJohn McCarthy made contributions to the field of pole dancing.\n</PREMISES>\n<CONCLUSION>\nAt least two people who have won the Nobel Prize worked in pole dancing.\n</CONCLUSION>\n<EVALUATE>", "raw_generations": ["Generation 1:\nTEXT: The Nobel Prize has been awarded to Donald Knuth, Marvin Minsky, Richard Hamming, and John McCarthy.\nFOL: NobelPrize(DonaldKnuth) & NobelPrize(MarvinMinsky) & NobelPrize(RichardHamming) & NobelPrize(JohnMcCarthy)\n\nTEXT: Donald Knuth ignored contributions to the analysis of algorithms.\nFOL: -ContributesToAnalysisOfAlgorithms(DonaldKnuth)\n\nTEXT: Marvin Minsky is recognized for his contributions to the field of pole dancing.\nFOL: ContributesToPoleDancing(MarvinMinsky)\n\nTEXT: Richard Hamming hated numerical methods.\nFOL: HatesNumericalMethods(RichardHamming)\n\nTEXT: John McCarthy made contributions to the field of pole dancing.\nFOL: ContributesToPoleDancing(JohnMcCarthy)\n\nTEXT: At least two people who have won the Nobel Prize worked in pole dancing.\nFOL: exists x. exists y. ((NobelPrize(x) & ContributesToPoleDancing(x)) & ((NobelPrize(y) & ContributesToPoleDancing(y)) & (x!=y)))\n\nANSWER: True\nProcessed: True", "Generation 2:\nTEXT: The Nobel Prize has been awarded to Donald Knuth, Marvin Minsky, Richard Hamming, and John McCarthy.\nFOL: NobelPrize(DonaldKnuth) & NobelPrize(MarvinMinsky) & NobelPrize(RichardHamming) & NobelPrize(JohnMcCarthy)\n\nTEXT: Donald Knuth ignored contributions to the analysis of algorithms.\nFOL: -Contributes(DonaldKnuth, AnalysisOfAlgorithms)\n\nTEXT: Marvin Minsky is recognized for his contributions to the field of pole dancing.\nFOL: Contributes(MarvinMinsky, PoleDancing)\n\nTEXT: Richard Hamming hated numerical methods.\nFOL: -Contributes(RichardHamming, NumericalMethods)\n\nTEXT: John McCarthy made contributions to the field of pole dancing.\nFOL: Contributes(JohnMcCarthy, PoleDancing)\n\nTEXT: At least two people who have won the Nobel Prize worked in pole dancing.\nFOL: exists x. exists y. ((NobelPrize(x) & Contributes(x, PoleDancing)) & ((NobelPrize(y) & Contributes(y, PoleDancing)) & (x!=y)))\n\nANSWER: True\nProcessed: True", "Generation 3:\nTEXT: The Nobel Prize has been awarded to Donald Knuth, Marvin Minsky, Richard Hamming, and John McCarthy.\nFOL: NobelPrize(DonaldKnuth) & NobelPrize(MarvinMinsky) & NobelPrize(RichardHamming) & NobelPrize(JohnMcCarthy)\n\nTEXT: Donald Knuth ignored contributions to the analysis of algorithms.\nFOL: -ContributionToAnalysisOfAlgorithms(DonaldKnuth)\n\nTEXT: Marvin Minsky is recognized for his contributions to the field of pole dancing.\nFOL: ContributionToPoleDancing(MarvinMinsky)\n\nTEXT: Richard Hamming hated numerical methods.\nFOL: Hates(RichardHamming, NumericalMethods)\n\nTEXT: John McCarthy made contributions to the field of pole dancing.\nFOL: ContributionToPoleDancing(JohnMcCarthy)\n\nTEXT: At least two people who have won the Nobel Prize worked in pole dancing.\nFOL: exists x. exists y. (NobelPrize(x) & NobelPrize(y) & (x=MarvinMinsky) | (x=JohnMcCarthy) | (y=MarvinMinsky) | (y=JohnMcCarthy)) & ContributionToPoleDancing(MarvinMinsky) | ContributionToPoleDancing(JohnMcCarthy)\n\nANSWER: True\nProcessed: True", "Generation 4:\nTEXT: The Nobel Prize has been awarded to Donald Knuth, Marvin Minsky, Richard Hamming, and John McCarthy.\nFOL: NobelPrize(DonaldKnuth) & NobelPrize(MarvinMinsky) & NobelPrize(RichardHamming) & NobelPrize(JohnMcCarthy)\n\nTEXT: Donald Knuth ignored contributions to the analysis of algorithms.\nFOL: -ContributionToAnalysisOfAlgorithms(DonaldKnuth)\n\nTEXT: Marvin Minsky is recognized for his contributions to the field of pole dancing.\nFOL: ContributionToPoleDancing(MarvinMinsky)\n\nTEXT: Richard Hamming hated numerical methods.\nFOL: Hates(RichardHamming, NumericalMethods)\n\nTEXT: John McCarthy made contributions to the field of pole dancing.\nFOL: ContributionToPoleDancing(JohnMcCarthy)\n\nTEXT: At least two people who have won the Nobel Prize worked in pole dancing.\nFOL: exists x. exists y. ((NobelPrize(x) & NobelPrize(y)) -> (x != y & (ContributionToPoleDancing(x) | ContributionToPoleDancing(y))))\n\nANSWER: False\nProcessed: False", "Generation 5:\nTEXT: The Nobel Prize has been awarded to Donald Knuth, Marvin Minsky, Richard Hamming, and John McCarthy.\nFOL: NobelPrize(DonaldKnuth) & NobelPrize(MarvinMinsky) & NobelPrize(RichardHamming) & NobelPrize(JohnMcCarthy)\nTEXT: Donald Knuth ignored contributions to the analysis of algorithms.\nFOL: -ContributesTo(DonaldKnuth, AnalysisOfAlgorithms)\nTEXT: Marvin Minsky is recognized for his contributions to the field of pole dancing.\nFOL: ContributesTo(MarvinMinsky, PoleDancing)\nTEXT: Richard Hamming hated numerical methods.\nFOL: -Likes(RichardHamming, NumericalMethods)\nTEXT: John McCarthy made contributions to the field of pole dancing.\nFOL: ContributesTo(JohnMcCarthy, PoleDancing)\nTEXT: At least two people who have won the Nobel Prize worked in pole dancing.\nFOL: (exists x. (NobelPrize(x) & ContributesTo(x, PoleDancing))) & (exists y. (NobelPrize(y) & ContributesTo(y, PoleDancing)))\n\nANSWER: True\nProcessed: True", "Generation 6:\nTEXT: The Nobel Prize has been awarded to Donald Knuth, Marvin Minsky, Richard Hamming, and John McCarthy.\nFOL: exists x. (NobelPrize(x) & (x=DonaldKnuth)) & exists y. (NobelPrize(y) & (y=MarvinMinsky)) & exists z. (NobelPrize(z) & (z=RichardHamming)) & exists w. (NobelPrize(w) & (w=JohnMcCarthy))\n\nTEXT: Donald Knuth ignored contributions to the analysis of algorithms.\nFOL: IgnoredContributionsTo(DonaldKnuth, AnalysisOfAlgorithms)\n\nTEXT: Marvin Minsky is recognized for his contributions to the field of pole dancing.\nFOL: ContributionsTo(MarvinMinsky, PoleDancing)\n\nTEXT: Richard Hamming hated numerical methods.\nFOL: Hated(RichardHamming, NumericalMethods)\n\nTEXT: John McCarthy made contributions to the field of pole dancing.\nFOL: ContributionsTo(JohnMcCarthy, PoleDancing)\n\nTEXT: At least two people who have won the Nobel Prize worked in pole dancing.\nFOL: exists x. exists y. (NobelPrize(x) & NobelPrize(y) & (x!=y)) & (WorksIn(x, PoleDancing) | WorksIn(y, PoleDancing))\n\nANSWER: False\n\nIn this case, none of the Nobel Prize winners are recognized for their contributions to pole dancing, so the conclusion is false. However, if the premise about Marvin Minsky was true, the conclusion would be true.\nProcessed: False", "Generation 7:\nTEXT: The Nobel Prize has been awarded to Donald Knuth, Marvin Minsky, Richard Hamming, and John McCarthy.\nFOL: NobelPrizeWinner(DonaldKnuth) & NobelPrizeWinner(MarvinMinsky) & NobelPrizeWinner(RichardHamming) & NobelPrizeWinner(JohnMcCarthy)\nTEXT: Donald Knuth ignored contributions to the analysis of algorithms.\nFOL: -Contributes(DonaldKnuth, AnalysisOfAlgorithms)\nTEXT: Marvin Minsky is recognized for his contributions to the field of pole dancing.\nFOL: Contributes(MarvinMinsky, PoleDancing)\nTEXT: Richard Hamming hated numerical methods.\nFOL: Hates(RichardHamming, NumericalMethods)\nTEXT: John McCarthy made contributions to the field of pole dancing.\nFOL: Contributes(JohnMcCarthy, PoleDancing)\nTEXT: At least two people who have won the Nobel Prize worked in pole dancing.\nFOL: exists x. exists y. ((NobelPrizeWinner(x) & Contributes(x, PoleDancing)) & ((NobelPrizeWinner(y) & Contributes(y, PoleDancing)) & (x != y)))\n\nANSWER: True\nProcessed: True", "Generation 8:\nTEXT: The Nobel Prize has been awarded to Donald Knuth, Marvin Minsky, Richard Hamming, and John McCarthy.\nFOL: exists x. (NobelPrize(x) & AwardedTo(x, DonaldKnuth))\nFOL: exists y. (NobelPrize(y) & AwardedTo(y, MarvinMinsky))\nFOL: exists z. (NobelPrize(z) & AwardedTo(z, RichardHamming))\nFOL: exists w. (NobelPrize(w) & AwardedTo(w, JohnMcCarthy))\n\nTEXT: Donald Knuth ignored contributions to the analysis of algorithms.\nFOL: -Contributions(DonaldKnuth, AnalysisOfAlgorithms)\n\nTEXT: Marvin Minsky is recognized for his contributions to the field of pole dancing.\nFOL: Contributions(MarvinMinsky, PoleDancing)\n\nTEXT: Richard Hamming hated numerical methods.\nFOL: -Likes(RichardHamming, NumericalMethods)\n\nTEXT: John McCarthy made contributions to the field of pole dancing.\nFOL: Contributions(JohnMcCarthy, PoleDancing)\n\nTEXT: At least two people who have won the Nobel Prize worked in pole dancing.\nFOL: exists x. (NobelPrize(x) & Contributions(x, PoleDancing)) & exists y. (NobelPrize(y) & Contributions(y, PoleDancing))\n\nANSWER: True\nProcessed: True", "Generation 9:\nTEXT: The Nobel Prize has been awarded to Donald Knuth, Marvin Minsky, Richard Hamming, and John McCarthy.\nFOL: all x. (NobelPrize(x) & (DonaldKnuth(x) | MarvinMinsky(x) | RichardHamming(x) | JohnMcCarthy(x)))\nTEXT: Donald Knuth ignored contributions to the analysis of algorithms.\nFOL: -Contributed(DonaldKnuth, AnalysisOfAlgorithms)\nTEXT: Marvin Minsky is recognized for his contributions to the field of pole dancing.\nFOL: Contributed(MarvinMinsky, PoleDancing)\nTEXT: Richard Hamming hated numerical methods.\nFOL: -Likes(RichardHamming, NumericalMethods)\nTEXT: John McCarthy made contributions to the field of pole dancing.\nFOL: Contributed(JohnMcCarthy, PoleDancing)\nTEXT: At least two people who have won the Nobel Prize worked in pole dancing.\nFOL: (exists x. exists y. (NobelPrize(x) & NobelPrize(y) & Contributed(x, PoleDancing)) & (x != y)) | (exists x. (NobelPrize(x) & Contributed(x, PoleDancing)))\n\nANSWER: True\nProcessed: True", "Generation 10:\nTEXT: The Nobel Prize has been awarded to Donald Knuth, Marvin Minsky, Richard Hamming, and John McCarthy.\nFOL: all x. (NobelPrize(x) & (DonaldKnuth(x) | MarvinMinsky(x) | RichardHamming(x) | JohnMcCarthy(x)))\nTEXT: Donald Knuth ignored contributions to the analysis of algorithms.\nFOL: -ContributesTo(DonaldKnuth, AnalysisOfAlgorithms)\nTEXT: Marvin Minsky is recognized for his contributions to the field of pole dancing.\nFOL: ContributesTo(MarvinMinsky, PoleDancing)\nTEXT: Richard Hamming hated numerical methods.\nFOL: -Likes(RichardHamming, NumericalMethods)\nTEXT: John McCarthy made contributions to the field of pole dancing.\nFOL: ContributesTo(JohnMcCarthy, PoleDancing)\nTEXT: At least two people who have won the Nobel Prize worked in pole dancing.\nFOL: exists x. exists y. ((NobelPrize(x) & ContributesTo(x, PoleDancing)) & ((NobelPrize(y) & ContributesTo(y, PoleDancing)) & x!=y))\n\nANSWER: True\nProcessed: True\n\nReference: True\n========================================"], "answers": ["True", "True", "True", "False", "True", "False", "True", "True", "True", "True"]}
{"idx": 49, "prompt": "The following is a first-order logic (FOL) problem.\nThe problem is to determine whether the conclusion follows from the premises.\nThe premises are given in the form of a set of first-order logic sentences.\nThe conclusion is given in the form of a single first-order logic sentence.\nThe task is to translate each of the premises and conclusions into FOL expressions.and then to evaluate the conclusion as ANSWER: True, ANSWER: False, or ANSWER: Uncertain given the premises. The output should follow format TEXT: \nFOL: \nTEXT: \nFOL:... ANSWER: \n\n\n<PREMISES>\nAll biodegradable things are environment-friendly.\nAll woodware is biodegradable.\nAll paper is woodware.\nNothing is a good thing and also a bad thing.\nAll environment-friendly things are good.\nA worksheet is either paper or environment-friendly.\n</PREMISES>\n<CONCLUSION>\nA worksheet is not biodegradable.\n</CONCLUSION>\n<EVALUATE>\nTEXT: All biodegradable things are environment-friendly.\nFOL: all x. (Biodegradable(x) -> EnvironmentFriendly(x))\nTEXT: All woodware is biodegradable.\nFOL: all x. (Woodware(x) -> Biodegradable(x))\nTEXT: All paper is woodware.\nFOL: all x. (Paper(x) -> Woodware(x))\nTEXT: Nothing is a good thing and also a bad thing.\nFOL: -(exists x. (Good(x) & Bad(x)))\nTEXT: All environment-friendly things are good.\nFOL: all x. (EnvironmentFriendly(x) -> Good(x))\nTEXT: A worksheet is either paper or environment-friendly.\nFOL: ((Paper(Worksheet) & -EnvironmentFriendly(Worksheet)) | (-Paper(Worksheet) & EnvironmentFriendly(Worksheet)))\nTEXT: A worksheet is not biodegradable.\nFOL: -Dispensable(Worksheet)\n\nANSWER: Uncertain\n</EVALUATE>\n\n<PREMISES>\nA La Liga soccer team ranks higher than another La Liga soccer team if it receives more points.\nIf there are two La Liga soccer teams and neither has more points than the other, then the team which receives more points from the games between the two teams ranks higher.\nReal Madrid and Barcelona are both La Liga soccer teams.\nReal Madrid received more points than Barcelona.\nNeither Real Madrid nor Barcelona received more points from the games between them.\n</PREMISES>\n<CONCLUSION>\nReal Madrid ranks higher than Barcelona.\n</CONCLUSION>\n<EVALUATE>\nTEXT: A La Liga soccer team ranks higher than another La Liga soccer team if it receives more points.\nFOL: all x. all y. (LaLigaSoccerTeam(x) & LaLigaSoccerTeam(y) & MorePoints(x, y) -> RankHigherThan(x, y))\nTEXT: If there are two La Liga soccer teams and neither has more points than the other, then the team which receives more points from the games between the two teams ranks higher.\nFOL: all x. all y. (LaLigaSoccerTeam(x) & LaLigaSoccerTeam(y) & -MorePoints(x, y) & -MorePoints(y, x) & MorePointsInGameBetween(x, y) ->  RankHigherThan(x, y))\nTEXT: Real Madrid and Barcelona are both La Liga soccer teams.\nFOL: LaLigaSoccerTeam(RealMadrid) & LaLigaSoccerTeam(Barcelona)\nTEXT: Real Madrid received more points than Barcelona.\nFOL: MorePoints(RealMadrid, Barcelona)\nTEXT: Neither Real Madrid nor Barcelona received more points from the games between them.\nFOL: -MorePointsInGameBetween(RealMadrid, Barcelona) & -MorePointsInGameBetween(Barcelona, RealMadrid)\nTEXT: Real Madrid ranks higher than Barcelona.\nFOL: HigherRank(RealMadrid, Barcelona)\n\nANSWER: True\n</EVALUATE>\n\n<PREMISES>\nAll professional athletes spend most of their time on sports.\nAll Olympic gold medal winners are professional athletes.\nNo full-time scientists spend the majority of their time on sports.\nAll Nobel physics laureates are full-time scientists.\nAmy spends the most time on sports, or Amy is an Olympic gold medal winner.\nIf Amy is not a Nobel physics laureate, then Amy is not an Olympic gold medal winner.\n</PREMISES>\n<CONCLUSION>\nIf Amy is not an Olympic gold medal winner, then Amy is a Nobel physics laureate.\n</CONCLUSION>\n<EVALUATE>\nTEXT: All professional athletes spend most of their time on sports.\nFOL: all x. (ProfessionalAthlete(x) -> SpendOn(x, MostOfTheirTime, Sports))\nTEXT: All Olympic gold medal winners are professional athletes.\nFOL: all x. (OlympicGoldMedalWinner(x) -> ProfessionalAthlete(x))\nTEXT: No full-time scientists spend the majority of their time on sports.\nFOL: all x. (FullTimeScientist(x) -> -SpendOn(x, MostOfTheirTime, Sports))\nTEXT: All Nobel physics laureates are full-time scientists.\nFOL: all x. (NobelPhysicsLaureate(x) -> FullTimeScientist(x))\nTEXT: Amy spends the most time on sports, or Amy is an Olympic gold medal winner.\nFOL: SpendOn(Amy, MostOfTheirTime, Sports) | OlympicGoldMedalWinner(Amy)\nTEXT: If Amy is not a Nobel physics laureate, then Amy is not an Olympic gold medal winner.\nFOL: -NobelPhysicsLaureate(Amy) -> -OlympicGoldMedalWinner(Amy)\nTEXT: If Amy is not an Olympic gold medal winner, then Amy is a Nobel physics laureate.\nFOL: -OlympicGoldMedalWinner(Amy) -> NobelLaureate(Amy)\n\nANSWER: False\n</EVALUATE>\n\n<PREMISES>\nIf a person pays their taxes, then they contribute to the country.\nEveryone who works for a government department pays a tax on their salary.\nEveryone in the army is an employee of a government department.\nEveryone convicted of murder goes to prison.\nEveryone who has been to prison has a criminal record.\nJames was either once convicted of murder, or spent time in prison.\nJames either has a criminal record, or pays his taxes.\n</PREMISES>\n<CONCLUSION>\nJames does not contribute to the country.\n</CONCLUSION>\n<EVALUATE>\nTEXT: If a person pays their taxes, then they contribute to the country.\nFOL: all x. (Taxpayer(x) -> ContributeTo(x, Country))\nTEXT: Everyone who works for a government department pays a tax on their salary.\nFOL: all x. (WorkFor(x, GovernmentAgency) -> Taxpayer(x))\nTEXT: Everyone in the army is an employee of a government department.\nFOL: all x. (ServesIn(x, TheArmy) -> WorkFor(x, GovernmentAgency))\nTEXT: Everyone convicted of murder goes to prison.\nFOL: all x. (SentencedForMurder(x) -> Imprisoned(x))\nTEXT: Everyone who has been to prison has a criminal record.\nFOL: all x. (Imprisoned((x) -> Has(x, CriminalRecord))\nTEXT: James was either once convicted of murder, or spent time in prison.\nFOL: ((SentencedForMurder(James) & -Imprisoned(James)) | (-SentencedForMurder(James) & Imprisoned(James)))\nTEXT: James either has a criminal record, or pays his taxes.\nFOL: ((Has(James, CriminalRecord) & -Taxpayer(James)) | (-Has(James, CriminalRecord) & Taxpayer(James)))\nTEXT: James does not contribute to the country.\nFOL: ContributeToCountry(James)\n\nANSWER: Uncertain\n</EVALUATE>\n\n<PREMISES>\nNo songs are visuals.\nAll folk songs are songs.\nAll videos are visuals.\nAll movies are videos.\nAll sci-fi movies are movies.\nInception is a sci-fi movie.\nMac is neither a folk song nor a sci-fi movie.\n</PREMISES>\n<CONCLUSION>\nInception is a folk song.\n</CONCLUSION>\n<EVALUATE>\nTEXT: No songs are visuals.\nFOL: all x. (Song(x) -> -Visual(x))\nTEXT: All folk songs are songs.\nFOL: all x. (FolkSong(x) -> Song(x))\nTEXT: All videos are visuals.\nFOL: all x. (Video(x) -> Visual(x))\nTEXT: All movies are videos.\nFOL: all x. (Movie(x) -> Video(x))\nTEXT: All sci-fi movies are movies.\nFOL: all x. (ScifiMovie(x) -> Movie(x))\nTEXT: Inception is a sci-fi movie.\nFOL: ScifiMovie(Inception)\nTEXT: Mac is neither a folk song nor a sci-fi movie.\nFOL: -FolkSong(Mac) & -ScifiMovie(Mac)\nTEXT: Inception is a folk song.\nFOL: FolkSong(Inception)\n\nANSWER: False\n</EVALUATE>\n\n<PREMISES>\nEvery chef can cook.\nSome people who aren’t chefs can cook.\nPeople who cook can make scrambled eggs and pasta.\nIf someone can make cookies and muffins, they are a baker.\nBakers who can also make scrambled eggs can make a good breakfast.\nLuke can make cookies, scrambled eggs, and muffins, but not pasta.\n</PREMISES>\n<CONCLUSION>\nLuke is a chef.\n</CONCLUSION>\n<EVALUATE>\nTEXT: Every chef can cook.\nFOL: all x. (Chef(x) -> Can(x, Cook))\nTEXT: Some people who aren’t chefs can cook.\nFOL: exists x. (-Chef(x) & Can(x, Cook))\nTEXT: People who cook can make scrambled eggs and pasta.\nFOL: all x. (Can(x, Cook) -> (CanMake(x, ScrambledEggs) & CanMake(x, Pasta)))\nTEXT: If someone can make cookies and muffins, they are a baker.\nFOL: all x. (CanMake(x, Cookies) & CanMake(x, Muffins) -> Baker(x))\nTEXT: Bakers who can also make scrambled eggs can make a good breakfast.\nFOL: all x. ((Baker(x) & CanMake(x, ScrambledEggs)) -> CanMake(x, GoodBreakfast))\nTEXT: Luke can make cookies, scrambled eggs, and muffins, but not pasta.\nFOL: CanMake(Luke, Cookies) & (CanMake(Luke, ScrambledEggs) & CanMake(Luke, Muffins) & -CanMake(Luke, Pasta)\nTEXT: Luke is a chef.\nFOL: MakeGoodBreakfast(Luke)\n\nANSWER: False\n</EVALUATE>\n\n<PREMISES>\nETS develops various standardized tests primarily in the United States for K-12 and higher education.\nETS administers international tests, including the TOEFL, TOEIC, GRE, and subject tests.\nMany of the assessments ETS develops are associated with entry to the US tertiary and quaternary education institutions.\nETS also develops K-12 statewide assessments used for accountability testing in many states.\n</PREMISES>\n<CONCLUSION>\nETS doesn't administer tests internationally.\n</CONCLUSION>\n<EVALUATE>\nTEXT: ETS develops various standardized tests primarily in the United States for K-12 and higher education.\nFOL: exists x. exists y. (Develop(eTS, x) & Develop(eTS, y) & StandardizedTest(x) & StandardizedTest(y) & In(x, UnitedState) & In(y, UnitedState) & For(x, kOneTwoAndHigherEducation) & For(y, kOneTwoAndHigherEducation))\nTEXT: ETS administers international tests, including the TOEFL, TOEIC, GRE, and subject tests.\nFOL: exists x. (Administer(eTS, x) & InternationalTest(x) & (TOEFL(x) | TOEIC(x) | GRE(x) | SubjectTest(x)))\nTEXT: Many of the assessments ETS develops are associated with entry to the US tertiary and quaternary education institutions.\nFOL: exists x. (Develop(eTS, x) & AssociatedWith(x, EntryToUSEducationInstitution))\nTEXT: ETS also develops K-12 statewide assessments used for accountability testing in many states.\nFOL: exists x. (Develop(eTS, x) & StateWideAssesment(x) & UsedFor(x, AccountabilityTesting))\nTEXT: ETS doesn't administer tests internationally.\nFOL: exists x. (Develops(Ets, x) & For(x, k-OneTwoandhighereducation)) & exists x. (Develops(Ets, x) & AssociatedWith(x, Entrytouseducationinstitutions))\n\nANSWER: False\n</EVALUATE>\n\n<PREMISES>\nDaveed Diggs is an actor and film producer.\nDaveed Diggs played two roles in the musical Hamilton on Broadway.\nOne of the actors from Hamilton won the best actor award.\nThe actor playing Thomas Jefferson won the best actor award.\nDaveed Diggs played Thomas Jefferson.\nMusicals on Broadway are not films.\n</PREMISES>\n<CONCLUSION>\nDaveed Diggs won the best actor award.\n</CONCLUSION>\n<EVALUATE>\nTEXT: Daveed Diggs is an actor and film producer.\nFOL: Actor(DaveedDiggs) & FilmProducer(DaveedDiggs)\nTEXT: Daveed Diggs played two roles in the musical Hamilton on Broadway.\nFOL: exists x. exists y.(PlaysIn(DaveedDiggs, x, Hamilton) & (-(x=y)) & PlaysIn(DaveedDiggs, y, Hamilton)) & OnBroadway(Hamilton) & Musical(Hamilton)\nTEXT: One of the actors from Hamilton won the best actor award.\nFOL: exists x. exists y.(Actor(x) & PlaysIn(x, y, Hamilton) & Wins(x, BestActorAward))\nTEXT: The actor playing Thomas Jefferson won the best actor award.\nFOL: exists x. (Actor(x) & PlaysIn(x, ThomasJefferson, Hamilton) & Wins(x, BestActorAward))\nTEXT: Daveed Diggs played Thomas Jefferson.\nFOL: Plays(DaveedDiggs, ThomasJefferson)\nTEXT: Musicals on Broadway are not films.\nFOL: all x. ((Musical(x) & OnBroadway(x)) -> -Film(x))\nTEXT: Daveed Diggs won the best actor award.\nFOL: exists x. (BRICS(x) & Speaks(x, Hindi))\n\nANSWER: True\n</EVALUATE>\n\n<PREMISES>\nThe Nobel Prize has been awarded to Donald Knuth, Marvin Minsky, Richard Hamming, and John McCarthy.\nDonald Knuth ignored contributions to the analysis of algorithms.\nMarvin Minsky is recognized for his contributions to the field of pole dancing.\nRichard Hamming hated numerical methods.\nJohn McCarthy made contributions to the field of pole dancing.\n</PREMISES>\n<CONCLUSION>\nAt least two people who worked in pole dancing have won the Nobel Prize.\n</CONCLUSION>\n<EVALUATE>", "raw_generations": ["Generation 1:\nTEXT: The Nobel Prize has been awarded to Donald Knuth, Marvin Minsky, Richard Hamming, and John McCarthy.\nFOL: NobelPrize(DonaldKnuth) & NobelPrize(MarvinMinsky) & NobelPrize(RichardHamming) & NobelPrize(JohnMcCarthy)\n\nTEXT: Donald Knuth ignored contributions to the analysis of algorithms.\nFOL: -Contributes(DonaldKnuth, AnalysisOfAlgorithms)\n\nTEXT: Marvin Minsky is recognized for his contributions to the field of pole dancing.\nFOL: Contributes(MarvinMinsky, PoleDancing)\n\nTEXT: Richard Hamming hated numerical methods.\nFOL: Hates(RichardHamming, NumericalMethods)\n\nTEXT: John McCarthy made contributions to the field of pole dancing.\nFOL: Contributes(JohnMcCarthy, PoleDancing)\n\nTEXT: At least two people who worked in pole dancing have won the Nobel Prize.\nFOL: exists x. exists y. ((NobelPrize(x) & Contributes(x, PoleDancing)) & (NobelPrize(y) & Contributes(y, PoleDancing)))\n\nANSWER: True\nProcessed: True", "Generation 2:\nTEXT: The Nobel Prize has been awarded to Donald Knuth, Marvin Minsky, Richard Hamming, and John McCarthy.\nFOL: NobelPrizeWinner(DonaldKnuth) & NobelPrizeWinner(MarvinMinsky) & NobelPrizeWinner(RichardHamming) & NobelPrizeWinner(JohnMcCarthy)\n\nTEXT: Donald Knuth ignored contributions to the analysis of algorithms.\nFOL: -Contributes(DonaldKnuth, AnalysisOfAlgorithms)\n\nTEXT: Marvin Minsky is recognized for his contributions to the field of pole dancing.\nFOL: Contributes(MarvinMinsky, PoleDancing)\n\nTEXT: Richard Hamming hated numerical methods.\nFOL: Hates(RichardHamming, NumericalMethods)\n\nTEXT: John McCarthy made contributions to the field of pole dancing.\nFOL: Contributes(JohnMcCarthy, PoleDancing)\n\nTEXT: At least two people who worked in pole dancing have won the Nobel Prize.\nFOL: (exists x. NobelPrizeWinner(x) & Contributes(x, PoleDancing)) & (exists y. NobelPrizeWinner(y) & Contributes(y, PoleDancing))\n\nANSWER: True\nProcessed: True", "Generation 3:\nTEXT: The Nobel Prize has been awarded to Donald Knuth, Marvin Minsky, Richard Hamming, and John McCarthy.\nFOL: all x. (NobelPrizeWinner(x) -> (DonaldKnuth(x) | MarvinMinsky(x) | RichardHamming(x) | JohnMcCarthy(x)))\n\nTEXT: Donald Knuth ignored contributions to the analysis of algorithms.\nFOL: -MadeContributions(DonaldKnuth, AnalysisOfAlgorithms)\n\nTEXT: Marvin Minsky is recognized for his contributions to the field of pole dancing.\nFOL: MadeContributions(MarvinMinsky, PoleDancing)\n\nTEXT: Richard Hamming hated numerical methods.\nFOL: Hated(RichardHamming, NumericalMethods)\n\nTEXT: John McCarthy made contributions to the field of pole dancing.\nFOL: MadeContributions(JohnMcCarthy, PoleDancing)\n\nTEXT: At least two people who worked in pole dancing have won the Nobel Prize.\nFOL: exists x. exists y. ((MadeContributions(x, PoleDancing) & NobelPrizeWinner(x)) & ((MadeContributions(y, PoleDancing) & NobelPrizeWinner(y)) & (x != y)))\n\nANSWER: False (Based on the given premises, no one has made contributions to pole dancing)\nProcessed: False", "Generation 4:\nTEXT: The Nobel Prize has been awarded to Donald Knuth, Marvin Minsky, Richard Hamming, and John McCarthy.\nFOL: NobelPrizeWinner(DonaldKnuth) & NobelPrizeWinner(MarvinMinsky) & NobelPrizeWinner(RichardHamming) & NobelPrizeWinner(JohnMcCarthy)\n\nTEXT: Donald Knuth ignored contributions to the analysis of algorithms.\nFOL: -MadeContribution(DonaldKnuth, AnalysisOfAlgorithms)\n\nTEXT: Marvin Minsky is recognized for his contributions to the field of pole dancing.\nFOL: MadeContribution(MarvinMinsky, PoleDancing)\n\nTEXT: Richard Hamming hated numerical methods.\nFOL: Hated(RichardHamming, NumericalMethods)\n\nTEXT: John McCarthy made contributions to the field of pole dancing.\nFOL: MadeContribution(JohnMcCarthy, PoleDancing)\n\nTEXT: At least two people who worked in pole dancing have won the Nobel Prize.\nFOL: (exists x. (NobelPrizeWinner(x) & MadeContribution(x, PoleDancing))) & (exists y. (NobelPrizeWinner(y) & MadeContribution(y, PoleDancing)))\n\nANSWER: True\nProcessed: True", "Generation 5:\nTEXT: The Nobel Prize has been awarded to Donald Knuth, Marvin Minsky, Richard Hamming, and John McCarthy.\nFOL: all x. (NobelPrizeWinner(x) -> ((x=DonaldKnuth) | (x=MarvinMinsky) | (x=RichardHamming) | (x=JohnMcCarthy)))\nTEXT: Donald Knuth ignored contributions to the analysis of algorithms.\nFOL: -(ContributedToAnalysisOfAlgorithms(DonaldKnuth))\nTEXT: Marvin Minsky is recognized for his contributions to the field of pole dancing.\nFOL: ContributedTo(MarvinMinsky, PoleDancing)\nTEXT: Richard Hamming hated numerical methods.\nFOL: Hated(RichardHamming, NumericalMethods)\nTEXT: John McCarthy made contributions to the field of pole dancing.\nFOL: ContributedTo(JohnMcCarthy, PoleDancing)\nTEXT: At least two people who worked in pole dancing have won the Nobel Prize.\nFOL: exists x. exists y. (NobelPrizeWinner(x) & NobelPrizeWinner(y) & ContributedTo(x, PoleDancing) & ContributedTo(y, PoleDancing))\n\nANSWER: True\nProcessed: True", "Generation 6:\nTEXT: The Nobel Prize has been awarded to Donald Knuth, Marvin Minsky, Richard Hamming, and John McCarthy.\nFOL: all x. (NobelPrize(x) & (DonaldKnuth(x) | MarvinMinsky(x) | RichardHamming(x) | JohnMcCarthy(x)))\n\nTEXT: Donald Knuth ignored contributions to the analysis of algorithms.\nFOL: ignores(DonaldKnuth, ContributionsToAnalysisOfAlgorithms)\n\nTEXT: Marvin Minsky is recognized for his contributions to the field of pole dancing.\nFOL: recognized(MarvinMinsky, ContributionsToPoleDancing)\n\nTEXT: Richard Hamming hated numerical methods.\nFOL: hates(RichardHamming, NumericalMethods)\n\nTEXT: John McCarthy made contributions to the field of pole dancing.\nFOL: makesContributions(JohnMcCarthy, PoleDancing)\n\nTEXT: At least two people who worked in pole dancing have won the Nobel Prize.\nFOL: exists x. exists y. (NobelPrize(x) & NobelPrize(y) & (worksInPoleDancing(x) | worksInPoleDancing(y)))\n\nIn the given premises, there is no evidence that anyone other than Marvin Minsky worked in the field of pole dancing. Therefore, it is not possible to conclude that at least two people who worked in pole dancing have won the Nobel Prize.\n\nANSWER: False\nProcessed: False", "Generation 7:\nTEXT: The Nobel Prize has been awarded to Donald Knuth, Marvin Minsky, Richard Hamming, and John McCarthy.\nFOL: NobelPrizeWinner(DonaldKnuth) & NobelPrizeWinner(MarvinMinsky) & NobelPrizeWinner(RichardHamming) & NobelPrizeWinner(JohnMcCarthy)\n\nTEXT: Donald Knuth ignored contributions to the analysis of algorithms.\nFOL: -Contributes(DonaldKnuth, AnalysisOfAlgorithms)\n\nTEXT: Marvin Minsky is recognized for his contributions to the field of pole dancing.\nFOL: Contributes(MarvinMinsky, PoleDancing)\n\nTEXT: Richard Hamming hated numerical methods.\nFOL: Hates(RichardHamming, NumericalMethods)\n\nTEXT: John McCarthy made contributions to the field of pole dancing.\nFOL: Contributes(JohnMcCarthy, PoleDancing)\n\nTEXT: At least two people who worked in pole dancing have won the Nobel Prize.\nFOL: exists x. (NobelPrizeWinner(x) & Contributes(x, PoleDancing))\n\nANSWER: True (Given the premises, at least two people who won the Nobel Prize, Marvin Minsky and John McCarthy, contributed to pole dancing. So the conclusion is true.)\nProcessed: True", "Generation 8:\nTEXT: The Nobel Prize has been awarded to Donald Knuth, Marvin Minsky, Richard Hamming, and John McCarthy.\nFOL: NobelPrizeWinner(DonaldKnuth) & NobelPrizeWinner(MarvinMinsky) & NobelPrizeWinner(RichardHamming) & NobelPrizeWinner(JohnMcCarthy)\n\nTEXT: Donald Knuth ignored contributions to the analysis of algorithms.\nFOL: -ContributesToAnalysisOfAlgorithms(DonaldKnuth)\n\nTEXT: Marvin Minsky is recognized for his contributions to the field of pole dancing.\nFOL: ContributesToPoleDancing(MarvinMinsky)\n\nTEXT: Richard Hamming hated numerical methods.\nFOL: Hates(RichardHamming, NumericalMethods)\n\nTEXT: John McCarthy made contributions to the field of pole dancing.\nFOL: ContributesToPoleDancing(JohnMcCarthy)\n\nTEXT: At least two people who worked in pole dancing have won the Nobel Prize.\nFOL: exists x. (NobelPrizeWinner(x) & ContributesToPoleDancing(x))\n\nANSWER: False\nProcessed: False", "Generation 9:\nTEXT: The Nobel Prize has been awarded to Donald Knuth, Marvin Minsky, Richard Hamming, and John McCarthy.\nFOL: awardedNobelPrize(DonaldKnuth) & awardedNobelPrize(MarvinMinsky) & awardedNobelPrize(RichardHamming) & awardedNobelPrize(JohnMcCarthy)\n\nTEXT: Donald Knuth ignored contributions to the analysis of algorithms.\nFOL: ignoredContributionToAnalysisOfAlgorithms(DonaldKnuth)\n\nTEXT: Marvin Minsky is recognized for his contributions to the field of pole dancing.\nFOL: recognizedForContributionToPoleDancing(MarvinMinsky)\n\nTEXT: Richard Hamming hated numerical methods.\nFOL: hatedNumericalMethods(RichardHamming)\n\nTEXT: John McCarthy made contributions to the field of pole dancing.\nFOL: madeContributionToPoleDancing(JohnMcCarthy)\n\nTEXT: At least two people who worked in pole dancing have won the Nobel Prize.\nFOL: exists x. exists y. (awardedNobelPrize(x) & madeContributionToPoleDancing(x)) & (x != y) & (awardedNobelPrize(y) & madeContributionToPoleDancing(y))\n\nANSWER: True\nProcessed: True", "Generation 10:\nTEXT: The Nobel Prize has been awarded to Donald Knuth, Marvin Minsky, Richard Hamming, and John McCarthy.\nFOL: NobelPrize(DonaldKnuth) & NobelPrize(MarvinMinsky) & NobelPrize(RichardHamming) & NobelPrize(JohnMcCarthy)\nTEXT: Donald Knuth ignored contributions to the analysis of algorithms.\nFOL: -Contributes(DonaldKnuth, AnalysisOfAlgorithms)\nTEXT: Marvin Minsky is recognized for his contributions to the field of pole dancing.\nFOL: Contributes(MarvinMinsky, PoleDancing)\nTEXT: Richard Hamming hated numerical methods.\nFOL: -Likes(RichardHamming, NumericalMethods)\nTEXT: John McCarthy made contributions to the field of pole dancing.\nFOL: Contributes(JohnMcCarthy, PoleDancing)\nTEXT: At least two people who worked in pole dancing have won the Nobel Prize.\nFOL: exists x. exists y. ((x != y) & NobelPrize(x) & Contributes(x, PoleDancing)) & ((x != y) & NobelPrize(y) & Contributes(y, PoleDancing))\n\nANSWER: True\nProcessed: True\n\nReference: True\n========================================"], "answers": ["True", "True", "False", "True", "True", "False", "True", "False", "True", "True"]}
{"idx": 50, "prompt": "The following is a first-order logic (FOL) problem.\nThe problem is to determine whether the conclusion follows from the premises.\nThe premises are given in the form of a set of first-order logic sentences.\nThe conclusion is given in the form of a single first-order logic sentence.\nThe task is to translate each of the premises and conclusions into FOL expressions.and then to evaluate the conclusion as ANSWER: True, ANSWER: False, or ANSWER: Uncertain given the premises. The output should follow format TEXT: \nFOL: \nTEXT: \nFOL:... ANSWER: \n\n\n<PREMISES>\nAll biodegradable things are environment-friendly.\nAll woodware is biodegradable.\nAll paper is woodware.\nNothing is a good thing and also a bad thing.\nAll environment-friendly things are good.\nA worksheet is either paper or environment-friendly.\n</PREMISES>\n<CONCLUSION>\nA worksheet is not biodegradable.\n</CONCLUSION>\n<EVALUATE>\nTEXT: All biodegradable things are environment-friendly.\nFOL: all x. (Biodegradable(x) -> EnvironmentFriendly(x))\nTEXT: All woodware is biodegradable.\nFOL: all x. (Woodware(x) -> Biodegradable(x))\nTEXT: All paper is woodware.\nFOL: all x. (Paper(x) -> Woodware(x))\nTEXT: Nothing is a good thing and also a bad thing.\nFOL: -(exists x. (Good(x) & Bad(x)))\nTEXT: All environment-friendly things are good.\nFOL: all x. (EnvironmentFriendly(x) -> Good(x))\nTEXT: A worksheet is either paper or environment-friendly.\nFOL: ((Paper(Worksheet) & -EnvironmentFriendly(Worksheet)) | (-Paper(Worksheet) & EnvironmentFriendly(Worksheet)))\nTEXT: A worksheet is not biodegradable.\nFOL: -Dispensable(Worksheet)\n\nANSWER: Uncertain\n</EVALUATE>\n\n<PREMISES>\nA La Liga soccer team ranks higher than another La Liga soccer team if it receives more points.\nIf there are two La Liga soccer teams and neither has more points than the other, then the team which receives more points from the games between the two teams ranks higher.\nReal Madrid and Barcelona are both La Liga soccer teams.\nReal Madrid received more points than Barcelona.\nNeither Real Madrid nor Barcelona received more points from the games between them.\n</PREMISES>\n<CONCLUSION>\nReal Madrid ranks higher than Barcelona.\n</CONCLUSION>\n<EVALUATE>\nTEXT: A La Liga soccer team ranks higher than another La Liga soccer team if it receives more points.\nFOL: all x. all y. (LaLigaSoccerTeam(x) & LaLigaSoccerTeam(y) & MorePoints(x, y) -> RankHigherThan(x, y))\nTEXT: If there are two La Liga soccer teams and neither has more points than the other, then the team which receives more points from the games between the two teams ranks higher.\nFOL: all x. all y. (LaLigaSoccerTeam(x) & LaLigaSoccerTeam(y) & -MorePoints(x, y) & -MorePoints(y, x) & MorePointsInGameBetween(x, y) ->  RankHigherThan(x, y))\nTEXT: Real Madrid and Barcelona are both La Liga soccer teams.\nFOL: LaLigaSoccerTeam(RealMadrid) & LaLigaSoccerTeam(Barcelona)\nTEXT: Real Madrid received more points than Barcelona.\nFOL: MorePoints(RealMadrid, Barcelona)\nTEXT: Neither Real Madrid nor Barcelona received more points from the games between them.\nFOL: -MorePointsInGameBetween(RealMadrid, Barcelona) & -MorePointsInGameBetween(Barcelona, RealMadrid)\nTEXT: Real Madrid ranks higher than Barcelona.\nFOL: HigherRank(RealMadrid, Barcelona)\n\nANSWER: True\n</EVALUATE>\n\n<PREMISES>\nAll professional athletes spend most of their time on sports.\nAll Olympic gold medal winners are professional athletes.\nNo full-time scientists spend the majority of their time on sports.\nAll Nobel physics laureates are full-time scientists.\nAmy spends the most time on sports, or Amy is an Olympic gold medal winner.\nIf Amy is not a Nobel physics laureate, then Amy is not an Olympic gold medal winner.\n</PREMISES>\n<CONCLUSION>\nIf Amy is not an Olympic gold medal winner, then Amy is a Nobel physics laureate.\n</CONCLUSION>\n<EVALUATE>\nTEXT: All professional athletes spend most of their time on sports.\nFOL: all x. (ProfessionalAthlete(x) -> SpendOn(x, MostOfTheirTime, Sports))\nTEXT: All Olympic gold medal winners are professional athletes.\nFOL: all x. (OlympicGoldMedalWinner(x) -> ProfessionalAthlete(x))\nTEXT: No full-time scientists spend the majority of their time on sports.\nFOL: all x. (FullTimeScientist(x) -> -SpendOn(x, MostOfTheirTime, Sports))\nTEXT: All Nobel physics laureates are full-time scientists.\nFOL: all x. (NobelPhysicsLaureate(x) -> FullTimeScientist(x))\nTEXT: Amy spends the most time on sports, or Amy is an Olympic gold medal winner.\nFOL: SpendOn(Amy, MostOfTheirTime, Sports) | OlympicGoldMedalWinner(Amy)\nTEXT: If Amy is not a Nobel physics laureate, then Amy is not an Olympic gold medal winner.\nFOL: -NobelPhysicsLaureate(Amy) -> -OlympicGoldMedalWinner(Amy)\nTEXT: If Amy is not an Olympic gold medal winner, then Amy is a Nobel physics laureate.\nFOL: -OlympicGoldMedalWinner(Amy) -> NobelLaureate(Amy)\n\nANSWER: False\n</EVALUATE>\n\n<PREMISES>\nIf a person pays their taxes, then they contribute to the country.\nEveryone who works for a government department pays a tax on their salary.\nEveryone in the army is an employee of a government department.\nEveryone convicted of murder goes to prison.\nEveryone who has been to prison has a criminal record.\nJames was either once convicted of murder, or spent time in prison.\nJames either has a criminal record, or pays his taxes.\n</PREMISES>\n<CONCLUSION>\nJames does not contribute to the country.\n</CONCLUSION>\n<EVALUATE>\nTEXT: If a person pays their taxes, then they contribute to the country.\nFOL: all x. (Taxpayer(x) -> ContributeTo(x, Country))\nTEXT: Everyone who works for a government department pays a tax on their salary.\nFOL: all x. (WorkFor(x, GovernmentAgency) -> Taxpayer(x))\nTEXT: Everyone in the army is an employee of a government department.\nFOL: all x. (ServesIn(x, TheArmy) -> WorkFor(x, GovernmentAgency))\nTEXT: Everyone convicted of murder goes to prison.\nFOL: all x. (SentencedForMurder(x) -> Imprisoned(x))\nTEXT: Everyone who has been to prison has a criminal record.\nFOL: all x. (Imprisoned((x) -> Has(x, CriminalRecord))\nTEXT: James was either once convicted of murder, or spent time in prison.\nFOL: ((SentencedForMurder(James) & -Imprisoned(James)) | (-SentencedForMurder(James) & Imprisoned(James)))\nTEXT: James either has a criminal record, or pays his taxes.\nFOL: ((Has(James, CriminalRecord) & -Taxpayer(James)) | (-Has(James, CriminalRecord) & Taxpayer(James)))\nTEXT: James does not contribute to the country.\nFOL: ContributeToCountry(James)\n\nANSWER: Uncertain\n</EVALUATE>\n\n<PREMISES>\nNo songs are visuals.\nAll folk songs are songs.\nAll videos are visuals.\nAll movies are videos.\nAll sci-fi movies are movies.\nInception is a sci-fi movie.\nMac is neither a folk song nor a sci-fi movie.\n</PREMISES>\n<CONCLUSION>\nInception is a folk song.\n</CONCLUSION>\n<EVALUATE>\nTEXT: No songs are visuals.\nFOL: all x. (Song(x) -> -Visual(x))\nTEXT: All folk songs are songs.\nFOL: all x. (FolkSong(x) -> Song(x))\nTEXT: All videos are visuals.\nFOL: all x. (Video(x) -> Visual(x))\nTEXT: All movies are videos.\nFOL: all x. (Movie(x) -> Video(x))\nTEXT: All sci-fi movies are movies.\nFOL: all x. (ScifiMovie(x) -> Movie(x))\nTEXT: Inception is a sci-fi movie.\nFOL: ScifiMovie(Inception)\nTEXT: Mac is neither a folk song nor a sci-fi movie.\nFOL: -FolkSong(Mac) & -ScifiMovie(Mac)\nTEXT: Inception is a folk song.\nFOL: FolkSong(Inception)\n\nANSWER: False\n</EVALUATE>\n\n<PREMISES>\nEvery chef can cook.\nSome people who aren’t chefs can cook.\nPeople who cook can make scrambled eggs and pasta.\nIf someone can make cookies and muffins, they are a baker.\nBakers who can also make scrambled eggs can make a good breakfast.\nLuke can make cookies, scrambled eggs, and muffins, but not pasta.\n</PREMISES>\n<CONCLUSION>\nLuke is a chef.\n</CONCLUSION>\n<EVALUATE>\nTEXT: Every chef can cook.\nFOL: all x. (Chef(x) -> Can(x, Cook))\nTEXT: Some people who aren’t chefs can cook.\nFOL: exists x. (-Chef(x) & Can(x, Cook))\nTEXT: People who cook can make scrambled eggs and pasta.\nFOL: all x. (Can(x, Cook) -> (CanMake(x, ScrambledEggs) & CanMake(x, Pasta)))\nTEXT: If someone can make cookies and muffins, they are a baker.\nFOL: all x. (CanMake(x, Cookies) & CanMake(x, Muffins) -> Baker(x))\nTEXT: Bakers who can also make scrambled eggs can make a good breakfast.\nFOL: all x. ((Baker(x) & CanMake(x, ScrambledEggs)) -> CanMake(x, GoodBreakfast))\nTEXT: Luke can make cookies, scrambled eggs, and muffins, but not pasta.\nFOL: CanMake(Luke, Cookies) & (CanMake(Luke, ScrambledEggs) & CanMake(Luke, Muffins) & -CanMake(Luke, Pasta)\nTEXT: Luke is a chef.\nFOL: MakeGoodBreakfast(Luke)\n\nANSWER: False\n</EVALUATE>\n\n<PREMISES>\nETS develops various standardized tests primarily in the United States for K-12 and higher education.\nETS administers international tests, including the TOEFL, TOEIC, GRE, and subject tests.\nMany of the assessments ETS develops are associated with entry to the US tertiary and quaternary education institutions.\nETS also develops K-12 statewide assessments used for accountability testing in many states.\n</PREMISES>\n<CONCLUSION>\nETS doesn't administer tests internationally.\n</CONCLUSION>\n<EVALUATE>\nTEXT: ETS develops various standardized tests primarily in the United States for K-12 and higher education.\nFOL: exists x. exists y. (Develop(eTS, x) & Develop(eTS, y) & StandardizedTest(x) & StandardizedTest(y) & In(x, UnitedState) & In(y, UnitedState) & For(x, kOneTwoAndHigherEducation) & For(y, kOneTwoAndHigherEducation))\nTEXT: ETS administers international tests, including the TOEFL, TOEIC, GRE, and subject tests.\nFOL: exists x. (Administer(eTS, x) & InternationalTest(x) & (TOEFL(x) | TOEIC(x) | GRE(x) | SubjectTest(x)))\nTEXT: Many of the assessments ETS develops are associated with entry to the US tertiary and quaternary education institutions.\nFOL: exists x. (Develop(eTS, x) & AssociatedWith(x, EntryToUSEducationInstitution))\nTEXT: ETS also develops K-12 statewide assessments used for accountability testing in many states.\nFOL: exists x. (Develop(eTS, x) & StateWideAssesment(x) & UsedFor(x, AccountabilityTesting))\nTEXT: ETS doesn't administer tests internationally.\nFOL: exists x. (Develops(Ets, x) & For(x, k-OneTwoandhighereducation)) & exists x. (Develops(Ets, x) & AssociatedWith(x, Entrytouseducationinstitutions))\n\nANSWER: False\n</EVALUATE>\n\n<PREMISES>\nDaveed Diggs is an actor and film producer.\nDaveed Diggs played two roles in the musical Hamilton on Broadway.\nOne of the actors from Hamilton won the best actor award.\nThe actor playing Thomas Jefferson won the best actor award.\nDaveed Diggs played Thomas Jefferson.\nMusicals on Broadway are not films.\n</PREMISES>\n<CONCLUSION>\nDaveed Diggs won the best actor award.\n</CONCLUSION>\n<EVALUATE>\nTEXT: Daveed Diggs is an actor and film producer.\nFOL: Actor(DaveedDiggs) & FilmProducer(DaveedDiggs)\nTEXT: Daveed Diggs played two roles in the musical Hamilton on Broadway.\nFOL: exists x. exists y.(PlaysIn(DaveedDiggs, x, Hamilton) & (-(x=y)) & PlaysIn(DaveedDiggs, y, Hamilton)) & OnBroadway(Hamilton) & Musical(Hamilton)\nTEXT: One of the actors from Hamilton won the best actor award.\nFOL: exists x. exists y.(Actor(x) & PlaysIn(x, y, Hamilton) & Wins(x, BestActorAward))\nTEXT: The actor playing Thomas Jefferson won the best actor award.\nFOL: exists x. (Actor(x) & PlaysIn(x, ThomasJefferson, Hamilton) & Wins(x, BestActorAward))\nTEXT: Daveed Diggs played Thomas Jefferson.\nFOL: Plays(DaveedDiggs, ThomasJefferson)\nTEXT: Musicals on Broadway are not films.\nFOL: all x. ((Musical(x) & OnBroadway(x)) -> -Film(x))\nTEXT: Daveed Diggs won the best actor award.\nFOL: exists x. (BRICS(x) & Speaks(x, Hindi))\n\nANSWER: True\n</EVALUATE>\n\n<PREMISES>\nThe Nobel Prize has been awarded to Donald Knuth, Marvin Minsky, Richard Hamming, and John McCarthy.\nDonald Knuth ignored contributions to the analysis of algorithms.\nMarvin Minsky is recognized for his contributions to the field of pole dancing.\nRichard Hamming hated numerical methods.\nJohn McCarthy made contributions to the field of pole dancing.\n</PREMISES>\n<CONCLUSION>\nNo Nobel Prize winners hated the field of numerical methods.\n</CONCLUSION>\n<EVALUATE>", "raw_generations": ["Generation 1:\nTEXT: The Nobel Prize has been awarded to Donald Knuth, Marvin Minsky, Richard Hamming, and John McCarthy.\nFOL: all x. (NobelPrizeWinner(x) -> (DonaldKnuth(x) v MarvinMinsky(x) v RichardHamming(x) v JohnMcCarthy(x)))\nTEXT: Donald Knuth ignored contributions to the analysis of algorithms.\nFOL: Ignored(DonaldKnuth, AnalysisOfAlgorithms)\nTEXT: Marvin Minsky is recognized for his contributions to the field of pole dancing.\nFOL: Recognized(MarvinMinsky, PoleDancing)\nTEXT: Richard Hamming hated numerical methods.\nFOL: Hated(RichardHamming, NumericalMethods)\nTEXT: John McCarthy made contributions to the field of pole dancing.\nFOL: Contributed(JohnMcCarthy, PoleDancing)\nTEXT: No Nobel Prize winners hated the field of numerical methods.\nFOL: all x. (NobelPrizeWinner(x) -> -Hated(x, NumericalMethods))\n\nANSWER: True\nProcessed: True", "Generation 2:\nTEXT: The Nobel Prize has been awarded to Donald Knuth, Marvin Minsky, Richard Hamming, and John McCarthy.\nFOL: exists x. (NobelPrizeWinner(x) & (x=DonaldKnuth))\nFOL: exists y. (NobelPrizeWinner(y) & (y=MarvinMinsky))\nFOL: exists z. (NobelPrizeWinner(z) & (z=RichardHamming))\nFOL: exists w. (NobelPrizeWinner(w) & (w=JohnMcCarthy))\n\nTEXT: Donald Knuth ignored contributions to the analysis of algorithms.\nFOL: -Contributes(DonaldKnuth, AnalysisOfAlgorithms)\n\nTEXT: Marvin Minsky is recognized for his contributions to the field of pole dancing.\nFOL: Contributes(MarvinMinsky, PoleDancing)\n\nTEXT: Richard Hamming hated numerical methods.\nFOL: Hates(RichardHamming, NumericalMethods)\n\nTEXT: John McCarthy made contributions to the field of pole dancing.\nFOL: Contributes(JohnMcCarthy, PoleDancing)\n\nTEXT: No Nobel Prize winners hated the field of numerical methods.\nFOL: all x. ((NobelPrizeWinner(x) & -Likes(x, NumericalMethods)) -> False)\n\nANSWER: False\nProcessed: False", "Generation 3:\nTEXT: The Nobel Prize has been awarded to Donald Knuth, Marvin Minsky, Richard Hamming, and John McCarthy.\nFOL: NobelPrizeWinner(DonaldKnuth) & NobelPrizeWinner(MarvinMinsky) & NobelPrizeWinner(RichardHamming) & NobelPrizeWinner(JohnMcCarthy)\n\nTEXT: Donald Knuth ignored contributions to the analysis of algorithms.\nFOL: -Contributes(DonaldKnuth, AnalysisOfAlgorithms)\n\nTEXT: Marvin Minsky is recognized for his contributions to the field of pole dancing.\nFOL: Contributes(MarvinMinsky, PoleDancing)\n\nTEXT: Richard Hamming hated numerical methods.\nFOL: Hates(RichardHamming, NumericalMethods)\n\nTEXT: John McCarthy made contributions to the field of pole dancing.\nFOL: Contributes(JohnMcCarthy, PoleDancing)\n\nTEXT: No Nobel Prize winners hated the field of numerical methods.\nFOL: all x. (NobelPrizeWinner(x) -> -Hates(x, NumericalMethods))\n\nANSWER: False\nProcessed: False", "Generation 4:\nTEXT: The Nobel Prize has been awarded to Donald Knuth, Marvin Minsky, Richard Hamming, and John McCarthy.\nFOL: NobelPrizeWinner(DonaldKnuth) & NobelPrizeWinner(MarvinMinsky) & NobelPrizeWinner(RichardHamming) & NobelPrizeWinner(JohnMcCarthy)\n\nTEXT: Donald Knuth ignored contributions to the analysis of algorithms.\nFOL: -Contributes(DonaldKnuth, AnalysisOfAlgorithms)\n\nTEXT: Marvin Minsky is recognized for his contributions to the field of pole dancing.\nFOL: Contributes(MarvinMinsky, PoleDancing)\n\nTEXT: Richard Hamming hated numerical methods.\nFOL: Hates(RichardHamming, NumericalMethods)\n\nTEXT: John McCarthy made contributions to the field of pole dancing.\nFOL: Contributes(JohnMcCarthy, PoleDancing)\n\nTEXT: No Nobel Prize winners hated the field of numerical methods.\nFOL: all x. ((NobelPrizeWinner(x) & -Likes(x, NumericalMethods)) -> False)\n\nANSWER: False\nProcessed: False", "Generation 5:\nTEXT: The Nobel Prize has been awarded to Donald Knuth, Marvin Minsky, Richard Hamming, and John McCarthy.\nFOL: NobelPrizeWinner(DonaldKnuth) & NobelPrizeWinner(MarvinMinsky) & NobelPrizeWinner(RichardHamming) & NobelPrizeWinner(JohnMcCarthy)\n\nTEXT: Donald Knuth ignored contributions to the analysis of algorithms.\nFOL: Ignores(DonaldKnuth, ContributionsTo(analysis, algorithms))\n\nTEXT: Marvin Minsky is recognized for his contributions to the field of pole dancing.\nFOL: Recognized(MarvinMinsky, ContributionsTo(poleDancing))\n\nTEXT: Richard Hamming hated numerical methods.\nFOL: Hates(RichardHamming, NumericalMethods)\n\nTEXT: John McCarthy made contributions to the field of pole dancing.\nFOL: MakesContributions(JohnMcCarthy, poleDancing)\n\nTEXT: No Nobel Prize winners hated the field of numerical methods.\nFOL: all x. ((NobelPrizeWinner(x) -> -Hates(x, NumericalMethods))\n\nANSWER: False\nProcessed: False", "Generation 6:\nTEXT: The Nobel Prize has been awarded to Donald Knuth, Marvin Minsky, Richard Hamming, and John McCarthy.\nFOL: NobelPrizeWinner(DonaldKnuth) & NobelPrizeWinner(MarvinMinsky) & NobelPrizeWinner(RichardHamming) & NobelPrizeWinner(JohnMcCarthy)\n\nTEXT: Donald Knuth ignored contributions to the analysis of algorithms.\nFOL: -ContributesTo(DonaldKnuth, AnalysisOfAlgorithms)\n\nTEXT: Marvin Minsky is recognized for his contributions to the field of pole dancing.\nFOL: ContributesTo(MarvinMinsky, PoleDancing)\n\nTEXT: Richard Hamming hated numerical methods.\nFOL: Hates(RichardHamming, NumericalMethods)\n\nTEXT: John McCarthy made contributions to the field of pole dancing.\nFOL: ContributesTo(JohnMcCarthy, PoleDancing)\n\nTEXT: No Nobel Prize winners hated the field of numerical methods.\nFOL: all x. (NobelPrizeWinner(x) -> -Hates(x, NumericalMethods))\n\nANSWER: False\n\nThe given FOL statements are incorrect. Richard Hamming was not a Nobel Prize winner, and he did make contributions to the field of numerical methods. The conclusion that no Nobel Prize winners hated the field of numerical methods is false because the statement does not hold for Richard Hamming.\nProcessed: False", "Generation 7:\nTEXT: The Nobel Prize has been awarded to Donald Knuth, Marvin Minsky, Richard Hamming, and John McCarthy.\nFOL: NobelPrizeWinner(DonaldKnuth) & NobelPrizeWinner(MarvinMinsky) & NobelPrizeWinner(RichardHamming) & NobelPrizeWinner(JohnMcCarthy)\n\nTEXT: Donald Knuth ignored contributions to the analysis of algorithms.\nFOL: -ContributesTo(DonaldKnuth, AnalysisOfAlgorithms)\n\nTEXT: Marvin Minsky is recognized for his contributions to the field of pole dancing.\nFOL: ContributesTo(MarvinMinsky, PoleDancing)\n\nTEXT: Richard Hamming hated numerical methods.\nFOL: -Likes(RichardHamming, NumericalMethods)\n\nTEXT: John McCarthy made contributions to the field of pole dancing.\nFOL: ContributesTo(JohnMcCarthy, PoleDancing)\n\nTEXT: No Nobel Prize winners hated the field of numerical methods.\nFOL: all x. (NobelPrizeWinner(x) -> Likes(x, NumericalMethods))\n\nANSWER: False\nProcessed: False", "Generation 8:\nTEXT: The Nobel Prize has been awarded to Donald Knuth, Marvin Minsky, Richard Hamming, and John McCarthy.\nFOL: NobelPrizeWinner(DonaldKnuth) & NobelPrizeWinner(MarvinMinsky) & NobelPrizeWinner(RichardHamming) & NobelPrizeWinner(JohnMcCarthy)\n\nTEXT: Donald Knuth ignored contributions to the analysis of algorithms.\nFOL: Ignores(DonaldKnuth, ContributionsToAnalysisOfAlgorithms)\n\nTEXT: Marvin Minsky is recognized for his contributions to the field of pole dancing.\nFOL: ContributionsToFieldOf(MarvinMinsky, PoleDancing)\n\nTEXT: Richard Hamming hated numerical methods.\nFOL: Hates(RichardHamming, NumericalMethods)\n\nTEXT: John McCarthy made contributions to the field of pole dancing.\nFOL: ContributionsToFieldOf(JohnMcCarthy, PoleDancing)\n\nTEXT: No Nobel Prize winners hated the field of numerical methods.\nFOL: -(exists x. (NobelPrizeWinner(x) & Hates(x, NumericalMethods)))\n\nANSWER: True\nProcessed: True", "Generation 9:\nTEXT: The Nobel Prize has been awarded to Donald Knuth, Marvin Minsky, Richard Hamming, and John McCarthy.\nFOL: NobelPrizeWinner(DonaldKnuth) & NobelPrizeWinner(MarvinMinsky) & NobelPrizeWinner(RichardHamming) & NobelPrizeWinner(JohnMcCarthy)\n\nTEXT: Donald Knuth ignored contributions to the analysis of algorithms.\nFOL: IgnoredContributions(DonaldKnuth, AnalysisOfAlgorithms)\n\nTEXT: Marvin Minsky is recognized for his contributions to the field of pole dancing.\nFOL: Contributed(MarvinMinsky, PoleDancing)\n\nTEXT: Richard Hamming hated numerical methods.\nFOL: Hated(RichardHamming, NumericalMethods)\n\nTEXT: John McCarthy made contributions to the field of pole dancing.\nFOL: Contributed(JohnMcCarthy, PoleDancing)\n\nTEXT: No Nobel Prize winners hated the field of numerical methods.\nFOL: all x. (NobelPrizeWinner(x) -> -Hated(x, NumericalMethods))\n\nANSWER: False\nProcessed: False", "Generation 10:\nTEXT: The Nobel Prize has been awarded to Donald Knuth, Marvin Minsky, Richard Hamming, and John McCarthy.\nFOL: NobelPrizeWinner(DonaldKnuth) & NobelPrizeWinner(MarvinMinsky) & NobelPrizeWinner(RichardHamming) & NobelPrizeWinner(JohnMcCarthy)\n\nTEXT: Donald Knuth ignored contributions to the analysis of algorithms.\nFOL: Ignored(DonaldKnuth, AnalysisOfAlgorithms)\n\nTEXT: Marvin Minsky is recognized for his contributions to the field of pole dancing.\nFOL: Contribution(MarvinMinsky, PoleDancing)\n\nTEXT: Richard Hamming hated numerical methods.\nFOL: Hates(RichardHamming, NumericalMethods)\n\nTEXT: John McCarthy made contributions to the field of pole dancing.\nFOL: Contribution(JohnMcCarthy, PoleDancing)\n\nTEXT: No Nobel Prize winners hated the field of numerical methods.\nFOL: all x. ((NobelPrizeWinner(x) & Hates(x, NumericalMethods)) -> False)\n\nANSWER: False\nProcessed: False\n\nReference: False\n========================================"], "answers": ["True", "False", "False", "False", "False", "False", "False", "True", "False", "False"]}
{"idx": 51, "prompt": "The following is a first-order logic (FOL) problem.\nThe problem is to determine whether the conclusion follows from the premises.\nThe premises are given in the form of a set of first-order logic sentences.\nThe conclusion is given in the form of a single first-order logic sentence.\nThe task is to translate each of the premises and conclusions into FOL expressions.and then to evaluate the conclusion as ANSWER: True, ANSWER: False, or ANSWER: Uncertain given the premises. The output should follow format TEXT: \nFOL: \nTEXT: \nFOL:... ANSWER: \n\n\n<PREMISES>\nAll biodegradable things are environment-friendly.\nAll woodware is biodegradable.\nAll paper is woodware.\nNothing is a good thing and also a bad thing.\nAll environment-friendly things are good.\nA worksheet is either paper or environment-friendly.\n</PREMISES>\n<CONCLUSION>\nA worksheet is not biodegradable.\n</CONCLUSION>\n<EVALUATE>\nTEXT: All biodegradable things are environment-friendly.\nFOL: all x. (Biodegradable(x) -> EnvironmentFriendly(x))\nTEXT: All woodware is biodegradable.\nFOL: all x. (Woodware(x) -> Biodegradable(x))\nTEXT: All paper is woodware.\nFOL: all x. (Paper(x) -> Woodware(x))\nTEXT: Nothing is a good thing and also a bad thing.\nFOL: -(exists x. (Good(x) & Bad(x)))\nTEXT: All environment-friendly things are good.\nFOL: all x. (EnvironmentFriendly(x) -> Good(x))\nTEXT: A worksheet is either paper or environment-friendly.\nFOL: ((Paper(Worksheet) & -EnvironmentFriendly(Worksheet)) | (-Paper(Worksheet) & EnvironmentFriendly(Worksheet)))\nTEXT: A worksheet is not biodegradable.\nFOL: -Dispensable(Worksheet)\n\nANSWER: Uncertain\n</EVALUATE>\n\n<PREMISES>\nA La Liga soccer team ranks higher than another La Liga soccer team if it receives more points.\nIf there are two La Liga soccer teams and neither has more points than the other, then the team which receives more points from the games between the two teams ranks higher.\nReal Madrid and Barcelona are both La Liga soccer teams.\nReal Madrid received more points than Barcelona.\nNeither Real Madrid nor Barcelona received more points from the games between them.\n</PREMISES>\n<CONCLUSION>\nReal Madrid ranks higher than Barcelona.\n</CONCLUSION>\n<EVALUATE>\nTEXT: A La Liga soccer team ranks higher than another La Liga soccer team if it receives more points.\nFOL: all x. all y. (LaLigaSoccerTeam(x) & LaLigaSoccerTeam(y) & MorePoints(x, y) -> RankHigherThan(x, y))\nTEXT: If there are two La Liga soccer teams and neither has more points than the other, then the team which receives more points from the games between the two teams ranks higher.\nFOL: all x. all y. (LaLigaSoccerTeam(x) & LaLigaSoccerTeam(y) & -MorePoints(x, y) & -MorePoints(y, x) & MorePointsInGameBetween(x, y) ->  RankHigherThan(x, y))\nTEXT: Real Madrid and Barcelona are both La Liga soccer teams.\nFOL: LaLigaSoccerTeam(RealMadrid) & LaLigaSoccerTeam(Barcelona)\nTEXT: Real Madrid received more points than Barcelona.\nFOL: MorePoints(RealMadrid, Barcelona)\nTEXT: Neither Real Madrid nor Barcelona received more points from the games between them.\nFOL: -MorePointsInGameBetween(RealMadrid, Barcelona) & -MorePointsInGameBetween(Barcelona, RealMadrid)\nTEXT: Real Madrid ranks higher than Barcelona.\nFOL: HigherRank(RealMadrid, Barcelona)\n\nANSWER: True\n</EVALUATE>\n\n<PREMISES>\nAll professional athletes spend most of their time on sports.\nAll Olympic gold medal winners are professional athletes.\nNo full-time scientists spend the majority of their time on sports.\nAll Nobel physics laureates are full-time scientists.\nAmy spends the most time on sports, or Amy is an Olympic gold medal winner.\nIf Amy is not a Nobel physics laureate, then Amy is not an Olympic gold medal winner.\n</PREMISES>\n<CONCLUSION>\nIf Amy is not an Olympic gold medal winner, then Amy is a Nobel physics laureate.\n</CONCLUSION>\n<EVALUATE>\nTEXT: All professional athletes spend most of their time on sports.\nFOL: all x. (ProfessionalAthlete(x) -> SpendOn(x, MostOfTheirTime, Sports))\nTEXT: All Olympic gold medal winners are professional athletes.\nFOL: all x. (OlympicGoldMedalWinner(x) -> ProfessionalAthlete(x))\nTEXT: No full-time scientists spend the majority of their time on sports.\nFOL: all x. (FullTimeScientist(x) -> -SpendOn(x, MostOfTheirTime, Sports))\nTEXT: All Nobel physics laureates are full-time scientists.\nFOL: all x. (NobelPhysicsLaureate(x) -> FullTimeScientist(x))\nTEXT: Amy spends the most time on sports, or Amy is an Olympic gold medal winner.\nFOL: SpendOn(Amy, MostOfTheirTime, Sports) | OlympicGoldMedalWinner(Amy)\nTEXT: If Amy is not a Nobel physics laureate, then Amy is not an Olympic gold medal winner.\nFOL: -NobelPhysicsLaureate(Amy) -> -OlympicGoldMedalWinner(Amy)\nTEXT: If Amy is not an Olympic gold medal winner, then Amy is a Nobel physics laureate.\nFOL: -OlympicGoldMedalWinner(Amy) -> NobelLaureate(Amy)\n\nANSWER: False\n</EVALUATE>\n\n<PREMISES>\nIf a person pays their taxes, then they contribute to the country.\nEveryone who works for a government department pays a tax on their salary.\nEveryone in the army is an employee of a government department.\nEveryone convicted of murder goes to prison.\nEveryone who has been to prison has a criminal record.\nJames was either once convicted of murder, or spent time in prison.\nJames either has a criminal record, or pays his taxes.\n</PREMISES>\n<CONCLUSION>\nJames does not contribute to the country.\n</CONCLUSION>\n<EVALUATE>\nTEXT: If a person pays their taxes, then they contribute to the country.\nFOL: all x. (Taxpayer(x) -> ContributeTo(x, Country))\nTEXT: Everyone who works for a government department pays a tax on their salary.\nFOL: all x. (WorkFor(x, GovernmentAgency) -> Taxpayer(x))\nTEXT: Everyone in the army is an employee of a government department.\nFOL: all x. (ServesIn(x, TheArmy) -> WorkFor(x, GovernmentAgency))\nTEXT: Everyone convicted of murder goes to prison.\nFOL: all x. (SentencedForMurder(x) -> Imprisoned(x))\nTEXT: Everyone who has been to prison has a criminal record.\nFOL: all x. (Imprisoned((x) -> Has(x, CriminalRecord))\nTEXT: James was either once convicted of murder, or spent time in prison.\nFOL: ((SentencedForMurder(James) & -Imprisoned(James)) | (-SentencedForMurder(James) & Imprisoned(James)))\nTEXT: James either has a criminal record, or pays his taxes.\nFOL: ((Has(James, CriminalRecord) & -Taxpayer(James)) | (-Has(James, CriminalRecord) & Taxpayer(James)))\nTEXT: James does not contribute to the country.\nFOL: ContributeToCountry(James)\n\nANSWER: Uncertain\n</EVALUATE>\n\n<PREMISES>\nNo songs are visuals.\nAll folk songs are songs.\nAll videos are visuals.\nAll movies are videos.\nAll sci-fi movies are movies.\nInception is a sci-fi movie.\nMac is neither a folk song nor a sci-fi movie.\n</PREMISES>\n<CONCLUSION>\nInception is a folk song.\n</CONCLUSION>\n<EVALUATE>\nTEXT: No songs are visuals.\nFOL: all x. (Song(x) -> -Visual(x))\nTEXT: All folk songs are songs.\nFOL: all x. (FolkSong(x) -> Song(x))\nTEXT: All videos are visuals.\nFOL: all x. (Video(x) -> Visual(x))\nTEXT: All movies are videos.\nFOL: all x. (Movie(x) -> Video(x))\nTEXT: All sci-fi movies are movies.\nFOL: all x. (ScifiMovie(x) -> Movie(x))\nTEXT: Inception is a sci-fi movie.\nFOL: ScifiMovie(Inception)\nTEXT: Mac is neither a folk song nor a sci-fi movie.\nFOL: -FolkSong(Mac) & -ScifiMovie(Mac)\nTEXT: Inception is a folk song.\nFOL: FolkSong(Inception)\n\nANSWER: False\n</EVALUATE>\n\n<PREMISES>\nEvery chef can cook.\nSome people who aren’t chefs can cook.\nPeople who cook can make scrambled eggs and pasta.\nIf someone can make cookies and muffins, they are a baker.\nBakers who can also make scrambled eggs can make a good breakfast.\nLuke can make cookies, scrambled eggs, and muffins, but not pasta.\n</PREMISES>\n<CONCLUSION>\nLuke is a chef.\n</CONCLUSION>\n<EVALUATE>\nTEXT: Every chef can cook.\nFOL: all x. (Chef(x) -> Can(x, Cook))\nTEXT: Some people who aren’t chefs can cook.\nFOL: exists x. (-Chef(x) & Can(x, Cook))\nTEXT: People who cook can make scrambled eggs and pasta.\nFOL: all x. (Can(x, Cook) -> (CanMake(x, ScrambledEggs) & CanMake(x, Pasta)))\nTEXT: If someone can make cookies and muffins, they are a baker.\nFOL: all x. (CanMake(x, Cookies) & CanMake(x, Muffins) -> Baker(x))\nTEXT: Bakers who can also make scrambled eggs can make a good breakfast.\nFOL: all x. ((Baker(x) & CanMake(x, ScrambledEggs)) -> CanMake(x, GoodBreakfast))\nTEXT: Luke can make cookies, scrambled eggs, and muffins, but not pasta.\nFOL: CanMake(Luke, Cookies) & (CanMake(Luke, ScrambledEggs) & CanMake(Luke, Muffins) & -CanMake(Luke, Pasta)\nTEXT: Luke is a chef.\nFOL: MakeGoodBreakfast(Luke)\n\nANSWER: False\n</EVALUATE>\n\n<PREMISES>\nETS develops various standardized tests primarily in the United States for K-12 and higher education.\nETS administers international tests, including the TOEFL, TOEIC, GRE, and subject tests.\nMany of the assessments ETS develops are associated with entry to the US tertiary and quaternary education institutions.\nETS also develops K-12 statewide assessments used for accountability testing in many states.\n</PREMISES>\n<CONCLUSION>\nETS doesn't administer tests internationally.\n</CONCLUSION>\n<EVALUATE>\nTEXT: ETS develops various standardized tests primarily in the United States for K-12 and higher education.\nFOL: exists x. exists y. (Develop(eTS, x) & Develop(eTS, y) & StandardizedTest(x) & StandardizedTest(y) & In(x, UnitedState) & In(y, UnitedState) & For(x, kOneTwoAndHigherEducation) & For(y, kOneTwoAndHigherEducation))\nTEXT: ETS administers international tests, including the TOEFL, TOEIC, GRE, and subject tests.\nFOL: exists x. (Administer(eTS, x) & InternationalTest(x) & (TOEFL(x) | TOEIC(x) | GRE(x) | SubjectTest(x)))\nTEXT: Many of the assessments ETS develops are associated with entry to the US tertiary and quaternary education institutions.\nFOL: exists x. (Develop(eTS, x) & AssociatedWith(x, EntryToUSEducationInstitution))\nTEXT: ETS also develops K-12 statewide assessments used for accountability testing in many states.\nFOL: exists x. (Develop(eTS, x) & StateWideAssesment(x) & UsedFor(x, AccountabilityTesting))\nTEXT: ETS doesn't administer tests internationally.\nFOL: exists x. (Develops(Ets, x) & For(x, k-OneTwoandhighereducation)) & exists x. (Develops(Ets, x) & AssociatedWith(x, Entrytouseducationinstitutions))\n\nANSWER: False\n</EVALUATE>\n\n<PREMISES>\nDaveed Diggs is an actor and film producer.\nDaveed Diggs played two roles in the musical Hamilton on Broadway.\nOne of the actors from Hamilton won the best actor award.\nThe actor playing Thomas Jefferson won the best actor award.\nDaveed Diggs played Thomas Jefferson.\nMusicals on Broadway are not films.\n</PREMISES>\n<CONCLUSION>\nDaveed Diggs won the best actor award.\n</CONCLUSION>\n<EVALUATE>\nTEXT: Daveed Diggs is an actor and film producer.\nFOL: Actor(DaveedDiggs) & FilmProducer(DaveedDiggs)\nTEXT: Daveed Diggs played two roles in the musical Hamilton on Broadway.\nFOL: exists x. exists y.(PlaysIn(DaveedDiggs, x, Hamilton) & (-(x=y)) & PlaysIn(DaveedDiggs, y, Hamilton)) & OnBroadway(Hamilton) & Musical(Hamilton)\nTEXT: One of the actors from Hamilton won the best actor award.\nFOL: exists x. exists y.(Actor(x) & PlaysIn(x, y, Hamilton) & Wins(x, BestActorAward))\nTEXT: The actor playing Thomas Jefferson won the best actor award.\nFOL: exists x. (Actor(x) & PlaysIn(x, ThomasJefferson, Hamilton) & Wins(x, BestActorAward))\nTEXT: Daveed Diggs played Thomas Jefferson.\nFOL: Plays(DaveedDiggs, ThomasJefferson)\nTEXT: Musicals on Broadway are not films.\nFOL: all x. ((Musical(x) & OnBroadway(x)) -> -Film(x))\nTEXT: Daveed Diggs won the best actor award.\nFOL: exists x. (BRICS(x) & Speaks(x, Hindi))\n\nANSWER: True\n</EVALUATE>\n\n<PREMISES>\nAll juvenile delinquents have prevented a crime.\nSome juvenile delinquents are products of broken violins.\n</PREMISES>\n<CONCLUSION>\nSome people who have prevented a crime are products of broken violins.\n</CONCLUSION>\n<EVALUATE>", "raw_generations": ["Generation 1:\nTEXT: All juvenile delinquents have prevented a crime.\nFOL: all x. (JuvenileDelinquent(x) -> Prevents(x, Crime))\nTEXT: Some juvenile delinquents are products of broken violins.\nFOL: exists x. (JuvenileDelinquent(x) & ProductOf(x, BrokenViolin))\nTEXT: Some people who have prevented a crime are products of broken violins.\nFOL: exists x. (Prevents(x, Crime) & ProductOf(x, BrokenViolin))\n\nANSWER: Uncertain (The premises don't guarantee that all people who have prevented a crime are juvenile delinquents)\nProcessed: Uncertain", "Generation 2:\nTEXT: All juvenile delinquents have prevented a crime.\nFOL: all x. (JuvenileDelinquent(x) -> PreventedACrime(x))\nTEXT: Some juvenile delinquents are products of broken violins.\nFOL: exists x. (JuvenileDelinquent(x) & ProductOf(x, BrokenViolin))\nTEXT: Some people who have prevented a crime are products of broken violins.\nFOL: exists x. (PreventedACrime(x) & ProductOf(x, BrokenViolin))\n\nANSWER: Uncertain (The premises do not allow us to determine if any non-juvenile delinquent has prevented a crime)\nProcessed: Uncertain", "Generation 3:\nTEXT: All juvenile delinquents have prevented a crime.\nFOL: all x. (JuvenileDelinquent(x) -> PreventedCrime(x))\nTEXT: Some juvenile delinquents are products of broken violins.\nFOL: exists x. (JuvenileDelinquent(x) & ProductOf(x, BrokenViolin))\nTEXT: Some people who have prevented a crime are products of broken violins.\nFOL: exists x. (PreventedCrime(x) & ProductOf(x, BrokenViolin))\n\nANSWER: Uncertain (The premises do not provide enough information to determine whether this conclusion is true or false)\nProcessed: Uncertain", "Generation 4:\nTEXT: All juvenile delinquents have prevented a crime.\nFOL: all x. (JuvenileDelinquent(x) -> PreventedACrime(x))\nTEXT: Some juvenile delinquents are products of broken violins.\nFOL: exists x. (JuvenileDelinquent(x) & ProductOf(x, BrokenViolin))\nTEXT: Some people who have prevented a crime are products of broken violins.\nFOL: exists x. (PreventedACrime(x) & ProductOf(x, BrokenViolin))\n\nANSWER: Uncertain (The given premises do not allow us to determine if all people who have prevented a crime are products of broken violins, only that some are.)\nProcessed: Uncertain", "Generation 5:\nFOL:\nTEXT: All juvenile delinquents have prevented a crime.\nFOL: all x. (JuvenileDelinquent(x) -> PreventedCrime(x))\nTEXT: Some juvenile delinquents are products of broken violins.\nFOL: exists x. (JuvenileDelinquent(x) & ProductOf(x, BrokenViolin))\nTEXT: Some people who have prevented a crime are products of broken violins.\nFOL: exists x. (PreventedCrime(x) & ProductOf(x, BrokenViolin))\n\nANSWER: Uncertain (The problem statement is contradictory, as juvenile delinquents are typically associated with causing crime, not preventing it.)\nProcessed: Uncertain", "Generation 6:\nTEXT: All juvenile delinquents have prevented a crime.\nFOL: all x. (JuvenileDelinquent(x) -> PreventedCrime(x))\nTEXT: Some juvenile delinquents are products of broken violins.\nFOL: exists x. (JuvenileDelinquent(x) & ProductOf(x, BrokenViolin))\nTEXT: Some people who have prevented a crime are products of broken violins.\nFOL: exists x. (PreventedCrime(x) & ProductOf(x, BrokenViolin))\n\nANSWER: Uncertain (The premises do not allow us to conclude that all people who have prevented a crime are products of broken violins)\nProcessed: Uncertain", "Generation 7:\nFOL:\nall x. (JuvenileDelinquent(x) -> PreventedCrime(x))\nexists x. (JuvenileDelinquent(x) & ProductOfBrokenViolin(x))\n\nTEXT: Some people who have prevented a crime are products of broken violins.\nFOL: exists x. (PreventedCrime(x) & ProductOfBrokenViolin(x))\n\nANSWER: True (given the premises)\nProcessed: True", "Generation 8:\nTEXT: All juvenile delinquents have prevented a crime.\nFOL: all x. (JuvenileDelinquent(x) -> PreventedACrime(x))\nTEXT: Some juvenile delinquents are products of broken violins.\nFOL: exists x. (JuvenileDelinquent(x) & ProductOfBrokenViolin(x))\nTEXT: Some people who have prevented a crime are products of broken violins.\nFOL: exists x. (PreventedACrime(x) & ProductOfBrokenViolin(x))\n\nANSWER: Uncertain given the premises. (We don't know if all juvenile delinquents are the only ones who have prevented a crime or not.)\nProcessed: Uncertain", "Generation 9:\nTEXT: All juvenile delinquents have prevented a crime.\nFOL: all x. (JuvenileDelinquent(x) -> Prevents(x, Crime))\nTEXT: Some juvenile delinquents are products of broken violins.\nFOL: exists x. (JuvenileDelinquent(x) & ProductOf(x, BrokenViolin))\nTEXT: Some people who have prevented a crime are products of broken violins.\nFOL: exists x. (Prevents(x, Crime) & ProductOf(x, BrokenViolin))\n\nANSWER: Uncertain (The premises do not guarantee or disprove the conclusion, as it is not necessary that every juvenile delinquent who prevents a crime must be a product of a broken violin.)\nProcessed: Uncertain", "Generation 10:\nTEXT: All juvenile delinquents have prevented a crime.\nFOL: all x. (JuvenileDelinquent(x) -> PreventedACrime(x))\nTEXT: Some juvenile delinquents are products of broken violins.\nFOL: exists x. (JuvenileDelinquent(x) & ProductOf(x, BrokenViolin))\nTEXT: Some people who have prevented a crime are products of broken violins.\nFOL: exists x. (PreventedACrime(x) & ProductOf(x, BrokenViolin))\n\nANSWER: Uncertain given the premises. The premises do not guarantee that all people who have prevented a crime are also products of broken violins. However, the premises do allow for the possibility that some of them are.\nProcessed: Uncertain\n\nReference: True\n========================================"], "answers": ["Uncertain", "Uncertain", "Uncertain", "Uncertain", "Uncertain", "Uncertain", "True", "Uncertain", "Uncertain", "Uncertain"]}
{"idx": 52, "prompt": "The following is a first-order logic (FOL) problem.\nThe problem is to determine whether the conclusion follows from the premises.\nThe premises are given in the form of a set of first-order logic sentences.\nThe conclusion is given in the form of a single first-order logic sentence.\nThe task is to translate each of the premises and conclusions into FOL expressions.and then to evaluate the conclusion as ANSWER: True, ANSWER: False, or ANSWER: Uncertain given the premises. The output should follow format TEXT: \nFOL: \nTEXT: \nFOL:... ANSWER: \n\n\n<PREMISES>\nAll biodegradable things are environment-friendly.\nAll woodware is biodegradable.\nAll paper is woodware.\nNothing is a good thing and also a bad thing.\nAll environment-friendly things are good.\nA worksheet is either paper or environment-friendly.\n</PREMISES>\n<CONCLUSION>\nA worksheet is not biodegradable.\n</CONCLUSION>\n<EVALUATE>\nTEXT: All biodegradable things are environment-friendly.\nFOL: all x. (Biodegradable(x) -> EnvironmentFriendly(x))\nTEXT: All woodware is biodegradable.\nFOL: all x. (Woodware(x) -> Biodegradable(x))\nTEXT: All paper is woodware.\nFOL: all x. (Paper(x) -> Woodware(x))\nTEXT: Nothing is a good thing and also a bad thing.\nFOL: -(exists x. (Good(x) & Bad(x)))\nTEXT: All environment-friendly things are good.\nFOL: all x. (EnvironmentFriendly(x) -> Good(x))\nTEXT: A worksheet is either paper or environment-friendly.\nFOL: ((Paper(Worksheet) & -EnvironmentFriendly(Worksheet)) | (-Paper(Worksheet) & EnvironmentFriendly(Worksheet)))\nTEXT: A worksheet is not biodegradable.\nFOL: -Dispensable(Worksheet)\n\nANSWER: Uncertain\n</EVALUATE>\n\n<PREMISES>\nA La Liga soccer team ranks higher than another La Liga soccer team if it receives more points.\nIf there are two La Liga soccer teams and neither has more points than the other, then the team which receives more points from the games between the two teams ranks higher.\nReal Madrid and Barcelona are both La Liga soccer teams.\nReal Madrid received more points than Barcelona.\nNeither Real Madrid nor Barcelona received more points from the games between them.\n</PREMISES>\n<CONCLUSION>\nReal Madrid ranks higher than Barcelona.\n</CONCLUSION>\n<EVALUATE>\nTEXT: A La Liga soccer team ranks higher than another La Liga soccer team if it receives more points.\nFOL: all x. all y. (LaLigaSoccerTeam(x) & LaLigaSoccerTeam(y) & MorePoints(x, y) -> RankHigherThan(x, y))\nTEXT: If there are two La Liga soccer teams and neither has more points than the other, then the team which receives more points from the games between the two teams ranks higher.\nFOL: all x. all y. (LaLigaSoccerTeam(x) & LaLigaSoccerTeam(y) & -MorePoints(x, y) & -MorePoints(y, x) & MorePointsInGameBetween(x, y) ->  RankHigherThan(x, y))\nTEXT: Real Madrid and Barcelona are both La Liga soccer teams.\nFOL: LaLigaSoccerTeam(RealMadrid) & LaLigaSoccerTeam(Barcelona)\nTEXT: Real Madrid received more points than Barcelona.\nFOL: MorePoints(RealMadrid, Barcelona)\nTEXT: Neither Real Madrid nor Barcelona received more points from the games between them.\nFOL: -MorePointsInGameBetween(RealMadrid, Barcelona) & -MorePointsInGameBetween(Barcelona, RealMadrid)\nTEXT: Real Madrid ranks higher than Barcelona.\nFOL: HigherRank(RealMadrid, Barcelona)\n\nANSWER: True\n</EVALUATE>\n\n<PREMISES>\nAll professional athletes spend most of their time on sports.\nAll Olympic gold medal winners are professional athletes.\nNo full-time scientists spend the majority of their time on sports.\nAll Nobel physics laureates are full-time scientists.\nAmy spends the most time on sports, or Amy is an Olympic gold medal winner.\nIf Amy is not a Nobel physics laureate, then Amy is not an Olympic gold medal winner.\n</PREMISES>\n<CONCLUSION>\nIf Amy is not an Olympic gold medal winner, then Amy is a Nobel physics laureate.\n</CONCLUSION>\n<EVALUATE>\nTEXT: All professional athletes spend most of their time on sports.\nFOL: all x. (ProfessionalAthlete(x) -> SpendOn(x, MostOfTheirTime, Sports))\nTEXT: All Olympic gold medal winners are professional athletes.\nFOL: all x. (OlympicGoldMedalWinner(x) -> ProfessionalAthlete(x))\nTEXT: No full-time scientists spend the majority of their time on sports.\nFOL: all x. (FullTimeScientist(x) -> -SpendOn(x, MostOfTheirTime, Sports))\nTEXT: All Nobel physics laureates are full-time scientists.\nFOL: all x. (NobelPhysicsLaureate(x) -> FullTimeScientist(x))\nTEXT: Amy spends the most time on sports, or Amy is an Olympic gold medal winner.\nFOL: SpendOn(Amy, MostOfTheirTime, Sports) | OlympicGoldMedalWinner(Amy)\nTEXT: If Amy is not a Nobel physics laureate, then Amy is not an Olympic gold medal winner.\nFOL: -NobelPhysicsLaureate(Amy) -> -OlympicGoldMedalWinner(Amy)\nTEXT: If Amy is not an Olympic gold medal winner, then Amy is a Nobel physics laureate.\nFOL: -OlympicGoldMedalWinner(Amy) -> NobelLaureate(Amy)\n\nANSWER: False\n</EVALUATE>\n\n<PREMISES>\nIf a person pays their taxes, then they contribute to the country.\nEveryone who works for a government department pays a tax on their salary.\nEveryone in the army is an employee of a government department.\nEveryone convicted of murder goes to prison.\nEveryone who has been to prison has a criminal record.\nJames was either once convicted of murder, or spent time in prison.\nJames either has a criminal record, or pays his taxes.\n</PREMISES>\n<CONCLUSION>\nJames does not contribute to the country.\n</CONCLUSION>\n<EVALUATE>\nTEXT: If a person pays their taxes, then they contribute to the country.\nFOL: all x. (Taxpayer(x) -> ContributeTo(x, Country))\nTEXT: Everyone who works for a government department pays a tax on their salary.\nFOL: all x. (WorkFor(x, GovernmentAgency) -> Taxpayer(x))\nTEXT: Everyone in the army is an employee of a government department.\nFOL: all x. (ServesIn(x, TheArmy) -> WorkFor(x, GovernmentAgency))\nTEXT: Everyone convicted of murder goes to prison.\nFOL: all x. (SentencedForMurder(x) -> Imprisoned(x))\nTEXT: Everyone who has been to prison has a criminal record.\nFOL: all x. (Imprisoned((x) -> Has(x, CriminalRecord))\nTEXT: James was either once convicted of murder, or spent time in prison.\nFOL: ((SentencedForMurder(James) & -Imprisoned(James)) | (-SentencedForMurder(James) & Imprisoned(James)))\nTEXT: James either has a criminal record, or pays his taxes.\nFOL: ((Has(James, CriminalRecord) & -Taxpayer(James)) | (-Has(James, CriminalRecord) & Taxpayer(James)))\nTEXT: James does not contribute to the country.\nFOL: ContributeToCountry(James)\n\nANSWER: Uncertain\n</EVALUATE>\n\n<PREMISES>\nNo songs are visuals.\nAll folk songs are songs.\nAll videos are visuals.\nAll movies are videos.\nAll sci-fi movies are movies.\nInception is a sci-fi movie.\nMac is neither a folk song nor a sci-fi movie.\n</PREMISES>\n<CONCLUSION>\nInception is a folk song.\n</CONCLUSION>\n<EVALUATE>\nTEXT: No songs are visuals.\nFOL: all x. (Song(x) -> -Visual(x))\nTEXT: All folk songs are songs.\nFOL: all x. (FolkSong(x) -> Song(x))\nTEXT: All videos are visuals.\nFOL: all x. (Video(x) -> Visual(x))\nTEXT: All movies are videos.\nFOL: all x. (Movie(x) -> Video(x))\nTEXT: All sci-fi movies are movies.\nFOL: all x. (ScifiMovie(x) -> Movie(x))\nTEXT: Inception is a sci-fi movie.\nFOL: ScifiMovie(Inception)\nTEXT: Mac is neither a folk song nor a sci-fi movie.\nFOL: -FolkSong(Mac) & -ScifiMovie(Mac)\nTEXT: Inception is a folk song.\nFOL: FolkSong(Inception)\n\nANSWER: False\n</EVALUATE>\n\n<PREMISES>\nEvery chef can cook.\nSome people who aren’t chefs can cook.\nPeople who cook can make scrambled eggs and pasta.\nIf someone can make cookies and muffins, they are a baker.\nBakers who can also make scrambled eggs can make a good breakfast.\nLuke can make cookies, scrambled eggs, and muffins, but not pasta.\n</PREMISES>\n<CONCLUSION>\nLuke is a chef.\n</CONCLUSION>\n<EVALUATE>\nTEXT: Every chef can cook.\nFOL: all x. (Chef(x) -> Can(x, Cook))\nTEXT: Some people who aren’t chefs can cook.\nFOL: exists x. (-Chef(x) & Can(x, Cook))\nTEXT: People who cook can make scrambled eggs and pasta.\nFOL: all x. (Can(x, Cook) -> (CanMake(x, ScrambledEggs) & CanMake(x, Pasta)))\nTEXT: If someone can make cookies and muffins, they are a baker.\nFOL: all x. (CanMake(x, Cookies) & CanMake(x, Muffins) -> Baker(x))\nTEXT: Bakers who can also make scrambled eggs can make a good breakfast.\nFOL: all x. ((Baker(x) & CanMake(x, ScrambledEggs)) -> CanMake(x, GoodBreakfast))\nTEXT: Luke can make cookies, scrambled eggs, and muffins, but not pasta.\nFOL: CanMake(Luke, Cookies) & (CanMake(Luke, ScrambledEggs) & CanMake(Luke, Muffins) & -CanMake(Luke, Pasta)\nTEXT: Luke is a chef.\nFOL: MakeGoodBreakfast(Luke)\n\nANSWER: False\n</EVALUATE>\n\n<PREMISES>\nETS develops various standardized tests primarily in the United States for K-12 and higher education.\nETS administers international tests, including the TOEFL, TOEIC, GRE, and subject tests.\nMany of the assessments ETS develops are associated with entry to the US tertiary and quaternary education institutions.\nETS also develops K-12 statewide assessments used for accountability testing in many states.\n</PREMISES>\n<CONCLUSION>\nETS doesn't administer tests internationally.\n</CONCLUSION>\n<EVALUATE>\nTEXT: ETS develops various standardized tests primarily in the United States for K-12 and higher education.\nFOL: exists x. exists y. (Develop(eTS, x) & Develop(eTS, y) & StandardizedTest(x) & StandardizedTest(y) & In(x, UnitedState) & In(y, UnitedState) & For(x, kOneTwoAndHigherEducation) & For(y, kOneTwoAndHigherEducation))\nTEXT: ETS administers international tests, including the TOEFL, TOEIC, GRE, and subject tests.\nFOL: exists x. (Administer(eTS, x) & InternationalTest(x) & (TOEFL(x) | TOEIC(x) | GRE(x) | SubjectTest(x)))\nTEXT: Many of the assessments ETS develops are associated with entry to the US tertiary and quaternary education institutions.\nFOL: exists x. (Develop(eTS, x) & AssociatedWith(x, EntryToUSEducationInstitution))\nTEXT: ETS also develops K-12 statewide assessments used for accountability testing in many states.\nFOL: exists x. (Develop(eTS, x) & StateWideAssesment(x) & UsedFor(x, AccountabilityTesting))\nTEXT: ETS doesn't administer tests internationally.\nFOL: exists x. (Develops(Ets, x) & For(x, k-OneTwoandhighereducation)) & exists x. (Develops(Ets, x) & AssociatedWith(x, Entrytouseducationinstitutions))\n\nANSWER: False\n</EVALUATE>\n\n<PREMISES>\nDaveed Diggs is an actor and film producer.\nDaveed Diggs played two roles in the musical Hamilton on Broadway.\nOne of the actors from Hamilton won the best actor award.\nThe actor playing Thomas Jefferson won the best actor award.\nDaveed Diggs played Thomas Jefferson.\nMusicals on Broadway are not films.\n</PREMISES>\n<CONCLUSION>\nDaveed Diggs won the best actor award.\n</CONCLUSION>\n<EVALUATE>\nTEXT: Daveed Diggs is an actor and film producer.\nFOL: Actor(DaveedDiggs) & FilmProducer(DaveedDiggs)\nTEXT: Daveed Diggs played two roles in the musical Hamilton on Broadway.\nFOL: exists x. exists y.(PlaysIn(DaveedDiggs, x, Hamilton) & (-(x=y)) & PlaysIn(DaveedDiggs, y, Hamilton)) & OnBroadway(Hamilton) & Musical(Hamilton)\nTEXT: One of the actors from Hamilton won the best actor award.\nFOL: exists x. exists y.(Actor(x) & PlaysIn(x, y, Hamilton) & Wins(x, BestActorAward))\nTEXT: The actor playing Thomas Jefferson won the best actor award.\nFOL: exists x. (Actor(x) & PlaysIn(x, ThomasJefferson, Hamilton) & Wins(x, BestActorAward))\nTEXT: Daveed Diggs played Thomas Jefferson.\nFOL: Plays(DaveedDiggs, ThomasJefferson)\nTEXT: Musicals on Broadway are not films.\nFOL: all x. ((Musical(x) & OnBroadway(x)) -> -Film(x))\nTEXT: Daveed Diggs won the best actor award.\nFOL: exists x. (BRICS(x) & Speaks(x, Hindi))\n\nANSWER: True\n</EVALUATE>\n\n<PREMISES>\nCorgis are plants.\nSome invisible things are corgis.\n</PREMISES>\n<CONCLUSION>\nSome invisible things are plants.\n</CONCLUSION>\n<EVALUATE>", "raw_generations": ["Generation 1:\nTEXT: Corgis are plants.\nFOL: all x. (Corgi(x) -> Plant(x))\nTEXT: Some invisible things are corgis.\nFOL: exists x. (Invisible(x) & Corgi(x))\nTEXT: Some invisible things are plants.\nFOL: exists x. (Invisible(x) & Plant(x))\n\nANSWER: Uncertain (since the premises do not provide any information about plants being invisible)\nProcessed: Uncertain", "Generation 2:\nTEXT: Corgis are plants.\nFOL: Plant(Corgi)\n\nTEXT: Some invisible things are corgis.\nFOL: exists x. Invisible(x) & Corgi(x)\n\nTEXT: Some invisible things are plants.\nFOL: exists x. Invisible(x) & Plant(x)\n\nSince we are given that Corgis are plants, but not that all invisible things are plants, we cannot conclude that some invisible things are plants with certainty. Therefore, the answer is ANSWER: Uncertain given the premises.\nProcessed: Uncertain", "Generation 3:\nTEXT: Corgis are plants.\nFOL: Plant(Corgi)\nTEXT: Some invisible things are corgis.\nFOL: exists x. Invisible(x) & Corgi(x)\nTEXT: Some invisible things are plants.\nFOL: exists x. Invisible(x) & Plant(x)\n\nANSWER: Uncertain (given the premises, it's not possible to conclude that some invisible things are plants)\nProcessed: Uncertain", "Generation 4:\nTEXT: Corgis are plants.\nFOL: all x. (Corgi(x) -> Plant(x))\nTEXT: Some invisible things are corgis.\nFOL: exists x. Invisible(x) & Corgi(x)\nTEXT: Some invisible things are plants.\nFOL: exists x. (Invisible(x) & Plant(x))\n\nANSWER: Uncertain given the premises (since corgis are not plants) but the conclusion is false given the premises (since no corgis are invisible).\nProcessed: Uncertain", "Generation 5:\nTEXT: Corgis are plants.\nFOL: all x. (Corgi(x) -> Plant(x))\nTEXT: Some invisible things are corgis.\nFOL: exists x. (Invisible(x) & Corgi(x))\nTEXT: Some invisible things are plants.\nFOL: exists x. (Invisible(x) & Plant(x))\n\nANSWER: Uncertain (Given the premises, it is uncertain whether some invisible things are plants)\nProcessed: Uncertain", "Generation 6:\nTEXT: Corgis are plants.\nFOL: all x. (Corgi(x) -> Plant(x))\nTEXT: Some invisible things are corgis.\nFOL: exists x. Invisible(x) & Corgi(x)\nTEXT: Some invisible things are plants.\nFOL: exists x. (Invisible(x) & Plant(x))\n\nANSWER: Uncertain given the premises. However, since corgis are not plants in reality, the conclusion is false.\nProcessed: Uncertain", "Generation 7:\nTEXT: Corgis are plants.\nFOL: all x. (Corgi(x) -> Plant(x))\nTEXT: Some invisible things are corgis.\nFOL: exists x. (Invisible(x) & Corgi(x))\nTEXT: Some invisible things are plants.\nFOL: exists x. (Invisible(x) & Plant(x))\n\nANSWER: Uncertain given the premises\nProcessed: Uncertain", "Generation 8:\nTEXT: Corgis are plants.\nFOL: Plant(Corgis)\nTEXT: Some invisible things are corgis.\nFOL: exists x. (Invisible(x) & Corgis(x))\nTEXT: Some invisible things are plants.\nFOL: exists x. (Invisible(x) & Plant(x))\n\nANSWER: Uncertain given the premises\nProcessed: Uncertain", "Generation 9:\nTEXT: Corgis are plants.\nFOL: Plant(Corgi)\nTEXT: Some invisible things are corgis.\nFOL: exists x. (Invisible(x) & Corgi(x))\nTEXT: Some invisible things are plants.\nFOL: exists x. (Invisible(x) & Plant(x))\n\nANSWER: Uncertain given the premises. (The conclusion cannot be definitively determined true or false based on the given premises.)\nProcessed: Uncertain", "Generation 10:\nTEXT: Corgis are plants.\nFOL: Plant(Corgi)\nTEXT: Some invisible things are corgis.\nFOL: exists x. (Invisible(x) & Corgi(x))\nTEXT: Some invisible things are plants.\nFOL: exists x. (Invisible(x) & Plant(x))\n\nANSWER: Uncertain given the premises. The conclusion is not directly supported by the premises.\nProcessed: Uncertain\n\nReference: True\n========================================"], "answers": ["Uncertain", "Uncertain", "Uncertain", "Uncertain", "Uncertain", "Uncertain", "Uncertain", "Uncertain", "Uncertain", "Uncertain"]}
{"idx": 53, "prompt": "The following is a first-order logic (FOL) problem.\nThe problem is to determine whether the conclusion follows from the premises.\nThe premises are given in the form of a set of first-order logic sentences.\nThe conclusion is given in the form of a single first-order logic sentence.\nThe task is to translate each of the premises and conclusions into FOL expressions.and then to evaluate the conclusion as ANSWER: True, ANSWER: False, or ANSWER: Uncertain given the premises. The output should follow format TEXT: \nFOL: \nTEXT: \nFOL:... ANSWER: \n\n\n<PREMISES>\nAll biodegradable things are environment-friendly.\nAll woodware is biodegradable.\nAll paper is woodware.\nNothing is a good thing and also a bad thing.\nAll environment-friendly things are good.\nA worksheet is either paper or environment-friendly.\n</PREMISES>\n<CONCLUSION>\nA worksheet is not biodegradable.\n</CONCLUSION>\n<EVALUATE>\nTEXT: All biodegradable things are environment-friendly.\nFOL: all x. (Biodegradable(x) -> EnvironmentFriendly(x))\nTEXT: All woodware is biodegradable.\nFOL: all x. (Woodware(x) -> Biodegradable(x))\nTEXT: All paper is woodware.\nFOL: all x. (Paper(x) -> Woodware(x))\nTEXT: Nothing is a good thing and also a bad thing.\nFOL: -(exists x. (Good(x) & Bad(x)))\nTEXT: All environment-friendly things are good.\nFOL: all x. (EnvironmentFriendly(x) -> Good(x))\nTEXT: A worksheet is either paper or environment-friendly.\nFOL: ((Paper(Worksheet) & -EnvironmentFriendly(Worksheet)) | (-Paper(Worksheet) & EnvironmentFriendly(Worksheet)))\nTEXT: A worksheet is not biodegradable.\nFOL: -Dispensable(Worksheet)\n\nANSWER: Uncertain\n</EVALUATE>\n\n<PREMISES>\nA La Liga soccer team ranks higher than another La Liga soccer team if it receives more points.\nIf there are two La Liga soccer teams and neither has more points than the other, then the team which receives more points from the games between the two teams ranks higher.\nReal Madrid and Barcelona are both La Liga soccer teams.\nReal Madrid received more points than Barcelona.\nNeither Real Madrid nor Barcelona received more points from the games between them.\n</PREMISES>\n<CONCLUSION>\nReal Madrid ranks higher than Barcelona.\n</CONCLUSION>\n<EVALUATE>\nTEXT: A La Liga soccer team ranks higher than another La Liga soccer team if it receives more points.\nFOL: all x. all y. (LaLigaSoccerTeam(x) & LaLigaSoccerTeam(y) & MorePoints(x, y) -> RankHigherThan(x, y))\nTEXT: If there are two La Liga soccer teams and neither has more points than the other, then the team which receives more points from the games between the two teams ranks higher.\nFOL: all x. all y. (LaLigaSoccerTeam(x) & LaLigaSoccerTeam(y) & -MorePoints(x, y) & -MorePoints(y, x) & MorePointsInGameBetween(x, y) ->  RankHigherThan(x, y))\nTEXT: Real Madrid and Barcelona are both La Liga soccer teams.\nFOL: LaLigaSoccerTeam(RealMadrid) & LaLigaSoccerTeam(Barcelona)\nTEXT: Real Madrid received more points than Barcelona.\nFOL: MorePoints(RealMadrid, Barcelona)\nTEXT: Neither Real Madrid nor Barcelona received more points from the games between them.\nFOL: -MorePointsInGameBetween(RealMadrid, Barcelona) & -MorePointsInGameBetween(Barcelona, RealMadrid)\nTEXT: Real Madrid ranks higher than Barcelona.\nFOL: HigherRank(RealMadrid, Barcelona)\n\nANSWER: True\n</EVALUATE>\n\n<PREMISES>\nAll professional athletes spend most of their time on sports.\nAll Olympic gold medal winners are professional athletes.\nNo full-time scientists spend the majority of their time on sports.\nAll Nobel physics laureates are full-time scientists.\nAmy spends the most time on sports, or Amy is an Olympic gold medal winner.\nIf Amy is not a Nobel physics laureate, then Amy is not an Olympic gold medal winner.\n</PREMISES>\n<CONCLUSION>\nIf Amy is not an Olympic gold medal winner, then Amy is a Nobel physics laureate.\n</CONCLUSION>\n<EVALUATE>\nTEXT: All professional athletes spend most of their time on sports.\nFOL: all x. (ProfessionalAthlete(x) -> SpendOn(x, MostOfTheirTime, Sports))\nTEXT: All Olympic gold medal winners are professional athletes.\nFOL: all x. (OlympicGoldMedalWinner(x) -> ProfessionalAthlete(x))\nTEXT: No full-time scientists spend the majority of their time on sports.\nFOL: all x. (FullTimeScientist(x) -> -SpendOn(x, MostOfTheirTime, Sports))\nTEXT: All Nobel physics laureates are full-time scientists.\nFOL: all x. (NobelPhysicsLaureate(x) -> FullTimeScientist(x))\nTEXT: Amy spends the most time on sports, or Amy is an Olympic gold medal winner.\nFOL: SpendOn(Amy, MostOfTheirTime, Sports) | OlympicGoldMedalWinner(Amy)\nTEXT: If Amy is not a Nobel physics laureate, then Amy is not an Olympic gold medal winner.\nFOL: -NobelPhysicsLaureate(Amy) -> -OlympicGoldMedalWinner(Amy)\nTEXT: If Amy is not an Olympic gold medal winner, then Amy is a Nobel physics laureate.\nFOL: -OlympicGoldMedalWinner(Amy) -> NobelLaureate(Amy)\n\nANSWER: False\n</EVALUATE>\n\n<PREMISES>\nIf a person pays their taxes, then they contribute to the country.\nEveryone who works for a government department pays a tax on their salary.\nEveryone in the army is an employee of a government department.\nEveryone convicted of murder goes to prison.\nEveryone who has been to prison has a criminal record.\nJames was either once convicted of murder, or spent time in prison.\nJames either has a criminal record, or pays his taxes.\n</PREMISES>\n<CONCLUSION>\nJames does not contribute to the country.\n</CONCLUSION>\n<EVALUATE>\nTEXT: If a person pays their taxes, then they contribute to the country.\nFOL: all x. (Taxpayer(x) -> ContributeTo(x, Country))\nTEXT: Everyone who works for a government department pays a tax on their salary.\nFOL: all x. (WorkFor(x, GovernmentAgency) -> Taxpayer(x))\nTEXT: Everyone in the army is an employee of a government department.\nFOL: all x. (ServesIn(x, TheArmy) -> WorkFor(x, GovernmentAgency))\nTEXT: Everyone convicted of murder goes to prison.\nFOL: all x. (SentencedForMurder(x) -> Imprisoned(x))\nTEXT: Everyone who has been to prison has a criminal record.\nFOL: all x. (Imprisoned((x) -> Has(x, CriminalRecord))\nTEXT: James was either once convicted of murder, or spent time in prison.\nFOL: ((SentencedForMurder(James) & -Imprisoned(James)) | (-SentencedForMurder(James) & Imprisoned(James)))\nTEXT: James either has a criminal record, or pays his taxes.\nFOL: ((Has(James, CriminalRecord) & -Taxpayer(James)) | (-Has(James, CriminalRecord) & Taxpayer(James)))\nTEXT: James does not contribute to the country.\nFOL: ContributeToCountry(James)\n\nANSWER: Uncertain\n</EVALUATE>\n\n<PREMISES>\nNo songs are visuals.\nAll folk songs are songs.\nAll videos are visuals.\nAll movies are videos.\nAll sci-fi movies are movies.\nInception is a sci-fi movie.\nMac is neither a folk song nor a sci-fi movie.\n</PREMISES>\n<CONCLUSION>\nInception is a folk song.\n</CONCLUSION>\n<EVALUATE>\nTEXT: No songs are visuals.\nFOL: all x. (Song(x) -> -Visual(x))\nTEXT: All folk songs are songs.\nFOL: all x. (FolkSong(x) -> Song(x))\nTEXT: All videos are visuals.\nFOL: all x. (Video(x) -> Visual(x))\nTEXT: All movies are videos.\nFOL: all x. (Movie(x) -> Video(x))\nTEXT: All sci-fi movies are movies.\nFOL: all x. (ScifiMovie(x) -> Movie(x))\nTEXT: Inception is a sci-fi movie.\nFOL: ScifiMovie(Inception)\nTEXT: Mac is neither a folk song nor a sci-fi movie.\nFOL: -FolkSong(Mac) & -ScifiMovie(Mac)\nTEXT: Inception is a folk song.\nFOL: FolkSong(Inception)\n\nANSWER: False\n</EVALUATE>\n\n<PREMISES>\nEvery chef can cook.\nSome people who aren’t chefs can cook.\nPeople who cook can make scrambled eggs and pasta.\nIf someone can make cookies and muffins, they are a baker.\nBakers who can also make scrambled eggs can make a good breakfast.\nLuke can make cookies, scrambled eggs, and muffins, but not pasta.\n</PREMISES>\n<CONCLUSION>\nLuke is a chef.\n</CONCLUSION>\n<EVALUATE>\nTEXT: Every chef can cook.\nFOL: all x. (Chef(x) -> Can(x, Cook))\nTEXT: Some people who aren’t chefs can cook.\nFOL: exists x. (-Chef(x) & Can(x, Cook))\nTEXT: People who cook can make scrambled eggs and pasta.\nFOL: all x. (Can(x, Cook) -> (CanMake(x, ScrambledEggs) & CanMake(x, Pasta)))\nTEXT: If someone can make cookies and muffins, they are a baker.\nFOL: all x. (CanMake(x, Cookies) & CanMake(x, Muffins) -> Baker(x))\nTEXT: Bakers who can also make scrambled eggs can make a good breakfast.\nFOL: all x. ((Baker(x) & CanMake(x, ScrambledEggs)) -> CanMake(x, GoodBreakfast))\nTEXT: Luke can make cookies, scrambled eggs, and muffins, but not pasta.\nFOL: CanMake(Luke, Cookies) & (CanMake(Luke, ScrambledEggs) & CanMake(Luke, Muffins) & -CanMake(Luke, Pasta)\nTEXT: Luke is a chef.\nFOL: MakeGoodBreakfast(Luke)\n\nANSWER: False\n</EVALUATE>\n\n<PREMISES>\nETS develops various standardized tests primarily in the United States for K-12 and higher education.\nETS administers international tests, including the TOEFL, TOEIC, GRE, and subject tests.\nMany of the assessments ETS develops are associated with entry to the US tertiary and quaternary education institutions.\nETS also develops K-12 statewide assessments used for accountability testing in many states.\n</PREMISES>\n<CONCLUSION>\nETS doesn't administer tests internationally.\n</CONCLUSION>\n<EVALUATE>\nTEXT: ETS develops various standardized tests primarily in the United States for K-12 and higher education.\nFOL: exists x. exists y. (Develop(eTS, x) & Develop(eTS, y) & StandardizedTest(x) & StandardizedTest(y) & In(x, UnitedState) & In(y, UnitedState) & For(x, kOneTwoAndHigherEducation) & For(y, kOneTwoAndHigherEducation))\nTEXT: ETS administers international tests, including the TOEFL, TOEIC, GRE, and subject tests.\nFOL: exists x. (Administer(eTS, x) & InternationalTest(x) & (TOEFL(x) | TOEIC(x) | GRE(x) | SubjectTest(x)))\nTEXT: Many of the assessments ETS develops are associated with entry to the US tertiary and quaternary education institutions.\nFOL: exists x. (Develop(eTS, x) & AssociatedWith(x, EntryToUSEducationInstitution))\nTEXT: ETS also develops K-12 statewide assessments used for accountability testing in many states.\nFOL: exists x. (Develop(eTS, x) & StateWideAssesment(x) & UsedFor(x, AccountabilityTesting))\nTEXT: ETS doesn't administer tests internationally.\nFOL: exists x. (Develops(Ets, x) & For(x, k-OneTwoandhighereducation)) & exists x. (Develops(Ets, x) & AssociatedWith(x, Entrytouseducationinstitutions))\n\nANSWER: False\n</EVALUATE>\n\n<PREMISES>\nDaveed Diggs is an actor and film producer.\nDaveed Diggs played two roles in the musical Hamilton on Broadway.\nOne of the actors from Hamilton won the best actor award.\nThe actor playing Thomas Jefferson won the best actor award.\nDaveed Diggs played Thomas Jefferson.\nMusicals on Broadway are not films.\n</PREMISES>\n<CONCLUSION>\nDaveed Diggs won the best actor award.\n</CONCLUSION>\n<EVALUATE>\nTEXT: Daveed Diggs is an actor and film producer.\nFOL: Actor(DaveedDiggs) & FilmProducer(DaveedDiggs)\nTEXT: Daveed Diggs played two roles in the musical Hamilton on Broadway.\nFOL: exists x. exists y.(PlaysIn(DaveedDiggs, x, Hamilton) & (-(x=y)) & PlaysIn(DaveedDiggs, y, Hamilton)) & OnBroadway(Hamilton) & Musical(Hamilton)\nTEXT: One of the actors from Hamilton won the best actor award.\nFOL: exists x. exists y.(Actor(x) & PlaysIn(x, y, Hamilton) & Wins(x, BestActorAward))\nTEXT: The actor playing Thomas Jefferson won the best actor award.\nFOL: exists x. (Actor(x) & PlaysIn(x, ThomasJefferson, Hamilton) & Wins(x, BestActorAward))\nTEXT: Daveed Diggs played Thomas Jefferson.\nFOL: Plays(DaveedDiggs, ThomasJefferson)\nTEXT: Musicals on Broadway are not films.\nFOL: all x. ((Musical(x) & OnBroadway(x)) -> -Film(x))\nTEXT: Daveed Diggs won the best actor award.\nFOL: exists x. (BRICS(x) & Speaks(x, Hindi))\n\nANSWER: True\n</EVALUATE>\n\n<PREMISES>\nBulbophyllum attenuatum is in the genus Dendrobium.\nAll Dendrobium are animals.\n</PREMISES>\n<CONCLUSION>\nBulbophyllum attenuatum is not an animal.\n</CONCLUSION>\n<EVALUATE>", "raw_generations": ["Generation 1:\nTEXT: Bulbophyllum attenuatum is in the genus Dendrobium.\nFOL: GenusOf(BulbophyllumAttenuatum, Dendrobium)\nTEXT: All Dendrobium are animals.\nFOL: all x. (Dendrobium(x) -> Animal(x))\nTEXT: Bulbophyllum attenuatum is not an animal.\nFOL: -Animal(BulbophyllumAttenuatum)\n\nANSWER: True\nProcessed: True", "Generation 2:\nTEXT: Bulbophyllum attenuatum is in the genus Dendrobium.\nFOL: GenusOf(BulbophyllumAttenuatum, Dendrobium)\nTEXT: All Dendrobium are animals.\nFOL: all x. (Dendrobium(x) -> Animal(x))\nTEXT: Bulbophyllum attenuatum is not an animal.\nFOL: -Animal(BulbophyllumAttenuatum)\n\nANSWER: True\nProcessed: True", "Generation 3:\nTEXT: Bulbophyllum attenuatum is in the genus Dendrobium.\nFOL: BelongsTo(BulbophyllumAttenuatum, Dendrobium)\nTEXT: All Dendrobium are animals.\nFOL: all x. (Dendrobium(x) -> Animal(x))\nTEXT: Bulbophyllum attenuatum is not an animal.\nFOL: -Animal(BulbophyllumAttenuatum)\n\nANSWER: True\nProcessed: True", "Generation 4:\nTEXT: Bulbophyllum attenuatum is in the genus Dendrobium.\nFOL: GenusOf(BulbophyllumAttenuatum, Dendrobium)\nTEXT: All Dendrobium are animals.\nFOL: all x. (Dendrobium(x) -> Animal(x))\nTEXT: Bulbophyllum attenuatum is not an animal.\nFOL: -Animal(BulbophyllumAttenuatum)\n\nANSWER: True\nProcessed: True", "Generation 5:\nTEXT: Bulbophyllum attenuatum is in the genus Dendrobium.\nFOL: Genus(BulbophyllumAttenuatum, Dendrobium)\nTEXT: All Dendrobium are animals.\nFOL: all x. (Dendrobium(x) -> Animal(x))\nTEXT: Bulbophyllum attenuatum is not an animal.\nFOL: -Animal(BulbophyllumAttenuatum)\n\nANSWER: True\nProcessed: True", "Generation 6:\nTEXT: Bulbophyllum attenuatum is in the genus Dendrobium.\nFOL: GenusOf(BulbophyllumAttenuatum, Dendrobium)\nTEXT: All Dendrobium are animals.\nFOL: all x. (Dendrobium(x) -> Animal(x))\nTEXT: Bulbophyllum attenuatum is not an animal.\nFOL: -Animal(BulbophyllumAttenuatum)\n\nANSWER: True\nProcessed: True", "Generation 7:\nTEXT: Bulbophyllum attenuatum is in the genus Dendrobium.\nFOL: Genus(BulbophyllumAttenuatum, Dendrobium)\nTEXT: All Dendrobium are animals.\nFOL: all x. (Dendrobium(x) -> Animal(x))\nTEXT: Bulbophyllum attenuatum is not an animal.\nFOL: -Animal(BulbophyllumAttenuatum)\n\nANSWER: True\nProcessed: True", "Generation 8:\nTEXT: Bulbophyllum attenuatum is in the genus Dendrobium.\nFOL: GenusOf(BulbophyllumAttenuatum, Dendrobium)\nTEXT: All Dendrobium are animals.\nFOL: all x. (Dendrobium(x) -> Animal(x))\nTEXT: Bulbophyllum attenuatum is not an animal.\nFOL: -Animal(BulbophyllumAttenuatum)\n\nANSWER: True\nProcessed: True", "Generation 9:\nFOL:\nAll x. (Bulbophyllum_attenuatum(x) -> Dendrobium(x))\nall y. (Dendrobium(y) -> Animal(y))\n\nTEXT: Bulbophyllum attenuatum is in the genus Dendrobium.\nFOL: Bulbophyllum_attenuatum(x) & Dendrobium(x)\n\nTEXT: All Dendrobium are animals.\nFOL: all y. (Dendrobium(y) -> Animal(y))\n\nTEXT: Bulbophyllum attenuatum is not an animal.\nFOL: -Animal(Bulbophyllum_attenuatum)\n\nANSWER: True\nProcessed: True", "Generation 10:\nTEXT: Bulbophyllum attenuatum is in the genus Dendrobium.\nFOL: Genus(BulbophyllumAttenuatum, Dendrobium)\nTEXT: All Dendrobium are animals.\nFOL: all x. (Dendrobium(x) -> Animal(x))\nTEXT: Bulbophyllum attenuatum is not an animal.\nFOL: -Animal(BulbophyllumAttenuatum)\n\nANSWER: True\nProcessed: True\n\nReference: False\n========================================"], "answers": ["True", "True", "True", "True", "True", "True", "True", "True", "True", "True"]}
{"idx": 54, "prompt": "The following is a first-order logic (FOL) problem.\nThe problem is to determine whether the conclusion follows from the premises.\nThe premises are given in the form of a set of first-order logic sentences.\nThe conclusion is given in the form of a single first-order logic sentence.\nThe task is to translate each of the premises and conclusions into FOL expressions.and then to evaluate the conclusion as ANSWER: True, ANSWER: False, or ANSWER: Uncertain given the premises. The output should follow format TEXT: \nFOL: \nTEXT: \nFOL:... ANSWER: \n\n\n<PREMISES>\nAll biodegradable things are environment-friendly.\nAll woodware is biodegradable.\nAll paper is woodware.\nNothing is a good thing and also a bad thing.\nAll environment-friendly things are good.\nA worksheet is either paper or environment-friendly.\n</PREMISES>\n<CONCLUSION>\nA worksheet is not biodegradable.\n</CONCLUSION>\n<EVALUATE>\nTEXT: All biodegradable things are environment-friendly.\nFOL: all x. (Biodegradable(x) -> EnvironmentFriendly(x))\nTEXT: All woodware is biodegradable.\nFOL: all x. (Woodware(x) -> Biodegradable(x))\nTEXT: All paper is woodware.\nFOL: all x. (Paper(x) -> Woodware(x))\nTEXT: Nothing is a good thing and also a bad thing.\nFOL: -(exists x. (Good(x) & Bad(x)))\nTEXT: All environment-friendly things are good.\nFOL: all x. (EnvironmentFriendly(x) -> Good(x))\nTEXT: A worksheet is either paper or environment-friendly.\nFOL: ((Paper(Worksheet) & -EnvironmentFriendly(Worksheet)) | (-Paper(Worksheet) & EnvironmentFriendly(Worksheet)))\nTEXT: A worksheet is not biodegradable.\nFOL: -Dispensable(Worksheet)\n\nANSWER: Uncertain\n</EVALUATE>\n\n<PREMISES>\nA La Liga soccer team ranks higher than another La Liga soccer team if it receives more points.\nIf there are two La Liga soccer teams and neither has more points than the other, then the team which receives more points from the games between the two teams ranks higher.\nReal Madrid and Barcelona are both La Liga soccer teams.\nReal Madrid received more points than Barcelona.\nNeither Real Madrid nor Barcelona received more points from the games between them.\n</PREMISES>\n<CONCLUSION>\nReal Madrid ranks higher than Barcelona.\n</CONCLUSION>\n<EVALUATE>\nTEXT: A La Liga soccer team ranks higher than another La Liga soccer team if it receives more points.\nFOL: all x. all y. (LaLigaSoccerTeam(x) & LaLigaSoccerTeam(y) & MorePoints(x, y) -> RankHigherThan(x, y))\nTEXT: If there are two La Liga soccer teams and neither has more points than the other, then the team which receives more points from the games between the two teams ranks higher.\nFOL: all x. all y. (LaLigaSoccerTeam(x) & LaLigaSoccerTeam(y) & -MorePoints(x, y) & -MorePoints(y, x) & MorePointsInGameBetween(x, y) ->  RankHigherThan(x, y))\nTEXT: Real Madrid and Barcelona are both La Liga soccer teams.\nFOL: LaLigaSoccerTeam(RealMadrid) & LaLigaSoccerTeam(Barcelona)\nTEXT: Real Madrid received more points than Barcelona.\nFOL: MorePoints(RealMadrid, Barcelona)\nTEXT: Neither Real Madrid nor Barcelona received more points from the games between them.\nFOL: -MorePointsInGameBetween(RealMadrid, Barcelona) & -MorePointsInGameBetween(Barcelona, RealMadrid)\nTEXT: Real Madrid ranks higher than Barcelona.\nFOL: HigherRank(RealMadrid, Barcelona)\n\nANSWER: True\n</EVALUATE>\n\n<PREMISES>\nAll professional athletes spend most of their time on sports.\nAll Olympic gold medal winners are professional athletes.\nNo full-time scientists spend the majority of their time on sports.\nAll Nobel physics laureates are full-time scientists.\nAmy spends the most time on sports, or Amy is an Olympic gold medal winner.\nIf Amy is not a Nobel physics laureate, then Amy is not an Olympic gold medal winner.\n</PREMISES>\n<CONCLUSION>\nIf Amy is not an Olympic gold medal winner, then Amy is a Nobel physics laureate.\n</CONCLUSION>\n<EVALUATE>\nTEXT: All professional athletes spend most of their time on sports.\nFOL: all x. (ProfessionalAthlete(x) -> SpendOn(x, MostOfTheirTime, Sports))\nTEXT: All Olympic gold medal winners are professional athletes.\nFOL: all x. (OlympicGoldMedalWinner(x) -> ProfessionalAthlete(x))\nTEXT: No full-time scientists spend the majority of their time on sports.\nFOL: all x. (FullTimeScientist(x) -> -SpendOn(x, MostOfTheirTime, Sports))\nTEXT: All Nobel physics laureates are full-time scientists.\nFOL: all x. (NobelPhysicsLaureate(x) -> FullTimeScientist(x))\nTEXT: Amy spends the most time on sports, or Amy is an Olympic gold medal winner.\nFOL: SpendOn(Amy, MostOfTheirTime, Sports) | OlympicGoldMedalWinner(Amy)\nTEXT: If Amy is not a Nobel physics laureate, then Amy is not an Olympic gold medal winner.\nFOL: -NobelPhysicsLaureate(Amy) -> -OlympicGoldMedalWinner(Amy)\nTEXT: If Amy is not an Olympic gold medal winner, then Amy is a Nobel physics laureate.\nFOL: -OlympicGoldMedalWinner(Amy) -> NobelLaureate(Amy)\n\nANSWER: False\n</EVALUATE>\n\n<PREMISES>\nIf a person pays their taxes, then they contribute to the country.\nEveryone who works for a government department pays a tax on their salary.\nEveryone in the army is an employee of a government department.\nEveryone convicted of murder goes to prison.\nEveryone who has been to prison has a criminal record.\nJames was either once convicted of murder, or spent time in prison.\nJames either has a criminal record, or pays his taxes.\n</PREMISES>\n<CONCLUSION>\nJames does not contribute to the country.\n</CONCLUSION>\n<EVALUATE>\nTEXT: If a person pays their taxes, then they contribute to the country.\nFOL: all x. (Taxpayer(x) -> ContributeTo(x, Country))\nTEXT: Everyone who works for a government department pays a tax on their salary.\nFOL: all x. (WorkFor(x, GovernmentAgency) -> Taxpayer(x))\nTEXT: Everyone in the army is an employee of a government department.\nFOL: all x. (ServesIn(x, TheArmy) -> WorkFor(x, GovernmentAgency))\nTEXT: Everyone convicted of murder goes to prison.\nFOL: all x. (SentencedForMurder(x) -> Imprisoned(x))\nTEXT: Everyone who has been to prison has a criminal record.\nFOL: all x. (Imprisoned((x) -> Has(x, CriminalRecord))\nTEXT: James was either once convicted of murder, or spent time in prison.\nFOL: ((SentencedForMurder(James) & -Imprisoned(James)) | (-SentencedForMurder(James) & Imprisoned(James)))\nTEXT: James either has a criminal record, or pays his taxes.\nFOL: ((Has(James, CriminalRecord) & -Taxpayer(James)) | (-Has(James, CriminalRecord) & Taxpayer(James)))\nTEXT: James does not contribute to the country.\nFOL: ContributeToCountry(James)\n\nANSWER: Uncertain\n</EVALUATE>\n\n<PREMISES>\nNo songs are visuals.\nAll folk songs are songs.\nAll videos are visuals.\nAll movies are videos.\nAll sci-fi movies are movies.\nInception is a sci-fi movie.\nMac is neither a folk song nor a sci-fi movie.\n</PREMISES>\n<CONCLUSION>\nInception is a folk song.\n</CONCLUSION>\n<EVALUATE>\nTEXT: No songs are visuals.\nFOL: all x. (Song(x) -> -Visual(x))\nTEXT: All folk songs are songs.\nFOL: all x. (FolkSong(x) -> Song(x))\nTEXT: All videos are visuals.\nFOL: all x. (Video(x) -> Visual(x))\nTEXT: All movies are videos.\nFOL: all x. (Movie(x) -> Video(x))\nTEXT: All sci-fi movies are movies.\nFOL: all x. (ScifiMovie(x) -> Movie(x))\nTEXT: Inception is a sci-fi movie.\nFOL: ScifiMovie(Inception)\nTEXT: Mac is neither a folk song nor a sci-fi movie.\nFOL: -FolkSong(Mac) & -ScifiMovie(Mac)\nTEXT: Inception is a folk song.\nFOL: FolkSong(Inception)\n\nANSWER: False\n</EVALUATE>\n\n<PREMISES>\nEvery chef can cook.\nSome people who aren’t chefs can cook.\nPeople who cook can make scrambled eggs and pasta.\nIf someone can make cookies and muffins, they are a baker.\nBakers who can also make scrambled eggs can make a good breakfast.\nLuke can make cookies, scrambled eggs, and muffins, but not pasta.\n</PREMISES>\n<CONCLUSION>\nLuke is a chef.\n</CONCLUSION>\n<EVALUATE>\nTEXT: Every chef can cook.\nFOL: all x. (Chef(x) -> Can(x, Cook))\nTEXT: Some people who aren’t chefs can cook.\nFOL: exists x. (-Chef(x) & Can(x, Cook))\nTEXT: People who cook can make scrambled eggs and pasta.\nFOL: all x. (Can(x, Cook) -> (CanMake(x, ScrambledEggs) & CanMake(x, Pasta)))\nTEXT: If someone can make cookies and muffins, they are a baker.\nFOL: all x. (CanMake(x, Cookies) & CanMake(x, Muffins) -> Baker(x))\nTEXT: Bakers who can also make scrambled eggs can make a good breakfast.\nFOL: all x. ((Baker(x) & CanMake(x, ScrambledEggs)) -> CanMake(x, GoodBreakfast))\nTEXT: Luke can make cookies, scrambled eggs, and muffins, but not pasta.\nFOL: CanMake(Luke, Cookies) & (CanMake(Luke, ScrambledEggs) & CanMake(Luke, Muffins) & -CanMake(Luke, Pasta)\nTEXT: Luke is a chef.\nFOL: MakeGoodBreakfast(Luke)\n\nANSWER: False\n</EVALUATE>\n\n<PREMISES>\nETS develops various standardized tests primarily in the United States for K-12 and higher education.\nETS administers international tests, including the TOEFL, TOEIC, GRE, and subject tests.\nMany of the assessments ETS develops are associated with entry to the US tertiary and quaternary education institutions.\nETS also develops K-12 statewide assessments used for accountability testing in many states.\n</PREMISES>\n<CONCLUSION>\nETS doesn't administer tests internationally.\n</CONCLUSION>\n<EVALUATE>\nTEXT: ETS develops various standardized tests primarily in the United States for K-12 and higher education.\nFOL: exists x. exists y. (Develop(eTS, x) & Develop(eTS, y) & StandardizedTest(x) & StandardizedTest(y) & In(x, UnitedState) & In(y, UnitedState) & For(x, kOneTwoAndHigherEducation) & For(y, kOneTwoAndHigherEducation))\nTEXT: ETS administers international tests, including the TOEFL, TOEIC, GRE, and subject tests.\nFOL: exists x. (Administer(eTS, x) & InternationalTest(x) & (TOEFL(x) | TOEIC(x) | GRE(x) | SubjectTest(x)))\nTEXT: Many of the assessments ETS develops are associated with entry to the US tertiary and quaternary education institutions.\nFOL: exists x. (Develop(eTS, x) & AssociatedWith(x, EntryToUSEducationInstitution))\nTEXT: ETS also develops K-12 statewide assessments used for accountability testing in many states.\nFOL: exists x. (Develop(eTS, x) & StateWideAssesment(x) & UsedFor(x, AccountabilityTesting))\nTEXT: ETS doesn't administer tests internationally.\nFOL: exists x. (Develops(Ets, x) & For(x, k-OneTwoandhighereducation)) & exists x. (Develops(Ets, x) & AssociatedWith(x, Entrytouseducationinstitutions))\n\nANSWER: False\n</EVALUATE>\n\n<PREMISES>\nDaveed Diggs is an actor and film producer.\nDaveed Diggs played two roles in the musical Hamilton on Broadway.\nOne of the actors from Hamilton won the best actor award.\nThe actor playing Thomas Jefferson won the best actor award.\nDaveed Diggs played Thomas Jefferson.\nMusicals on Broadway are not films.\n</PREMISES>\n<CONCLUSION>\nDaveed Diggs won the best actor award.\n</CONCLUSION>\n<EVALUATE>\nTEXT: Daveed Diggs is an actor and film producer.\nFOL: Actor(DaveedDiggs) & FilmProducer(DaveedDiggs)\nTEXT: Daveed Diggs played two roles in the musical Hamilton on Broadway.\nFOL: exists x. exists y.(PlaysIn(DaveedDiggs, x, Hamilton) & (-(x=y)) & PlaysIn(DaveedDiggs, y, Hamilton)) & OnBroadway(Hamilton) & Musical(Hamilton)\nTEXT: One of the actors from Hamilton won the best actor award.\nFOL: exists x. exists y.(Actor(x) & PlaysIn(x, y, Hamilton) & Wins(x, BestActorAward))\nTEXT: The actor playing Thomas Jefferson won the best actor award.\nFOL: exists x. (Actor(x) & PlaysIn(x, ThomasJefferson, Hamilton) & Wins(x, BestActorAward))\nTEXT: Daveed Diggs played Thomas Jefferson.\nFOL: Plays(DaveedDiggs, ThomasJefferson)\nTEXT: Musicals on Broadway are not films.\nFOL: all x. ((Musical(x) & OnBroadway(x)) -> -Film(x))\nTEXT: Daveed Diggs won the best actor award.\nFOL: exists x. (BRICS(x) & Speaks(x, Hindi))\n\nANSWER: True\n</EVALUATE>\n\n<PREMISES>\nGiordano is a Chinese surname.\nAlba Roversi uses Giordano as a surname.\nPaolo Roversi uses Giordano as a surname.\nRoberto Roversi uses Giordano as a surname.\nPaolo Roversi is an astronaut.\nAn astronaut is a professional or an amateur.\n</PREMISES>\n<CONCLUSION>\nAlba Roversi uses a Chinese surname.\n</CONCLUSION>\n<EVALUATE>", "raw_generations": ["Generation 1:\nTEXT: Giordano is a Chinese surname.\nFOL: ChineseSurname(Giordano)\n\nTEXT: Alba Roversi uses Giordano as a surname.\nFOL: UsesSurname(AlbaRoversi, Giordano)\n\nTEXT: Paolo Roversi uses Giordano as a surname.\nFOL: UsesSurname(PaoloRoversi, Giordano)\n\nTEXT: Roberto Roversi uses Giordano as a surname.\nFOL: UsesSurname(RobertoRoversi, Giordano)\n\nTEXT: Paolo Roversi is an astronaut.\nFOL: Astronaut(PaoloRoversi)\n\nTEXT: An astronaut is a professional or an amateur.\nFOL: all x. (Astronaut(x) -> (Professional(x) | Amateur(x)))\n\nTEXT: Alba Roversi uses a Chinese surname.\nFOL: UsesChineseSurname(AlbaRoversi)\n\nANSWER: True\nProcessed: True", "Generation 2:\nTEXT: Giordano is a Chinese surname.\nFOL: ChineseSurname(Giordano)\nTEXT: Alba Roversi uses Giordano as a surname.\nFOL: Surname(AlbaRoversi, Giordano)\nTEXT: Paolo Roversi uses Giordano as a surname.\nFOL: Surname(PaoloRoversi, Giordano)\nTEXT: Roberto Roversi uses Giordano as a surname.\nFOL: Surname(RobertoRoversi, Giordano)\nTEXT: Paolo Roversi is an astronaut.\nFOL: Astronaut(PaoloRoversi)\nTEXT: An astronaut is a professional or an amateur.\nFOL: all x. (Astronaut(x) -> (Professional(x) | Amateur(x)))\nTEXT: Alba Roversi uses a Chinese surname.\nFOL: ChineseSurname(Surname(AlbaRoversi))\n\nANSWER: True\nProcessed: True", "Generation 3:\nTEXT: Giordano is a Chinese surname.\nFOL: ChineseSurname(Giordano)\nTEXT: Alba Roversi uses Giordano as a surname.\nFOL: UsesSurname(AlbaRoversi, Giordano)\nTEXT: Paolo Roversi uses Giordano as a surname.\nFOL: UsesSurname(PaoloRoversi, Giordano)\nTEXT: Roberto Roversi uses Giordano as a surname.\nFOL: UsesSurname(RobertoRoversi, Giordano)\nTEXT: Paolo Roversi is an astronaut.\nFOL: Astronaut(PaoloRoversi)\nTEXT: An astronaut is a professional or an amateur.\nFOL: all x. (Astronaut(x) -> (Professional(x) | Amateur(x)))\nTEXT: Alba Roversi uses a Chinese surname.\nFOL: ChineseSurname(UsesSurname(AlbaRoversi, _))\n\nANSWER: True\nProcessed: True", "Generation 4:\nTEXT: Giordano is a Chinese surname.\nFOL: ChineseSurname(Giordano)\nTEXT: Alba Roversi uses Giordano as a surname.\nFOL: Uses(AlbaRoversi, Giordano)\nTEXT: Paolo Roversi uses Giordano as a surname.\nFOL: Uses(PaoloRoversi, Giordano)\nTEXT: Roberto Roversi uses Giordano as a surname.\nFOL: Uses(RobertoRoversi, Giordano)\nTEXT: Paolo Roversi is an astronaut.\nFOL: Astronaut(PaoloRoversi)\nTEXT: An astronaut is a professional or an amateur.\nFOL: all x. (Astronaut(x) -> (Professional(x) | Amateur(x)))\nTEXT: Alba Roversi uses a Chinese surname.\nFOL: Uses(AlbaRoversi, ChineseSurname)\n\nANSWER: True\nProcessed: True", "Generation 5:\nTEXT: Giordano is a Chinese surname.\nFOL: ChineseSurname(Giordano)\n\nTEXT: Alba Roversi uses Giordano as a surname.\nFOL: UsesSurname(AlbaRoversi, Giordano)\n\nTEXT: Paolo Roversi uses Giordano as a surname.\nFOL: UsesSurname(PaoloRoversi, Giordano)\n\nTEXT: Roberto Roversi uses Giordano as a surname.\nFOL: UsesSurname(RobertoRoversi, Giordano)\n\nTEXT: Paolo Roversi is an astronaut.\nFOL: Astronaut(PaoloRoversi)\n\nTEXT: An astronaut is a professional or an amateur.\nFOL: all x. (Astronaut(x) -> (Professional(x) | Amateur(x)))\n\nTEXT: Alba Roversi uses a Chinese surname.\nFOL: UsesChineseSurname(AlbaRoversi)\n\nANSWER: True\nProcessed: True", "Generation 6:\nTEXT: Giordano is a Chinese surname.\nFOL: ChineseSurname(Giordano)\n\nTEXT: Alba Roversi uses Giordano as a surname.\nFOL: UsesSurname(AlbaRoversi, Giordano)\n\nTEXT: Paolo Roversi uses Giordano as a surname.\nFOL: UsesSurname(PaoloRoversi, Giordano)\n\nTEXT: Roberto Roversi uses Giordano as a surname.\nFOL: UsesSurname(RobertoRoversi, Giordano)\n\nTEXT: Paolo Roversi is an astronaut.\nFOL: Astronaut(PaoloRoversi)\n\nTEXT: An astronaut is a professional or an amateur.\nFOL: all x. (Astronaut(x) -> (Professional(x) | Amateur(x)))\n\nTEXT: Alba Roversi uses a Chinese surname.\nFOL: ChineseSurname(UsesSurname(AlbaRoversi, _))\n\nANSWER: Uncertain (since we don't know what surname Alba Roversi uses apart from Giordano)\nProcessed: Uncertain", "Generation 7:\nTEXT: Giordano is a Chinese surname.\nFOL: ChineseSurname(Giordano)\nTEXT: Alba Roversi uses Giordano as a surname.\nFOL: Uses(AlbaRoversi, Giordano)\nTEXT: Paolo Roversi uses Giordano as a surname.\nFOL: Uses(PaoloRoversi, Giordano)\nTEXT: Roberto Roversi uses Giordano as a surname.\nFOL: Uses(RobertoRoversi, Giordano)\nTEXT: Paolo Roversi is an astronaut.\nFOL: Astronaut(PaoloRoversi)\nTEXT: An astronaut is a professional or an amateur.\nFOL: all x. (Astronaut(x) -> (Professional(x) | Amateur(x)))\nTEXT: Alba Roversi uses a Chinese surname.\nFOL: Uses(AlbaRoversi, ChineseSurname)\n\nANSWER: True\nProcessed: True", "Generation 8:\nTEXT: Giordano is a Chinese surname.\nFOL: ChineseSurname(Giordano)\n\nTEXT: Alba Roversi uses Giordano as a surname.\nFOL: Uses(AlbaRoversi, Giordano)\n\nTEXT: Paolo Roversi uses Giordano as a surname.\nFOL: Uses(PaoloRoversi, Giordano)\n\nTEXT: Roberto Roversi uses Giordano as a surname.\nFOL: Uses(RobertoRoversi, Giordano)\n\nTEXT: Paolo Roversi is an astronaut.\nFOL: Astronaut(PaoloRoversi)\n\nTEXT: An astronaut is a professional or an amateur.\nFOL: all x. (Astronaut(x) -> (Professional(x) | Amateur(x)))\n\nTEXT: Alba Roversi uses a Chinese surname.\nFOL: Uses(AlbaRoversi, ChineseSurname)\n\nANSWER: True\nProcessed: True", "Generation 9:\nTEXT: Giordano is a Chinese surname.\nFOL: ChineseSurname(Giordano)\nTEXT: Alba Roversi uses Giordano as a surname.\nFOL: Surname(AlbaRoversi, Giordano)\nTEXT: Paolo Roversi uses Giordano as a surname.\nFOL: Surname(PaoloRoversi, Giordano)\nTEXT: Roberto Roversi uses Giordano as a surname.\nFOL: Surname(RobertoRoversi, Giordano)\nTEXT: Paolo Roversi is an astronaut.\nFOL: Astronaut(PaoloRoversi)\nTEXT: An astronaut is a professional or an amateur.\nFOL: all x. (Astronaut(x) -> (Professional(x) | Amateur(x)))\nTEXT: Alba Roversi uses a Chinese surname.\nFOL: ChineseSurname(Surname(AlbaRoversi))\n\nANSWER: True\nProcessed: True", "Generation 10:\nTEXT: Giordano is a Chinese surname.\nFOL: ChineseSurname(Giordano)\nTEXT: Alba Roversi uses Giordano as a surname.\nFOL: Surname(AlbaRoversi, Giordano)\nTEXT: Paolo Roversi uses Giordano as a surname.\nFOL: Surname(PaoloRoversi, Giordano)\nTEXT: Roberto Roversi uses Giordano as a surname.\nFOL: Surname(RobertoRoversi, Giordano)\nTEXT: Paolo Roversi is an astronaut.\nFOL: Astronaut(PaoloRoversi)\nTEXT: An astronaut is a professional or an amateur.\nFOL: all x. (Astronaut(x) -> (Professional(x) | Amateur(x)))\nTEXT: Alba Roversi uses a Chinese surname.\nFOL: ChineseSurname(Surname(AlbaRoversi))\n\nANSWER: True\nProcessed: True\n\nReference: True\n========================================"], "answers": ["True", "True", "True", "True", "True", "Uncertain", "True", "True", "True", "True"]}
{"idx": 55, "prompt": "The following is a first-order logic (FOL) problem.\nThe problem is to determine whether the conclusion follows from the premises.\nThe premises are given in the form of a set of first-order logic sentences.\nThe conclusion is given in the form of a single first-order logic sentence.\nThe task is to translate each of the premises and conclusions into FOL expressions.and then to evaluate the conclusion as ANSWER: True, ANSWER: False, or ANSWER: Uncertain given the premises. The output should follow format TEXT: \nFOL: \nTEXT: \nFOL:... ANSWER: \n\n\n<PREMISES>\nAll biodegradable things are environment-friendly.\nAll woodware is biodegradable.\nAll paper is woodware.\nNothing is a good thing and also a bad thing.\nAll environment-friendly things are good.\nA worksheet is either paper or environment-friendly.\n</PREMISES>\n<CONCLUSION>\nA worksheet is not biodegradable.\n</CONCLUSION>\n<EVALUATE>\nTEXT: All biodegradable things are environment-friendly.\nFOL: all x. (Biodegradable(x) -> EnvironmentFriendly(x))\nTEXT: All woodware is biodegradable.\nFOL: all x. (Woodware(x) -> Biodegradable(x))\nTEXT: All paper is woodware.\nFOL: all x. (Paper(x) -> Woodware(x))\nTEXT: Nothing is a good thing and also a bad thing.\nFOL: -(exists x. (Good(x) & Bad(x)))\nTEXT: All environment-friendly things are good.\nFOL: all x. (EnvironmentFriendly(x) -> Good(x))\nTEXT: A worksheet is either paper or environment-friendly.\nFOL: ((Paper(Worksheet) & -EnvironmentFriendly(Worksheet)) | (-Paper(Worksheet) & EnvironmentFriendly(Worksheet)))\nTEXT: A worksheet is not biodegradable.\nFOL: -Dispensable(Worksheet)\n\nANSWER: Uncertain\n</EVALUATE>\n\n<PREMISES>\nA La Liga soccer team ranks higher than another La Liga soccer team if it receives more points.\nIf there are two La Liga soccer teams and neither has more points than the other, then the team which receives more points from the games between the two teams ranks higher.\nReal Madrid and Barcelona are both La Liga soccer teams.\nReal Madrid received more points than Barcelona.\nNeither Real Madrid nor Barcelona received more points from the games between them.\n</PREMISES>\n<CONCLUSION>\nReal Madrid ranks higher than Barcelona.\n</CONCLUSION>\n<EVALUATE>\nTEXT: A La Liga soccer team ranks higher than another La Liga soccer team if it receives more points.\nFOL: all x. all y. (LaLigaSoccerTeam(x) & LaLigaSoccerTeam(y) & MorePoints(x, y) -> RankHigherThan(x, y))\nTEXT: If there are two La Liga soccer teams and neither has more points than the other, then the team which receives more points from the games between the two teams ranks higher.\nFOL: all x. all y. (LaLigaSoccerTeam(x) & LaLigaSoccerTeam(y) & -MorePoints(x, y) & -MorePoints(y, x) & MorePointsInGameBetween(x, y) ->  RankHigherThan(x, y))\nTEXT: Real Madrid and Barcelona are both La Liga soccer teams.\nFOL: LaLigaSoccerTeam(RealMadrid) & LaLigaSoccerTeam(Barcelona)\nTEXT: Real Madrid received more points than Barcelona.\nFOL: MorePoints(RealMadrid, Barcelona)\nTEXT: Neither Real Madrid nor Barcelona received more points from the games between them.\nFOL: -MorePointsInGameBetween(RealMadrid, Barcelona) & -MorePointsInGameBetween(Barcelona, RealMadrid)\nTEXT: Real Madrid ranks higher than Barcelona.\nFOL: HigherRank(RealMadrid, Barcelona)\n\nANSWER: True\n</EVALUATE>\n\n<PREMISES>\nAll professional athletes spend most of their time on sports.\nAll Olympic gold medal winners are professional athletes.\nNo full-time scientists spend the majority of their time on sports.\nAll Nobel physics laureates are full-time scientists.\nAmy spends the most time on sports, or Amy is an Olympic gold medal winner.\nIf Amy is not a Nobel physics laureate, then Amy is not an Olympic gold medal winner.\n</PREMISES>\n<CONCLUSION>\nIf Amy is not an Olympic gold medal winner, then Amy is a Nobel physics laureate.\n</CONCLUSION>\n<EVALUATE>\nTEXT: All professional athletes spend most of their time on sports.\nFOL: all x. (ProfessionalAthlete(x) -> SpendOn(x, MostOfTheirTime, Sports))\nTEXT: All Olympic gold medal winners are professional athletes.\nFOL: all x. (OlympicGoldMedalWinner(x) -> ProfessionalAthlete(x))\nTEXT: No full-time scientists spend the majority of their time on sports.\nFOL: all x. (FullTimeScientist(x) -> -SpendOn(x, MostOfTheirTime, Sports))\nTEXT: All Nobel physics laureates are full-time scientists.\nFOL: all x. (NobelPhysicsLaureate(x) -> FullTimeScientist(x))\nTEXT: Amy spends the most time on sports, or Amy is an Olympic gold medal winner.\nFOL: SpendOn(Amy, MostOfTheirTime, Sports) | OlympicGoldMedalWinner(Amy)\nTEXT: If Amy is not a Nobel physics laureate, then Amy is not an Olympic gold medal winner.\nFOL: -NobelPhysicsLaureate(Amy) -> -OlympicGoldMedalWinner(Amy)\nTEXT: If Amy is not an Olympic gold medal winner, then Amy is a Nobel physics laureate.\nFOL: -OlympicGoldMedalWinner(Amy) -> NobelLaureate(Amy)\n\nANSWER: False\n</EVALUATE>\n\n<PREMISES>\nIf a person pays their taxes, then they contribute to the country.\nEveryone who works for a government department pays a tax on their salary.\nEveryone in the army is an employee of a government department.\nEveryone convicted of murder goes to prison.\nEveryone who has been to prison has a criminal record.\nJames was either once convicted of murder, or spent time in prison.\nJames either has a criminal record, or pays his taxes.\n</PREMISES>\n<CONCLUSION>\nJames does not contribute to the country.\n</CONCLUSION>\n<EVALUATE>\nTEXT: If a person pays their taxes, then they contribute to the country.\nFOL: all x. (Taxpayer(x) -> ContributeTo(x, Country))\nTEXT: Everyone who works for a government department pays a tax on their salary.\nFOL: all x. (WorkFor(x, GovernmentAgency) -> Taxpayer(x))\nTEXT: Everyone in the army is an employee of a government department.\nFOL: all x. (ServesIn(x, TheArmy) -> WorkFor(x, GovernmentAgency))\nTEXT: Everyone convicted of murder goes to prison.\nFOL: all x. (SentencedForMurder(x) -> Imprisoned(x))\nTEXT: Everyone who has been to prison has a criminal record.\nFOL: all x. (Imprisoned((x) -> Has(x, CriminalRecord))\nTEXT: James was either once convicted of murder, or spent time in prison.\nFOL: ((SentencedForMurder(James) & -Imprisoned(James)) | (-SentencedForMurder(James) & Imprisoned(James)))\nTEXT: James either has a criminal record, or pays his taxes.\nFOL: ((Has(James, CriminalRecord) & -Taxpayer(James)) | (-Has(James, CriminalRecord) & Taxpayer(James)))\nTEXT: James does not contribute to the country.\nFOL: ContributeToCountry(James)\n\nANSWER: Uncertain\n</EVALUATE>\n\n<PREMISES>\nNo songs are visuals.\nAll folk songs are songs.\nAll videos are visuals.\nAll movies are videos.\nAll sci-fi movies are movies.\nInception is a sci-fi movie.\nMac is neither a folk song nor a sci-fi movie.\n</PREMISES>\n<CONCLUSION>\nInception is a folk song.\n</CONCLUSION>\n<EVALUATE>\nTEXT: No songs are visuals.\nFOL: all x. (Song(x) -> -Visual(x))\nTEXT: All folk songs are songs.\nFOL: all x. (FolkSong(x) -> Song(x))\nTEXT: All videos are visuals.\nFOL: all x. (Video(x) -> Visual(x))\nTEXT: All movies are videos.\nFOL: all x. (Movie(x) -> Video(x))\nTEXT: All sci-fi movies are movies.\nFOL: all x. (ScifiMovie(x) -> Movie(x))\nTEXT: Inception is a sci-fi movie.\nFOL: ScifiMovie(Inception)\nTEXT: Mac is neither a folk song nor a sci-fi movie.\nFOL: -FolkSong(Mac) & -ScifiMovie(Mac)\nTEXT: Inception is a folk song.\nFOL: FolkSong(Inception)\n\nANSWER: False\n</EVALUATE>\n\n<PREMISES>\nEvery chef can cook.\nSome people who aren’t chefs can cook.\nPeople who cook can make scrambled eggs and pasta.\nIf someone can make cookies and muffins, they are a baker.\nBakers who can also make scrambled eggs can make a good breakfast.\nLuke can make cookies, scrambled eggs, and muffins, but not pasta.\n</PREMISES>\n<CONCLUSION>\nLuke is a chef.\n</CONCLUSION>\n<EVALUATE>\nTEXT: Every chef can cook.\nFOL: all x. (Chef(x) -> Can(x, Cook))\nTEXT: Some people who aren’t chefs can cook.\nFOL: exists x. (-Chef(x) & Can(x, Cook))\nTEXT: People who cook can make scrambled eggs and pasta.\nFOL: all x. (Can(x, Cook) -> (CanMake(x, ScrambledEggs) & CanMake(x, Pasta)))\nTEXT: If someone can make cookies and muffins, they are a baker.\nFOL: all x. (CanMake(x, Cookies) & CanMake(x, Muffins) -> Baker(x))\nTEXT: Bakers who can also make scrambled eggs can make a good breakfast.\nFOL: all x. ((Baker(x) & CanMake(x, ScrambledEggs)) -> CanMake(x, GoodBreakfast))\nTEXT: Luke can make cookies, scrambled eggs, and muffins, but not pasta.\nFOL: CanMake(Luke, Cookies) & (CanMake(Luke, ScrambledEggs) & CanMake(Luke, Muffins) & -CanMake(Luke, Pasta)\nTEXT: Luke is a chef.\nFOL: MakeGoodBreakfast(Luke)\n\nANSWER: False\n</EVALUATE>\n\n<PREMISES>\nETS develops various standardized tests primarily in the United States for K-12 and higher education.\nETS administers international tests, including the TOEFL, TOEIC, GRE, and subject tests.\nMany of the assessments ETS develops are associated with entry to the US tertiary and quaternary education institutions.\nETS also develops K-12 statewide assessments used for accountability testing in many states.\n</PREMISES>\n<CONCLUSION>\nETS doesn't administer tests internationally.\n</CONCLUSION>\n<EVALUATE>\nTEXT: ETS develops various standardized tests primarily in the United States for K-12 and higher education.\nFOL: exists x. exists y. (Develop(eTS, x) & Develop(eTS, y) & StandardizedTest(x) & StandardizedTest(y) & In(x, UnitedState) & In(y, UnitedState) & For(x, kOneTwoAndHigherEducation) & For(y, kOneTwoAndHigherEducation))\nTEXT: ETS administers international tests, including the TOEFL, TOEIC, GRE, and subject tests.\nFOL: exists x. (Administer(eTS, x) & InternationalTest(x) & (TOEFL(x) | TOEIC(x) | GRE(x) | SubjectTest(x)))\nTEXT: Many of the assessments ETS develops are associated with entry to the US tertiary and quaternary education institutions.\nFOL: exists x. (Develop(eTS, x) & AssociatedWith(x, EntryToUSEducationInstitution))\nTEXT: ETS also develops K-12 statewide assessments used for accountability testing in many states.\nFOL: exists x. (Develop(eTS, x) & StateWideAssesment(x) & UsedFor(x, AccountabilityTesting))\nTEXT: ETS doesn't administer tests internationally.\nFOL: exists x. (Develops(Ets, x) & For(x, k-OneTwoandhighereducation)) & exists x. (Develops(Ets, x) & AssociatedWith(x, Entrytouseducationinstitutions))\n\nANSWER: False\n</EVALUATE>\n\n<PREMISES>\nDaveed Diggs is an actor and film producer.\nDaveed Diggs played two roles in the musical Hamilton on Broadway.\nOne of the actors from Hamilton won the best actor award.\nThe actor playing Thomas Jefferson won the best actor award.\nDaveed Diggs played Thomas Jefferson.\nMusicals on Broadway are not films.\n</PREMISES>\n<CONCLUSION>\nDaveed Diggs won the best actor award.\n</CONCLUSION>\n<EVALUATE>\nTEXT: Daveed Diggs is an actor and film producer.\nFOL: Actor(DaveedDiggs) & FilmProducer(DaveedDiggs)\nTEXT: Daveed Diggs played two roles in the musical Hamilton on Broadway.\nFOL: exists x. exists y.(PlaysIn(DaveedDiggs, x, Hamilton) & (-(x=y)) & PlaysIn(DaveedDiggs, y, Hamilton)) & OnBroadway(Hamilton) & Musical(Hamilton)\nTEXT: One of the actors from Hamilton won the best actor award.\nFOL: exists x. exists y.(Actor(x) & PlaysIn(x, y, Hamilton) & Wins(x, BestActorAward))\nTEXT: The actor playing Thomas Jefferson won the best actor award.\nFOL: exists x. (Actor(x) & PlaysIn(x, ThomasJefferson, Hamilton) & Wins(x, BestActorAward))\nTEXT: Daveed Diggs played Thomas Jefferson.\nFOL: Plays(DaveedDiggs, ThomasJefferson)\nTEXT: Musicals on Broadway are not films.\nFOL: all x. ((Musical(x) & OnBroadway(x)) -> -Film(x))\nTEXT: Daveed Diggs won the best actor award.\nFOL: exists x. (BRICS(x) & Speaks(x, Hindi))\n\nANSWER: True\n</EVALUATE>\n\n<PREMISES>\nThe USS Salem is a heavy cruiser destroyed by the United States Navy.\nThe last heavy cruiser to sink was the USS Salem.\nThe USS Salem is a battleship.\nBattleships are closed to the public.\nThe USS Salem sank in the Atlantic and Mediterranean.\n</PREMISES>\n<CONCLUSION>\nThe USS Salem is closed to the public.\n</CONCLUSION>\n<EVALUATE>", "raw_generations": ["Generation 1:\nTEXT: The USS Salem is a battleship.\nFOL: Battleship(USS_Salem)\nTEXT: Battleships are closed to the public.\nFOL: all x. (Battleship(x) -> ClosedToPublic(x))\nTEXT: The USS Salem sank in the Atlantic and Mediterranean.\nFOL: SankIn(USS_Salem, Atlantic) & SankIn(USS_Salem, Mediterranean)\nTEXT: The USS Salem is closed to the public.\nFOL: ClosedToPublic(USS_Salem)\n\nANSWER: True\nProcessed: True", "Generation 2:\nTEXT: The USS Salem is a battleship.\nFOL: Battleship(USS_Salem)\nTEXT: Battleships are closed to the public.\nFOL: all x. (Battleship(x) -> ClosedToPublic(x))\nTEXT: The USS Salem is closed to the public.\nFOL: ClosedToPublic(USS_Salem)\n\nANSWER: True\nProcessed: True", "Generation 3:\nTEXT: The USS Salem is a heavy cruiser destroyed by the United States Navy.\nFOL: HeavyCruiserDestroyed(USS_Salem, United_States_Navy)\nTEXT: The last heavy cruiser to sink was the USS Salem.\nFOL: LastHeavyCruiserToSink(USS_Salem)\nTEXT: The USS Salem is a battleship.\nFOL: Battleship(USS_Salem)\nTEXT: Battleships are closed to the public.\nFOL: all x. (Battleship(x) -> ClosedToPublic(x))\nTEXT: The USS Salem sank in the Atlantic and Mediterranean.\nFOL: SankIn(USS_Salem, Atlantic) & SankIn(USS_Salem, Mediterranean)\nTEXT: The USS Salem is closed to the public.\nFOL: ClosedToPublic(USS_Salem)\n\nANSWER: True\nProcessed: True", "Generation 4:\nTEXT: The USS Salem is a heavy cruiser destroyed by the United States Navy.\nFOL: HeavyCruiserDestroyed(USS_Salem, UnitedStatesNavy)\n\nTEXT: The last heavy cruiser to sink was the USS Salem.\nFOL: LastHeavyCruiserToSink(USS_Salem)\n\nTEXT: The USS Salem is a battleship.\nFOL: Battleship(USS_Salem)\n\nTEXT: Battleships are closed to the public.\nFOL: all x. (Battleship(x) -> ClosedToPublic(x))\n\nTEXT: The USS Salem sank in the Atlantic and Mediterranean.\nFOL: Sank(USS_Salem, Atlantic) & Sank(USS_Salem, Mediterranean)\n\nTEXT: The USS Salem is closed to the public.\nFOL: ClosedToPublic(USS_Salem)\n\nANSWER: True\nProcessed: True", "Generation 5:\nTEXT: The USS Salem is a heavy cruiser destroyed by the United States Navy.\nFOL: HeavyCruiser(USS_Salem) & Destroyed(USS_Salem, UnitedStatesNavy)\nTEXT: The last heavy cruiser to sink was the USS Salem.\nFOL: LastHeavyCruiserToSink(USS_Salem)\nTEXT: The USS Salem is a battleship.\nFOL: Battleship(USS_Salem)\nTEXT: Battleships are closed to the public.\nFOL: all x. (Battleship(x) -> ClosedToPublic(x))\nTEXT: The USS Salem sank in the Atlantic and Mediterranean.\nFOL: Sank(USS_Salem, Atlantic) & Sank(USS_Salem, Mediterranean)\nTEXT: The USS Salem is closed to the public.\nFOL: ClosedToPublic(USS_Salem)\n\nANSWER: True\nProcessed: True", "Generation 6:\nTEXT: The USS Salem is a heavy cruiser destroyed by the United States Navy.\nFOL: USSSalem(x) & HeavyCruiser(x) & Destroyed(x) & By(x, USNavy)\nTEXT: The last heavy cruiser to sink was the USS Salem.\nFOL: Last(x). (HeavyCruiser(x) & Sank(x)) = USSSalem\nTEXT: The USS Salem is a battleship.\nFOL: Battleship(USSSalem)\nTEXT: Battleships are closed to the public.\nFOL: all x. (Battleship(x) -> ClosedToPublic(x))\nTEXT: The USS Salem sank in the Atlantic and Mediterranean.\nFOL: SankIn(USSSalem, Atlantic) & SankIn(USSSalem, Mediterranean)\nTEXT: The USS Salem is closed to the public.\nFOL: ClosedToPublic(USSSalem)\n\nANSWER: True\nProcessed: True", "Generation 7:\nFOL:\n1. Sank(USS_Salem)\n2. Last_HeavyCruiser_To_Sink(USS_Salem)\n3. USS_Salem is battleship\n4. all x. (Battleship(x) -> Closed_To_Public(x))\n5. USS_Salem_Sank_In_Atlantic_And_Mediterranean\n\nANSWER: True\nProcessed: True", "Generation 8:\nTEXT: The USS Salem is a battleship.\nFOL: Battleship(USS_Salem)\nTEXT: Battleships are closed to the public.\nFOL: all x. (Battleship(x) -> ClosedToPublic(x))\nTEXT: The USS Salem sank in the Atlantic and Mediterranean.\nFOL: SankIn(USS_Salem, Atlantic) & SankIn(USS_Salem, Mediterranean)\nTEXT: The USS Salem is closed to the public.\nFOL: ClosedToPublic(USS_Salem)\n\nANSWER: True\nProcessed: True", "Generation 9:\nTEXT: The USS Salem is a heavy cruiser destroyed by the United States Navy.\nFOL: HeavyCruiser(USS_Salem) & Destroyed(USS_Salem, US_Navy)\nTEXT: The last heavy cruiser to sink was the USS Salem.\nFOL: LastHeavyCruiserToSink(USS_Salem)\nTEXT: The USS Salem is a battleship.\nFOL: Battleship(USS_Salem)\nTEXT: Battleships are closed to the public.\nFOL: all x. (Battleship(x) -> ClosedToPublic(x))\nTEXT: The USS Salem sank in the Atlantic and Mediterranean.\nFOL: SankIn(USS_Salem, Atlantic) & SankIn(USS_Salem, Mediterranean)\nTEXT: The USS Salem is closed to the public.\nFOL: ClosedToPublic(USS_Salem)\n\nANSWER: True\nProcessed: True", "Generation 10:\nTEXT: The USS Salem is a heavy cruiser destroyed by the United States Navy.\nFOL: Destroyed(USS_Salem, USS_Navy) & HeavyCruiser(USS_Salem)\nTEXT: The last heavy cruiser to sink was the USS Salem.\nFOL: Last(USS_Salem, sink, HeavyCruiser)\nTEXT: The USS Salem is a battleship.\nFOL: Battleship(USS_Salem)\nTEXT: Battleships are closed to the public.\nFOL: all x. (Battleship(x) -> ClosedToPublic(x))\nTEXT: The USS Salem sank in the Atlantic and Mediterranean.\nFOL: SankIn(USS_Salem, Atlantic) & SankIn(USS_Salem, Mediterranean)\nTEXT: The USS Salem is closed to the public.\nFOL: ClosedToPublic(USS_Salem)\n\nANSWER: True\nProcessed: True\n\nReference: True\n========================================"], "answers": ["True", "True", "True", "True", "True", "True", "True", "True", "True", "True"]}
{"idx": 56, "prompt": "The following is a first-order logic (FOL) problem.\nThe problem is to determine whether the conclusion follows from the premises.\nThe premises are given in the form of a set of first-order logic sentences.\nThe conclusion is given in the form of a single first-order logic sentence.\nThe task is to translate each of the premises and conclusions into FOL expressions.and then to evaluate the conclusion as ANSWER: True, ANSWER: False, or ANSWER: Uncertain given the premises. The output should follow format TEXT: \nFOL: \nTEXT: \nFOL:... ANSWER: \n\n\n<PREMISES>\nAll biodegradable things are environment-friendly.\nAll woodware is biodegradable.\nAll paper is woodware.\nNothing is a good thing and also a bad thing.\nAll environment-friendly things are good.\nA worksheet is either paper or environment-friendly.\n</PREMISES>\n<CONCLUSION>\nA worksheet is not biodegradable.\n</CONCLUSION>\n<EVALUATE>\nTEXT: All biodegradable things are environment-friendly.\nFOL: all x. (Biodegradable(x) -> EnvironmentFriendly(x))\nTEXT: All woodware is biodegradable.\nFOL: all x. (Woodware(x) -> Biodegradable(x))\nTEXT: All paper is woodware.\nFOL: all x. (Paper(x) -> Woodware(x))\nTEXT: Nothing is a good thing and also a bad thing.\nFOL: -(exists x. (Good(x) & Bad(x)))\nTEXT: All environment-friendly things are good.\nFOL: all x. (EnvironmentFriendly(x) -> Good(x))\nTEXT: A worksheet is either paper or environment-friendly.\nFOL: ((Paper(Worksheet) & -EnvironmentFriendly(Worksheet)) | (-Paper(Worksheet) & EnvironmentFriendly(Worksheet)))\nTEXT: A worksheet is not biodegradable.\nFOL: -Dispensable(Worksheet)\n\nANSWER: Uncertain\n</EVALUATE>\n\n<PREMISES>\nA La Liga soccer team ranks higher than another La Liga soccer team if it receives more points.\nIf there are two La Liga soccer teams and neither has more points than the other, then the team which receives more points from the games between the two teams ranks higher.\nReal Madrid and Barcelona are both La Liga soccer teams.\nReal Madrid received more points than Barcelona.\nNeither Real Madrid nor Barcelona received more points from the games between them.\n</PREMISES>\n<CONCLUSION>\nReal Madrid ranks higher than Barcelona.\n</CONCLUSION>\n<EVALUATE>\nTEXT: A La Liga soccer team ranks higher than another La Liga soccer team if it receives more points.\nFOL: all x. all y. (LaLigaSoccerTeam(x) & LaLigaSoccerTeam(y) & MorePoints(x, y) -> RankHigherThan(x, y))\nTEXT: If there are two La Liga soccer teams and neither has more points than the other, then the team which receives more points from the games between the two teams ranks higher.\nFOL: all x. all y. (LaLigaSoccerTeam(x) & LaLigaSoccerTeam(y) & -MorePoints(x, y) & -MorePoints(y, x) & MorePointsInGameBetween(x, y) ->  RankHigherThan(x, y))\nTEXT: Real Madrid and Barcelona are both La Liga soccer teams.\nFOL: LaLigaSoccerTeam(RealMadrid) & LaLigaSoccerTeam(Barcelona)\nTEXT: Real Madrid received more points than Barcelona.\nFOL: MorePoints(RealMadrid, Barcelona)\nTEXT: Neither Real Madrid nor Barcelona received more points from the games between them.\nFOL: -MorePointsInGameBetween(RealMadrid, Barcelona) & -MorePointsInGameBetween(Barcelona, RealMadrid)\nTEXT: Real Madrid ranks higher than Barcelona.\nFOL: HigherRank(RealMadrid, Barcelona)\n\nANSWER: True\n</EVALUATE>\n\n<PREMISES>\nAll professional athletes spend most of their time on sports.\nAll Olympic gold medal winners are professional athletes.\nNo full-time scientists spend the majority of their time on sports.\nAll Nobel physics laureates are full-time scientists.\nAmy spends the most time on sports, or Amy is an Olympic gold medal winner.\nIf Amy is not a Nobel physics laureate, then Amy is not an Olympic gold medal winner.\n</PREMISES>\n<CONCLUSION>\nIf Amy is not an Olympic gold medal winner, then Amy is a Nobel physics laureate.\n</CONCLUSION>\n<EVALUATE>\nTEXT: All professional athletes spend most of their time on sports.\nFOL: all x. (ProfessionalAthlete(x) -> SpendOn(x, MostOfTheirTime, Sports))\nTEXT: All Olympic gold medal winners are professional athletes.\nFOL: all x. (OlympicGoldMedalWinner(x) -> ProfessionalAthlete(x))\nTEXT: No full-time scientists spend the majority of their time on sports.\nFOL: all x. (FullTimeScientist(x) -> -SpendOn(x, MostOfTheirTime, Sports))\nTEXT: All Nobel physics laureates are full-time scientists.\nFOL: all x. (NobelPhysicsLaureate(x) -> FullTimeScientist(x))\nTEXT: Amy spends the most time on sports, or Amy is an Olympic gold medal winner.\nFOL: SpendOn(Amy, MostOfTheirTime, Sports) | OlympicGoldMedalWinner(Amy)\nTEXT: If Amy is not a Nobel physics laureate, then Amy is not an Olympic gold medal winner.\nFOL: -NobelPhysicsLaureate(Amy) -> -OlympicGoldMedalWinner(Amy)\nTEXT: If Amy is not an Olympic gold medal winner, then Amy is a Nobel physics laureate.\nFOL: -OlympicGoldMedalWinner(Amy) -> NobelLaureate(Amy)\n\nANSWER: False\n</EVALUATE>\n\n<PREMISES>\nIf a person pays their taxes, then they contribute to the country.\nEveryone who works for a government department pays a tax on their salary.\nEveryone in the army is an employee of a government department.\nEveryone convicted of murder goes to prison.\nEveryone who has been to prison has a criminal record.\nJames was either once convicted of murder, or spent time in prison.\nJames either has a criminal record, or pays his taxes.\n</PREMISES>\n<CONCLUSION>\nJames does not contribute to the country.\n</CONCLUSION>\n<EVALUATE>\nTEXT: If a person pays their taxes, then they contribute to the country.\nFOL: all x. (Taxpayer(x) -> ContributeTo(x, Country))\nTEXT: Everyone who works for a government department pays a tax on their salary.\nFOL: all x. (WorkFor(x, GovernmentAgency) -> Taxpayer(x))\nTEXT: Everyone in the army is an employee of a government department.\nFOL: all x. (ServesIn(x, TheArmy) -> WorkFor(x, GovernmentAgency))\nTEXT: Everyone convicted of murder goes to prison.\nFOL: all x. (SentencedForMurder(x) -> Imprisoned(x))\nTEXT: Everyone who has been to prison has a criminal record.\nFOL: all x. (Imprisoned((x) -> Has(x, CriminalRecord))\nTEXT: James was either once convicted of murder, or spent time in prison.\nFOL: ((SentencedForMurder(James) & -Imprisoned(James)) | (-SentencedForMurder(James) & Imprisoned(James)))\nTEXT: James either has a criminal record, or pays his taxes.\nFOL: ((Has(James, CriminalRecord) & -Taxpayer(James)) | (-Has(James, CriminalRecord) & Taxpayer(James)))\nTEXT: James does not contribute to the country.\nFOL: ContributeToCountry(James)\n\nANSWER: Uncertain\n</EVALUATE>\n\n<PREMISES>\nNo songs are visuals.\nAll folk songs are songs.\nAll videos are visuals.\nAll movies are videos.\nAll sci-fi movies are movies.\nInception is a sci-fi movie.\nMac is neither a folk song nor a sci-fi movie.\n</PREMISES>\n<CONCLUSION>\nInception is a folk song.\n</CONCLUSION>\n<EVALUATE>\nTEXT: No songs are visuals.\nFOL: all x. (Song(x) -> -Visual(x))\nTEXT: All folk songs are songs.\nFOL: all x. (FolkSong(x) -> Song(x))\nTEXT: All videos are visuals.\nFOL: all x. (Video(x) -> Visual(x))\nTEXT: All movies are videos.\nFOL: all x. (Movie(x) -> Video(x))\nTEXT: All sci-fi movies are movies.\nFOL: all x. (ScifiMovie(x) -> Movie(x))\nTEXT: Inception is a sci-fi movie.\nFOL: ScifiMovie(Inception)\nTEXT: Mac is neither a folk song nor a sci-fi movie.\nFOL: -FolkSong(Mac) & -ScifiMovie(Mac)\nTEXT: Inception is a folk song.\nFOL: FolkSong(Inception)\n\nANSWER: False\n</EVALUATE>\n\n<PREMISES>\nEvery chef can cook.\nSome people who aren’t chefs can cook.\nPeople who cook can make scrambled eggs and pasta.\nIf someone can make cookies and muffins, they are a baker.\nBakers who can also make scrambled eggs can make a good breakfast.\nLuke can make cookies, scrambled eggs, and muffins, but not pasta.\n</PREMISES>\n<CONCLUSION>\nLuke is a chef.\n</CONCLUSION>\n<EVALUATE>\nTEXT: Every chef can cook.\nFOL: all x. (Chef(x) -> Can(x, Cook))\nTEXT: Some people who aren’t chefs can cook.\nFOL: exists x. (-Chef(x) & Can(x, Cook))\nTEXT: People who cook can make scrambled eggs and pasta.\nFOL: all x. (Can(x, Cook) -> (CanMake(x, ScrambledEggs) & CanMake(x, Pasta)))\nTEXT: If someone can make cookies and muffins, they are a baker.\nFOL: all x. (CanMake(x, Cookies) & CanMake(x, Muffins) -> Baker(x))\nTEXT: Bakers who can also make scrambled eggs can make a good breakfast.\nFOL: all x. ((Baker(x) & CanMake(x, ScrambledEggs)) -> CanMake(x, GoodBreakfast))\nTEXT: Luke can make cookies, scrambled eggs, and muffins, but not pasta.\nFOL: CanMake(Luke, Cookies) & (CanMake(Luke, ScrambledEggs) & CanMake(Luke, Muffins) & -CanMake(Luke, Pasta)\nTEXT: Luke is a chef.\nFOL: MakeGoodBreakfast(Luke)\n\nANSWER: False\n</EVALUATE>\n\n<PREMISES>\nETS develops various standardized tests primarily in the United States for K-12 and higher education.\nETS administers international tests, including the TOEFL, TOEIC, GRE, and subject tests.\nMany of the assessments ETS develops are associated with entry to the US tertiary and quaternary education institutions.\nETS also develops K-12 statewide assessments used for accountability testing in many states.\n</PREMISES>\n<CONCLUSION>\nETS doesn't administer tests internationally.\n</CONCLUSION>\n<EVALUATE>\nTEXT: ETS develops various standardized tests primarily in the United States for K-12 and higher education.\nFOL: exists x. exists y. (Develop(eTS, x) & Develop(eTS, y) & StandardizedTest(x) & StandardizedTest(y) & In(x, UnitedState) & In(y, UnitedState) & For(x, kOneTwoAndHigherEducation) & For(y, kOneTwoAndHigherEducation))\nTEXT: ETS administers international tests, including the TOEFL, TOEIC, GRE, and subject tests.\nFOL: exists x. (Administer(eTS, x) & InternationalTest(x) & (TOEFL(x) | TOEIC(x) | GRE(x) | SubjectTest(x)))\nTEXT: Many of the assessments ETS develops are associated with entry to the US tertiary and quaternary education institutions.\nFOL: exists x. (Develop(eTS, x) & AssociatedWith(x, EntryToUSEducationInstitution))\nTEXT: ETS also develops K-12 statewide assessments used for accountability testing in many states.\nFOL: exists x. (Develop(eTS, x) & StateWideAssesment(x) & UsedFor(x, AccountabilityTesting))\nTEXT: ETS doesn't administer tests internationally.\nFOL: exists x. (Develops(Ets, x) & For(x, k-OneTwoandhighereducation)) & exists x. (Develops(Ets, x) & AssociatedWith(x, Entrytouseducationinstitutions))\n\nANSWER: False\n</EVALUATE>\n\n<PREMISES>\nDaveed Diggs is an actor and film producer.\nDaveed Diggs played two roles in the musical Hamilton on Broadway.\nOne of the actors from Hamilton won the best actor award.\nThe actor playing Thomas Jefferson won the best actor award.\nDaveed Diggs played Thomas Jefferson.\nMusicals on Broadway are not films.\n</PREMISES>\n<CONCLUSION>\nDaveed Diggs won the best actor award.\n</CONCLUSION>\n<EVALUATE>\nTEXT: Daveed Diggs is an actor and film producer.\nFOL: Actor(DaveedDiggs) & FilmProducer(DaveedDiggs)\nTEXT: Daveed Diggs played two roles in the musical Hamilton on Broadway.\nFOL: exists x. exists y.(PlaysIn(DaveedDiggs, x, Hamilton) & (-(x=y)) & PlaysIn(DaveedDiggs, y, Hamilton)) & OnBroadway(Hamilton) & Musical(Hamilton)\nTEXT: One of the actors from Hamilton won the best actor award.\nFOL: exists x. exists y.(Actor(x) & PlaysIn(x, y, Hamilton) & Wins(x, BestActorAward))\nTEXT: The actor playing Thomas Jefferson won the best actor award.\nFOL: exists x. (Actor(x) & PlaysIn(x, ThomasJefferson, Hamilton) & Wins(x, BestActorAward))\nTEXT: Daveed Diggs played Thomas Jefferson.\nFOL: Plays(DaveedDiggs, ThomasJefferson)\nTEXT: Musicals on Broadway are not films.\nFOL: all x. ((Musical(x) & OnBroadway(x)) -> -Film(x))\nTEXT: Daveed Diggs won the best actor award.\nFOL: exists x. (BRICS(x) & Speaks(x, Hindi))\n\nANSWER: True\n</EVALUATE>\n\n<PREMISES>\nThe USS Salem is a heavy cruiser destroyed by the United States Navy.\nThe last heavy cruiser to sink was the USS Salem.\nThe USS Salem is a battleship.\nBattleships are closed to the public.\nThe USS Salem evaporated in the Atlantic and Mediterranean.\n</PREMISES>\n<CONCLUSION>\nThere is a battleship closed to the public that evaporated in the Mediterranean.\n</CONCLUSION>\n<EVALUATE>", "raw_generations": ["Generation 1:\nTEXT: The USS Salem is a heavy cruiser destroyed by the United States Navy.\nFOL: Destroyed(USS_Salem, United_States_Navy) & HeavyCruiser(USS_Salem)\nTEXT: The last heavy cruiser to sink was the USS Salem.\nFOL: LastHeavyCruiserToSink(USS_Salem)\nTEXT: The USS Salem is a battleship.\nFOL: Battleship(USS_Salem)\nTEXT: Battleships are closed to the public.\nFOL: all x. (Battleship(x) -> ClosedToPublic(x))\nTEXT: The USS Salem evaporated in the Atlantic and Mediterranean.\nFOL: Evaporated(USS_Salem, Atlantic) & Evaporated(USS_Salem, Mediterranean)\nTEXT: There is a battleship closed to the public that evaporated in the Mediterranean.\nFOL: exists x. (Battleship(x) & ClosedToPublic(x) & Evaporated(x, Mediterranean))\n\nANSWER: False\n\nThis is because the USS Salem is a heavy cruiser, not a battleship. Thus, it is not a battleship closed to the public that evaporated in the Mediterranean.\nProcessed: False", "Generation 2:\nTEXT: The USS Salem is a heavy cruiser destroyed by the United States Navy.\nFOL: Destroyed(USS_Salem, UnitedStatesNavy) & HeavyCruiser(USS_Salem)\nTEXT: The last heavy cruiser to sink was the USS Salem.\nFOL: Last(USS_Salem, HeavyCruiser, Sink)\nTEXT: The USS Salem is a battleship.\nFOL: Battleship(USS_Salem)\nTEXT: Battleships are closed to the public.\nFOL: all x. (Battleship(x) -> ClosedToPublic(x))\nTEXT: The USS Salem evaporated in the Atlantic and Mediterranean.\nFOL: Evaporated(USS_Salem, Atlantic) & Evaporated(USS_Salem, Mediterranean)\nTEXT: There is a battleship closed to the public that evaporated in the Mediterranean.\nFOL: exists x. (Battleship(x) & ClosedToPublic(x) & Evaporated(x, Mediterranean))\n\nANSWER: True (assuming the premise that the USS Salem is a battleship is incorrect)\nProcessed: True", "Generation 3:\nTEXT: The USS Salem is a battleship destroyed by the United States Navy.\nFOL: Battleship(USS_Salem) & Destroyed(USS_Salem, United_States_Navy)\nTEXT: The last heavy cruiser to sink was the USS Salem.\nFOL: LastHeavyCruiserToSink(USS_Salem)\nTEXT: Battleships are closed to the public.\nFOL: all x. (Battleship(x) -> ClosedToPublic(x))\nTEXT: The USS Salem evaporated in the Atlantic and Mediterranean.\nFOL: Evaporated(USS_Salem, Atlantic) & Evaporated(USS_Salem, Mediterranean)\nTEXT: There is a battleship closed to the public that evaporated in the Mediterranean.\nFOL: exists x. (Battleship(x) & ClosedToPublic(x) & Evaporated(x, Mediterranean))\n\nANSWER: False (The USS Salem is a heavy cruiser, not a battleship)\nProcessed: False", "Generation 4:\nTEXT: The USS Salem is a heavy cruiser destroyed by the United States Navy.\nFOL: HeavyCruiser(USS_Salem) & Destroyed(USS_Salem, UnitedStatesNavy)\nTEXT: The last heavy cruiser to sink was the USS Salem.\nFOL: LastHeavyCruiserToSink(USS_Salem)\nTEXT: The USS Salem is a battleship.\nFOL: Battleship(USS_Salem)\nTEXT: Battleships are closed to the public.\nFOL: all x. (Battleship(x) -> ClosedToPublic(x))\nTEXT: The USS Salem evaporated in the Atlantic and Mediterranean.\nFOL: Evaporated(USS_Salem, Atlantic) & Evaporated(USS_Salem, Mediterranean)\nTEXT: There is a battleship closed to the public that evaporated in the Mediterranean.\nFOL: exists x. (Battleship(x) & ClosedToPublic(x) & Evaporated(x, Mediterranean))\n\nANSWER: False\n(There is no information given about any other battleship.)\n\nTEXT: The USS Salem is not a submarine.\nFOL: -Submarine(USS_Salem)\n\nANSWER: True\n(This is a direct contradiction of the given information.)\nProcessed: False", "Generation 5:\nTEXT: The USS Salem is a heavy cruiser destroyed by the United States Navy.\nFOL: DestroyedByUSNavy(USSSalem) & HeavyCruiser(USSSalem)\nTEXT: The last heavy cruiser to sink was the USS Salem.\nFOL: LastHeavyCruiserToSink(USSSalem)\nTEXT: The USS Salem is a battleship.\nFOL: Battleship(USSSalem)\nTEXT: Battleships are closed to the public.\nFOL: all x. (Battleship(x) -> ClosedToPublic(x))\nTEXT: The USS Salem evaporated in the Atlantic and Mediterranean.\nFOL: EvaporatedInAtlanticAndMediterranean(USSSalem)\nTEXT: There is a battleship closed to the public that evaporated in the Mediterranean.\nFOL: exists x. (Battleship(x) & ClosedToPublic(x) & EvaporatedInMediterranean(x))\n\nANSWER: False\n\nThe USS Salem is a heavy cruiser, not a battleship. So it is not a battleship closed to the public that evaporated in the Mediterranean.\nProcessed: False", "Generation 6:\nTEXT: The USS Salem is a heavy cruiser destroyed by the United States Navy.\nFOL: Destroyed(USS_Salem, USS_Navy) & HeavyCruiser(USS_Salem)\nTEXT: The last heavy cruiser to sink was the USS Salem.\nFOL: Last(USS_Salem, HeavyCruiser, Sink)\nTEXT: The USS Salem is a battleship.\nFOL: Battleship(USS_Salem)\nTEXT: Battleships are closed to the public.\nFOL: all x. (Battleship(x) -> ClosedToPublic(x))\nTEXT: The USS Salem evaporated in the Atlantic and Mediterranean.\nFOL: Evaporated(USS_Salem, Atlantic) & Evaporated(USS_Salem, Mediterranean)\nTEXT: There is a battleship closed to the public that evaporated in the Mediterranean.\nFOL: exists x. (Battleship(x) & ClosedToPublic(x) & Evaporated(x, Mediterranean))\n\nANSWER: Uncertain\n\nThe premises do not state that the USS Salem is the only battleship in existence, so it is uncertain whether there is a battleship that meets the given conditions. However, based on the premises, we can conclude that the USS Salem, which is a battleship that evaporated in the Mediterranean, is closed to the public. Whether there are other battleships that fit the description remains uncertain.\nProcessed: Uncertain", "Generation 7:\nTEXT: The USS Salem is a heavy cruiser destroyed by the United States Navy.\nFOL: DestroyedByUSNavy(USSSalem) & HeavyCruiser(USSSalem)\nTEXT: The last heavy cruiser to sink was the USS Salem.\nFOL: LastHeavyCruiserToSink(USSSalem)\nTEXT: The USS Salem is a battleship.\nFOL: Battleship(USSSalem)\nTEXT: Battleships are closed to the public.\nFOL: all x. (Battleship(x) -> ClosedToPublic(x))\nTEXT: The USS Salem evaporated in the Atlantic and Mediterranean.\nFOL: EvaporatedIn(USSSalem, Atlantic) & EvaporatedIn(USSSalem, Mediterranean)\nTEXT: There is a battleship closed to the public that evaporated in the Mediterranean.\nFOL: exists x. (Battleship(x) & ClosedToPublic(x) & EvaporatedIn(x, Mediterranean))\n\nANSWER: False\n\nThe USS Salem is not a battleship in the given premises, it is a heavy cruiser. Therefore, it cannot be a battleship that is closed to the public and evaporated in the Mediterranean.\nProcessed: False", "Generation 8:\nTEXT: The USS Salem is a heavy cruiser destroyed by the United States Navy.\nFOL: HeavyCruiser(USSSalem) & Destroyed(USSSalem, USNavy)\nTEXT: The last heavy cruiser to sink was the USS Salem.\nFOL: LastHeavyCruiserToSink(USSSalem)\nTEXT: The USS Salem is a battleship.\nFOL: Battleship(USSSalem)\nTEXT: Battleships are closed to the public.\nFOL: all x. (Battleship(x) -> ClosedToPublic(x))\nTEXT: The USS Salem evaporated in the Atlantic and Mediterranean.\nFOL: Evaporated(USSSalem, Atlantic) & Evaporated(USSSalem, Mediterranean)\nTEXT: There is a battleship closed to the public that evaporated in the Mediterranean.\nFOL: exists x. (Battleship(x) & ClosedToPublic(x) & Evaporated(x, Mediterranean))\n\nANSWER: False\n\nNote: The USS Salem is a heavy cruiser, not a battleship, so it cannot be both a battleship and closed to the public. Also, ships cannot evaporate. The information about the USS Salem evaporating is incorrect.\nProcessed: False", "Generation 9:\nTEXT: The USS Salem is a heavy cruiser destroyed by the United States Navy.\nFOL: Destroyed(USSSalem, USSNavy) & HeavyCruiser(USSSalem)\nTEXT: The last heavy cruiser to sink was the USS Salem.\nFOL: LastHeavyCruiserToSink(USSSalem)\nTEXT: The USS Salem is a battleship.\nFOL: Battleship(USSSalem)\nTEXT: Battleships are closed to the public.\nFOL: all x. (Battleship(x) -> ClosedToPublic(x))\nTEXT: The USS Salem evaporated in the Atlantic and Mediterranean.\nFOL: Evaporated(USSSalem, Atlantic) & Evaporated(USSSalem, Mediterranean)\nTEXT: There is a battleship closed to the public that evaporated in the Mediterranean.\nFOL: exists x. (Battleship(x) & ClosedToPublic(x) & Evaporated(x, Mediterranean))\n\nANSWER: False\n\nThe given conclusion is incorrect because the USS Salem is not a battleship, but a heavy cruiser. Therefore, there is no battleship that evaporated in the Mediterranean according to the premises.\nProcessed: False", "Generation 10:\nTEXT: The USS Salem is a heavy cruiser destroyed by the United States Navy.\nFOL: Destroyed(USSSalem, UnitedStatesNavy) & HeavyCruiser(USSSalem)\nTEXT: The last heavy cruiser to sink was the USS Salem.\nFOL: LastHeavyCruiserToSink(USSSalem)\nTEXT: The USS Salem is a battleship.\nFOL: Battleship(USSSalem)\nTEXT: Battleships are closed to the public.\nFOL: all x. (Battleship(x) -> ClosedToPublic(x))\nTEXT: The USS Salem evaporated in the Atlantic and Mediterranean.\nFOL: Evaporated(USSSalem, Atlantic) & Evaporated(USSSalem, Mediterranean)\nTEXT: There is a battleship closed to the public that evaporated in the Mediterranean.\nFOL: exists x. (Battleship(x) & ClosedToPublic(x) & Evaporated(x, Mediterranean))\n\nANSWER: True (assuming the premise that the USS Salem is a battleship is incorrect)\nProcessed: True\n\nReference: True\n========================================"], "answers": ["False", "True", "False", "False", "False", "Uncertain", "False", "False", "False", "True"]}
{"idx": 57, "prompt": "The following is a first-order logic (FOL) problem.\nThe problem is to determine whether the conclusion follows from the premises.\nThe premises are given in the form of a set of first-order logic sentences.\nThe conclusion is given in the form of a single first-order logic sentence.\nThe task is to translate each of the premises and conclusions into FOL expressions.and then to evaluate the conclusion as ANSWER: True, ANSWER: False, or ANSWER: Uncertain given the premises. The output should follow format TEXT: \nFOL: \nTEXT: \nFOL:... ANSWER: \n\n\n<PREMISES>\nAll biodegradable things are environment-friendly.\nAll woodware is biodegradable.\nAll paper is woodware.\nNothing is a good thing and also a bad thing.\nAll environment-friendly things are good.\nA worksheet is either paper or environment-friendly.\n</PREMISES>\n<CONCLUSION>\nA worksheet is not biodegradable.\n</CONCLUSION>\n<EVALUATE>\nTEXT: All biodegradable things are environment-friendly.\nFOL: all x. (Biodegradable(x) -> EnvironmentFriendly(x))\nTEXT: All woodware is biodegradable.\nFOL: all x. (Woodware(x) -> Biodegradable(x))\nTEXT: All paper is woodware.\nFOL: all x. (Paper(x) -> Woodware(x))\nTEXT: Nothing is a good thing and also a bad thing.\nFOL: -(exists x. (Good(x) & Bad(x)))\nTEXT: All environment-friendly things are good.\nFOL: all x. (EnvironmentFriendly(x) -> Good(x))\nTEXT: A worksheet is either paper or environment-friendly.\nFOL: ((Paper(Worksheet) & -EnvironmentFriendly(Worksheet)) | (-Paper(Worksheet) & EnvironmentFriendly(Worksheet)))\nTEXT: A worksheet is not biodegradable.\nFOL: -Dispensable(Worksheet)\n\nANSWER: Uncertain\n</EVALUATE>\n\n<PREMISES>\nA La Liga soccer team ranks higher than another La Liga soccer team if it receives more points.\nIf there are two La Liga soccer teams and neither has more points than the other, then the team which receives more points from the games between the two teams ranks higher.\nReal Madrid and Barcelona are both La Liga soccer teams.\nReal Madrid received more points than Barcelona.\nNeither Real Madrid nor Barcelona received more points from the games between them.\n</PREMISES>\n<CONCLUSION>\nReal Madrid ranks higher than Barcelona.\n</CONCLUSION>\n<EVALUATE>\nTEXT: A La Liga soccer team ranks higher than another La Liga soccer team if it receives more points.\nFOL: all x. all y. (LaLigaSoccerTeam(x) & LaLigaSoccerTeam(y) & MorePoints(x, y) -> RankHigherThan(x, y))\nTEXT: If there are two La Liga soccer teams and neither has more points than the other, then the team which receives more points from the games between the two teams ranks higher.\nFOL: all x. all y. (LaLigaSoccerTeam(x) & LaLigaSoccerTeam(y) & -MorePoints(x, y) & -MorePoints(y, x) & MorePointsInGameBetween(x, y) ->  RankHigherThan(x, y))\nTEXT: Real Madrid and Barcelona are both La Liga soccer teams.\nFOL: LaLigaSoccerTeam(RealMadrid) & LaLigaSoccerTeam(Barcelona)\nTEXT: Real Madrid received more points than Barcelona.\nFOL: MorePoints(RealMadrid, Barcelona)\nTEXT: Neither Real Madrid nor Barcelona received more points from the games between them.\nFOL: -MorePointsInGameBetween(RealMadrid, Barcelona) & -MorePointsInGameBetween(Barcelona, RealMadrid)\nTEXT: Real Madrid ranks higher than Barcelona.\nFOL: HigherRank(RealMadrid, Barcelona)\n\nANSWER: True\n</EVALUATE>\n\n<PREMISES>\nAll professional athletes spend most of their time on sports.\nAll Olympic gold medal winners are professional athletes.\nNo full-time scientists spend the majority of their time on sports.\nAll Nobel physics laureates are full-time scientists.\nAmy spends the most time on sports, or Amy is an Olympic gold medal winner.\nIf Amy is not a Nobel physics laureate, then Amy is not an Olympic gold medal winner.\n</PREMISES>\n<CONCLUSION>\nIf Amy is not an Olympic gold medal winner, then Amy is a Nobel physics laureate.\n</CONCLUSION>\n<EVALUATE>\nTEXT: All professional athletes spend most of their time on sports.\nFOL: all x. (ProfessionalAthlete(x) -> SpendOn(x, MostOfTheirTime, Sports))\nTEXT: All Olympic gold medal winners are professional athletes.\nFOL: all x. (OlympicGoldMedalWinner(x) -> ProfessionalAthlete(x))\nTEXT: No full-time scientists spend the majority of their time on sports.\nFOL: all x. (FullTimeScientist(x) -> -SpendOn(x, MostOfTheirTime, Sports))\nTEXT: All Nobel physics laureates are full-time scientists.\nFOL: all x. (NobelPhysicsLaureate(x) -> FullTimeScientist(x))\nTEXT: Amy spends the most time on sports, or Amy is an Olympic gold medal winner.\nFOL: SpendOn(Amy, MostOfTheirTime, Sports) | OlympicGoldMedalWinner(Amy)\nTEXT: If Amy is not a Nobel physics laureate, then Amy is not an Olympic gold medal winner.\nFOL: -NobelPhysicsLaureate(Amy) -> -OlympicGoldMedalWinner(Amy)\nTEXT: If Amy is not an Olympic gold medal winner, then Amy is a Nobel physics laureate.\nFOL: -OlympicGoldMedalWinner(Amy) -> NobelLaureate(Amy)\n\nANSWER: False\n</EVALUATE>\n\n<PREMISES>\nIf a person pays their taxes, then they contribute to the country.\nEveryone who works for a government department pays a tax on their salary.\nEveryone in the army is an employee of a government department.\nEveryone convicted of murder goes to prison.\nEveryone who has been to prison has a criminal record.\nJames was either once convicted of murder, or spent time in prison.\nJames either has a criminal record, or pays his taxes.\n</PREMISES>\n<CONCLUSION>\nJames does not contribute to the country.\n</CONCLUSION>\n<EVALUATE>\nTEXT: If a person pays their taxes, then they contribute to the country.\nFOL: all x. (Taxpayer(x) -> ContributeTo(x, Country))\nTEXT: Everyone who works for a government department pays a tax on their salary.\nFOL: all x. (WorkFor(x, GovernmentAgency) -> Taxpayer(x))\nTEXT: Everyone in the army is an employee of a government department.\nFOL: all x. (ServesIn(x, TheArmy) -> WorkFor(x, GovernmentAgency))\nTEXT: Everyone convicted of murder goes to prison.\nFOL: all x. (SentencedForMurder(x) -> Imprisoned(x))\nTEXT: Everyone who has been to prison has a criminal record.\nFOL: all x. (Imprisoned((x) -> Has(x, CriminalRecord))\nTEXT: James was either once convicted of murder, or spent time in prison.\nFOL: ((SentencedForMurder(James) & -Imprisoned(James)) | (-SentencedForMurder(James) & Imprisoned(James)))\nTEXT: James either has a criminal record, or pays his taxes.\nFOL: ((Has(James, CriminalRecord) & -Taxpayer(James)) | (-Has(James, CriminalRecord) & Taxpayer(James)))\nTEXT: James does not contribute to the country.\nFOL: ContributeToCountry(James)\n\nANSWER: Uncertain\n</EVALUATE>\n\n<PREMISES>\nNo songs are visuals.\nAll folk songs are songs.\nAll videos are visuals.\nAll movies are videos.\nAll sci-fi movies are movies.\nInception is a sci-fi movie.\nMac is neither a folk song nor a sci-fi movie.\n</PREMISES>\n<CONCLUSION>\nInception is a folk song.\n</CONCLUSION>\n<EVALUATE>\nTEXT: No songs are visuals.\nFOL: all x. (Song(x) -> -Visual(x))\nTEXT: All folk songs are songs.\nFOL: all x. (FolkSong(x) -> Song(x))\nTEXT: All videos are visuals.\nFOL: all x. (Video(x) -> Visual(x))\nTEXT: All movies are videos.\nFOL: all x. (Movie(x) -> Video(x))\nTEXT: All sci-fi movies are movies.\nFOL: all x. (ScifiMovie(x) -> Movie(x))\nTEXT: Inception is a sci-fi movie.\nFOL: ScifiMovie(Inception)\nTEXT: Mac is neither a folk song nor a sci-fi movie.\nFOL: -FolkSong(Mac) & -ScifiMovie(Mac)\nTEXT: Inception is a folk song.\nFOL: FolkSong(Inception)\n\nANSWER: False\n</EVALUATE>\n\n<PREMISES>\nEvery chef can cook.\nSome people who aren’t chefs can cook.\nPeople who cook can make scrambled eggs and pasta.\nIf someone can make cookies and muffins, they are a baker.\nBakers who can also make scrambled eggs can make a good breakfast.\nLuke can make cookies, scrambled eggs, and muffins, but not pasta.\n</PREMISES>\n<CONCLUSION>\nLuke is a chef.\n</CONCLUSION>\n<EVALUATE>\nTEXT: Every chef can cook.\nFOL: all x. (Chef(x) -> Can(x, Cook))\nTEXT: Some people who aren’t chefs can cook.\nFOL: exists x. (-Chef(x) & Can(x, Cook))\nTEXT: People who cook can make scrambled eggs and pasta.\nFOL: all x. (Can(x, Cook) -> (CanMake(x, ScrambledEggs) & CanMake(x, Pasta)))\nTEXT: If someone can make cookies and muffins, they are a baker.\nFOL: all x. (CanMake(x, Cookies) & CanMake(x, Muffins) -> Baker(x))\nTEXT: Bakers who can also make scrambled eggs can make a good breakfast.\nFOL: all x. ((Baker(x) & CanMake(x, ScrambledEggs)) -> CanMake(x, GoodBreakfast))\nTEXT: Luke can make cookies, scrambled eggs, and muffins, but not pasta.\nFOL: CanMake(Luke, Cookies) & (CanMake(Luke, ScrambledEggs) & CanMake(Luke, Muffins) & -CanMake(Luke, Pasta)\nTEXT: Luke is a chef.\nFOL: MakeGoodBreakfast(Luke)\n\nANSWER: False\n</EVALUATE>\n\n<PREMISES>\nETS develops various standardized tests primarily in the United States for K-12 and higher education.\nETS administers international tests, including the TOEFL, TOEIC, GRE, and subject tests.\nMany of the assessments ETS develops are associated with entry to the US tertiary and quaternary education institutions.\nETS also develops K-12 statewide assessments used for accountability testing in many states.\n</PREMISES>\n<CONCLUSION>\nETS doesn't administer tests internationally.\n</CONCLUSION>\n<EVALUATE>\nTEXT: ETS develops various standardized tests primarily in the United States for K-12 and higher education.\nFOL: exists x. exists y. (Develop(eTS, x) & Develop(eTS, y) & StandardizedTest(x) & StandardizedTest(y) & In(x, UnitedState) & In(y, UnitedState) & For(x, kOneTwoAndHigherEducation) & For(y, kOneTwoAndHigherEducation))\nTEXT: ETS administers international tests, including the TOEFL, TOEIC, GRE, and subject tests.\nFOL: exists x. (Administer(eTS, x) & InternationalTest(x) & (TOEFL(x) | TOEIC(x) | GRE(x) | SubjectTest(x)))\nTEXT: Many of the assessments ETS develops are associated with entry to the US tertiary and quaternary education institutions.\nFOL: exists x. (Develop(eTS, x) & AssociatedWith(x, EntryToUSEducationInstitution))\nTEXT: ETS also develops K-12 statewide assessments used for accountability testing in many states.\nFOL: exists x. (Develop(eTS, x) & StateWideAssesment(x) & UsedFor(x, AccountabilityTesting))\nTEXT: ETS doesn't administer tests internationally.\nFOL: exists x. (Develops(Ets, x) & For(x, k-OneTwoandhighereducation)) & exists x. (Develops(Ets, x) & AssociatedWith(x, Entrytouseducationinstitutions))\n\nANSWER: False\n</EVALUATE>\n\n<PREMISES>\nDaveed Diggs is an actor and film producer.\nDaveed Diggs played two roles in the musical Hamilton on Broadway.\nOne of the actors from Hamilton won the best actor award.\nThe actor playing Thomas Jefferson won the best actor award.\nDaveed Diggs played Thomas Jefferson.\nMusicals on Broadway are not films.\n</PREMISES>\n<CONCLUSION>\nDaveed Diggs won the best actor award.\n</CONCLUSION>\n<EVALUATE>\nTEXT: Daveed Diggs is an actor and film producer.\nFOL: Actor(DaveedDiggs) & FilmProducer(DaveedDiggs)\nTEXT: Daveed Diggs played two roles in the musical Hamilton on Broadway.\nFOL: exists x. exists y.(PlaysIn(DaveedDiggs, x, Hamilton) & (-(x=y)) & PlaysIn(DaveedDiggs, y, Hamilton)) & OnBroadway(Hamilton) & Musical(Hamilton)\nTEXT: One of the actors from Hamilton won the best actor award.\nFOL: exists x. exists y.(Actor(x) & PlaysIn(x, y, Hamilton) & Wins(x, BestActorAward))\nTEXT: The actor playing Thomas Jefferson won the best actor award.\nFOL: exists x. (Actor(x) & PlaysIn(x, ThomasJefferson, Hamilton) & Wins(x, BestActorAward))\nTEXT: Daveed Diggs played Thomas Jefferson.\nFOL: Plays(DaveedDiggs, ThomasJefferson)\nTEXT: Musicals on Broadway are not films.\nFOL: all x. ((Musical(x) & OnBroadway(x)) -> -Film(x))\nTEXT: Daveed Diggs won the best actor award.\nFOL: exists x. (BRICS(x) & Speaks(x, Hindi))\n\nANSWER: True\n</EVALUATE>\n\n<PREMISES>\nTyga is an astronaut.\nAstronauts consume rock albums.\nTyga consumed the Well Done 3 album.\nAstronauts are not opera singers.\n</PREMISES>\n<CONCLUSION>\nWell Done 3 is a rock album.\n</CONCLUSION>\n<EVALUATE>", "raw_generations": ["Generation 1:\nTEXT: Tyga is an astronaut.\nFOL: Astronaut(Tyga)\nTEXT: Astronauts consume rock albums.\nFOL: all x. (Astronaut(x) -> Consumes(x, RockAlbum))\nTEXT: Tyga consumed the Well Done 3 album.\nFOL: Consumes(Tyga, WellDone3)\nTEXT: Astronauts are not opera singers.\nFOL: all x. (Astronaut(x) -> -OperaSinger(x))\nTEXT: Well Done 3 is a rock album.\nFOL: RockAlbum(WellDone3)\n\nANSWER: True\nProcessed: True", "Generation 2:\nTEXT: Tyga is an astronaut.\nFOL: Astronaut(Tyga)\nTEXT: Astronauts consume rock albums.\nFOL: all x. (Astronaut(x) -> Consumes(x, RockAlbum))\nTEXT: Tyga consumed the Well Done 3 album.\nFOL: Consumes(Tyga, WellDone3)\nTEXT: Astronauts are not opera singers.\nFOL: all x. (Astronaut(x) -> -OperaSinger(x))\nTEXT: Well Done 3 is a rock album.\nFOL: RockAlbum(WellDone3)\n\nANSWER: True\nProcessed: True", "Generation 3:\nTEXT: Tyga is an astronaut.\nFOL: Astronaut(Tyga)\nTEXT: Astronauts consume rock albums.\nFOL: all x. (Astronaut(x) -> Consumes(x, RockAlbum))\nTEXT: Tyga consumed the Well Done 3 album.\nFOL: Consumes(Tyga, WellDone3)\nTEXT: Astronauts are not opera singers.\nFOL: all x. (Astronaut(x) -> -OperaSinger(x))\nTEXT: Well Done 3 is a rock album.\nFOL: RockAlbum(WellDone3)\n\nANSWER: True\nProcessed: True", "Generation 4:\nTEXT: Tyga is an astronaut.\nFOL: Astronaut(Tyga)\n\nTEXT: Astronauts consume rock albums.\nFOL: all x. (Astronaut(x) -> Consumes(x, RockAlbum))\n\nTEXT: Tyga consumed the Well Done 3 album.\nFOL: Consumes(Tyga, WellDone3)\n\nTEXT: Astronauts are not opera singers.\nFOL: all x. (Astronaut(x) -> -OperaSinger(x))\n\nTEXT: Well Done 3 is a rock album.\nFOL: RockAlbum(WellDone3)\n\nANSWER: True\nProcessed: True", "Generation 5:\nTEXT: Tyga is an astronaut.\nFOL: Astronaut(Tyga)\nTEXT: Astronauts consume rock albums.\nFOL: all x. (Astronaut(x) -> Consumes(x, RockAlbum))\nTEXT: Tyga consumed the Well Done 3 album.\nFOL: Consumes(Tyga, WellDone3)\nTEXT: Astronauts are not opera singers.\nFOL: all x. (Astronaut(x) -> -OperaSinger(x))\nTEXT: Well Done 3 is a rock album.\nFOL: RockAlbum(WellDone3)\n\nANSWER: True\nProcessed: True", "Generation 6:\nTEXT: Tyga is an astronaut.\nFOL: Astronaut(Tyga)\nTEXT: Astronauts consume rock albums.\nFOL: all x. (Astronaut(x) -> Consumes(x, RockAlbum))\nTEXT: Tyga consumed the Well Done 3 album.\nFOL: Consumes(Tyga, WellDone3)\nTEXT: Astronauts are not opera singers.\nFOL: -(all x. (Astronaut(x) -> OperaSinger(x)))\nTEXT: Well Done 3 is a rock album.\nFOL: RockAlbum(WellDone3)\n\nANSWER: True\nProcessed: True", "Generation 7:\nTEXT: Tyga is an astronaut.\nFOL: Astronaut(Tyga)\nTEXT: Astronauts consume rock albums.\nFOL: all x. (Astronaut(x) -> Consumes(x, RockAlbum))\nTEXT: Tyga consumed the Well Done 3 album.\nFOL: Consumes(Tyga, WellDone3)\nTEXT: Astronauts are not opera singers.\nFOL: all x. (Astronaut(x) -> -OperaSinger(x))\nTEXT: Well Done 3 is a rock album.\nFOL: RockAlbum(WellDone3)\n\nANSWER: True\nProcessed: True", "Generation 8:\nTEXT: Tyga is an astronaut.\nFOL: Astronaut(Tyga)\nTEXT: Astronauts consume rock albums.\nFOL: all x. (Astronaut(x) -> Consumes(x, RockAlbum))\nTEXT: Tyga consumed the Well Done 3 album.\nFOL: Consumes(Tyga, WellDone3)\nTEXT: Astronauts are not opera singers.\nFOL: all x. (Astronaut(x) -> -OperaSinger(x))\nTEXT: Well Done 3 is a rock album.\nFOL: RockAlbum(WellDone3)\n\nANSWER: True\nProcessed: True", "Generation 9:\nTEXT: Tyga is an astronaut.\nFOL: Astronaut(Tyga)\nTEXT: Astronauts consume rock albums.\nFOL: all x. (Astronaut(x) -> Consumes(x, RockAlbum))\nTEXT: Tyga consumed the Well Done 3 album.\nFOL: Consumes(Tyga, WellDone3)\nTEXT: Astronauts are not opera singers.\nFOL: all x. (Astronaut(x) -> -OperaSinger(x))\nTEXT: Well Done 3 is a rock album.\nFOL: RockAlbum(WellDone3)\n\nANSWER: True\nProcessed: True", "Generation 10:\nTEXT: Tyga is an astronaut.\nFOL: Astronaut(Tyga)\nTEXT: Astronauts consume rock albums.\nFOL: all x. (Astronaut(x) -> Consumes(x, RockAlbum))\nTEXT: Tyga consumed the Well Done 3 album.\nFOL: Consumes(Tyga, WellDone3)\nTEXT: Astronauts are not opera singers.\nFOL: all x. (Astronaut(x) -> -OperaSinger(x))\nTEXT: Well Done 3 is a rock album.\nFOL: RockAlbum(WellDone3)\n\nANSWER: True\nProcessed: True\n\nReference: True\n========================================"], "answers": ["True", "True", "True", "True", "True", "True", "True", "True", "True", "True"]}
{"idx": 58, "prompt": "The following is a first-order logic (FOL) problem.\nThe problem is to determine whether the conclusion follows from the premises.\nThe premises are given in the form of a set of first-order logic sentences.\nThe conclusion is given in the form of a single first-order logic sentence.\nThe task is to translate each of the premises and conclusions into FOL expressions.and then to evaluate the conclusion as ANSWER: True, ANSWER: False, or ANSWER: Uncertain given the premises. The output should follow format TEXT: \nFOL: \nTEXT: \nFOL:... ANSWER: \n\n\n<PREMISES>\nAll biodegradable things are environment-friendly.\nAll woodware is biodegradable.\nAll paper is woodware.\nNothing is a good thing and also a bad thing.\nAll environment-friendly things are good.\nA worksheet is either paper or environment-friendly.\n</PREMISES>\n<CONCLUSION>\nA worksheet is not biodegradable.\n</CONCLUSION>\n<EVALUATE>\nTEXT: All biodegradable things are environment-friendly.\nFOL: all x. (Biodegradable(x) -> EnvironmentFriendly(x))\nTEXT: All woodware is biodegradable.\nFOL: all x. (Woodware(x) -> Biodegradable(x))\nTEXT: All paper is woodware.\nFOL: all x. (Paper(x) -> Woodware(x))\nTEXT: Nothing is a good thing and also a bad thing.\nFOL: -(exists x. (Good(x) & Bad(x)))\nTEXT: All environment-friendly things are good.\nFOL: all x. (EnvironmentFriendly(x) -> Good(x))\nTEXT: A worksheet is either paper or environment-friendly.\nFOL: ((Paper(Worksheet) & -EnvironmentFriendly(Worksheet)) | (-Paper(Worksheet) & EnvironmentFriendly(Worksheet)))\nTEXT: A worksheet is not biodegradable.\nFOL: -Dispensable(Worksheet)\n\nANSWER: Uncertain\n</EVALUATE>\n\n<PREMISES>\nA La Liga soccer team ranks higher than another La Liga soccer team if it receives more points.\nIf there are two La Liga soccer teams and neither has more points than the other, then the team which receives more points from the games between the two teams ranks higher.\nReal Madrid and Barcelona are both La Liga soccer teams.\nReal Madrid received more points than Barcelona.\nNeither Real Madrid nor Barcelona received more points from the games between them.\n</PREMISES>\n<CONCLUSION>\nReal Madrid ranks higher than Barcelona.\n</CONCLUSION>\n<EVALUATE>\nTEXT: A La Liga soccer team ranks higher than another La Liga soccer team if it receives more points.\nFOL: all x. all y. (LaLigaSoccerTeam(x) & LaLigaSoccerTeam(y) & MorePoints(x, y) -> RankHigherThan(x, y))\nTEXT: If there are two La Liga soccer teams and neither has more points than the other, then the team which receives more points from the games between the two teams ranks higher.\nFOL: all x. all y. (LaLigaSoccerTeam(x) & LaLigaSoccerTeam(y) & -MorePoints(x, y) & -MorePoints(y, x) & MorePointsInGameBetween(x, y) ->  RankHigherThan(x, y))\nTEXT: Real Madrid and Barcelona are both La Liga soccer teams.\nFOL: LaLigaSoccerTeam(RealMadrid) & LaLigaSoccerTeam(Barcelona)\nTEXT: Real Madrid received more points than Barcelona.\nFOL: MorePoints(RealMadrid, Barcelona)\nTEXT: Neither Real Madrid nor Barcelona received more points from the games between them.\nFOL: -MorePointsInGameBetween(RealMadrid, Barcelona) & -MorePointsInGameBetween(Barcelona, RealMadrid)\nTEXT: Real Madrid ranks higher than Barcelona.\nFOL: HigherRank(RealMadrid, Barcelona)\n\nANSWER: True\n</EVALUATE>\n\n<PREMISES>\nAll professional athletes spend most of their time on sports.\nAll Olympic gold medal winners are professional athletes.\nNo full-time scientists spend the majority of their time on sports.\nAll Nobel physics laureates are full-time scientists.\nAmy spends the most time on sports, or Amy is an Olympic gold medal winner.\nIf Amy is not a Nobel physics laureate, then Amy is not an Olympic gold medal winner.\n</PREMISES>\n<CONCLUSION>\nIf Amy is not an Olympic gold medal winner, then Amy is a Nobel physics laureate.\n</CONCLUSION>\n<EVALUATE>\nTEXT: All professional athletes spend most of their time on sports.\nFOL: all x. (ProfessionalAthlete(x) -> SpendOn(x, MostOfTheirTime, Sports))\nTEXT: All Olympic gold medal winners are professional athletes.\nFOL: all x. (OlympicGoldMedalWinner(x) -> ProfessionalAthlete(x))\nTEXT: No full-time scientists spend the majority of their time on sports.\nFOL: all x. (FullTimeScientist(x) -> -SpendOn(x, MostOfTheirTime, Sports))\nTEXT: All Nobel physics laureates are full-time scientists.\nFOL: all x. (NobelPhysicsLaureate(x) -> FullTimeScientist(x))\nTEXT: Amy spends the most time on sports, or Amy is an Olympic gold medal winner.\nFOL: SpendOn(Amy, MostOfTheirTime, Sports) | OlympicGoldMedalWinner(Amy)\nTEXT: If Amy is not a Nobel physics laureate, then Amy is not an Olympic gold medal winner.\nFOL: -NobelPhysicsLaureate(Amy) -> -OlympicGoldMedalWinner(Amy)\nTEXT: If Amy is not an Olympic gold medal winner, then Amy is a Nobel physics laureate.\nFOL: -OlympicGoldMedalWinner(Amy) -> NobelLaureate(Amy)\n\nANSWER: False\n</EVALUATE>\n\n<PREMISES>\nIf a person pays their taxes, then they contribute to the country.\nEveryone who works for a government department pays a tax on their salary.\nEveryone in the army is an employee of a government department.\nEveryone convicted of murder goes to prison.\nEveryone who has been to prison has a criminal record.\nJames was either once convicted of murder, or spent time in prison.\nJames either has a criminal record, or pays his taxes.\n</PREMISES>\n<CONCLUSION>\nJames does not contribute to the country.\n</CONCLUSION>\n<EVALUATE>\nTEXT: If a person pays their taxes, then they contribute to the country.\nFOL: all x. (Taxpayer(x) -> ContributeTo(x, Country))\nTEXT: Everyone who works for a government department pays a tax on their salary.\nFOL: all x. (WorkFor(x, GovernmentAgency) -> Taxpayer(x))\nTEXT: Everyone in the army is an employee of a government department.\nFOL: all x. (ServesIn(x, TheArmy) -> WorkFor(x, GovernmentAgency))\nTEXT: Everyone convicted of murder goes to prison.\nFOL: all x. (SentencedForMurder(x) -> Imprisoned(x))\nTEXT: Everyone who has been to prison has a criminal record.\nFOL: all x. (Imprisoned((x) -> Has(x, CriminalRecord))\nTEXT: James was either once convicted of murder, or spent time in prison.\nFOL: ((SentencedForMurder(James) & -Imprisoned(James)) | (-SentencedForMurder(James) & Imprisoned(James)))\nTEXT: James either has a criminal record, or pays his taxes.\nFOL: ((Has(James, CriminalRecord) & -Taxpayer(James)) | (-Has(James, CriminalRecord) & Taxpayer(James)))\nTEXT: James does not contribute to the country.\nFOL: ContributeToCountry(James)\n\nANSWER: Uncertain\n</EVALUATE>\n\n<PREMISES>\nNo songs are visuals.\nAll folk songs are songs.\nAll videos are visuals.\nAll movies are videos.\nAll sci-fi movies are movies.\nInception is a sci-fi movie.\nMac is neither a folk song nor a sci-fi movie.\n</PREMISES>\n<CONCLUSION>\nInception is a folk song.\n</CONCLUSION>\n<EVALUATE>\nTEXT: No songs are visuals.\nFOL: all x. (Song(x) -> -Visual(x))\nTEXT: All folk songs are songs.\nFOL: all x. (FolkSong(x) -> Song(x))\nTEXT: All videos are visuals.\nFOL: all x. (Video(x) -> Visual(x))\nTEXT: All movies are videos.\nFOL: all x. (Movie(x) -> Video(x))\nTEXT: All sci-fi movies are movies.\nFOL: all x. (ScifiMovie(x) -> Movie(x))\nTEXT: Inception is a sci-fi movie.\nFOL: ScifiMovie(Inception)\nTEXT: Mac is neither a folk song nor a sci-fi movie.\nFOL: -FolkSong(Mac) & -ScifiMovie(Mac)\nTEXT: Inception is a folk song.\nFOL: FolkSong(Inception)\n\nANSWER: False\n</EVALUATE>\n\n<PREMISES>\nEvery chef can cook.\nSome people who aren’t chefs can cook.\nPeople who cook can make scrambled eggs and pasta.\nIf someone can make cookies and muffins, they are a baker.\nBakers who can also make scrambled eggs can make a good breakfast.\nLuke can make cookies, scrambled eggs, and muffins, but not pasta.\n</PREMISES>\n<CONCLUSION>\nLuke is a chef.\n</CONCLUSION>\n<EVALUATE>\nTEXT: Every chef can cook.\nFOL: all x. (Chef(x) -> Can(x, Cook))\nTEXT: Some people who aren’t chefs can cook.\nFOL: exists x. (-Chef(x) & Can(x, Cook))\nTEXT: People who cook can make scrambled eggs and pasta.\nFOL: all x. (Can(x, Cook) -> (CanMake(x, ScrambledEggs) & CanMake(x, Pasta)))\nTEXT: If someone can make cookies and muffins, they are a baker.\nFOL: all x. (CanMake(x, Cookies) & CanMake(x, Muffins) -> Baker(x))\nTEXT: Bakers who can also make scrambled eggs can make a good breakfast.\nFOL: all x. ((Baker(x) & CanMake(x, ScrambledEggs)) -> CanMake(x, GoodBreakfast))\nTEXT: Luke can make cookies, scrambled eggs, and muffins, but not pasta.\nFOL: CanMake(Luke, Cookies) & (CanMake(Luke, ScrambledEggs) & CanMake(Luke, Muffins) & -CanMake(Luke, Pasta)\nTEXT: Luke is a chef.\nFOL: MakeGoodBreakfast(Luke)\n\nANSWER: False\n</EVALUATE>\n\n<PREMISES>\nETS develops various standardized tests primarily in the United States for K-12 and higher education.\nETS administers international tests, including the TOEFL, TOEIC, GRE, and subject tests.\nMany of the assessments ETS develops are associated with entry to the US tertiary and quaternary education institutions.\nETS also develops K-12 statewide assessments used for accountability testing in many states.\n</PREMISES>\n<CONCLUSION>\nETS doesn't administer tests internationally.\n</CONCLUSION>\n<EVALUATE>\nTEXT: ETS develops various standardized tests primarily in the United States for K-12 and higher education.\nFOL: exists x. exists y. (Develop(eTS, x) & Develop(eTS, y) & StandardizedTest(x) & StandardizedTest(y) & In(x, UnitedState) & In(y, UnitedState) & For(x, kOneTwoAndHigherEducation) & For(y, kOneTwoAndHigherEducation))\nTEXT: ETS administers international tests, including the TOEFL, TOEIC, GRE, and subject tests.\nFOL: exists x. (Administer(eTS, x) & InternationalTest(x) & (TOEFL(x) | TOEIC(x) | GRE(x) | SubjectTest(x)))\nTEXT: Many of the assessments ETS develops are associated with entry to the US tertiary and quaternary education institutions.\nFOL: exists x. (Develop(eTS, x) & AssociatedWith(x, EntryToUSEducationInstitution))\nTEXT: ETS also develops K-12 statewide assessments used for accountability testing in many states.\nFOL: exists x. (Develop(eTS, x) & StateWideAssesment(x) & UsedFor(x, AccountabilityTesting))\nTEXT: ETS doesn't administer tests internationally.\nFOL: exists x. (Develops(Ets, x) & For(x, k-OneTwoandhighereducation)) & exists x. (Develops(Ets, x) & AssociatedWith(x, Entrytouseducationinstitutions))\n\nANSWER: False\n</EVALUATE>\n\n<PREMISES>\nDaveed Diggs is an actor and film producer.\nDaveed Diggs played two roles in the musical Hamilton on Broadway.\nOne of the actors from Hamilton won the best actor award.\nThe actor playing Thomas Jefferson won the best actor award.\nDaveed Diggs played Thomas Jefferson.\nMusicals on Broadway are not films.\n</PREMISES>\n<CONCLUSION>\nDaveed Diggs won the best actor award.\n</CONCLUSION>\n<EVALUATE>\nTEXT: Daveed Diggs is an actor and film producer.\nFOL: Actor(DaveedDiggs) & FilmProducer(DaveedDiggs)\nTEXT: Daveed Diggs played two roles in the musical Hamilton on Broadway.\nFOL: exists x. exists y.(PlaysIn(DaveedDiggs, x, Hamilton) & (-(x=y)) & PlaysIn(DaveedDiggs, y, Hamilton)) & OnBroadway(Hamilton) & Musical(Hamilton)\nTEXT: One of the actors from Hamilton won the best actor award.\nFOL: exists x. exists y.(Actor(x) & PlaysIn(x, y, Hamilton) & Wins(x, BestActorAward))\nTEXT: The actor playing Thomas Jefferson won the best actor award.\nFOL: exists x. (Actor(x) & PlaysIn(x, ThomasJefferson, Hamilton) & Wins(x, BestActorAward))\nTEXT: Daveed Diggs played Thomas Jefferson.\nFOL: Plays(DaveedDiggs, ThomasJefferson)\nTEXT: Musicals on Broadway are not films.\nFOL: all x. ((Musical(x) & OnBroadway(x)) -> -Film(x))\nTEXT: Daveed Diggs won the best actor award.\nFOL: exists x. (BRICS(x) & Speaks(x, Hindi))\n\nANSWER: True\n</EVALUATE>\n\n<PREMISES>\nTyga is an astronaut.\nAstronauts consume rap albums.\nTyga consumed the Well Done 3 album.\nAstronauts are not rappers.\n</PREMISES>\n<CONCLUSION>\nTyga is a rapper.\n</CONCLUSION>\n<EVALUATE>", "raw_generations": ["Generation 1:\nTEXT: Tyga is an astronaut.\nFOL: Astronaut(Tyga)\nTEXT: Astronauts consume rap albums.\nFOL: all x. (Astronaut(x) -> Consumes(x, RapAlbum))\nTEXT: Tyga consumed the Well Done 3 album.\nFOL: Consumes(Tyga, WellDone3)\nTEXT: Astronauts are not rappers.\nFOL: -(all x. (Astronaut(x) -> Rapper(x)))\nTEXT: Tyga is a rapper.\nFOL: Rapper(Tyga)\n\nANSWER: False\nProcessed: False", "Generation 2:\nTEXT: Tyga is an astronaut.\nFOL: Astronaut(Tyga)\nTEXT: Astronauts consume rap albums.\nFOL: all x. (Astronaut(x) -> Consumes(x, RapAlbum))\nTEXT: Tyga consumed the Well Done 3 album.\nFOL: Consumes(Tyga, WellDone3)\nTEXT: Astronauts are not rappers.\nFOL: all x. (-Rapper(x) & Astronaut(x))\nTEXT: Tyga is a rapper.\nFOL: Rapper(Tyga)\n\nANSWER: False\nProcessed: False", "Generation 3:\nTEXT: Tyga is an astronaut.\nFOL: Astronaut(Tyga)\nTEXT: Astronauts consume rap albums.\nFOL: all x. (Astronaut(x) -> Consumes(x, RapAlbum))\nTEXT: Tyga consumed the Well Done 3 album.\nFOL: Consumes(Tyga, WellDone3)\nTEXT: Astronauts are not rappers.\nFOL: all x. (-Rapper(x) & Astronaut(x))\nTEXT: Tyga is a rapper.\nFOL: Rapper(Tyga)\n\nANSWER: False\nProcessed: False", "Generation 4:\nTEXT: Tyga is an astronaut.\nFOL: Astronaut(Tyga)\nTEXT: Astronauts consume rap albums.\nFOL: all x. (Astronaut(x) -> Consumes(x, RapAlbum))\nTEXT: Tyga consumed the Well Done 3 album.\nFOL: Consumes(Tyga, WellDone3)\nTEXT: Astronauts are not rappers.\nFOL: all x. (-Rapper(x) & Astronaut(x))\nTEXT: Tyga is a rapper.\nFOL: Rapper(Tyga)\n\nANSWER: False\nProcessed: False", "Generation 5:\nTEXT: Tyga is an astronaut.\nFOL: Astronaut(Tyga)\nTEXT: Astronauts consume rap albums.\nFOL: all x. (Astronaut(x) -> Consumes(x, RapAlbum))\nTEXT: Tyga consumed the Well Done 3 album.\nFOL: Consumes(Tyga, WellDone3)\nTEXT: Astronauts are not rappers.\nFOL: -(all x. (Astronaut(x) -> Rapper(x)))\nTEXT: Tyga is a rapper.\nFOL: Rapper(Tyga)\n\nANSWER: False\nProcessed: False", "Generation 6:\nTEXT: Tyga is an astronaut.\nFOL: Astronaut(Tyga)\nTEXT: Astronauts consume rap albums.\nFOL: all x. (Astronaut(x) -> Consumes(x, RapAlbum))\nTEXT: Tyga consumed the Well Done 3 album.\nFOL: Consumes(Tyga, WellDone3)\nTEXT: Astronauts are not rappers.\nFOL: all x. (Astronaut(x) -> -Rapper(x))\nTEXT: Tyga is a rapper.\nFOL: Rapper(Tyga)\n\nANSWER: False\nProcessed: False", "Generation 7:\nTEXT: Tyga is an astronaut.\nFOL: Astronaut(Tyga)\nTEXT: Astronauts consume rap albums.\nFOL: all x. (Astronaut(x) -> Consumes(x, RapAlbum))\nTEXT: Tyga consumed the Well Done 3 album.\nFOL: Consumes(Tyga, WellDone3)\nTEXT: Astronauts are not rappers.\nFOL: all x. (-(Astronaut(x) & Rapper(x)))\nTEXT: Tyga is a rapper.\nFOL: Rapper(Tyga)\n\nANSWER: False\nProcessed: False", "Generation 8:\nTEXT: Tyga is an astronaut.\nFOL: Astronaut(Tyga)\nTEXT: Astronauts consume rap albums.\nFOL: all x. (Astronaut(x) -> Consumes(x, RapAlbum))\nTEXT: Tyga consumed the Well Done 3 album.\nFOL: Consumes(Tyga, WellDone3)\nTEXT: Astronauts are not rappers.\nFOL: all x. (Astronaut(x) -> -Rapper(x))\nTEXT: Tyga is a rapper.\nFOL: Rapper(Tyga)\n\nANSWER: False\nProcessed: False", "Generation 9:\nTEXT: Tyga is an astronaut.\nFOL: Astronaut(Tyga)\nTEXT: Astronauts consume rap albums.\nFOL: all x. (Astronaut(x) -> Consumes(x, RapAlbums))\nTEXT: Tyga consumed the Well Done 3 album.\nFOL: Consumes(Tyga, WellDone3)\nTEXT: Astronauts are not rappers.\nFOL: all x. (Astronaut(x) -> -Rapper(x))\nTEXT: Tyga is a rapper.\nFOL: Rapper(Tyga)\n\nANSWER: False\nProcessed: False", "Generation 10:\nTEXT: Tyga is an astronaut.\nFOL: Astronaut(Tyga)\nTEXT: Astronauts consume rap albums.\nFOL: all x. (Astronaut(x) -> Consumes(x, RapAlbum))\nTEXT: Tyga consumed the Well Done 3 album.\nFOL: Consumes(Tyga, WellDone3)\nTEXT: Astronauts are not rappers.\nFOL: all x. (Astronaut(x) -> -Rapper(x))\nTEXT: Tyga is a rapper.\nFOL: Rapper(Tyga)\n\nANSWER: False\nProcessed: False\n\nReference: False\n========================================"], "answers": ["False", "False", "False", "False", "False", "False", "False", "False", "False", "False"]}
{"idx": 59, "prompt": "The following is a first-order logic (FOL) problem.\nThe problem is to determine whether the conclusion follows from the premises.\nThe premises are given in the form of a set of first-order logic sentences.\nThe conclusion is given in the form of a single first-order logic sentence.\nThe task is to translate each of the premises and conclusions into FOL expressions.and then to evaluate the conclusion as ANSWER: True, ANSWER: False, or ANSWER: Uncertain given the premises. The output should follow format TEXT: \nFOL: \nTEXT: \nFOL:... ANSWER: \n\n\n<PREMISES>\nAll biodegradable things are environment-friendly.\nAll woodware is biodegradable.\nAll paper is woodware.\nNothing is a good thing and also a bad thing.\nAll environment-friendly things are good.\nA worksheet is either paper or environment-friendly.\n</PREMISES>\n<CONCLUSION>\nA worksheet is not biodegradable.\n</CONCLUSION>\n<EVALUATE>\nTEXT: All biodegradable things are environment-friendly.\nFOL: all x. (Biodegradable(x) -> EnvironmentFriendly(x))\nTEXT: All woodware is biodegradable.\nFOL: all x. (Woodware(x) -> Biodegradable(x))\nTEXT: All paper is woodware.\nFOL: all x. (Paper(x) -> Woodware(x))\nTEXT: Nothing is a good thing and also a bad thing.\nFOL: -(exists x. (Good(x) & Bad(x)))\nTEXT: All environment-friendly things are good.\nFOL: all x. (EnvironmentFriendly(x) -> Good(x))\nTEXT: A worksheet is either paper or environment-friendly.\nFOL: ((Paper(Worksheet) & -EnvironmentFriendly(Worksheet)) | (-Paper(Worksheet) & EnvironmentFriendly(Worksheet)))\nTEXT: A worksheet is not biodegradable.\nFOL: -Dispensable(Worksheet)\n\nANSWER: Uncertain\n</EVALUATE>\n\n<PREMISES>\nA La Liga soccer team ranks higher than another La Liga soccer team if it receives more points.\nIf there are two La Liga soccer teams and neither has more points than the other, then the team which receives more points from the games between the two teams ranks higher.\nReal Madrid and Barcelona are both La Liga soccer teams.\nReal Madrid received more points than Barcelona.\nNeither Real Madrid nor Barcelona received more points from the games between them.\n</PREMISES>\n<CONCLUSION>\nReal Madrid ranks higher than Barcelona.\n</CONCLUSION>\n<EVALUATE>\nTEXT: A La Liga soccer team ranks higher than another La Liga soccer team if it receives more points.\nFOL: all x. all y. (LaLigaSoccerTeam(x) & LaLigaSoccerTeam(y) & MorePoints(x, y) -> RankHigherThan(x, y))\nTEXT: If there are two La Liga soccer teams and neither has more points than the other, then the team which receives more points from the games between the two teams ranks higher.\nFOL: all x. all y. (LaLigaSoccerTeam(x) & LaLigaSoccerTeam(y) & -MorePoints(x, y) & -MorePoints(y, x) & MorePointsInGameBetween(x, y) ->  RankHigherThan(x, y))\nTEXT: Real Madrid and Barcelona are both La Liga soccer teams.\nFOL: LaLigaSoccerTeam(RealMadrid) & LaLigaSoccerTeam(Barcelona)\nTEXT: Real Madrid received more points than Barcelona.\nFOL: MorePoints(RealMadrid, Barcelona)\nTEXT: Neither Real Madrid nor Barcelona received more points from the games between them.\nFOL: -MorePointsInGameBetween(RealMadrid, Barcelona) & -MorePointsInGameBetween(Barcelona, RealMadrid)\nTEXT: Real Madrid ranks higher than Barcelona.\nFOL: HigherRank(RealMadrid, Barcelona)\n\nANSWER: True\n</EVALUATE>\n\n<PREMISES>\nAll professional athletes spend most of their time on sports.\nAll Olympic gold medal winners are professional athletes.\nNo full-time scientists spend the majority of their time on sports.\nAll Nobel physics laureates are full-time scientists.\nAmy spends the most time on sports, or Amy is an Olympic gold medal winner.\nIf Amy is not a Nobel physics laureate, then Amy is not an Olympic gold medal winner.\n</PREMISES>\n<CONCLUSION>\nIf Amy is not an Olympic gold medal winner, then Amy is a Nobel physics laureate.\n</CONCLUSION>\n<EVALUATE>\nTEXT: All professional athletes spend most of their time on sports.\nFOL: all x. (ProfessionalAthlete(x) -> SpendOn(x, MostOfTheirTime, Sports))\nTEXT: All Olympic gold medal winners are professional athletes.\nFOL: all x. (OlympicGoldMedalWinner(x) -> ProfessionalAthlete(x))\nTEXT: No full-time scientists spend the majority of their time on sports.\nFOL: all x. (FullTimeScientist(x) -> -SpendOn(x, MostOfTheirTime, Sports))\nTEXT: All Nobel physics laureates are full-time scientists.\nFOL: all x. (NobelPhysicsLaureate(x) -> FullTimeScientist(x))\nTEXT: Amy spends the most time on sports, or Amy is an Olympic gold medal winner.\nFOL: SpendOn(Amy, MostOfTheirTime, Sports) | OlympicGoldMedalWinner(Amy)\nTEXT: If Amy is not a Nobel physics laureate, then Amy is not an Olympic gold medal winner.\nFOL: -NobelPhysicsLaureate(Amy) -> -OlympicGoldMedalWinner(Amy)\nTEXT: If Amy is not an Olympic gold medal winner, then Amy is a Nobel physics laureate.\nFOL: -OlympicGoldMedalWinner(Amy) -> NobelLaureate(Amy)\n\nANSWER: False\n</EVALUATE>\n\n<PREMISES>\nIf a person pays their taxes, then they contribute to the country.\nEveryone who works for a government department pays a tax on their salary.\nEveryone in the army is an employee of a government department.\nEveryone convicted of murder goes to prison.\nEveryone who has been to prison has a criminal record.\nJames was either once convicted of murder, or spent time in prison.\nJames either has a criminal record, or pays his taxes.\n</PREMISES>\n<CONCLUSION>\nJames does not contribute to the country.\n</CONCLUSION>\n<EVALUATE>\nTEXT: If a person pays their taxes, then they contribute to the country.\nFOL: all x. (Taxpayer(x) -> ContributeTo(x, Country))\nTEXT: Everyone who works for a government department pays a tax on their salary.\nFOL: all x. (WorkFor(x, GovernmentAgency) -> Taxpayer(x))\nTEXT: Everyone in the army is an employee of a government department.\nFOL: all x. (ServesIn(x, TheArmy) -> WorkFor(x, GovernmentAgency))\nTEXT: Everyone convicted of murder goes to prison.\nFOL: all x. (SentencedForMurder(x) -> Imprisoned(x))\nTEXT: Everyone who has been to prison has a criminal record.\nFOL: all x. (Imprisoned((x) -> Has(x, CriminalRecord))\nTEXT: James was either once convicted of murder, or spent time in prison.\nFOL: ((SentencedForMurder(James) & -Imprisoned(James)) | (-SentencedForMurder(James) & Imprisoned(James)))\nTEXT: James either has a criminal record, or pays his taxes.\nFOL: ((Has(James, CriminalRecord) & -Taxpayer(James)) | (-Has(James, CriminalRecord) & Taxpayer(James)))\nTEXT: James does not contribute to the country.\nFOL: ContributeToCountry(James)\n\nANSWER: Uncertain\n</EVALUATE>\n\n<PREMISES>\nNo songs are visuals.\nAll folk songs are songs.\nAll videos are visuals.\nAll movies are videos.\nAll sci-fi movies are movies.\nInception is a sci-fi movie.\nMac is neither a folk song nor a sci-fi movie.\n</PREMISES>\n<CONCLUSION>\nInception is a folk song.\n</CONCLUSION>\n<EVALUATE>\nTEXT: No songs are visuals.\nFOL: all x. (Song(x) -> -Visual(x))\nTEXT: All folk songs are songs.\nFOL: all x. (FolkSong(x) -> Song(x))\nTEXT: All videos are visuals.\nFOL: all x. (Video(x) -> Visual(x))\nTEXT: All movies are videos.\nFOL: all x. (Movie(x) -> Video(x))\nTEXT: All sci-fi movies are movies.\nFOL: all x. (ScifiMovie(x) -> Movie(x))\nTEXT: Inception is a sci-fi movie.\nFOL: ScifiMovie(Inception)\nTEXT: Mac is neither a folk song nor a sci-fi movie.\nFOL: -FolkSong(Mac) & -ScifiMovie(Mac)\nTEXT: Inception is a folk song.\nFOL: FolkSong(Inception)\n\nANSWER: False\n</EVALUATE>\n\n<PREMISES>\nEvery chef can cook.\nSome people who aren’t chefs can cook.\nPeople who cook can make scrambled eggs and pasta.\nIf someone can make cookies and muffins, they are a baker.\nBakers who can also make scrambled eggs can make a good breakfast.\nLuke can make cookies, scrambled eggs, and muffins, but not pasta.\n</PREMISES>\n<CONCLUSION>\nLuke is a chef.\n</CONCLUSION>\n<EVALUATE>\nTEXT: Every chef can cook.\nFOL: all x. (Chef(x) -> Can(x, Cook))\nTEXT: Some people who aren’t chefs can cook.\nFOL: exists x. (-Chef(x) & Can(x, Cook))\nTEXT: People who cook can make scrambled eggs and pasta.\nFOL: all x. (Can(x, Cook) -> (CanMake(x, ScrambledEggs) & CanMake(x, Pasta)))\nTEXT: If someone can make cookies and muffins, they are a baker.\nFOL: all x. (CanMake(x, Cookies) & CanMake(x, Muffins) -> Baker(x))\nTEXT: Bakers who can also make scrambled eggs can make a good breakfast.\nFOL: all x. ((Baker(x) & CanMake(x, ScrambledEggs)) -> CanMake(x, GoodBreakfast))\nTEXT: Luke can make cookies, scrambled eggs, and muffins, but not pasta.\nFOL: CanMake(Luke, Cookies) & (CanMake(Luke, ScrambledEggs) & CanMake(Luke, Muffins) & -CanMake(Luke, Pasta)\nTEXT: Luke is a chef.\nFOL: MakeGoodBreakfast(Luke)\n\nANSWER: False\n</EVALUATE>\n\n<PREMISES>\nETS develops various standardized tests primarily in the United States for K-12 and higher education.\nETS administers international tests, including the TOEFL, TOEIC, GRE, and subject tests.\nMany of the assessments ETS develops are associated with entry to the US tertiary and quaternary education institutions.\nETS also develops K-12 statewide assessments used for accountability testing in many states.\n</PREMISES>\n<CONCLUSION>\nETS doesn't administer tests internationally.\n</CONCLUSION>\n<EVALUATE>\nTEXT: ETS develops various standardized tests primarily in the United States for K-12 and higher education.\nFOL: exists x. exists y. (Develop(eTS, x) & Develop(eTS, y) & StandardizedTest(x) & StandardizedTest(y) & In(x, UnitedState) & In(y, UnitedState) & For(x, kOneTwoAndHigherEducation) & For(y, kOneTwoAndHigherEducation))\nTEXT: ETS administers international tests, including the TOEFL, TOEIC, GRE, and subject tests.\nFOL: exists x. (Administer(eTS, x) & InternationalTest(x) & (TOEFL(x) | TOEIC(x) | GRE(x) | SubjectTest(x)))\nTEXT: Many of the assessments ETS develops are associated with entry to the US tertiary and quaternary education institutions.\nFOL: exists x. (Develop(eTS, x) & AssociatedWith(x, EntryToUSEducationInstitution))\nTEXT: ETS also develops K-12 statewide assessments used for accountability testing in many states.\nFOL: exists x. (Develop(eTS, x) & StateWideAssesment(x) & UsedFor(x, AccountabilityTesting))\nTEXT: ETS doesn't administer tests internationally.\nFOL: exists x. (Develops(Ets, x) & For(x, k-OneTwoandhighereducation)) & exists x. (Develops(Ets, x) & AssociatedWith(x, Entrytouseducationinstitutions))\n\nANSWER: False\n</EVALUATE>\n\n<PREMISES>\nDaveed Diggs is an actor and film producer.\nDaveed Diggs played two roles in the musical Hamilton on Broadway.\nOne of the actors from Hamilton won the best actor award.\nThe actor playing Thomas Jefferson won the best actor award.\nDaveed Diggs played Thomas Jefferson.\nMusicals on Broadway are not films.\n</PREMISES>\n<CONCLUSION>\nDaveed Diggs won the best actor award.\n</CONCLUSION>\n<EVALUATE>\nTEXT: Daveed Diggs is an actor and film producer.\nFOL: Actor(DaveedDiggs) & FilmProducer(DaveedDiggs)\nTEXT: Daveed Diggs played two roles in the musical Hamilton on Broadway.\nFOL: exists x. exists y.(PlaysIn(DaveedDiggs, x, Hamilton) & (-(x=y)) & PlaysIn(DaveedDiggs, y, Hamilton)) & OnBroadway(Hamilton) & Musical(Hamilton)\nTEXT: One of the actors from Hamilton won the best actor award.\nFOL: exists x. exists y.(Actor(x) & PlaysIn(x, y, Hamilton) & Wins(x, BestActorAward))\nTEXT: The actor playing Thomas Jefferson won the best actor award.\nFOL: exists x. (Actor(x) & PlaysIn(x, ThomasJefferson, Hamilton) & Wins(x, BestActorAward))\nTEXT: Daveed Diggs played Thomas Jefferson.\nFOL: Plays(DaveedDiggs, ThomasJefferson)\nTEXT: Musicals on Broadway are not films.\nFOL: all x. ((Musical(x) & OnBroadway(x)) -> -Film(x))\nTEXT: Daveed Diggs won the best actor award.\nFOL: exists x. (BRICS(x) & Speaks(x, Hindi))\n\nANSWER: True\n</EVALUATE>\n\n<PREMISES>\nWhen the Monkeypox virus occurs in a being, it may get AIDS.\nMonkeypox virus can occur in certain plants.\nHumans are plants.\nPlants are unicorns.\nSymptoms of AIDS include fever, headache, muscle pains, and energizedness.\nPeople feel energized when they get the flu.\n</PREMISES>\n<CONCLUSION>\nThere is a unicorn.\n</CONCLUSION>\n<EVALUATE>", "raw_generations": ["Generation 1:\nTEXT: When the Monkeypox virus occurs in a being, it may get AIDS.\nFOL: forall x. (MonkeypoxVirus(x) & OccursIn(x, Being) -> may(MonkeypoxVirus(x), GetAIDS))\nTEXT: Monkeypox virus can occur in certain plants.\nFOL: exists y. (Plant(y) & MonkeypoxVirus(y))\nTEXT: Humans are plants.\nFOL: Human(x) -> Plant(x)\nTEXT: Plants are unicorns.\nFOL: Plant(x) -> Unicorn(x)\nTEXT: Symptoms of AIDS include fever, headache, muscle pains, and energizedness.\nFOL: symptoms(AIDS, Fever) & symptoms(AIDS, Headache) & symptoms(AIDS, MusclePains) & symptoms(AIDS, Energizedness)\nTEXT: People feel energized when they get the flu.\nFOL: forall x. (getFlu(x) -> feels(x, Energized))\nTEXT: There is a unicorn.\nFOL: exists x. Unicorn(x)\n\nANSWER: Uncertain (The premises contain logical contradictions)\nProcessed: Uncertain", "Generation 2:\nTEXT: When the Monkeypox virus occurs in a being, it may get AIDS.\nFOL: all x. (MonkeypoxVirus(x) & OccursIn(x, Being) -> MayGet(x, AIDS))\nTEXT: Monkeypox virus can occur in certain plants.\nFOL: exists x. (MonkeypoxVirus(x) & OccursIn(x, Plant))\nTEXT: Humans are plants.\nFOL: Human(x) -> Plant(x)\nTEXT: Plants are unicorns.\nFOL: Plant(x) -> Unicorn(x)\nTEXT: Symptoms of AIDS include fever, headache, muscle pains, and energizedness.\nFOL: all x. (AIDS(x) -> (Fever(x) & Headache(x) & MusclePain(x) & Energizedness(x)))\nTEXT: People feel energized when they get the flu.\nFOL: exists x. (Flu(x) & Feels(x, Energized))\nTEXT: There is a unicorn.\nFOL: exists x. Unicorn(x)\n\nANSWER: False (Assuming that humans are not considered unicorns in this context)\nProcessed: False", "Generation 3:\nTEXT: When the Monkeypox virus occurs in a being, it may get AIDS.\nFOL: forall x. (MonkeypoxVirusIn(x) -> MayGetAIDS(x))\nTEXT: Monkeypox virus can occur in certain plants.\nFOL: exists x. (MonkeypoxVirusIn(x) & Plant(x))\nTEXT: Humans are plants.\nFOL: Human(x) -> Plant(x)\nTEXT: Plants are unicorns.\nFOL: Plant(x) -> Unicorn(x)\nTEXT: Symptoms of AIDS include fever, headache, muscle pains, and energizedness.\nFOL: SymptomsOf(AIDS, Fever) & SymptomsOf(AIDS, Headache) & SymptomsOf(AIDS, MusclePains) & SymptomsOf(AIDS, Energizedness)\nTEXT: People feel energized when they get the flu.\nFOL: getsFlu(x) -> Energized(x)\nTEXT: There is a unicorn.\nFOL: exists x. Unicorn(x)\n\nANSWER: Uncertain (The premises contain false statements, such as \"Humans are plants,\" which invalidates the conclusion.)\nProcessed: Uncertain", "Generation 4:\nTEXT: When the Monkeypox virus occurs in a being, it may get AIDS.\nFOL: all x. (MonkeypoxVirus(x) & OccursIn(x, Being) -> MaybeGet(x, AIDS))\nTEXT: Monkeypox virus can occur in certain plants.\nFOL: exists x. (Plant(x) & OccursIn(MonkeypoxVirus, x))\nTEXT: Humans are plants.\nFOL: Plant(Human)\nTEXT: Plants are unicorns.\nFOL: all x. (Plant(x) -> Unicorn(x))\nTEXT: Symptoms of AIDS include fever, headache, muscle pains, and energizedness.\nFOL: all x. (AIDS(x) -> (Fever(x) & Headache(x) & MusclePain(x) & Energized(x)))\nTEXT: People feel energized when they get the flu.\nFOL: all y. (Flu(y) -> Energized(y))\nTEXT: There is a unicorn.\nFOL: exists x. Unicorn(x)\n\nANSWER: False (Given the premises, there are no unicorns.)\nProcessed: False", "Generation 5:\nTEXT: When the Monkeypox virus occurs in a being, it may get AIDS.\nFOL: all x. (MonkeypoxVirus(x) & OccursIn(x, Being) -> MayGet(x, AIDS))\nTEXT: Monkeypox virus can occur in certain plants.\nFOL: exists x. (MonkeypoxVirus(x) & OccursIn(x, Plant))\nTEXT: Humans are plants.\nFOL: Human(x) -> Plant(x)\nTEXT: Plants are unicorns.\nFOL: Plant(x) -> Unicorn(x)\nTEXT: Symptoms of AIDS include fever, headache, muscle pains, and energizedness.\nFOL: SymptomOf(AIDS, Fever) & SymptomOf(AIDS, Headache) & SymptomOf(AIDS, MusclePains) & SymptomOf(AIDS, Energizedness)\nTEXT: People feel energized when they get the flu.\nFOL: Flu(x) -> Feels(x, Energized)\nTEXT: There is a unicorn.\nFOL: exists x. Unicorn(x)\n\nANSWER: False (given the premises)\nProcessed: False", "Generation 6:\nTEXT: When the Monkeypox virus occurs in a being, it may get AIDS.\nFOL: all x. (MonkeypoxVirus(x) -> mayGet(x, AIDS))\nTEXT: Monkeypox virus can occur in certain plants.\nFOL: exists x. (MonkeypoxVirus(x) & OccurIn(x, Plant))\nTEXT: Humans are plants.\nFOL: Human(x) -> Plant(x)\nTEXT: Plants are unicorns.\nFOL: Plant(x) -> Unicorn(x)\nTEXT: Symptoms of AIDS include fever, headache, muscle pains, and energizedness.\nFOL: all x. (AIDS(x) -> (Fever(x) & Headache(x) & MusclePains(x) & Energizedness(x)))\nTEXT: People feel energized when they get the flu.\nFOL: all x. (GetFlu(x) -> Energizedness(x))\nTEXT: There is a unicorn.\nFOL: exists x. Unicorn(x)\n\nANSWER: False (Assuming \"Humans are not plants.\")\nProcessed: False", "Generation 7:\nTEXT: When the Monkeypox virus occurs in a being, it may get AIDS.\nFOL: all x. (MonkeypoxVirus(x) & OccursIn(x, Being) -> MayGet(x, AIDS))\nTEXT: Monkeypox virus can occur in certain plants.\nFOL: exists x. (Plant(x) & OccursIn(MonkeypoxVirus, x))\nTEXT: Humans are plants.\nFOL: Plant(Human)\nTEXT: Plants are unicorns.\nFOL: all x. (Plant(x) -> Unicorn(x))\nTEXT: Symptoms of AIDS include fever, headache, muscle pains, and energizedness.\nFOL: all x. (AIDS(x) -> (Has(x, Fever) & Has(x, Headache) & Has(x, MusclePains) & Has(x, Energizedness)))\nTEXT: People feel energized when they get the flu.\nFOL: all x. (Flu(x) -> Feels(x, Energized))\nTEXT: There is a unicorn.\nFOL: exists x. Unicorn(x)\n\nANSWER: Uncertain (The premises do not provide enough information to definitively say whether there is a unicorn or not.)\nProcessed: Uncertain", "Generation 8:\nTEXT: When the Monkeypox virus occurs in a being, it may get AIDS.\nFOL: all x. (MonkeypoxVirus(x) -> Maybe(AIDS(x)))\nTEXT: Monkeypox virus can occur in certain plants.\nFOL: exists x. (Plant(x) & MonkeypoxVirus(x))\nTEXT: Humans are plants.\nFOL: Human(x) -> Plant(x)\nTEXT: Plants are unicorns.\nFOL: all x. (Plant(x) -> Unicorn(x))\nTEXT: Symptoms of AIDS include fever, headache, muscle pains, and energizedness.\nFOL: all x. (AIDS(x) -> (Fever(x) & Headache(x) & MusclePain(x) & Energized(x)))\nTEXT: People feel energized when they get the flu.\nFOL: Flu(x) -> Energized(x)\nTEXT: There is a unicorn.\nFOL: exists x. Unicorn(x)\n\nANSWER: False (There is no evidence that humans or plants can be unicorns)\nProcessed: False", "Generation 9:\nTEXT: When the Monkeypox virus occurs in a being, it may get AIDS.\nFOL: all x. (MonkeypoxVirusIn(x) -> MayGet(x, AIDS))\nTEXT: Monkeypox virus can occur in certain plants.\nFOL: exists x. Plants(x) & MonkeypoxVirusIn(x)\nTEXT: Humans are plants.\nFOL: Plants(Human)\nTEXT: Plants are unicorns.\nFOL: all x. (Plants(x) -> Unicorn(x))\nTEXT: Symptoms of AIDS include fever, headache, muscle pains, and energizedness.\nFOL: exists y. (AIDS(y) -> (Fever(y) & Headache(y) & MusclePains(y) & Energizedness(y)))\nTEXT: People feel energized when they get the flu.\nFOL: Energizedness(Flu)\nTEXT: There is a unicorn.\nFOL: exists x. Unicorn(x)\n\nANSWER: False (There is no premise suggesting that a unicorn exists)\nProcessed: False", "Generation 10:\nTEXT: When the Monkeypox virus occurs in a being, it may get AIDS.\nFOL: all x. (MonkeypoxVirus(x) & In(x, Being) -> MayGet(x, AIDS))\nTEXT: Monkeypox virus can occur in certain plants.\nFOL: some x. (Plant(x) & MonkeypoxVirus(x))\nTEXT: Humans are plants.\nFOL: Plant(Human)\nTEXT: Plants are unicorns.\nFOL: all x. (Plant(x) -> Unicorn(x))\nTEXT: Symptoms of AIDS include fever, headache, muscle pains, and energizedness.\nFOL: all y. (AIDS(y) -> (Fever(y) & Headache(y) & MusclePains(y) & Energized(y)))\nTEXT: People feel energized when they get the flu.\nFOL: some z. (Flu(z) & Energized(z))\nTEXT: There is a unicorn.\nFOL: exists w. (Unicorn(w))\n\nANSWER: False (There is no unicorn according to the given premises)\nProcessed: False\n\nReference: True\n========================================"], "answers": ["Uncertain", "False", "Uncertain", "False", "False", "False", "Uncertain", "False", "False", "False"]}
{"idx": 60, "prompt": "The following is a first-order logic (FOL) problem.\nThe problem is to determine whether the conclusion follows from the premises.\nThe premises are given in the form of a set of first-order logic sentences.\nThe conclusion is given in the form of a single first-order logic sentence.\nThe task is to translate each of the premises and conclusions into FOL expressions.and then to evaluate the conclusion as ANSWER: True, ANSWER: False, or ANSWER: Uncertain given the premises. The output should follow format TEXT: \nFOL: \nTEXT: \nFOL:... ANSWER: \n\n\n<PREMISES>\nAll biodegradable things are environment-friendly.\nAll woodware is biodegradable.\nAll paper is woodware.\nNothing is a good thing and also a bad thing.\nAll environment-friendly things are good.\nA worksheet is either paper or environment-friendly.\n</PREMISES>\n<CONCLUSION>\nA worksheet is not biodegradable.\n</CONCLUSION>\n<EVALUATE>\nTEXT: All biodegradable things are environment-friendly.\nFOL: all x. (Biodegradable(x) -> EnvironmentFriendly(x))\nTEXT: All woodware is biodegradable.\nFOL: all x. (Woodware(x) -> Biodegradable(x))\nTEXT: All paper is woodware.\nFOL: all x. (Paper(x) -> Woodware(x))\nTEXT: Nothing is a good thing and also a bad thing.\nFOL: -(exists x. (Good(x) & Bad(x)))\nTEXT: All environment-friendly things are good.\nFOL: all x. (EnvironmentFriendly(x) -> Good(x))\nTEXT: A worksheet is either paper or environment-friendly.\nFOL: ((Paper(Worksheet) & -EnvironmentFriendly(Worksheet)) | (-Paper(Worksheet) & EnvironmentFriendly(Worksheet)))\nTEXT: A worksheet is not biodegradable.\nFOL: -Dispensable(Worksheet)\n\nANSWER: Uncertain\n</EVALUATE>\n\n<PREMISES>\nA La Liga soccer team ranks higher than another La Liga soccer team if it receives more points.\nIf there are two La Liga soccer teams and neither has more points than the other, then the team which receives more points from the games between the two teams ranks higher.\nReal Madrid and Barcelona are both La Liga soccer teams.\nReal Madrid received more points than Barcelona.\nNeither Real Madrid nor Barcelona received more points from the games between them.\n</PREMISES>\n<CONCLUSION>\nReal Madrid ranks higher than Barcelona.\n</CONCLUSION>\n<EVALUATE>\nTEXT: A La Liga soccer team ranks higher than another La Liga soccer team if it receives more points.\nFOL: all x. all y. (LaLigaSoccerTeam(x) & LaLigaSoccerTeam(y) & MorePoints(x, y) -> RankHigherThan(x, y))\nTEXT: If there are two La Liga soccer teams and neither has more points than the other, then the team which receives more points from the games between the two teams ranks higher.\nFOL: all x. all y. (LaLigaSoccerTeam(x) & LaLigaSoccerTeam(y) & -MorePoints(x, y) & -MorePoints(y, x) & MorePointsInGameBetween(x, y) ->  RankHigherThan(x, y))\nTEXT: Real Madrid and Barcelona are both La Liga soccer teams.\nFOL: LaLigaSoccerTeam(RealMadrid) & LaLigaSoccerTeam(Barcelona)\nTEXT: Real Madrid received more points than Barcelona.\nFOL: MorePoints(RealMadrid, Barcelona)\nTEXT: Neither Real Madrid nor Barcelona received more points from the games between them.\nFOL: -MorePointsInGameBetween(RealMadrid, Barcelona) & -MorePointsInGameBetween(Barcelona, RealMadrid)\nTEXT: Real Madrid ranks higher than Barcelona.\nFOL: HigherRank(RealMadrid, Barcelona)\n\nANSWER: True\n</EVALUATE>\n\n<PREMISES>\nAll professional athletes spend most of their time on sports.\nAll Olympic gold medal winners are professional athletes.\nNo full-time scientists spend the majority of their time on sports.\nAll Nobel physics laureates are full-time scientists.\nAmy spends the most time on sports, or Amy is an Olympic gold medal winner.\nIf Amy is not a Nobel physics laureate, then Amy is not an Olympic gold medal winner.\n</PREMISES>\n<CONCLUSION>\nIf Amy is not an Olympic gold medal winner, then Amy is a Nobel physics laureate.\n</CONCLUSION>\n<EVALUATE>\nTEXT: All professional athletes spend most of their time on sports.\nFOL: all x. (ProfessionalAthlete(x) -> SpendOn(x, MostOfTheirTime, Sports))\nTEXT: All Olympic gold medal winners are professional athletes.\nFOL: all x. (OlympicGoldMedalWinner(x) -> ProfessionalAthlete(x))\nTEXT: No full-time scientists spend the majority of their time on sports.\nFOL: all x. (FullTimeScientist(x) -> -SpendOn(x, MostOfTheirTime, Sports))\nTEXT: All Nobel physics laureates are full-time scientists.\nFOL: all x. (NobelPhysicsLaureate(x) -> FullTimeScientist(x))\nTEXT: Amy spends the most time on sports, or Amy is an Olympic gold medal winner.\nFOL: SpendOn(Amy, MostOfTheirTime, Sports) | OlympicGoldMedalWinner(Amy)\nTEXT: If Amy is not a Nobel physics laureate, then Amy is not an Olympic gold medal winner.\nFOL: -NobelPhysicsLaureate(Amy) -> -OlympicGoldMedalWinner(Amy)\nTEXT: If Amy is not an Olympic gold medal winner, then Amy is a Nobel physics laureate.\nFOL: -OlympicGoldMedalWinner(Amy) -> NobelLaureate(Amy)\n\nANSWER: False\n</EVALUATE>\n\n<PREMISES>\nIf a person pays their taxes, then they contribute to the country.\nEveryone who works for a government department pays a tax on their salary.\nEveryone in the army is an employee of a government department.\nEveryone convicted of murder goes to prison.\nEveryone who has been to prison has a criminal record.\nJames was either once convicted of murder, or spent time in prison.\nJames either has a criminal record, or pays his taxes.\n</PREMISES>\n<CONCLUSION>\nJames does not contribute to the country.\n</CONCLUSION>\n<EVALUATE>\nTEXT: If a person pays their taxes, then they contribute to the country.\nFOL: all x. (Taxpayer(x) -> ContributeTo(x, Country))\nTEXT: Everyone who works for a government department pays a tax on their salary.\nFOL: all x. (WorkFor(x, GovernmentAgency) -> Taxpayer(x))\nTEXT: Everyone in the army is an employee of a government department.\nFOL: all x. (ServesIn(x, TheArmy) -> WorkFor(x, GovernmentAgency))\nTEXT: Everyone convicted of murder goes to prison.\nFOL: all x. (SentencedForMurder(x) -> Imprisoned(x))\nTEXT: Everyone who has been to prison has a criminal record.\nFOL: all x. (Imprisoned((x) -> Has(x, CriminalRecord))\nTEXT: James was either once convicted of murder, or spent time in prison.\nFOL: ((SentencedForMurder(James) & -Imprisoned(James)) | (-SentencedForMurder(James) & Imprisoned(James)))\nTEXT: James either has a criminal record, or pays his taxes.\nFOL: ((Has(James, CriminalRecord) & -Taxpayer(James)) | (-Has(James, CriminalRecord) & Taxpayer(James)))\nTEXT: James does not contribute to the country.\nFOL: ContributeToCountry(James)\n\nANSWER: Uncertain\n</EVALUATE>\n\n<PREMISES>\nNo songs are visuals.\nAll folk songs are songs.\nAll videos are visuals.\nAll movies are videos.\nAll sci-fi movies are movies.\nInception is a sci-fi movie.\nMac is neither a folk song nor a sci-fi movie.\n</PREMISES>\n<CONCLUSION>\nInception is a folk song.\n</CONCLUSION>\n<EVALUATE>\nTEXT: No songs are visuals.\nFOL: all x. (Song(x) -> -Visual(x))\nTEXT: All folk songs are songs.\nFOL: all x. (FolkSong(x) -> Song(x))\nTEXT: All videos are visuals.\nFOL: all x. (Video(x) -> Visual(x))\nTEXT: All movies are videos.\nFOL: all x. (Movie(x) -> Video(x))\nTEXT: All sci-fi movies are movies.\nFOL: all x. (ScifiMovie(x) -> Movie(x))\nTEXT: Inception is a sci-fi movie.\nFOL: ScifiMovie(Inception)\nTEXT: Mac is neither a folk song nor a sci-fi movie.\nFOL: -FolkSong(Mac) & -ScifiMovie(Mac)\nTEXT: Inception is a folk song.\nFOL: FolkSong(Inception)\n\nANSWER: False\n</EVALUATE>\n\n<PREMISES>\nEvery chef can cook.\nSome people who aren’t chefs can cook.\nPeople who cook can make scrambled eggs and pasta.\nIf someone can make cookies and muffins, they are a baker.\nBakers who can also make scrambled eggs can make a good breakfast.\nLuke can make cookies, scrambled eggs, and muffins, but not pasta.\n</PREMISES>\n<CONCLUSION>\nLuke is a chef.\n</CONCLUSION>\n<EVALUATE>\nTEXT: Every chef can cook.\nFOL: all x. (Chef(x) -> Can(x, Cook))\nTEXT: Some people who aren’t chefs can cook.\nFOL: exists x. (-Chef(x) & Can(x, Cook))\nTEXT: People who cook can make scrambled eggs and pasta.\nFOL: all x. (Can(x, Cook) -> (CanMake(x, ScrambledEggs) & CanMake(x, Pasta)))\nTEXT: If someone can make cookies and muffins, they are a baker.\nFOL: all x. (CanMake(x, Cookies) & CanMake(x, Muffins) -> Baker(x))\nTEXT: Bakers who can also make scrambled eggs can make a good breakfast.\nFOL: all x. ((Baker(x) & CanMake(x, ScrambledEggs)) -> CanMake(x, GoodBreakfast))\nTEXT: Luke can make cookies, scrambled eggs, and muffins, but not pasta.\nFOL: CanMake(Luke, Cookies) & (CanMake(Luke, ScrambledEggs) & CanMake(Luke, Muffins) & -CanMake(Luke, Pasta)\nTEXT: Luke is a chef.\nFOL: MakeGoodBreakfast(Luke)\n\nANSWER: False\n</EVALUATE>\n\n<PREMISES>\nETS develops various standardized tests primarily in the United States for K-12 and higher education.\nETS administers international tests, including the TOEFL, TOEIC, GRE, and subject tests.\nMany of the assessments ETS develops are associated with entry to the US tertiary and quaternary education institutions.\nETS also develops K-12 statewide assessments used for accountability testing in many states.\n</PREMISES>\n<CONCLUSION>\nETS doesn't administer tests internationally.\n</CONCLUSION>\n<EVALUATE>\nTEXT: ETS develops various standardized tests primarily in the United States for K-12 and higher education.\nFOL: exists x. exists y. (Develop(eTS, x) & Develop(eTS, y) & StandardizedTest(x) & StandardizedTest(y) & In(x, UnitedState) & In(y, UnitedState) & For(x, kOneTwoAndHigherEducation) & For(y, kOneTwoAndHigherEducation))\nTEXT: ETS administers international tests, including the TOEFL, TOEIC, GRE, and subject tests.\nFOL: exists x. (Administer(eTS, x) & InternationalTest(x) & (TOEFL(x) | TOEIC(x) | GRE(x) | SubjectTest(x)))\nTEXT: Many of the assessments ETS develops are associated with entry to the US tertiary and quaternary education institutions.\nFOL: exists x. (Develop(eTS, x) & AssociatedWith(x, EntryToUSEducationInstitution))\nTEXT: ETS also develops K-12 statewide assessments used for accountability testing in many states.\nFOL: exists x. (Develop(eTS, x) & StateWideAssesment(x) & UsedFor(x, AccountabilityTesting))\nTEXT: ETS doesn't administer tests internationally.\nFOL: exists x. (Develops(Ets, x) & For(x, k-OneTwoandhighereducation)) & exists x. (Develops(Ets, x) & AssociatedWith(x, Entrytouseducationinstitutions))\n\nANSWER: False\n</EVALUATE>\n\n<PREMISES>\nDaveed Diggs is an actor and film producer.\nDaveed Diggs played two roles in the musical Hamilton on Broadway.\nOne of the actors from Hamilton won the best actor award.\nThe actor playing Thomas Jefferson won the best actor award.\nDaveed Diggs played Thomas Jefferson.\nMusicals on Broadway are not films.\n</PREMISES>\n<CONCLUSION>\nDaveed Diggs won the best actor award.\n</CONCLUSION>\n<EVALUATE>\nTEXT: Daveed Diggs is an actor and film producer.\nFOL: Actor(DaveedDiggs) & FilmProducer(DaveedDiggs)\nTEXT: Daveed Diggs played two roles in the musical Hamilton on Broadway.\nFOL: exists x. exists y.(PlaysIn(DaveedDiggs, x, Hamilton) & (-(x=y)) & PlaysIn(DaveedDiggs, y, Hamilton)) & OnBroadway(Hamilton) & Musical(Hamilton)\nTEXT: One of the actors from Hamilton won the best actor award.\nFOL: exists x. exists y.(Actor(x) & PlaysIn(x, y, Hamilton) & Wins(x, BestActorAward))\nTEXT: The actor playing Thomas Jefferson won the best actor award.\nFOL: exists x. (Actor(x) & PlaysIn(x, ThomasJefferson, Hamilton) & Wins(x, BestActorAward))\nTEXT: Daveed Diggs played Thomas Jefferson.\nFOL: Plays(DaveedDiggs, ThomasJefferson)\nTEXT: Musicals on Broadway are not films.\nFOL: all x. ((Musical(x) & OnBroadway(x)) -> -Film(x))\nTEXT: Daveed Diggs won the best actor award.\nFOL: exists x. (BRICS(x) & Speaks(x, Hindi))\n\nANSWER: True\n</EVALUATE>\n\n<PREMISES>\nAll squares are three-sided.\nAll three-sided things are animals.\n</PREMISES>\n<CONCLUSION>\nAll squares are animals.\n</CONCLUSION>\n<EVALUATE>", "raw_generations": ["Generation 1:\nTEXT: All squares are three-sided.\nFOL: all x. (Square(x) -> ThreeSided(x))\nTEXT: All three-sided things are animals.\nFOL: all x. (ThreeSided(x) -> Animal(x))\nTEXT: All squares are animals.\nFOL: all x. (Square(x) -> Animal(x))\n\nANSWER: True\nProcessed: True", "Generation 2:\nTEXT: All squares are three-sided.\nFOL: all x. (Square(x) -> ThreeSided(x))\n\nTEXT: All three-sided things are animals.\nFOL: all x. (ThreeSided(x) -> Animal(x))\n\nTEXT: All squares are animals.\nFOL: all x. (Square(x) -> Animal(x))\n\nANSWER: True\nProcessed: True", "Generation 3:\nTEXT: All squares are three-sided.\nFOL: all x. (Square(x) -> ThreeSided(x))\nTEXT: All three-sided things are animals.\nFOL: all x. (ThreeSided(x) -> Animal(x))\nTEXT: All squares are animals.\nFOL: all x. (Square(x) -> Animal(x))\n\nANSWER: True\nProcessed: True", "Generation 4:\nTEXT: All squares are three-sided.\nFOL: all x. (Square(x) -> ThreeSided(x))\nTEXT: All three-sided things are animals.\nFOL: all x. (ThreeSided(x) -> Animal(x))\nTEXT: All squares are animals.\nFOL: all x. (Square(x) -> Animal(x))\n\nANSWER: True\nProcessed: True", "Generation 5:\nTEXT: All squares are three-sided.\nFOL: all x. (Square(x) -> ThreeSided(x))\nTEXT: All three-sided things are animals.\nFOL: all x. (ThreeSided(x) -> Animal(x))\nTEXT: All squares are animals.\nFOL: all x. (Square(x) -> Animal(x))\n\nANSWER: True (Based on the premises, the conclusion follows logically)\nProcessed: True", "Generation 6:\nFOL:\nall x. (Square(x) -> ThreeSided(x))\nall y. (ThreeSided(y) -> Animal(y))\n\nTEXT: All squares are animals.\nFOL: all x. (Square(x) -> Animal(x))\n\nANSWER: False (given the premises)\nProcessed: False", "Generation 7:\nTEXT: All squares are three-sided.\nFOL: all x. (Square(x) -> ThreeSided(x))\nTEXT: All three-sided things are animals.\nFOL: all x. (ThreeSided(x) -> Animal(x))\nTEXT: All squares are animals.\nFOL: all x. (Square(x) -> Animal(x))\n\nANSWER: True\nProcessed: True", "Generation 8:\nTEXT: All squares are three-sided.\nFOL: all x. (Square(x) -> ThreeSided(x))\nTEXT: All three-sided things are animals.\nFOL: all x. (ThreeSided(x) -> Animal(x))\nTEXT: All squares are animals.\nFOL: all x. (Square(x) -> Animal(x))\n\nANSWER: True (The conclusion follows from the premises)\nProcessed: True", "Generation 9:\nFOL:\nall x. (Square(x) -> ThreeSided(x))\nall x. (ThreeSided(x) -> Animal(x))\n\nTEXT: All squares are animals.\nFOL: all x. (Square(x) -> Animal(x))\n\nANSWER: False (The premises do not imply the conclusion as squares are not animals in this context)\nProcessed: False", "Generation 10:\nTEXT: All squares are three-sided.\nFOL: all x. (Square(x) -> ThreeSided(x))\nTEXT: All three-sided things are animals.\nFOL: all x. (ThreeSided(x) -> Animal(x))\nTEXT: All squares are animals.\nFOL: all x. (Square(x) -> Animal(x))\n\nANSWER: True (This follows from the premises, since if all squares are three-sided and all three-sided things are animals, then all squares are animals)\nProcessed: True\n\nReference: True\n========================================"], "answers": ["True", "True", "True", "True", "True", "False", "True", "True", "False", "True"]}
{"idx": 61, "prompt": "The following is a first-order logic (FOL) problem.\nThe problem is to determine whether the conclusion follows from the premises.\nThe premises are given in the form of a set of first-order logic sentences.\nThe conclusion is given in the form of a single first-order logic sentence.\nThe task is to translate each of the premises and conclusions into FOL expressions.and then to evaluate the conclusion as ANSWER: True, ANSWER: False, or ANSWER: Uncertain given the premises. The output should follow format TEXT: \nFOL: \nTEXT: \nFOL:... ANSWER: \n\n\n<PREMISES>\nAll biodegradable things are environment-friendly.\nAll woodware is biodegradable.\nAll paper is woodware.\nNothing is a good thing and also a bad thing.\nAll environment-friendly things are good.\nA worksheet is either paper or environment-friendly.\n</PREMISES>\n<CONCLUSION>\nA worksheet is not biodegradable.\n</CONCLUSION>\n<EVALUATE>\nTEXT: All biodegradable things are environment-friendly.\nFOL: all x. (Biodegradable(x) -> EnvironmentFriendly(x))\nTEXT: All woodware is biodegradable.\nFOL: all x. (Woodware(x) -> Biodegradable(x))\nTEXT: All paper is woodware.\nFOL: all x. (Paper(x) -> Woodware(x))\nTEXT: Nothing is a good thing and also a bad thing.\nFOL: -(exists x. (Good(x) & Bad(x)))\nTEXT: All environment-friendly things are good.\nFOL: all x. (EnvironmentFriendly(x) -> Good(x))\nTEXT: A worksheet is either paper or environment-friendly.\nFOL: ((Paper(Worksheet) & -EnvironmentFriendly(Worksheet)) | (-Paper(Worksheet) & EnvironmentFriendly(Worksheet)))\nTEXT: A worksheet is not biodegradable.\nFOL: -Dispensable(Worksheet)\n\nANSWER: Uncertain\n</EVALUATE>\n\n<PREMISES>\nA La Liga soccer team ranks higher than another La Liga soccer team if it receives more points.\nIf there are two La Liga soccer teams and neither has more points than the other, then the team which receives more points from the games between the two teams ranks higher.\nReal Madrid and Barcelona are both La Liga soccer teams.\nReal Madrid received more points than Barcelona.\nNeither Real Madrid nor Barcelona received more points from the games between them.\n</PREMISES>\n<CONCLUSION>\nReal Madrid ranks higher than Barcelona.\n</CONCLUSION>\n<EVALUATE>\nTEXT: A La Liga soccer team ranks higher than another La Liga soccer team if it receives more points.\nFOL: all x. all y. (LaLigaSoccerTeam(x) & LaLigaSoccerTeam(y) & MorePoints(x, y) -> RankHigherThan(x, y))\nTEXT: If there are two La Liga soccer teams and neither has more points than the other, then the team which receives more points from the games between the two teams ranks higher.\nFOL: all x. all y. (LaLigaSoccerTeam(x) & LaLigaSoccerTeam(y) & -MorePoints(x, y) & -MorePoints(y, x) & MorePointsInGameBetween(x, y) ->  RankHigherThan(x, y))\nTEXT: Real Madrid and Barcelona are both La Liga soccer teams.\nFOL: LaLigaSoccerTeam(RealMadrid) & LaLigaSoccerTeam(Barcelona)\nTEXT: Real Madrid received more points than Barcelona.\nFOL: MorePoints(RealMadrid, Barcelona)\nTEXT: Neither Real Madrid nor Barcelona received more points from the games between them.\nFOL: -MorePointsInGameBetween(RealMadrid, Barcelona) & -MorePointsInGameBetween(Barcelona, RealMadrid)\nTEXT: Real Madrid ranks higher than Barcelona.\nFOL: HigherRank(RealMadrid, Barcelona)\n\nANSWER: True\n</EVALUATE>\n\n<PREMISES>\nAll professional athletes spend most of their time on sports.\nAll Olympic gold medal winners are professional athletes.\nNo full-time scientists spend the majority of their time on sports.\nAll Nobel physics laureates are full-time scientists.\nAmy spends the most time on sports, or Amy is an Olympic gold medal winner.\nIf Amy is not a Nobel physics laureate, then Amy is not an Olympic gold medal winner.\n</PREMISES>\n<CONCLUSION>\nIf Amy is not an Olympic gold medal winner, then Amy is a Nobel physics laureate.\n</CONCLUSION>\n<EVALUATE>\nTEXT: All professional athletes spend most of their time on sports.\nFOL: all x. (ProfessionalAthlete(x) -> SpendOn(x, MostOfTheirTime, Sports))\nTEXT: All Olympic gold medal winners are professional athletes.\nFOL: all x. (OlympicGoldMedalWinner(x) -> ProfessionalAthlete(x))\nTEXT: No full-time scientists spend the majority of their time on sports.\nFOL: all x. (FullTimeScientist(x) -> -SpendOn(x, MostOfTheirTime, Sports))\nTEXT: All Nobel physics laureates are full-time scientists.\nFOL: all x. (NobelPhysicsLaureate(x) -> FullTimeScientist(x))\nTEXT: Amy spends the most time on sports, or Amy is an Olympic gold medal winner.\nFOL: SpendOn(Amy, MostOfTheirTime, Sports) | OlympicGoldMedalWinner(Amy)\nTEXT: If Amy is not a Nobel physics laureate, then Amy is not an Olympic gold medal winner.\nFOL: -NobelPhysicsLaureate(Amy) -> -OlympicGoldMedalWinner(Amy)\nTEXT: If Amy is not an Olympic gold medal winner, then Amy is a Nobel physics laureate.\nFOL: -OlympicGoldMedalWinner(Amy) -> NobelLaureate(Amy)\n\nANSWER: False\n</EVALUATE>\n\n<PREMISES>\nIf a person pays their taxes, then they contribute to the country.\nEveryone who works for a government department pays a tax on their salary.\nEveryone in the army is an employee of a government department.\nEveryone convicted of murder goes to prison.\nEveryone who has been to prison has a criminal record.\nJames was either once convicted of murder, or spent time in prison.\nJames either has a criminal record, or pays his taxes.\n</PREMISES>\n<CONCLUSION>\nJames does not contribute to the country.\n</CONCLUSION>\n<EVALUATE>\nTEXT: If a person pays their taxes, then they contribute to the country.\nFOL: all x. (Taxpayer(x) -> ContributeTo(x, Country))\nTEXT: Everyone who works for a government department pays a tax on their salary.\nFOL: all x. (WorkFor(x, GovernmentAgency) -> Taxpayer(x))\nTEXT: Everyone in the army is an employee of a government department.\nFOL: all x. (ServesIn(x, TheArmy) -> WorkFor(x, GovernmentAgency))\nTEXT: Everyone convicted of murder goes to prison.\nFOL: all x. (SentencedForMurder(x) -> Imprisoned(x))\nTEXT: Everyone who has been to prison has a criminal record.\nFOL: all x. (Imprisoned((x) -> Has(x, CriminalRecord))\nTEXT: James was either once convicted of murder, or spent time in prison.\nFOL: ((SentencedForMurder(James) & -Imprisoned(James)) | (-SentencedForMurder(James) & Imprisoned(James)))\nTEXT: James either has a criminal record, or pays his taxes.\nFOL: ((Has(James, CriminalRecord) & -Taxpayer(James)) | (-Has(James, CriminalRecord) & Taxpayer(James)))\nTEXT: James does not contribute to the country.\nFOL: ContributeToCountry(James)\n\nANSWER: Uncertain\n</EVALUATE>\n\n<PREMISES>\nNo songs are visuals.\nAll folk songs are songs.\nAll videos are visuals.\nAll movies are videos.\nAll sci-fi movies are movies.\nInception is a sci-fi movie.\nMac is neither a folk song nor a sci-fi movie.\n</PREMISES>\n<CONCLUSION>\nInception is a folk song.\n</CONCLUSION>\n<EVALUATE>\nTEXT: No songs are visuals.\nFOL: all x. (Song(x) -> -Visual(x))\nTEXT: All folk songs are songs.\nFOL: all x. (FolkSong(x) -> Song(x))\nTEXT: All videos are visuals.\nFOL: all x. (Video(x) -> Visual(x))\nTEXT: All movies are videos.\nFOL: all x. (Movie(x) -> Video(x))\nTEXT: All sci-fi movies are movies.\nFOL: all x. (ScifiMovie(x) -> Movie(x))\nTEXT: Inception is a sci-fi movie.\nFOL: ScifiMovie(Inception)\nTEXT: Mac is neither a folk song nor a sci-fi movie.\nFOL: -FolkSong(Mac) & -ScifiMovie(Mac)\nTEXT: Inception is a folk song.\nFOL: FolkSong(Inception)\n\nANSWER: False\n</EVALUATE>\n\n<PREMISES>\nEvery chef can cook.\nSome people who aren’t chefs can cook.\nPeople who cook can make scrambled eggs and pasta.\nIf someone can make cookies and muffins, they are a baker.\nBakers who can also make scrambled eggs can make a good breakfast.\nLuke can make cookies, scrambled eggs, and muffins, but not pasta.\n</PREMISES>\n<CONCLUSION>\nLuke is a chef.\n</CONCLUSION>\n<EVALUATE>\nTEXT: Every chef can cook.\nFOL: all x. (Chef(x) -> Can(x, Cook))\nTEXT: Some people who aren’t chefs can cook.\nFOL: exists x. (-Chef(x) & Can(x, Cook))\nTEXT: People who cook can make scrambled eggs and pasta.\nFOL: all x. (Can(x, Cook) -> (CanMake(x, ScrambledEggs) & CanMake(x, Pasta)))\nTEXT: If someone can make cookies and muffins, they are a baker.\nFOL: all x. (CanMake(x, Cookies) & CanMake(x, Muffins) -> Baker(x))\nTEXT: Bakers who can also make scrambled eggs can make a good breakfast.\nFOL: all x. ((Baker(x) & CanMake(x, ScrambledEggs)) -> CanMake(x, GoodBreakfast))\nTEXT: Luke can make cookies, scrambled eggs, and muffins, but not pasta.\nFOL: CanMake(Luke, Cookies) & (CanMake(Luke, ScrambledEggs) & CanMake(Luke, Muffins) & -CanMake(Luke, Pasta)\nTEXT: Luke is a chef.\nFOL: MakeGoodBreakfast(Luke)\n\nANSWER: False\n</EVALUATE>\n\n<PREMISES>\nETS develops various standardized tests primarily in the United States for K-12 and higher education.\nETS administers international tests, including the TOEFL, TOEIC, GRE, and subject tests.\nMany of the assessments ETS develops are associated with entry to the US tertiary and quaternary education institutions.\nETS also develops K-12 statewide assessments used for accountability testing in many states.\n</PREMISES>\n<CONCLUSION>\nETS doesn't administer tests internationally.\n</CONCLUSION>\n<EVALUATE>\nTEXT: ETS develops various standardized tests primarily in the United States for K-12 and higher education.\nFOL: exists x. exists y. (Develop(eTS, x) & Develop(eTS, y) & StandardizedTest(x) & StandardizedTest(y) & In(x, UnitedState) & In(y, UnitedState) & For(x, kOneTwoAndHigherEducation) & For(y, kOneTwoAndHigherEducation))\nTEXT: ETS administers international tests, including the TOEFL, TOEIC, GRE, and subject tests.\nFOL: exists x. (Administer(eTS, x) & InternationalTest(x) & (TOEFL(x) | TOEIC(x) | GRE(x) | SubjectTest(x)))\nTEXT: Many of the assessments ETS develops are associated with entry to the US tertiary and quaternary education institutions.\nFOL: exists x. (Develop(eTS, x) & AssociatedWith(x, EntryToUSEducationInstitution))\nTEXT: ETS also develops K-12 statewide assessments used for accountability testing in many states.\nFOL: exists x. (Develop(eTS, x) & StateWideAssesment(x) & UsedFor(x, AccountabilityTesting))\nTEXT: ETS doesn't administer tests internationally.\nFOL: exists x. (Develops(Ets, x) & For(x, k-OneTwoandhighereducation)) & exists x. (Develops(Ets, x) & AssociatedWith(x, Entrytouseducationinstitutions))\n\nANSWER: False\n</EVALUATE>\n\n<PREMISES>\nDaveed Diggs is an actor and film producer.\nDaveed Diggs played two roles in the musical Hamilton on Broadway.\nOne of the actors from Hamilton won the best actor award.\nThe actor playing Thomas Jefferson won the best actor award.\nDaveed Diggs played Thomas Jefferson.\nMusicals on Broadway are not films.\n</PREMISES>\n<CONCLUSION>\nDaveed Diggs won the best actor award.\n</CONCLUSION>\n<EVALUATE>\nTEXT: Daveed Diggs is an actor and film producer.\nFOL: Actor(DaveedDiggs) & FilmProducer(DaveedDiggs)\nTEXT: Daveed Diggs played two roles in the musical Hamilton on Broadway.\nFOL: exists x. exists y.(PlaysIn(DaveedDiggs, x, Hamilton) & (-(x=y)) & PlaysIn(DaveedDiggs, y, Hamilton)) & OnBroadway(Hamilton) & Musical(Hamilton)\nTEXT: One of the actors from Hamilton won the best actor award.\nFOL: exists x. exists y.(Actor(x) & PlaysIn(x, y, Hamilton) & Wins(x, BestActorAward))\nTEXT: The actor playing Thomas Jefferson won the best actor award.\nFOL: exists x. (Actor(x) & PlaysIn(x, ThomasJefferson, Hamilton) & Wins(x, BestActorAward))\nTEXT: Daveed Diggs played Thomas Jefferson.\nFOL: Plays(DaveedDiggs, ThomasJefferson)\nTEXT: Musicals on Broadway are not films.\nFOL: all x. ((Musical(x) & OnBroadway(x)) -> -Film(x))\nTEXT: Daveed Diggs won the best actor award.\nFOL: exists x. (BRICS(x) & Speaks(x, Hindi))\n\nANSWER: True\n</EVALUATE>\n\n<PREMISES>\nA natural language processing task can be categorized as either an object identification task or a semantic segmentation task.\nIf the output of a natural language processing task is a text sequence, then it is an object identification task.\nMachine translation is a natural language processing task.\nThe output of machine translation is a text sequence.\n</PREMISES>\n<CONCLUSION>\nMachine translation is an object identification task.\n</CONCLUSION>\n<EVALUATE>", "raw_generations": ["Generation 1:\nTEXT: A natural language processing task can be categorized as either an object identification task or a semantic segmentation task.\nFOL: all x. (NaturalLanguageProcessingTask(x) -> (ObjectIdentificationTask(x) v SemanticSegmentationTask(x)))\n\nTEXT: If the output of a natural language processing task is a text sequence, then it is an object identification task.\nFOL: all x. (TextSequence(Output(x)) & NaturalLanguageProcessingTask(x) -> ObjectIdentificationTask(x))\n\nTEXT: Machine translation is a natural language processing task.\nFOL: MachineTranslation(x) -> NaturalLanguageProcessingTask(x)\n\nTEXT: The output of machine translation is a text sequence.\nFOL: TextSequence(Output(MachineTranslation))\n\nTEXT: Machine translation is an object identification task.\nFOL: ObjectIdentificationTask(MachineTranslation)\n\nANSWER: True\nProcessed: True", "Generation 2:\nTEXT: A natural language processing task can be categorized as either an object identification task or a semantic segmentation task.\nFOL: all x. (NaturalLanguageProcessingTask(x) -> (ObjectIdentificationTask(x) v SemanticSegmentationTask(x)))\n\nTEXT: If the output of a natural language processing task is a text sequence, then it is an object identification task.\nFOL: all x. (TextSequence(Output(x)) & NaturalLanguageProcessingTask(x) -> ObjectIdentificationTask(x))\n\nTEXT: Machine translation is a natural language processing task.\nFOL: MachineTranslation(x) -> NaturalLanguageProcessingTask(x)\n\nTEXT: The output of machine translation is a text sequence.\nFOL: TextSequence(Output(MachineTranslation))\n\nTEXT: Machine translation is an object identification task.\nFOL: ObjectIdentificationTask(MachineTranslation)\n\nANSWER: True\nProcessed: True", "Generation 3:\nTEXT: A natural language processing task can be categorized as either an object identification task or a semantic segmentation task.\nFOL: all x. (NaturalLanguageProcessingTask(x) -> (ObjectIdentificationTask(x) | SemanticSegmentationTask(x)))\n\nTEXT: If the output of a natural language processing task is a text sequence, then it is an object identification task.\nFOL: all x. (NaturalLanguageProcessingTask(x) & TextSequence(Output(x)) -> ObjectIdentificationTask(x))\n\nTEXT: Machine translation is a natural language processing task.\nFOL: MachineTranslation(x) -> NaturalLanguageProcessingTask(x)\n\nTEXT: The output of machine translation is a text sequence.\nFOL: all x. MachineTranslation(x) -> TextSequence(Output(x))\n\nTEXT: Machine translation is an object identification task.\nFOL: MachineTranslation(x) -> ObjectIdentificationTask(x)\n\nANSWER: True\nProcessed: True", "Generation 4:\nTEXT: A natural language processing task can be categorized as either an object identification task or a semantic segmentation task.\nFOL: all x. (NaturalLanguageProcessingTask(x) -> (ObjectIdentificationTask(x) | SemanticSegmentationTask(x)))\n\nTEXT: If the output of a natural language processing task is a text sequence, then it is an object identification task.\nFOL: all x. (TextSequence(OutputOf(x)) & NatualLanguageProcessingTask(x) -> ObjectIdentificationTask(x))\n\nTEXT: Machine translation is a natural language processing task.\nFOL: MachineTranslation(x) -> NaturalLanguageProcessingTask(x)\n\nTEXT: The output of machine translation is a text sequence.\nFOL: TextSequence(OutputOf(MachineTranslation))\n\nTEXT: Machine translation is an object identification task.\nFOL: ObjectIdentificationTask(MachineTranslation)\n\nANSWER: True\nProcessed: True", "Generation 5:\nTEXT: A natural language processing task can be categorized as either an object identification task or a semantic segmentation task.\nFOL: all x. (NaturalLanguageProcessingTask(x) -> (ObjectIdentificationTask(x) | SemanticSegmentationTask(x)))\nTEXT: If the output of a natural language processing task is a text sequence, then it is an object identification task.\nFOL: all x. ((TextSequence(Output(x)) & NaturalLanguageProcessingTask(x)) -> ObjectIdentificationTask(x))\nTEXT: Machine translation is a natural language processing task.\nFOL: MachineTranslation(x) -> NaturalLanguageProcessingTask(x)\nTEXT: The output of machine translation is a text sequence.\nFOL: TextSequence(Output(MachineTranslation))\nTEXT: Machine translation is an object identification task.\nFOL: ObjectIdentificationTask(MachineTranslation)\n\nANSWER: True\nProcessed: True", "Generation 6:\nTEXT: A natural language processing task can be categorized as either an object identification task or a semantic segmentation task.\nFOL: all x. (NaturalLanguageProcessingTask(x) -> (ObjectIdentificationTask(x) v SemanticSegmentationTask(x)))\nTEXT: If the output of a natural language processing task is a text sequence, then it is an object identification task.\nFOL: all x. (TextSequence(Output(x)) & NaturalLanguageProcessingTask(x) -> ObjectIdentificationTask(x))\nTEXT: Machine translation is a natural language processing task.\nFOL: MachineTranslation(x) -> NaturalLanguageProcessingTask(x)\nTEXT: The output of machine translation is a text sequence.\nFOL: TextSequence(Output(MachineTranslation))\nTEXT: Machine translation is an object identification task.\nFOL: ObjectIdentificationTask(MachineTranslation)\n\nANSWER: True\nProcessed: True", "Generation 7:\nTEXT: A natural language processing task can be categorized as either an object identification task or a semantic segmentation task.\nFOL: all x. (NaturalLanguageProcessingTask(x) -> (ObjectIdentificationTask(x) v SemanticSegmentationTask(x)))\n\nTEXT: If the output of a natural language processing task is a text sequence, then it is an object identification task.\nFOL: all x. ((TextSequence(Output(x)) & NaturalLanguageProcessingTask(x)) -> ObjectIdentificationTask(x))\n\nTEXT: Machine translation is a natural language processing task.\nFOL: MachineTranslation(x) -> NaturalLanguageProcessingTask(x)\n\nTEXT: The output of machine translation is a text sequence.\nFOL: TextSequence(Output(MachineTranslation))\n\nTEXT: Machine translation is an object identification task.\nFOL: ObjectIdentificationTask(MachineTranslation)\n\nANSWER: True\nProcessed: True", "Generation 8:\nTEXT: A natural language processing task can be categorized as either an object identification task or a semantic segmentation task.\nFOL: all x. (NaturalLanguageProcessingTask(x) -> (ObjectIdentificationTask(x) | SemanticSegmentationTask(x)))\nTEXT: If the output of a natural language processing task is a text sequence, then it is an object identification task.\nFOL: all x. (TextSequenceOutput(x) & NaturalLanguageProcessingTask(x) -> ObjectIdentificationTask(x))\nTEXT: Machine translation is a natural language processing task.\nFOL: MachineTranslation(x) -> NaturalLanguageProcessingTask(x)\nTEXT: The output of machine translation is a text sequence.\nFOL: TextSequenceOutput(MachineTranslation)\nTEXT: Machine translation is an object identification task.\nFOL: ObjectIdentificationTask(MachineTranslation)\n\nANSWER: True\nProcessed: True", "Generation 9:\nTEXT: A natural language processing task can be categorized as either an object identification task or a semantic segmentation task.\nFOL: all x. (NaturalLanguageProcessingTask(x) -> (ObjectIdentificationTask(x) v SemanticSegmentationTask(x)))\nTEXT: If the output of a natural language processing task is a text sequence, then it is an object identification task.\nFOL: all x. ((TextSequence(Output(x)) & NaturalLanguageProcessingTask(x)) -> ObjectIdentificationTask(x))\nTEXT: Machine translation is a natural language processing task.\nFOL: MachineTranslation(x) -> NaturalLanguageProcessingTask(x)\nTEXT: The output of machine translation is a text sequence.\nFOL: TextSequence(Output(MachineTranslation))\nTEXT: Machine translation is an object identification task.\nFOL: ObjectIdentificationTask(MachineTranslation)\n\nANSWER: True\nProcessed: True", "Generation 10:\nTEXT: A natural language processing task can be categorized as either an object identification task or a semantic segmentation task.\nFOL: all x. (NaturalLanguageProcessingTask(x) -> (ObjectIdentificationTask(x) v SemanticSegmentationTask(x)))\nTEXT: If the output of a natural language processing task is a text sequence, then it is an object identification task.\nFOL: all x. ((TextSequence(Output(x)) & NaturalLanguageProcessingTask(x)) -> ObjectIdentificationTask(x))\nTEXT: Machine translation is a natural language processing task.\nFOL: MachineTranslation(m) & NaturalLanguageProcessingTask(m)\nTEXT: The output of machine translation is a text sequence.\nFOL: TextSequence(Output(m))\nTEXT: Machine translation is an object identification task.\nFOL: ObjectIdentificationTask(m)\n\nANSWER: True\nProcessed: True\n\nReference: True\n========================================"], "answers": ["True", "True", "True", "True", "True", "True", "True", "True", "True", "True"]}
{"idx": 62, "prompt": "The following is a first-order logic (FOL) problem.\nThe problem is to determine whether the conclusion follows from the premises.\nThe premises are given in the form of a set of first-order logic sentences.\nThe conclusion is given in the form of a single first-order logic sentence.\nThe task is to translate each of the premises and conclusions into FOL expressions.and then to evaluate the conclusion as ANSWER: True, ANSWER: False, or ANSWER: Uncertain given the premises. The output should follow format TEXT: \nFOL: \nTEXT: \nFOL:... ANSWER: \n\n\n<PREMISES>\nAll biodegradable things are environment-friendly.\nAll woodware is biodegradable.\nAll paper is woodware.\nNothing is a good thing and also a bad thing.\nAll environment-friendly things are good.\nA worksheet is either paper or environment-friendly.\n</PREMISES>\n<CONCLUSION>\nA worksheet is not biodegradable.\n</CONCLUSION>\n<EVALUATE>\nTEXT: All biodegradable things are environment-friendly.\nFOL: all x. (Biodegradable(x) -> EnvironmentFriendly(x))\nTEXT: All woodware is biodegradable.\nFOL: all x. (Woodware(x) -> Biodegradable(x))\nTEXT: All paper is woodware.\nFOL: all x. (Paper(x) -> Woodware(x))\nTEXT: Nothing is a good thing and also a bad thing.\nFOL: -(exists x. (Good(x) & Bad(x)))\nTEXT: All environment-friendly things are good.\nFOL: all x. (EnvironmentFriendly(x) -> Good(x))\nTEXT: A worksheet is either paper or environment-friendly.\nFOL: ((Paper(Worksheet) & -EnvironmentFriendly(Worksheet)) | (-Paper(Worksheet) & EnvironmentFriendly(Worksheet)))\nTEXT: A worksheet is not biodegradable.\nFOL: -Dispensable(Worksheet)\n\nANSWER: Uncertain\n</EVALUATE>\n\n<PREMISES>\nA La Liga soccer team ranks higher than another La Liga soccer team if it receives more points.\nIf there are two La Liga soccer teams and neither has more points than the other, then the team which receives more points from the games between the two teams ranks higher.\nReal Madrid and Barcelona are both La Liga soccer teams.\nReal Madrid received more points than Barcelona.\nNeither Real Madrid nor Barcelona received more points from the games between them.\n</PREMISES>\n<CONCLUSION>\nReal Madrid ranks higher than Barcelona.\n</CONCLUSION>\n<EVALUATE>\nTEXT: A La Liga soccer team ranks higher than another La Liga soccer team if it receives more points.\nFOL: all x. all y. (LaLigaSoccerTeam(x) & LaLigaSoccerTeam(y) & MorePoints(x, y) -> RankHigherThan(x, y))\nTEXT: If there are two La Liga soccer teams and neither has more points than the other, then the team which receives more points from the games between the two teams ranks higher.\nFOL: all x. all y. (LaLigaSoccerTeam(x) & LaLigaSoccerTeam(y) & -MorePoints(x, y) & -MorePoints(y, x) & MorePointsInGameBetween(x, y) ->  RankHigherThan(x, y))\nTEXT: Real Madrid and Barcelona are both La Liga soccer teams.\nFOL: LaLigaSoccerTeam(RealMadrid) & LaLigaSoccerTeam(Barcelona)\nTEXT: Real Madrid received more points than Barcelona.\nFOL: MorePoints(RealMadrid, Barcelona)\nTEXT: Neither Real Madrid nor Barcelona received more points from the games between them.\nFOL: -MorePointsInGameBetween(RealMadrid, Barcelona) & -MorePointsInGameBetween(Barcelona, RealMadrid)\nTEXT: Real Madrid ranks higher than Barcelona.\nFOL: HigherRank(RealMadrid, Barcelona)\n\nANSWER: True\n</EVALUATE>\n\n<PREMISES>\nAll professional athletes spend most of their time on sports.\nAll Olympic gold medal winners are professional athletes.\nNo full-time scientists spend the majority of their time on sports.\nAll Nobel physics laureates are full-time scientists.\nAmy spends the most time on sports, or Amy is an Olympic gold medal winner.\nIf Amy is not a Nobel physics laureate, then Amy is not an Olympic gold medal winner.\n</PREMISES>\n<CONCLUSION>\nIf Amy is not an Olympic gold medal winner, then Amy is a Nobel physics laureate.\n</CONCLUSION>\n<EVALUATE>\nTEXT: All professional athletes spend most of their time on sports.\nFOL: all x. (ProfessionalAthlete(x) -> SpendOn(x, MostOfTheirTime, Sports))\nTEXT: All Olympic gold medal winners are professional athletes.\nFOL: all x. (OlympicGoldMedalWinner(x) -> ProfessionalAthlete(x))\nTEXT: No full-time scientists spend the majority of their time on sports.\nFOL: all x. (FullTimeScientist(x) -> -SpendOn(x, MostOfTheirTime, Sports))\nTEXT: All Nobel physics laureates are full-time scientists.\nFOL: all x. (NobelPhysicsLaureate(x) -> FullTimeScientist(x))\nTEXT: Amy spends the most time on sports, or Amy is an Olympic gold medal winner.\nFOL: SpendOn(Amy, MostOfTheirTime, Sports) | OlympicGoldMedalWinner(Amy)\nTEXT: If Amy is not a Nobel physics laureate, then Amy is not an Olympic gold medal winner.\nFOL: -NobelPhysicsLaureate(Amy) -> -OlympicGoldMedalWinner(Amy)\nTEXT: If Amy is not an Olympic gold medal winner, then Amy is a Nobel physics laureate.\nFOL: -OlympicGoldMedalWinner(Amy) -> NobelLaureate(Amy)\n\nANSWER: False\n</EVALUATE>\n\n<PREMISES>\nIf a person pays their taxes, then they contribute to the country.\nEveryone who works for a government department pays a tax on their salary.\nEveryone in the army is an employee of a government department.\nEveryone convicted of murder goes to prison.\nEveryone who has been to prison has a criminal record.\nJames was either once convicted of murder, or spent time in prison.\nJames either has a criminal record, or pays his taxes.\n</PREMISES>\n<CONCLUSION>\nJames does not contribute to the country.\n</CONCLUSION>\n<EVALUATE>\nTEXT: If a person pays their taxes, then they contribute to the country.\nFOL: all x. (Taxpayer(x) -> ContributeTo(x, Country))\nTEXT: Everyone who works for a government department pays a tax on their salary.\nFOL: all x. (WorkFor(x, GovernmentAgency) -> Taxpayer(x))\nTEXT: Everyone in the army is an employee of a government department.\nFOL: all x. (ServesIn(x, TheArmy) -> WorkFor(x, GovernmentAgency))\nTEXT: Everyone convicted of murder goes to prison.\nFOL: all x. (SentencedForMurder(x) -> Imprisoned(x))\nTEXT: Everyone who has been to prison has a criminal record.\nFOL: all x. (Imprisoned((x) -> Has(x, CriminalRecord))\nTEXT: James was either once convicted of murder, or spent time in prison.\nFOL: ((SentencedForMurder(James) & -Imprisoned(James)) | (-SentencedForMurder(James) & Imprisoned(James)))\nTEXT: James either has a criminal record, or pays his taxes.\nFOL: ((Has(James, CriminalRecord) & -Taxpayer(James)) | (-Has(James, CriminalRecord) & Taxpayer(James)))\nTEXT: James does not contribute to the country.\nFOL: ContributeToCountry(James)\n\nANSWER: Uncertain\n</EVALUATE>\n\n<PREMISES>\nNo songs are visuals.\nAll folk songs are songs.\nAll videos are visuals.\nAll movies are videos.\nAll sci-fi movies are movies.\nInception is a sci-fi movie.\nMac is neither a folk song nor a sci-fi movie.\n</PREMISES>\n<CONCLUSION>\nInception is a folk song.\n</CONCLUSION>\n<EVALUATE>\nTEXT: No songs are visuals.\nFOL: all x. (Song(x) -> -Visual(x))\nTEXT: All folk songs are songs.\nFOL: all x. (FolkSong(x) -> Song(x))\nTEXT: All videos are visuals.\nFOL: all x. (Video(x) -> Visual(x))\nTEXT: All movies are videos.\nFOL: all x. (Movie(x) -> Video(x))\nTEXT: All sci-fi movies are movies.\nFOL: all x. (ScifiMovie(x) -> Movie(x))\nTEXT: Inception is a sci-fi movie.\nFOL: ScifiMovie(Inception)\nTEXT: Mac is neither a folk song nor a sci-fi movie.\nFOL: -FolkSong(Mac) & -ScifiMovie(Mac)\nTEXT: Inception is a folk song.\nFOL: FolkSong(Inception)\n\nANSWER: False\n</EVALUATE>\n\n<PREMISES>\nEvery chef can cook.\nSome people who aren’t chefs can cook.\nPeople who cook can make scrambled eggs and pasta.\nIf someone can make cookies and muffins, they are a baker.\nBakers who can also make scrambled eggs can make a good breakfast.\nLuke can make cookies, scrambled eggs, and muffins, but not pasta.\n</PREMISES>\n<CONCLUSION>\nLuke is a chef.\n</CONCLUSION>\n<EVALUATE>\nTEXT: Every chef can cook.\nFOL: all x. (Chef(x) -> Can(x, Cook))\nTEXT: Some people who aren’t chefs can cook.\nFOL: exists x. (-Chef(x) & Can(x, Cook))\nTEXT: People who cook can make scrambled eggs and pasta.\nFOL: all x. (Can(x, Cook) -> (CanMake(x, ScrambledEggs) & CanMake(x, Pasta)))\nTEXT: If someone can make cookies and muffins, they are a baker.\nFOL: all x. (CanMake(x, Cookies) & CanMake(x, Muffins) -> Baker(x))\nTEXT: Bakers who can also make scrambled eggs can make a good breakfast.\nFOL: all x. ((Baker(x) & CanMake(x, ScrambledEggs)) -> CanMake(x, GoodBreakfast))\nTEXT: Luke can make cookies, scrambled eggs, and muffins, but not pasta.\nFOL: CanMake(Luke, Cookies) & (CanMake(Luke, ScrambledEggs) & CanMake(Luke, Muffins) & -CanMake(Luke, Pasta)\nTEXT: Luke is a chef.\nFOL: MakeGoodBreakfast(Luke)\n\nANSWER: False\n</EVALUATE>\n\n<PREMISES>\nETS develops various standardized tests primarily in the United States for K-12 and higher education.\nETS administers international tests, including the TOEFL, TOEIC, GRE, and subject tests.\nMany of the assessments ETS develops are associated with entry to the US tertiary and quaternary education institutions.\nETS also develops K-12 statewide assessments used for accountability testing in many states.\n</PREMISES>\n<CONCLUSION>\nETS doesn't administer tests internationally.\n</CONCLUSION>\n<EVALUATE>\nTEXT: ETS develops various standardized tests primarily in the United States for K-12 and higher education.\nFOL: exists x. exists y. (Develop(eTS, x) & Develop(eTS, y) & StandardizedTest(x) & StandardizedTest(y) & In(x, UnitedState) & In(y, UnitedState) & For(x, kOneTwoAndHigherEducation) & For(y, kOneTwoAndHigherEducation))\nTEXT: ETS administers international tests, including the TOEFL, TOEIC, GRE, and subject tests.\nFOL: exists x. (Administer(eTS, x) & InternationalTest(x) & (TOEFL(x) | TOEIC(x) | GRE(x) | SubjectTest(x)))\nTEXT: Many of the assessments ETS develops are associated with entry to the US tertiary and quaternary education institutions.\nFOL: exists x. (Develop(eTS, x) & AssociatedWith(x, EntryToUSEducationInstitution))\nTEXT: ETS also develops K-12 statewide assessments used for accountability testing in many states.\nFOL: exists x. (Develop(eTS, x) & StateWideAssesment(x) & UsedFor(x, AccountabilityTesting))\nTEXT: ETS doesn't administer tests internationally.\nFOL: exists x. (Develops(Ets, x) & For(x, k-OneTwoandhighereducation)) & exists x. (Develops(Ets, x) & AssociatedWith(x, Entrytouseducationinstitutions))\n\nANSWER: False\n</EVALUATE>\n\n<PREMISES>\nDaveed Diggs is an actor and film producer.\nDaveed Diggs played two roles in the musical Hamilton on Broadway.\nOne of the actors from Hamilton won the best actor award.\nThe actor playing Thomas Jefferson won the best actor award.\nDaveed Diggs played Thomas Jefferson.\nMusicals on Broadway are not films.\n</PREMISES>\n<CONCLUSION>\nDaveed Diggs won the best actor award.\n</CONCLUSION>\n<EVALUATE>\nTEXT: Daveed Diggs is an actor and film producer.\nFOL: Actor(DaveedDiggs) & FilmProducer(DaveedDiggs)\nTEXT: Daveed Diggs played two roles in the musical Hamilton on Broadway.\nFOL: exists x. exists y.(PlaysIn(DaveedDiggs, x, Hamilton) & (-(x=y)) & PlaysIn(DaveedDiggs, y, Hamilton)) & OnBroadway(Hamilton) & Musical(Hamilton)\nTEXT: One of the actors from Hamilton won the best actor award.\nFOL: exists x. exists y.(Actor(x) & PlaysIn(x, y, Hamilton) & Wins(x, BestActorAward))\nTEXT: The actor playing Thomas Jefferson won the best actor award.\nFOL: exists x. (Actor(x) & PlaysIn(x, ThomasJefferson, Hamilton) & Wins(x, BestActorAward))\nTEXT: Daveed Diggs played Thomas Jefferson.\nFOL: Plays(DaveedDiggs, ThomasJefferson)\nTEXT: Musicals on Broadway are not films.\nFOL: all x. ((Musical(x) & OnBroadway(x)) -> -Film(x))\nTEXT: Daveed Diggs won the best actor award.\nFOL: exists x. (BRICS(x) & Speaks(x, Hindi))\n\nANSWER: True\n</EVALUATE>\n\n<PREMISES>\nSome reptiles have eyes.\nPlatypuses have no eyes.\nPlatypuses are reptiles.\nCorgis have eyes.\n</PREMISES>\n<CONCLUSION>\nPlatypuses are reptiles with no eyes.\n</CONCLUSION>\n<EVALUATE>", "raw_generations": ["Generation 1:\nTEXT: Some reptiles have eyes.\nFOL: exists x. Reptile(x) & HasEyes(x)\nTEXT: Platypuses have no eyes.\nFOL: -HasEyes(Platypus)\nTEXT: Platypuses are reptiles.\nFOL: Reptile(Platypus)\nTEXT: Corgis have eyes.\nFOL: HasEyes(Corgi)\nTEXT: Platypuses are reptiles with no eyes.\nFOL: Reptile(Platypus) & -HasEyes(Platypus)\n\nANSWER: True\nProcessed: True", "Generation 2:\nTEXT: Some reptiles have eyes.\nFOL: exists x. (Reptile(x) & HasEyes(x))\nTEXT: Platypuses have no eyes.\nFOL: -HasEyes(Platypus)\nTEXT: Platypuses are reptiles.\nFOL: Reptile(Platypus)\nTEXT: Corgis have eyes.\nFOL: HasEyes(Corgi)\nTEXT: Platypuses are reptiles with no eyes.\nFOL: Reptile(Platypus) & -HasEyes(Platypus)\n\nANSWER: True\nProcessed: True", "Generation 3:\nTEXT: Some reptiles have eyes.\nFOL: exists x. Reptile(x) & HasEyes(x)\nTEXT: Platypuses have no eyes.\nFOL: -HasEyes(Platypus)\nTEXT: Platypuses are reptiles.\nFOL: Reptile(Platypus)\nTEXT: Corgis have eyes.\nFOL: HasEyes(Corgi)\nTEXT: Platypuses are reptiles with no eyes.\nFOL: Reptile(Platypus) & -HasEyes(Platypus)\n\nANSWER: True\nProcessed: True", "Generation 4:\nTEXT: Some reptiles have eyes.\nFOL: exists x. (Reptile(x) & Has(x, Eyes))\nTEXT: Platypuses have no eyes.\nFOL: -Has(Platypus, Eyes)\nTEXT: Platypuses are reptiles.\nFOL: Reptile(Platypus)\nTEXT: Corgis have eyes.\nFOL: Has(Corgi, Eyes)\nTEXT: Platypuses are reptiles with no eyes.\nFOL: Reptile(Platypus) & -Has(Platypus, Eyes)\n\nANSWER: True\nProcessed: True", "Generation 5:\nTEXT: Some reptiles have eyes.\nFOL: exists x. Reptile(x) & HasEyes(x)\nTEXT: Platypuses have no eyes.\nFOL: -HasEyes(Platypus)\nTEXT: Platypuses are reptiles.\nFOL: Reptile(Platypus)\nTEXT: Corgis have eyes.\nFOL: HasEyes(Corgi)\nTEXT: Platypuses are reptiles with no eyes.\nFOL: Reptile(Platypus) & -HasEyes(Platypus)\n\nANSWER: True\nProcessed: True", "Generation 6:\nTEXT: Some reptiles have eyes.\nFOL: exists x. Reptile(x) & HasEyes(x)\n\nTEXT: Platypuses have no eyes.\nFOL: -HasEyes(Platypus)\n\nTEXT: Platypuses are reptiles.\nFOL: Reptile(Platypus)\n\nTEXT: Corgis have eyes.\nFOL: HasEyes(Corgi)\n\nTEXT: Platypuses are reptiles with no eyes.\nFOL: Reptile(Platypus) & -HasEyes(Platypus)\n\nANSWER: True\nProcessed: True", "Generation 7:\nTEXT: Some reptiles have eyes.\nFOL: exists x. (Reptile(x) & HasEyes(x))\nTEXT: Platypuses have no eyes.\nFOL: -HasEyes(Platypus)\nTEXT: Platypuses are reptiles.\nFOL: Reptile(Platypus)\nTEXT: Corgis have eyes.\nFOL: HasEyes(Corgi)\nTEXT: Platypuses are reptiles with no eyes.\nFOL: Reptile(Platypus) & -HasEyes(Platypus)\n\nANSWER: True\nProcessed: True", "Generation 8:\nTEXT: Some reptiles have eyes.\nFOL: exists x. (Reptile(x) & HasEyes(x))\nTEXT: Platypuses have no eyes.\nFOL: -HasEyes(Platypus)\nTEXT: Platypuses are reptiles.\nFOL: Reptile(Platypus)\nTEXT: Corgis have eyes.\nFOL: HasEyes(Corgi)\nTEXT: Platypuses are reptiles with no eyes.\nFOL: Reptile(Platypus) & -HasEyes(Platypus)\n\nANSWER: True\nProcessed: True", "Generation 9:\nTEXT: Some reptiles have eyes.\nFOL: exists x. (Reptile(x) & Has(x, Eyes))\nTEXT: Platypuses have no eyes.\nFOL: -Has(Platypus, Eyes)\nTEXT: Platypuses are reptiles.\nFOL: Reptile(Platypus)\nTEXT: Corgis have eyes.\nFOL: Has(Corgi, Eyes)\nTEXT: Platypuses are reptiles with no eyes.\nFOL: Reptile(Platypus) & -Has(Platypus, Eyes)\n\nANSWER: True\nProcessed: True", "Generation 10:\nTEXT: Some reptiles have eyes.\nFOL: exists x. (Reptile(x) & Has(x, Eyes))\nTEXT: Platypuses have no eyes.\nFOL: -Has(Platypus, Eyes)\nTEXT: Platypuses are reptiles.\nFOL: Reptile(Platypus)\nTEXT: Corgis have eyes.\nFOL: Has(Corgi, Eyes)\nTEXT: Platypuses are reptiles with no eyes.\nFOL: Reptile(Platypus) & -Has(Platypus, Eyes)\n\nANSWER: True\nProcessed: True\n\nReference: True\n========================================"], "answers": ["True", "True", "True", "True", "True", "True", "True", "True", "True", "True"]}
{"idx": 63, "prompt": "The following is a first-order logic (FOL) problem.\nThe problem is to determine whether the conclusion follows from the premises.\nThe premises are given in the form of a set of first-order logic sentences.\nThe conclusion is given in the form of a single first-order logic sentence.\nThe task is to translate each of the premises and conclusions into FOL expressions.and then to evaluate the conclusion as ANSWER: True, ANSWER: False, or ANSWER: Uncertain given the premises. The output should follow format TEXT: \nFOL: \nTEXT: \nFOL:... ANSWER: \n\n\n<PREMISES>\nAll biodegradable things are environment-friendly.\nAll woodware is biodegradable.\nAll paper is woodware.\nNothing is a good thing and also a bad thing.\nAll environment-friendly things are good.\nA worksheet is either paper or environment-friendly.\n</PREMISES>\n<CONCLUSION>\nA worksheet is not biodegradable.\n</CONCLUSION>\n<EVALUATE>\nTEXT: All biodegradable things are environment-friendly.\nFOL: all x. (Biodegradable(x) -> EnvironmentFriendly(x))\nTEXT: All woodware is biodegradable.\nFOL: all x. (Woodware(x) -> Biodegradable(x))\nTEXT: All paper is woodware.\nFOL: all x. (Paper(x) -> Woodware(x))\nTEXT: Nothing is a good thing and also a bad thing.\nFOL: -(exists x. (Good(x) & Bad(x)))\nTEXT: All environment-friendly things are good.\nFOL: all x. (EnvironmentFriendly(x) -> Good(x))\nTEXT: A worksheet is either paper or environment-friendly.\nFOL: ((Paper(Worksheet) & -EnvironmentFriendly(Worksheet)) | (-Paper(Worksheet) & EnvironmentFriendly(Worksheet)))\nTEXT: A worksheet is not biodegradable.\nFOL: -Dispensable(Worksheet)\n\nANSWER: Uncertain\n</EVALUATE>\n\n<PREMISES>\nA La Liga soccer team ranks higher than another La Liga soccer team if it receives more points.\nIf there are two La Liga soccer teams and neither has more points than the other, then the team which receives more points from the games between the two teams ranks higher.\nReal Madrid and Barcelona are both La Liga soccer teams.\nReal Madrid received more points than Barcelona.\nNeither Real Madrid nor Barcelona received more points from the games between them.\n</PREMISES>\n<CONCLUSION>\nReal Madrid ranks higher than Barcelona.\n</CONCLUSION>\n<EVALUATE>\nTEXT: A La Liga soccer team ranks higher than another La Liga soccer team if it receives more points.\nFOL: all x. all y. (LaLigaSoccerTeam(x) & LaLigaSoccerTeam(y) & MorePoints(x, y) -> RankHigherThan(x, y))\nTEXT: If there are two La Liga soccer teams and neither has more points than the other, then the team which receives more points from the games between the two teams ranks higher.\nFOL: all x. all y. (LaLigaSoccerTeam(x) & LaLigaSoccerTeam(y) & -MorePoints(x, y) & -MorePoints(y, x) & MorePointsInGameBetween(x, y) ->  RankHigherThan(x, y))\nTEXT: Real Madrid and Barcelona are both La Liga soccer teams.\nFOL: LaLigaSoccerTeam(RealMadrid) & LaLigaSoccerTeam(Barcelona)\nTEXT: Real Madrid received more points than Barcelona.\nFOL: MorePoints(RealMadrid, Barcelona)\nTEXT: Neither Real Madrid nor Barcelona received more points from the games between them.\nFOL: -MorePointsInGameBetween(RealMadrid, Barcelona) & -MorePointsInGameBetween(Barcelona, RealMadrid)\nTEXT: Real Madrid ranks higher than Barcelona.\nFOL: HigherRank(RealMadrid, Barcelona)\n\nANSWER: True\n</EVALUATE>\n\n<PREMISES>\nAll professional athletes spend most of their time on sports.\nAll Olympic gold medal winners are professional athletes.\nNo full-time scientists spend the majority of their time on sports.\nAll Nobel physics laureates are full-time scientists.\nAmy spends the most time on sports, or Amy is an Olympic gold medal winner.\nIf Amy is not a Nobel physics laureate, then Amy is not an Olympic gold medal winner.\n</PREMISES>\n<CONCLUSION>\nIf Amy is not an Olympic gold medal winner, then Amy is a Nobel physics laureate.\n</CONCLUSION>\n<EVALUATE>\nTEXT: All professional athletes spend most of their time on sports.\nFOL: all x. (ProfessionalAthlete(x) -> SpendOn(x, MostOfTheirTime, Sports))\nTEXT: All Olympic gold medal winners are professional athletes.\nFOL: all x. (OlympicGoldMedalWinner(x) -> ProfessionalAthlete(x))\nTEXT: No full-time scientists spend the majority of their time on sports.\nFOL: all x. (FullTimeScientist(x) -> -SpendOn(x, MostOfTheirTime, Sports))\nTEXT: All Nobel physics laureates are full-time scientists.\nFOL: all x. (NobelPhysicsLaureate(x) -> FullTimeScientist(x))\nTEXT: Amy spends the most time on sports, or Amy is an Olympic gold medal winner.\nFOL: SpendOn(Amy, MostOfTheirTime, Sports) | OlympicGoldMedalWinner(Amy)\nTEXT: If Amy is not a Nobel physics laureate, then Amy is not an Olympic gold medal winner.\nFOL: -NobelPhysicsLaureate(Amy) -> -OlympicGoldMedalWinner(Amy)\nTEXT: If Amy is not an Olympic gold medal winner, then Amy is a Nobel physics laureate.\nFOL: -OlympicGoldMedalWinner(Amy) -> NobelLaureate(Amy)\n\nANSWER: False\n</EVALUATE>\n\n<PREMISES>\nIf a person pays their taxes, then they contribute to the country.\nEveryone who works for a government department pays a tax on their salary.\nEveryone in the army is an employee of a government department.\nEveryone convicted of murder goes to prison.\nEveryone who has been to prison has a criminal record.\nJames was either once convicted of murder, or spent time in prison.\nJames either has a criminal record, or pays his taxes.\n</PREMISES>\n<CONCLUSION>\nJames does not contribute to the country.\n</CONCLUSION>\n<EVALUATE>\nTEXT: If a person pays their taxes, then they contribute to the country.\nFOL: all x. (Taxpayer(x) -> ContributeTo(x, Country))\nTEXT: Everyone who works for a government department pays a tax on their salary.\nFOL: all x. (WorkFor(x, GovernmentAgency) -> Taxpayer(x))\nTEXT: Everyone in the army is an employee of a government department.\nFOL: all x. (ServesIn(x, TheArmy) -> WorkFor(x, GovernmentAgency))\nTEXT: Everyone convicted of murder goes to prison.\nFOL: all x. (SentencedForMurder(x) -> Imprisoned(x))\nTEXT: Everyone who has been to prison has a criminal record.\nFOL: all x. (Imprisoned((x) -> Has(x, CriminalRecord))\nTEXT: James was either once convicted of murder, or spent time in prison.\nFOL: ((SentencedForMurder(James) & -Imprisoned(James)) | (-SentencedForMurder(James) & Imprisoned(James)))\nTEXT: James either has a criminal record, or pays his taxes.\nFOL: ((Has(James, CriminalRecord) & -Taxpayer(James)) | (-Has(James, CriminalRecord) & Taxpayer(James)))\nTEXT: James does not contribute to the country.\nFOL: ContributeToCountry(James)\n\nANSWER: Uncertain\n</EVALUATE>\n\n<PREMISES>\nNo songs are visuals.\nAll folk songs are songs.\nAll videos are visuals.\nAll movies are videos.\nAll sci-fi movies are movies.\nInception is a sci-fi movie.\nMac is neither a folk song nor a sci-fi movie.\n</PREMISES>\n<CONCLUSION>\nInception is a folk song.\n</CONCLUSION>\n<EVALUATE>\nTEXT: No songs are visuals.\nFOL: all x. (Song(x) -> -Visual(x))\nTEXT: All folk songs are songs.\nFOL: all x. (FolkSong(x) -> Song(x))\nTEXT: All videos are visuals.\nFOL: all x. (Video(x) -> Visual(x))\nTEXT: All movies are videos.\nFOL: all x. (Movie(x) -> Video(x))\nTEXT: All sci-fi movies are movies.\nFOL: all x. (ScifiMovie(x) -> Movie(x))\nTEXT: Inception is a sci-fi movie.\nFOL: ScifiMovie(Inception)\nTEXT: Mac is neither a folk song nor a sci-fi movie.\nFOL: -FolkSong(Mac) & -ScifiMovie(Mac)\nTEXT: Inception is a folk song.\nFOL: FolkSong(Inception)\n\nANSWER: False\n</EVALUATE>\n\n<PREMISES>\nEvery chef can cook.\nSome people who aren’t chefs can cook.\nPeople who cook can make scrambled eggs and pasta.\nIf someone can make cookies and muffins, they are a baker.\nBakers who can also make scrambled eggs can make a good breakfast.\nLuke can make cookies, scrambled eggs, and muffins, but not pasta.\n</PREMISES>\n<CONCLUSION>\nLuke is a chef.\n</CONCLUSION>\n<EVALUATE>\nTEXT: Every chef can cook.\nFOL: all x. (Chef(x) -> Can(x, Cook))\nTEXT: Some people who aren’t chefs can cook.\nFOL: exists x. (-Chef(x) & Can(x, Cook))\nTEXT: People who cook can make scrambled eggs and pasta.\nFOL: all x. (Can(x, Cook) -> (CanMake(x, ScrambledEggs) & CanMake(x, Pasta)))\nTEXT: If someone can make cookies and muffins, they are a baker.\nFOL: all x. (CanMake(x, Cookies) & CanMake(x, Muffins) -> Baker(x))\nTEXT: Bakers who can also make scrambled eggs can make a good breakfast.\nFOL: all x. ((Baker(x) & CanMake(x, ScrambledEggs)) -> CanMake(x, GoodBreakfast))\nTEXT: Luke can make cookies, scrambled eggs, and muffins, but not pasta.\nFOL: CanMake(Luke, Cookies) & (CanMake(Luke, ScrambledEggs) & CanMake(Luke, Muffins) & -CanMake(Luke, Pasta)\nTEXT: Luke is a chef.\nFOL: MakeGoodBreakfast(Luke)\n\nANSWER: False\n</EVALUATE>\n\n<PREMISES>\nETS develops various standardized tests primarily in the United States for K-12 and higher education.\nETS administers international tests, including the TOEFL, TOEIC, GRE, and subject tests.\nMany of the assessments ETS develops are associated with entry to the US tertiary and quaternary education institutions.\nETS also develops K-12 statewide assessments used for accountability testing in many states.\n</PREMISES>\n<CONCLUSION>\nETS doesn't administer tests internationally.\n</CONCLUSION>\n<EVALUATE>\nTEXT: ETS develops various standardized tests primarily in the United States for K-12 and higher education.\nFOL: exists x. exists y. (Develop(eTS, x) & Develop(eTS, y) & StandardizedTest(x) & StandardizedTest(y) & In(x, UnitedState) & In(y, UnitedState) & For(x, kOneTwoAndHigherEducation) & For(y, kOneTwoAndHigherEducation))\nTEXT: ETS administers international tests, including the TOEFL, TOEIC, GRE, and subject tests.\nFOL: exists x. (Administer(eTS, x) & InternationalTest(x) & (TOEFL(x) | TOEIC(x) | GRE(x) | SubjectTest(x)))\nTEXT: Many of the assessments ETS develops are associated with entry to the US tertiary and quaternary education institutions.\nFOL: exists x. (Develop(eTS, x) & AssociatedWith(x, EntryToUSEducationInstitution))\nTEXT: ETS also develops K-12 statewide assessments used for accountability testing in many states.\nFOL: exists x. (Develop(eTS, x) & StateWideAssesment(x) & UsedFor(x, AccountabilityTesting))\nTEXT: ETS doesn't administer tests internationally.\nFOL: exists x. (Develops(Ets, x) & For(x, k-OneTwoandhighereducation)) & exists x. (Develops(Ets, x) & AssociatedWith(x, Entrytouseducationinstitutions))\n\nANSWER: False\n</EVALUATE>\n\n<PREMISES>\nDaveed Diggs is an actor and film producer.\nDaveed Diggs played two roles in the musical Hamilton on Broadway.\nOne of the actors from Hamilton won the best actor award.\nThe actor playing Thomas Jefferson won the best actor award.\nDaveed Diggs played Thomas Jefferson.\nMusicals on Broadway are not films.\n</PREMISES>\n<CONCLUSION>\nDaveed Diggs won the best actor award.\n</CONCLUSION>\n<EVALUATE>\nTEXT: Daveed Diggs is an actor and film producer.\nFOL: Actor(DaveedDiggs) & FilmProducer(DaveedDiggs)\nTEXT: Daveed Diggs played two roles in the musical Hamilton on Broadway.\nFOL: exists x. exists y.(PlaysIn(DaveedDiggs, x, Hamilton) & (-(x=y)) & PlaysIn(DaveedDiggs, y, Hamilton)) & OnBroadway(Hamilton) & Musical(Hamilton)\nTEXT: One of the actors from Hamilton won the best actor award.\nFOL: exists x. exists y.(Actor(x) & PlaysIn(x, y, Hamilton) & Wins(x, BestActorAward))\nTEXT: The actor playing Thomas Jefferson won the best actor award.\nFOL: exists x. (Actor(x) & PlaysIn(x, ThomasJefferson, Hamilton) & Wins(x, BestActorAward))\nTEXT: Daveed Diggs played Thomas Jefferson.\nFOL: Plays(DaveedDiggs, ThomasJefferson)\nTEXT: Musicals on Broadway are not films.\nFOL: all x. ((Musical(x) & OnBroadway(x)) -> -Film(x))\nTEXT: Daveed Diggs won the best actor award.\nFOL: exists x. (BRICS(x) & Speaks(x, Hindi))\n\nANSWER: True\n</EVALUATE>\n\n<PREMISES>\nAll mammals lack hooves.\nNo humans lack hooves.\n</PREMISES>\n<CONCLUSION>\nSome humans are mammals.\n</CONCLUSION>\n<EVALUATE>", "raw_generations": ["Generation 1:\nTEXT: All mammals lack hooves.\nFOL: all x. (Mammal(x) -> -Hooves(x))\nTEXT: No humans lack hooves.\nFOL: -(exists x. (Human(x) & -Hooves(x)))\nTEXT: Some humans are mammals.\nFOL: exists x. (Human(x) & Mammal(x))\n\nANSWER: False\n\nIn this case, the premises state that all mammals lack hooves and no humans lack hooves. However, the conclusion suggests that some humans are mammals, which contradicts the premises since humans are already defined as a type of mammal. Therefore, the conclusion is false given the premises.\nProcessed: False", "Generation 2:\nTEXT: All mammals lack hooves.\nFOL: all x. (Mammal(x) -> -Hooves(x))\n\nTEXT: No humans lack hooves.\nFOL: -exists x. (Human(x) & -Hooves(x))\n\nTEXT: Some humans are mammals.\nFOL: exists x. (Human(x) & Mammal(x))\n\nANSWER: False\nProcessed: False", "Generation 3:\nTEXT: All mammals lack hooves.\nFOL: all x. (Mammal(x) -> -HasHooves(x))\nTEXT: No humans lack hooves.\nFOL: -exists x. (Human(x) & -HasHooves(x))\nTEXT: Some humans are mammals.\nFOL: exists x. (Human(x) & Mammal(x))\n\nANSWER: False\nProcessed: False", "Generation 4:\nTEXT: All mammals lack hooves.\nFOL: all x. (Mammal(x) -> -HasHooves(x))\nTEXT: No humans lack hooves.\nFOL: all x. (Human(x) -> HasHooves(x))\nTEXT: Some humans are mammals.\nFOL: exists x. (Human(x) & Mammal(x))\n\nANSWER: False\nProcessed: False", "Generation 5:\nTEXT: All mammals lack hooves.\nFOL: all x. (Mammal(x) -> -Hooves(x))\nTEXT: No humans lack hooves.\nFOL: -exists x. (Human(x) & -Hooves(x))\nTEXT: Some humans are mammals.\nFOL: exists x. (Human(x) & Mammal(x))\n\nANSWER: False\nProcessed: False", "Generation 6:\nTEXT: All mammals lack hooves.\nFOL: all x. (Mammal(x) -> -Hooves(x))\nTEXT: No humans lack hooves.\nFOL: -(exists x. (Human(x) & -Hooves(x)))\nTEXT: Some humans are mammals.\nFOL: exists x. (Human(x) & Mammal(x))\n\nANSWER: False\nProcessed: False", "Generation 7:\nTEXT: All mammals lack hooves.\nFOL: all x. (Mammal(x) -> -Hooves(x))\nTEXT: No humans lack hooves.\nFOL: -exists x. (Human(x) & -Hooves(x))\nTEXT: Some humans are mammals.\nFOL: exists x. (Human(x) & Mammal(x))\n\nANSWER: False\n\nIn this case, the conclusion does not follow from the premises because all mammals lack hooves, and humans have hooves by definition, so no human can be a mammal.\nProcessed: False", "Generation 8:\nTEXT: All mammals lack hooves.\nFOL: all x. (Mammal(x) -> -Hooves(x))\nTEXT: No humans lack hooves.\nFOL: -exists x. (Human(x) & -Hooves(x))\nTEXT: Some humans are mammals.\nFOL: exists x. (Human(x) & Mammal(x))\n\nANSWER: False\nProcessed: False", "Generation 9:\nTEXT: All mammals lack hooves.\nFOL: all x. (Mammal(x) -> -Hooves(x))\nTEXT: No humans lack hooves.\nFOL: all x. (Human(x) -> Hooves(x))\nTEXT: Some humans are mammals.\nFOL: exists x. (Human(x) & Mammal(x))\n\nANSWER: False\nProcessed: False", "Generation 10:\nTEXT: All mammals lack hooves.\nFOL: all x. (Mammal(x) -> -Hooves(x))\nTEXT: No humans lack hooves.\nFOL: all x. (Human(x) -> Hooves(x))\nTEXT: Some humans are mammals.\nFOL: exists x. (Human(x) & Mammal(x))\n\nANSWER: False\nProcessed: False\n\nReference: False\n========================================"], "answers": ["False", "False", "False", "False", "False", "False", "False", "False", "False", "False"]}
{"idx": 64, "prompt": "The following is a first-order logic (FOL) problem.\nThe problem is to determine whether the conclusion follows from the premises.\nThe premises are given in the form of a set of first-order logic sentences.\nThe conclusion is given in the form of a single first-order logic sentence.\nThe task is to translate each of the premises and conclusions into FOL expressions.and then to evaluate the conclusion as ANSWER: True, ANSWER: False, or ANSWER: Uncertain given the premises. The output should follow format TEXT: \nFOL: \nTEXT: \nFOL:... ANSWER: \n\n\n<PREMISES>\nAll biodegradable things are environment-friendly.\nAll woodware is biodegradable.\nAll paper is woodware.\nNothing is a good thing and also a bad thing.\nAll environment-friendly things are good.\nA worksheet is either paper or environment-friendly.\n</PREMISES>\n<CONCLUSION>\nA worksheet is not biodegradable.\n</CONCLUSION>\n<EVALUATE>\nTEXT: All biodegradable things are environment-friendly.\nFOL: all x. (Biodegradable(x) -> EnvironmentFriendly(x))\nTEXT: All woodware is biodegradable.\nFOL: all x. (Woodware(x) -> Biodegradable(x))\nTEXT: All paper is woodware.\nFOL: all x. (Paper(x) -> Woodware(x))\nTEXT: Nothing is a good thing and also a bad thing.\nFOL: -(exists x. (Good(x) & Bad(x)))\nTEXT: All environment-friendly things are good.\nFOL: all x. (EnvironmentFriendly(x) -> Good(x))\nTEXT: A worksheet is either paper or environment-friendly.\nFOL: ((Paper(Worksheet) & -EnvironmentFriendly(Worksheet)) | (-Paper(Worksheet) & EnvironmentFriendly(Worksheet)))\nTEXT: A worksheet is not biodegradable.\nFOL: -Dispensable(Worksheet)\n\nANSWER: Uncertain\n</EVALUATE>\n\n<PREMISES>\nA La Liga soccer team ranks higher than another La Liga soccer team if it receives more points.\nIf there are two La Liga soccer teams and neither has more points than the other, then the team which receives more points from the games between the two teams ranks higher.\nReal Madrid and Barcelona are both La Liga soccer teams.\nReal Madrid received more points than Barcelona.\nNeither Real Madrid nor Barcelona received more points from the games between them.\n</PREMISES>\n<CONCLUSION>\nReal Madrid ranks higher than Barcelona.\n</CONCLUSION>\n<EVALUATE>\nTEXT: A La Liga soccer team ranks higher than another La Liga soccer team if it receives more points.\nFOL: all x. all y. (LaLigaSoccerTeam(x) & LaLigaSoccerTeam(y) & MorePoints(x, y) -> RankHigherThan(x, y))\nTEXT: If there are two La Liga soccer teams and neither has more points than the other, then the team which receives more points from the games between the two teams ranks higher.\nFOL: all x. all y. (LaLigaSoccerTeam(x) & LaLigaSoccerTeam(y) & -MorePoints(x, y) & -MorePoints(y, x) & MorePointsInGameBetween(x, y) ->  RankHigherThan(x, y))\nTEXT: Real Madrid and Barcelona are both La Liga soccer teams.\nFOL: LaLigaSoccerTeam(RealMadrid) & LaLigaSoccerTeam(Barcelona)\nTEXT: Real Madrid received more points than Barcelona.\nFOL: MorePoints(RealMadrid, Barcelona)\nTEXT: Neither Real Madrid nor Barcelona received more points from the games between them.\nFOL: -MorePointsInGameBetween(RealMadrid, Barcelona) & -MorePointsInGameBetween(Barcelona, RealMadrid)\nTEXT: Real Madrid ranks higher than Barcelona.\nFOL: HigherRank(RealMadrid, Barcelona)\n\nANSWER: True\n</EVALUATE>\n\n<PREMISES>\nAll professional athletes spend most of their time on sports.\nAll Olympic gold medal winners are professional athletes.\nNo full-time scientists spend the majority of their time on sports.\nAll Nobel physics laureates are full-time scientists.\nAmy spends the most time on sports, or Amy is an Olympic gold medal winner.\nIf Amy is not a Nobel physics laureate, then Amy is not an Olympic gold medal winner.\n</PREMISES>\n<CONCLUSION>\nIf Amy is not an Olympic gold medal winner, then Amy is a Nobel physics laureate.\n</CONCLUSION>\n<EVALUATE>\nTEXT: All professional athletes spend most of their time on sports.\nFOL: all x. (ProfessionalAthlete(x) -> SpendOn(x, MostOfTheirTime, Sports))\nTEXT: All Olympic gold medal winners are professional athletes.\nFOL: all x. (OlympicGoldMedalWinner(x) -> ProfessionalAthlete(x))\nTEXT: No full-time scientists spend the majority of their time on sports.\nFOL: all x. (FullTimeScientist(x) -> -SpendOn(x, MostOfTheirTime, Sports))\nTEXT: All Nobel physics laureates are full-time scientists.\nFOL: all x. (NobelPhysicsLaureate(x) -> FullTimeScientist(x))\nTEXT: Amy spends the most time on sports, or Amy is an Olympic gold medal winner.\nFOL: SpendOn(Amy, MostOfTheirTime, Sports) | OlympicGoldMedalWinner(Amy)\nTEXT: If Amy is not a Nobel physics laureate, then Amy is not an Olympic gold medal winner.\nFOL: -NobelPhysicsLaureate(Amy) -> -OlympicGoldMedalWinner(Amy)\nTEXT: If Amy is not an Olympic gold medal winner, then Amy is a Nobel physics laureate.\nFOL: -OlympicGoldMedalWinner(Amy) -> NobelLaureate(Amy)\n\nANSWER: False\n</EVALUATE>\n\n<PREMISES>\nIf a person pays their taxes, then they contribute to the country.\nEveryone who works for a government department pays a tax on their salary.\nEveryone in the army is an employee of a government department.\nEveryone convicted of murder goes to prison.\nEveryone who has been to prison has a criminal record.\nJames was either once convicted of murder, or spent time in prison.\nJames either has a criminal record, or pays his taxes.\n</PREMISES>\n<CONCLUSION>\nJames does not contribute to the country.\n</CONCLUSION>\n<EVALUATE>\nTEXT: If a person pays their taxes, then they contribute to the country.\nFOL: all x. (Taxpayer(x) -> ContributeTo(x, Country))\nTEXT: Everyone who works for a government department pays a tax on their salary.\nFOL: all x. (WorkFor(x, GovernmentAgency) -> Taxpayer(x))\nTEXT: Everyone in the army is an employee of a government department.\nFOL: all x. (ServesIn(x, TheArmy) -> WorkFor(x, GovernmentAgency))\nTEXT: Everyone convicted of murder goes to prison.\nFOL: all x. (SentencedForMurder(x) -> Imprisoned(x))\nTEXT: Everyone who has been to prison has a criminal record.\nFOL: all x. (Imprisoned((x) -> Has(x, CriminalRecord))\nTEXT: James was either once convicted of murder, or spent time in prison.\nFOL: ((SentencedForMurder(James) & -Imprisoned(James)) | (-SentencedForMurder(James) & Imprisoned(James)))\nTEXT: James either has a criminal record, or pays his taxes.\nFOL: ((Has(James, CriminalRecord) & -Taxpayer(James)) | (-Has(James, CriminalRecord) & Taxpayer(James)))\nTEXT: James does not contribute to the country.\nFOL: ContributeToCountry(James)\n\nANSWER: Uncertain\n</EVALUATE>\n\n<PREMISES>\nNo songs are visuals.\nAll folk songs are songs.\nAll videos are visuals.\nAll movies are videos.\nAll sci-fi movies are movies.\nInception is a sci-fi movie.\nMac is neither a folk song nor a sci-fi movie.\n</PREMISES>\n<CONCLUSION>\nInception is a folk song.\n</CONCLUSION>\n<EVALUATE>\nTEXT: No songs are visuals.\nFOL: all x. (Song(x) -> -Visual(x))\nTEXT: All folk songs are songs.\nFOL: all x. (FolkSong(x) -> Song(x))\nTEXT: All videos are visuals.\nFOL: all x. (Video(x) -> Visual(x))\nTEXT: All movies are videos.\nFOL: all x. (Movie(x) -> Video(x))\nTEXT: All sci-fi movies are movies.\nFOL: all x. (ScifiMovie(x) -> Movie(x))\nTEXT: Inception is a sci-fi movie.\nFOL: ScifiMovie(Inception)\nTEXT: Mac is neither a folk song nor a sci-fi movie.\nFOL: -FolkSong(Mac) & -ScifiMovie(Mac)\nTEXT: Inception is a folk song.\nFOL: FolkSong(Inception)\n\nANSWER: False\n</EVALUATE>\n\n<PREMISES>\nEvery chef can cook.\nSome people who aren’t chefs can cook.\nPeople who cook can make scrambled eggs and pasta.\nIf someone can make cookies and muffins, they are a baker.\nBakers who can also make scrambled eggs can make a good breakfast.\nLuke can make cookies, scrambled eggs, and muffins, but not pasta.\n</PREMISES>\n<CONCLUSION>\nLuke is a chef.\n</CONCLUSION>\n<EVALUATE>\nTEXT: Every chef can cook.\nFOL: all x. (Chef(x) -> Can(x, Cook))\nTEXT: Some people who aren’t chefs can cook.\nFOL: exists x. (-Chef(x) & Can(x, Cook))\nTEXT: People who cook can make scrambled eggs and pasta.\nFOL: all x. (Can(x, Cook) -> (CanMake(x, ScrambledEggs) & CanMake(x, Pasta)))\nTEXT: If someone can make cookies and muffins, they are a baker.\nFOL: all x. (CanMake(x, Cookies) & CanMake(x, Muffins) -> Baker(x))\nTEXT: Bakers who can also make scrambled eggs can make a good breakfast.\nFOL: all x. ((Baker(x) & CanMake(x, ScrambledEggs)) -> CanMake(x, GoodBreakfast))\nTEXT: Luke can make cookies, scrambled eggs, and muffins, but not pasta.\nFOL: CanMake(Luke, Cookies) & (CanMake(Luke, ScrambledEggs) & CanMake(Luke, Muffins) & -CanMake(Luke, Pasta)\nTEXT: Luke is a chef.\nFOL: MakeGoodBreakfast(Luke)\n\nANSWER: False\n</EVALUATE>\n\n<PREMISES>\nETS develops various standardized tests primarily in the United States for K-12 and higher education.\nETS administers international tests, including the TOEFL, TOEIC, GRE, and subject tests.\nMany of the assessments ETS develops are associated with entry to the US tertiary and quaternary education institutions.\nETS also develops K-12 statewide assessments used for accountability testing in many states.\n</PREMISES>\n<CONCLUSION>\nETS doesn't administer tests internationally.\n</CONCLUSION>\n<EVALUATE>\nTEXT: ETS develops various standardized tests primarily in the United States for K-12 and higher education.\nFOL: exists x. exists y. (Develop(eTS, x) & Develop(eTS, y) & StandardizedTest(x) & StandardizedTest(y) & In(x, UnitedState) & In(y, UnitedState) & For(x, kOneTwoAndHigherEducation) & For(y, kOneTwoAndHigherEducation))\nTEXT: ETS administers international tests, including the TOEFL, TOEIC, GRE, and subject tests.\nFOL: exists x. (Administer(eTS, x) & InternationalTest(x) & (TOEFL(x) | TOEIC(x) | GRE(x) | SubjectTest(x)))\nTEXT: Many of the assessments ETS develops are associated with entry to the US tertiary and quaternary education institutions.\nFOL: exists x. (Develop(eTS, x) & AssociatedWith(x, EntryToUSEducationInstitution))\nTEXT: ETS also develops K-12 statewide assessments used for accountability testing in many states.\nFOL: exists x. (Develop(eTS, x) & StateWideAssesment(x) & UsedFor(x, AccountabilityTesting))\nTEXT: ETS doesn't administer tests internationally.\nFOL: exists x. (Develops(Ets, x) & For(x, k-OneTwoandhighereducation)) & exists x. (Develops(Ets, x) & AssociatedWith(x, Entrytouseducationinstitutions))\n\nANSWER: False\n</EVALUATE>\n\n<PREMISES>\nDaveed Diggs is an actor and film producer.\nDaveed Diggs played two roles in the musical Hamilton on Broadway.\nOne of the actors from Hamilton won the best actor award.\nThe actor playing Thomas Jefferson won the best actor award.\nDaveed Diggs played Thomas Jefferson.\nMusicals on Broadway are not films.\n</PREMISES>\n<CONCLUSION>\nDaveed Diggs won the best actor award.\n</CONCLUSION>\n<EVALUATE>\nTEXT: Daveed Diggs is an actor and film producer.\nFOL: Actor(DaveedDiggs) & FilmProducer(DaveedDiggs)\nTEXT: Daveed Diggs played two roles in the musical Hamilton on Broadway.\nFOL: exists x. exists y.(PlaysIn(DaveedDiggs, x, Hamilton) & (-(x=y)) & PlaysIn(DaveedDiggs, y, Hamilton)) & OnBroadway(Hamilton) & Musical(Hamilton)\nTEXT: One of the actors from Hamilton won the best actor award.\nFOL: exists x. exists y.(Actor(x) & PlaysIn(x, y, Hamilton) & Wins(x, BestActorAward))\nTEXT: The actor playing Thomas Jefferson won the best actor award.\nFOL: exists x. (Actor(x) & PlaysIn(x, ThomasJefferson, Hamilton) & Wins(x, BestActorAward))\nTEXT: Daveed Diggs played Thomas Jefferson.\nFOL: Plays(DaveedDiggs, ThomasJefferson)\nTEXT: Musicals on Broadway are not films.\nFOL: all x. ((Musical(x) & OnBroadway(x)) -> -Film(x))\nTEXT: Daveed Diggs won the best actor award.\nFOL: exists x. (BRICS(x) & Speaks(x, Hindi))\n\nANSWER: True\n</EVALUATE>\n\n<PREMISES>\nParis is in the United States of America.\nThe United States of America is part of South America.\nSouth America is in the eastern hemisphere of the earth.\nParis is a highly developed city where noone lives.\nIf place A is in place B and place B is in place C, then place A is in place C.\n</PREMISES>\n<CONCLUSION>\nThe United States of America is not located in the eastern hemisphere of the earth.\n</CONCLUSION>\n<EVALUATE>", "raw_generations": ["Generation 1:\nTEXT: Paris is in the United States of America.\nFOL: In(Paris, UnitedStatesOfAmerica)\nTEXT: The United States of America is part of South America.\nFOL: PartOf(UnitedStatesOfAmerica, SouthAmerica)\nTEXT: South America is in the eastern hemisphere of the earth.\nFOL: In(SouthAmerica, EasternHemisphere)\nTEXT: Paris is a highly developed city where noone lives.\nFOL: HighlyDevelopedCity(Paris) & -LivesIn(Paris, x)\nTEXT: If place A is in place B and place B is in place C, then place A is in place C.\nFOL: all x. all y. all z. ((In(x, y) & In(y, z)) -> In(x, z))\nTEXT: The United States of America is not located in the eastern hemisphere of the earth.\nFOL: -In(UnitedStatesOfAmerica, EasternHemisphere)\n\nANSWER: False\nProcessed: False", "Generation 2:\nTEXT: Paris is in the United States of America.\nFOL: In(Paris, UnitedStatesOfAmerica)\nTEXT: The United States of America is part of South America.\nFOL: PartOf(UnitedStatesOfAmerica, SouthAmerica)\nTEXT: South America is in the eastern hemisphere of the earth.\nFOL: In(SouthAmerica, EasternHemisphere)\nTEXT: Paris is a highly developed city where noone lives.\nFOL: HighlyDeveloped(Paris) & -LivesIn(x, Paris)\nTEXT: If place A is in place B and place B is in place C, then place A is in place C.\nFOL: if (In(A, B) & In(B, C)) then In(A, C)\nTEXT: The United States of America is not located in the eastern hemisphere of the earth.\nFOL: -In(UnitedStatesOfAmerica, EasternHemisphere)\n\nANSWER: False\n\nIn the given premises, it is stated that Paris is in the United States of America, which is incorrect. Therefore, the conclusion that the United States of America is not located in the eastern hemisphere of the earth is false, as the premise itself is incorrect.\nProcessed: False", "Generation 3:\nTEXT: Paris is in the United States of America.\nFOL: In(Paris, UnitedStatesOfAmerica)\nTEXT: The United States of America is part of South America.\nFOL: PartOf(UnitedStatesOfAmerica, SouthAmerica)\nTEXT: South America is in the eastern hemisphere of the earth.\nFOL: In(SouthAmerica, EasternHemisphere)\nTEXT: Paris is a highly developed city where noone lives.\nFOL: HighlyDeveloped(Paris) & -LivesIn(Paris, anyone)\nTEXT: If place A is in place B and place B is in place C, then place A is in place C.\nFOL: if (In(A, B) & In(B, C)) then In(A, C)\nTEXT: The United States of America is not located in the eastern hemisphere of the earth.\nFOL: -In(UnitedStatesOfAmerica, EasternHemisphere)\n\nANSWER: True\nProcessed: True", "Generation 4:\nTEXT: Paris is in the United States of America.\nFOL: In(Paris, UnitedStatesOfAmerica)\nTEXT: The United States of America is part of South America.\nFOL: PartOf(UnitedStatesOfAmerica, SouthAmerica)\nTEXT: South America is in the eastern hemisphere of the earth.\nFOL: In(SouthAmerica, EasternHemisphere)\nTEXT: Paris is a highly developed city where no one lives.\nFOL: HighlyDeveloped(Paris) & -Lives(Paris)\nTEXT: If place A is in place B and place B is in place C, then place A is in place C.\nFOL: all x. all y. all z. ((In(x, y) & In(y, z)) -> In(x, z))\nTEXT: The United States of America is not located in the eastern hemisphere of the earth.\nFOL: -In(UnitedStatesOfAmerica, EasternHemisphere)\n\nANSWER: False\n\nIn this case, the premises state that Paris is in the United States of America, which is part of South America, and South America is in the eastern hemisphere. However, the United States of America is actually located in the western hemisphere, not the eastern hemisphere, which contradicts the conclusion. Therefore, the conclusion is false.\nProcessed: False", "Generation 5:\nTEXT: Paris is in the United States of America.\nFOL: In(Paris, UnitedStatesOfAmerica)\nTEXT: The United States of America is part of South America.\nFOL: PartOf(UnitedStatesOfAmerica, SouthAmerica)\nTEXT: South America is in the eastern hemisphere of the earth.\nFOL: In(SouthAmerica, EasternHemisphere)\nTEXT: Paris is a highly developed city where no one lives.\nFOL: HighlyDevelopedCity(Paris) & -LivesIn(x, Paris)\nTEXT: If place A is in place B and place B is in place C, then place A is in place C.\nFOL: all x. all y. all z. ((In(x, y) & In(y, z)) -> In(x, z))\nTEXT: The United States of America is not located in the eastern hemisphere of the earth.\nFOL: -In(UnitedStatesOfAmerica, EasternHemisphere)\n\nANSWER: False (The conclusion is false as per the given premises)\nProcessed: False", "Generation 6:\nTEXT: Paris is in the United States of America.\nFOL: In(Paris, UnitedStatesOfAmerica)\nTEXT: The United States of America is part of South America.\nFOL: PartOf(UnitedStatesOfAmerica, SouthAmerica)\nTEXT: South America is in the eastern hemisphere of the earth.\nFOL: In(SouthAmerica, EasternHemisphere)\nTEXT: Paris is a highly developed city where noone lives.\nFOL: HighlyDeveloped(Paris) & -LivesIn(Paris, x)\nTEXT: If place A is in place B and place B is in place C, then place A is in place C.\nFOL: all x. all y. all z. ((In(x, y) & In(y, z)) -> In(x, z))\nTEXT: The United States of America is not located in the eastern hemisphere of the earth.\nFOL: -In(UnitedStatesOfAmerica, EasternHemisphere)\n\nANSWER: False\nProcessed: False", "Generation 7:\nTEXT: Paris is in the United States of America.\nFOL: In(Paris, UnitedStatesOfAmerica)\nTEXT: The United States of America is part of South America.\nFOL: PartOf(UnitedStatesOfAmerica, SouthAmerica)\nTEXT: South America is in the eastern hemisphere of the earth.\nFOL: In(SouthAmerica, EasternHemisphere)\nTEXT: Paris is a highly developed city where noone lives.\nFOL: HighlyDevelopedCity(Paris) & -Populated(Paris)\nTEXT: If place A is in place B and place B is in place C, then place A is in place C.\nFOL: all x. all y. all z. ((In(x, y) & In(y, z)) -> In(x, z))\nTEXT: The United States of America is not located in the eastern hemisphere of the earth.\nFOL: -In(UnitedStatesOfAmerica, EasternHemisphere)\n\nANSWER: False\nProcessed: False", "Generation 8:\nTEXT: Paris is in the United States of America.\nFOL: In(Paris, UnitedStatesOfAmerica)\nTEXT: The United States of America is part of South America.\nFOL: PartOf(UnitedStatesOfAmerica, SouthAmerica)\nTEXT: South America is in the eastern hemisphere of the earth.\nFOL: In(SouthAmerica, EasternHemisphere)\nTEXT: Paris is a highly developed city where noone lives.\nFOL: HighlyDevelopedCity(Paris) & -LivesIn(x, Paris)\nTEXT: If place A is in place B and place B is in place C, then place A is in place C.\nFOL: all x. all y. all z. (In(x, y) & In(y, z) -> In(x, z))\nTEXT: The United States of America is not located in the eastern hemisphere of the earth.\nFOL: -In(UnitedStatesOfAmerica, EasternHemisphere)\n\nANSWER: False\n\nThis is because the premises state that Paris is in the United States of America, which is a part of South America, and South America is in the eastern hemisphere. Therefore, the United States of America is located in the eastern hemisphere, which contradicts the conclusion.\nProcessed: False", "Generation 9:\nTEXT: Paris is in the United States of America.\nFOL: In(Paris, UnitedStatesOfAmerica)\nTEXT: The United States of America is part of South America.\nFOL: PartOf(UnitedStatesOfAmerica, SouthAmerica)\nTEXT: South America is in the eastern hemisphere of the earth.\nFOL: In(SouthAmerica, EasternHemisphere)\nTEXT: Paris is a highly developed city where no one lives.\nFOL: HighlyDeveloped(Paris) & -LivesIn(x, Paris)\nTEXT: If place A is in place B and place B is in place C, then place A is in place C.\nFOL: all x. all y. all z. ((In(x, y) & In(y, z)) -> In(x, z))\nTEXT: The United States of America is not located in the eastern hemisphere of the earth.\nFOL: -In(UnitedStatesOfAmerica, EasternHemisphere)\n\nANSWER: False\nProcessed: False", "Generation 10:\nTEXT: Paris is in the United States of America.\nFOL: In(Paris, UnitedStatesOfAmerica)\nTEXT: The United States of America is part of South America.\nFOL: PartOf(UnitedStatesOfAmerica, SouthAmerica)\nTEXT: South America is in the eastern hemisphere of the earth.\nFOL: In(SouthAmerica, EasternHemisphere)\nTEXT: Paris is a highly developed city where no one lives.\nFOL: HighlyDevelopedCity(Paris) & -LivesIn(x, Paris)\nTEXT: If place A is in place B and place B is in place C, then place A is in place C.\nFOL: all x. all y. all z. ((In(x, y) & In(y, z)) -> In(x, z))\nTEXT: The United States of America is not located in the eastern hemisphere of the earth.\nFOL: -In(UnitedStatesOfAmerica, EasternHemisphere)\n\nANSWER: False\n\nNote: The premises are incorrect. Paris is not in the United States of America, but in France, which is part of Europe, not South America. The United States of America is not part of South America. Therefore, the conclusion is false.\nProcessed: False\n\nReference: False\n========================================"], "answers": ["False", "False", "True", "False", "False", "False", "False", "False", "False", "False"]}
{"idx": 65, "prompt": "The following is a first-order logic (FOL) problem.\nThe problem is to determine whether the conclusion follows from the premises.\nThe premises are given in the form of a set of first-order logic sentences.\nThe conclusion is given in the form of a single first-order logic sentence.\nThe task is to translate each of the premises and conclusions into FOL expressions.and then to evaluate the conclusion as ANSWER: True, ANSWER: False, or ANSWER: Uncertain given the premises. The output should follow format TEXT: \nFOL: \nTEXT: \nFOL:... ANSWER: \n\n\n<PREMISES>\nAll biodegradable things are environment-friendly.\nAll woodware is biodegradable.\nAll paper is woodware.\nNothing is a good thing and also a bad thing.\nAll environment-friendly things are good.\nA worksheet is either paper or environment-friendly.\n</PREMISES>\n<CONCLUSION>\nA worksheet is not biodegradable.\n</CONCLUSION>\n<EVALUATE>\nTEXT: All biodegradable things are environment-friendly.\nFOL: all x. (Biodegradable(x) -> EnvironmentFriendly(x))\nTEXT: All woodware is biodegradable.\nFOL: all x. (Woodware(x) -> Biodegradable(x))\nTEXT: All paper is woodware.\nFOL: all x. (Paper(x) -> Woodware(x))\nTEXT: Nothing is a good thing and also a bad thing.\nFOL: -(exists x. (Good(x) & Bad(x)))\nTEXT: All environment-friendly things are good.\nFOL: all x. (EnvironmentFriendly(x) -> Good(x))\nTEXT: A worksheet is either paper or environment-friendly.\nFOL: ((Paper(Worksheet) & -EnvironmentFriendly(Worksheet)) | (-Paper(Worksheet) & EnvironmentFriendly(Worksheet)))\nTEXT: A worksheet is not biodegradable.\nFOL: -Dispensable(Worksheet)\n\nANSWER: Uncertain\n</EVALUATE>\n\n<PREMISES>\nA La Liga soccer team ranks higher than another La Liga soccer team if it receives more points.\nIf there are two La Liga soccer teams and neither has more points than the other, then the team which receives more points from the games between the two teams ranks higher.\nReal Madrid and Barcelona are both La Liga soccer teams.\nReal Madrid received more points than Barcelona.\nNeither Real Madrid nor Barcelona received more points from the games between them.\n</PREMISES>\n<CONCLUSION>\nReal Madrid ranks higher than Barcelona.\n</CONCLUSION>\n<EVALUATE>\nTEXT: A La Liga soccer team ranks higher than another La Liga soccer team if it receives more points.\nFOL: all x. all y. (LaLigaSoccerTeam(x) & LaLigaSoccerTeam(y) & MorePoints(x, y) -> RankHigherThan(x, y))\nTEXT: If there are two La Liga soccer teams and neither has more points than the other, then the team which receives more points from the games between the two teams ranks higher.\nFOL: all x. all y. (LaLigaSoccerTeam(x) & LaLigaSoccerTeam(y) & -MorePoints(x, y) & -MorePoints(y, x) & MorePointsInGameBetween(x, y) ->  RankHigherThan(x, y))\nTEXT: Real Madrid and Barcelona are both La Liga soccer teams.\nFOL: LaLigaSoccerTeam(RealMadrid) & LaLigaSoccerTeam(Barcelona)\nTEXT: Real Madrid received more points than Barcelona.\nFOL: MorePoints(RealMadrid, Barcelona)\nTEXT: Neither Real Madrid nor Barcelona received more points from the games between them.\nFOL: -MorePointsInGameBetween(RealMadrid, Barcelona) & -MorePointsInGameBetween(Barcelona, RealMadrid)\nTEXT: Real Madrid ranks higher than Barcelona.\nFOL: HigherRank(RealMadrid, Barcelona)\n\nANSWER: True\n</EVALUATE>\n\n<PREMISES>\nAll professional athletes spend most of their time on sports.\nAll Olympic gold medal winners are professional athletes.\nNo full-time scientists spend the majority of their time on sports.\nAll Nobel physics laureates are full-time scientists.\nAmy spends the most time on sports, or Amy is an Olympic gold medal winner.\nIf Amy is not a Nobel physics laureate, then Amy is not an Olympic gold medal winner.\n</PREMISES>\n<CONCLUSION>\nIf Amy is not an Olympic gold medal winner, then Amy is a Nobel physics laureate.\n</CONCLUSION>\n<EVALUATE>\nTEXT: All professional athletes spend most of their time on sports.\nFOL: all x. (ProfessionalAthlete(x) -> SpendOn(x, MostOfTheirTime, Sports))\nTEXT: All Olympic gold medal winners are professional athletes.\nFOL: all x. (OlympicGoldMedalWinner(x) -> ProfessionalAthlete(x))\nTEXT: No full-time scientists spend the majority of their time on sports.\nFOL: all x. (FullTimeScientist(x) -> -SpendOn(x, MostOfTheirTime, Sports))\nTEXT: All Nobel physics laureates are full-time scientists.\nFOL: all x. (NobelPhysicsLaureate(x) -> FullTimeScientist(x))\nTEXT: Amy spends the most time on sports, or Amy is an Olympic gold medal winner.\nFOL: SpendOn(Amy, MostOfTheirTime, Sports) | OlympicGoldMedalWinner(Amy)\nTEXT: If Amy is not a Nobel physics laureate, then Amy is not an Olympic gold medal winner.\nFOL: -NobelPhysicsLaureate(Amy) -> -OlympicGoldMedalWinner(Amy)\nTEXT: If Amy is not an Olympic gold medal winner, then Amy is a Nobel physics laureate.\nFOL: -OlympicGoldMedalWinner(Amy) -> NobelLaureate(Amy)\n\nANSWER: False\n</EVALUATE>\n\n<PREMISES>\nIf a person pays their taxes, then they contribute to the country.\nEveryone who works for a government department pays a tax on their salary.\nEveryone in the army is an employee of a government department.\nEveryone convicted of murder goes to prison.\nEveryone who has been to prison has a criminal record.\nJames was either once convicted of murder, or spent time in prison.\nJames either has a criminal record, or pays his taxes.\n</PREMISES>\n<CONCLUSION>\nJames does not contribute to the country.\n</CONCLUSION>\n<EVALUATE>\nTEXT: If a person pays their taxes, then they contribute to the country.\nFOL: all x. (Taxpayer(x) -> ContributeTo(x, Country))\nTEXT: Everyone who works for a government department pays a tax on their salary.\nFOL: all x. (WorkFor(x, GovernmentAgency) -> Taxpayer(x))\nTEXT: Everyone in the army is an employee of a government department.\nFOL: all x. (ServesIn(x, TheArmy) -> WorkFor(x, GovernmentAgency))\nTEXT: Everyone convicted of murder goes to prison.\nFOL: all x. (SentencedForMurder(x) -> Imprisoned(x))\nTEXT: Everyone who has been to prison has a criminal record.\nFOL: all x. (Imprisoned((x) -> Has(x, CriminalRecord))\nTEXT: James was either once convicted of murder, or spent time in prison.\nFOL: ((SentencedForMurder(James) & -Imprisoned(James)) | (-SentencedForMurder(James) & Imprisoned(James)))\nTEXT: James either has a criminal record, or pays his taxes.\nFOL: ((Has(James, CriminalRecord) & -Taxpayer(James)) | (-Has(James, CriminalRecord) & Taxpayer(James)))\nTEXT: James does not contribute to the country.\nFOL: ContributeToCountry(James)\n\nANSWER: Uncertain\n</EVALUATE>\n\n<PREMISES>\nNo songs are visuals.\nAll folk songs are songs.\nAll videos are visuals.\nAll movies are videos.\nAll sci-fi movies are movies.\nInception is a sci-fi movie.\nMac is neither a folk song nor a sci-fi movie.\n</PREMISES>\n<CONCLUSION>\nInception is a folk song.\n</CONCLUSION>\n<EVALUATE>\nTEXT: No songs are visuals.\nFOL: all x. (Song(x) -> -Visual(x))\nTEXT: All folk songs are songs.\nFOL: all x. (FolkSong(x) -> Song(x))\nTEXT: All videos are visuals.\nFOL: all x. (Video(x) -> Visual(x))\nTEXT: All movies are videos.\nFOL: all x. (Movie(x) -> Video(x))\nTEXT: All sci-fi movies are movies.\nFOL: all x. (ScifiMovie(x) -> Movie(x))\nTEXT: Inception is a sci-fi movie.\nFOL: ScifiMovie(Inception)\nTEXT: Mac is neither a folk song nor a sci-fi movie.\nFOL: -FolkSong(Mac) & -ScifiMovie(Mac)\nTEXT: Inception is a folk song.\nFOL: FolkSong(Inception)\n\nANSWER: False\n</EVALUATE>\n\n<PREMISES>\nEvery chef can cook.\nSome people who aren’t chefs can cook.\nPeople who cook can make scrambled eggs and pasta.\nIf someone can make cookies and muffins, they are a baker.\nBakers who can also make scrambled eggs can make a good breakfast.\nLuke can make cookies, scrambled eggs, and muffins, but not pasta.\n</PREMISES>\n<CONCLUSION>\nLuke is a chef.\n</CONCLUSION>\n<EVALUATE>\nTEXT: Every chef can cook.\nFOL: all x. (Chef(x) -> Can(x, Cook))\nTEXT: Some people who aren’t chefs can cook.\nFOL: exists x. (-Chef(x) & Can(x, Cook))\nTEXT: People who cook can make scrambled eggs and pasta.\nFOL: all x. (Can(x, Cook) -> (CanMake(x, ScrambledEggs) & CanMake(x, Pasta)))\nTEXT: If someone can make cookies and muffins, they are a baker.\nFOL: all x. (CanMake(x, Cookies) & CanMake(x, Muffins) -> Baker(x))\nTEXT: Bakers who can also make scrambled eggs can make a good breakfast.\nFOL: all x. ((Baker(x) & CanMake(x, ScrambledEggs)) -> CanMake(x, GoodBreakfast))\nTEXT: Luke can make cookies, scrambled eggs, and muffins, but not pasta.\nFOL: CanMake(Luke, Cookies) & (CanMake(Luke, ScrambledEggs) & CanMake(Luke, Muffins) & -CanMake(Luke, Pasta)\nTEXT: Luke is a chef.\nFOL: MakeGoodBreakfast(Luke)\n\nANSWER: False\n</EVALUATE>\n\n<PREMISES>\nETS develops various standardized tests primarily in the United States for K-12 and higher education.\nETS administers international tests, including the TOEFL, TOEIC, GRE, and subject tests.\nMany of the assessments ETS develops are associated with entry to the US tertiary and quaternary education institutions.\nETS also develops K-12 statewide assessments used for accountability testing in many states.\n</PREMISES>\n<CONCLUSION>\nETS doesn't administer tests internationally.\n</CONCLUSION>\n<EVALUATE>\nTEXT: ETS develops various standardized tests primarily in the United States for K-12 and higher education.\nFOL: exists x. exists y. (Develop(eTS, x) & Develop(eTS, y) & StandardizedTest(x) & StandardizedTest(y) & In(x, UnitedState) & In(y, UnitedState) & For(x, kOneTwoAndHigherEducation) & For(y, kOneTwoAndHigherEducation))\nTEXT: ETS administers international tests, including the TOEFL, TOEIC, GRE, and subject tests.\nFOL: exists x. (Administer(eTS, x) & InternationalTest(x) & (TOEFL(x) | TOEIC(x) | GRE(x) | SubjectTest(x)))\nTEXT: Many of the assessments ETS develops are associated with entry to the US tertiary and quaternary education institutions.\nFOL: exists x. (Develop(eTS, x) & AssociatedWith(x, EntryToUSEducationInstitution))\nTEXT: ETS also develops K-12 statewide assessments used for accountability testing in many states.\nFOL: exists x. (Develop(eTS, x) & StateWideAssesment(x) & UsedFor(x, AccountabilityTesting))\nTEXT: ETS doesn't administer tests internationally.\nFOL: exists x. (Develops(Ets, x) & For(x, k-OneTwoandhighereducation)) & exists x. (Develops(Ets, x) & AssociatedWith(x, Entrytouseducationinstitutions))\n\nANSWER: False\n</EVALUATE>\n\n<PREMISES>\nDaveed Diggs is an actor and film producer.\nDaveed Diggs played two roles in the musical Hamilton on Broadway.\nOne of the actors from Hamilton won the best actor award.\nThe actor playing Thomas Jefferson won the best actor award.\nDaveed Diggs played Thomas Jefferson.\nMusicals on Broadway are not films.\n</PREMISES>\n<CONCLUSION>\nDaveed Diggs won the best actor award.\n</CONCLUSION>\n<EVALUATE>\nTEXT: Daveed Diggs is an actor and film producer.\nFOL: Actor(DaveedDiggs) & FilmProducer(DaveedDiggs)\nTEXT: Daveed Diggs played two roles in the musical Hamilton on Broadway.\nFOL: exists x. exists y.(PlaysIn(DaveedDiggs, x, Hamilton) & (-(x=y)) & PlaysIn(DaveedDiggs, y, Hamilton)) & OnBroadway(Hamilton) & Musical(Hamilton)\nTEXT: One of the actors from Hamilton won the best actor award.\nFOL: exists x. exists y.(Actor(x) & PlaysIn(x, y, Hamilton) & Wins(x, BestActorAward))\nTEXT: The actor playing Thomas Jefferson won the best actor award.\nFOL: exists x. (Actor(x) & PlaysIn(x, ThomasJefferson, Hamilton) & Wins(x, BestActorAward))\nTEXT: Daveed Diggs played Thomas Jefferson.\nFOL: Plays(DaveedDiggs, ThomasJefferson)\nTEXT: Musicals on Broadway are not films.\nFOL: all x. ((Musical(x) & OnBroadway(x)) -> -Film(x))\nTEXT: Daveed Diggs won the best actor award.\nFOL: exists x. (BRICS(x) & Speaks(x, Hindi))\n\nANSWER: True\n</EVALUATE>\n\n<PREMISES>\nThe only types of birds that eat eggs are either platypuses or echidnas.\nPlatypuses are not animals.\nEchidnas are not animals.\nNo birds are vertebrates.\nAll plants are either vertebrates or vertebrates.\nBirds are plants.\nAnimals are birds.\nGrebes eat eggs.\nGrebes are not platypuses and also not echidnas.\n</PREMISES>\n<CONCLUSION>\nGrebes are not birds.\n</CONCLUSION>\n<EVALUATE>", "raw_generations": ["Generation 1:\nTEXT: The only types of birds that eat eggs are either platypuses or echidnas.\nFOL: all x. (Bird(x) & EatsEggs(x) -> (Platypus(x) v Echidna(x)))\nTEXT: Platypuses are not animals.\nFOL: -Animal(Platypus)\nTEXT: Echidnas are not animals.\nFOL: -Animal(Echidna)\nTEXT: No birds are vertebrates.\nFOL: -all x. Bird(x) -> Vertebrate(x)\nTEXT: All plants are either vertebrates or animals.\nFOL: all x. Plant(x) -> (Vertebrate(x) v Animal(x))\nTEXT: Birds are plants.\nFOL: Bird(x) -> Plant(x)\nTEXT: Animals are birds.\nFOL: Animal(x) -> Bird(x)\nTEXT: Grebes eat eggs.\nFOL: EatsEggs(Grebe)\nTEXT: Grebes are not platypuses and also not echidnas.\nFOL: -(Platypus(Grebe) v Echidna(Grebe))\nTEXT: Grebes are not birds.\nFOL: -Bird(Grebe)\n\nANSWER: True\nProcessed: True", "Generation 2:\nTEXT: The only types of birds that eat eggs are either platypuses or echidnas.\nFOL: all x. (Bird(x) & Eats(x, Eggs) -> (Platypus(x) v Echidna(x)))\nTEXT: Platypuses are not animals.\nFOL: -Animal(Platypus)\nTEXT: Echidnas are not animals.\nFOL: -Animal(Echidna)\nTEXT: No birds are vertebrates.\nFOL: -forall x. Bird(x) -> Vertebrate(x)\nTEXT: All plants are either vertebrates or vertebrates.\nFOL: all x. (Plant(x) -> (Vertebrate(x) v Vertebrate(x)))\nTEXT: Birds are plants.\nFOL: forall x. Bird(x) -> Plant(x)\nTEXT: Animals are birds.\nFOL: Animal(y) -> Bird(y)\nTEXT: Grebes eat eggs.\nFOL: Eats(Grebe, Eggs)\nTEXT: Grebes are not platypuses and also not echidnas.\nFOL: -(Platypus(Grebe) v Echidna(Grebe))\nTEXT: Grebes are not birds.\nFOL: -Bird(Grebe)\n\nANSWER: True\nProcessed: True", "Generation 3:\nTEXT: The only types of birds that eat eggs are either platypuses or echidnas.\nFOL: all x. (Bird(x) & Eats(x, Egg) -> (Platypus(x) v Echidna(x)))\nTEXT: Platypuses are not animals.\nFOL: -Animal(Platypus)\nTEXT: Echidnas are not animals.\nFOL: -Animal(Echidna)\nTEXT: No birds are vertebrates.\nFOL: -forall x. (Bird(x) -> Vertebrate(x))\nTEXT: All plants are either vertebrates or animals.\nFOL: forall x. (Plant(x) -> (Vertebrate(x) v Animal(x)))\nTEXT: Birds are plants.\nFOL: Bird(x) -> Plant(x)\nTEXT: Animals are birds.\nFOL: Animal(x) -> Bird(x)\nTEXT: Grebes eat eggs.\nFOL: Eats(Grebe, Egg)\nTEXT: Grebes are not platypuses and also not echidnas.\nFOL: -(Platypus(Grebe) v Echidna(Grebe))\nTEXT: Grebes are not birds.\nFOL: -Bird(Grebe)\n\nANSWER: True\nProcessed: True", "Generation 4:\nTEXT: The only types of birds that eat eggs are either platypuses or echidnas.\nFOL: all x. (Bird(x) & Eats(x, Egg) -> (Platypus(x) v Echidna(x)))\nTEXT: Platypuses are not animals.\nFOL: -Animal(Platypus)\nTEXT: Echidnas are not animals.\nFOL: -Animal(Echidna)\nTEXT: No birds are vertebrates.\nFOL: -(exists x. Bird(x) & Vertebrate(x))\nTEXT: All plants are either vertebrates or animals.\nFOL: all x. Plant(x) -> (Vertebrate(x) v Animal(x))\nTEXT: Birds are plants.\nFOL: Bird(x) -> Plant(x)\nTEXT: Animals are birds.\nFOL: Animal(x) -> Bird(x)\nTEXT: Grebes eat eggs.\nFOL: Eats(Grebe, Egg)\nTEXT: Grebes are not platypuses and also not echidnas.\nFOL: -(Platypus(Grebe) v Echidna(Grebe))\nTEXT: Grebes are not birds.\nFOL: -Bird(Grebe)\n\nANSWER: True\nProcessed: True", "Generation 5:\nTEXT: The only types of birds that eat eggs are either platypuses or echidnas.\nFOL: all x. (Bird(x) & EatsEggs(x) -> (Platypus(x) v Echidna(x)))\nTEXT: Platypuses are not animals.\nFOL: -Animal(Platypus)\nTEXT: Echidnas are not animals.\nFOL: -Animal(Echidna)\nTEXT: No birds are vertebrates.\nFOL: -all x. (Bird(x) -> Vertebrate(x))\nTEXT: All plants are either vertebrates or vertebrates.\nFOL: all x. (Plant(x) -> (Vertebrate(x) v Vertebrate(x)))\nTEXT: Birds are plants.\nFOL: Bird(x) -> Plant(x)\nTEXT: Animals are birds.\nFOL: Animal(x) -> Bird(x)\nTEXT: Grebes eat eggs.\nFOL: Grebe(x) -> EatsEggs(x)\nTEXT: Grebes are not platypuses and also not echidnas.\nFOL: -(Grebe(x) & Platypus(x)) & -(Grebe(x) & Echidna(x))\nTEXT: Grebes are not birds.\nFOL: -Bird(Grebe)\n\nANSWER: True\nProcessed: True", "Generation 6:\nTEXT: The only types of birds that eat eggs are either platypuses or echidnas.\nFOL: all x. (Bird(x) & Eats(x, Egg) -> (Platypus(x) v Echidna(x)))\nTEXT: Platypuses are not animals.\nFOL: -Animal(Platypus)\nTEXT: Echidnas are not animals.\nFOL: -Animal(Echidna)\nTEXT: No birds are vertebrates.\nFOL: -all x. (Bird(x) -> Vertebrate(x))\nTEXT: All plants are either vertebrates or not vertebrates.\nFOL: all x. (Plant(x) -> (Vertebrate(x) v -Vertebrate(x)))\nTEXT: Birds are plants.\nFOL: Plant(Bird)\nTEXT: Animals are birds.\nFOL: Animal(Bird)\nTEXT: Grebes eat eggs.\nFOL: Eats(Grebe, Egg)\nTEXT: Grebes are not platypuses and also not echidnas.\nFOL: -(Platypus(Grebe) v Echidna(Grebe))\nTEXT: Grebes are not birds.\nFOL: -Bird(Grebe)\n\nANSWER: True\nProcessed: True", "Generation 7:\nTEXT: The only types of birds that eat eggs are either platypuses or echidnas.\nFOL: all x. (Bird(x) & EatsEggs(x) -> (Platypus(x) v Echidna(x)))\nTEXT: Platypuses are not animals.\nFOL: all x. -Animal(Platypus(x))\nTEXT: Echidnas are not animals.\nFOL: all x. -Animal(Echidna(x))\nTEXT: No birds are vertebrates.\nFOL: all x. -Vertebrate(Bird(x))\nTEXT: All plants are either vertebrates or not vertebrates.\nFOL: all x. (Plant(x) -> (Vertebrate(x) v -Vertebrate(x)))\nTEXT: Birds are plants.\nFOL: all x. Bird(x) -> Plant(x)\nTEXT: Animals are birds.\nFOL: all x. Animal(x) -> Bird(x)\nTEXT: Grebes eat eggs.\nFOL: EatsEggs(Grebe)\nTEXT: Grebes are not platypuses and also not echidnas.\nFOL: all x. (-Platypus(x) & -Echidna(x))\nTEXT: Grebes are not birds.\nFOL: -Bird(Grebe)\n\nANSWER: True\nProcessed: True", "Generation 8:\nTEXT: The only types of birds that eat eggs are either platypuses or echidnas.\nFOL: all x. (BirdEatingEggs(x) -> (Platypus(x) | Echidna(x)))\nTEXT: Platypuses are not animals.\nFOL: -Animal(Platypus)\nTEXT: Echidnas are not animals.\nFOL: -Animal(Echidna)\nTEXT: No birds are vertebrates.\nFOL: -all x. (Bird(x) -> Vertebrate(x))\nTEXT: All plants are either vertebrates or animals.\nFOL: all x. (Plant(x) -> (Vertebrate(x) | Animal(x)))\nTEXT: Birds are plants.\nFOL: all x. (Bird(x) -> Plant(x))\nTEXT: Animals are birds.\nFOL: all x. (Animal(x) -> Bird(x))\nTEXT: Grebes eat eggs.\nFOL: GrebeEatsEggs\nTEXT: Grebes are not platypuses and also not echidnas.\nFOL: -(Grebe(Platypus) & -Grebe(Echidna))\nTEXT: Grebes are not birds.\nFOL: -Bird(Grebe)\n\nANSWER: True\nProcessed: True", "Generation 9:\nTEXT: The only types of birds that eat eggs are either platypuses or echidnas.\nFOL: all x. (Bird(x) & Eats(x, Egg) -> (Platypus(x) v Echidna(x)))\nTEXT: Platypuses are not animals.\nFOL: all x. -Animal(Platypus(x))\nTEXT: Echidnas are not animals.\nFOL: all x. -Animal(Echidna(x))\nTEXT: No birds are vertebrates.\nFOL: all x. -Vertebrate(Bird(x))\nTEXT: All plants are either vertebrates or animals.\nFOL: all x. (Plant(x) -> (Vertebrate(x) v Animal(x)))\nTEXT: Birds are plants.\nFOL: Plant(Bird)\nTEXT: Animals are birds.\nFOL: all x. Animal(x) -> Bird(x)\nTEXT: Grebes eat eggs.\nFOL: Eats(Grebe, Egg)\nTEXT: Grebes are not platypuses and also not echidnas.\nFOL: -(Platypus(Grebe) v Echidna(Grebe))\nTEXT: Grebes are not birds.\nFOL: -Bird(Grebe)\n\nANSWER: True\nProcessed: True", "Generation 10:\nTEXT: The only types of birds that eat eggs are either platypuses or echidnas.\nFOL: all x. (Bird(x) & Eats(x, Eggs) -> (Platypus(x) v Echidna(x)))\nTEXT: Platypuses are not animals.\nFOL: -Animal(Platypus)\nTEXT: Echidnas are not animals.\nFOL: -Animal(Echidna)\nTEXT: No birds are vertebrates.\nFOL: -all x. (Bird(x) -> Vertebrate(x))\nTEXT: All plants are either vertebrates or animals.\nFOL: all x. (Plant(x) -> (Vertebrate(x) v Animal(x)))\nTEXT: Birds are plants.\nFOL: Bird(x) -> Plant(x)\nTEXT: Animals are birds.\nFOL: Animal(x) -> Bird(x)\nTEXT: Grebes eat eggs.\nFOL: Grebe(x) -> Eats(x, Eggs)\nTEXT: Grebes are not platypuses and also not echidnas.\nFOL: -(Grebe(x) & Platypus(x)) & -(Grebe(x) & Echidna(x))\nTEXT: Grebes are not birds.\nFOL: -Grebe(x) & Bird(x)\n\nANSWER: True\nProcessed: True\n\nReference: True\n========================================"], "answers": ["True", "True", "True", "True", "True", "True", "True", "True", "True", "True"]}
{"idx": 66, "prompt": "The following is a first-order logic (FOL) problem.\nThe problem is to determine whether the conclusion follows from the premises.\nThe premises are given in the form of a set of first-order logic sentences.\nThe conclusion is given in the form of a single first-order logic sentence.\nThe task is to translate each of the premises and conclusions into FOL expressions.and then to evaluate the conclusion as ANSWER: True, ANSWER: False, or ANSWER: Uncertain given the premises. The output should follow format TEXT: \nFOL: \nTEXT: \nFOL:... ANSWER: \n\n\n<PREMISES>\nAll biodegradable things are environment-friendly.\nAll woodware is biodegradable.\nAll paper is woodware.\nNothing is a good thing and also a bad thing.\nAll environment-friendly things are good.\nA worksheet is either paper or environment-friendly.\n</PREMISES>\n<CONCLUSION>\nA worksheet is not biodegradable.\n</CONCLUSION>\n<EVALUATE>\nTEXT: All biodegradable things are environment-friendly.\nFOL: all x. (Biodegradable(x) -> EnvironmentFriendly(x))\nTEXT: All woodware is biodegradable.\nFOL: all x. (Woodware(x) -> Biodegradable(x))\nTEXT: All paper is woodware.\nFOL: all x. (Paper(x) -> Woodware(x))\nTEXT: Nothing is a good thing and also a bad thing.\nFOL: -(exists x. (Good(x) & Bad(x)))\nTEXT: All environment-friendly things are good.\nFOL: all x. (EnvironmentFriendly(x) -> Good(x))\nTEXT: A worksheet is either paper or environment-friendly.\nFOL: ((Paper(Worksheet) & -EnvironmentFriendly(Worksheet)) | (-Paper(Worksheet) & EnvironmentFriendly(Worksheet)))\nTEXT: A worksheet is not biodegradable.\nFOL: -Dispensable(Worksheet)\n\nANSWER: Uncertain\n</EVALUATE>\n\n<PREMISES>\nA La Liga soccer team ranks higher than another La Liga soccer team if it receives more points.\nIf there are two La Liga soccer teams and neither has more points than the other, then the team which receives more points from the games between the two teams ranks higher.\nReal Madrid and Barcelona are both La Liga soccer teams.\nReal Madrid received more points than Barcelona.\nNeither Real Madrid nor Barcelona received more points from the games between them.\n</PREMISES>\n<CONCLUSION>\nReal Madrid ranks higher than Barcelona.\n</CONCLUSION>\n<EVALUATE>\nTEXT: A La Liga soccer team ranks higher than another La Liga soccer team if it receives more points.\nFOL: all x. all y. (LaLigaSoccerTeam(x) & LaLigaSoccerTeam(y) & MorePoints(x, y) -> RankHigherThan(x, y))\nTEXT: If there are two La Liga soccer teams and neither has more points than the other, then the team which receives more points from the games between the two teams ranks higher.\nFOL: all x. all y. (LaLigaSoccerTeam(x) & LaLigaSoccerTeam(y) & -MorePoints(x, y) & -MorePoints(y, x) & MorePointsInGameBetween(x, y) ->  RankHigherThan(x, y))\nTEXT: Real Madrid and Barcelona are both La Liga soccer teams.\nFOL: LaLigaSoccerTeam(RealMadrid) & LaLigaSoccerTeam(Barcelona)\nTEXT: Real Madrid received more points than Barcelona.\nFOL: MorePoints(RealMadrid, Barcelona)\nTEXT: Neither Real Madrid nor Barcelona received more points from the games between them.\nFOL: -MorePointsInGameBetween(RealMadrid, Barcelona) & -MorePointsInGameBetween(Barcelona, RealMadrid)\nTEXT: Real Madrid ranks higher than Barcelona.\nFOL: HigherRank(RealMadrid, Barcelona)\n\nANSWER: True\n</EVALUATE>\n\n<PREMISES>\nAll professional athletes spend most of their time on sports.\nAll Olympic gold medal winners are professional athletes.\nNo full-time scientists spend the majority of their time on sports.\nAll Nobel physics laureates are full-time scientists.\nAmy spends the most time on sports, or Amy is an Olympic gold medal winner.\nIf Amy is not a Nobel physics laureate, then Amy is not an Olympic gold medal winner.\n</PREMISES>\n<CONCLUSION>\nIf Amy is not an Olympic gold medal winner, then Amy is a Nobel physics laureate.\n</CONCLUSION>\n<EVALUATE>\nTEXT: All professional athletes spend most of their time on sports.\nFOL: all x. (ProfessionalAthlete(x) -> SpendOn(x, MostOfTheirTime, Sports))\nTEXT: All Olympic gold medal winners are professional athletes.\nFOL: all x. (OlympicGoldMedalWinner(x) -> ProfessionalAthlete(x))\nTEXT: No full-time scientists spend the majority of their time on sports.\nFOL: all x. (FullTimeScientist(x) -> -SpendOn(x, MostOfTheirTime, Sports))\nTEXT: All Nobel physics laureates are full-time scientists.\nFOL: all x. (NobelPhysicsLaureate(x) -> FullTimeScientist(x))\nTEXT: Amy spends the most time on sports, or Amy is an Olympic gold medal winner.\nFOL: SpendOn(Amy, MostOfTheirTime, Sports) | OlympicGoldMedalWinner(Amy)\nTEXT: If Amy is not a Nobel physics laureate, then Amy is not an Olympic gold medal winner.\nFOL: -NobelPhysicsLaureate(Amy) -> -OlympicGoldMedalWinner(Amy)\nTEXT: If Amy is not an Olympic gold medal winner, then Amy is a Nobel physics laureate.\nFOL: -OlympicGoldMedalWinner(Amy) -> NobelLaureate(Amy)\n\nANSWER: False\n</EVALUATE>\n\n<PREMISES>\nIf a person pays their taxes, then they contribute to the country.\nEveryone who works for a government department pays a tax on their salary.\nEveryone in the army is an employee of a government department.\nEveryone convicted of murder goes to prison.\nEveryone who has been to prison has a criminal record.\nJames was either once convicted of murder, or spent time in prison.\nJames either has a criminal record, or pays his taxes.\n</PREMISES>\n<CONCLUSION>\nJames does not contribute to the country.\n</CONCLUSION>\n<EVALUATE>\nTEXT: If a person pays their taxes, then they contribute to the country.\nFOL: all x. (Taxpayer(x) -> ContributeTo(x, Country))\nTEXT: Everyone who works for a government department pays a tax on their salary.\nFOL: all x. (WorkFor(x, GovernmentAgency) -> Taxpayer(x))\nTEXT: Everyone in the army is an employee of a government department.\nFOL: all x. (ServesIn(x, TheArmy) -> WorkFor(x, GovernmentAgency))\nTEXT: Everyone convicted of murder goes to prison.\nFOL: all x. (SentencedForMurder(x) -> Imprisoned(x))\nTEXT: Everyone who has been to prison has a criminal record.\nFOL: all x. (Imprisoned((x) -> Has(x, CriminalRecord))\nTEXT: James was either once convicted of murder, or spent time in prison.\nFOL: ((SentencedForMurder(James) & -Imprisoned(James)) | (-SentencedForMurder(James) & Imprisoned(James)))\nTEXT: James either has a criminal record, or pays his taxes.\nFOL: ((Has(James, CriminalRecord) & -Taxpayer(James)) | (-Has(James, CriminalRecord) & Taxpayer(James)))\nTEXT: James does not contribute to the country.\nFOL: ContributeToCountry(James)\n\nANSWER: Uncertain\n</EVALUATE>\n\n<PREMISES>\nNo songs are visuals.\nAll folk songs are songs.\nAll videos are visuals.\nAll movies are videos.\nAll sci-fi movies are movies.\nInception is a sci-fi movie.\nMac is neither a folk song nor a sci-fi movie.\n</PREMISES>\n<CONCLUSION>\nInception is a folk song.\n</CONCLUSION>\n<EVALUATE>\nTEXT: No songs are visuals.\nFOL: all x. (Song(x) -> -Visual(x))\nTEXT: All folk songs are songs.\nFOL: all x. (FolkSong(x) -> Song(x))\nTEXT: All videos are visuals.\nFOL: all x. (Video(x) -> Visual(x))\nTEXT: All movies are videos.\nFOL: all x. (Movie(x) -> Video(x))\nTEXT: All sci-fi movies are movies.\nFOL: all x. (ScifiMovie(x) -> Movie(x))\nTEXT: Inception is a sci-fi movie.\nFOL: ScifiMovie(Inception)\nTEXT: Mac is neither a folk song nor a sci-fi movie.\nFOL: -FolkSong(Mac) & -ScifiMovie(Mac)\nTEXT: Inception is a folk song.\nFOL: FolkSong(Inception)\n\nANSWER: False\n</EVALUATE>\n\n<PREMISES>\nEvery chef can cook.\nSome people who aren’t chefs can cook.\nPeople who cook can make scrambled eggs and pasta.\nIf someone can make cookies and muffins, they are a baker.\nBakers who can also make scrambled eggs can make a good breakfast.\nLuke can make cookies, scrambled eggs, and muffins, but not pasta.\n</PREMISES>\n<CONCLUSION>\nLuke is a chef.\n</CONCLUSION>\n<EVALUATE>\nTEXT: Every chef can cook.\nFOL: all x. (Chef(x) -> Can(x, Cook))\nTEXT: Some people who aren’t chefs can cook.\nFOL: exists x. (-Chef(x) & Can(x, Cook))\nTEXT: People who cook can make scrambled eggs and pasta.\nFOL: all x. (Can(x, Cook) -> (CanMake(x, ScrambledEggs) & CanMake(x, Pasta)))\nTEXT: If someone can make cookies and muffins, they are a baker.\nFOL: all x. (CanMake(x, Cookies) & CanMake(x, Muffins) -> Baker(x))\nTEXT: Bakers who can also make scrambled eggs can make a good breakfast.\nFOL: all x. ((Baker(x) & CanMake(x, ScrambledEggs)) -> CanMake(x, GoodBreakfast))\nTEXT: Luke can make cookies, scrambled eggs, and muffins, but not pasta.\nFOL: CanMake(Luke, Cookies) & (CanMake(Luke, ScrambledEggs) & CanMake(Luke, Muffins) & -CanMake(Luke, Pasta)\nTEXT: Luke is a chef.\nFOL: MakeGoodBreakfast(Luke)\n\nANSWER: False\n</EVALUATE>\n\n<PREMISES>\nETS develops various standardized tests primarily in the United States for K-12 and higher education.\nETS administers international tests, including the TOEFL, TOEIC, GRE, and subject tests.\nMany of the assessments ETS develops are associated with entry to the US tertiary and quaternary education institutions.\nETS also develops K-12 statewide assessments used for accountability testing in many states.\n</PREMISES>\n<CONCLUSION>\nETS doesn't administer tests internationally.\n</CONCLUSION>\n<EVALUATE>\nTEXT: ETS develops various standardized tests primarily in the United States for K-12 and higher education.\nFOL: exists x. exists y. (Develop(eTS, x) & Develop(eTS, y) & StandardizedTest(x) & StandardizedTest(y) & In(x, UnitedState) & In(y, UnitedState) & For(x, kOneTwoAndHigherEducation) & For(y, kOneTwoAndHigherEducation))\nTEXT: ETS administers international tests, including the TOEFL, TOEIC, GRE, and subject tests.\nFOL: exists x. (Administer(eTS, x) & InternationalTest(x) & (TOEFL(x) | TOEIC(x) | GRE(x) | SubjectTest(x)))\nTEXT: Many of the assessments ETS develops are associated with entry to the US tertiary and quaternary education institutions.\nFOL: exists x. (Develop(eTS, x) & AssociatedWith(x, EntryToUSEducationInstitution))\nTEXT: ETS also develops K-12 statewide assessments used for accountability testing in many states.\nFOL: exists x. (Develop(eTS, x) & StateWideAssesment(x) & UsedFor(x, AccountabilityTesting))\nTEXT: ETS doesn't administer tests internationally.\nFOL: exists x. (Develops(Ets, x) & For(x, k-OneTwoandhighereducation)) & exists x. (Develops(Ets, x) & AssociatedWith(x, Entrytouseducationinstitutions))\n\nANSWER: False\n</EVALUATE>\n\n<PREMISES>\nDaveed Diggs is an actor and film producer.\nDaveed Diggs played two roles in the musical Hamilton on Broadway.\nOne of the actors from Hamilton won the best actor award.\nThe actor playing Thomas Jefferson won the best actor award.\nDaveed Diggs played Thomas Jefferson.\nMusicals on Broadway are not films.\n</PREMISES>\n<CONCLUSION>\nDaveed Diggs won the best actor award.\n</CONCLUSION>\n<EVALUATE>\nTEXT: Daveed Diggs is an actor and film producer.\nFOL: Actor(DaveedDiggs) & FilmProducer(DaveedDiggs)\nTEXT: Daveed Diggs played two roles in the musical Hamilton on Broadway.\nFOL: exists x. exists y.(PlaysIn(DaveedDiggs, x, Hamilton) & (-(x=y)) & PlaysIn(DaveedDiggs, y, Hamilton)) & OnBroadway(Hamilton) & Musical(Hamilton)\nTEXT: One of the actors from Hamilton won the best actor award.\nFOL: exists x. exists y.(Actor(x) & PlaysIn(x, y, Hamilton) & Wins(x, BestActorAward))\nTEXT: The actor playing Thomas Jefferson won the best actor award.\nFOL: exists x. (Actor(x) & PlaysIn(x, ThomasJefferson, Hamilton) & Wins(x, BestActorAward))\nTEXT: Daveed Diggs played Thomas Jefferson.\nFOL: Plays(DaveedDiggs, ThomasJefferson)\nTEXT: Musicals on Broadway are not films.\nFOL: all x. ((Musical(x) & OnBroadway(x)) -> -Film(x))\nTEXT: Daveed Diggs won the best actor award.\nFOL: exists x. (BRICS(x) & Speaks(x, Hindi))\n\nANSWER: True\n</EVALUATE>\n\n<PREMISES>\nNot all humans move.\nEverything that moves breathes.\n</PREMISES>\n<CONCLUSION>\nThere exist humans that do not breathe.\n</CONCLUSION>\n<EVALUATE>", "raw_generations": ["Generation 1:\nTEXT: Not all humans move.\nFOL: -all x. (Human(x) -> Moves(x))\nTEXT: Everything that moves breathes.\nFOL: all x. (Moves(x) -> Breaths(x))\nTEXT: There exist humans that do not breathe.\nFOL: exists x. (Human(x) & -Breaths(x))\n\nANSWER: True\nProcessed: True", "Generation 2:\nTEXT: Not all humans move.\nFOL: -all x. (Human(x) -> Moves(x))\nTEXT: Everything that moves breathes.\nFOL: all x. (Moves(x) -> Breathes(x))\nTEXT: There exist humans that do not breathe.\nFOL: exists x. (Human(x) & -Breathes(x))\n\nANSWER: True\nProcessed: True", "Generation 3:\nTEXT: Not all humans move.\nFOL: -all x. (Human(x) -> Moves(x))\nTEXT: Everything that moves breathes.\nFOL: all x. (Moves(x) -> Breaths(x))\nTEXT: There exist humans that do not breathe.\nFOL: exists x. (Human(x) & -Breaths(x))\n\nANSWER: True\nProcessed: True", "Generation 4:\nTEXT: Not all humans move.\nFOL: -all x. (Human(x) -> Moves(x))\n\nTEXT: Everything that moves breathes.\nFOL: all x. (Moves(x) -> Breaths(x))\n\nTEXT: There exist humans that do not breathe.\nFOL: exists x. (Human(x) & -Breaths(x))\n\nANSWER: True\nProcessed: True", "Generation 5:\nFOL:\nall x. (Human(x) -> -Moves(x) v Moves(x))\nall y. (Moves(y) -> Breaths(y))\n\nTEXT: Every human moves or does not move.\nFOL: all x. Human(x) -> (Moves(x) v -Moves(x))\n\nTEXT: Everything that moves breathes.\nFOL: all y. (Moves(y) -> Breaths(y))\n\nTEXT: There exist humans that do not breathe.\nFOL: exists x. (Human(x) & -Breaths(x))\n\nANSWER: True (since Not all humans move and Every human that moves breathes implies that there are humans that do not move and do not breathe)\nProcessed: True", "Generation 6:\nFOL:\nTEXT: Not all humans move.\nFOL: -(all x. (Human(x) -> Moves(x)))\nTEXT: Everything that moves breathes.\nFOL: all x. (Moves(x) -> Breaths(x))\nTEXT: There exist humans that do not breathe.\nFOL: exists x. (Human(x) & -Breaths(x))\n\nANSWER: True\nProcessed: True", "Generation 7:\nTEXT: Not all humans move.\nFOL: -all x. (Human(x) -> Moves(x))\nTEXT: Everything that moves breathes.\nFOL: all x. (Moves(x) -> Breaths(x))\nTEXT: There exist humans that do not breathe.\nFOL: exists x. (Human(x) & -Breaths(x))\n\nANSWER: True\nProcessed: True", "Generation 8:\nTEXT: Not all humans move.\nFOL: -all x. (Human(x) -> Moves(x))\nTEXT: Everything that moves breathes.\nFOL: all x. (Moves(x) -> Breathes(x))\nTEXT: There exist humans that do not breathe.\nFOL: exists x. (Human(x) & -Breathes(x))\n\nANSWER: True\nProcessed: True", "Generation 9:\nFOL:\nTEXT: Not all humans move.\nFOL: -all x. (Human(x) -> Moves(x))\nTEXT: Everything that moves breathes.\nFOL: all x. (Moves(x) -> Breaths(x))\nTEXT: There exist humans that do not breathe.\nFOL: exists x. (Human(x) & -Breaths(x))\n\nANSWER: True\nProcessed: True", "Generation 10:\nTEXT: Not all humans move.\nFOL: -(all x. (Human(x) -> Moves(x)))\nTEXT: Everything that moves breathes.\nFOL: (all x. (Moves(x) -> Breaths(x)))\nTEXT: There exist humans that do not breathe.\nFOL: exists x. (Human(x) & -Breaths(x))\n\nANSWER: True\nProcessed: True\n\nReference: True\n========================================"], "answers": ["True", "True", "True", "True", "True", "True", "True", "True", "True", "True"]}
{"idx": 67, "prompt": "The following is a first-order logic (FOL) problem.\nThe problem is to determine whether the conclusion follows from the premises.\nThe premises are given in the form of a set of first-order logic sentences.\nThe conclusion is given in the form of a single first-order logic sentence.\nThe task is to translate each of the premises and conclusions into FOL expressions.and then to evaluate the conclusion as ANSWER: True, ANSWER: False, or ANSWER: Uncertain given the premises. The output should follow format TEXT: \nFOL: \nTEXT: \nFOL:... ANSWER: \n\n\n<PREMISES>\nAll biodegradable things are environment-friendly.\nAll woodware is biodegradable.\nAll paper is woodware.\nNothing is a good thing and also a bad thing.\nAll environment-friendly things are good.\nA worksheet is either paper or environment-friendly.\n</PREMISES>\n<CONCLUSION>\nA worksheet is not biodegradable.\n</CONCLUSION>\n<EVALUATE>\nTEXT: All biodegradable things are environment-friendly.\nFOL: all x. (Biodegradable(x) -> EnvironmentFriendly(x))\nTEXT: All woodware is biodegradable.\nFOL: all x. (Woodware(x) -> Biodegradable(x))\nTEXT: All paper is woodware.\nFOL: all x. (Paper(x) -> Woodware(x))\nTEXT: Nothing is a good thing and also a bad thing.\nFOL: -(exists x. (Good(x) & Bad(x)))\nTEXT: All environment-friendly things are good.\nFOL: all x. (EnvironmentFriendly(x) -> Good(x))\nTEXT: A worksheet is either paper or environment-friendly.\nFOL: ((Paper(Worksheet) & -EnvironmentFriendly(Worksheet)) | (-Paper(Worksheet) & EnvironmentFriendly(Worksheet)))\nTEXT: A worksheet is not biodegradable.\nFOL: -Dispensable(Worksheet)\n\nANSWER: Uncertain\n</EVALUATE>\n\n<PREMISES>\nA La Liga soccer team ranks higher than another La Liga soccer team if it receives more points.\nIf there are two La Liga soccer teams and neither has more points than the other, then the team which receives more points from the games between the two teams ranks higher.\nReal Madrid and Barcelona are both La Liga soccer teams.\nReal Madrid received more points than Barcelona.\nNeither Real Madrid nor Barcelona received more points from the games between them.\n</PREMISES>\n<CONCLUSION>\nReal Madrid ranks higher than Barcelona.\n</CONCLUSION>\n<EVALUATE>\nTEXT: A La Liga soccer team ranks higher than another La Liga soccer team if it receives more points.\nFOL: all x. all y. (LaLigaSoccerTeam(x) & LaLigaSoccerTeam(y) & MorePoints(x, y) -> RankHigherThan(x, y))\nTEXT: If there are two La Liga soccer teams and neither has more points than the other, then the team which receives more points from the games between the two teams ranks higher.\nFOL: all x. all y. (LaLigaSoccerTeam(x) & LaLigaSoccerTeam(y) & -MorePoints(x, y) & -MorePoints(y, x) & MorePointsInGameBetween(x, y) ->  RankHigherThan(x, y))\nTEXT: Real Madrid and Barcelona are both La Liga soccer teams.\nFOL: LaLigaSoccerTeam(RealMadrid) & LaLigaSoccerTeam(Barcelona)\nTEXT: Real Madrid received more points than Barcelona.\nFOL: MorePoints(RealMadrid, Barcelona)\nTEXT: Neither Real Madrid nor Barcelona received more points from the games between them.\nFOL: -MorePointsInGameBetween(RealMadrid, Barcelona) & -MorePointsInGameBetween(Barcelona, RealMadrid)\nTEXT: Real Madrid ranks higher than Barcelona.\nFOL: HigherRank(RealMadrid, Barcelona)\n\nANSWER: True\n</EVALUATE>\n\n<PREMISES>\nAll professional athletes spend most of their time on sports.\nAll Olympic gold medal winners are professional athletes.\nNo full-time scientists spend the majority of their time on sports.\nAll Nobel physics laureates are full-time scientists.\nAmy spends the most time on sports, or Amy is an Olympic gold medal winner.\nIf Amy is not a Nobel physics laureate, then Amy is not an Olympic gold medal winner.\n</PREMISES>\n<CONCLUSION>\nIf Amy is not an Olympic gold medal winner, then Amy is a Nobel physics laureate.\n</CONCLUSION>\n<EVALUATE>\nTEXT: All professional athletes spend most of their time on sports.\nFOL: all x. (ProfessionalAthlete(x) -> SpendOn(x, MostOfTheirTime, Sports))\nTEXT: All Olympic gold medal winners are professional athletes.\nFOL: all x. (OlympicGoldMedalWinner(x) -> ProfessionalAthlete(x))\nTEXT: No full-time scientists spend the majority of their time on sports.\nFOL: all x. (FullTimeScientist(x) -> -SpendOn(x, MostOfTheirTime, Sports))\nTEXT: All Nobel physics laureates are full-time scientists.\nFOL: all x. (NobelPhysicsLaureate(x) -> FullTimeScientist(x))\nTEXT: Amy spends the most time on sports, or Amy is an Olympic gold medal winner.\nFOL: SpendOn(Amy, MostOfTheirTime, Sports) | OlympicGoldMedalWinner(Amy)\nTEXT: If Amy is not a Nobel physics laureate, then Amy is not an Olympic gold medal winner.\nFOL: -NobelPhysicsLaureate(Amy) -> -OlympicGoldMedalWinner(Amy)\nTEXT: If Amy is not an Olympic gold medal winner, then Amy is a Nobel physics laureate.\nFOL: -OlympicGoldMedalWinner(Amy) -> NobelLaureate(Amy)\n\nANSWER: False\n</EVALUATE>\n\n<PREMISES>\nIf a person pays their taxes, then they contribute to the country.\nEveryone who works for a government department pays a tax on their salary.\nEveryone in the army is an employee of a government department.\nEveryone convicted of murder goes to prison.\nEveryone who has been to prison has a criminal record.\nJames was either once convicted of murder, or spent time in prison.\nJames either has a criminal record, or pays his taxes.\n</PREMISES>\n<CONCLUSION>\nJames does not contribute to the country.\n</CONCLUSION>\n<EVALUATE>\nTEXT: If a person pays their taxes, then they contribute to the country.\nFOL: all x. (Taxpayer(x) -> ContributeTo(x, Country))\nTEXT: Everyone who works for a government department pays a tax on their salary.\nFOL: all x. (WorkFor(x, GovernmentAgency) -> Taxpayer(x))\nTEXT: Everyone in the army is an employee of a government department.\nFOL: all x. (ServesIn(x, TheArmy) -> WorkFor(x, GovernmentAgency))\nTEXT: Everyone convicted of murder goes to prison.\nFOL: all x. (SentencedForMurder(x) -> Imprisoned(x))\nTEXT: Everyone who has been to prison has a criminal record.\nFOL: all x. (Imprisoned((x) -> Has(x, CriminalRecord))\nTEXT: James was either once convicted of murder, or spent time in prison.\nFOL: ((SentencedForMurder(James) & -Imprisoned(James)) | (-SentencedForMurder(James) & Imprisoned(James)))\nTEXT: James either has a criminal record, or pays his taxes.\nFOL: ((Has(James, CriminalRecord) & -Taxpayer(James)) | (-Has(James, CriminalRecord) & Taxpayer(James)))\nTEXT: James does not contribute to the country.\nFOL: ContributeToCountry(James)\n\nANSWER: Uncertain\n</EVALUATE>\n\n<PREMISES>\nNo songs are visuals.\nAll folk songs are songs.\nAll videos are visuals.\nAll movies are videos.\nAll sci-fi movies are movies.\nInception is a sci-fi movie.\nMac is neither a folk song nor a sci-fi movie.\n</PREMISES>\n<CONCLUSION>\nInception is a folk song.\n</CONCLUSION>\n<EVALUATE>\nTEXT: No songs are visuals.\nFOL: all x. (Song(x) -> -Visual(x))\nTEXT: All folk songs are songs.\nFOL: all x. (FolkSong(x) -> Song(x))\nTEXT: All videos are visuals.\nFOL: all x. (Video(x) -> Visual(x))\nTEXT: All movies are videos.\nFOL: all x. (Movie(x) -> Video(x))\nTEXT: All sci-fi movies are movies.\nFOL: all x. (ScifiMovie(x) -> Movie(x))\nTEXT: Inception is a sci-fi movie.\nFOL: ScifiMovie(Inception)\nTEXT: Mac is neither a folk song nor a sci-fi movie.\nFOL: -FolkSong(Mac) & -ScifiMovie(Mac)\nTEXT: Inception is a folk song.\nFOL: FolkSong(Inception)\n\nANSWER: False\n</EVALUATE>\n\n<PREMISES>\nEvery chef can cook.\nSome people who aren’t chefs can cook.\nPeople who cook can make scrambled eggs and pasta.\nIf someone can make cookies and muffins, they are a baker.\nBakers who can also make scrambled eggs can make a good breakfast.\nLuke can make cookies, scrambled eggs, and muffins, but not pasta.\n</PREMISES>\n<CONCLUSION>\nLuke is a chef.\n</CONCLUSION>\n<EVALUATE>\nTEXT: Every chef can cook.\nFOL: all x. (Chef(x) -> Can(x, Cook))\nTEXT: Some people who aren’t chefs can cook.\nFOL: exists x. (-Chef(x) & Can(x, Cook))\nTEXT: People who cook can make scrambled eggs and pasta.\nFOL: all x. (Can(x, Cook) -> (CanMake(x, ScrambledEggs) & CanMake(x, Pasta)))\nTEXT: If someone can make cookies and muffins, they are a baker.\nFOL: all x. (CanMake(x, Cookies) & CanMake(x, Muffins) -> Baker(x))\nTEXT: Bakers who can also make scrambled eggs can make a good breakfast.\nFOL: all x. ((Baker(x) & CanMake(x, ScrambledEggs)) -> CanMake(x, GoodBreakfast))\nTEXT: Luke can make cookies, scrambled eggs, and muffins, but not pasta.\nFOL: CanMake(Luke, Cookies) & (CanMake(Luke, ScrambledEggs) & CanMake(Luke, Muffins) & -CanMake(Luke, Pasta)\nTEXT: Luke is a chef.\nFOL: MakeGoodBreakfast(Luke)\n\nANSWER: False\n</EVALUATE>\n\n<PREMISES>\nETS develops various standardized tests primarily in the United States for K-12 and higher education.\nETS administers international tests, including the TOEFL, TOEIC, GRE, and subject tests.\nMany of the assessments ETS develops are associated with entry to the US tertiary and quaternary education institutions.\nETS also develops K-12 statewide assessments used for accountability testing in many states.\n</PREMISES>\n<CONCLUSION>\nETS doesn't administer tests internationally.\n</CONCLUSION>\n<EVALUATE>\nTEXT: ETS develops various standardized tests primarily in the United States for K-12 and higher education.\nFOL: exists x. exists y. (Develop(eTS, x) & Develop(eTS, y) & StandardizedTest(x) & StandardizedTest(y) & In(x, UnitedState) & In(y, UnitedState) & For(x, kOneTwoAndHigherEducation) & For(y, kOneTwoAndHigherEducation))\nTEXT: ETS administers international tests, including the TOEFL, TOEIC, GRE, and subject tests.\nFOL: exists x. (Administer(eTS, x) & InternationalTest(x) & (TOEFL(x) | TOEIC(x) | GRE(x) | SubjectTest(x)))\nTEXT: Many of the assessments ETS develops are associated with entry to the US tertiary and quaternary education institutions.\nFOL: exists x. (Develop(eTS, x) & AssociatedWith(x, EntryToUSEducationInstitution))\nTEXT: ETS also develops K-12 statewide assessments used for accountability testing in many states.\nFOL: exists x. (Develop(eTS, x) & StateWideAssesment(x) & UsedFor(x, AccountabilityTesting))\nTEXT: ETS doesn't administer tests internationally.\nFOL: exists x. (Develops(Ets, x) & For(x, k-OneTwoandhighereducation)) & exists x. (Develops(Ets, x) & AssociatedWith(x, Entrytouseducationinstitutions))\n\nANSWER: False\n</EVALUATE>\n\n<PREMISES>\nDaveed Diggs is an actor and film producer.\nDaveed Diggs played two roles in the musical Hamilton on Broadway.\nOne of the actors from Hamilton won the best actor award.\nThe actor playing Thomas Jefferson won the best actor award.\nDaveed Diggs played Thomas Jefferson.\nMusicals on Broadway are not films.\n</PREMISES>\n<CONCLUSION>\nDaveed Diggs won the best actor award.\n</CONCLUSION>\n<EVALUATE>\nTEXT: Daveed Diggs is an actor and film producer.\nFOL: Actor(DaveedDiggs) & FilmProducer(DaveedDiggs)\nTEXT: Daveed Diggs played two roles in the musical Hamilton on Broadway.\nFOL: exists x. exists y.(PlaysIn(DaveedDiggs, x, Hamilton) & (-(x=y)) & PlaysIn(DaveedDiggs, y, Hamilton)) & OnBroadway(Hamilton) & Musical(Hamilton)\nTEXT: One of the actors from Hamilton won the best actor award.\nFOL: exists x. exists y.(Actor(x) & PlaysIn(x, y, Hamilton) & Wins(x, BestActorAward))\nTEXT: The actor playing Thomas Jefferson won the best actor award.\nFOL: exists x. (Actor(x) & PlaysIn(x, ThomasJefferson, Hamilton) & Wins(x, BestActorAward))\nTEXT: Daveed Diggs played Thomas Jefferson.\nFOL: Plays(DaveedDiggs, ThomasJefferson)\nTEXT: Musicals on Broadway are not films.\nFOL: all x. ((Musical(x) & OnBroadway(x)) -> -Film(x))\nTEXT: Daveed Diggs won the best actor award.\nFOL: exists x. (BRICS(x) & Speaks(x, Hindi))\n\nANSWER: True\n</EVALUATE>\n\n<PREMISES>\nBernarda Bryson Shahn was a musician and lithographer.\nBernarda Bryson Shahn was born in Athens, Ohio.\nBernarda Bryson Shahn attended the University of Washington.\nPeople born in Athens, Ohio, are Japanese.\n</PREMISES>\n<CONCLUSION>\nBernarda Bryson Shahn had attended multiple schools.\n</CONCLUSION>\n<EVALUATE>", "raw_generations": ["Generation 1:\nTEXT: Bernarda Bryson Shahn was a musician and lithographer.\nFOL: Musician(BernardaBrysonShahn) & Lithographer(BernardaBrysonShahn)\nTEXT: Bernarda Bryson Shahn was born in Athens, Ohio.\nFOL: BornIn(BernardaBrysonShahn, Athens, Ohio)\nTEXT: Bernarda Bryson Shahn attended the University of Washington.\nFOL: Attended(BernardaBrysonShahn, UniversityOfWashington)\nTEXT: People born in Athens, Ohio, are Japanese.\nFOL: all x. (BornIn(x, Athens, Ohio) -> Japanese(x))\nTEXT: Bernarda Bryson Shahn had attended multiple schools.\nFOL: -(only(BernardaBrysonShahn, UniversityOfWashington))\n\nANSWER: Uncertain (The premises don't provide information about Bernarda Bryson Shahn attending multiple schools)\nProcessed: Uncertain", "Generation 2:\nTEXT: Bernarda Bryson Shahn was a musician and lithographer.\nFOL: Musician(BernardaBrysonShahn) & Lithographer(BernardaBrysonShahn)\nTEXT: Bernarda Bryson Shahn was born in Athens, Ohio.\nFOL: BornIn(BernardaBrysonShahn, Athens, Ohio)\nTEXT: Bernarda Bryson Shahn attended the University of Washington.\nFOL: Attended(BernardaBrysonShahn, UniversityOfWashington)\nTEXT: People born in Athens, Ohio, are Japanese.\nFOL: all x. (BornIn(x, Athens, Ohio) -> Japanese(x))\nTEXT: Bernarda Bryson Shahn had attended multiple schools.\nFOL: -Attended(BernardaBrysonShahn, UniversityOfWashington)\n\nANSWER: False (There is a contradiction between the premises and the conclusion)\nProcessed: False", "Generation 3:\nTEXT: Bernarda Bryson Shahn was a musician and lithographer.\nFOL: Musician(BernardaBrysonShahn) & Lithographer(BernardaBrysonShahn)\nTEXT: Bernarda Bryson Shahn was born in Athens, Ohio.\nFOL: BornIn(BernardaBrysonShahn, Athens, Ohio)\nTEXT: Bernarda Bryson Shahn attended the University of Washington.\nFOL: Attended(BernardaBrysonShahn, UniversityOfWashington)\nTEXT: People born in Athens, Ohio, are Japanese.\nFOL: all x. (BornIn(x, Athens, Ohio) -> Japanese(x))\nTEXT: Bernarda Bryson Shahn had attended multiple schools.\nFOL: -(Attended(BernardaBrysonShahn, onlyOneSchool))\n\nANSWER: Uncertain (The premises do not provide information about Bernarda Bryson Shahn attending multiple schools.)\nProcessed: Uncertain", "Generation 4:\nTEXT: Bernarda Bryson Shahn was a musician and lithographer.\nFOL: Musician(BernardaBrysonShahn) & Lithographer(BernardaBrysonShahn)\nTEXT: Bernarda Bryson Shahn was born in Athens, Ohio.\nFOL: BornIn(BernardaBrysonShahn, Athens, Ohio)\nTEXT: Bernarda Bryson Shahn attended the University of Washington.\nFOL: Attends(BernardaBrysonShahn, UniversityOfWashington)\nTEXT: People born in Athens, Ohio, are Japanese.\nFOL: all x. (BornIn(x, Athens, Ohio) -> Japanese(x))\nTEXT: Bernarda Bryson Shahn had attended multiple schools.\nFOL: -(Attends(BernardaBrysonShahn, onlyOneSchool))\n\nANSWER: False\n\nThe premises do not indicate that Bernarda Bryson Shahn attended more than one school, so it cannot be concluded that she had attended multiple schools. The premises only state that she was born in Athens, Ohio, and attended the University of Washington.\nProcessed: False", "Generation 5:\nTEXT: Bernarda Bryson Shahn was a musician and lithographer.\nFOL: Musician(BernardaBrysonShahn) & Lithographer(BernardaBrysonShahn)\nTEXT: Bernarda Bryson Shahn was born in Athens, Ohio.\nFOL: BornIn(BernardaBrysonShahn, Athens, Ohio)\nTEXT: Bernarda Bryson Shahn attended the University of Washington.\nFOL: Attended(BernardaBrysonShahn, UniversityOfWashington)\nTEXT: People born in Athens, Ohio, are Japanese.\nFOL: all x. (BornIn(x, Athens, Ohio) -> Japanese(x))\nTEXT: Bernarda Bryson Shahn had attended multiple schools.\nFOL: -(all x. (BornIn(x, Athens, Ohio) -> Japanese(x)))\n\nANSWER: False (Based on the given premises, it is not true that Bernarda Bryson Shahn attended multiple schools.)\nProcessed: False", "Generation 6:\nTEXT: Bernarda Bryson Shahn was a musician and lithographer.\nFOL: Musician(BernardaBrysonShahn) & Lithographer(BernardaBrysonShahn)\nTEXT: Bernarda Bryson Shahn was born in Athens, Ohio.\nFOL: BornIn(BernardaBrysonShahn, Athens, Ohio)\nTEXT: Bernarda Bryson Shahn attended the University of Washington.\nFOL: Attended(BernardaBrysonShahn, UniversityOfWashington)\nTEXT: People born in Athens, Ohio, are Japanese.\nFOL: all x. (BornIn(x, Athens, Ohio) -> Japanese(x))\nTEXT: Bernarda Bryson Shahn had attended multiple schools.\nFOL: -exists y. ((BornIn(y, Athens, Ohio) & Japanese(y)) & Attended(y, BernardaBrysonShahn))\n\nANSWER: False\n\nThe conclusion states that Bernarda Bryson Shahn had attended multiple schools, but there is no evidence that she attended any schools other than the University of Washington, which she did attend according to the premises. Therefore, it is false to say that she had attended multiple schools.\nProcessed: False", "Generation 7:\nTEXT: Bernarda Bryson Shahn was a musician and lithographer.\nFOL: Musician(BernardaBrysonShahn) & Lithographer(BernardaBrysonShahn)\nTEXT: Bernarda Bryson Shahn was born in Athens, Ohio.\nFOL: BornIn(BernardaBrysonShahn, Athens, Ohio)\nTEXT: Bernarda Bryson Shahn attended the University of Washington.\nFOL: Attends(BernardaBrysonShahn, UniversityOfWashington)\nTEXT: People born in Athens, Ohio, are Japanese.\nFOL: all x. (BornIn(x, Athens, Ohio) -> Japanese(x))\nTEXT: Bernarda Bryson Shahn had attended multiple schools.\nFOL: -(SingleSchoolAttendee(BernardaBrysonShahn))\n\nANSWER: Uncertain (There is no information provided about Bernarda Bryson Shahn attending other schools)\nProcessed: Uncertain", "Generation 8:\nTEXT: Bernarda Bryson Shahn was a musician and lithographer.\nFOL: Musician(BernardaBrysonShahn) & Lithographer(BernardaBrysonShahn)\nTEXT: Bernarda Bryson Shahn was born in Athens, Ohio.\nFOL: BornIn(BernardaBrysonShahn, Athens, Ohio)\nTEXT: Bernarda Bryson Shahn attended the University of Washington.\nFOL: Attended(BernardaBrysonShahn, UniversityOfWashington)\nTEXT: People born in Athens, Ohio, are Japanese.\nFOL: all x. (BornIn(x, Athens, Ohio) -> Japanese(x))\nTEXT: Bernarda Bryson Shahn had attended multiple schools.\nFOL: exists x. exists y. (Attended(BernardaBrysonShahn, x) & Attended(BernardaBrysonShahn, y) & x != y)\n\nANSWER: Uncertain (There is no information provided about Bernarda Bryson Shahn attending more than one school other than the University of Washington)\nProcessed: Uncertain", "Generation 9:\nTEXT: Bernarda Bryson Shahn was a musician and lithographer.\nFOL: Musician(BernardaBrysonShahn) & Lithographer(BernardaBrysonShahn)\nTEXT: Bernarda Bryson Shahn was born in Athens, Ohio.\nFOL: BornIn(BernardaBrysonShahn, AthensOhio)\nTEXT: Bernarda Bryson Shahn attended the University of Washington.\nFOL: Attended(BernardaBrysonShahn, UniversityOfWashington)\nTEXT: People born in Athens, Ohio, are Japanese.\nFOL: all x. (BornIn(x, AthensOhio) -> Japanese(x))\nTEXT: Bernarda Bryson Shahn had attended multiple schools.\nFOL: -all x. (x = BernardaBrysonShahn -> Attended(BernardaBrysonShahn, x))\n\nANSWER: False\nProcessed: False", "Generation 10:\nTEXT: Bernarda Bryson Shahn was a musician and lithographer.\nFOL: Musician(BernardaBrysonShahn) & Lithographer(BernardaBrysonShahn)\nTEXT: Bernarda Bryson Shahn was born in Athens, Ohio.\nFOL: BornIn(BernardaBrysonShahn, AthensOhio)\nTEXT: Bernarda Bryson Shahn attended the University of Washington.\nFOL: Attended(BernardaBrysonShahn, UniversityOfWashington)\nTEXT: People born in Athens, Ohio, are Japanese.\nFOL: all x. (BornIn(x, AthensOhio) -> Japanese(x))\nTEXT: Bernarda Bryson Shahn had attended multiple schools.\nFOL: exists x. exists y. (Attended(BernardaBrysonShahn, x) & Attended(BernardaBrysonShahn, y) & x != y)\n\nANSWER: Uncertain given the premises. The premises do not provide any information about Bernarda Bryson Shahn attending multiple schools.\nProcessed: Uncertain\n\nReference: Uncertain\n========================================"], "answers": ["Uncertain", "False", "Uncertain", "False", "False", "False", "Uncertain", "Uncertain", "False", "Uncertain"]}
{"idx": 68, "prompt": "The following is a first-order logic (FOL) problem.\nThe problem is to determine whether the conclusion follows from the premises.\nThe premises are given in the form of a set of first-order logic sentences.\nThe conclusion is given in the form of a single first-order logic sentence.\nThe task is to translate each of the premises and conclusions into FOL expressions.and then to evaluate the conclusion as ANSWER: True, ANSWER: False, or ANSWER: Uncertain given the premises. The output should follow format TEXT: \nFOL: \nTEXT: \nFOL:... ANSWER: \n\n\n<PREMISES>\nAll biodegradable things are environment-friendly.\nAll woodware is biodegradable.\nAll paper is woodware.\nNothing is a good thing and also a bad thing.\nAll environment-friendly things are good.\nA worksheet is either paper or environment-friendly.\n</PREMISES>\n<CONCLUSION>\nA worksheet is not biodegradable.\n</CONCLUSION>\n<EVALUATE>\nTEXT: All biodegradable things are environment-friendly.\nFOL: all x. (Biodegradable(x) -> EnvironmentFriendly(x))\nTEXT: All woodware is biodegradable.\nFOL: all x. (Woodware(x) -> Biodegradable(x))\nTEXT: All paper is woodware.\nFOL: all x. (Paper(x) -> Woodware(x))\nTEXT: Nothing is a good thing and also a bad thing.\nFOL: -(exists x. (Good(x) & Bad(x)))\nTEXT: All environment-friendly things are good.\nFOL: all x. (EnvironmentFriendly(x) -> Good(x))\nTEXT: A worksheet is either paper or environment-friendly.\nFOL: ((Paper(Worksheet) & -EnvironmentFriendly(Worksheet)) | (-Paper(Worksheet) & EnvironmentFriendly(Worksheet)))\nTEXT: A worksheet is not biodegradable.\nFOL: -Dispensable(Worksheet)\n\nANSWER: Uncertain\n</EVALUATE>\n\n<PREMISES>\nA La Liga soccer team ranks higher than another La Liga soccer team if it receives more points.\nIf there are two La Liga soccer teams and neither has more points than the other, then the team which receives more points from the games between the two teams ranks higher.\nReal Madrid and Barcelona are both La Liga soccer teams.\nReal Madrid received more points than Barcelona.\nNeither Real Madrid nor Barcelona received more points from the games between them.\n</PREMISES>\n<CONCLUSION>\nReal Madrid ranks higher than Barcelona.\n</CONCLUSION>\n<EVALUATE>\nTEXT: A La Liga soccer team ranks higher than another La Liga soccer team if it receives more points.\nFOL: all x. all y. (LaLigaSoccerTeam(x) & LaLigaSoccerTeam(y) & MorePoints(x, y) -> RankHigherThan(x, y))\nTEXT: If there are two La Liga soccer teams and neither has more points than the other, then the team which receives more points from the games between the two teams ranks higher.\nFOL: all x. all y. (LaLigaSoccerTeam(x) & LaLigaSoccerTeam(y) & -MorePoints(x, y) & -MorePoints(y, x) & MorePointsInGameBetween(x, y) ->  RankHigherThan(x, y))\nTEXT: Real Madrid and Barcelona are both La Liga soccer teams.\nFOL: LaLigaSoccerTeam(RealMadrid) & LaLigaSoccerTeam(Barcelona)\nTEXT: Real Madrid received more points than Barcelona.\nFOL: MorePoints(RealMadrid, Barcelona)\nTEXT: Neither Real Madrid nor Barcelona received more points from the games between them.\nFOL: -MorePointsInGameBetween(RealMadrid, Barcelona) & -MorePointsInGameBetween(Barcelona, RealMadrid)\nTEXT: Real Madrid ranks higher than Barcelona.\nFOL: HigherRank(RealMadrid, Barcelona)\n\nANSWER: True\n</EVALUATE>\n\n<PREMISES>\nAll professional athletes spend most of their time on sports.\nAll Olympic gold medal winners are professional athletes.\nNo full-time scientists spend the majority of their time on sports.\nAll Nobel physics laureates are full-time scientists.\nAmy spends the most time on sports, or Amy is an Olympic gold medal winner.\nIf Amy is not a Nobel physics laureate, then Amy is not an Olympic gold medal winner.\n</PREMISES>\n<CONCLUSION>\nIf Amy is not an Olympic gold medal winner, then Amy is a Nobel physics laureate.\n</CONCLUSION>\n<EVALUATE>\nTEXT: All professional athletes spend most of their time on sports.\nFOL: all x. (ProfessionalAthlete(x) -> SpendOn(x, MostOfTheirTime, Sports))\nTEXT: All Olympic gold medal winners are professional athletes.\nFOL: all x. (OlympicGoldMedalWinner(x) -> ProfessionalAthlete(x))\nTEXT: No full-time scientists spend the majority of their time on sports.\nFOL: all x. (FullTimeScientist(x) -> -SpendOn(x, MostOfTheirTime, Sports))\nTEXT: All Nobel physics laureates are full-time scientists.\nFOL: all x. (NobelPhysicsLaureate(x) -> FullTimeScientist(x))\nTEXT: Amy spends the most time on sports, or Amy is an Olympic gold medal winner.\nFOL: SpendOn(Amy, MostOfTheirTime, Sports) | OlympicGoldMedalWinner(Amy)\nTEXT: If Amy is not a Nobel physics laureate, then Amy is not an Olympic gold medal winner.\nFOL: -NobelPhysicsLaureate(Amy) -> -OlympicGoldMedalWinner(Amy)\nTEXT: If Amy is not an Olympic gold medal winner, then Amy is a Nobel physics laureate.\nFOL: -OlympicGoldMedalWinner(Amy) -> NobelLaureate(Amy)\n\nANSWER: False\n</EVALUATE>\n\n<PREMISES>\nIf a person pays their taxes, then they contribute to the country.\nEveryone who works for a government department pays a tax on their salary.\nEveryone in the army is an employee of a government department.\nEveryone convicted of murder goes to prison.\nEveryone who has been to prison has a criminal record.\nJames was either once convicted of murder, or spent time in prison.\nJames either has a criminal record, or pays his taxes.\n</PREMISES>\n<CONCLUSION>\nJames does not contribute to the country.\n</CONCLUSION>\n<EVALUATE>\nTEXT: If a person pays their taxes, then they contribute to the country.\nFOL: all x. (Taxpayer(x) -> ContributeTo(x, Country))\nTEXT: Everyone who works for a government department pays a tax on their salary.\nFOL: all x. (WorkFor(x, GovernmentAgency) -> Taxpayer(x))\nTEXT: Everyone in the army is an employee of a government department.\nFOL: all x. (ServesIn(x, TheArmy) -> WorkFor(x, GovernmentAgency))\nTEXT: Everyone convicted of murder goes to prison.\nFOL: all x. (SentencedForMurder(x) -> Imprisoned(x))\nTEXT: Everyone who has been to prison has a criminal record.\nFOL: all x. (Imprisoned((x) -> Has(x, CriminalRecord))\nTEXT: James was either once convicted of murder, or spent time in prison.\nFOL: ((SentencedForMurder(James) & -Imprisoned(James)) | (-SentencedForMurder(James) & Imprisoned(James)))\nTEXT: James either has a criminal record, or pays his taxes.\nFOL: ((Has(James, CriminalRecord) & -Taxpayer(James)) | (-Has(James, CriminalRecord) & Taxpayer(James)))\nTEXT: James does not contribute to the country.\nFOL: ContributeToCountry(James)\n\nANSWER: Uncertain\n</EVALUATE>\n\n<PREMISES>\nNo songs are visuals.\nAll folk songs are songs.\nAll videos are visuals.\nAll movies are videos.\nAll sci-fi movies are movies.\nInception is a sci-fi movie.\nMac is neither a folk song nor a sci-fi movie.\n</PREMISES>\n<CONCLUSION>\nInception is a folk song.\n</CONCLUSION>\n<EVALUATE>\nTEXT: No songs are visuals.\nFOL: all x. (Song(x) -> -Visual(x))\nTEXT: All folk songs are songs.\nFOL: all x. (FolkSong(x) -> Song(x))\nTEXT: All videos are visuals.\nFOL: all x. (Video(x) -> Visual(x))\nTEXT: All movies are videos.\nFOL: all x. (Movie(x) -> Video(x))\nTEXT: All sci-fi movies are movies.\nFOL: all x. (ScifiMovie(x) -> Movie(x))\nTEXT: Inception is a sci-fi movie.\nFOL: ScifiMovie(Inception)\nTEXT: Mac is neither a folk song nor a sci-fi movie.\nFOL: -FolkSong(Mac) & -ScifiMovie(Mac)\nTEXT: Inception is a folk song.\nFOL: FolkSong(Inception)\n\nANSWER: False\n</EVALUATE>\n\n<PREMISES>\nEvery chef can cook.\nSome people who aren’t chefs can cook.\nPeople who cook can make scrambled eggs and pasta.\nIf someone can make cookies and muffins, they are a baker.\nBakers who can also make scrambled eggs can make a good breakfast.\nLuke can make cookies, scrambled eggs, and muffins, but not pasta.\n</PREMISES>\n<CONCLUSION>\nLuke is a chef.\n</CONCLUSION>\n<EVALUATE>\nTEXT: Every chef can cook.\nFOL: all x. (Chef(x) -> Can(x, Cook))\nTEXT: Some people who aren’t chefs can cook.\nFOL: exists x. (-Chef(x) & Can(x, Cook))\nTEXT: People who cook can make scrambled eggs and pasta.\nFOL: all x. (Can(x, Cook) -> (CanMake(x, ScrambledEggs) & CanMake(x, Pasta)))\nTEXT: If someone can make cookies and muffins, they are a baker.\nFOL: all x. (CanMake(x, Cookies) & CanMake(x, Muffins) -> Baker(x))\nTEXT: Bakers who can also make scrambled eggs can make a good breakfast.\nFOL: all x. ((Baker(x) & CanMake(x, ScrambledEggs)) -> CanMake(x, GoodBreakfast))\nTEXT: Luke can make cookies, scrambled eggs, and muffins, but not pasta.\nFOL: CanMake(Luke, Cookies) & (CanMake(Luke, ScrambledEggs) & CanMake(Luke, Muffins) & -CanMake(Luke, Pasta)\nTEXT: Luke is a chef.\nFOL: MakeGoodBreakfast(Luke)\n\nANSWER: False\n</EVALUATE>\n\n<PREMISES>\nETS develops various standardized tests primarily in the United States for K-12 and higher education.\nETS administers international tests, including the TOEFL, TOEIC, GRE, and subject tests.\nMany of the assessments ETS develops are associated with entry to the US tertiary and quaternary education institutions.\nETS also develops K-12 statewide assessments used for accountability testing in many states.\n</PREMISES>\n<CONCLUSION>\nETS doesn't administer tests internationally.\n</CONCLUSION>\n<EVALUATE>\nTEXT: ETS develops various standardized tests primarily in the United States for K-12 and higher education.\nFOL: exists x. exists y. (Develop(eTS, x) & Develop(eTS, y) & StandardizedTest(x) & StandardizedTest(y) & In(x, UnitedState) & In(y, UnitedState) & For(x, kOneTwoAndHigherEducation) & For(y, kOneTwoAndHigherEducation))\nTEXT: ETS administers international tests, including the TOEFL, TOEIC, GRE, and subject tests.\nFOL: exists x. (Administer(eTS, x) & InternationalTest(x) & (TOEFL(x) | TOEIC(x) | GRE(x) | SubjectTest(x)))\nTEXT: Many of the assessments ETS develops are associated with entry to the US tertiary and quaternary education institutions.\nFOL: exists x. (Develop(eTS, x) & AssociatedWith(x, EntryToUSEducationInstitution))\nTEXT: ETS also develops K-12 statewide assessments used for accountability testing in many states.\nFOL: exists x. (Develop(eTS, x) & StateWideAssesment(x) & UsedFor(x, AccountabilityTesting))\nTEXT: ETS doesn't administer tests internationally.\nFOL: exists x. (Develops(Ets, x) & For(x, k-OneTwoandhighereducation)) & exists x. (Develops(Ets, x) & AssociatedWith(x, Entrytouseducationinstitutions))\n\nANSWER: False\n</EVALUATE>\n\n<PREMISES>\nDaveed Diggs is an actor and film producer.\nDaveed Diggs played two roles in the musical Hamilton on Broadway.\nOne of the actors from Hamilton won the best actor award.\nThe actor playing Thomas Jefferson won the best actor award.\nDaveed Diggs played Thomas Jefferson.\nMusicals on Broadway are not films.\n</PREMISES>\n<CONCLUSION>\nDaveed Diggs won the best actor award.\n</CONCLUSION>\n<EVALUATE>\nTEXT: Daveed Diggs is an actor and film producer.\nFOL: Actor(DaveedDiggs) & FilmProducer(DaveedDiggs)\nTEXT: Daveed Diggs played two roles in the musical Hamilton on Broadway.\nFOL: exists x. exists y.(PlaysIn(DaveedDiggs, x, Hamilton) & (-(x=y)) & PlaysIn(DaveedDiggs, y, Hamilton)) & OnBroadway(Hamilton) & Musical(Hamilton)\nTEXT: One of the actors from Hamilton won the best actor award.\nFOL: exists x. exists y.(Actor(x) & PlaysIn(x, y, Hamilton) & Wins(x, BestActorAward))\nTEXT: The actor playing Thomas Jefferson won the best actor award.\nFOL: exists x. (Actor(x) & PlaysIn(x, ThomasJefferson, Hamilton) & Wins(x, BestActorAward))\nTEXT: Daveed Diggs played Thomas Jefferson.\nFOL: Plays(DaveedDiggs, ThomasJefferson)\nTEXT: Musicals on Broadway are not films.\nFOL: all x. ((Musical(x) & OnBroadway(x)) -> -Film(x))\nTEXT: Daveed Diggs won the best actor award.\nFOL: exists x. (BRICS(x) & Speaks(x, Hindi))\n\nANSWER: True\n</EVALUATE>\n\n<PREMISES>\nDouglas Adams is an author who created the book collection called The Scarlet Letter.\nThe Scarlet Letter is about life experiences and technology.\nAll authors are barbers.\nBarbers create pages.\nSome books that contain innovative ideas are about technology.\n</PREMISES>\n<CONCLUSION>\nThe Scarlet Letter has no pages.\n</CONCLUSION>\n<EVALUATE>", "raw_generations": ["Generation 1:\nTEXT: Douglas Adams is an author who created the book collection called The Scarlet Letter.\nFOL: Author(DouglasAdams) & Created(DouglasAdams, TheScarletLetter)\n\nTEXT: The Scarlet Letter is about life experiences and technology.\nFOL: About(TheScarletLetter, LifeExperiences) & About(TheScarletLetter, Technology)\n\nTEXT: All authors are barbers.\nFOL: all x. (Author(x) -> Barber(x))\n\nTEXT: Barbers create pages.\nFOL: all x. (Barber(x) -> Creates(x, Pages))\n\nTEXT: Some books that contain innovative ideas are about technology.\nFOL: exists x. (Book(x) & Contains(x, InnovativeIdeas) & About(x, Technology))\n\nTEXT: The Scarlet Letter has no pages.\nFOL: -Has(TheScarletLetter, Pages)\n\nANSWER: False\n\nNote: There seems to be a contradiction in the premises, as it is stated that all authors are barbers, but it's uncommon for authors to be barbers. Additionally, the creation of a book doesn't necessarily imply that the book has pages. So, the conclusion is false given the premises.\nProcessed: False", "Generation 2:\nTEXT: Douglas Adams is an author who created the book collection called The Scarlet Letter.\nFOL: Author(DouglasAdams) & Created(DouglasAdams, TheScarletLetter)\n\nTEXT: The Scarlet Letter is about life experiences and technology.\nFOL: About(TheScarletLetter, LifeExperiences) & About(TheScarletLetter, Technology)\n\nTEXT: All authors are barbers.\nFOL: all x. (Author(x) -> Barber(x))\n\nTEXT: Barbers create pages.\nFOL: all x. (Barber(x) -> Creates(x, Pages))\n\nTEXT: Some books that contain innovative ideas are about technology.\nFOL: exists x. (Book(x) & ContainsInnovativeIdeas(x) & About(x, Technology))\n\nTEXT: The Scarlet Letter has no pages.\nFOL: -Has(TheScarletLetter, Pages)\n\nANSWER: False\nProcessed: False", "Generation 3:\nTEXT: Douglas Adams is an author who created the book collection called The Scarlet Letter.\nFOL: Author(DouglasAdams) & Creates(DouglasAdams, TheScarletLetter)\n\nTEXT: The Scarlet Letter is about life experiences and technology.\nFOL: About(TheScarletLetter, LifeExperiences) & About(TheScarletLetter, Technology)\n\nTEXT: All authors are barbers.\nFOL: all x. (Author(x) -> Barber(x))\n\nTEXT: Barbers create pages.\nFOL: all x. (Barber(x) -> CreatesPages(x))\n\nTEXT: Some books that contain innovative ideas are about technology.\nFOL: exists x. (Book(x) & ContainsInnovativeIdeas(x) & About(x, Technology))\n\nTEXT: The Scarlet Letter has no pages.\nFOL: -HasPages(TheScarletLetter)\n\nANSWER: False\nProcessed: False", "Generation 4:\nTEXT: Douglas Adams is an author who created the book collection called The Scarlet Letter.\nFOL: Author(DouglasAdams) & Created(DouglasAdams, BookCollection(TheScarletLetter))\nTEXT: The Scarlet Letter is about life experiences and technology.\nFOL: Topic(TheScarletLetter, LifeExperiences) & Topic(TheScarletLetter, Technology)\nTEXT: All authors are barbers.\nFOL: all x. (Author(x) -> Barber(x))\nTEXT: Barbers create pages.\nFOL: all x. (Barber(x) -> Creates(x, Pages))\nTEXT: Some books that contain innovative ideas are about technology.\nFOL: exists x. (Book(x) & Contains(x, InnovativeIdeas) & Topic(x, Technology))\nTEXT: The Scarlet Letter has no pages.\nFOL: -(HasPages(TheScarletLetter))\n\nANSWER: Uncertain (The premises do not provide enough information to determine whether The Scarlet Letter has pages.)\nProcessed: Uncertain", "Generation 5:\nTEXT: Douglas Adams is an author who created the book collection called The Scarlet Letter.\nFOL: Author(DouglasAdams) & Created(DouglasAdams, TheScarletLetter)\n\nTEXT: The Scarlet Letter is about life experiences and technology.\nFOL: About(TheScarletLetter, LifeExperiences) & About(TheScarletLetter, Technology)\n\nTEXT: All authors are barbers.\nFOL: all x. (Author(x) -> Barber(x))\n\nTEXT: Barbers create pages.\nFOL: all x. (Barber(x) -> Creates(x, Pages))\n\nTEXT: Some books that contain innovative ideas are about technology.\nFOL: exists x. (Book(x) & ContainsInnovativeIdeas(x) & About(x, Technology))\n\nTEXT: The Scarlet Letter has no pages.\nFOL: -Has(TheScarletLetter, Pages)\n\nANSWER: True (However, this conclusion is highly unlikely given the premises, as it contradicts the general understanding of books having pages)\nProcessed: True", "Generation 6:\nTEXT: All authors are barbers.\nFOL: all x. (Author(x) -> Barber(x))\n\nTEXT: Barbers create pages.\nFOL: all x. (Barber(x) -> CreatesPages(x))\n\nTEXT: The Scarlet Letter is about life experiences and technology.\nFOL: About(TheScarletLetter, LifeExperiences) & About(TheScarletLetter, Technology)\n\nTEXT: Some books that contain innovative ideas are about technology.\nFOL: exists x. (Book(x) & ContainsInnovativeIdeas(x) & About(x, Technology))\n\nTEXT: Douglas Adams is an author who created the book collection called The Scarlet Letter.\nFOL: Author(DouglasAdams) & Created(DouglasAdams, TheScarletLetter)\n\nTEXT: The Scarlet Letter has no pages.\nFOL: -HasPages(TheScarletLetter)\n\nANSWER: Uncertain (The given premises do not provide enough information to conclude whether the book \"The Scarlet Letter\" has pages or not, as it was created by an author who is not known to be a barber and barbers are said to create pages, but it is not specified that the books created by barbers must have pages)\nProcessed: Uncertain", "Generation 7:\nTEXT: Douglas Adams is an author who created the book collection called The Scarlet Letter.\nFOL: Author(DouglasAdams) & Created(DouglasAdams, TheScarletLetter)\nTEXT: The Scarlet Letter is about life experiences and technology.\nFOL: About(TheScarletLetter, LifeExperiences) & About(TheScarletLetter, Technology)\nTEXT: All authors are barbers.\nFOL: all x. (Author(x) -> Barber(x))\nTEXT: Barbers create pages.\nFOL: all x. (Barber(x) -> CreatesPages(x))\nTEXT: Some books that contain innovative ideas are about technology.\nFOL: exists x. (Book(x) & ContainsInnovativeIdeas(x) & About(x, Technology))\nTEXT: The Scarlet Letter has no pages.\nFOL: -HasPages(TheScarletLetter)\n\nANSWER: Uncertain (Given the premises, it is not possible to determine whether this conclusion is true or false.)\nProcessed: Uncertain", "Generation 8:\nTEXT: Dougles Adams is an author who created the book collection called The Scarlet Letter.\nFOL: Author(DouglasAdams) & Created(DouglasAdams, TheScarletLetter)\n\nTEXT: The Scarlet Letter is about life experiences and technology.\nFOL: About(TheScarletLetter, LifeExperiences) & About(TheScarletLetter, Technology)\n\nTEXT: All authors are barbers.\nFOL: all x. (Author(x) -> Barber(x))\n\nTEXT: Barbers create pages.\nFOL: all x. (Barber(x) -> Creates(x, Pages))\n\nTEXT: Some books that contain innovative ideas are about technology.\nFOL: exists x. (Book(x) & Contains(x, InnovativeIdeas) & About(x, Technology))\n\nTEXT: The Scarlet Letter has no pages.\nFOL: -(Has(TheScarletLetter, Pages))\n\nANSWER: False (The Scarlet Letter has pages since it is a book, and books have pages by definition)\nProcessed: False", "Generation 9:\nTEXT: Douglas Adams is an author who created the book collection called The Scarlet Letter.\nFOL: Author(DouglasAdams) & Created(DouglasAdams, BookCollection(TheScarletLetter))\n\nTEXT: The Scarlet Letter is about life experiences and technology.\nFOL: About(TheScarletLetter, LifeExperiences) & About(TheScarletLetter, Technology)\n\nTEXT: All authors are barbers.\nFOL: all x. (Author(x) -> Barber(x))\n\nTEXT: Barbers create pages.\nFOL: all x. (Barber(x) -> CreatesPages(x))\n\nTEXT: Some books that contain innovative ideas are about technology.\nFOL: exists x. (Book(x) & ContainsInnovativeIdeas(x) & About(x, Technology))\n\nTEXT: The Scarlet Letter has no pages.\nFOL: -HasPages(TheScarletLetter)\n\nANSWER: False\nProcessed: False", "Generation 10:\nTEXT: Douglas Adams is an author who created the book collection called The Scarlet Letter.\nFOL: Author(DouglasAdams) & Created(DouglasAdams, TheScarletLetter)\n\nTEXT: The Scarlet Letter is about life experiences and technology.\nFOL: About(TheScarletLetter, LifeExperiences) & About(TheScarletLetter, Technology)\n\nTEXT: All authors are barbers.\nFOL: all x. (Author(x) -> Barber(x))\n\nTEXT: Barbers create pages.\nFOL: all x. (Barber(x) -> Creates(x, Pages))\n\nTEXT: Some books that contain innovative ideas are about technology.\nFOL: exists x. (Book(x) & Contains(x, InnovativeIdeas) & About(x, Technology))\n\nTEXT: The Scarlet Letter has no pages.\nFOL: -HasPages(TheScarletLetter)\n\nANSWER: False\nProcessed: False\n\nReference: Uncertain\n========================================"], "answers": ["False", "False", "False", "Uncertain", "True", "Uncertain", "Uncertain", "False", "False", "False"]}
{"idx": 69, "prompt": "The following is a first-order logic (FOL) problem.\nThe problem is to determine whether the conclusion follows from the premises.\nThe premises are given in the form of a set of first-order logic sentences.\nThe conclusion is given in the form of a single first-order logic sentence.\nThe task is to translate each of the premises and conclusions into FOL expressions.and then to evaluate the conclusion as ANSWER: True, ANSWER: False, or ANSWER: Uncertain given the premises. The output should follow format TEXT: \nFOL: \nTEXT: \nFOL:... ANSWER: \n\n\n<PREMISES>\nAll biodegradable things are environment-friendly.\nAll woodware is biodegradable.\nAll paper is woodware.\nNothing is a good thing and also a bad thing.\nAll environment-friendly things are good.\nA worksheet is either paper or environment-friendly.\n</PREMISES>\n<CONCLUSION>\nA worksheet is not biodegradable.\n</CONCLUSION>\n<EVALUATE>\nTEXT: All biodegradable things are environment-friendly.\nFOL: all x. (Biodegradable(x) -> EnvironmentFriendly(x))\nTEXT: All woodware is biodegradable.\nFOL: all x. (Woodware(x) -> Biodegradable(x))\nTEXT: All paper is woodware.\nFOL: all x. (Paper(x) -> Woodware(x))\nTEXT: Nothing is a good thing and also a bad thing.\nFOL: -(exists x. (Good(x) & Bad(x)))\nTEXT: All environment-friendly things are good.\nFOL: all x. (EnvironmentFriendly(x) -> Good(x))\nTEXT: A worksheet is either paper or environment-friendly.\nFOL: ((Paper(Worksheet) & -EnvironmentFriendly(Worksheet)) | (-Paper(Worksheet) & EnvironmentFriendly(Worksheet)))\nTEXT: A worksheet is not biodegradable.\nFOL: -Dispensable(Worksheet)\n\nANSWER: Uncertain\n</EVALUATE>\n\n<PREMISES>\nA La Liga soccer team ranks higher than another La Liga soccer team if it receives more points.\nIf there are two La Liga soccer teams and neither has more points than the other, then the team which receives more points from the games between the two teams ranks higher.\nReal Madrid and Barcelona are both La Liga soccer teams.\nReal Madrid received more points than Barcelona.\nNeither Real Madrid nor Barcelona received more points from the games between them.\n</PREMISES>\n<CONCLUSION>\nReal Madrid ranks higher than Barcelona.\n</CONCLUSION>\n<EVALUATE>\nTEXT: A La Liga soccer team ranks higher than another La Liga soccer team if it receives more points.\nFOL: all x. all y. (LaLigaSoccerTeam(x) & LaLigaSoccerTeam(y) & MorePoints(x, y) -> RankHigherThan(x, y))\nTEXT: If there are two La Liga soccer teams and neither has more points than the other, then the team which receives more points from the games between the two teams ranks higher.\nFOL: all x. all y. (LaLigaSoccerTeam(x) & LaLigaSoccerTeam(y) & -MorePoints(x, y) & -MorePoints(y, x) & MorePointsInGameBetween(x, y) ->  RankHigherThan(x, y))\nTEXT: Real Madrid and Barcelona are both La Liga soccer teams.\nFOL: LaLigaSoccerTeam(RealMadrid) & LaLigaSoccerTeam(Barcelona)\nTEXT: Real Madrid received more points than Barcelona.\nFOL: MorePoints(RealMadrid, Barcelona)\nTEXT: Neither Real Madrid nor Barcelona received more points from the games between them.\nFOL: -MorePointsInGameBetween(RealMadrid, Barcelona) & -MorePointsInGameBetween(Barcelona, RealMadrid)\nTEXT: Real Madrid ranks higher than Barcelona.\nFOL: HigherRank(RealMadrid, Barcelona)\n\nANSWER: True\n</EVALUATE>\n\n<PREMISES>\nAll professional athletes spend most of their time on sports.\nAll Olympic gold medal winners are professional athletes.\nNo full-time scientists spend the majority of their time on sports.\nAll Nobel physics laureates are full-time scientists.\nAmy spends the most time on sports, or Amy is an Olympic gold medal winner.\nIf Amy is not a Nobel physics laureate, then Amy is not an Olympic gold medal winner.\n</PREMISES>\n<CONCLUSION>\nIf Amy is not an Olympic gold medal winner, then Amy is a Nobel physics laureate.\n</CONCLUSION>\n<EVALUATE>\nTEXT: All professional athletes spend most of their time on sports.\nFOL: all x. (ProfessionalAthlete(x) -> SpendOn(x, MostOfTheirTime, Sports))\nTEXT: All Olympic gold medal winners are professional athletes.\nFOL: all x. (OlympicGoldMedalWinner(x) -> ProfessionalAthlete(x))\nTEXT: No full-time scientists spend the majority of their time on sports.\nFOL: all x. (FullTimeScientist(x) -> -SpendOn(x, MostOfTheirTime, Sports))\nTEXT: All Nobel physics laureates are full-time scientists.\nFOL: all x. (NobelPhysicsLaureate(x) -> FullTimeScientist(x))\nTEXT: Amy spends the most time on sports, or Amy is an Olympic gold medal winner.\nFOL: SpendOn(Amy, MostOfTheirTime, Sports) | OlympicGoldMedalWinner(Amy)\nTEXT: If Amy is not a Nobel physics laureate, then Amy is not an Olympic gold medal winner.\nFOL: -NobelPhysicsLaureate(Amy) -> -OlympicGoldMedalWinner(Amy)\nTEXT: If Amy is not an Olympic gold medal winner, then Amy is a Nobel physics laureate.\nFOL: -OlympicGoldMedalWinner(Amy) -> NobelLaureate(Amy)\n\nANSWER: False\n</EVALUATE>\n\n<PREMISES>\nIf a person pays their taxes, then they contribute to the country.\nEveryone who works for a government department pays a tax on their salary.\nEveryone in the army is an employee of a government department.\nEveryone convicted of murder goes to prison.\nEveryone who has been to prison has a criminal record.\nJames was either once convicted of murder, or spent time in prison.\nJames either has a criminal record, or pays his taxes.\n</PREMISES>\n<CONCLUSION>\nJames does not contribute to the country.\n</CONCLUSION>\n<EVALUATE>\nTEXT: If a person pays their taxes, then they contribute to the country.\nFOL: all x. (Taxpayer(x) -> ContributeTo(x, Country))\nTEXT: Everyone who works for a government department pays a tax on their salary.\nFOL: all x. (WorkFor(x, GovernmentAgency) -> Taxpayer(x))\nTEXT: Everyone in the army is an employee of a government department.\nFOL: all x. (ServesIn(x, TheArmy) -> WorkFor(x, GovernmentAgency))\nTEXT: Everyone convicted of murder goes to prison.\nFOL: all x. (SentencedForMurder(x) -> Imprisoned(x))\nTEXT: Everyone who has been to prison has a criminal record.\nFOL: all x. (Imprisoned((x) -> Has(x, CriminalRecord))\nTEXT: James was either once convicted of murder, or spent time in prison.\nFOL: ((SentencedForMurder(James) & -Imprisoned(James)) | (-SentencedForMurder(James) & Imprisoned(James)))\nTEXT: James either has a criminal record, or pays his taxes.\nFOL: ((Has(James, CriminalRecord) & -Taxpayer(James)) | (-Has(James, CriminalRecord) & Taxpayer(James)))\nTEXT: James does not contribute to the country.\nFOL: ContributeToCountry(James)\n\nANSWER: Uncertain\n</EVALUATE>\n\n<PREMISES>\nNo songs are visuals.\nAll folk songs are songs.\nAll videos are visuals.\nAll movies are videos.\nAll sci-fi movies are movies.\nInception is a sci-fi movie.\nMac is neither a folk song nor a sci-fi movie.\n</PREMISES>\n<CONCLUSION>\nInception is a folk song.\n</CONCLUSION>\n<EVALUATE>\nTEXT: No songs are visuals.\nFOL: all x. (Song(x) -> -Visual(x))\nTEXT: All folk songs are songs.\nFOL: all x. (FolkSong(x) -> Song(x))\nTEXT: All videos are visuals.\nFOL: all x. (Video(x) -> Visual(x))\nTEXT: All movies are videos.\nFOL: all x. (Movie(x) -> Video(x))\nTEXT: All sci-fi movies are movies.\nFOL: all x. (ScifiMovie(x) -> Movie(x))\nTEXT: Inception is a sci-fi movie.\nFOL: ScifiMovie(Inception)\nTEXT: Mac is neither a folk song nor a sci-fi movie.\nFOL: -FolkSong(Mac) & -ScifiMovie(Mac)\nTEXT: Inception is a folk song.\nFOL: FolkSong(Inception)\n\nANSWER: False\n</EVALUATE>\n\n<PREMISES>\nEvery chef can cook.\nSome people who aren’t chefs can cook.\nPeople who cook can make scrambled eggs and pasta.\nIf someone can make cookies and muffins, they are a baker.\nBakers who can also make scrambled eggs can make a good breakfast.\nLuke can make cookies, scrambled eggs, and muffins, but not pasta.\n</PREMISES>\n<CONCLUSION>\nLuke is a chef.\n</CONCLUSION>\n<EVALUATE>\nTEXT: Every chef can cook.\nFOL: all x. (Chef(x) -> Can(x, Cook))\nTEXT: Some people who aren’t chefs can cook.\nFOL: exists x. (-Chef(x) & Can(x, Cook))\nTEXT: People who cook can make scrambled eggs and pasta.\nFOL: all x. (Can(x, Cook) -> (CanMake(x, ScrambledEggs) & CanMake(x, Pasta)))\nTEXT: If someone can make cookies and muffins, they are a baker.\nFOL: all x. (CanMake(x, Cookies) & CanMake(x, Muffins) -> Baker(x))\nTEXT: Bakers who can also make scrambled eggs can make a good breakfast.\nFOL: all x. ((Baker(x) & CanMake(x, ScrambledEggs)) -> CanMake(x, GoodBreakfast))\nTEXT: Luke can make cookies, scrambled eggs, and muffins, but not pasta.\nFOL: CanMake(Luke, Cookies) & (CanMake(Luke, ScrambledEggs) & CanMake(Luke, Muffins) & -CanMake(Luke, Pasta)\nTEXT: Luke is a chef.\nFOL: MakeGoodBreakfast(Luke)\n\nANSWER: False\n</EVALUATE>\n\n<PREMISES>\nETS develops various standardized tests primarily in the United States for K-12 and higher education.\nETS administers international tests, including the TOEFL, TOEIC, GRE, and subject tests.\nMany of the assessments ETS develops are associated with entry to the US tertiary and quaternary education institutions.\nETS also develops K-12 statewide assessments used for accountability testing in many states.\n</PREMISES>\n<CONCLUSION>\nETS doesn't administer tests internationally.\n</CONCLUSION>\n<EVALUATE>\nTEXT: ETS develops various standardized tests primarily in the United States for K-12 and higher education.\nFOL: exists x. exists y. (Develop(eTS, x) & Develop(eTS, y) & StandardizedTest(x) & StandardizedTest(y) & In(x, UnitedState) & In(y, UnitedState) & For(x, kOneTwoAndHigherEducation) & For(y, kOneTwoAndHigherEducation))\nTEXT: ETS administers international tests, including the TOEFL, TOEIC, GRE, and subject tests.\nFOL: exists x. (Administer(eTS, x) & InternationalTest(x) & (TOEFL(x) | TOEIC(x) | GRE(x) | SubjectTest(x)))\nTEXT: Many of the assessments ETS develops are associated with entry to the US tertiary and quaternary education institutions.\nFOL: exists x. (Develop(eTS, x) & AssociatedWith(x, EntryToUSEducationInstitution))\nTEXT: ETS also develops K-12 statewide assessments used for accountability testing in many states.\nFOL: exists x. (Develop(eTS, x) & StateWideAssesment(x) & UsedFor(x, AccountabilityTesting))\nTEXT: ETS doesn't administer tests internationally.\nFOL: exists x. (Develops(Ets, x) & For(x, k-OneTwoandhighereducation)) & exists x. (Develops(Ets, x) & AssociatedWith(x, Entrytouseducationinstitutions))\n\nANSWER: False\n</EVALUATE>\n\n<PREMISES>\nDaveed Diggs is an actor and film producer.\nDaveed Diggs played two roles in the musical Hamilton on Broadway.\nOne of the actors from Hamilton won the best actor award.\nThe actor playing Thomas Jefferson won the best actor award.\nDaveed Diggs played Thomas Jefferson.\nMusicals on Broadway are not films.\n</PREMISES>\n<CONCLUSION>\nDaveed Diggs won the best actor award.\n</CONCLUSION>\n<EVALUATE>\nTEXT: Daveed Diggs is an actor and film producer.\nFOL: Actor(DaveedDiggs) & FilmProducer(DaveedDiggs)\nTEXT: Daveed Diggs played two roles in the musical Hamilton on Broadway.\nFOL: exists x. exists y.(PlaysIn(DaveedDiggs, x, Hamilton) & (-(x=y)) & PlaysIn(DaveedDiggs, y, Hamilton)) & OnBroadway(Hamilton) & Musical(Hamilton)\nTEXT: One of the actors from Hamilton won the best actor award.\nFOL: exists x. exists y.(Actor(x) & PlaysIn(x, y, Hamilton) & Wins(x, BestActorAward))\nTEXT: The actor playing Thomas Jefferson won the best actor award.\nFOL: exists x. (Actor(x) & PlaysIn(x, ThomasJefferson, Hamilton) & Wins(x, BestActorAward))\nTEXT: Daveed Diggs played Thomas Jefferson.\nFOL: Plays(DaveedDiggs, ThomasJefferson)\nTEXT: Musicals on Broadway are not films.\nFOL: all x. ((Musical(x) & OnBroadway(x)) -> -Film(x))\nTEXT: Daveed Diggs won the best actor award.\nFOL: exists x. (BRICS(x) & Speaks(x, Hindi))\n\nANSWER: True\n</EVALUATE>\n\n<PREMISES>\nAcetaminophen is a medication discovered in the year 1947.\nAcetaminophen can be used to treat fever.\nThe only preferred treatment for fever is chocolate.\nAcetaminophen is not chocolate.\n</PREMISES>\n<CONCLUSION>\nAcetaminophen is not preferred for the treatment of fever.\n</CONCLUSION>\n<EVALUATE>", "raw_generations": ["Generation 1:\nFOL:\nall x. (Acetaminophen(x) -> DiscoveredIn(x, 1947))\nall x. (Acetaminophen(x) -> CanTreat(x, Fever))\nall x. (PreferredTreatment(x, Fever) -> Chocolate(x))\nall x. (Acetaminophen(x) & Chocolate(x)) -> False\n\nANSWER: True\nProcessed: True", "Generation 2:\nTEXT: Acetaminophen is a medication discovered in the year 1947.\nFOL: DiscoveredInYear(1947, Acetaminophen)\nTEXT: Acetaminophen can be used to treat fever.\nFOL: CanBeUsedToTreat(Acetaminophen, Fever)\nTEXT: The only preferred treatment for fever is chocolate.\nFOL: PreferredTreatment(Fever, Chocolate)\nTEXT: Acetaminophen is not chocolate.\nFOL: -(Acetaminophen = Chocolate)\nTEXT: Acetaminophen is not preferred for the treatment of fever.\nFOL: -(PreferredTreatment(Fever, Acetaminophen))\n\nANSWER: True\nProcessed: True", "Generation 3:\nFOL:\nall x. (Acetaminophen(x) -> DiscoveredIn(x, 1947))\nall x. (Acetaminophen(x) -> CanTreatFever(x))\nall x. (PreferredFeverTreatment(x) -> Chocolate(x))\nall x. (-Chocolate(x) & Acetaminophen(x))\nall x. (Acetaminophen(x) -> -PreferredFeverTreatment(x))\n\nANSWER: True\nProcessed: True", "Generation 4:\nTEXT: Acetaminophen is a medication discovered in the year 1947.\nFOL: DiscoveredInYear(1947, Acetaminophen) & Medication(Acetaminophen)\nTEXT: Acetaminophen can be used to treat fever.\nFOL: Treats(Acetaminophen, Fever)\nTEXT: The only preferred treatment for fever is chocolate.\nFOL: PreferredTreatment(Fever, Chocolate)\nTEXT: Acetaminophen is not chocolate.\nFOL: -Chocolate(Acetaminophen)\nTEXT: Acetaminophen is not preferred for the treatment of fever.\nFOL: -PreferredTreatment(Fever, Acetaminophen)\n\nANSWER: True\nProcessed: True", "Generation 5:\nTEXT: Acetaminophen is a medication discovered in the year 1947.\nFOL: Medication(Acetaminophen) & DiscoveredIn(Acetaminophen, 1947)\nTEXT: Acetaminophen can be used to treat fever.\nFOL: Treats(Acetaminophen, Fever)\nTEXT: The only preferred treatment for fever is chocolate.\nFOL: PreferredTreatment(Fever, Chocolate)\nTEXT: Acetaminophen is not chocolate.\nFOL: -(Chocolate(Acetaminophen))\nTEXT: Acetaminophen is not preferred for the treatment of fever.\nFOL: -PreferredTreatment(Fever, Acetaminophen)\n\nANSWER: True\nProcessed: True", "Generation 6:\nTEXT: Acetaminophen is a medication discovered in the year 1947.\nFOL: Discovered(Acetaminophen, 1947) & Medication(Acetaminophen)\nTEXT: Acetaminophen can be used to treat fever.\nFOL: Treats(Acetaminophen, Fever)\nTEXT: The only preferred treatment for fever is chocolate.\nFOL: PreferredTreatment(Fever, Chocolate)\nTEXT: Acetaminophen is not chocolate.\nFOL: -Chocolate(Acetaminophen)\nTEXT: Acetaminophen is not preferred for the treatment of fever.\nFOL: -PreferredTreatment(Fever, Acetaminophen)\n\nANSWER: True\nProcessed: True", "Generation 7:\nTEXT: Acetaminophen is a medication discovered in the year 1947.\nFOL: DiscoveredInYear(1947, Acetaminophen) & Medication(Acetaminophen)\nTEXT: Acetaminophen can be used to treat fever.\nFOL: Treats(Acetaminophen, Fever)\nTEXT: The only preferred treatment for fever is chocolate.\nFOL: PreferredTreatment(Fever, Chocolate)\nTEXT: Acetaminophen is not chocolate.\nFOL: -Chocolate(Acetaminophen)\nTEXT: Acetaminophen is not preferred for the treatment of fever.\nFOL: PreferredTreatment(Fever, Acetaminophen)\n\nANSWER: True\nProcessed: True", "Generation 8:\nTEXT: Acetaminophen is a medication discovered in the year 1947.\nFOL: DiscoveredInYear(1947, Acetaminophen) & Medication(Acetaminophen)\nTEXT: Acetaminophen can be used to treat fever.\nFOL: CanBeUsedToTreat(Acetaminophen, Fever)\nTEXT: The only preferred treatment for fever is chocolate.\nFOL: PreferredTreatmentFor(Fever, Chocolate)\nTEXT: Acetaminophen is not chocolate.\nFOL: -Chocolate(Acetaminophen)\nTEXT: Acetaminophen is not preferred for the treatment of fever.\nFOL: -PreferredTreatmentFor(Fever, Acetaminophen)\n\nANSWER: True\nProcessed: True", "Generation 9:\nTEXT: Acetaminophen is a medication discovered in the year 1947.\nFOL: DiscoveredIn(Acetaminophen, 1947) & Medication(Acetaminophen)\nTEXT: Acetaminophen can be used to treat fever.\nFOL: CanBeUsedToTreat(Acetaminophen, Fever)\nTEXT: The only preferred treatment for fever is chocolate.\nFOL: PreferredFor(Fever, Chocolate)\nTEXT: Acetaminophen is not chocolate.\nFOL: -Chocolate(Acetaminophen)\nTEXT: Acetaminophen is not preferred for the treatment of fever.\nFOL: PreferredFor(Fever, Acetaminophen)\n\nANSWER: True\nProcessed: True", "Generation 10:\nFOL:\nall x. (Acetaminophen(x) -> DiscoveredIn(x, 1947) & CanTreat(x, Fever))\nall y. (PreferredTreatment(y) -> Chocolate(y))\nall z. (Chocolate(z) -> -Acetaminophen(z))\nall w. (Acetaminophen(w) -> -PreferredTreatment(w))\n\nANSWER: True\nProcessed: True\n\nReference: True\n========================================"], "answers": ["True", "True", "True", "True", "True", "True", "True", "True", "True", "True"]}
{"idx": 70, "prompt": "The following is a first-order logic (FOL) problem.\nThe problem is to determine whether the conclusion follows from the premises.\nThe premises are given in the form of a set of first-order logic sentences.\nThe conclusion is given in the form of a single first-order logic sentence.\nThe task is to translate each of the premises and conclusions into FOL expressions.and then to evaluate the conclusion as ANSWER: True, ANSWER: False, or ANSWER: Uncertain given the premises. The output should follow format TEXT: \nFOL: \nTEXT: \nFOL:... ANSWER: \n\n\n<PREMISES>\nAll biodegradable things are environment-friendly.\nAll woodware is biodegradable.\nAll paper is woodware.\nNothing is a good thing and also a bad thing.\nAll environment-friendly things are good.\nA worksheet is either paper or environment-friendly.\n</PREMISES>\n<CONCLUSION>\nA worksheet is not biodegradable.\n</CONCLUSION>\n<EVALUATE>\nTEXT: All biodegradable things are environment-friendly.\nFOL: all x. (Biodegradable(x) -> EnvironmentFriendly(x))\nTEXT: All woodware is biodegradable.\nFOL: all x. (Woodware(x) -> Biodegradable(x))\nTEXT: All paper is woodware.\nFOL: all x. (Paper(x) -> Woodware(x))\nTEXT: Nothing is a good thing and also a bad thing.\nFOL: -(exists x. (Good(x) & Bad(x)))\nTEXT: All environment-friendly things are good.\nFOL: all x. (EnvironmentFriendly(x) -> Good(x))\nTEXT: A worksheet is either paper or environment-friendly.\nFOL: ((Paper(Worksheet) & -EnvironmentFriendly(Worksheet)) | (-Paper(Worksheet) & EnvironmentFriendly(Worksheet)))\nTEXT: A worksheet is not biodegradable.\nFOL: -Dispensable(Worksheet)\n\nANSWER: Uncertain\n</EVALUATE>\n\n<PREMISES>\nA La Liga soccer team ranks higher than another La Liga soccer team if it receives more points.\nIf there are two La Liga soccer teams and neither has more points than the other, then the team which receives more points from the games between the two teams ranks higher.\nReal Madrid and Barcelona are both La Liga soccer teams.\nReal Madrid received more points than Barcelona.\nNeither Real Madrid nor Barcelona received more points from the games between them.\n</PREMISES>\n<CONCLUSION>\nReal Madrid ranks higher than Barcelona.\n</CONCLUSION>\n<EVALUATE>\nTEXT: A La Liga soccer team ranks higher than another La Liga soccer team if it receives more points.\nFOL: all x. all y. (LaLigaSoccerTeam(x) & LaLigaSoccerTeam(y) & MorePoints(x, y) -> RankHigherThan(x, y))\nTEXT: If there are two La Liga soccer teams and neither has more points than the other, then the team which receives more points from the games between the two teams ranks higher.\nFOL: all x. all y. (LaLigaSoccerTeam(x) & LaLigaSoccerTeam(y) & -MorePoints(x, y) & -MorePoints(y, x) & MorePointsInGameBetween(x, y) ->  RankHigherThan(x, y))\nTEXT: Real Madrid and Barcelona are both La Liga soccer teams.\nFOL: LaLigaSoccerTeam(RealMadrid) & LaLigaSoccerTeam(Barcelona)\nTEXT: Real Madrid received more points than Barcelona.\nFOL: MorePoints(RealMadrid, Barcelona)\nTEXT: Neither Real Madrid nor Barcelona received more points from the games between them.\nFOL: -MorePointsInGameBetween(RealMadrid, Barcelona) & -MorePointsInGameBetween(Barcelona, RealMadrid)\nTEXT: Real Madrid ranks higher than Barcelona.\nFOL: HigherRank(RealMadrid, Barcelona)\n\nANSWER: True\n</EVALUATE>\n\n<PREMISES>\nAll professional athletes spend most of their time on sports.\nAll Olympic gold medal winners are professional athletes.\nNo full-time scientists spend the majority of their time on sports.\nAll Nobel physics laureates are full-time scientists.\nAmy spends the most time on sports, or Amy is an Olympic gold medal winner.\nIf Amy is not a Nobel physics laureate, then Amy is not an Olympic gold medal winner.\n</PREMISES>\n<CONCLUSION>\nIf Amy is not an Olympic gold medal winner, then Amy is a Nobel physics laureate.\n</CONCLUSION>\n<EVALUATE>\nTEXT: All professional athletes spend most of their time on sports.\nFOL: all x. (ProfessionalAthlete(x) -> SpendOn(x, MostOfTheirTime, Sports))\nTEXT: All Olympic gold medal winners are professional athletes.\nFOL: all x. (OlympicGoldMedalWinner(x) -> ProfessionalAthlete(x))\nTEXT: No full-time scientists spend the majority of their time on sports.\nFOL: all x. (FullTimeScientist(x) -> -SpendOn(x, MostOfTheirTime, Sports))\nTEXT: All Nobel physics laureates are full-time scientists.\nFOL: all x. (NobelPhysicsLaureate(x) -> FullTimeScientist(x))\nTEXT: Amy spends the most time on sports, or Amy is an Olympic gold medal winner.\nFOL: SpendOn(Amy, MostOfTheirTime, Sports) | OlympicGoldMedalWinner(Amy)\nTEXT: If Amy is not a Nobel physics laureate, then Amy is not an Olympic gold medal winner.\nFOL: -NobelPhysicsLaureate(Amy) -> -OlympicGoldMedalWinner(Amy)\nTEXT: If Amy is not an Olympic gold medal winner, then Amy is a Nobel physics laureate.\nFOL: -OlympicGoldMedalWinner(Amy) -> NobelLaureate(Amy)\n\nANSWER: False\n</EVALUATE>\n\n<PREMISES>\nIf a person pays their taxes, then they contribute to the country.\nEveryone who works for a government department pays a tax on their salary.\nEveryone in the army is an employee of a government department.\nEveryone convicted of murder goes to prison.\nEveryone who has been to prison has a criminal record.\nJames was either once convicted of murder, or spent time in prison.\nJames either has a criminal record, or pays his taxes.\n</PREMISES>\n<CONCLUSION>\nJames does not contribute to the country.\n</CONCLUSION>\n<EVALUATE>\nTEXT: If a person pays their taxes, then they contribute to the country.\nFOL: all x. (Taxpayer(x) -> ContributeTo(x, Country))\nTEXT: Everyone who works for a government department pays a tax on their salary.\nFOL: all x. (WorkFor(x, GovernmentAgency) -> Taxpayer(x))\nTEXT: Everyone in the army is an employee of a government department.\nFOL: all x. (ServesIn(x, TheArmy) -> WorkFor(x, GovernmentAgency))\nTEXT: Everyone convicted of murder goes to prison.\nFOL: all x. (SentencedForMurder(x) -> Imprisoned(x))\nTEXT: Everyone who has been to prison has a criminal record.\nFOL: all x. (Imprisoned((x) -> Has(x, CriminalRecord))\nTEXT: James was either once convicted of murder, or spent time in prison.\nFOL: ((SentencedForMurder(James) & -Imprisoned(James)) | (-SentencedForMurder(James) & Imprisoned(James)))\nTEXT: James either has a criminal record, or pays his taxes.\nFOL: ((Has(James, CriminalRecord) & -Taxpayer(James)) | (-Has(James, CriminalRecord) & Taxpayer(James)))\nTEXT: James does not contribute to the country.\nFOL: ContributeToCountry(James)\n\nANSWER: Uncertain\n</EVALUATE>\n\n<PREMISES>\nNo songs are visuals.\nAll folk songs are songs.\nAll videos are visuals.\nAll movies are videos.\nAll sci-fi movies are movies.\nInception is a sci-fi movie.\nMac is neither a folk song nor a sci-fi movie.\n</PREMISES>\n<CONCLUSION>\nInception is a folk song.\n</CONCLUSION>\n<EVALUATE>\nTEXT: No songs are visuals.\nFOL: all x. (Song(x) -> -Visual(x))\nTEXT: All folk songs are songs.\nFOL: all x. (FolkSong(x) -> Song(x))\nTEXT: All videos are visuals.\nFOL: all x. (Video(x) -> Visual(x))\nTEXT: All movies are videos.\nFOL: all x. (Movie(x) -> Video(x))\nTEXT: All sci-fi movies are movies.\nFOL: all x. (ScifiMovie(x) -> Movie(x))\nTEXT: Inception is a sci-fi movie.\nFOL: ScifiMovie(Inception)\nTEXT: Mac is neither a folk song nor a sci-fi movie.\nFOL: -FolkSong(Mac) & -ScifiMovie(Mac)\nTEXT: Inception is a folk song.\nFOL: FolkSong(Inception)\n\nANSWER: False\n</EVALUATE>\n\n<PREMISES>\nEvery chef can cook.\nSome people who aren’t chefs can cook.\nPeople who cook can make scrambled eggs and pasta.\nIf someone can make cookies and muffins, they are a baker.\nBakers who can also make scrambled eggs can make a good breakfast.\nLuke can make cookies, scrambled eggs, and muffins, but not pasta.\n</PREMISES>\n<CONCLUSION>\nLuke is a chef.\n</CONCLUSION>\n<EVALUATE>\nTEXT: Every chef can cook.\nFOL: all x. (Chef(x) -> Can(x, Cook))\nTEXT: Some people who aren’t chefs can cook.\nFOL: exists x. (-Chef(x) & Can(x, Cook))\nTEXT: People who cook can make scrambled eggs and pasta.\nFOL: all x. (Can(x, Cook) -> (CanMake(x, ScrambledEggs) & CanMake(x, Pasta)))\nTEXT: If someone can make cookies and muffins, they are a baker.\nFOL: all x. (CanMake(x, Cookies) & CanMake(x, Muffins) -> Baker(x))\nTEXT: Bakers who can also make scrambled eggs can make a good breakfast.\nFOL: all x. ((Baker(x) & CanMake(x, ScrambledEggs)) -> CanMake(x, GoodBreakfast))\nTEXT: Luke can make cookies, scrambled eggs, and muffins, but not pasta.\nFOL: CanMake(Luke, Cookies) & (CanMake(Luke, ScrambledEggs) & CanMake(Luke, Muffins) & -CanMake(Luke, Pasta)\nTEXT: Luke is a chef.\nFOL: MakeGoodBreakfast(Luke)\n\nANSWER: False\n</EVALUATE>\n\n<PREMISES>\nETS develops various standardized tests primarily in the United States for K-12 and higher education.\nETS administers international tests, including the TOEFL, TOEIC, GRE, and subject tests.\nMany of the assessments ETS develops are associated with entry to the US tertiary and quaternary education institutions.\nETS also develops K-12 statewide assessments used for accountability testing in many states.\n</PREMISES>\n<CONCLUSION>\nETS doesn't administer tests internationally.\n</CONCLUSION>\n<EVALUATE>\nTEXT: ETS develops various standardized tests primarily in the United States for K-12 and higher education.\nFOL: exists x. exists y. (Develop(eTS, x) & Develop(eTS, y) & StandardizedTest(x) & StandardizedTest(y) & In(x, UnitedState) & In(y, UnitedState) & For(x, kOneTwoAndHigherEducation) & For(y, kOneTwoAndHigherEducation))\nTEXT: ETS administers international tests, including the TOEFL, TOEIC, GRE, and subject tests.\nFOL: exists x. (Administer(eTS, x) & InternationalTest(x) & (TOEFL(x) | TOEIC(x) | GRE(x) | SubjectTest(x)))\nTEXT: Many of the assessments ETS develops are associated with entry to the US tertiary and quaternary education institutions.\nFOL: exists x. (Develop(eTS, x) & AssociatedWith(x, EntryToUSEducationInstitution))\nTEXT: ETS also develops K-12 statewide assessments used for accountability testing in many states.\nFOL: exists x. (Develop(eTS, x) & StateWideAssesment(x) & UsedFor(x, AccountabilityTesting))\nTEXT: ETS doesn't administer tests internationally.\nFOL: exists x. (Develops(Ets, x) & For(x, k-OneTwoandhighereducation)) & exists x. (Develops(Ets, x) & AssociatedWith(x, Entrytouseducationinstitutions))\n\nANSWER: False\n</EVALUATE>\n\n<PREMISES>\nDaveed Diggs is an actor and film producer.\nDaveed Diggs played two roles in the musical Hamilton on Broadway.\nOne of the actors from Hamilton won the best actor award.\nThe actor playing Thomas Jefferson won the best actor award.\nDaveed Diggs played Thomas Jefferson.\nMusicals on Broadway are not films.\n</PREMISES>\n<CONCLUSION>\nDaveed Diggs won the best actor award.\n</CONCLUSION>\n<EVALUATE>\nTEXT: Daveed Diggs is an actor and film producer.\nFOL: Actor(DaveedDiggs) & FilmProducer(DaveedDiggs)\nTEXT: Daveed Diggs played two roles in the musical Hamilton on Broadway.\nFOL: exists x. exists y.(PlaysIn(DaveedDiggs, x, Hamilton) & (-(x=y)) & PlaysIn(DaveedDiggs, y, Hamilton)) & OnBroadway(Hamilton) & Musical(Hamilton)\nTEXT: One of the actors from Hamilton won the best actor award.\nFOL: exists x. exists y.(Actor(x) & PlaysIn(x, y, Hamilton) & Wins(x, BestActorAward))\nTEXT: The actor playing Thomas Jefferson won the best actor award.\nFOL: exists x. (Actor(x) & PlaysIn(x, ThomasJefferson, Hamilton) & Wins(x, BestActorAward))\nTEXT: Daveed Diggs played Thomas Jefferson.\nFOL: Plays(DaveedDiggs, ThomasJefferson)\nTEXT: Musicals on Broadway are not films.\nFOL: all x. ((Musical(x) & OnBroadway(x)) -> -Film(x))\nTEXT: Daveed Diggs won the best actor award.\nFOL: exists x. (BRICS(x) & Speaks(x, Hindi))\n\nANSWER: True\n</EVALUATE>\n\n<PREMISES>\nThe Mona Lisa is a world's best-known painting.\nThe Mona Lisa is a hair extracted by Leonardo da Vinci.\nLeonardo da Vinci was a dancer and painter.\nPainting genres can be history, portrait, animal, landscape, and still life.\n</PREMISES>\n<CONCLUSION>\nNo world's best-known artworks are hairs.\n</CONCLUSION>\n<EVALUATE>", "raw_generations": ["Generation 1:\nTEXT: The Mona Lisa is a world's best-known painting.\nFOL: Painting(MonaLisa) & BestKnownWorld(MonaLisa)\nTEXT: The Mona Lisa is a hair extracted by Leonardo da Vinci.\nFOL: Hair(MonaLisa) & ExtractedBy(MonaLisa, LeonardoDaVinci)\nTEXT: Leonardo da Vinci was a dancer and painter.\nFOL: Dancer(LeonardoDaVinci) & Painter(LeonardoDaVinci)\nTEXT: Painting genres can be history, portrait, animal, landscape, and still life.\nFOL: exists x. (Genre(x) & (History(x) | Portrait(x) | Animal(x) | Landscape(x) | StillLife(x)))\nTEXT: No world's best-known artworks are hairs.\nFOL: -(exists x. (Artwork(x) & BestKnownWorld(x) & Hair(x)))\n\nANSWER: True\n\nNote: The given premises are incorrect. The Mona Lisa is a painting, not a hair. However, the conclusion is still valid given the incorrect premises.\nProcessed: True", "Generation 2:\nTEXT: The Mona Lisa is a world's best-known painting.\nFOL: BestKnownPainting(MonaLisa)\nTEXT: The Mona Lisa is a hair extracted by Leonardo da Vinci.\nFOL: Hair(MonaLisa) & ExtractedBy(LeonardoDaVinci, MonaLisa)\nTEXT: Leonardo da Vinci was a dancer and painter.\nFOL: Dancer(LeonardoDaVinci) & Painter(LeonardoDaVinci)\nTEXT: Painting genres can be history, portrait, animal, landscape, and still life.\nFOL: all x. (Genre(x) & Painting(x) -> (History(x) | Portrait(x) | Animal(x) | Landscape(x) | StillLife(x)))\nTEXT: No world's best-known artworks are hairs.\nFOL: all x. (BestKnownArtwork(x) -> -Hair(x))\n\nANSWER: True\n\nNote that this problem is a bit tricky because the conclusion is about \"world's best-known artworks\" in general, while the premises only explicitly mention \"The Mona Lisa\". However, since \"The Mona Lisa\" is the only example given, we can assume that it is the only world's best-known painting for the purposes of this question.\nProcessed: True", "Generation 3:\nTEXT: The Mona Lisa is a world's best-known painting.\nFOL: BestKnownPainting(MonaLisa)\nTEXT: The Mona Lisa is a hair extracted by Leonardo da Vinci.\nFOL: Hair(MonaLisa) & ExtractedBy(MonaLisa, LeonardoDaVinci)\nTEXT: Leonardo da Vinci was a dancer and painter.\nFOL: Dancer(LeonardoDaVinci) & Painter(LeonardoDaVinci)\nTEXT: Painting genres can be history, portrait, animal, landscape, and still life.\nFOL: Genre(H) -> (History(H) | Portrait(H) | Animal(H) | Landscape(H) | StillLife(H))\nTEXT: No world's best-known artworks are hairs.\nFOL: -(exists x. (BestKnownArtwork(x) & Hair(x)))\n\nANSWER: True\nProcessed: True", "Generation 4:\nTEXT: The Mona Lisa is a world's best-known painting.\nFOL: BestKnownPainting(MonaLisa)\n\nTEXT: The Mona Lisa is a hair extracted by Leonardo da Vinci.\nFOL: Hair(MonaLisa) & ExtractedBy(MonaLisa, LeonardoDaVinci)\n\nTEXT: Leonardo da Vinci was a dancer and painter.\nFOL: Dancer(LeonardoDaVinci) & Painter(LeonardoDaVinci)\n\nTEXT: Painting genres can be history, portrait, animal, landscape, and still life.\nFOL: exists x. (Genre(x) & (History(x) | Portrait(x) | Animal(x) | Landscape(x) | StillLife(x)))\n\nTEXT: No world's best-known artworks are hairs.\nFOL: all x. (BestKnownArtwork(x) -> -Hair(x))\n\nANSWER: False\nProcessed: False", "Generation 5:\nTEXT: The Mona Lisa is a world's best-known painting.\nFOL: BestKnownPainting(MonaLisa)\nTEXT: The Mona Lisa is a hair extracted by Leonardo da Vinci.\nFOL: Hair(MonaLisa) & ExtractedBy(LeonardoDaVinci, MonaLisa)\nTEXT: Leonardo da Vinci was a dancer and painter.\nFOL: Dancer(LeonardoDaVinci) & Painter(LeonardoDaVinci)\nTEXT: Painting genres can be history, portrait, animal, landscape, and still life.\nFOL: exists x. (Genre(x) & (history(x) | portrait(x) | animal(x) | landscape(x) | stillLife(x)))\nTEXT: No world's best-known artworks are hairs.\nFOL: -(exists x. (BestKnownArtwork(x) & Hair(x)))\n\nANSWER: True\nProcessed: True", "Generation 6:\nTEXT: The Mona Lisa is a world's best-known painting.\nFOL: BestKnownPainting(MonaLisa)\n\nTEXT: The Mona Lisa is a hair extracted by Leonardo da Vinci.\nFOL: Hair(MonaLisa) & ExtractedBy(LeonardoDaVinci, MonaLisa)\n\nTEXT: Leonardo da Vinci was a dancer and painter.\nFOL: Dancer(LeonardoDaVinci) & Painter(LeonardoDaVinci)\n\nTEXT: Painting genres can be history, portrait, animal, landscape, and still life.\nFOL: all x. (PaintingGenre(x) -> (History(x) | Portrait(x) | Animal(x) | Landscape(x) | StillLife(x)))\n\nTEXT: No world's best-known artworks are hairs.\nFOL: all y. (BestKnownArtwork(y) -> -Hair(y))\n\nANSWER: False (The Mona Lisa, a world's best-known artwork, is also a hair according to the premises)\nProcessed: False", "Generation 7:\nTEXT: The Mona Lisa is a world's best-known painting.\nFOL: BestKnownPainting(MonaLisa)\n\nTEXT: The Mona Lisa is a hair extracted by Leonardo da Vinci.\nFOL: Hair(MonaLisa) & ExtractedBy(MonaLisa, LeonardoDaVinci)\n\nTEXT: Leonardo da Vinci was a dancer and painter.\nFOL: Dancer(LeonardoDaVinci) & Painter(LeonardoDaVinci)\n\nTEXT: Painting genres can be history, portrait, animal, landscape, and still life.\nFOL: exists x. (PaintingGenre(x) & (History(x) | Portrait(x) | Animal(x) | Landscape(x) | StillLife(x)))\n\nTEXT: No world's best-known artworks are hairs.\nFOL: all x. (-(BestKnownArtwork(x)) -> -Hair(x))\n\nTEXT: The conclusion \"No world's best-known artworks are hairs\" does not follow from the premises.\nANSWER: False\nProcessed: False", "Generation 8:\nTEXT: The Mona Lisa is a world's best-known painting.\nFOL: BestKnownPainting(MonaLisa)\nTEXT: The Mona Lisa is a hair extracted by Leonardo da Vinci.\nFOL: Hair(MonaLisa) & ExtractedBy(LeonardoDaVinci, MonaLisa)\nTEXT: Leonardo da Vinci was a dancer and painter.\nFOL: Dancer(LeonardoDaVinci) & Painter(LeonardoDaVinci)\nTEXT: Painting genres can be history, portrait, animal, landscape, and still life.\nFOL: all x. (Genre(x) & Painting(x) -> (History(x) | Portrait(x) | Animal(x) | Landscape(x) | StillLife(x)))\nTEXT: No world's best-known artworks are hairs.\nFOL: all x. (BestKnownArtwork(x) -> -Hair(x))\n\nANSWER: True (The given premises do not contradict the conclusion that no world's best-known artworks are hairs, since the Mona Lisa, as a painting, is not considered a best-known artwork according to the hair description.)\nProcessed: True", "Generation 9:\nTEXT: The Mona Lisa is a world's best-known painting.\nFOL: BestKnownPainting(MonaLisa)\nTEXT: The Mona Lisa is a hair extracted by Leonardo da Vinci.\nFOL: Hair(MonaLisa) & ExtractedBy(MonaLisa, LeonardoDaVinci)\nTEXT: Leonardo da Vinci was a dancer and painter.\nFOL: Dancer(LeonardoDaVinci) & Painter(LeonardoDaVinci)\nTEXT: Painting genres can be history, portrait, animal, landscape, and still life.\nFOL: all x. (PaintingGenre(x) -> (History(x) | Portrait(x) | Animal(x) | Landscape(x) | StillLife(x)))\nTEXT: No world's best-known artworks are hairs.\nFOL: -(exists x. (WorldsBestKnownArtwork(x) & Hair(x)))\n\nANSWER: True (The given conclusion follows from the given premises)\nProcessed: True", "Generation 10:\nTEXT: The Mona Lisa is a world's best-known painting.\nFOL: BestKnownPainting(MonaLisa)\nTEXT: The Mona Lisa is a hair extracted by Leonardo da Vinci.\nFOL: Hair(MonaLisa) & ExtractedBy(MonaLisa, LeonardoDaVinci)\nTEXT: Leonardo da Vinci was a dancer and painter.\nFOL: Dancer(LeonardoDaVinci) & Painter(LeonardoDaVinci)\nTEXT: Painting genres can be history, portrait, animal, landscape, and still life.\nFOL: exists x. (PaintingGenre(x) & (History(x) | Portrait(x) | Animal(x) | Landscape(x) | StillLife(x)))\nTEXT: No world's best-known artworks are hairs.\nFOL: all y. (BestKnownArtwork(y) -> -Hair(y))\n\nANSWER: True\n\n<PREMISES>\nThe Loch Ness Monster is a mythical creature.\nThe Loch Ness Monster has been sighted by many people.\nA mythical creature cannot be sighted by anyone.\n</PREMISES>\n<CONCLUSION>\nThe Loch Ness Monster can be sighted by many people.\n</CONCLUSION>\n<EVALUATE>\nTEXT: The Loch Ness Monster is a mythical creature.\nFOL: MythicalCreature(LochNessMonster)\nTEXT: The Loch Ness Monster has been sighted by many people.\nFOL: Sighted(LochNessMonster, ManyPeople)\nTEXT: A mythical creature cannot be sighted by anyone.\nFOL: all x. (MythicalCreature(x) -> -Sighted(x, Anyone))\nTEXT: The Loch Ness Monster can be sighted by many people.\nFOL: Sighted(LochNessMonster, ManyPeople)\n\nANSWER: False\n</EVALUATE>\n\n<PREMISES>\nAll humans are mortal.\nAll cats are mortal.\nAll dogs are mortal.\nAll dogs are animals.\nAll animals are mortal.\n</PREMISES>\n<CONCLUSION>\nAll humans are animals.\n</CONCLUSION>\n<EVALUATE>\nTEXT: All humans are mortal.\nFOL: all x. (Human(x) -> Mortal(x))\nTEXT: All cats are mortal.\nFOL: all x. (Cat(x) -> Mortal(x))\nTEXT: All dogs are mortal.\nFOL: all x. (Dog(x) -> Mortal(x))\nTEXT: All dogs are animals.\nFOL: all x. (Dog(x) -> Animal(x))\nTEXT: All animals are mortal.\nFOL: all x. (Animal(x) -> Mortal(x))\nTEXT: All humans are animals.\nFOL: all x. (Human(x) -> Animal(x))\n\nANSWER: True\n</EVALUATE>\nProcessed: True\n\nReference: False\n========================================"], "answers": ["True", "True", "True", "False", "True", "False", "False", "True", "True", "True"]}
{"idx": 71, "prompt": "The following is a first-order logic (FOL) problem.\nThe problem is to determine whether the conclusion follows from the premises.\nThe premises are given in the form of a set of first-order logic sentences.\nThe conclusion is given in the form of a single first-order logic sentence.\nThe task is to translate each of the premises and conclusions into FOL expressions.and then to evaluate the conclusion as ANSWER: True, ANSWER: False, or ANSWER: Uncertain given the premises. The output should follow format TEXT: \nFOL: \nTEXT: \nFOL:... ANSWER: \n\n\n<PREMISES>\nAll biodegradable things are environment-friendly.\nAll woodware is biodegradable.\nAll paper is woodware.\nNothing is a good thing and also a bad thing.\nAll environment-friendly things are good.\nA worksheet is either paper or environment-friendly.\n</PREMISES>\n<CONCLUSION>\nA worksheet is not biodegradable.\n</CONCLUSION>\n<EVALUATE>\nTEXT: All biodegradable things are environment-friendly.\nFOL: all x. (Biodegradable(x) -> EnvironmentFriendly(x))\nTEXT: All woodware is biodegradable.\nFOL: all x. (Woodware(x) -> Biodegradable(x))\nTEXT: All paper is woodware.\nFOL: all x. (Paper(x) -> Woodware(x))\nTEXT: Nothing is a good thing and also a bad thing.\nFOL: -(exists x. (Good(x) & Bad(x)))\nTEXT: All environment-friendly things are good.\nFOL: all x. (EnvironmentFriendly(x) -> Good(x))\nTEXT: A worksheet is either paper or environment-friendly.\nFOL: ((Paper(Worksheet) & -EnvironmentFriendly(Worksheet)) | (-Paper(Worksheet) & EnvironmentFriendly(Worksheet)))\nTEXT: A worksheet is not biodegradable.\nFOL: -Dispensable(Worksheet)\n\nANSWER: Uncertain\n</EVALUATE>\n\n<PREMISES>\nA La Liga soccer team ranks higher than another La Liga soccer team if it receives more points.\nIf there are two La Liga soccer teams and neither has more points than the other, then the team which receives more points from the games between the two teams ranks higher.\nReal Madrid and Barcelona are both La Liga soccer teams.\nReal Madrid received more points than Barcelona.\nNeither Real Madrid nor Barcelona received more points from the games between them.\n</PREMISES>\n<CONCLUSION>\nReal Madrid ranks higher than Barcelona.\n</CONCLUSION>\n<EVALUATE>\nTEXT: A La Liga soccer team ranks higher than another La Liga soccer team if it receives more points.\nFOL: all x. all y. (LaLigaSoccerTeam(x) & LaLigaSoccerTeam(y) & MorePoints(x, y) -> RankHigherThan(x, y))\nTEXT: If there are two La Liga soccer teams and neither has more points than the other, then the team which receives more points from the games between the two teams ranks higher.\nFOL: all x. all y. (LaLigaSoccerTeam(x) & LaLigaSoccerTeam(y) & -MorePoints(x, y) & -MorePoints(y, x) & MorePointsInGameBetween(x, y) ->  RankHigherThan(x, y))\nTEXT: Real Madrid and Barcelona are both La Liga soccer teams.\nFOL: LaLigaSoccerTeam(RealMadrid) & LaLigaSoccerTeam(Barcelona)\nTEXT: Real Madrid received more points than Barcelona.\nFOL: MorePoints(RealMadrid, Barcelona)\nTEXT: Neither Real Madrid nor Barcelona received more points from the games between them.\nFOL: -MorePointsInGameBetween(RealMadrid, Barcelona) & -MorePointsInGameBetween(Barcelona, RealMadrid)\nTEXT: Real Madrid ranks higher than Barcelona.\nFOL: HigherRank(RealMadrid, Barcelona)\n\nANSWER: True\n</EVALUATE>\n\n<PREMISES>\nAll professional athletes spend most of their time on sports.\nAll Olympic gold medal winners are professional athletes.\nNo full-time scientists spend the majority of their time on sports.\nAll Nobel physics laureates are full-time scientists.\nAmy spends the most time on sports, or Amy is an Olympic gold medal winner.\nIf Amy is not a Nobel physics laureate, then Amy is not an Olympic gold medal winner.\n</PREMISES>\n<CONCLUSION>\nIf Amy is not an Olympic gold medal winner, then Amy is a Nobel physics laureate.\n</CONCLUSION>\n<EVALUATE>\nTEXT: All professional athletes spend most of their time on sports.\nFOL: all x. (ProfessionalAthlete(x) -> SpendOn(x, MostOfTheirTime, Sports))\nTEXT: All Olympic gold medal winners are professional athletes.\nFOL: all x. (OlympicGoldMedalWinner(x) -> ProfessionalAthlete(x))\nTEXT: No full-time scientists spend the majority of their time on sports.\nFOL: all x. (FullTimeScientist(x) -> -SpendOn(x, MostOfTheirTime, Sports))\nTEXT: All Nobel physics laureates are full-time scientists.\nFOL: all x. (NobelPhysicsLaureate(x) -> FullTimeScientist(x))\nTEXT: Amy spends the most time on sports, or Amy is an Olympic gold medal winner.\nFOL: SpendOn(Amy, MostOfTheirTime, Sports) | OlympicGoldMedalWinner(Amy)\nTEXT: If Amy is not a Nobel physics laureate, then Amy is not an Olympic gold medal winner.\nFOL: -NobelPhysicsLaureate(Amy) -> -OlympicGoldMedalWinner(Amy)\nTEXT: If Amy is not an Olympic gold medal winner, then Amy is a Nobel physics laureate.\nFOL: -OlympicGoldMedalWinner(Amy) -> NobelLaureate(Amy)\n\nANSWER: False\n</EVALUATE>\n\n<PREMISES>\nIf a person pays their taxes, then they contribute to the country.\nEveryone who works for a government department pays a tax on their salary.\nEveryone in the army is an employee of a government department.\nEveryone convicted of murder goes to prison.\nEveryone who has been to prison has a criminal record.\nJames was either once convicted of murder, or spent time in prison.\nJames either has a criminal record, or pays his taxes.\n</PREMISES>\n<CONCLUSION>\nJames does not contribute to the country.\n</CONCLUSION>\n<EVALUATE>\nTEXT: If a person pays their taxes, then they contribute to the country.\nFOL: all x. (Taxpayer(x) -> ContributeTo(x, Country))\nTEXT: Everyone who works for a government department pays a tax on their salary.\nFOL: all x. (WorkFor(x, GovernmentAgency) -> Taxpayer(x))\nTEXT: Everyone in the army is an employee of a government department.\nFOL: all x. (ServesIn(x, TheArmy) -> WorkFor(x, GovernmentAgency))\nTEXT: Everyone convicted of murder goes to prison.\nFOL: all x. (SentencedForMurder(x) -> Imprisoned(x))\nTEXT: Everyone who has been to prison has a criminal record.\nFOL: all x. (Imprisoned((x) -> Has(x, CriminalRecord))\nTEXT: James was either once convicted of murder, or spent time in prison.\nFOL: ((SentencedForMurder(James) & -Imprisoned(James)) | (-SentencedForMurder(James) & Imprisoned(James)))\nTEXT: James either has a criminal record, or pays his taxes.\nFOL: ((Has(James, CriminalRecord) & -Taxpayer(James)) | (-Has(James, CriminalRecord) & Taxpayer(James)))\nTEXT: James does not contribute to the country.\nFOL: ContributeToCountry(James)\n\nANSWER: Uncertain\n</EVALUATE>\n\n<PREMISES>\nNo songs are visuals.\nAll folk songs are songs.\nAll videos are visuals.\nAll movies are videos.\nAll sci-fi movies are movies.\nInception is a sci-fi movie.\nMac is neither a folk song nor a sci-fi movie.\n</PREMISES>\n<CONCLUSION>\nInception is a folk song.\n</CONCLUSION>\n<EVALUATE>\nTEXT: No songs are visuals.\nFOL: all x. (Song(x) -> -Visual(x))\nTEXT: All folk songs are songs.\nFOL: all x. (FolkSong(x) -> Song(x))\nTEXT: All videos are visuals.\nFOL: all x. (Video(x) -> Visual(x))\nTEXT: All movies are videos.\nFOL: all x. (Movie(x) -> Video(x))\nTEXT: All sci-fi movies are movies.\nFOL: all x. (ScifiMovie(x) -> Movie(x))\nTEXT: Inception is a sci-fi movie.\nFOL: ScifiMovie(Inception)\nTEXT: Mac is neither a folk song nor a sci-fi movie.\nFOL: -FolkSong(Mac) & -ScifiMovie(Mac)\nTEXT: Inception is a folk song.\nFOL: FolkSong(Inception)\n\nANSWER: False\n</EVALUATE>\n\n<PREMISES>\nEvery chef can cook.\nSome people who aren’t chefs can cook.\nPeople who cook can make scrambled eggs and pasta.\nIf someone can make cookies and muffins, they are a baker.\nBakers who can also make scrambled eggs can make a good breakfast.\nLuke can make cookies, scrambled eggs, and muffins, but not pasta.\n</PREMISES>\n<CONCLUSION>\nLuke is a chef.\n</CONCLUSION>\n<EVALUATE>\nTEXT: Every chef can cook.\nFOL: all x. (Chef(x) -> Can(x, Cook))\nTEXT: Some people who aren’t chefs can cook.\nFOL: exists x. (-Chef(x) & Can(x, Cook))\nTEXT: People who cook can make scrambled eggs and pasta.\nFOL: all x. (Can(x, Cook) -> (CanMake(x, ScrambledEggs) & CanMake(x, Pasta)))\nTEXT: If someone can make cookies and muffins, they are a baker.\nFOL: all x. (CanMake(x, Cookies) & CanMake(x, Muffins) -> Baker(x))\nTEXT: Bakers who can also make scrambled eggs can make a good breakfast.\nFOL: all x. ((Baker(x) & CanMake(x, ScrambledEggs)) -> CanMake(x, GoodBreakfast))\nTEXT: Luke can make cookies, scrambled eggs, and muffins, but not pasta.\nFOL: CanMake(Luke, Cookies) & (CanMake(Luke, ScrambledEggs) & CanMake(Luke, Muffins) & -CanMake(Luke, Pasta)\nTEXT: Luke is a chef.\nFOL: MakeGoodBreakfast(Luke)\n\nANSWER: False\n</EVALUATE>\n\n<PREMISES>\nETS develops various standardized tests primarily in the United States for K-12 and higher education.\nETS administers international tests, including the TOEFL, TOEIC, GRE, and subject tests.\nMany of the assessments ETS develops are associated with entry to the US tertiary and quaternary education institutions.\nETS also develops K-12 statewide assessments used for accountability testing in many states.\n</PREMISES>\n<CONCLUSION>\nETS doesn't administer tests internationally.\n</CONCLUSION>\n<EVALUATE>\nTEXT: ETS develops various standardized tests primarily in the United States for K-12 and higher education.\nFOL: exists x. exists y. (Develop(eTS, x) & Develop(eTS, y) & StandardizedTest(x) & StandardizedTest(y) & In(x, UnitedState) & In(y, UnitedState) & For(x, kOneTwoAndHigherEducation) & For(y, kOneTwoAndHigherEducation))\nTEXT: ETS administers international tests, including the TOEFL, TOEIC, GRE, and subject tests.\nFOL: exists x. (Administer(eTS, x) & InternationalTest(x) & (TOEFL(x) | TOEIC(x) | GRE(x) | SubjectTest(x)))\nTEXT: Many of the assessments ETS develops are associated with entry to the US tertiary and quaternary education institutions.\nFOL: exists x. (Develop(eTS, x) & AssociatedWith(x, EntryToUSEducationInstitution))\nTEXT: ETS also develops K-12 statewide assessments used for accountability testing in many states.\nFOL: exists x. (Develop(eTS, x) & StateWideAssesment(x) & UsedFor(x, AccountabilityTesting))\nTEXT: ETS doesn't administer tests internationally.\nFOL: exists x. (Develops(Ets, x) & For(x, k-OneTwoandhighereducation)) & exists x. (Develops(Ets, x) & AssociatedWith(x, Entrytouseducationinstitutions))\n\nANSWER: False\n</EVALUATE>\n\n<PREMISES>\nDaveed Diggs is an actor and film producer.\nDaveed Diggs played two roles in the musical Hamilton on Broadway.\nOne of the actors from Hamilton won the best actor award.\nThe actor playing Thomas Jefferson won the best actor award.\nDaveed Diggs played Thomas Jefferson.\nMusicals on Broadway are not films.\n</PREMISES>\n<CONCLUSION>\nDaveed Diggs won the best actor award.\n</CONCLUSION>\n<EVALUATE>\nTEXT: Daveed Diggs is an actor and film producer.\nFOL: Actor(DaveedDiggs) & FilmProducer(DaveedDiggs)\nTEXT: Daveed Diggs played two roles in the musical Hamilton on Broadway.\nFOL: exists x. exists y.(PlaysIn(DaveedDiggs, x, Hamilton) & (-(x=y)) & PlaysIn(DaveedDiggs, y, Hamilton)) & OnBroadway(Hamilton) & Musical(Hamilton)\nTEXT: One of the actors from Hamilton won the best actor award.\nFOL: exists x. exists y.(Actor(x) & PlaysIn(x, y, Hamilton) & Wins(x, BestActorAward))\nTEXT: The actor playing Thomas Jefferson won the best actor award.\nFOL: exists x. (Actor(x) & PlaysIn(x, ThomasJefferson, Hamilton) & Wins(x, BestActorAward))\nTEXT: Daveed Diggs played Thomas Jefferson.\nFOL: Plays(DaveedDiggs, ThomasJefferson)\nTEXT: Musicals on Broadway are not films.\nFOL: all x. ((Musical(x) & OnBroadway(x)) -> -Film(x))\nTEXT: Daveed Diggs won the best actor award.\nFOL: exists x. (BRICS(x) & Speaks(x, Hindi))\n\nANSWER: True\n</EVALUATE>\n\n<PREMISES>\nThe National Lobster Hatchery is a hatchery located in Padstow, England.\nThe National Lobster Hatchery has animals.\nA hatchery is either for profit or for destruction.\nIf a hatchery is for destruction, it might release animals into the wild.\nThe National Lobster Hatchery is not for profit.\n</PREMISES>\n<CONCLUSION>\nAll hatcheries have animals.\n</CONCLUSION>\n<EVALUATE>", "raw_generations": ["Generation 1:\nTEXT: The National Lobster Hatchery is a hatchery located in Padstow, England.\nFOL: Hatchery(TheNationalLobsterHatchery) & LocatedIn(TheNationalLobsterHatchery, Padstow) & England(Padstow)\nTEXT: The National Lobster Hatchery has animals.\nFOL: HasAnimals(TheNationalLobsterHatchery)\nTEXT: A hatchery is either for profit or for destruction.\nFOL: all x. (Hatchery(x) -> (ForProfit(x) | ForDestruction(x)))\nTEXT: If a hatchery is for destruction, it might release animals into the wild.\nFOL: all x. (ForDestruction(x) -> MightRelease(x, Animals))\nTEXT: The National Lobster Hatchery is not for profit.\nFOL: -ForProfit(TheNationalLobsterHatchery)\nTEXT: All hatcheries have animals.\nFOL: all x. (Hatchery(x) -> HasAnimals(x))\n\nANSWER: True given the premises.\nProcessed: True", "Generation 2:\nTEXT: The National Lobster Hatchery is a hatchery located in Padstow, England.\nFOL: Hatchery(NationalLobsterHatchery) & LocatedIn(NationalLobsterHatchery, Padstow) & England(Padstow)\n\nTEXT: The National Lobster Hatchery has animals.\nFOL: Has(NationalLobsterHatchery, Animals)\n\nTEXT: A hatchery is either for profit or for destruction.\nFOL: all x. (Hatchery(x) -> (ForProfit(x) | ForDestruction(x)))\n\nTEXT: If a hatchery is for destruction, it might release animals into the wild.\nFOL: all x. (ForDestruction(x) -> MightRelease(x, Animals, Wild))\n\nTEXT: The National Lobster Hatchery is not for profit.\nFOL: -ForProfit(NationalLobsterHatchery)\n\nTEXT: All hatcheries have animals.\nFOL: all x. (Hatchery(x) -> Has(x, Animals))\n\nANSWER: True (Based on the given premises)\nProcessed: True", "Generation 3:\nTEXT: The National Lobster Hatchery is a hatchery located in Padstow, England.\nFOL: Hatchery(TheNationalLobsterHatchery) & LocatedIn(TheNationalLobsterHatchery, Padstow) & In(TheNationalLobsterHatchery, England)\nTEXT: The National Lobster Hatchery has animals.\nFOL: HasAnimals(TheNationalLobsterHatchery)\nTEXT: A hatchery is either for profit or for destruction.\nFOL: all x. (Hatchery(x) -> (ForProfit(x) | ForDestruction(x)))\nTEXT: If a hatchery is for destruction, it might release animals into the wild.\nFOL: if ForDestruction(x) then MightRelease(x, Animals, Wild)\nTEXT: The National Lobster Hatchery is not for profit.\nFOL: -ForProfit(TheNationalLobsterHatchery)\nTEXT: All hatcheries have animals.\nFOL: all x. (Hatchery(x) -> HasAnimals(x))\n\nANSWER: True given the premises. However, the conclusion is not necessarily true as it is not stated that all hatcheries are for destruction.\nProcessed: True", "Generation 4:\nTEXT: The National Lobster Hatchery is a hatchery located in Padstow, England.\nFOL: Hatchery(NationalLobsterHatchery) & In(NationalLobsterHatchery, Padstow) & In(Padstow, England)\nTEXT: The National Lobster Hatchery has animals.\nFOL: Has(NationalLobsterHatchery, Animal)\nTEXT: A hatchery is either for profit or for destruction.\nFOL: all x. (Hatchery(x) -> (Profit(x) | Destruction(x)))\nTEXT: If a hatchery is for destruction, it might release animals into the wild.\nFOL: if Destruction(x) then Might(x, ReleaseAnimalsIntoTheWild)\nTEXT: The National Lobster Hatchery is not for profit.\nFOL: -Profit(NationalLobsterHatchery)\nTEXT: All hatcheries have animals.\nFOL: all x. (Hatchery(x) -> Has(x, Animal))\n\nANSWER: True given the premises, but not universally true. Not all hatcheries might release animals into the wild.\nProcessed: True", "Generation 5:\nTEXT: The National Lobster Hatchery is a hatchery located in Padstow, England.\nFOL: Hatchery(TheNationalLobsterHatchery) & In(TheNationalLobsterHatchery, Padstow) & In(Padstow, England)\nTEXT: The National Lobster Hatchery has animals.\nFOL: Has(TheNationalLobsterHatchery, Animals)\nTEXT: A hatchery is either for profit or for destruction.\nFOL: all x. (Hatchery(x) -> (ForProfit(x) | ForDestruction(x)))\nTEXT: If a hatchery is for destruction, it might release animals into the wild.\nFOL: all x. (ForDestruction(x) -> Might(x, ReleaseAnimalsIntoWild))\nTEXT: The National Lobster Hatchery is not for profit.\nFOL: -ForProfit(TheNationalLobsterHatchery)\nTEXT: All hatcheries have animals.\nFOL: all x. (Hatchery(x) -> Has(x, Animals))\n\nANSWER: True (given the premises)\nProcessed: True", "Generation 6:\nTEXT: The National Lobster Hatchery is a hatchery located in Padstow, England.\nFOL: Hatchery(NationalLobsterHatchery) & LocatedIn(NationalLobsterHatchery, Padstow) & In(NationalLobsterHatchery, England)\nTEXT: The National Lobster Hatchery has animals.\nFOL: HasAnimals(NationalLobsterHatchery)\nTEXT: A hatchery is either for profit or for destruction.\nFOL: all x. (Hatchery(x) -> (ForProfit(x) | ForDestruction(x)))\nTEXT: If a hatchery is for destruction, it might release animals into the wild.\nFOL: if ForDestruction(x) then MightReleaseAnimalsIntoTheWild(x)\nTEXT: The National Lobster Hatchery is not for profit.\nFOL: -ForProfit(NationalLobsterHatchery)\nTEXT: All hatcheries have animals.\nFOL: all x. (Hatchery(x) -> HasAnimals(x))\n\nANSWER: Uncertain (The conclusion is a general statement about all hatcheries, but the premises only provide information about one specific hatchery.)\nProcessed: Uncertain", "Generation 7:\nTEXT: The National Lobster Hatchery is a hatchery located in Padstow, England.\nFOL: Hatchery(NationalLobsterHatchery) & LocatedIn(NationalLobsterHatchery, Padstow) & England(Padstow)\n\nTEXT: The National Lobster Hatchery has animals.\nFOL: Has(NationalLobsterHatchery, Animals)\n\nTEXT: A hatchery is either for profit or for destruction.\nFOL: all x. (Hatchery(x) -> (ForProfit(x) | ForDestruction(x)))\n\nTEXT: If a hatchery is for destruction, it might release animals into the wild.\nFOL: all x. (ForDestruction(x) -> MightRelease(x, Animals, Wild))\n\nTEXT: The National Lobster Hatchery is not for profit.\nFOL: -ForProfit(NationalLobsterHatchery)\n\nTEXT: All hatcheries have animals.\nFOL: all x. Hatchery(x) -> Has(x, Animals)\n\nANSWER: True (Given the premises)\nProcessed: True", "Generation 8:\nTEXT: The National Lobster Hatchery is a hatchery located in Padstow, England.\nFOL: Hatchery(TheNationalLobsterHatchery) & LocatedIn(TheNationalLobsterHatchery, Padstow) & England\n\nTEXT: The National Lobster Hatchery has animals.\nFOL: HasAnimals(TheNationalLobsterHatchery)\n\nTEXT: A hatchery is either for profit or for destruction.\nFOL: all x. (Hatchery(x) -> (ForProfit(x) | ForDestruction(x)))\n\nTEXT: If a hatchery is for destruction, it might release animals into the wild.\nFOL: (ForDestruction(x) -> MightRelease(x, Animals))\n\nTEXT: The National Lobster Hatchery is not for profit.\nFOL: -ForProfit(TheNationalLobsterHatchery)\n\nTEXT: All hatcheries have animals.\nFOL: all x. (Hatchery(x) -> HasAnimals(x))\n\nANSWER: True (given the premises)\nProcessed: True", "Generation 9:\nTEXT: The National Lobster Hatchery has animals.\nFOL: HasAnimals(NationalLobsterHatchery)\n\nTEXT: A hatchery is either for profit or for destruction.\nFOL: all x. (Hatchery(x) -> (Profit(x) | Destruction(x)))\n\nTEXT: If a hatchery is for destruction, it might release animals into the wild.\nFOL: all x. (Destruction(x) & Hatchery(x) -> MightReleaseIntoTheWild(x))\n\nTEXT: The National Lobster Hatchery is not for profit.\nFOL: -Profit(NationalLobsterHatchery)\n\nTEXT: All hatcheries have animals.\nFOL: all x. Hatchery(x) -> HasAnimals(x)\n\nThe conclusion is not necessarily true given the premises. The National Lobster Hatchery is not necessarily a hatchery for destruction, so it might not release animals into the wild. Therefore, we cannot conclude that all hatcheries have animals because there are hatcheries that do not release animals into the wild.\n\nANSWER: Uncertain\nProcessed: Uncertain", "Generation 10:\nTEXT: The National Lobster Hatchery is a hatchery located in Padstow, England.\nFOL: Hatchery(NationalLobsterHatchery) & LocatedIn(NationalLobsterHatchery, Padstow) & England(Padstow)\n\nTEXT: The National Lobster Hatchery has animals.\nFOL: Has(NationalLobsterHatchery, Animals)\n\nTEXT: A hatchery is either for profit or for destruction.\nFOL: all x. (Hatchery(x) -> (ForProfit(x) | ForDestruction(x)))\n\nTEXT: If a hatchery is for destruction, it might release animals into the wild.\nFOL: all x. (ForDestruction(x) -> MightRelease(x, Animals, Wild))\n\nTEXT: The National Lobster Hatchery is not for profit.\nFOL: -ForProfit(NationalLobsterHatchery)\n\nTEXT: All hatcheries have animals.\nFOL: all x. Hatchery(x) -> Has(x, Animals)\n\nANSWER: True (Given the premises, it can be inferred that all hatcheries have animals)\nProcessed: True\n\nReference: Uncertain\n========================================"], "answers": ["True", "True", "True", "True", "True", "Uncertain", "True", "True", "Uncertain", "True"]}
{"idx": 72, "prompt": "The following is a first-order logic (FOL) problem.\nThe problem is to determine whether the conclusion follows from the premises.\nThe premises are given in the form of a set of first-order logic sentences.\nThe conclusion is given in the form of a single first-order logic sentence.\nThe task is to translate each of the premises and conclusions into FOL expressions.and then to evaluate the conclusion as ANSWER: True, ANSWER: False, or ANSWER: Uncertain given the premises. The output should follow format TEXT: \nFOL: \nTEXT: \nFOL:... ANSWER: \n\n\n<PREMISES>\nAll biodegradable things are environment-friendly.\nAll woodware is biodegradable.\nAll paper is woodware.\nNothing is a good thing and also a bad thing.\nAll environment-friendly things are good.\nA worksheet is either paper or environment-friendly.\n</PREMISES>\n<CONCLUSION>\nA worksheet is not biodegradable.\n</CONCLUSION>\n<EVALUATE>\nTEXT: All biodegradable things are environment-friendly.\nFOL: all x. (Biodegradable(x) -> EnvironmentFriendly(x))\nTEXT: All woodware is biodegradable.\nFOL: all x. (Woodware(x) -> Biodegradable(x))\nTEXT: All paper is woodware.\nFOL: all x. (Paper(x) -> Woodware(x))\nTEXT: Nothing is a good thing and also a bad thing.\nFOL: -(exists x. (Good(x) & Bad(x)))\nTEXT: All environment-friendly things are good.\nFOL: all x. (EnvironmentFriendly(x) -> Good(x))\nTEXT: A worksheet is either paper or environment-friendly.\nFOL: ((Paper(Worksheet) & -EnvironmentFriendly(Worksheet)) | (-Paper(Worksheet) & EnvironmentFriendly(Worksheet)))\nTEXT: A worksheet is not biodegradable.\nFOL: -Dispensable(Worksheet)\n\nANSWER: Uncertain\n</EVALUATE>\n\n<PREMISES>\nA La Liga soccer team ranks higher than another La Liga soccer team if it receives more points.\nIf there are two La Liga soccer teams and neither has more points than the other, then the team which receives more points from the games between the two teams ranks higher.\nReal Madrid and Barcelona are both La Liga soccer teams.\nReal Madrid received more points than Barcelona.\nNeither Real Madrid nor Barcelona received more points from the games between them.\n</PREMISES>\n<CONCLUSION>\nReal Madrid ranks higher than Barcelona.\n</CONCLUSION>\n<EVALUATE>\nTEXT: A La Liga soccer team ranks higher than another La Liga soccer team if it receives more points.\nFOL: all x. all y. (LaLigaSoccerTeam(x) & LaLigaSoccerTeam(y) & MorePoints(x, y) -> RankHigherThan(x, y))\nTEXT: If there are two La Liga soccer teams and neither has more points than the other, then the team which receives more points from the games between the two teams ranks higher.\nFOL: all x. all y. (LaLigaSoccerTeam(x) & LaLigaSoccerTeam(y) & -MorePoints(x, y) & -MorePoints(y, x) & MorePointsInGameBetween(x, y) ->  RankHigherThan(x, y))\nTEXT: Real Madrid and Barcelona are both La Liga soccer teams.\nFOL: LaLigaSoccerTeam(RealMadrid) & LaLigaSoccerTeam(Barcelona)\nTEXT: Real Madrid received more points than Barcelona.\nFOL: MorePoints(RealMadrid, Barcelona)\nTEXT: Neither Real Madrid nor Barcelona received more points from the games between them.\nFOL: -MorePointsInGameBetween(RealMadrid, Barcelona) & -MorePointsInGameBetween(Barcelona, RealMadrid)\nTEXT: Real Madrid ranks higher than Barcelona.\nFOL: HigherRank(RealMadrid, Barcelona)\n\nANSWER: True\n</EVALUATE>\n\n<PREMISES>\nAll professional athletes spend most of their time on sports.\nAll Olympic gold medal winners are professional athletes.\nNo full-time scientists spend the majority of their time on sports.\nAll Nobel physics laureates are full-time scientists.\nAmy spends the most time on sports, or Amy is an Olympic gold medal winner.\nIf Amy is not a Nobel physics laureate, then Amy is not an Olympic gold medal winner.\n</PREMISES>\n<CONCLUSION>\nIf Amy is not an Olympic gold medal winner, then Amy is a Nobel physics laureate.\n</CONCLUSION>\n<EVALUATE>\nTEXT: All professional athletes spend most of their time on sports.\nFOL: all x. (ProfessionalAthlete(x) -> SpendOn(x, MostOfTheirTime, Sports))\nTEXT: All Olympic gold medal winners are professional athletes.\nFOL: all x. (OlympicGoldMedalWinner(x) -> ProfessionalAthlete(x))\nTEXT: No full-time scientists spend the majority of their time on sports.\nFOL: all x. (FullTimeScientist(x) -> -SpendOn(x, MostOfTheirTime, Sports))\nTEXT: All Nobel physics laureates are full-time scientists.\nFOL: all x. (NobelPhysicsLaureate(x) -> FullTimeScientist(x))\nTEXT: Amy spends the most time on sports, or Amy is an Olympic gold medal winner.\nFOL: SpendOn(Amy, MostOfTheirTime, Sports) | OlympicGoldMedalWinner(Amy)\nTEXT: If Amy is not a Nobel physics laureate, then Amy is not an Olympic gold medal winner.\nFOL: -NobelPhysicsLaureate(Amy) -> -OlympicGoldMedalWinner(Amy)\nTEXT: If Amy is not an Olympic gold medal winner, then Amy is a Nobel physics laureate.\nFOL: -OlympicGoldMedalWinner(Amy) -> NobelLaureate(Amy)\n\nANSWER: False\n</EVALUATE>\n\n<PREMISES>\nIf a person pays their taxes, then they contribute to the country.\nEveryone who works for a government department pays a tax on their salary.\nEveryone in the army is an employee of a government department.\nEveryone convicted of murder goes to prison.\nEveryone who has been to prison has a criminal record.\nJames was either once convicted of murder, or spent time in prison.\nJames either has a criminal record, or pays his taxes.\n</PREMISES>\n<CONCLUSION>\nJames does not contribute to the country.\n</CONCLUSION>\n<EVALUATE>\nTEXT: If a person pays their taxes, then they contribute to the country.\nFOL: all x. (Taxpayer(x) -> ContributeTo(x, Country))\nTEXT: Everyone who works for a government department pays a tax on their salary.\nFOL: all x. (WorkFor(x, GovernmentAgency) -> Taxpayer(x))\nTEXT: Everyone in the army is an employee of a government department.\nFOL: all x. (ServesIn(x, TheArmy) -> WorkFor(x, GovernmentAgency))\nTEXT: Everyone convicted of murder goes to prison.\nFOL: all x. (SentencedForMurder(x) -> Imprisoned(x))\nTEXT: Everyone who has been to prison has a criminal record.\nFOL: all x. (Imprisoned((x) -> Has(x, CriminalRecord))\nTEXT: James was either once convicted of murder, or spent time in prison.\nFOL: ((SentencedForMurder(James) & -Imprisoned(James)) | (-SentencedForMurder(James) & Imprisoned(James)))\nTEXT: James either has a criminal record, or pays his taxes.\nFOL: ((Has(James, CriminalRecord) & -Taxpayer(James)) | (-Has(James, CriminalRecord) & Taxpayer(James)))\nTEXT: James does not contribute to the country.\nFOL: ContributeToCountry(James)\n\nANSWER: Uncertain\n</EVALUATE>\n\n<PREMISES>\nNo songs are visuals.\nAll folk songs are songs.\nAll videos are visuals.\nAll movies are videos.\nAll sci-fi movies are movies.\nInception is a sci-fi movie.\nMac is neither a folk song nor a sci-fi movie.\n</PREMISES>\n<CONCLUSION>\nInception is a folk song.\n</CONCLUSION>\n<EVALUATE>\nTEXT: No songs are visuals.\nFOL: all x. (Song(x) -> -Visual(x))\nTEXT: All folk songs are songs.\nFOL: all x. (FolkSong(x) -> Song(x))\nTEXT: All videos are visuals.\nFOL: all x. (Video(x) -> Visual(x))\nTEXT: All movies are videos.\nFOL: all x. (Movie(x) -> Video(x))\nTEXT: All sci-fi movies are movies.\nFOL: all x. (ScifiMovie(x) -> Movie(x))\nTEXT: Inception is a sci-fi movie.\nFOL: ScifiMovie(Inception)\nTEXT: Mac is neither a folk song nor a sci-fi movie.\nFOL: -FolkSong(Mac) & -ScifiMovie(Mac)\nTEXT: Inception is a folk song.\nFOL: FolkSong(Inception)\n\nANSWER: False\n</EVALUATE>\n\n<PREMISES>\nEvery chef can cook.\nSome people who aren’t chefs can cook.\nPeople who cook can make scrambled eggs and pasta.\nIf someone can make cookies and muffins, they are a baker.\nBakers who can also make scrambled eggs can make a good breakfast.\nLuke can make cookies, scrambled eggs, and muffins, but not pasta.\n</PREMISES>\n<CONCLUSION>\nLuke is a chef.\n</CONCLUSION>\n<EVALUATE>\nTEXT: Every chef can cook.\nFOL: all x. (Chef(x) -> Can(x, Cook))\nTEXT: Some people who aren’t chefs can cook.\nFOL: exists x. (-Chef(x) & Can(x, Cook))\nTEXT: People who cook can make scrambled eggs and pasta.\nFOL: all x. (Can(x, Cook) -> (CanMake(x, ScrambledEggs) & CanMake(x, Pasta)))\nTEXT: If someone can make cookies and muffins, they are a baker.\nFOL: all x. (CanMake(x, Cookies) & CanMake(x, Muffins) -> Baker(x))\nTEXT: Bakers who can also make scrambled eggs can make a good breakfast.\nFOL: all x. ((Baker(x) & CanMake(x, ScrambledEggs)) -> CanMake(x, GoodBreakfast))\nTEXT: Luke can make cookies, scrambled eggs, and muffins, but not pasta.\nFOL: CanMake(Luke, Cookies) & (CanMake(Luke, ScrambledEggs) & CanMake(Luke, Muffins) & -CanMake(Luke, Pasta)\nTEXT: Luke is a chef.\nFOL: MakeGoodBreakfast(Luke)\n\nANSWER: False\n</EVALUATE>\n\n<PREMISES>\nETS develops various standardized tests primarily in the United States for K-12 and higher education.\nETS administers international tests, including the TOEFL, TOEIC, GRE, and subject tests.\nMany of the assessments ETS develops are associated with entry to the US tertiary and quaternary education institutions.\nETS also develops K-12 statewide assessments used for accountability testing in many states.\n</PREMISES>\n<CONCLUSION>\nETS doesn't administer tests internationally.\n</CONCLUSION>\n<EVALUATE>\nTEXT: ETS develops various standardized tests primarily in the United States for K-12 and higher education.\nFOL: exists x. exists y. (Develop(eTS, x) & Develop(eTS, y) & StandardizedTest(x) & StandardizedTest(y) & In(x, UnitedState) & In(y, UnitedState) & For(x, kOneTwoAndHigherEducation) & For(y, kOneTwoAndHigherEducation))\nTEXT: ETS administers international tests, including the TOEFL, TOEIC, GRE, and subject tests.\nFOL: exists x. (Administer(eTS, x) & InternationalTest(x) & (TOEFL(x) | TOEIC(x) | GRE(x) | SubjectTest(x)))\nTEXT: Many of the assessments ETS develops are associated with entry to the US tertiary and quaternary education institutions.\nFOL: exists x. (Develop(eTS, x) & AssociatedWith(x, EntryToUSEducationInstitution))\nTEXT: ETS also develops K-12 statewide assessments used for accountability testing in many states.\nFOL: exists x. (Develop(eTS, x) & StateWideAssesment(x) & UsedFor(x, AccountabilityTesting))\nTEXT: ETS doesn't administer tests internationally.\nFOL: exists x. (Develops(Ets, x) & For(x, k-OneTwoandhighereducation)) & exists x. (Develops(Ets, x) & AssociatedWith(x, Entrytouseducationinstitutions))\n\nANSWER: False\n</EVALUATE>\n\n<PREMISES>\nDaveed Diggs is an actor and film producer.\nDaveed Diggs played two roles in the musical Hamilton on Broadway.\nOne of the actors from Hamilton won the best actor award.\nThe actor playing Thomas Jefferson won the best actor award.\nDaveed Diggs played Thomas Jefferson.\nMusicals on Broadway are not films.\n</PREMISES>\n<CONCLUSION>\nDaveed Diggs won the best actor award.\n</CONCLUSION>\n<EVALUATE>\nTEXT: Daveed Diggs is an actor and film producer.\nFOL: Actor(DaveedDiggs) & FilmProducer(DaveedDiggs)\nTEXT: Daveed Diggs played two roles in the musical Hamilton on Broadway.\nFOL: exists x. exists y.(PlaysIn(DaveedDiggs, x, Hamilton) & (-(x=y)) & PlaysIn(DaveedDiggs, y, Hamilton)) & OnBroadway(Hamilton) & Musical(Hamilton)\nTEXT: One of the actors from Hamilton won the best actor award.\nFOL: exists x. exists y.(Actor(x) & PlaysIn(x, y, Hamilton) & Wins(x, BestActorAward))\nTEXT: The actor playing Thomas Jefferson won the best actor award.\nFOL: exists x. (Actor(x) & PlaysIn(x, ThomasJefferson, Hamilton) & Wins(x, BestActorAward))\nTEXT: Daveed Diggs played Thomas Jefferson.\nFOL: Plays(DaveedDiggs, ThomasJefferson)\nTEXT: Musicals on Broadway are not films.\nFOL: all x. ((Musical(x) & OnBroadway(x)) -> -Film(x))\nTEXT: Daveed Diggs won the best actor award.\nFOL: exists x. (BRICS(x) & Speaks(x, Hindi))\n\nANSWER: True\n</EVALUATE>\n\n<PREMISES>\nIf a person is hungry, the person is satisfied.\nIf a person is satisfied, the person is starving.\n</PREMISES>\n<CONCLUSION>\nIf a person is not hungry, the person is starving.\n</CONCLUSION>\n<EVALUATE>", "raw_generations": ["Generation 1:\nTEXT: If a person is hungry, the person is satisfied.\nFOL: all x. (Hungry(x) -> Satisfied(x))\nTEXT: If a person is satisfied, the person is starving.\nFOL: all x. (Satisfied(x) -> Starving(x))\nTEXT: If a person is not hungry, the person is starving.\nFOL: all x. (-Hungry(x) -> Starving(x))\n\nANSWER: False\n\nThe given FOL premises state that being hungry implies being satisfied, and being satisfied implies being starving. However, the conclusion suggests that not being hungry implies being starving. This conclusion contradicts the given premises because it is not logically consistent to say that not being hungry (being full or satiated) implies being starving (extremely hungry).\nProcessed: False", "Generation 2:\nTEXT: If a person is hungry, the person is satisfied.\nFOL: all x. (Hungry(x) -> Satisfied(x))\nTEXT: If a person is satisfied, the person is starving.\nFOL: all x. (Satisfied(x) -> Starving(x))\nTEXT: If a person is not hungry, the person is starving.\nFOL: all x. (-Hungry(x) -> Starving(x))\n\nANSWER: False\n\nIn this case, the premises state that being hungry means being satisfied, and being satisfied means being starving. So, if a person is not hungry, they are not satisfied, but they are not necessarily starving. The premises have a logical contradiction, as being satisfied implies being starving.\nProcessed: False", "Generation 3:\nTEXT: If a person is hungry, the person is satisfied.\nFOL: all x. (Hungry(x) -> Satisfied(x))\nTEXT: If a person is satisfied, the person is starving.\nFOL: all x. (Satisfied(x) -> Starving(x))\nTEXT: If a person is not hungry, the person is starving.\nFOL: all x. (-Hungry(x) -> Starving(x))\n\nANSWER: True (according to the given premises, but it's a contradiction in terms of real-world understanding of hunger and satisfaction)\nProcessed: True", "Generation 4:\nFOL:\nall x. Hungry(x) -> Satisfied(x)\nall x. Satisfied(x) -> Starving(x)\n\nTEXT: If a person is not hungry, the person is starving.\nFOL: -Hungry(x) -> Starving(x)\n\nANSWER: False\n\nThe given premises state that if a person is hungry, they are satisfied, and if they are satisfied, they are starving. However, there is no mention of a person not being hungry and being starving, which is the conclusion given. Therefore, the conclusion does not follow from the premises.\nProcessed: False", "Generation 5:\nTEXT: If a person is hungry, the person is satisfied.\nFOL: all x. (Hungry(x) -> Satisfied(x))\nTEXT: If a person is satisfied, the person is starving.\nFOL: all x. (Satisfied(x) -> Starving(x))\nTEXT: If a person is not hungry, the person is starving.\nFOL: all x. (-Hungry(x) -> Starving(x))\n\nANSWER: False\n\nIn the given premises, the conclusion is not logically valid because the premises do not support the conclusion. According to the premises, if a person is hungry, they are satisfied, and if they are satisfied, they are starving. This means that a person cannot be both not hungry and starving. The conclusion, however, states that if a person is not hungry, they are starving, which is not consistent with the provided premises.\nProcessed: False", "Generation 6:\nTEXT: If a person is hungry, the person is satisfied.\nFOL: Hungry(x) -> Satisfied(x)\nTEXT: If a person is satisfied, the person is starving.\nFOL: Satisfied(x) -> Starving(x)\nTEXT: If a person is not hungry, the person is starving.\nFOL: -Hungry(x) -> Starving(x)\n\nANSWER: False (The premises do not logically imply the conclusion)\nProcessed: False", "Generation 7:\nTEXT: If a person is hungry, the person is satisfied.\nFOL: all x. (Hungry(x) -> Satisfied(x))\nTEXT: If a person is satisfied, the person is starving.\nFOL: all x. (Satisfied(x) -> Starving(x))\nTEXT: If a person is not hungry, the person is starving.\nFOL: all x. (-Hungry(x) -> Starving(x))\n\nANSWER: True (According to the given premises, but the premises contradict each other as they define \"satisfied\" and \"hungry\" in opposite ways.)\nProcessed: True", "Generation 8:\nFOL:\nTEXT: If a person is hungry, the person is satisfied.\nFOL: all x. (Hungry(x) -> Satisfied(x))\nTEXT: If a person is satisfied, the person is starving.\nFOL: all x. (Satisfied(x) -> Starving(x))\nTEXT: If a person is not hungry, the person is starving.\nFOL: all x. (-Hungry(x) -> Starving(x))\n\nANSWER: True (based on the given premises)\nProcessed: True", "Generation 9:\nTEXT: If a person is hungry, the person is satisfied.\nFOL: all x. (Hungry(x) -> Satisfied(x))\nTEXT: If a person is satisfied, the person is starving.\nFOL: all x. (Satisfied(x) -> Starving(x))\nTEXT: If a person is not hungry, the person is starving.\nFOL: all x. (-Hungry(x) -> Starving(x))\n\nANSWER: False\n\nThe FOL expression given for the conclusion is not logically valid given the premises. According to the premises, a person can be satisfied when they are hungry, but they cannot be starving when they are not hungry. However, the premises do not provide any information about a person being both not hungry and starving, so it cannot be logically deduced that the conclusion is true.\nProcessed: False", "Generation 10:\nTEXT: If a person is hungry, the person is satisfied.\nFOL: all x. (Hungry(x) -> Satisfied(x))\nTEXT: If a person is satisfied, the person is starving.\nFOL: all x. (Satisfied(x) -> Starving(x))\nTEXT: If a person is not hungry, the person is starving.\nFOL: all x. (-Hungry(x) -> Starving(x))\n\nANSWER: False\nThe premises state that a person can be satisfied when hungry and also starving when satisfied, but not when they are not hungry. This contradicts the conclusion, which states that a person is starving when they are not hungry.\nProcessed: False\n\nReference: Uncertain\n========================================"], "answers": ["False", "False", "True", "False", "False", "False", "True", "True", "False", "False"]}
{"idx": 73, "prompt": "The following is a first-order logic (FOL) problem.\nThe problem is to determine whether the conclusion follows from the premises.\nThe premises are given in the form of a set of first-order logic sentences.\nThe conclusion is given in the form of a single first-order logic sentence.\nThe task is to translate each of the premises and conclusions into FOL expressions.and then to evaluate the conclusion as ANSWER: True, ANSWER: False, or ANSWER: Uncertain given the premises. The output should follow format TEXT: \nFOL: \nTEXT: \nFOL:... ANSWER: \n\n\n<PREMISES>\nAll biodegradable things are environment-friendly.\nAll woodware is biodegradable.\nAll paper is woodware.\nNothing is a good thing and also a bad thing.\nAll environment-friendly things are good.\nA worksheet is either paper or environment-friendly.\n</PREMISES>\n<CONCLUSION>\nA worksheet is not biodegradable.\n</CONCLUSION>\n<EVALUATE>\nTEXT: All biodegradable things are environment-friendly.\nFOL: all x. (Biodegradable(x) -> EnvironmentFriendly(x))\nTEXT: All woodware is biodegradable.\nFOL: all x. (Woodware(x) -> Biodegradable(x))\nTEXT: All paper is woodware.\nFOL: all x. (Paper(x) -> Woodware(x))\nTEXT: Nothing is a good thing and also a bad thing.\nFOL: -(exists x. (Good(x) & Bad(x)))\nTEXT: All environment-friendly things are good.\nFOL: all x. (EnvironmentFriendly(x) -> Good(x))\nTEXT: A worksheet is either paper or environment-friendly.\nFOL: ((Paper(Worksheet) & -EnvironmentFriendly(Worksheet)) | (-Paper(Worksheet) & EnvironmentFriendly(Worksheet)))\nTEXT: A worksheet is not biodegradable.\nFOL: -Dispensable(Worksheet)\n\nANSWER: Uncertain\n</EVALUATE>\n\n<PREMISES>\nA La Liga soccer team ranks higher than another La Liga soccer team if it receives more points.\nIf there are two La Liga soccer teams and neither has more points than the other, then the team which receives more points from the games between the two teams ranks higher.\nReal Madrid and Barcelona are both La Liga soccer teams.\nReal Madrid received more points than Barcelona.\nNeither Real Madrid nor Barcelona received more points from the games between them.\n</PREMISES>\n<CONCLUSION>\nReal Madrid ranks higher than Barcelona.\n</CONCLUSION>\n<EVALUATE>\nTEXT: A La Liga soccer team ranks higher than another La Liga soccer team if it receives more points.\nFOL: all x. all y. (LaLigaSoccerTeam(x) & LaLigaSoccerTeam(y) & MorePoints(x, y) -> RankHigherThan(x, y))\nTEXT: If there are two La Liga soccer teams and neither has more points than the other, then the team which receives more points from the games between the two teams ranks higher.\nFOL: all x. all y. (LaLigaSoccerTeam(x) & LaLigaSoccerTeam(y) & -MorePoints(x, y) & -MorePoints(y, x) & MorePointsInGameBetween(x, y) ->  RankHigherThan(x, y))\nTEXT: Real Madrid and Barcelona are both La Liga soccer teams.\nFOL: LaLigaSoccerTeam(RealMadrid) & LaLigaSoccerTeam(Barcelona)\nTEXT: Real Madrid received more points than Barcelona.\nFOL: MorePoints(RealMadrid, Barcelona)\nTEXT: Neither Real Madrid nor Barcelona received more points from the games between them.\nFOL: -MorePointsInGameBetween(RealMadrid, Barcelona) & -MorePointsInGameBetween(Barcelona, RealMadrid)\nTEXT: Real Madrid ranks higher than Barcelona.\nFOL: HigherRank(RealMadrid, Barcelona)\n\nANSWER: True\n</EVALUATE>\n\n<PREMISES>\nAll professional athletes spend most of their time on sports.\nAll Olympic gold medal winners are professional athletes.\nNo full-time scientists spend the majority of their time on sports.\nAll Nobel physics laureates are full-time scientists.\nAmy spends the most time on sports, or Amy is an Olympic gold medal winner.\nIf Amy is not a Nobel physics laureate, then Amy is not an Olympic gold medal winner.\n</PREMISES>\n<CONCLUSION>\nIf Amy is not an Olympic gold medal winner, then Amy is a Nobel physics laureate.\n</CONCLUSION>\n<EVALUATE>\nTEXT: All professional athletes spend most of their time on sports.\nFOL: all x. (ProfessionalAthlete(x) -> SpendOn(x, MostOfTheirTime, Sports))\nTEXT: All Olympic gold medal winners are professional athletes.\nFOL: all x. (OlympicGoldMedalWinner(x) -> ProfessionalAthlete(x))\nTEXT: No full-time scientists spend the majority of their time on sports.\nFOL: all x. (FullTimeScientist(x) -> -SpendOn(x, MostOfTheirTime, Sports))\nTEXT: All Nobel physics laureates are full-time scientists.\nFOL: all x. (NobelPhysicsLaureate(x) -> FullTimeScientist(x))\nTEXT: Amy spends the most time on sports, or Amy is an Olympic gold medal winner.\nFOL: SpendOn(Amy, MostOfTheirTime, Sports) | OlympicGoldMedalWinner(Amy)\nTEXT: If Amy is not a Nobel physics laureate, then Amy is not an Olympic gold medal winner.\nFOL: -NobelPhysicsLaureate(Amy) -> -OlympicGoldMedalWinner(Amy)\nTEXT: If Amy is not an Olympic gold medal winner, then Amy is a Nobel physics laureate.\nFOL: -OlympicGoldMedalWinner(Amy) -> NobelLaureate(Amy)\n\nANSWER: False\n</EVALUATE>\n\n<PREMISES>\nIf a person pays their taxes, then they contribute to the country.\nEveryone who works for a government department pays a tax on their salary.\nEveryone in the army is an employee of a government department.\nEveryone convicted of murder goes to prison.\nEveryone who has been to prison has a criminal record.\nJames was either once convicted of murder, or spent time in prison.\nJames either has a criminal record, or pays his taxes.\n</PREMISES>\n<CONCLUSION>\nJames does not contribute to the country.\n</CONCLUSION>\n<EVALUATE>\nTEXT: If a person pays their taxes, then they contribute to the country.\nFOL: all x. (Taxpayer(x) -> ContributeTo(x, Country))\nTEXT: Everyone who works for a government department pays a tax on their salary.\nFOL: all x. (WorkFor(x, GovernmentAgency) -> Taxpayer(x))\nTEXT: Everyone in the army is an employee of a government department.\nFOL: all x. (ServesIn(x, TheArmy) -> WorkFor(x, GovernmentAgency))\nTEXT: Everyone convicted of murder goes to prison.\nFOL: all x. (SentencedForMurder(x) -> Imprisoned(x))\nTEXT: Everyone who has been to prison has a criminal record.\nFOL: all x. (Imprisoned((x) -> Has(x, CriminalRecord))\nTEXT: James was either once convicted of murder, or spent time in prison.\nFOL: ((SentencedForMurder(James) & -Imprisoned(James)) | (-SentencedForMurder(James) & Imprisoned(James)))\nTEXT: James either has a criminal record, or pays his taxes.\nFOL: ((Has(James, CriminalRecord) & -Taxpayer(James)) | (-Has(James, CriminalRecord) & Taxpayer(James)))\nTEXT: James does not contribute to the country.\nFOL: ContributeToCountry(James)\n\nANSWER: Uncertain\n</EVALUATE>\n\n<PREMISES>\nNo songs are visuals.\nAll folk songs are songs.\nAll videos are visuals.\nAll movies are videos.\nAll sci-fi movies are movies.\nInception is a sci-fi movie.\nMac is neither a folk song nor a sci-fi movie.\n</PREMISES>\n<CONCLUSION>\nInception is a folk song.\n</CONCLUSION>\n<EVALUATE>\nTEXT: No songs are visuals.\nFOL: all x. (Song(x) -> -Visual(x))\nTEXT: All folk songs are songs.\nFOL: all x. (FolkSong(x) -> Song(x))\nTEXT: All videos are visuals.\nFOL: all x. (Video(x) -> Visual(x))\nTEXT: All movies are videos.\nFOL: all x. (Movie(x) -> Video(x))\nTEXT: All sci-fi movies are movies.\nFOL: all x. (ScifiMovie(x) -> Movie(x))\nTEXT: Inception is a sci-fi movie.\nFOL: ScifiMovie(Inception)\nTEXT: Mac is neither a folk song nor a sci-fi movie.\nFOL: -FolkSong(Mac) & -ScifiMovie(Mac)\nTEXT: Inception is a folk song.\nFOL: FolkSong(Inception)\n\nANSWER: False\n</EVALUATE>\n\n<PREMISES>\nEvery chef can cook.\nSome people who aren’t chefs can cook.\nPeople who cook can make scrambled eggs and pasta.\nIf someone can make cookies and muffins, they are a baker.\nBakers who can also make scrambled eggs can make a good breakfast.\nLuke can make cookies, scrambled eggs, and muffins, but not pasta.\n</PREMISES>\n<CONCLUSION>\nLuke is a chef.\n</CONCLUSION>\n<EVALUATE>\nTEXT: Every chef can cook.\nFOL: all x. (Chef(x) -> Can(x, Cook))\nTEXT: Some people who aren’t chefs can cook.\nFOL: exists x. (-Chef(x) & Can(x, Cook))\nTEXT: People who cook can make scrambled eggs and pasta.\nFOL: all x. (Can(x, Cook) -> (CanMake(x, ScrambledEggs) & CanMake(x, Pasta)))\nTEXT: If someone can make cookies and muffins, they are a baker.\nFOL: all x. (CanMake(x, Cookies) & CanMake(x, Muffins) -> Baker(x))\nTEXT: Bakers who can also make scrambled eggs can make a good breakfast.\nFOL: all x. ((Baker(x) & CanMake(x, ScrambledEggs)) -> CanMake(x, GoodBreakfast))\nTEXT: Luke can make cookies, scrambled eggs, and muffins, but not pasta.\nFOL: CanMake(Luke, Cookies) & (CanMake(Luke, ScrambledEggs) & CanMake(Luke, Muffins) & -CanMake(Luke, Pasta)\nTEXT: Luke is a chef.\nFOL: MakeGoodBreakfast(Luke)\n\nANSWER: False\n</EVALUATE>\n\n<PREMISES>\nETS develops various standardized tests primarily in the United States for K-12 and higher education.\nETS administers international tests, including the TOEFL, TOEIC, GRE, and subject tests.\nMany of the assessments ETS develops are associated with entry to the US tertiary and quaternary education institutions.\nETS also develops K-12 statewide assessments used for accountability testing in many states.\n</PREMISES>\n<CONCLUSION>\nETS doesn't administer tests internationally.\n</CONCLUSION>\n<EVALUATE>\nTEXT: ETS develops various standardized tests primarily in the United States for K-12 and higher education.\nFOL: exists x. exists y. (Develop(eTS, x) & Develop(eTS, y) & StandardizedTest(x) & StandardizedTest(y) & In(x, UnitedState) & In(y, UnitedState) & For(x, kOneTwoAndHigherEducation) & For(y, kOneTwoAndHigherEducation))\nTEXT: ETS administers international tests, including the TOEFL, TOEIC, GRE, and subject tests.\nFOL: exists x. (Administer(eTS, x) & InternationalTest(x) & (TOEFL(x) | TOEIC(x) | GRE(x) | SubjectTest(x)))\nTEXT: Many of the assessments ETS develops are associated with entry to the US tertiary and quaternary education institutions.\nFOL: exists x. (Develop(eTS, x) & AssociatedWith(x, EntryToUSEducationInstitution))\nTEXT: ETS also develops K-12 statewide assessments used for accountability testing in many states.\nFOL: exists x. (Develop(eTS, x) & StateWideAssesment(x) & UsedFor(x, AccountabilityTesting))\nTEXT: ETS doesn't administer tests internationally.\nFOL: exists x. (Develops(Ets, x) & For(x, k-OneTwoandhighereducation)) & exists x. (Develops(Ets, x) & AssociatedWith(x, Entrytouseducationinstitutions))\n\nANSWER: False\n</EVALUATE>\n\n<PREMISES>\nDaveed Diggs is an actor and film producer.\nDaveed Diggs played two roles in the musical Hamilton on Broadway.\nOne of the actors from Hamilton won the best actor award.\nThe actor playing Thomas Jefferson won the best actor award.\nDaveed Diggs played Thomas Jefferson.\nMusicals on Broadway are not films.\n</PREMISES>\n<CONCLUSION>\nDaveed Diggs won the best actor award.\n</CONCLUSION>\n<EVALUATE>\nTEXT: Daveed Diggs is an actor and film producer.\nFOL: Actor(DaveedDiggs) & FilmProducer(DaveedDiggs)\nTEXT: Daveed Diggs played two roles in the musical Hamilton on Broadway.\nFOL: exists x. exists y.(PlaysIn(DaveedDiggs, x, Hamilton) & (-(x=y)) & PlaysIn(DaveedDiggs, y, Hamilton)) & OnBroadway(Hamilton) & Musical(Hamilton)\nTEXT: One of the actors from Hamilton won the best actor award.\nFOL: exists x. exists y.(Actor(x) & PlaysIn(x, y, Hamilton) & Wins(x, BestActorAward))\nTEXT: The actor playing Thomas Jefferson won the best actor award.\nFOL: exists x. (Actor(x) & PlaysIn(x, ThomasJefferson, Hamilton) & Wins(x, BestActorAward))\nTEXT: Daveed Diggs played Thomas Jefferson.\nFOL: Plays(DaveedDiggs, ThomasJefferson)\nTEXT: Musicals on Broadway are not films.\nFOL: all x. ((Musical(x) & OnBroadway(x)) -> -Film(x))\nTEXT: Daveed Diggs won the best actor award.\nFOL: exists x. (BRICS(x) & Speaks(x, Hindi))\n\nANSWER: True\n</EVALUATE>\n\n<PREMISES>\nSome caterpillars become bears.\nSome bears become butterflies.\n</PREMISES>\n<CONCLUSION>\nNo caterpillar becomes a butterfly.\n</CONCLUSION>\n<EVALUATE>", "raw_generations": ["Generation 1:\nFOL:\nall x. (Caterpillar(x) -> -Butterfly(x))\n\nANSWER: False\nThe premises do not provide enough information to conclude that no caterpillar becomes a butterfly. The premises suggest that some caterpillars become bears, but they do not rule out the possibility that some caterpillars become butterflies.\nProcessed: False", "Generation 2:\nTEXT: Some caterpillars become bears.\nFOL: exists x. (Caterpillar(x) & Becomes(x, Bear))\n\nTEXT: Some bears become butterflies.\nFOL: exists x. (Bear(x) & Becomes(x, Butterfly))\n\nTEXT: No caterpillar becomes a butterfly.\nFOL: all x. (Caterpillar(x) -> -Becomes(x, Butterfly))\n\nANSWER: False\nProcessed: False", "Generation 3:\nTEXT: Some caterpillars become bears.\nFOL: exists x. (Caterpillar(x) & Becomes(x, Bear))\n\nTEXT: Some bears become butterflies.\nFOL: exists y. (Bear(y) & Becomes(y, Butterfly))\n\nTEXT: No caterpillar becomes a butterfly.\nFOL: -(exists z. (Caterpillar(z) & Becomes(z, Butterfly)))\n\nANSWER: False\nProcessed: False", "Generation 4:\nTEXT: Some caterpillars become bears.\nFOL: exists x. (Caterpillar(x) & Becomes(x, Bear))\nTEXT: Some bears become butterflies.\nFOL: exists y. (Bear(y) & Becomes(y, Butterfly))\nTEXT: No caterpillar becomes a butterfly.\nFOL: forall x. (Caterpillar(x) -> -Becomes(x, Butterfly))\n\nANSWER: False\nThe given premises do not imply that no caterpillar becomes a butterfly. In fact, no information is provided about the transformation of caterpillars into butterflies. The premises only mention bears, not caterpillars.\nProcessed: False", "Generation 5:\nTEXT: Some caterpillars become bears.\nFOL: exists x. (Caterpillar(x) & Becomes(x, Bear))\nTEXT: Some bears become butterflies.\nFOL: exists x. (Bear(x) & Becomes(x, Butterfly))\nTEXT: No caterpillar becomes a butterfly.\nFOL: all x. (-(Caterpillar(x) & Becomes(x, Butterfly)))\n\nANSWER: False\nProcessed: False", "Generation 6:\nTEXT: Some caterpillars become bears.\nFOL: exists x. (Caterpillar(x) & Becomes(x, Bear))\nTEXT: Some bears become butterflies.\nFOL: exists x. (Bear(x) & Becomes(x, Butterfly))\nTEXT: No caterpillar becomes a butterfly.\nFOL: all x. (-(Caterpillar(x) -> Becomes(x, Butterfly)))\n\nANSWER: False\nProcessed: False", "Generation 7:\nTEXT: Some caterpillars become bears.\nFOL: exists x. (Caterpillar(x) & Becomes(x, Bear))\nTEXT: Some bears become butterflies.\nFOL: exists x. (Bear(x) & Becomes(x, Butterfly))\nTEXT: No caterpillar becomes a butterfly.\nFOL: forall x. (-(Caterpillar(x) & Becomes(x, Butterfly)))\n\nANSWER: False\n\nIn the given premises, there's no information about caterpillars becoming butterflies. Since it's possible that some caterpillars do become butterflies (as we don't have evidence to the contrary), the conclusion \"No caterpillar becomes a butterfly\" is false.\nProcessed: False", "Generation 8:\nTEXT: Some caterpillars become bears.\nFOL: exists x. (Caterpillar(x) & Becomes(x, Bear))\nTEXT: Some bears become butterflies.\nFOL: exists x. (Bear(x) & Becomes(x, Butterfly))\nTEXT: No caterpillar becomes a butterfly.\nFOL: all x. (-(Caterpillar(x) -> Becomes(x, Butterfly)))\n\nANSWER: False (Given the premises, it is not possible for all caterpillars to not become butterflies since there are some caterpillars that become bears, which are not butterflies, but there are also some caterpillars that become butterflies as well.)\nProcessed: False", "Generation 9:\nTEXT: Some caterpillars become bears.\nFOL: exists x. (Caterpillar(x) & Becomes(x, Bear))\n\nTEXT: Some bears become butterflies.\nFOL: exists y. (Bear(y) & Becomes(y, Butterfly))\n\nTEXT: No caterpillar becomes a butterfly.\nFOL: all z. (-(Caterpillar(z) & Becomes(z, Butterfly)))\n\nANSWER: False\n\nThis conclusion is false because the premises state that some caterpillars become bears, but they do not specify that all caterpillars become bears. Therefore, it is possible for some caterpillars to become butterflies.\nProcessed: False", "Generation 10:\nTEXT: Some caterpillars become bears.\nFOL: exists x. (Caterpillar(x) & Becomes(x, Bear))\nTEXT: Some bears become butterflies.\nFOL: exists x. (Bear(x) & Becomes(x, Butterfly))\nTEXT: No caterpillar becomes a butterfly.\nFOL: -(exists x. (Caterpillar(x) & Becomes(x, Butterfly)))\n\nANSWER: False\n\nThe conclusion contradicts the first premise, which states that some caterpillars become bears. Therefore, it cannot be true that no caterpillar becomes a butterfly.\nProcessed: False\n\nReference: Uncertain\n========================================"], "answers": ["False", "False", "False", "False", "False", "False", "False", "False", "False", "False"]}
{"idx": 74, "prompt": "The following is a first-order logic (FOL) problem.\nThe problem is to determine whether the conclusion follows from the premises.\nThe premises are given in the form of a set of first-order logic sentences.\nThe conclusion is given in the form of a single first-order logic sentence.\nThe task is to translate each of the premises and conclusions into FOL expressions.and then to evaluate the conclusion as ANSWER: True, ANSWER: False, or ANSWER: Uncertain given the premises. The output should follow format TEXT: \nFOL: \nTEXT: \nFOL:... ANSWER: \n\n\n<PREMISES>\nAll biodegradable things are environment-friendly.\nAll woodware is biodegradable.\nAll paper is woodware.\nNothing is a good thing and also a bad thing.\nAll environment-friendly things are good.\nA worksheet is either paper or environment-friendly.\n</PREMISES>\n<CONCLUSION>\nA worksheet is not biodegradable.\n</CONCLUSION>\n<EVALUATE>\nTEXT: All biodegradable things are environment-friendly.\nFOL: all x. (Biodegradable(x) -> EnvironmentFriendly(x))\nTEXT: All woodware is biodegradable.\nFOL: all x. (Woodware(x) -> Biodegradable(x))\nTEXT: All paper is woodware.\nFOL: all x. (Paper(x) -> Woodware(x))\nTEXT: Nothing is a good thing and also a bad thing.\nFOL: -(exists x. (Good(x) & Bad(x)))\nTEXT: All environment-friendly things are good.\nFOL: all x. (EnvironmentFriendly(x) -> Good(x))\nTEXT: A worksheet is either paper or environment-friendly.\nFOL: ((Paper(Worksheet) & -EnvironmentFriendly(Worksheet)) | (-Paper(Worksheet) & EnvironmentFriendly(Worksheet)))\nTEXT: A worksheet is not biodegradable.\nFOL: -Dispensable(Worksheet)\n\nANSWER: Uncertain\n</EVALUATE>\n\n<PREMISES>\nA La Liga soccer team ranks higher than another La Liga soccer team if it receives more points.\nIf there are two La Liga soccer teams and neither has more points than the other, then the team which receives more points from the games between the two teams ranks higher.\nReal Madrid and Barcelona are both La Liga soccer teams.\nReal Madrid received more points than Barcelona.\nNeither Real Madrid nor Barcelona received more points from the games between them.\n</PREMISES>\n<CONCLUSION>\nReal Madrid ranks higher than Barcelona.\n</CONCLUSION>\n<EVALUATE>\nTEXT: A La Liga soccer team ranks higher than another La Liga soccer team if it receives more points.\nFOL: all x. all y. (LaLigaSoccerTeam(x) & LaLigaSoccerTeam(y) & MorePoints(x, y) -> RankHigherThan(x, y))\nTEXT: If there are two La Liga soccer teams and neither has more points than the other, then the team which receives more points from the games between the two teams ranks higher.\nFOL: all x. all y. (LaLigaSoccerTeam(x) & LaLigaSoccerTeam(y) & -MorePoints(x, y) & -MorePoints(y, x) & MorePointsInGameBetween(x, y) ->  RankHigherThan(x, y))\nTEXT: Real Madrid and Barcelona are both La Liga soccer teams.\nFOL: LaLigaSoccerTeam(RealMadrid) & LaLigaSoccerTeam(Barcelona)\nTEXT: Real Madrid received more points than Barcelona.\nFOL: MorePoints(RealMadrid, Barcelona)\nTEXT: Neither Real Madrid nor Barcelona received more points from the games between them.\nFOL: -MorePointsInGameBetween(RealMadrid, Barcelona) & -MorePointsInGameBetween(Barcelona, RealMadrid)\nTEXT: Real Madrid ranks higher than Barcelona.\nFOL: HigherRank(RealMadrid, Barcelona)\n\nANSWER: True\n</EVALUATE>\n\n<PREMISES>\nAll professional athletes spend most of their time on sports.\nAll Olympic gold medal winners are professional athletes.\nNo full-time scientists spend the majority of their time on sports.\nAll Nobel physics laureates are full-time scientists.\nAmy spends the most time on sports, or Amy is an Olympic gold medal winner.\nIf Amy is not a Nobel physics laureate, then Amy is not an Olympic gold medal winner.\n</PREMISES>\n<CONCLUSION>\nIf Amy is not an Olympic gold medal winner, then Amy is a Nobel physics laureate.\n</CONCLUSION>\n<EVALUATE>\nTEXT: All professional athletes spend most of their time on sports.\nFOL: all x. (ProfessionalAthlete(x) -> SpendOn(x, MostOfTheirTime, Sports))\nTEXT: All Olympic gold medal winners are professional athletes.\nFOL: all x. (OlympicGoldMedalWinner(x) -> ProfessionalAthlete(x))\nTEXT: No full-time scientists spend the majority of their time on sports.\nFOL: all x. (FullTimeScientist(x) -> -SpendOn(x, MostOfTheirTime, Sports))\nTEXT: All Nobel physics laureates are full-time scientists.\nFOL: all x. (NobelPhysicsLaureate(x) -> FullTimeScientist(x))\nTEXT: Amy spends the most time on sports, or Amy is an Olympic gold medal winner.\nFOL: SpendOn(Amy, MostOfTheirTime, Sports) | OlympicGoldMedalWinner(Amy)\nTEXT: If Amy is not a Nobel physics laureate, then Amy is not an Olympic gold medal winner.\nFOL: -NobelPhysicsLaureate(Amy) -> -OlympicGoldMedalWinner(Amy)\nTEXT: If Amy is not an Olympic gold medal winner, then Amy is a Nobel physics laureate.\nFOL: -OlympicGoldMedalWinner(Amy) -> NobelLaureate(Amy)\n\nANSWER: False\n</EVALUATE>\n\n<PREMISES>\nIf a person pays their taxes, then they contribute to the country.\nEveryone who works for a government department pays a tax on their salary.\nEveryone in the army is an employee of a government department.\nEveryone convicted of murder goes to prison.\nEveryone who has been to prison has a criminal record.\nJames was either once convicted of murder, or spent time in prison.\nJames either has a criminal record, or pays his taxes.\n</PREMISES>\n<CONCLUSION>\nJames does not contribute to the country.\n</CONCLUSION>\n<EVALUATE>\nTEXT: If a person pays their taxes, then they contribute to the country.\nFOL: all x. (Taxpayer(x) -> ContributeTo(x, Country))\nTEXT: Everyone who works for a government department pays a tax on their salary.\nFOL: all x. (WorkFor(x, GovernmentAgency) -> Taxpayer(x))\nTEXT: Everyone in the army is an employee of a government department.\nFOL: all x. (ServesIn(x, TheArmy) -> WorkFor(x, GovernmentAgency))\nTEXT: Everyone convicted of murder goes to prison.\nFOL: all x. (SentencedForMurder(x) -> Imprisoned(x))\nTEXT: Everyone who has been to prison has a criminal record.\nFOL: all x. (Imprisoned((x) -> Has(x, CriminalRecord))\nTEXT: James was either once convicted of murder, or spent time in prison.\nFOL: ((SentencedForMurder(James) & -Imprisoned(James)) | (-SentencedForMurder(James) & Imprisoned(James)))\nTEXT: James either has a criminal record, or pays his taxes.\nFOL: ((Has(James, CriminalRecord) & -Taxpayer(James)) | (-Has(James, CriminalRecord) & Taxpayer(James)))\nTEXT: James does not contribute to the country.\nFOL: ContributeToCountry(James)\n\nANSWER: Uncertain\n</EVALUATE>\n\n<PREMISES>\nNo songs are visuals.\nAll folk songs are songs.\nAll videos are visuals.\nAll movies are videos.\nAll sci-fi movies are movies.\nInception is a sci-fi movie.\nMac is neither a folk song nor a sci-fi movie.\n</PREMISES>\n<CONCLUSION>\nInception is a folk song.\n</CONCLUSION>\n<EVALUATE>\nTEXT: No songs are visuals.\nFOL: all x. (Song(x) -> -Visual(x))\nTEXT: All folk songs are songs.\nFOL: all x. (FolkSong(x) -> Song(x))\nTEXT: All videos are visuals.\nFOL: all x. (Video(x) -> Visual(x))\nTEXT: All movies are videos.\nFOL: all x. (Movie(x) -> Video(x))\nTEXT: All sci-fi movies are movies.\nFOL: all x. (ScifiMovie(x) -> Movie(x))\nTEXT: Inception is a sci-fi movie.\nFOL: ScifiMovie(Inception)\nTEXT: Mac is neither a folk song nor a sci-fi movie.\nFOL: -FolkSong(Mac) & -ScifiMovie(Mac)\nTEXT: Inception is a folk song.\nFOL: FolkSong(Inception)\n\nANSWER: False\n</EVALUATE>\n\n<PREMISES>\nEvery chef can cook.\nSome people who aren’t chefs can cook.\nPeople who cook can make scrambled eggs and pasta.\nIf someone can make cookies and muffins, they are a baker.\nBakers who can also make scrambled eggs can make a good breakfast.\nLuke can make cookies, scrambled eggs, and muffins, but not pasta.\n</PREMISES>\n<CONCLUSION>\nLuke is a chef.\n</CONCLUSION>\n<EVALUATE>\nTEXT: Every chef can cook.\nFOL: all x. (Chef(x) -> Can(x, Cook))\nTEXT: Some people who aren’t chefs can cook.\nFOL: exists x. (-Chef(x) & Can(x, Cook))\nTEXT: People who cook can make scrambled eggs and pasta.\nFOL: all x. (Can(x, Cook) -> (CanMake(x, ScrambledEggs) & CanMake(x, Pasta)))\nTEXT: If someone can make cookies and muffins, they are a baker.\nFOL: all x. (CanMake(x, Cookies) & CanMake(x, Muffins) -> Baker(x))\nTEXT: Bakers who can also make scrambled eggs can make a good breakfast.\nFOL: all x. ((Baker(x) & CanMake(x, ScrambledEggs)) -> CanMake(x, GoodBreakfast))\nTEXT: Luke can make cookies, scrambled eggs, and muffins, but not pasta.\nFOL: CanMake(Luke, Cookies) & (CanMake(Luke, ScrambledEggs) & CanMake(Luke, Muffins) & -CanMake(Luke, Pasta)\nTEXT: Luke is a chef.\nFOL: MakeGoodBreakfast(Luke)\n\nANSWER: False\n</EVALUATE>\n\n<PREMISES>\nETS develops various standardized tests primarily in the United States for K-12 and higher education.\nETS administers international tests, including the TOEFL, TOEIC, GRE, and subject tests.\nMany of the assessments ETS develops are associated with entry to the US tertiary and quaternary education institutions.\nETS also develops K-12 statewide assessments used for accountability testing in many states.\n</PREMISES>\n<CONCLUSION>\nETS doesn't administer tests internationally.\n</CONCLUSION>\n<EVALUATE>\nTEXT: ETS develops various standardized tests primarily in the United States for K-12 and higher education.\nFOL: exists x. exists y. (Develop(eTS, x) & Develop(eTS, y) & StandardizedTest(x) & StandardizedTest(y) & In(x, UnitedState) & In(y, UnitedState) & For(x, kOneTwoAndHigherEducation) & For(y, kOneTwoAndHigherEducation))\nTEXT: ETS administers international tests, including the TOEFL, TOEIC, GRE, and subject tests.\nFOL: exists x. (Administer(eTS, x) & InternationalTest(x) & (TOEFL(x) | TOEIC(x) | GRE(x) | SubjectTest(x)))\nTEXT: Many of the assessments ETS develops are associated with entry to the US tertiary and quaternary education institutions.\nFOL: exists x. (Develop(eTS, x) & AssociatedWith(x, EntryToUSEducationInstitution))\nTEXT: ETS also develops K-12 statewide assessments used for accountability testing in many states.\nFOL: exists x. (Develop(eTS, x) & StateWideAssesment(x) & UsedFor(x, AccountabilityTesting))\nTEXT: ETS doesn't administer tests internationally.\nFOL: exists x. (Develops(Ets, x) & For(x, k-OneTwoandhighereducation)) & exists x. (Develops(Ets, x) & AssociatedWith(x, Entrytouseducationinstitutions))\n\nANSWER: False\n</EVALUATE>\n\n<PREMISES>\nDaveed Diggs is an actor and film producer.\nDaveed Diggs played two roles in the musical Hamilton on Broadway.\nOne of the actors from Hamilton won the best actor award.\nThe actor playing Thomas Jefferson won the best actor award.\nDaveed Diggs played Thomas Jefferson.\nMusicals on Broadway are not films.\n</PREMISES>\n<CONCLUSION>\nDaveed Diggs won the best actor award.\n</CONCLUSION>\n<EVALUATE>\nTEXT: Daveed Diggs is an actor and film producer.\nFOL: Actor(DaveedDiggs) & FilmProducer(DaveedDiggs)\nTEXT: Daveed Diggs played two roles in the musical Hamilton on Broadway.\nFOL: exists x. exists y.(PlaysIn(DaveedDiggs, x, Hamilton) & (-(x=y)) & PlaysIn(DaveedDiggs, y, Hamilton)) & OnBroadway(Hamilton) & Musical(Hamilton)\nTEXT: One of the actors from Hamilton won the best actor award.\nFOL: exists x. exists y.(Actor(x) & PlaysIn(x, y, Hamilton) & Wins(x, BestActorAward))\nTEXT: The actor playing Thomas Jefferson won the best actor award.\nFOL: exists x. (Actor(x) & PlaysIn(x, ThomasJefferson, Hamilton) & Wins(x, BestActorAward))\nTEXT: Daveed Diggs played Thomas Jefferson.\nFOL: Plays(DaveedDiggs, ThomasJefferson)\nTEXT: Musicals on Broadway are not films.\nFOL: all x. ((Musical(x) & OnBroadway(x)) -> -Film(x))\nTEXT: Daveed Diggs won the best actor award.\nFOL: exists x. (BRICS(x) & Speaks(x, Hindi))\n\nANSWER: True\n</EVALUATE>\n\n<PREMISES>\nThe Nobel Prize has been awarded to Donald Knuth, Marvin Minsky, Richard Hamming, and John McCarthy.\nDonald Knuth made contributions to science.\nMarvin Minsky is recognized for his contributions to the field of pole dancing.\nRichard Hamming hated numerical methods.\nJohn McCarthy made contributions to the field of pole dancing.\n</PREMISES>\n<CONCLUSION>\nOnly one person who won the Nobel Prize made significant contributions to science.\n</CONCLUSION>\n<EVALUATE>", "raw_generations": ["Generation 1:\nTEXT: The Nobel Prize has been awarded to Donald Knuth, Marvin Minsky, Richard Hamming, and John McCarthy.\nFOL: awarded(NobelPrize, DonaldKnuth) & awarded(NobelPrize, MarvinMinsky) & awarded(NobelPrize, RichardHamming) & awarded(NobelPrize, JohnMcCarthy)\n\nTEXT: Donald Knuth made contributions to science.\nFOL: contributionsTo(DonaldKnuth, Science)\n\nTEXT: Marvin Minsky is recognized for his contributions to the field of pole dancing.\nFOL: contributionsTo(MarvinMinsky, PoleDancing)\n\nTEXT: Richard Hamming hated numerical methods.\nFOL: hates(RichardHamming, NumericalMethods)\n\nTEXT: John McCarthy made contributions to the field of pole dancing.\nFOL: contributionsTo(JohnMcCarthy, PoleDancing)\n\nTEXT: Only one person who won the Nobel Prize made significant contributions to science.\nFOL: (exists x. (awarded(NobelPrize, x) & contributionsTo(x, Science))) & (all y. (awarded(NobelPrize, y) & y != x) -> -(contributionsTo(y, Science)))\n\nANSWER: False\n\nThis conclusion is false because more than one person who won the Nobel Prize made significant contributions to science. Donald Knuth made contributions to science, so the premise that only one person made significant contributions to science is incorrect.\nProcessed: False", "Generation 2:\nTEXT: The Nobel Prize has been awarded to Donald Knuth, Marvin Minsky, Richard Hamming, and John McCarthy.\nFOL: NobelPrize(DonaldKnuth) & NobelPrize(MarvinMinsky) & NobelPrize(RichardHamming) & NobelPrize(JohnMcCarthy)\n\nTEXT: Donald Knuth made contributions to science.\nFOL: ContributesTo(DonaldKnuth, Science)\n\nTEXT: Marvin Minsky is recognized for his contributions to the field of pole dancing.\nFOL: -ContributesTo(MarvinMinsky, Science) & ContributionsTo(MarvinMinsky, PoleDancing)\n\nTEXT: Richard Hamming hated numerical methods.\nFOL: -ContributesTo(RichardHamming, Science) & Hates(RichardHamming, NumericalMethods)\n\nTEXT: John McCarthy made contributions to the field of pole dancing.\nFOL: -ContributesTo(JohnMcCarthy, Science) & ContributionsTo(JohnMcCarthy, PoleDancing)\n\nTEXT: Only one person who won the Nobel Prize made significant contributions to science.\nFOL: exists x. (NobelPrize(x) -> (exists y. (ContributesTo(y, Science)) & x=y) & -(exists z. (NobelPrize(z) & ContributesTo(z, Science))))\n\nANSWER: False\n\nThis is because John McCarthy is also a recipient of the Nobel Prize and made contributions to the field of pole dancing, not science.\nProcessed: False", "Generation 3:\nTEXT: The Nobel Prize has been awarded to Donald Knuth, Marvin Minsky, Richard Hamming, and John McCarthy.\nFOL: NobelPrize(DonaldKnuth) & NobelPrize(MarvinMinsky) & NobelPrize(RichardHamming) & NobelPrize(JohnMcCarthy)\nTEXT: Donald Knuth made contributions to science.\nFOL: ContributesTo(DonaldKnuth, Science)\nTEXT: Marvin Minsky is recognized for his contributions to the field of pole dancing.\nFOL: ContributesTo(MarvinMinsky, PoleDancing)\nTEXT: Richard Hamming hated numerical methods.\nFOL: Hates(RichardHamming, NumericalMethods)\nTEXT: John McCarthy made contributions to the field of pole dancing.\nFOL: ContributesTo(JohnMcCarthy, PoleDancing)\nTEXT: Only one person who won the Nobel Prize made significant contributions to science.\nFOL: (exists x. (NobelPrize(x) & ContributesTo(x, Science))) & -(exists y. (NobelPrize(y) & exists z. (NobelPrize(z) & ContributesTo(z, Science))))\n\nANSWER: False\nProcessed: False", "Generation 4:\nTEXT: The Nobel Prize has been awarded to Donald Knuth, Marvin Minsky, Richard Hamming, and John McCarthy.\nFOL: NobelPrizeWinner(DonaldKnuth) & NobelPrizeWinner(MarvinMinsky) & NobelPrizeWinner(RichardHamming) & NobelPrizeWinner(JohnMcCarthy)\n\nTEXT: Donald Knuth made contributions to science.\nFOL: ContributedToScience(DonaldKnuth)\n\nTEXT: Marvin Minsky is recognized for his contributions to the field of pole dancing.\nFOL: ContributedToPoleDancing(MarvinMinsky)\n\nTEXT: Richard Hamming hated numerical methods.\nFOL: Hated(RichardHamming, NumericalMethods)\n\nTEXT: John McCarthy made contributions to the field of pole dancing.\nFOL: ContributedToPoleDancing(JohnMcCarthy)\n\nTEXT: Only one person who won the Nobel Prize made significant contributions to science.\nFOL: exists x. (NobelPrizeWinner(x) & ContributedToScience(x)) & -(exists y. (NobelPrizeWinner(y) & ContributedToScience(y)) & x != y)\n\nANSWER: True\nProcessed: True", "Generation 5:\nTEXT: The Nobel Prize has been awarded to Donald Knuth, Marvin Minsky, Richard Hamming, and John McCarthy.\nFOL: NobelPrize(DonaldKnuth) & NobelPrize(MarvinMinsky) & NobelPrize(RichardHamming) & NobelPrize(JohnMcCarthy)\n\nTEXT: Donald Knuth made contributions to science.\nFOL: ContributionsTo(DonaldKnuth, Science)\n\nTEXT: Marvin Minsky is recognized for his contributions to the field of pole dancing.\nFOL: ContributionsTo(MarvinMinsky, PoleDancing)\n\nTEXT: Richard Hamming hated numerical methods.\nFOL: Hates(RichardHamming, NumericalMethods)\n\nTEXT: John McCarthy made contributions to the field of pole dancing.\nFOL: ContributionsTo(JohnMcCarthy, PoleDancing)\n\nTEXT: Only one person who won the Nobel Prize made significant contributions to science.\nFOL: exists x. (NobelPrize(x) -> (exists y. ContributionsTo(y, Science) & x=y)) & -(exists x. (NobelPrize(x) & exists y. (NobelPrize(y) & y!=x & ContributionsTo(y, Science))))\n\nANSWER: True\nProcessed: True", "Generation 6:\nTEXT: The Nobel Prize has been awarded to Donald Knuth, Marvin Minsky, Richard Hamming, and John McCarthy.\nFOL: awarded(NobelPrize, DonaldKnuth) & awarded(NobelPrize, MarvinMinsky) & awarded(NobelPrize, RichardHamming) & awarded(NobelPrize, JohnMcCarthy)\n\nTEXT: Donald Knuth made contributions to science.\nFOL: contributionsTo(DonaldKnuth, Science)\n\nTEXT: Marvin Minsky is recognized for his contributions to the field of pole dancing.\nFOL: contributionsTo(MarvinMinsky, PoleDancing)\n\nTEXT: Richard Hamming hated numerical methods.\nFOL: hates(RichardHamming, NumericalMethods)\n\nTEXT: John McCarthy made contributions to the field of pole dancing.\nFOL: contributionsTo(JohnMcCarthy, PoleDancing)\n\nTEXT: Only one person who won the Nobel Prize made significant contributions to science.\nFOL: (count(x | awarded(NobelPrize, x) & contributionsTo(x, Science)) = 1)\n\nANSWER: True (if we consider that only one person can make significant contributions to science and if we ignore the fact that Richard Hamming hated numerical methods, which doesn't necessarily mean he didn't contribute to science)\nProcessed: True", "Generation 7:\nTEXT: The Nobel Prize has been awarded to Donald Knuth, Marvin Minsky, Richard Hamming, and John McCarthy.\nFOL: NobelPrize(DonaldKnuth) & NobelPrize(MarvinMinsky) & NobelPrize(RichardHamming) & NobelPrize(JohnMcCarthy)\nTEXT: Donald Knuth made contributions to science.\nFOL: ContributionsToScience(DonaldKnuth)\nTEXT: Marvin Minsky is recognized for his contributions to the field of pole dancing.\nFOL: ContributionsToPoleDancing(MarvinMinsky)\nTEXT: Richard Hamming hated numerical methods.\nFOL: Hates(RichardHamming, NumericalMethods)\nTEXT: John McCarthy made contributions to the field of pole dancing.\nFOL: ContributionsToPoleDancing(JohnMcCarthy)\nTEXT: Only one person who won the Nobel Prize made significant contributions to science.\nFOL: exists x. (NobelPrize(x) & ContributionsToScience(x)) & -(exists y. (NobelPrize(y) & ContributionsToScience(y)) & y != x)\n\nANSWER: False (There are at least two Nobel Prize winners who made significant contributions to science: Donald Knuth and John McCarthy)\nProcessed: False", "Generation 8:\nTEXT: The Nobel Prize has been awarded to Donald Knuth, Marvin Minsky, Richard Hamming, and John McCarthy.\nFOL: NobelPrize(DonaldKnuth) & NobelPrize(MarvinMinsky) & NobelPrize(RichardHamming) & NobelPrize(JohnMcCarthy)\n\nTEXT: Donald Knuth made contributions to science.\nFOL: ContributionsTo(DonaldKnuth, Science)\n\nTEXT: Marvin Minsky is recognized for his contributions to the field of pole dancing.\nFOL: ContributionsTo(MarvinMinsky, PoleDancing)\n\nTEXT: Richard Hamming hated numerical methods.\nFOL: Hates(RichardHamming, NumericalMethods)\n\nTEXT: John McCarthy made contributions to the field of pole dancing.\nFOL: ContributionsTo(JohnMcCarthy, PoleDancing)\n\nTEXT: Only one person who won the Nobel Prize made significant contributions to science.\nFOL: (exists x. (NobelPrize(x) & ContributionsTo(x, Science))) -> (card({y | NobelPrize(y)}) = 1)\n\nANSWER: False\n\nThis is because multiple people who won the Nobel Prize made significant contributions to science. In this case, Donald Knuth made contributions to science.\nProcessed: False", "Generation 9:\nTEXT: The Nobel Prize has been awarded to Donald Knuth, Marvin Minsky, Richard Hamming, and John McCarthy.\nFOL: NobelPrize(DonaldKnuth) & NobelPrize(MarvinMinsky) & NobelPrize(RichardHamming) & NobelPrize(JohnMcCarthy)\n\nTEXT: Donald Knuth made contributions to science.\nFOL: ContributionToScience(DonaldKnuth)\n\nTEXT: Marvin Minsky is recognized for his contributions to the field of pole dancing.\nFOL: ContributionToPoleDancing(MarvinMinsky)\n\nTEXT: Richard Hamming hated numerical methods.\nFOL: -Likes(RichardHamming, NumericalMethods)\n\nTEXT: John McCarthy made contributions to the field of pole dancing.\nFOL: ContributionToPoleDancing(JohnMcCarthy)\n\nTEXT: Only one person who won the Nobel Prize made significant contributions to science.\nFOL: (exists x. (NobelPrize(x) & ContributionToScience(x))) -> (count((y:NobelPrize(y) & ContributionToScience(y))) = 1)\n\nANSWER: True (There is at least one Nobel Prize winner who made significant contributions to science, and there is only one such winner in this list, which is Donald Knuth)\nProcessed: True", "Generation 10:\nTEXT: The Nobel Prize has been awarded to Donald Knuth, Marvin Minsky, Richard Hamming, and John McCarthy.\nFOL: NobelPrize(DonaldKnuth) & NobelPrize(MarvinMinsky) & NobelPrize(RichardHamming) & NobelPrize(JohnMcCarthy)\n\nTEXT: Donald Knuth made contributions to science.\nFOL: ContributionsToScience(DonaldKnuth)\n\nTEXT: Marvin Minsky is recognized for his contributions to the field of pole dancing.\nFOL: ContributionsToPoleDancing(MarvinMinsky)\n\nTEXT: Richard Hamming hated numerical methods.\nFOL: Hates(RichardHamming, NumericalMethods)\n\nTEXT: John McCarthy made contributions to the field of pole dancing.\nFOL: ContributionsToPoleDancing(JohnMcCarthy)\n\nTEXT: Only one person who won the Nobel Prize made significant contributions to science.\nFOL: exists x. (NobelPrize(x) -> (only x made ContributionsToScience))\n\nANSWER: False (Since more than one person won the Nobel Prize and made contributions to science)\nProcessed: False\n\nReference: Uncertain\n========================================"], "answers": ["False", "False", "False", "True", "True", "True", "False", "False", "True", "False"]}
{"idx": 75, "prompt": "The following is a first-order logic (FOL) problem.\nThe problem is to determine whether the conclusion follows from the premises.\nThe premises are given in the form of a set of first-order logic sentences.\nThe conclusion is given in the form of a single first-order logic sentence.\nThe task is to translate each of the premises and conclusions into FOL expressions.and then to evaluate the conclusion as ANSWER: True, ANSWER: False, or ANSWER: Uncertain given the premises. The output should follow format TEXT: \nFOL: \nTEXT: \nFOL:... ANSWER: \n\n\n<PREMISES>\nAll biodegradable things are environment-friendly.\nAll woodware is biodegradable.\nAll paper is woodware.\nNothing is a good thing and also a bad thing.\nAll environment-friendly things are good.\nA worksheet is either paper or environment-friendly.\n</PREMISES>\n<CONCLUSION>\nA worksheet is not biodegradable.\n</CONCLUSION>\n<EVALUATE>\nTEXT: All biodegradable things are environment-friendly.\nFOL: all x. (Biodegradable(x) -> EnvironmentFriendly(x))\nTEXT: All woodware is biodegradable.\nFOL: all x. (Woodware(x) -> Biodegradable(x))\nTEXT: All paper is woodware.\nFOL: all x. (Paper(x) -> Woodware(x))\nTEXT: Nothing is a good thing and also a bad thing.\nFOL: -(exists x. (Good(x) & Bad(x)))\nTEXT: All environment-friendly things are good.\nFOL: all x. (EnvironmentFriendly(x) -> Good(x))\nTEXT: A worksheet is either paper or environment-friendly.\nFOL: ((Paper(Worksheet) & -EnvironmentFriendly(Worksheet)) | (-Paper(Worksheet) & EnvironmentFriendly(Worksheet)))\nTEXT: A worksheet is not biodegradable.\nFOL: -Dispensable(Worksheet)\n\nANSWER: Uncertain\n</EVALUATE>\n\n<PREMISES>\nA La Liga soccer team ranks higher than another La Liga soccer team if it receives more points.\nIf there are two La Liga soccer teams and neither has more points than the other, then the team which receives more points from the games between the two teams ranks higher.\nReal Madrid and Barcelona are both La Liga soccer teams.\nReal Madrid received more points than Barcelona.\nNeither Real Madrid nor Barcelona received more points from the games between them.\n</PREMISES>\n<CONCLUSION>\nReal Madrid ranks higher than Barcelona.\n</CONCLUSION>\n<EVALUATE>\nTEXT: A La Liga soccer team ranks higher than another La Liga soccer team if it receives more points.\nFOL: all x. all y. (LaLigaSoccerTeam(x) & LaLigaSoccerTeam(y) & MorePoints(x, y) -> RankHigherThan(x, y))\nTEXT: If there are two La Liga soccer teams and neither has more points than the other, then the team which receives more points from the games between the two teams ranks higher.\nFOL: all x. all y. (LaLigaSoccerTeam(x) & LaLigaSoccerTeam(y) & -MorePoints(x, y) & -MorePoints(y, x) & MorePointsInGameBetween(x, y) ->  RankHigherThan(x, y))\nTEXT: Real Madrid and Barcelona are both La Liga soccer teams.\nFOL: LaLigaSoccerTeam(RealMadrid) & LaLigaSoccerTeam(Barcelona)\nTEXT: Real Madrid received more points than Barcelona.\nFOL: MorePoints(RealMadrid, Barcelona)\nTEXT: Neither Real Madrid nor Barcelona received more points from the games between them.\nFOL: -MorePointsInGameBetween(RealMadrid, Barcelona) & -MorePointsInGameBetween(Barcelona, RealMadrid)\nTEXT: Real Madrid ranks higher than Barcelona.\nFOL: HigherRank(RealMadrid, Barcelona)\n\nANSWER: True\n</EVALUATE>\n\n<PREMISES>\nAll professional athletes spend most of their time on sports.\nAll Olympic gold medal winners are professional athletes.\nNo full-time scientists spend the majority of their time on sports.\nAll Nobel physics laureates are full-time scientists.\nAmy spends the most time on sports, or Amy is an Olympic gold medal winner.\nIf Amy is not a Nobel physics laureate, then Amy is not an Olympic gold medal winner.\n</PREMISES>\n<CONCLUSION>\nIf Amy is not an Olympic gold medal winner, then Amy is a Nobel physics laureate.\n</CONCLUSION>\n<EVALUATE>\nTEXT: All professional athletes spend most of their time on sports.\nFOL: all x. (ProfessionalAthlete(x) -> SpendOn(x, MostOfTheirTime, Sports))\nTEXT: All Olympic gold medal winners are professional athletes.\nFOL: all x. (OlympicGoldMedalWinner(x) -> ProfessionalAthlete(x))\nTEXT: No full-time scientists spend the majority of their time on sports.\nFOL: all x. (FullTimeScientist(x) -> -SpendOn(x, MostOfTheirTime, Sports))\nTEXT: All Nobel physics laureates are full-time scientists.\nFOL: all x. (NobelPhysicsLaureate(x) -> FullTimeScientist(x))\nTEXT: Amy spends the most time on sports, or Amy is an Olympic gold medal winner.\nFOL: SpendOn(Amy, MostOfTheirTime, Sports) | OlympicGoldMedalWinner(Amy)\nTEXT: If Amy is not a Nobel physics laureate, then Amy is not an Olympic gold medal winner.\nFOL: -NobelPhysicsLaureate(Amy) -> -OlympicGoldMedalWinner(Amy)\nTEXT: If Amy is not an Olympic gold medal winner, then Amy is a Nobel physics laureate.\nFOL: -OlympicGoldMedalWinner(Amy) -> NobelLaureate(Amy)\n\nANSWER: False\n</EVALUATE>\n\n<PREMISES>\nIf a person pays their taxes, then they contribute to the country.\nEveryone who works for a government department pays a tax on their salary.\nEveryone in the army is an employee of a government department.\nEveryone convicted of murder goes to prison.\nEveryone who has been to prison has a criminal record.\nJames was either once convicted of murder, or spent time in prison.\nJames either has a criminal record, or pays his taxes.\n</PREMISES>\n<CONCLUSION>\nJames does not contribute to the country.\n</CONCLUSION>\n<EVALUATE>\nTEXT: If a person pays their taxes, then they contribute to the country.\nFOL: all x. (Taxpayer(x) -> ContributeTo(x, Country))\nTEXT: Everyone who works for a government department pays a tax on their salary.\nFOL: all x. (WorkFor(x, GovernmentAgency) -> Taxpayer(x))\nTEXT: Everyone in the army is an employee of a government department.\nFOL: all x. (ServesIn(x, TheArmy) -> WorkFor(x, GovernmentAgency))\nTEXT: Everyone convicted of murder goes to prison.\nFOL: all x. (SentencedForMurder(x) -> Imprisoned(x))\nTEXT: Everyone who has been to prison has a criminal record.\nFOL: all x. (Imprisoned((x) -> Has(x, CriminalRecord))\nTEXT: James was either once convicted of murder, or spent time in prison.\nFOL: ((SentencedForMurder(James) & -Imprisoned(James)) | (-SentencedForMurder(James) & Imprisoned(James)))\nTEXT: James either has a criminal record, or pays his taxes.\nFOL: ((Has(James, CriminalRecord) & -Taxpayer(James)) | (-Has(James, CriminalRecord) & Taxpayer(James)))\nTEXT: James does not contribute to the country.\nFOL: ContributeToCountry(James)\n\nANSWER: Uncertain\n</EVALUATE>\n\n<PREMISES>\nNo songs are visuals.\nAll folk songs are songs.\nAll videos are visuals.\nAll movies are videos.\nAll sci-fi movies are movies.\nInception is a sci-fi movie.\nMac is neither a folk song nor a sci-fi movie.\n</PREMISES>\n<CONCLUSION>\nInception is a folk song.\n</CONCLUSION>\n<EVALUATE>\nTEXT: No songs are visuals.\nFOL: all x. (Song(x) -> -Visual(x))\nTEXT: All folk songs are songs.\nFOL: all x. (FolkSong(x) -> Song(x))\nTEXT: All videos are visuals.\nFOL: all x. (Video(x) -> Visual(x))\nTEXT: All movies are videos.\nFOL: all x. (Movie(x) -> Video(x))\nTEXT: All sci-fi movies are movies.\nFOL: all x. (ScifiMovie(x) -> Movie(x))\nTEXT: Inception is a sci-fi movie.\nFOL: ScifiMovie(Inception)\nTEXT: Mac is neither a folk song nor a sci-fi movie.\nFOL: -FolkSong(Mac) & -ScifiMovie(Mac)\nTEXT: Inception is a folk song.\nFOL: FolkSong(Inception)\n\nANSWER: False\n</EVALUATE>\n\n<PREMISES>\nEvery chef can cook.\nSome people who aren’t chefs can cook.\nPeople who cook can make scrambled eggs and pasta.\nIf someone can make cookies and muffins, they are a baker.\nBakers who can also make scrambled eggs can make a good breakfast.\nLuke can make cookies, scrambled eggs, and muffins, but not pasta.\n</PREMISES>\n<CONCLUSION>\nLuke is a chef.\n</CONCLUSION>\n<EVALUATE>\nTEXT: Every chef can cook.\nFOL: all x. (Chef(x) -> Can(x, Cook))\nTEXT: Some people who aren’t chefs can cook.\nFOL: exists x. (-Chef(x) & Can(x, Cook))\nTEXT: People who cook can make scrambled eggs and pasta.\nFOL: all x. (Can(x, Cook) -> (CanMake(x, ScrambledEggs) & CanMake(x, Pasta)))\nTEXT: If someone can make cookies and muffins, they are a baker.\nFOL: all x. (CanMake(x, Cookies) & CanMake(x, Muffins) -> Baker(x))\nTEXT: Bakers who can also make scrambled eggs can make a good breakfast.\nFOL: all x. ((Baker(x) & CanMake(x, ScrambledEggs)) -> CanMake(x, GoodBreakfast))\nTEXT: Luke can make cookies, scrambled eggs, and muffins, but not pasta.\nFOL: CanMake(Luke, Cookies) & (CanMake(Luke, ScrambledEggs) & CanMake(Luke, Muffins) & -CanMake(Luke, Pasta)\nTEXT: Luke is a chef.\nFOL: MakeGoodBreakfast(Luke)\n\nANSWER: False\n</EVALUATE>\n\n<PREMISES>\nETS develops various standardized tests primarily in the United States for K-12 and higher education.\nETS administers international tests, including the TOEFL, TOEIC, GRE, and subject tests.\nMany of the assessments ETS develops are associated with entry to the US tertiary and quaternary education institutions.\nETS also develops K-12 statewide assessments used for accountability testing in many states.\n</PREMISES>\n<CONCLUSION>\nETS doesn't administer tests internationally.\n</CONCLUSION>\n<EVALUATE>\nTEXT: ETS develops various standardized tests primarily in the United States for K-12 and higher education.\nFOL: exists x. exists y. (Develop(eTS, x) & Develop(eTS, y) & StandardizedTest(x) & StandardizedTest(y) & In(x, UnitedState) & In(y, UnitedState) & For(x, kOneTwoAndHigherEducation) & For(y, kOneTwoAndHigherEducation))\nTEXT: ETS administers international tests, including the TOEFL, TOEIC, GRE, and subject tests.\nFOL: exists x. (Administer(eTS, x) & InternationalTest(x) & (TOEFL(x) | TOEIC(x) | GRE(x) | SubjectTest(x)))\nTEXT: Many of the assessments ETS develops are associated with entry to the US tertiary and quaternary education institutions.\nFOL: exists x. (Develop(eTS, x) & AssociatedWith(x, EntryToUSEducationInstitution))\nTEXT: ETS also develops K-12 statewide assessments used for accountability testing in many states.\nFOL: exists x. (Develop(eTS, x) & StateWideAssesment(x) & UsedFor(x, AccountabilityTesting))\nTEXT: ETS doesn't administer tests internationally.\nFOL: exists x. (Develops(Ets, x) & For(x, k-OneTwoandhighereducation)) & exists x. (Develops(Ets, x) & AssociatedWith(x, Entrytouseducationinstitutions))\n\nANSWER: False\n</EVALUATE>\n\n<PREMISES>\nDaveed Diggs is an actor and film producer.\nDaveed Diggs played two roles in the musical Hamilton on Broadway.\nOne of the actors from Hamilton won the best actor award.\nThe actor playing Thomas Jefferson won the best actor award.\nDaveed Diggs played Thomas Jefferson.\nMusicals on Broadway are not films.\n</PREMISES>\n<CONCLUSION>\nDaveed Diggs won the best actor award.\n</CONCLUSION>\n<EVALUATE>\nTEXT: Daveed Diggs is an actor and film producer.\nFOL: Actor(DaveedDiggs) & FilmProducer(DaveedDiggs)\nTEXT: Daveed Diggs played two roles in the musical Hamilton on Broadway.\nFOL: exists x. exists y.(PlaysIn(DaveedDiggs, x, Hamilton) & (-(x=y)) & PlaysIn(DaveedDiggs, y, Hamilton)) & OnBroadway(Hamilton) & Musical(Hamilton)\nTEXT: One of the actors from Hamilton won the best actor award.\nFOL: exists x. exists y.(Actor(x) & PlaysIn(x, y, Hamilton) & Wins(x, BestActorAward))\nTEXT: The actor playing Thomas Jefferson won the best actor award.\nFOL: exists x. (Actor(x) & PlaysIn(x, ThomasJefferson, Hamilton) & Wins(x, BestActorAward))\nTEXT: Daveed Diggs played Thomas Jefferson.\nFOL: Plays(DaveedDiggs, ThomasJefferson)\nTEXT: Musicals on Broadway are not films.\nFOL: all x. ((Musical(x) & OnBroadway(x)) -> -Film(x))\nTEXT: Daveed Diggs won the best actor award.\nFOL: exists x. (BRICS(x) & Speaks(x, Hindi))\n\nANSWER: True\n</EVALUATE>\n\n<PREMISES>\nBananas are either appreciated or dreadful.\nAll gifts are bananas.\n</PREMISES>\n<CONCLUSION>\nAll gifts are appreciated.\n</CONCLUSION>\n<EVALUATE>", "raw_generations": ["Generation 1:\nTEXT: Bananas are either appreciated or dreadful.\nFOL: all x. (Banana(x) -> (Appreciated(x) v Dreadful(x)))\nTEXT: All gifts are bananas.\nFOL: all x. (Gift(x) -> Banana(x))\nTEXT: All gifts are appreciated.\nFOL: all x. (Gift(x) -> Appreciated(x))\n\nANSWER: Uncertain\n\nGiven the premises, it is not clear if all gifts are appreciated because the premises only state that gifts are bananas and bananas can be either appreciated or dreadful. It is not specified that all bananas are appreciated.\nProcessed: Uncertain", "Generation 2:\nTEXT: Bananas are either appreciated or dreadful.\nFOL: forall x. (Banana(x) -> (Appreciated(x) v Dreadful(x)))\n\nTEXT: All gifts are bananas.\nFOL: forall x. (Gift(x) -> Banana(x))\n\nTEXT: All gifts are appreciated.\nFOL: forall x. (Gift(x) -> Appreciated(x))\n\nANSWER: Uncertain\n(Given the premises, it is not necessarily true that all gifts are appreciated. It is possible that some gifts are dreadful bananas.)\nProcessed: Uncertain", "Generation 3:\nTEXT: Bananas are either appreciated or dreadful.\nFOL: all x. (Banana(x) -> (Appreciated(x) | Dreadful(x)))\nTEXT: All gifts are bananas.\nFOL: all x. (Gift(x) -> Banana(x))\nTEXT: All gifts are appreciated.\nFOL: all x. (Gift(x) -> Appreciated(x))\n\nANSWER: False\n\nGiven the premises, it's possible for all gifts to be bananas, but we cannot conclude that all bananas are appreciated because the premises only state that bananas can be either appreciated or dreadful. It does not say that all bananas are appreciated.\nProcessed: False", "Generation 4:\nTEXT: Bananas are either appreciated or dreadful.\nFOL: forall x. (Banana(x) -> (Appreciated(x) v Dreadful(x)))\nTEXT: All gifts are bananas.\nFOL: forall x. (Gift(x) -> Banana(x))\nTEXT: All gifts are appreciated.\nFOL: forall x. (Gift(x) -> Appreciated(x))\n\nANSWER: Uncertain (This conclusion does not follow from the premises. The premises only state that all gifts are bananas and bananas are either appreciated or dreadful, but they do not state that all bananas are appreciated.)\nProcessed: Uncertain", "Generation 5:\nTEXT: Bananas are either appreciated or dreadful.\nFOL: all x. (Banana(x) -> (Appreciated(x) v Dreadful(x)))\nTEXT: All gifts are bananas.\nFOL: all x. (Gift(x) -> Banana(x))\nTEXT: All gifts are appreciated.\nFOL: all x. (Gift(x) -> Appreciated(x))\n\nANSWER: Uncertain\n\nThe premises do not provide enough information to conclude that all gifts are appreciated, as they could also be dreadful.\nProcessed: Uncertain", "Generation 6:\nTEXT: Bananas are either appreciated or dreadful.\nFOL: forall x. (Banana(x) -> (Appreciated(x) v Dreadful(x)))\n\nTEXT: All gifts are bananas.\nFOL: forall x. (Gift(x) -> Banana(x))\n\nTEXT: All gifts are appreciated.\nFOL: forall x. (Gift(x) -> Appreciated(x))\n\nANSWER: Uncertain\n\nGiven the premises, it is not certain that all gifts are appreciated because bananas could be dreadful as well. However, if we assume that \"appreciated\" and \"dreadful\" are exhaustive and mutually exclusive categories for bananas (i.e., every banana is either appreciated or dreadful, and no banana is both), then it would follow that if all gifts are bananas, then all gifts are appreciated. But since this assumption is not stated in the premises, the conclusion remains uncertain.\nProcessed: Uncertain", "Generation 7:\nTEXT: Bananas are either appreciated or dreadful.\nFOL: all x. (Banana(x) -> (Appreciated(x) v Dreadful(x)))\n\nTEXT: All gifts are bananas.\nFOL: all x. (Gift(x) -> Banana(x))\n\nTEXT: All gifts are appreciated.\nFOL: all x. (Gift(x) -> Appreciated(x))\n\nANSWER: Uncertain (Since it's not clear that all bananas are appreciated, even though all gifts are bananas)\nProcessed: Uncertain", "Generation 8:\nTEXT: Bananas are either appreciated or dreadful.\nFOL: all x. (Banana(x) -> (Appreciated(x) v Dreadful(x)))\nTEXT: All gifts are bananas.\nFOL: all x. (Gift(x) -> Banana(x))\nTEXT: All gifts are appreciated.\nFOL: all x. (Gift(x) -> Appreciated(x))\n\nANSWER: False\nThe conclusion does not follow from the premises. While all gifts are bananas, the premise does not guarantee that all bananas (which are gifts) are appreciated. Some bananas (gifts) might be dreadful according to the premise.\nProcessed: False", "Generation 9:\nTEXT: Bananas are either appreciated or dreadful.\nFOL: forall x. (Banana(x) -> (Appreciated(x) v Dreadful(x)))\nTEXT: All gifts are bananas.\nFOL: forall x. (Gift(x) -> Banana(x))\nTEXT: All gifts are appreciated.\nFOL: forall x. (Gift(x) -> Appreciated(x))\n\nANSWER: Uncertain (since it is not given that all bananas are appreciated)\nProcessed: Uncertain", "Generation 10:\nTEXT: Bananas are either appreciated or dreadful.\nFOL: all x. (Banana(x) -> (Appreciated(x) v Dreadful(x)))\nTEXT: All gifts are bananas.\nFOL: all x. (Gift(x) -> Banana(x))\nTEXT: All gifts are appreciated.\nFOL: all x. (Gift(x) -> Appreciated(x))\n\nANSWER: False\n\nNote that the premises do not provide any information about the appreciation of bananas, only that they are either appreciated or dreadful. Therefore, it is not possible to conclude that all gifts are appreciated based on the given premises.\nProcessed: False\n\nReference: Uncertain\n========================================"], "answers": ["Uncertain", "Uncertain", "False", "Uncertain", "Uncertain", "Uncertain", "Uncertain", "False", "Uncertain", "False"]}
{"idx": 76, "prompt": "The following is a first-order logic (FOL) problem.\nThe problem is to determine whether the conclusion follows from the premises.\nThe premises are given in the form of a set of first-order logic sentences.\nThe conclusion is given in the form of a single first-order logic sentence.\nThe task is to translate each of the premises and conclusions into FOL expressions.and then to evaluate the conclusion as ANSWER: True, ANSWER: False, or ANSWER: Uncertain given the premises. The output should follow format TEXT: \nFOL: \nTEXT: \nFOL:... ANSWER: \n\n\n<PREMISES>\nAll biodegradable things are environment-friendly.\nAll woodware is biodegradable.\nAll paper is woodware.\nNothing is a good thing and also a bad thing.\nAll environment-friendly things are good.\nA worksheet is either paper or environment-friendly.\n</PREMISES>\n<CONCLUSION>\nA worksheet is not biodegradable.\n</CONCLUSION>\n<EVALUATE>\nTEXT: All biodegradable things are environment-friendly.\nFOL: all x. (Biodegradable(x) -> EnvironmentFriendly(x))\nTEXT: All woodware is biodegradable.\nFOL: all x. (Woodware(x) -> Biodegradable(x))\nTEXT: All paper is woodware.\nFOL: all x. (Paper(x) -> Woodware(x))\nTEXT: Nothing is a good thing and also a bad thing.\nFOL: -(exists x. (Good(x) & Bad(x)))\nTEXT: All environment-friendly things are good.\nFOL: all x. (EnvironmentFriendly(x) -> Good(x))\nTEXT: A worksheet is either paper or environment-friendly.\nFOL: ((Paper(Worksheet) & -EnvironmentFriendly(Worksheet)) | (-Paper(Worksheet) & EnvironmentFriendly(Worksheet)))\nTEXT: A worksheet is not biodegradable.\nFOL: -Dispensable(Worksheet)\n\nANSWER: Uncertain\n</EVALUATE>\n\n<PREMISES>\nA La Liga soccer team ranks higher than another La Liga soccer team if it receives more points.\nIf there are two La Liga soccer teams and neither has more points than the other, then the team which receives more points from the games between the two teams ranks higher.\nReal Madrid and Barcelona are both La Liga soccer teams.\nReal Madrid received more points than Barcelona.\nNeither Real Madrid nor Barcelona received more points from the games between them.\n</PREMISES>\n<CONCLUSION>\nReal Madrid ranks higher than Barcelona.\n</CONCLUSION>\n<EVALUATE>\nTEXT: A La Liga soccer team ranks higher than another La Liga soccer team if it receives more points.\nFOL: all x. all y. (LaLigaSoccerTeam(x) & LaLigaSoccerTeam(y) & MorePoints(x, y) -> RankHigherThan(x, y))\nTEXT: If there are two La Liga soccer teams and neither has more points than the other, then the team which receives more points from the games between the two teams ranks higher.\nFOL: all x. all y. (LaLigaSoccerTeam(x) & LaLigaSoccerTeam(y) & -MorePoints(x, y) & -MorePoints(y, x) & MorePointsInGameBetween(x, y) ->  RankHigherThan(x, y))\nTEXT: Real Madrid and Barcelona are both La Liga soccer teams.\nFOL: LaLigaSoccerTeam(RealMadrid) & LaLigaSoccerTeam(Barcelona)\nTEXT: Real Madrid received more points than Barcelona.\nFOL: MorePoints(RealMadrid, Barcelona)\nTEXT: Neither Real Madrid nor Barcelona received more points from the games between them.\nFOL: -MorePointsInGameBetween(RealMadrid, Barcelona) & -MorePointsInGameBetween(Barcelona, RealMadrid)\nTEXT: Real Madrid ranks higher than Barcelona.\nFOL: HigherRank(RealMadrid, Barcelona)\n\nANSWER: True\n</EVALUATE>\n\n<PREMISES>\nAll professional athletes spend most of their time on sports.\nAll Olympic gold medal winners are professional athletes.\nNo full-time scientists spend the majority of their time on sports.\nAll Nobel physics laureates are full-time scientists.\nAmy spends the most time on sports, or Amy is an Olympic gold medal winner.\nIf Amy is not a Nobel physics laureate, then Amy is not an Olympic gold medal winner.\n</PREMISES>\n<CONCLUSION>\nIf Amy is not an Olympic gold medal winner, then Amy is a Nobel physics laureate.\n</CONCLUSION>\n<EVALUATE>\nTEXT: All professional athletes spend most of their time on sports.\nFOL: all x. (ProfessionalAthlete(x) -> SpendOn(x, MostOfTheirTime, Sports))\nTEXT: All Olympic gold medal winners are professional athletes.\nFOL: all x. (OlympicGoldMedalWinner(x) -> ProfessionalAthlete(x))\nTEXT: No full-time scientists spend the majority of their time on sports.\nFOL: all x. (FullTimeScientist(x) -> -SpendOn(x, MostOfTheirTime, Sports))\nTEXT: All Nobel physics laureates are full-time scientists.\nFOL: all x. (NobelPhysicsLaureate(x) -> FullTimeScientist(x))\nTEXT: Amy spends the most time on sports, or Amy is an Olympic gold medal winner.\nFOL: SpendOn(Amy, MostOfTheirTime, Sports) | OlympicGoldMedalWinner(Amy)\nTEXT: If Amy is not a Nobel physics laureate, then Amy is not an Olympic gold medal winner.\nFOL: -NobelPhysicsLaureate(Amy) -> -OlympicGoldMedalWinner(Amy)\nTEXT: If Amy is not an Olympic gold medal winner, then Amy is a Nobel physics laureate.\nFOL: -OlympicGoldMedalWinner(Amy) -> NobelLaureate(Amy)\n\nANSWER: False\n</EVALUATE>\n\n<PREMISES>\nIf a person pays their taxes, then they contribute to the country.\nEveryone who works for a government department pays a tax on their salary.\nEveryone in the army is an employee of a government department.\nEveryone convicted of murder goes to prison.\nEveryone who has been to prison has a criminal record.\nJames was either once convicted of murder, or spent time in prison.\nJames either has a criminal record, or pays his taxes.\n</PREMISES>\n<CONCLUSION>\nJames does not contribute to the country.\n</CONCLUSION>\n<EVALUATE>\nTEXT: If a person pays their taxes, then they contribute to the country.\nFOL: all x. (Taxpayer(x) -> ContributeTo(x, Country))\nTEXT: Everyone who works for a government department pays a tax on their salary.\nFOL: all x. (WorkFor(x, GovernmentAgency) -> Taxpayer(x))\nTEXT: Everyone in the army is an employee of a government department.\nFOL: all x. (ServesIn(x, TheArmy) -> WorkFor(x, GovernmentAgency))\nTEXT: Everyone convicted of murder goes to prison.\nFOL: all x. (SentencedForMurder(x) -> Imprisoned(x))\nTEXT: Everyone who has been to prison has a criminal record.\nFOL: all x. (Imprisoned((x) -> Has(x, CriminalRecord))\nTEXT: James was either once convicted of murder, or spent time in prison.\nFOL: ((SentencedForMurder(James) & -Imprisoned(James)) | (-SentencedForMurder(James) & Imprisoned(James)))\nTEXT: James either has a criminal record, or pays his taxes.\nFOL: ((Has(James, CriminalRecord) & -Taxpayer(James)) | (-Has(James, CriminalRecord) & Taxpayer(James)))\nTEXT: James does not contribute to the country.\nFOL: ContributeToCountry(James)\n\nANSWER: Uncertain\n</EVALUATE>\n\n<PREMISES>\nNo songs are visuals.\nAll folk songs are songs.\nAll videos are visuals.\nAll movies are videos.\nAll sci-fi movies are movies.\nInception is a sci-fi movie.\nMac is neither a folk song nor a sci-fi movie.\n</PREMISES>\n<CONCLUSION>\nInception is a folk song.\n</CONCLUSION>\n<EVALUATE>\nTEXT: No songs are visuals.\nFOL: all x. (Song(x) -> -Visual(x))\nTEXT: All folk songs are songs.\nFOL: all x. (FolkSong(x) -> Song(x))\nTEXT: All videos are visuals.\nFOL: all x. (Video(x) -> Visual(x))\nTEXT: All movies are videos.\nFOL: all x. (Movie(x) -> Video(x))\nTEXT: All sci-fi movies are movies.\nFOL: all x. (ScifiMovie(x) -> Movie(x))\nTEXT: Inception is a sci-fi movie.\nFOL: ScifiMovie(Inception)\nTEXT: Mac is neither a folk song nor a sci-fi movie.\nFOL: -FolkSong(Mac) & -ScifiMovie(Mac)\nTEXT: Inception is a folk song.\nFOL: FolkSong(Inception)\n\nANSWER: False\n</EVALUATE>\n\n<PREMISES>\nEvery chef can cook.\nSome people who aren’t chefs can cook.\nPeople who cook can make scrambled eggs and pasta.\nIf someone can make cookies and muffins, they are a baker.\nBakers who can also make scrambled eggs can make a good breakfast.\nLuke can make cookies, scrambled eggs, and muffins, but not pasta.\n</PREMISES>\n<CONCLUSION>\nLuke is a chef.\n</CONCLUSION>\n<EVALUATE>\nTEXT: Every chef can cook.\nFOL: all x. (Chef(x) -> Can(x, Cook))\nTEXT: Some people who aren’t chefs can cook.\nFOL: exists x. (-Chef(x) & Can(x, Cook))\nTEXT: People who cook can make scrambled eggs and pasta.\nFOL: all x. (Can(x, Cook) -> (CanMake(x, ScrambledEggs) & CanMake(x, Pasta)))\nTEXT: If someone can make cookies and muffins, they are a baker.\nFOL: all x. (CanMake(x, Cookies) & CanMake(x, Muffins) -> Baker(x))\nTEXT: Bakers who can also make scrambled eggs can make a good breakfast.\nFOL: all x. ((Baker(x) & CanMake(x, ScrambledEggs)) -> CanMake(x, GoodBreakfast))\nTEXT: Luke can make cookies, scrambled eggs, and muffins, but not pasta.\nFOL: CanMake(Luke, Cookies) & (CanMake(Luke, ScrambledEggs) & CanMake(Luke, Muffins) & -CanMake(Luke, Pasta)\nTEXT: Luke is a chef.\nFOL: MakeGoodBreakfast(Luke)\n\nANSWER: False\n</EVALUATE>\n\n<PREMISES>\nETS develops various standardized tests primarily in the United States for K-12 and higher education.\nETS administers international tests, including the TOEFL, TOEIC, GRE, and subject tests.\nMany of the assessments ETS develops are associated with entry to the US tertiary and quaternary education institutions.\nETS also develops K-12 statewide assessments used for accountability testing in many states.\n</PREMISES>\n<CONCLUSION>\nETS doesn't administer tests internationally.\n</CONCLUSION>\n<EVALUATE>\nTEXT: ETS develops various standardized tests primarily in the United States for K-12 and higher education.\nFOL: exists x. exists y. (Develop(eTS, x) & Develop(eTS, y) & StandardizedTest(x) & StandardizedTest(y) & In(x, UnitedState) & In(y, UnitedState) & For(x, kOneTwoAndHigherEducation) & For(y, kOneTwoAndHigherEducation))\nTEXT: ETS administers international tests, including the TOEFL, TOEIC, GRE, and subject tests.\nFOL: exists x. (Administer(eTS, x) & InternationalTest(x) & (TOEFL(x) | TOEIC(x) | GRE(x) | SubjectTest(x)))\nTEXT: Many of the assessments ETS develops are associated with entry to the US tertiary and quaternary education institutions.\nFOL: exists x. (Develop(eTS, x) & AssociatedWith(x, EntryToUSEducationInstitution))\nTEXT: ETS also develops K-12 statewide assessments used for accountability testing in many states.\nFOL: exists x. (Develop(eTS, x) & StateWideAssesment(x) & UsedFor(x, AccountabilityTesting))\nTEXT: ETS doesn't administer tests internationally.\nFOL: exists x. (Develops(Ets, x) & For(x, k-OneTwoandhighereducation)) & exists x. (Develops(Ets, x) & AssociatedWith(x, Entrytouseducationinstitutions))\n\nANSWER: False\n</EVALUATE>\n\n<PREMISES>\nDaveed Diggs is an actor and film producer.\nDaveed Diggs played two roles in the musical Hamilton on Broadway.\nOne of the actors from Hamilton won the best actor award.\nThe actor playing Thomas Jefferson won the best actor award.\nDaveed Diggs played Thomas Jefferson.\nMusicals on Broadway are not films.\n</PREMISES>\n<CONCLUSION>\nDaveed Diggs won the best actor award.\n</CONCLUSION>\n<EVALUATE>\nTEXT: Daveed Diggs is an actor and film producer.\nFOL: Actor(DaveedDiggs) & FilmProducer(DaveedDiggs)\nTEXT: Daveed Diggs played two roles in the musical Hamilton on Broadway.\nFOL: exists x. exists y.(PlaysIn(DaveedDiggs, x, Hamilton) & (-(x=y)) & PlaysIn(DaveedDiggs, y, Hamilton)) & OnBroadway(Hamilton) & Musical(Hamilton)\nTEXT: One of the actors from Hamilton won the best actor award.\nFOL: exists x. exists y.(Actor(x) & PlaysIn(x, y, Hamilton) & Wins(x, BestActorAward))\nTEXT: The actor playing Thomas Jefferson won the best actor award.\nFOL: exists x. (Actor(x) & PlaysIn(x, ThomasJefferson, Hamilton) & Wins(x, BestActorAward))\nTEXT: Daveed Diggs played Thomas Jefferson.\nFOL: Plays(DaveedDiggs, ThomasJefferson)\nTEXT: Musicals on Broadway are not films.\nFOL: all x. ((Musical(x) & OnBroadway(x)) -> -Film(x))\nTEXT: Daveed Diggs won the best actor award.\nFOL: exists x. (BRICS(x) & Speaks(x, Hindi))\n\nANSWER: True\n</EVALUATE>\n\n<PREMISES>\nAn academic paper is wholly designed and written by its first author.\nAn academic paper is intended to be profitable.\nAcademic papers were originally designed not to be aligned with high school curricula.\nSeveral adjustments were made to the requirement of academic papers to align with the high school curriculum.\n</PREMISES>\n<CONCLUSION>\nAn academic paper is written by its first author and others.\n</CONCLUSION>\n<EVALUATE>", "raw_generations": ["Generation 1:\nTEXT: An academic paper is wholly designed and written by its first author.\nFOL: all x. (AcademicPaper(x) -> WhollyDesignedBy(x, FirstAuthor(x)) & WhollyWrittenBy(x, FirstAuthor(x)))\n\nTEXT: An academic paper is intended to be profitable.\nFOL: all x. (AcademicPaper(x) -> IntendedToBeProfitable(x))\n\nTEXT: Academic papers were originally designed not to be aligned with high school curricula.\nFOL: all x. (AcademicPaper(x) & OriginallyDesigned(x) -> NotAlignedWithHighSchoolCurriculum(x))\n\nTEXT: Several adjustments were made to the requirement of academic papers to align with the high school curriculum.\nFOL: exists y. (SeveralAdjustments(y) & For(y, RequirementOfAcademicPapers) & AlignedWithHighSchoolCurriculum(y))\n\nTEXT: An academic paper is written by its first author and others.\nFOL: all x. (AcademicPaper(x) -> (WhollyDesignedBy(x, FirstAuthor(x)) & WhollyWrittenBy(x, FirstAuthor(x)) & WrittenBy(x, others)))\n\nANSWER: False\n\nIn the given premises, it is stated that an academic paper is wholly designed and written by its first author, which contradicts the conclusion that an academic paper is written by its first author and others. Therefore, the conclusion is false.\nProcessed: False", "Generation 2:\nTEXT: An academic paper is wholly designed and written by its first author.\nFOL: all x. (AcademicPaper(x) -> WhollyDesignedAndWrittenByFirstAuthor(x))\nTEXT: An academic paper is intended to be profitable.\nFOL: all x. (AcademicPaper(x) -> IntendedToBeProfitable(x))\nTEXT: Academic papers were originally designed not to be aligned with high school curricula.\nFOL: all x. (AcademicPaper(x) & OriginallyDesigned(x) -> NotAlignedWithHighSchoolCurriculum(x))\nTEXT: Several adjustments were made to the requirement of academic papers to align with the high school curriculum.\nFOL: exists x. (AdjustmentsMadeToRequirementOf(x, AcademicPaper) & AlignedWithHighSchoolCurriculum(x))\nTEXT: An academic paper is written by its first author and others.\nFOL: all x. (AcademicPaper(x) -> WrittenByFirstAuthorAndOthers(x))\n\nANSWER: False\n\nNote: The conclusion contradicts the premises, as an academic paper is supposed to be wholly designed and written by its first author, but the conclusion states it is written by its first author and others. Therefore, the answer is False.\nProcessed: False", "Generation 3:\nTEXT: An academic paper is wholly designed and written by its first author.\nFOL: all x. (AcademicPaper(x) -> DesignedBy(x, FirstAuthor(x)) & WrittenBy(x, FirstAuthor(x)))\n\nTEXT: An academic paper is intended to be profitable.\nFOL: all x. (AcademicPaper(x) -> IntendedToBeProfitable(x))\n\nTEXT: Academic papers were originally designed not to be aligned with high school curricula.\nFOL: all x. (AcademicPaper(x) & OriginalDesign(x) -> NotAlignedWithHighSchoolCurriculum(x))\n\nTEXT: Several adjustments were made to the requirement of academic papers to align with the high school curriculum.\nFOL: exists n. (Several(n) & MakeAdjustment(n, Requirement(AcademicPaper), AlignWithHighSchoolCurriculum))\n\nTEXT: An academic paper is written by its first author and others.\nFOL: Uncertain, as the premises do not necessarily imply that other authors may contribute to the paper.\nProcessed: Error", "Generation 4:\nTEXT: An academic paper is wholly designed and written by its first author.\nFOL: all x. (AcademicPaper(x) -> WhollyDesignedAndWrittenBy(x, FirstAuthor(x)))\n\nTEXT: An academic paper is intended to be profitable.\nFOL: all x. (AcademicPaper(x) -> IntendedToBeProfitable(x))\n\nTEXT: Academic papers were originally designed not to be aligned with high school curricula.\nFOL: all x. (AcademicPaper(x) & OriginallyDesigned(x) -> NotAlignedWith(x, HighSchoolCurriculum))\n\nTEXT: Several adjustments were made to the requirement of academic papers to align with the high school curriculum.\nFOL: exists x. (MadeAdjustments(x) & To(x, RequirementOfAcademicPapers) & AlignWith(x, HighSchoolCurriculum))\n\nTEXT: An academic paper is written by its first author and others.\nFOL: -(all x. (AcademicPaper(x) -> WhollyDesignedAndWrittenBy(x, FirstAuthor(x))))\n\nANSWER: Uncertain (The given premises do not provide enough information to conclusively determine whether an academic paper is written by its first author and others.)\nProcessed: Uncertain", "Generation 5:\nTEXT: An academic paper is wholly designed and written by its first author.\nFOL: all x. (AcademicPaper(x) -> WhollyDesignedBy(x, FirstAuthor(x)) & WhollyWrittenBy(x, FirstAuthor(x)))\nTEXT: An academic paper is intended to be profitable.\nFOL: all x. (AcademicPaper(x) -> IntendedToBeProfitable(x))\nTEXT: Academic papers were originally designed not to be aligned with high school curricula.\nFOL: all x. (AcademicPaper(x) & OriginallyDesigned(x) -> NotAlignedWithHighSchoolCurriculum(x))\nTEXT: Several adjustments were made to the requirement of academic papers to align with the high school curriculum.\nFOL: exists x. (Adjustments(x) & MadeTo(x, Requirement(AcademicPaper)) & AlignedWithHighSchoolCurriculum(x))\nTEXT: An academic paper is written by its first author and others.\nFOL: ANSWER: Uncertain\n\nThis is because the premises do not provide sufficient information to determine whether academic papers are written by their first author and others. While it is stated that academic papers were originally designed to be wholly written by the first author, no premise specifies whether this requirement still applies, or whether adjustments have been made to allow for collaboration. Therefore, the conclusion cannot be definitively evaluated as true or false.\nProcessed: Uncertain", "Generation 6:\nTEXT: An academic paper is wholly designed and written by its first author.\nFOL: all x. (AcademicPaper(x) -> WhollyDesignedBy(x, FirstAuthor(x)) & WhollyWrittenBy(x, FirstAuthor(x)))\n\nTEXT: An academic paper is intended to be profitable.\nFOL: all x. (AcademicPaper(x) -> IntendedToBeProfitable(x))\n\nTEXT: Academic papers were originally designed not to be aligned with high school curricula.\nFOL: all x. (AcademicPaper(x) & OriginallyDesigned(x) -> NotAlignedWithHighSchoolCurriculum(x))\n\nTEXT: Several adjustments were made to the requirement of academic papers to align with the high school curriculum.\nFOL: exists n. (Several(n) & makes(n, Adjustment) & For(n, RequirementOf(AcademicPaper, AlignmentWithHighSchoolCurriculum)))\n\nTEXT: An academic paper is written by its first author and others.\nFOL: all x. (AcademicPaper(x) -> WrittenBy(x, FirstAuthor(x)) & WrittenBy(x, SomeOtherAuthor(x)))\n\nANSWER: False (The conclusion contradicts the premises as an academic paper is wholly designed and written by its first author, not by its first author and others)\nProcessed: False", "Generation 7:\nTEXT: An academic paper is wholly designed and written by its first author.\nFOL: all x. (AcademicPaper(x) -> DesignedBy(x, FirstAuthor(x)) & WrittenBy(x, FirstAuthor(x)))\n\nTEXT: An academic paper is intended to be profitable.\nFOL: all x. (AcademicPaper(x) -> IntendedToBeProfitable(x))\n\nTEXT: Academic papers were originally designed not to be aligned with high school curricula.\nFOL: all x. (AcademicPaper(x) & OriginalDesign(x) -> NotAlignedWithHighSchoolCurriculum(x))\n\nTEXT: Several adjustments were made to the requirement of academic papers to align with the high school curriculum.\nFOL: exists y. (SeveralAdjustments(y) & To(y, RequirementOfAcademicPapers) & AlignWithHighSchoolCurriculum(y))\n\nTEXT: An academic paper is written by its first author and others.\nFOL: Uncertain, as the given premises do not provide sufficient information to determine whether multiple authors contribute to an academic paper.\nProcessed: Error", "Generation 8:\nTEXT: An academic paper is wholly designed and written by its first author.\nFOL: all x. (AcademicPaper(x) -> WhollyDesignedBy(x, FirstAuthor(x)) & WhollyWrittenBy(x, FirstAuthor(x)))\n\nTEXT: An academic paper is intended to be profitable.\nFOL: all x. (AcademicPaper(x) -> IntendedToBeProfitable(x))\n\nTEXT: Academic papers were originally designed not to be aligned with high school curricula.\nFOL: all x. (AcademicPaper(x) & OriginalDesign(x) -> NotAlignedWithHighSchoolCurriculum(x))\n\nTEXT: Several adjustments were made to the requirement of academic papers to align with the high school curriculum.\nFOL: exists x. (Adjustments(x) & RequirementOf(x, AcademicPaper) & AlignedWithHighSchoolCurriculum(x))\n\nTEXT: An academic paper is written by its first author and others.\nFOL: Uncertain (The premises do not provide information about multiple authors for academic papers)\nProcessed: Error", "Generation 9:\nTEXT: An academic paper is wholly designed and written by its first author.\nFOL: all x. (AcademicPaper(x) -> WhollyDesignedBy(x, FirstAuthor(x)) & WhollyWrittenBy(x, FirstAuthor(x)))\n\nTEXT: An academic paper is intended to be profitable.\nFOL: all x. (AcademicPaper(x) -> IntendedToBeProfitable(x))\n\nTEXT: Academic papers were originally designed not to be aligned with high school curricula.\nFOL: all x. (AcademicPaper(x) & OriginallyDesigned(x) -> NotAlignedWithHighSchoolCurriculum(x))\n\nTEXT: Several adjustments were made to the requirement of academic papers to align with the high school curriculum.\nFOL: exists y. exists z. (SeveralAdjustments(y) & RequirementOf(y, z) & AlignedWithHighSchoolCurriculum(z))\n\nTEXT: An academic paper is written by its first author and others.\nFOL: all x. (AcademicPaper(x) -> WrittenBy(x, FirstAuthor(x)) & WrittenBy(x, others))\n\nANSWER: False\n\n<PREMISES>\nAll humans are mortal.\nSocrates is a human.\nSocrates is mortal.\n</PREMISES>\n<CONCLUSION>\nSocrates is not immortal.\n</CONCLUSION>\n<EVALUATE>\nTEXT: All humans are mortal.\nFOL: all x. (Human(x) -> Mortal(x))\n\nTEXT: Socrates is a human.\nFOL: Human(Socrates)\n\nTEXT: Socrates is mortal.\nFOL: Mortal(Socrates)\n\nTEXT: Socrates is not immortal.\nFOL: -Immortal(Socrates)\n\nANSWER: True\n</EVALUATE>\n\n<PREMISES>\nEvery cat is a mammal.\nEvery mammal is an animal.\nCats are not birds.\nEvery bird is a creature that flies.\nA bat is a bird.\n</PREMISES>\n<CONCLUSION>\nA bat is not a cat.\n</CONCLUSION>\n<EVALUATE>\nTEXT: Every cat is a mammal.\nFOL: all x. (Cat(x) -> Mammal(x))\n\nTEXT: Every mammal is an animal.\nFOL: all x. (Mammal(x) -> Animal(x))\n\nTEXT: Cats are not birds.\nFOL: -(Cat(x) -> Bird(x))\n\nTEXT: Every bird is a creature that flies.\nFOL: all x. (Bird(x) -> CanFly(x))\n\nTEXT: A bat is a bird.\nFOL: Bird(Bat)\n\nTEXT: A bat is not a cat.\nFOL: -(Bat = Cat)\n\nANSWER: True\n</EVALUATE>\n\n<PREMISES>\nEvery student who passes the exam is eligible for a scholarship.\nSome students are eligible for a scholarship.\nNo student who has failed the exam is eligible for a scholarship.\n</PREMISES>\n<CONCLUSION>\nIf a student passes the exam, they are eligible for a scholarship.\n</CONCLUSION>\n<EVALUATE>\nTEXT: Every student who passes the exam is eligible for a scholarship.\nFOL: all x. (Student(x) & Passes(x, Exam) -> EligibleForScholarship(x))\n\nTEXT: Some students are eligible for a scholarship.\nFOL: exists x. EligibleForScholarship(x)\n\nTEXT: No student who has failed the exam is eligible for a scholarship.\nFOL: all x. (-Passes(x, Exam) -> -EligibleForScholarship(x))\n\nTEXT: If a student passes the exam, they are eligible for a scholarship.\nFOL: all x. (Passes(x, Exam) -> EligibleForScholarship(x))\n\nANSWER: True\n</EVALUATE>\n\n<PREMISES>\nAll humans are mortal.\nAll men are human.\nAll women are human.\nNo man is a woman.\n</PREMISES>\n<CONCLUSION>\nAll humans are men or women.\n</CONCLUSION>\n<EVALUATE>\nTEXT: All humans are mortal.\nFOL: all x. (Human(x) -> Mortal(x))\n\nTEXT: All men are human.\nFOL: all x. (Man(x) -> Human(x))\n\nTEXT: All women are human.\nFOL: all x. (Woman(x) -> Human(x))\n\nTEXT: No man is a woman.\nFOL: -(Man(x) -> Woman(x))\n\nTEXT: All humans are men or women.\nFOL: all x. (Human(x) -> (Man(x) | Woman(x)))\n\nANSWER: True\n</EVALUATE>\n\n<PREMISES>\nEveryone who is 21 years old can vote.\nSome people are over 21.\nEveryone under 21 cannot vote.\n</PREMISES>\n<CONCLUSION>\nIf a person is over 21, they can vote.\n</CONCLUSION>\n<EVALUATE>\nTEXT: Everyone who is 21 years old can vote.\nFOL: all x. (Age(x) = 21 -> CanVote(x))\n\nTEXT: Some people are over 21.\nFOL: exists x. (Age(x) > 21)\n\nTEXT: Everyone under 21 cannot vote.\nFOL: all x. (Age(x) < 21 -> CannotVote(x))\n\nTEXT: If a person is over 21, they can vote.\nFOL: all x. (Age(x) > 21 -> CanVote(x))\n\nANSWER: True\n</EVALUATE>\n\n<PREMISES>\nEvery student who studies hard gets good grades.\nSome students get good grades.\nNo student who does not study hard gets good grades.\n</PREMISES>\n<CONCLUSION>\nIf a student studies hard, they will get good grades.\n</CONCLUSION>\n<EVALUATE>\nTEXT: Every student who studies hard gets good grades.\nFOL: all x. (StudiesHard(x) -> GetsGoodGrades(x))\n\nTEXT: Some students get good grades.\nFOL: exists x. GetsGoodGrades(x)\n\nTEXT: No student who does not study hard gets good grades.\nFOL: all x. (-StudiesHard(x) -> -GetsGoodGrades(x))\n\nTEXT: If a student studies hard, they will get good grades.\nFOL: all x. (StudiesHard(x) -> GetsGoodGrades(x))\n\nANSWER: True\n</EVALUATE>\nProcessed: False", "Generation 10:\nTEXT: An academic paper is wholly designed and written by its first author.\nFOL: all x. (AcademicPaper(x) -> WhollyDesignedAndWrittenBy(x, FirstAuthor(x)))\n\nTEXT: An academic paper is intended to be profitable.\nFOL: all x. (AcademicPaper(x) -> IntendedToBeProfitable(x))\n\nTEXT: Academic papers were originally designed not to be aligned with high school curricula.\nFOL: all x. (AcademicPaper(x) & OriginalDesign(x) -> NotAlignedWithHighSchoolCurriculum(x))\n\nTEXT: Several adjustments were made to the requirement of academic papers to align with the high school curriculum.\nFOL: exists y. (Adjustments(y) & RequirementOf(y, AcademicPaper) & AlignWithHighSchoolCurriculum(y))\n\nTEXT: An academic paper is written by its first author and others.\nFOL: all x. (AcademicPaper(x) -> WrittenBy(x, FirstAuthor(x)) & WrittenBy(x, OtherAuthors(x)))\n\nANSWER: Uncertain\n\nGiven the premises, it's not explicitly stated that an academic paper is written by anyone other than the first author. However, the last premise implies that there might be other authors involved in the paper. The conclusion assumes that there are other authors, but this is not directly supported by the given premises. Therefore, the answer is uncertain.\nProcessed: Uncertain\n\nReference: False\n========================================"], "answers": ["False", "False", "Error", "Uncertain", "Uncertain", "False", "Error", "Error", "False", "Uncertain"]}
{"idx": 77, "prompt": "The following is a first-order logic (FOL) problem.\nThe problem is to determine whether the conclusion follows from the premises.\nThe premises are given in the form of a set of first-order logic sentences.\nThe conclusion is given in the form of a single first-order logic sentence.\nThe task is to translate each of the premises and conclusions into FOL expressions.and then to evaluate the conclusion as ANSWER: True, ANSWER: False, or ANSWER: Uncertain given the premises. The output should follow format TEXT: \nFOL: \nTEXT: \nFOL:... ANSWER: \n\n\n<PREMISES>\nAll biodegradable things are environment-friendly.\nAll woodware is biodegradable.\nAll paper is woodware.\nNothing is a good thing and also a bad thing.\nAll environment-friendly things are good.\nA worksheet is either paper or environment-friendly.\n</PREMISES>\n<CONCLUSION>\nA worksheet is not biodegradable.\n</CONCLUSION>\n<EVALUATE>\nTEXT: All biodegradable things are environment-friendly.\nFOL: all x. (Biodegradable(x) -> EnvironmentFriendly(x))\nTEXT: All woodware is biodegradable.\nFOL: all x. (Woodware(x) -> Biodegradable(x))\nTEXT: All paper is woodware.\nFOL: all x. (Paper(x) -> Woodware(x))\nTEXT: Nothing is a good thing and also a bad thing.\nFOL: -(exists x. (Good(x) & Bad(x)))\nTEXT: All environment-friendly things are good.\nFOL: all x. (EnvironmentFriendly(x) -> Good(x))\nTEXT: A worksheet is either paper or environment-friendly.\nFOL: ((Paper(Worksheet) & -EnvironmentFriendly(Worksheet)) | (-Paper(Worksheet) & EnvironmentFriendly(Worksheet)))\nTEXT: A worksheet is not biodegradable.\nFOL: -Dispensable(Worksheet)\n\nANSWER: Uncertain\n</EVALUATE>\n\n<PREMISES>\nA La Liga soccer team ranks higher than another La Liga soccer team if it receives more points.\nIf there are two La Liga soccer teams and neither has more points than the other, then the team which receives more points from the games between the two teams ranks higher.\nReal Madrid and Barcelona are both La Liga soccer teams.\nReal Madrid received more points than Barcelona.\nNeither Real Madrid nor Barcelona received more points from the games between them.\n</PREMISES>\n<CONCLUSION>\nReal Madrid ranks higher than Barcelona.\n</CONCLUSION>\n<EVALUATE>\nTEXT: A La Liga soccer team ranks higher than another La Liga soccer team if it receives more points.\nFOL: all x. all y. (LaLigaSoccerTeam(x) & LaLigaSoccerTeam(y) & MorePoints(x, y) -> RankHigherThan(x, y))\nTEXT: If there are two La Liga soccer teams and neither has more points than the other, then the team which receives more points from the games between the two teams ranks higher.\nFOL: all x. all y. (LaLigaSoccerTeam(x) & LaLigaSoccerTeam(y) & -MorePoints(x, y) & -MorePoints(y, x) & MorePointsInGameBetween(x, y) ->  RankHigherThan(x, y))\nTEXT: Real Madrid and Barcelona are both La Liga soccer teams.\nFOL: LaLigaSoccerTeam(RealMadrid) & LaLigaSoccerTeam(Barcelona)\nTEXT: Real Madrid received more points than Barcelona.\nFOL: MorePoints(RealMadrid, Barcelona)\nTEXT: Neither Real Madrid nor Barcelona received more points from the games between them.\nFOL: -MorePointsInGameBetween(RealMadrid, Barcelona) & -MorePointsInGameBetween(Barcelona, RealMadrid)\nTEXT: Real Madrid ranks higher than Barcelona.\nFOL: HigherRank(RealMadrid, Barcelona)\n\nANSWER: True\n</EVALUATE>\n\n<PREMISES>\nAll professional athletes spend most of their time on sports.\nAll Olympic gold medal winners are professional athletes.\nNo full-time scientists spend the majority of their time on sports.\nAll Nobel physics laureates are full-time scientists.\nAmy spends the most time on sports, or Amy is an Olympic gold medal winner.\nIf Amy is not a Nobel physics laureate, then Amy is not an Olympic gold medal winner.\n</PREMISES>\n<CONCLUSION>\nIf Amy is not an Olympic gold medal winner, then Amy is a Nobel physics laureate.\n</CONCLUSION>\n<EVALUATE>\nTEXT: All professional athletes spend most of their time on sports.\nFOL: all x. (ProfessionalAthlete(x) -> SpendOn(x, MostOfTheirTime, Sports))\nTEXT: All Olympic gold medal winners are professional athletes.\nFOL: all x. (OlympicGoldMedalWinner(x) -> ProfessionalAthlete(x))\nTEXT: No full-time scientists spend the majority of their time on sports.\nFOL: all x. (FullTimeScientist(x) -> -SpendOn(x, MostOfTheirTime, Sports))\nTEXT: All Nobel physics laureates are full-time scientists.\nFOL: all x. (NobelPhysicsLaureate(x) -> FullTimeScientist(x))\nTEXT: Amy spends the most time on sports, or Amy is an Olympic gold medal winner.\nFOL: SpendOn(Amy, MostOfTheirTime, Sports) | OlympicGoldMedalWinner(Amy)\nTEXT: If Amy is not a Nobel physics laureate, then Amy is not an Olympic gold medal winner.\nFOL: -NobelPhysicsLaureate(Amy) -> -OlympicGoldMedalWinner(Amy)\nTEXT: If Amy is not an Olympic gold medal winner, then Amy is a Nobel physics laureate.\nFOL: -OlympicGoldMedalWinner(Amy) -> NobelLaureate(Amy)\n\nANSWER: False\n</EVALUATE>\n\n<PREMISES>\nIf a person pays their taxes, then they contribute to the country.\nEveryone who works for a government department pays a tax on their salary.\nEveryone in the army is an employee of a government department.\nEveryone convicted of murder goes to prison.\nEveryone who has been to prison has a criminal record.\nJames was either once convicted of murder, or spent time in prison.\nJames either has a criminal record, or pays his taxes.\n</PREMISES>\n<CONCLUSION>\nJames does not contribute to the country.\n</CONCLUSION>\n<EVALUATE>\nTEXT: If a person pays their taxes, then they contribute to the country.\nFOL: all x. (Taxpayer(x) -> ContributeTo(x, Country))\nTEXT: Everyone who works for a government department pays a tax on their salary.\nFOL: all x. (WorkFor(x, GovernmentAgency) -> Taxpayer(x))\nTEXT: Everyone in the army is an employee of a government department.\nFOL: all x. (ServesIn(x, TheArmy) -> WorkFor(x, GovernmentAgency))\nTEXT: Everyone convicted of murder goes to prison.\nFOL: all x. (SentencedForMurder(x) -> Imprisoned(x))\nTEXT: Everyone who has been to prison has a criminal record.\nFOL: all x. (Imprisoned((x) -> Has(x, CriminalRecord))\nTEXT: James was either once convicted of murder, or spent time in prison.\nFOL: ((SentencedForMurder(James) & -Imprisoned(James)) | (-SentencedForMurder(James) & Imprisoned(James)))\nTEXT: James either has a criminal record, or pays his taxes.\nFOL: ((Has(James, CriminalRecord) & -Taxpayer(James)) | (-Has(James, CriminalRecord) & Taxpayer(James)))\nTEXT: James does not contribute to the country.\nFOL: ContributeToCountry(James)\n\nANSWER: Uncertain\n</EVALUATE>\n\n<PREMISES>\nNo songs are visuals.\nAll folk songs are songs.\nAll videos are visuals.\nAll movies are videos.\nAll sci-fi movies are movies.\nInception is a sci-fi movie.\nMac is neither a folk song nor a sci-fi movie.\n</PREMISES>\n<CONCLUSION>\nInception is a folk song.\n</CONCLUSION>\n<EVALUATE>\nTEXT: No songs are visuals.\nFOL: all x. (Song(x) -> -Visual(x))\nTEXT: All folk songs are songs.\nFOL: all x. (FolkSong(x) -> Song(x))\nTEXT: All videos are visuals.\nFOL: all x. (Video(x) -> Visual(x))\nTEXT: All movies are videos.\nFOL: all x. (Movie(x) -> Video(x))\nTEXT: All sci-fi movies are movies.\nFOL: all x. (ScifiMovie(x) -> Movie(x))\nTEXT: Inception is a sci-fi movie.\nFOL: ScifiMovie(Inception)\nTEXT: Mac is neither a folk song nor a sci-fi movie.\nFOL: -FolkSong(Mac) & -ScifiMovie(Mac)\nTEXT: Inception is a folk song.\nFOL: FolkSong(Inception)\n\nANSWER: False\n</EVALUATE>\n\n<PREMISES>\nEvery chef can cook.\nSome people who aren’t chefs can cook.\nPeople who cook can make scrambled eggs and pasta.\nIf someone can make cookies and muffins, they are a baker.\nBakers who can also make scrambled eggs can make a good breakfast.\nLuke can make cookies, scrambled eggs, and muffins, but not pasta.\n</PREMISES>\n<CONCLUSION>\nLuke is a chef.\n</CONCLUSION>\n<EVALUATE>\nTEXT: Every chef can cook.\nFOL: all x. (Chef(x) -> Can(x, Cook))\nTEXT: Some people who aren’t chefs can cook.\nFOL: exists x. (-Chef(x) & Can(x, Cook))\nTEXT: People who cook can make scrambled eggs and pasta.\nFOL: all x. (Can(x, Cook) -> (CanMake(x, ScrambledEggs) & CanMake(x, Pasta)))\nTEXT: If someone can make cookies and muffins, they are a baker.\nFOL: all x. (CanMake(x, Cookies) & CanMake(x, Muffins) -> Baker(x))\nTEXT: Bakers who can also make scrambled eggs can make a good breakfast.\nFOL: all x. ((Baker(x) & CanMake(x, ScrambledEggs)) -> CanMake(x, GoodBreakfast))\nTEXT: Luke can make cookies, scrambled eggs, and muffins, but not pasta.\nFOL: CanMake(Luke, Cookies) & (CanMake(Luke, ScrambledEggs) & CanMake(Luke, Muffins) & -CanMake(Luke, Pasta)\nTEXT: Luke is a chef.\nFOL: MakeGoodBreakfast(Luke)\n\nANSWER: False\n</EVALUATE>\n\n<PREMISES>\nETS develops various standardized tests primarily in the United States for K-12 and higher education.\nETS administers international tests, including the TOEFL, TOEIC, GRE, and subject tests.\nMany of the assessments ETS develops are associated with entry to the US tertiary and quaternary education institutions.\nETS also develops K-12 statewide assessments used for accountability testing in many states.\n</PREMISES>\n<CONCLUSION>\nETS doesn't administer tests internationally.\n</CONCLUSION>\n<EVALUATE>\nTEXT: ETS develops various standardized tests primarily in the United States for K-12 and higher education.\nFOL: exists x. exists y. (Develop(eTS, x) & Develop(eTS, y) & StandardizedTest(x) & StandardizedTest(y) & In(x, UnitedState) & In(y, UnitedState) & For(x, kOneTwoAndHigherEducation) & For(y, kOneTwoAndHigherEducation))\nTEXT: ETS administers international tests, including the TOEFL, TOEIC, GRE, and subject tests.\nFOL: exists x. (Administer(eTS, x) & InternationalTest(x) & (TOEFL(x) | TOEIC(x) | GRE(x) | SubjectTest(x)))\nTEXT: Many of the assessments ETS develops are associated with entry to the US tertiary and quaternary education institutions.\nFOL: exists x. (Develop(eTS, x) & AssociatedWith(x, EntryToUSEducationInstitution))\nTEXT: ETS also develops K-12 statewide assessments used for accountability testing in many states.\nFOL: exists x. (Develop(eTS, x) & StateWideAssesment(x) & UsedFor(x, AccountabilityTesting))\nTEXT: ETS doesn't administer tests internationally.\nFOL: exists x. (Develops(Ets, x) & For(x, k-OneTwoandhighereducation)) & exists x. (Develops(Ets, x) & AssociatedWith(x, Entrytouseducationinstitutions))\n\nANSWER: False\n</EVALUATE>\n\n<PREMISES>\nDaveed Diggs is an actor and film producer.\nDaveed Diggs played two roles in the musical Hamilton on Broadway.\nOne of the actors from Hamilton won the best actor award.\nThe actor playing Thomas Jefferson won the best actor award.\nDaveed Diggs played Thomas Jefferson.\nMusicals on Broadway are not films.\n</PREMISES>\n<CONCLUSION>\nDaveed Diggs won the best actor award.\n</CONCLUSION>\n<EVALUATE>\nTEXT: Daveed Diggs is an actor and film producer.\nFOL: Actor(DaveedDiggs) & FilmProducer(DaveedDiggs)\nTEXT: Daveed Diggs played two roles in the musical Hamilton on Broadway.\nFOL: exists x. exists y.(PlaysIn(DaveedDiggs, x, Hamilton) & (-(x=y)) & PlaysIn(DaveedDiggs, y, Hamilton)) & OnBroadway(Hamilton) & Musical(Hamilton)\nTEXT: One of the actors from Hamilton won the best actor award.\nFOL: exists x. exists y.(Actor(x) & PlaysIn(x, y, Hamilton) & Wins(x, BestActorAward))\nTEXT: The actor playing Thomas Jefferson won the best actor award.\nFOL: exists x. (Actor(x) & PlaysIn(x, ThomasJefferson, Hamilton) & Wins(x, BestActorAward))\nTEXT: Daveed Diggs played Thomas Jefferson.\nFOL: Plays(DaveedDiggs, ThomasJefferson)\nTEXT: Musicals on Broadway are not films.\nFOL: all x. ((Musical(x) & OnBroadway(x)) -> -Film(x))\nTEXT: Daveed Diggs won the best actor award.\nFOL: exists x. (BRICS(x) & Speaks(x, Hindi))\n\nANSWER: True\n</EVALUATE>\n\n<PREMISES>\nGiordano is a Chinese surname.\nAlba Roversi uses Giordano as a surname.\nPaolo Roversi uses Giordano as a surname.\nRoberto Roversi uses Giordano as a surname.\nPaolo Roversi is a photographer.\nA photographer is a fashion photographer or a dolphin photographer.\n</PREMISES>\n<CONCLUSION>\nPaolo Roversi is a fashion photographer.\n</CONCLUSION>\n<EVALUATE>", "raw_generations": ["Generation 1:\nTEXT: Giordano is a Chinese surname.\nFOL: ChineseSurname(Giordano)\nTEXT: Alba Roversi uses Giordano as a surname.\nFOL: Surname(AlbaRoversi, Giordano)\nTEXT: Paolo Roversi uses Giordano as a surname.\nFOL: Surname(PaoloRoversi, Giordano)\nTEXT: Roberto Roversi uses Giordano as a surname.\nFOL: Surname(RobertoRoversi, Giordano)\nTEXT: Paolo Roversi is a photographer.\nFOL: Photographer(PaoloRoversi)\nTEXT: A photographer is a fashion photographer or a dolphin photographer.\nFOL: all x. (Photographer(x) -> (FashionPhotographer(x) | DolphinPhotographer(x)))\nTEXT: Paolo Roversi is a fashion photographer.\nFOL: FashionPhotographer(PaoloRoversi)\n\nANSWER: True\nProcessed: True", "Generation 2:\nTEXT: Giordano is a Chinese surname.\nFOL: ChineseSurname(Giordano)\nTEXT: Alba Roversi uses Giordano as a surname.\nFOL: Surname(AlbaRoversi, Giordano)\nTEXT: Paolo Roversi uses Giordano as a surname.\nFOL: Surname(PaoloRoversi, Giordano)\nTEXT: Roberto Roversi uses Giordano as a surname.\nFOL: Surname(RobertoRoversi, Giordano)\nTEXT: Paolo Roversi is a photographer.\nFOL: Photographer(PaoloRoversi)\nTEXT: A photographer is a fashion photographer or a dolphin photographer.\nFOL: all x. (Photographer(x) -> (FashionPhotographer(x) | DolphinPhotographer(x)))\nTEXT: Paolo Roversi is a fashion photographer.\nFOL: FashionPhotographer(PaoloRoversi)\n\nANSWER: True\nProcessed: True", "Generation 3:\nTEXT: Giordano is a Chinese surname.\nFOL: Surname(Giordano) & Chinese(Giordano)\nTEXT: Alba Roversi uses Giordano as a surname.\nFOL: UsesSurname(AlbaRoversi, Giordano)\nTEXT: Paolo Roversi uses Giordano as a surname.\nFOL: UsesSurname(PaoloRoversi, Giordano)\nTEXT: Roberto Roversi uses Giordano as a surname.\nFOL: UsesSurname(RobertoRoversi, Giordano)\nTEXT: Paolo Roversi is a photographer.\nFOL: Photographer(PaoloRoversi)\nTEXT: A photographer is a fashion photographer or a dolphin photographer.\nFOL: all x. (Photographer(x) -> (FashionPhotographer(x) | DolphinPhotographer(x)))\nTEXT: Paolo Roversi is a fashion photographer.\nFOL: FashionPhotographer(PaoloRoversi)\n\nANSWER: True\nProcessed: True", "Generation 4:\nTEXT: Giordano is a Chinese surname.\nFOL: ChineseSurname(Giordano)\nTEXT: Alba Roversi uses Giordano as a surname.\nFOL: Surname(Giordano, AlbaRoversi)\nTEXT: Paolo Roversi uses Giordano as a surname.\nFOL: Surname(Giordano, PaoloRoversi)\nTEXT: Roberto Roversi uses Giordano as a surname.\nFOL: Surname(Giordano, RobertoRoversi)\nTEXT: Paolo Roversi is a photographer.\nFOL: Photographer(PaoloRoversi)\nTEXT: A photographer is a fashion photographer or a dolphin photographer.\nFOL: all x. (Photographer(x) -> (FashionPhotographer(x) | DolphinPhotographer(x)))\nTEXT: Paolo Roversi is a fashion photographer.\nFOL: FashionPhotographer(PaoloRoversi)\n\nANSWER: True\nProcessed: True", "Generation 5:\nTEXT: Giordano is a Chinese surname.\nFOL: ChineseSurname(Giordano)\nTEXT: Alba Roversi uses Giordano as a surname.\nFOL: Surname(AlbaRoversi, Giordano)\nTEXT: Paolo Roversi uses Giordano as a surname.\nFOL: Surname(PaoloRoversi, Giordano)\nTEXT: Roberto Roversi uses Giordano as a surname.\nFOL: Surname(RobertoRoversi, Giordano)\nTEXT: Paolo Roversi is a photographer.\nFOL: Photographer(PaoloRoversi)\nTEXT: A photographer is a fashion photographer or a dolphin photographer.\nFOL: all x. (Photographer(x) -> (FashionPhotographer(x) | DolphinPhotographer(x)))\nTEXT: Paolo Roversi is a fashion photographer.\nFOL: FashionPhotographer(PaoloRoversi)\n\nANSWER: True\nProcessed: True", "Generation 6:\nTEXT: Giordano is a Chinese surname.\nFOL: ChineseSurname(Giordano)\nTEXT: Alba Roversi uses Giordano as a surname.\nFOL: Surname(AlbaRoversi, Giordano)\nTEXT: Paolo Roversi uses Giordano as a surname.\nFOL: Surname(PaoloRoversi, Giordano)\nTEXT: Roberto Roversi uses Giordano as a surname.\nFOL: Surname(RobertoRoversi, Giordano)\nTEXT: Paolo Roversi is a photographer.\nFOL: Photographer(PaoloRoversi)\nTEXT: A photographer is a fashion photographer or a dolphin photographer.\nFOL: all x. (Photographer(x) -> (FashionPhotographer(x) | DolphinPhotographer(x)))\nTEXT: Paolo Roversi is a fashion photographer.\nFOL: FashionPhotographer(PaoloRoversi)\n\nANSWER: True\nProcessed: True", "Generation 7:\nTEXT: Giordano is a Chinese surname.\nFOL: ChineseSurname(Giordano)\nTEXT: Alba Roversi uses Giordano as a surname.\nFOL: Surname(AlbaRoversi, Giordano)\nTEXT: Paolo Roversi uses Giordano as a surname.\nFOL: Surname(PaoloRoversi, Giordano)\nTEXT: Roberto Roversi uses Giordano as a surname.\nFOL: Surname(RobertoRoversi, Giordano)\nTEXT: A photographer is a fashion photographer or a dolphin photographer.\nFOL: all x. (Photographer(x) -> (FashionPhotographer(x) | DolphinPhotographer(x)))\nTEXT: Paolo Roversi is a photographer.\nFOL: Photographer(PaoloRoversi)\nTEXT: Paolo Roversi is a fashion photographer.\nFOL: FashionPhotographer(PaoloRoversi)\n\nANSWER: True\nProcessed: True", "Generation 8:\nTEXT: Giordano is a Chinese surname.\nFOL: Surname(Giordano) & Chinese(Giordano)\nTEXT: Alba Roversi uses Giordano as a surname.\nFOL: UsesSurname(AlbaRoversi, Giordano)\nTEXT: Paolo Roversi uses Giordano as a surname.\nFOL: UsesSurname(PaoloRoversi, Giordano)\nTEXT: Roberto Roversi uses Giordano as a surname.\nFOL: UsesSurname(RobertoRoversi, Giordano)\nTEXT: Paolo Roversi is a photographer.\nFOL: Photographer(PaoloRoversi)\nTEXT: A photographer is a fashion photographer or a dolphin photographer.\nFOL: all x. (Photographer(x) -> (FashionPhotographer(x) | DolphinPhotographer(x)))\nTEXT: Paolo Roversi is a fashion photographer.\nFOL: FashionPhotographer(PaoloRoversi)\n\nANSWER: True\nProcessed: True", "Generation 9:\nTEXT: Giordano is a Chinese surname.\nFOL: ChineseSurname(Giordano)\n\nTEXT: Alba Roversi uses Giordano as a surname.\nFOL: Surname(Alba Roversi, Giordano)\n\nTEXT: Paolo Roversi uses Giordano as a surname.\nFOL: Surname(Paolo Roversi, Giordano)\n\nTEXT: Roberto Roversi uses Giordano as a surname.\nFOL: Surname(Roberto Roversi, Giordano)\n\nTEXT: Paolo Roversi is a photographer.\nFOL: Photographer(Paolo Roversi)\n\nTEXT: A photographer is a fashion photographer or a dolphin photographer.\nFOL: all x. (Photographer(x) -> (FashionPhotographer(x) | DolphinPhotographer(x)))\n\nTEXT: Paolo Roversi is a fashion photographer.\nFOL: FashionPhotographer(Paolo Roversi)\n\nANSWER: True\nProcessed: True", "Generation 10:\nTEXT: Giordano is a Chinese surname.\nFOL: all x. (Giordano(x) -> ChineseSurname(x))\nTEXT: Alba Roversi uses Giordano as a surname.\nFOL: Giordano(AlbaRoversi)\nTEXT: Paolo Roversi uses Giordano as a surname.\nFOL: Giordano(PaoloRoversi)\nTEXT: Roberto Roversi uses Giordano as a surname.\nFOL: Giordano(RobertoRoversi)\nTEXT: A photographer is a fashion photographer or a dolphin photographer.\nFOL: all x. (Photographer(x) -> (FashionPhotographer(x) | DolphinPhotographer(x)))\nTEXT: Paolo Roversi is a photographer.\nFOL: Photographer(PaoloRoversi)\nTEXT: Paolo Roversi is a fashion photographer.\nFOL: FashionPhotographer(PaoloRoversi)\n\nANSWER: True\nProcessed: True\n\nReference: Uncertain\n========================================"], "answers": ["True", "True", "True", "True", "True", "True", "True", "True", "True", "True"]}
{"idx": 78, "prompt": "The following is a first-order logic (FOL) problem.\nThe problem is to determine whether the conclusion follows from the premises.\nThe premises are given in the form of a set of first-order logic sentences.\nThe conclusion is given in the form of a single first-order logic sentence.\nThe task is to translate each of the premises and conclusions into FOL expressions.and then to evaluate the conclusion as ANSWER: True, ANSWER: False, or ANSWER: Uncertain given the premises. The output should follow format TEXT: \nFOL: \nTEXT: \nFOL:... ANSWER: \n\n\n<PREMISES>\nAll biodegradable things are environment-friendly.\nAll woodware is biodegradable.\nAll paper is woodware.\nNothing is a good thing and also a bad thing.\nAll environment-friendly things are good.\nA worksheet is either paper or environment-friendly.\n</PREMISES>\n<CONCLUSION>\nA worksheet is not biodegradable.\n</CONCLUSION>\n<EVALUATE>\nTEXT: All biodegradable things are environment-friendly.\nFOL: all x. (Biodegradable(x) -> EnvironmentFriendly(x))\nTEXT: All woodware is biodegradable.\nFOL: all x. (Woodware(x) -> Biodegradable(x))\nTEXT: All paper is woodware.\nFOL: all x. (Paper(x) -> Woodware(x))\nTEXT: Nothing is a good thing and also a bad thing.\nFOL: -(exists x. (Good(x) & Bad(x)))\nTEXT: All environment-friendly things are good.\nFOL: all x. (EnvironmentFriendly(x) -> Good(x))\nTEXT: A worksheet is either paper or environment-friendly.\nFOL: ((Paper(Worksheet) & -EnvironmentFriendly(Worksheet)) | (-Paper(Worksheet) & EnvironmentFriendly(Worksheet)))\nTEXT: A worksheet is not biodegradable.\nFOL: -Dispensable(Worksheet)\n\nANSWER: Uncertain\n</EVALUATE>\n\n<PREMISES>\nA La Liga soccer team ranks higher than another La Liga soccer team if it receives more points.\nIf there are two La Liga soccer teams and neither has more points than the other, then the team which receives more points from the games between the two teams ranks higher.\nReal Madrid and Barcelona are both La Liga soccer teams.\nReal Madrid received more points than Barcelona.\nNeither Real Madrid nor Barcelona received more points from the games between them.\n</PREMISES>\n<CONCLUSION>\nReal Madrid ranks higher than Barcelona.\n</CONCLUSION>\n<EVALUATE>\nTEXT: A La Liga soccer team ranks higher than another La Liga soccer team if it receives more points.\nFOL: all x. all y. (LaLigaSoccerTeam(x) & LaLigaSoccerTeam(y) & MorePoints(x, y) -> RankHigherThan(x, y))\nTEXT: If there are two La Liga soccer teams and neither has more points than the other, then the team which receives more points from the games between the two teams ranks higher.\nFOL: all x. all y. (LaLigaSoccerTeam(x) & LaLigaSoccerTeam(y) & -MorePoints(x, y) & -MorePoints(y, x) & MorePointsInGameBetween(x, y) ->  RankHigherThan(x, y))\nTEXT: Real Madrid and Barcelona are both La Liga soccer teams.\nFOL: LaLigaSoccerTeam(RealMadrid) & LaLigaSoccerTeam(Barcelona)\nTEXT: Real Madrid received more points than Barcelona.\nFOL: MorePoints(RealMadrid, Barcelona)\nTEXT: Neither Real Madrid nor Barcelona received more points from the games between them.\nFOL: -MorePointsInGameBetween(RealMadrid, Barcelona) & -MorePointsInGameBetween(Barcelona, RealMadrid)\nTEXT: Real Madrid ranks higher than Barcelona.\nFOL: HigherRank(RealMadrid, Barcelona)\n\nANSWER: True\n</EVALUATE>\n\n<PREMISES>\nAll professional athletes spend most of their time on sports.\nAll Olympic gold medal winners are professional athletes.\nNo full-time scientists spend the majority of their time on sports.\nAll Nobel physics laureates are full-time scientists.\nAmy spends the most time on sports, or Amy is an Olympic gold medal winner.\nIf Amy is not a Nobel physics laureate, then Amy is not an Olympic gold medal winner.\n</PREMISES>\n<CONCLUSION>\nIf Amy is not an Olympic gold medal winner, then Amy is a Nobel physics laureate.\n</CONCLUSION>\n<EVALUATE>\nTEXT: All professional athletes spend most of their time on sports.\nFOL: all x. (ProfessionalAthlete(x) -> SpendOn(x, MostOfTheirTime, Sports))\nTEXT: All Olympic gold medal winners are professional athletes.\nFOL: all x. (OlympicGoldMedalWinner(x) -> ProfessionalAthlete(x))\nTEXT: No full-time scientists spend the majority of their time on sports.\nFOL: all x. (FullTimeScientist(x) -> -SpendOn(x, MostOfTheirTime, Sports))\nTEXT: All Nobel physics laureates are full-time scientists.\nFOL: all x. (NobelPhysicsLaureate(x) -> FullTimeScientist(x))\nTEXT: Amy spends the most time on sports, or Amy is an Olympic gold medal winner.\nFOL: SpendOn(Amy, MostOfTheirTime, Sports) | OlympicGoldMedalWinner(Amy)\nTEXT: If Amy is not a Nobel physics laureate, then Amy is not an Olympic gold medal winner.\nFOL: -NobelPhysicsLaureate(Amy) -> -OlympicGoldMedalWinner(Amy)\nTEXT: If Amy is not an Olympic gold medal winner, then Amy is a Nobel physics laureate.\nFOL: -OlympicGoldMedalWinner(Amy) -> NobelLaureate(Amy)\n\nANSWER: False\n</EVALUATE>\n\n<PREMISES>\nIf a person pays their taxes, then they contribute to the country.\nEveryone who works for a government department pays a tax on their salary.\nEveryone in the army is an employee of a government department.\nEveryone convicted of murder goes to prison.\nEveryone who has been to prison has a criminal record.\nJames was either once convicted of murder, or spent time in prison.\nJames either has a criminal record, or pays his taxes.\n</PREMISES>\n<CONCLUSION>\nJames does not contribute to the country.\n</CONCLUSION>\n<EVALUATE>\nTEXT: If a person pays their taxes, then they contribute to the country.\nFOL: all x. (Taxpayer(x) -> ContributeTo(x, Country))\nTEXT: Everyone who works for a government department pays a tax on their salary.\nFOL: all x. (WorkFor(x, GovernmentAgency) -> Taxpayer(x))\nTEXT: Everyone in the army is an employee of a government department.\nFOL: all x. (ServesIn(x, TheArmy) -> WorkFor(x, GovernmentAgency))\nTEXT: Everyone convicted of murder goes to prison.\nFOL: all x. (SentencedForMurder(x) -> Imprisoned(x))\nTEXT: Everyone who has been to prison has a criminal record.\nFOL: all x. (Imprisoned((x) -> Has(x, CriminalRecord))\nTEXT: James was either once convicted of murder, or spent time in prison.\nFOL: ((SentencedForMurder(James) & -Imprisoned(James)) | (-SentencedForMurder(James) & Imprisoned(James)))\nTEXT: James either has a criminal record, or pays his taxes.\nFOL: ((Has(James, CriminalRecord) & -Taxpayer(James)) | (-Has(James, CriminalRecord) & Taxpayer(James)))\nTEXT: James does not contribute to the country.\nFOL: ContributeToCountry(James)\n\nANSWER: Uncertain\n</EVALUATE>\n\n<PREMISES>\nNo songs are visuals.\nAll folk songs are songs.\nAll videos are visuals.\nAll movies are videos.\nAll sci-fi movies are movies.\nInception is a sci-fi movie.\nMac is neither a folk song nor a sci-fi movie.\n</PREMISES>\n<CONCLUSION>\nInception is a folk song.\n</CONCLUSION>\n<EVALUATE>\nTEXT: No songs are visuals.\nFOL: all x. (Song(x) -> -Visual(x))\nTEXT: All folk songs are songs.\nFOL: all x. (FolkSong(x) -> Song(x))\nTEXT: All videos are visuals.\nFOL: all x. (Video(x) -> Visual(x))\nTEXT: All movies are videos.\nFOL: all x. (Movie(x) -> Video(x))\nTEXT: All sci-fi movies are movies.\nFOL: all x. (ScifiMovie(x) -> Movie(x))\nTEXT: Inception is a sci-fi movie.\nFOL: ScifiMovie(Inception)\nTEXT: Mac is neither a folk song nor a sci-fi movie.\nFOL: -FolkSong(Mac) & -ScifiMovie(Mac)\nTEXT: Inception is a folk song.\nFOL: FolkSong(Inception)\n\nANSWER: False\n</EVALUATE>\n\n<PREMISES>\nEvery chef can cook.\nSome people who aren’t chefs can cook.\nPeople who cook can make scrambled eggs and pasta.\nIf someone can make cookies and muffins, they are a baker.\nBakers who can also make scrambled eggs can make a good breakfast.\nLuke can make cookies, scrambled eggs, and muffins, but not pasta.\n</PREMISES>\n<CONCLUSION>\nLuke is a chef.\n</CONCLUSION>\n<EVALUATE>\nTEXT: Every chef can cook.\nFOL: all x. (Chef(x) -> Can(x, Cook))\nTEXT: Some people who aren’t chefs can cook.\nFOL: exists x. (-Chef(x) & Can(x, Cook))\nTEXT: People who cook can make scrambled eggs and pasta.\nFOL: all x. (Can(x, Cook) -> (CanMake(x, ScrambledEggs) & CanMake(x, Pasta)))\nTEXT: If someone can make cookies and muffins, they are a baker.\nFOL: all x. (CanMake(x, Cookies) & CanMake(x, Muffins) -> Baker(x))\nTEXT: Bakers who can also make scrambled eggs can make a good breakfast.\nFOL: all x. ((Baker(x) & CanMake(x, ScrambledEggs)) -> CanMake(x, GoodBreakfast))\nTEXT: Luke can make cookies, scrambled eggs, and muffins, but not pasta.\nFOL: CanMake(Luke, Cookies) & (CanMake(Luke, ScrambledEggs) & CanMake(Luke, Muffins) & -CanMake(Luke, Pasta)\nTEXT: Luke is a chef.\nFOL: MakeGoodBreakfast(Luke)\n\nANSWER: False\n</EVALUATE>\n\n<PREMISES>\nETS develops various standardized tests primarily in the United States for K-12 and higher education.\nETS administers international tests, including the TOEFL, TOEIC, GRE, and subject tests.\nMany of the assessments ETS develops are associated with entry to the US tertiary and quaternary education institutions.\nETS also develops K-12 statewide assessments used for accountability testing in many states.\n</PREMISES>\n<CONCLUSION>\nETS doesn't administer tests internationally.\n</CONCLUSION>\n<EVALUATE>\nTEXT: ETS develops various standardized tests primarily in the United States for K-12 and higher education.\nFOL: exists x. exists y. (Develop(eTS, x) & Develop(eTS, y) & StandardizedTest(x) & StandardizedTest(y) & In(x, UnitedState) & In(y, UnitedState) & For(x, kOneTwoAndHigherEducation) & For(y, kOneTwoAndHigherEducation))\nTEXT: ETS administers international tests, including the TOEFL, TOEIC, GRE, and subject tests.\nFOL: exists x. (Administer(eTS, x) & InternationalTest(x) & (TOEFL(x) | TOEIC(x) | GRE(x) | SubjectTest(x)))\nTEXT: Many of the assessments ETS develops are associated with entry to the US tertiary and quaternary education institutions.\nFOL: exists x. (Develop(eTS, x) & AssociatedWith(x, EntryToUSEducationInstitution))\nTEXT: ETS also develops K-12 statewide assessments used for accountability testing in many states.\nFOL: exists x. (Develop(eTS, x) & StateWideAssesment(x) & UsedFor(x, AccountabilityTesting))\nTEXT: ETS doesn't administer tests internationally.\nFOL: exists x. (Develops(Ets, x) & For(x, k-OneTwoandhighereducation)) & exists x. (Develops(Ets, x) & AssociatedWith(x, Entrytouseducationinstitutions))\n\nANSWER: False\n</EVALUATE>\n\n<PREMISES>\nDaveed Diggs is an actor and film producer.\nDaveed Diggs played two roles in the musical Hamilton on Broadway.\nOne of the actors from Hamilton won the best actor award.\nThe actor playing Thomas Jefferson won the best actor award.\nDaveed Diggs played Thomas Jefferson.\nMusicals on Broadway are not films.\n</PREMISES>\n<CONCLUSION>\nDaveed Diggs won the best actor award.\n</CONCLUSION>\n<EVALUATE>\nTEXT: Daveed Diggs is an actor and film producer.\nFOL: Actor(DaveedDiggs) & FilmProducer(DaveedDiggs)\nTEXT: Daveed Diggs played two roles in the musical Hamilton on Broadway.\nFOL: exists x. exists y.(PlaysIn(DaveedDiggs, x, Hamilton) & (-(x=y)) & PlaysIn(DaveedDiggs, y, Hamilton)) & OnBroadway(Hamilton) & Musical(Hamilton)\nTEXT: One of the actors from Hamilton won the best actor award.\nFOL: exists x. exists y.(Actor(x) & PlaysIn(x, y, Hamilton) & Wins(x, BestActorAward))\nTEXT: The actor playing Thomas Jefferson won the best actor award.\nFOL: exists x. (Actor(x) & PlaysIn(x, ThomasJefferson, Hamilton) & Wins(x, BestActorAward))\nTEXT: Daveed Diggs played Thomas Jefferson.\nFOL: Plays(DaveedDiggs, ThomasJefferson)\nTEXT: Musicals on Broadway are not films.\nFOL: all x. ((Musical(x) & OnBroadway(x)) -> -Film(x))\nTEXT: Daveed Diggs won the best actor award.\nFOL: exists x. (BRICS(x) & Speaks(x, Hindi))\n\nANSWER: True\n</EVALUATE>\n\n<PREMISES>\nTyga is an astronaut.\nAstronauts consume rock albums.\nTyga consumed Well Done 3.\nAstronauts are not opera singers.\n</PREMISES>\n<CONCLUSION>\nWell Done 3 was released.\n</CONCLUSION>\n<EVALUATE>", "raw_generations": ["Generation 1:\nTEXT: Tyga is an astronaut.\nFOL: Astronaut(Tyga)\nTEXT: Astronauts consume rock albums.\nFOL: all x. (Astronaut(x) -> Consumes(x, RockAlbum))\nTEXT: Tyga consumed Well Done 3.\nFOL: Consumes(Tyga, WellDone3)\nTEXT: Astronauts are not opera singers.\nFOL: all x. (Astronaut(x) -> -OperaSinger(x))\nTEXT: Well Done 3 was released.\nFOL: Released(WellDone3)\n\nANSWER: Uncertain (The premises do not provide enough information to determine whether Well Done 3 was released.)\nProcessed: Uncertain", "Generation 2:\nTEXT: Tyga is an astronaut.\nFOL: Astronaut(Tyga)\n\nTEXT: Astronauts consume rock albums.\nFOL: all x. (Astronaut(x) -> Consumes(x, RockAlbum))\n\nTEXT: Tyga consumed Well Done 3.\nFOL: Consumes(Tyga, WellDone3)\n\nTEXT: Astronauts are not opera singers.\nFOL: all x. (Astronaut(x) -> -OperaSinger(x))\n\nTEXT: Well Done 3 was released.\nFOL: Released(WellDone3)\n\nANSWER: Uncertain\n\nThe given premises do not provide information about the release of Well Done 3. While Tyga is an astronaut who consumed Well Done 3, there is no indication in the premises that Well Done 3 was a rock album that had been released.\nProcessed: Uncertain", "Generation 3:\nTEXT: Tyga is an astronaut.\nFOL: Astronaut(Tyga)\nTEXT: Astronauts consume rock albums.\nFOL: all x. (Astronaut(x) -> Consumes(x, RockAlbum))\nTEXT: Tyga consumed Well Done 3.\nFOL: Consumes(Tyga, WellDone3)\nTEXT: Astronauts are not opera singers.\nFOL: all x. (Astronaut(x) -> -OperaSinger(x))\nTEXT: Well Done 3 was released.\nFOL: Released(WellDone3)\n\nANSWER: Uncertain\n\nThe given premises do not provide any information about the release of Well Done 3. The fact that Tyga consumed it and that astronauts consume rock albums does not imply that the album was released.\nProcessed: Uncertain", "Generation 4:\nTEXT: Tyga is an astronaut.\nFOL: Astronaut(Tyga)\nTEXT: Astronauts consume rock albums.\nFOL: all x. (Astronaut(x) -> Consumes(x, RockAlbum))\nTEXT: Tyga consumed Well Done 3.\nFOL: Consumes(Tyga, WellDone3)\nTEXT: Astronauts are not opera singers.\nFOL: all x. (Astronaut(x) -> -OperaSinger(x))\nTEXT: Well Done 3 was released.\nFOL: Released(WellDone3)\n\nANSWER: Uncertain (The premises do not provide information about the release of Well Done 3.)\nProcessed: Uncertain", "Generation 5:\nTEXT: Tyga is an astronaut.\nFOL: Astronaut(Tyga)\n\nTEXT: Astronauts consume rock albums.\nFOL: all x. (Astronaut(x) -> Consumes(x, RockAlbum))\n\nTEXT: Tyga consumed Well Done 3.\nFOL: Consumes(Tyga, WellDone3)\n\nTEXT: Astronauts are not opera singers.\nFOL: all x. (Astronaut(x) -> -OperaSinger(x))\n\nTEXT: Well Done 3 was released.\nFOL: Released(WellDone3)\n\nANSWER: Uncertain (There's no direct connection between the premises and the conclusion.)\nProcessed: Uncertain", "Generation 6:\nTEXT: Tyga is an astronaut.\nFOL: Astronaut(Tyga)\n\nTEXT: Astronauts consume rock albums.\nFOL: all x. (Astronaut(x) -> Consumes(x, RockAlbum))\n\nTEXT: Tyga consumed Well Done 3.\nFOL: Consumes(Tyga, WellDone3)\n\nTEXT: Astronauts are not opera singers.\nFOL: all x. (Astronaut(x) -> -OperaSinger(x))\n\nTEXT: Well Done 3 was released.\nFOL: Released(WellDone3)\n\nANSWER: Uncertain (The premises don't provide enough information to determine whether Well Done 3 was released or not)\nProcessed: Uncertain", "Generation 7:\nTEXT: Tyga is an astronaut.\nFOL: Astronaut(Tyga)\nTEXT: Astronauts consume rock albums.\nFOL: all x. (Astronaut(x) -> Consumes(x, RockAlbum))\nTEXT: Tyga consumed Well Done 3.\nFOL: Consumes(Tyga, WellDone3)\nTEXT: Astronauts are not opera singers.\nFOL: all x. (Astronaut(x) -> -OperaSinger(x))\nTEXT: Well Done 3 was released.\nFOL: Released(WellDone3)\n\nANSWER: Uncertain (The premises do not provide information about the release of Well Done 3)\nProcessed: Uncertain", "Generation 8:\nTEXT: Tyga is an astronaut.\nFOL: Astronaut(Tyga)\nTEXT: Astronauts consume rock albums.\nFOL: all x. (Astronaut(x) -> Consumes(x, RockAlbum))\nTEXT: Tyga consumed Well Done 3.\nFOL: Consumes(Tyga, WellDone3)\nTEXT: Astronauts are not opera singers.\nFOL: all x. (Astronaut(x) -> -OperaSinger(x))\nTEXT: Well Done 3 was released.\nFOL: Released(WellDone3)\n\nANSWER: Uncertain\n\nThe given premises do not provide enough information to determine whether \"Well Done 3 was released.\" The premises only state that Tyga, who is an astronaut, consumed \"Well Done 3,\" and that astronauts consume rock albums, but they do not provide any information about the existence, release, or nature of \"Well Done 3.\" Therefore, it is uncertain whether the conclusion follows from the premises.\nProcessed: Uncertain", "Generation 9:\nTEXT: Tyga is an astronaut.\nFOL: Astronaut(Tyga)\nTEXT: Astronauts consume rock albums.\nFOL: all x. (Astronaut(x) -> Consumes(x, RockAlbums))\nTEXT: Tyga consumed Well Done 3.\nFOL: Consumes(Tyga, WellDone3)\nTEXT: Astronauts are not opera singers.\nFOL: -(all x. (Astronaut(x) -> OperaSinger(x)))\nTEXT: Well Done 3 was released.\nFOL: Released(WellDone3)\n\nANSWER: Uncertain\n\nThe given premises do not provide any information about the release of the album \"Well Done 3.\" Consuming the album by an astronaut (Tyga) does not necessarily imply that the album was released.\nProcessed: Uncertain", "Generation 10:\nTEXT: Tyga is an astronaut.\nFOL: Astronaut(Tyga)\nTEXT: Astronauts consume rock albums.\nFOL: all x. (Astronaut(x) -> Consumes(x, RockAlbum))\nTEXT: Tyga consumed Well Done 3.\nFOL: Consumes(Tyga, WellDone3)\nTEXT: Astronauts are not opera singers.\nFOL: -(all x. (Astronaut(x) -> OperaSinger(x)))\nTEXT: Well Done 3 was released.\nFOL: Released(WellDone3)\n\nANSWER: Uncertain\n\nIn the given premises, there's no information provided about the release of the album \"Well Done 3\". Although Tyga, an astronaut, consumed it, consuming an album does not necessarily mean it has been released.\nProcessed: Uncertain\n\nReference: Uncertain\n========================================"], "answers": ["Uncertain", "Uncertain", "Uncertain", "Uncertain", "Uncertain", "Uncertain", "Uncertain", "Uncertain", "Uncertain", "Uncertain"]}
{"idx": 79, "prompt": "The following is a first-order logic (FOL) problem.\nThe problem is to determine whether the conclusion follows from the premises.\nThe premises are given in the form of a set of first-order logic sentences.\nThe conclusion is given in the form of a single first-order logic sentence.\nThe task is to translate each of the premises and conclusions into FOL expressions.and then to evaluate the conclusion as ANSWER: True, ANSWER: False, or ANSWER: Uncertain given the premises. The output should follow format TEXT: \nFOL: \nTEXT: \nFOL:... ANSWER: \n\n\n<PREMISES>\nAll biodegradable things are environment-friendly.\nAll woodware is biodegradable.\nAll paper is woodware.\nNothing is a good thing and also a bad thing.\nAll environment-friendly things are good.\nA worksheet is either paper or environment-friendly.\n</PREMISES>\n<CONCLUSION>\nA worksheet is not biodegradable.\n</CONCLUSION>\n<EVALUATE>\nTEXT: All biodegradable things are environment-friendly.\nFOL: all x. (Biodegradable(x) -> EnvironmentFriendly(x))\nTEXT: All woodware is biodegradable.\nFOL: all x. (Woodware(x) -> Biodegradable(x))\nTEXT: All paper is woodware.\nFOL: all x. (Paper(x) -> Woodware(x))\nTEXT: Nothing is a good thing and also a bad thing.\nFOL: -(exists x. (Good(x) & Bad(x)))\nTEXT: All environment-friendly things are good.\nFOL: all x. (EnvironmentFriendly(x) -> Good(x))\nTEXT: A worksheet is either paper or environment-friendly.\nFOL: ((Paper(Worksheet) & -EnvironmentFriendly(Worksheet)) | (-Paper(Worksheet) & EnvironmentFriendly(Worksheet)))\nTEXT: A worksheet is not biodegradable.\nFOL: -Dispensable(Worksheet)\n\nANSWER: Uncertain\n</EVALUATE>\n\n<PREMISES>\nA La Liga soccer team ranks higher than another La Liga soccer team if it receives more points.\nIf there are two La Liga soccer teams and neither has more points than the other, then the team which receives more points from the games between the two teams ranks higher.\nReal Madrid and Barcelona are both La Liga soccer teams.\nReal Madrid received more points than Barcelona.\nNeither Real Madrid nor Barcelona received more points from the games between them.\n</PREMISES>\n<CONCLUSION>\nReal Madrid ranks higher than Barcelona.\n</CONCLUSION>\n<EVALUATE>\nTEXT: A La Liga soccer team ranks higher than another La Liga soccer team if it receives more points.\nFOL: all x. all y. (LaLigaSoccerTeam(x) & LaLigaSoccerTeam(y) & MorePoints(x, y) -> RankHigherThan(x, y))\nTEXT: If there are two La Liga soccer teams and neither has more points than the other, then the team which receives more points from the games between the two teams ranks higher.\nFOL: all x. all y. (LaLigaSoccerTeam(x) & LaLigaSoccerTeam(y) & -MorePoints(x, y) & -MorePoints(y, x) & MorePointsInGameBetween(x, y) ->  RankHigherThan(x, y))\nTEXT: Real Madrid and Barcelona are both La Liga soccer teams.\nFOL: LaLigaSoccerTeam(RealMadrid) & LaLigaSoccerTeam(Barcelona)\nTEXT: Real Madrid received more points than Barcelona.\nFOL: MorePoints(RealMadrid, Barcelona)\nTEXT: Neither Real Madrid nor Barcelona received more points from the games between them.\nFOL: -MorePointsInGameBetween(RealMadrid, Barcelona) & -MorePointsInGameBetween(Barcelona, RealMadrid)\nTEXT: Real Madrid ranks higher than Barcelona.\nFOL: HigherRank(RealMadrid, Barcelona)\n\nANSWER: True\n</EVALUATE>\n\n<PREMISES>\nAll professional athletes spend most of their time on sports.\nAll Olympic gold medal winners are professional athletes.\nNo full-time scientists spend the majority of their time on sports.\nAll Nobel physics laureates are full-time scientists.\nAmy spends the most time on sports, or Amy is an Olympic gold medal winner.\nIf Amy is not a Nobel physics laureate, then Amy is not an Olympic gold medal winner.\n</PREMISES>\n<CONCLUSION>\nIf Amy is not an Olympic gold medal winner, then Amy is a Nobel physics laureate.\n</CONCLUSION>\n<EVALUATE>\nTEXT: All professional athletes spend most of their time on sports.\nFOL: all x. (ProfessionalAthlete(x) -> SpendOn(x, MostOfTheirTime, Sports))\nTEXT: All Olympic gold medal winners are professional athletes.\nFOL: all x. (OlympicGoldMedalWinner(x) -> ProfessionalAthlete(x))\nTEXT: No full-time scientists spend the majority of their time on sports.\nFOL: all x. (FullTimeScientist(x) -> -SpendOn(x, MostOfTheirTime, Sports))\nTEXT: All Nobel physics laureates are full-time scientists.\nFOL: all x. (NobelPhysicsLaureate(x) -> FullTimeScientist(x))\nTEXT: Amy spends the most time on sports, or Amy is an Olympic gold medal winner.\nFOL: SpendOn(Amy, MostOfTheirTime, Sports) | OlympicGoldMedalWinner(Amy)\nTEXT: If Amy is not a Nobel physics laureate, then Amy is not an Olympic gold medal winner.\nFOL: -NobelPhysicsLaureate(Amy) -> -OlympicGoldMedalWinner(Amy)\nTEXT: If Amy is not an Olympic gold medal winner, then Amy is a Nobel physics laureate.\nFOL: -OlympicGoldMedalWinner(Amy) -> NobelLaureate(Amy)\n\nANSWER: False\n</EVALUATE>\n\n<PREMISES>\nIf a person pays their taxes, then they contribute to the country.\nEveryone who works for a government department pays a tax on their salary.\nEveryone in the army is an employee of a government department.\nEveryone convicted of murder goes to prison.\nEveryone who has been to prison has a criminal record.\nJames was either once convicted of murder, or spent time in prison.\nJames either has a criminal record, or pays his taxes.\n</PREMISES>\n<CONCLUSION>\nJames does not contribute to the country.\n</CONCLUSION>\n<EVALUATE>\nTEXT: If a person pays their taxes, then they contribute to the country.\nFOL: all x. (Taxpayer(x) -> ContributeTo(x, Country))\nTEXT: Everyone who works for a government department pays a tax on their salary.\nFOL: all x. (WorkFor(x, GovernmentAgency) -> Taxpayer(x))\nTEXT: Everyone in the army is an employee of a government department.\nFOL: all x. (ServesIn(x, TheArmy) -> WorkFor(x, GovernmentAgency))\nTEXT: Everyone convicted of murder goes to prison.\nFOL: all x. (SentencedForMurder(x) -> Imprisoned(x))\nTEXT: Everyone who has been to prison has a criminal record.\nFOL: all x. (Imprisoned((x) -> Has(x, CriminalRecord))\nTEXT: James was either once convicted of murder, or spent time in prison.\nFOL: ((SentencedForMurder(James) & -Imprisoned(James)) | (-SentencedForMurder(James) & Imprisoned(James)))\nTEXT: James either has a criminal record, or pays his taxes.\nFOL: ((Has(James, CriminalRecord) & -Taxpayer(James)) | (-Has(James, CriminalRecord) & Taxpayer(James)))\nTEXT: James does not contribute to the country.\nFOL: ContributeToCountry(James)\n\nANSWER: Uncertain\n</EVALUATE>\n\n<PREMISES>\nNo songs are visuals.\nAll folk songs are songs.\nAll videos are visuals.\nAll movies are videos.\nAll sci-fi movies are movies.\nInception is a sci-fi movie.\nMac is neither a folk song nor a sci-fi movie.\n</PREMISES>\n<CONCLUSION>\nInception is a folk song.\n</CONCLUSION>\n<EVALUATE>\nTEXT: No songs are visuals.\nFOL: all x. (Song(x) -> -Visual(x))\nTEXT: All folk songs are songs.\nFOL: all x. (FolkSong(x) -> Song(x))\nTEXT: All videos are visuals.\nFOL: all x. (Video(x) -> Visual(x))\nTEXT: All movies are videos.\nFOL: all x. (Movie(x) -> Video(x))\nTEXT: All sci-fi movies are movies.\nFOL: all x. (ScifiMovie(x) -> Movie(x))\nTEXT: Inception is a sci-fi movie.\nFOL: ScifiMovie(Inception)\nTEXT: Mac is neither a folk song nor a sci-fi movie.\nFOL: -FolkSong(Mac) & -ScifiMovie(Mac)\nTEXT: Inception is a folk song.\nFOL: FolkSong(Inception)\n\nANSWER: False\n</EVALUATE>\n\n<PREMISES>\nEvery chef can cook.\nSome people who aren’t chefs can cook.\nPeople who cook can make scrambled eggs and pasta.\nIf someone can make cookies and muffins, they are a baker.\nBakers who can also make scrambled eggs can make a good breakfast.\nLuke can make cookies, scrambled eggs, and muffins, but not pasta.\n</PREMISES>\n<CONCLUSION>\nLuke is a chef.\n</CONCLUSION>\n<EVALUATE>\nTEXT: Every chef can cook.\nFOL: all x. (Chef(x) -> Can(x, Cook))\nTEXT: Some people who aren’t chefs can cook.\nFOL: exists x. (-Chef(x) & Can(x, Cook))\nTEXT: People who cook can make scrambled eggs and pasta.\nFOL: all x. (Can(x, Cook) -> (CanMake(x, ScrambledEggs) & CanMake(x, Pasta)))\nTEXT: If someone can make cookies and muffins, they are a baker.\nFOL: all x. (CanMake(x, Cookies) & CanMake(x, Muffins) -> Baker(x))\nTEXT: Bakers who can also make scrambled eggs can make a good breakfast.\nFOL: all x. ((Baker(x) & CanMake(x, ScrambledEggs)) -> CanMake(x, GoodBreakfast))\nTEXT: Luke can make cookies, scrambled eggs, and muffins, but not pasta.\nFOL: CanMake(Luke, Cookies) & (CanMake(Luke, ScrambledEggs) & CanMake(Luke, Muffins) & -CanMake(Luke, Pasta)\nTEXT: Luke is a chef.\nFOL: MakeGoodBreakfast(Luke)\n\nANSWER: False\n</EVALUATE>\n\n<PREMISES>\nETS develops various standardized tests primarily in the United States for K-12 and higher education.\nETS administers international tests, including the TOEFL, TOEIC, GRE, and subject tests.\nMany of the assessments ETS develops are associated with entry to the US tertiary and quaternary education institutions.\nETS also develops K-12 statewide assessments used for accountability testing in many states.\n</PREMISES>\n<CONCLUSION>\nETS doesn't administer tests internationally.\n</CONCLUSION>\n<EVALUATE>\nTEXT: ETS develops various standardized tests primarily in the United States for K-12 and higher education.\nFOL: exists x. exists y. (Develop(eTS, x) & Develop(eTS, y) & StandardizedTest(x) & StandardizedTest(y) & In(x, UnitedState) & In(y, UnitedState) & For(x, kOneTwoAndHigherEducation) & For(y, kOneTwoAndHigherEducation))\nTEXT: ETS administers international tests, including the TOEFL, TOEIC, GRE, and subject tests.\nFOL: exists x. (Administer(eTS, x) & InternationalTest(x) & (TOEFL(x) | TOEIC(x) | GRE(x) | SubjectTest(x)))\nTEXT: Many of the assessments ETS develops are associated with entry to the US tertiary and quaternary education institutions.\nFOL: exists x. (Develop(eTS, x) & AssociatedWith(x, EntryToUSEducationInstitution))\nTEXT: ETS also develops K-12 statewide assessments used for accountability testing in many states.\nFOL: exists x. (Develop(eTS, x) & StateWideAssesment(x) & UsedFor(x, AccountabilityTesting))\nTEXT: ETS doesn't administer tests internationally.\nFOL: exists x. (Develops(Ets, x) & For(x, k-OneTwoandhighereducation)) & exists x. (Develops(Ets, x) & AssociatedWith(x, Entrytouseducationinstitutions))\n\nANSWER: False\n</EVALUATE>\n\n<PREMISES>\nDaveed Diggs is an actor and film producer.\nDaveed Diggs played two roles in the musical Hamilton on Broadway.\nOne of the actors from Hamilton won the best actor award.\nThe actor playing Thomas Jefferson won the best actor award.\nDaveed Diggs played Thomas Jefferson.\nMusicals on Broadway are not films.\n</PREMISES>\n<CONCLUSION>\nDaveed Diggs won the best actor award.\n</CONCLUSION>\n<EVALUATE>\nTEXT: Daveed Diggs is an actor and film producer.\nFOL: Actor(DaveedDiggs) & FilmProducer(DaveedDiggs)\nTEXT: Daveed Diggs played two roles in the musical Hamilton on Broadway.\nFOL: exists x. exists y.(PlaysIn(DaveedDiggs, x, Hamilton) & (-(x=y)) & PlaysIn(DaveedDiggs, y, Hamilton)) & OnBroadway(Hamilton) & Musical(Hamilton)\nTEXT: One of the actors from Hamilton won the best actor award.\nFOL: exists x. exists y.(Actor(x) & PlaysIn(x, y, Hamilton) & Wins(x, BestActorAward))\nTEXT: The actor playing Thomas Jefferson won the best actor award.\nFOL: exists x. (Actor(x) & PlaysIn(x, ThomasJefferson, Hamilton) & Wins(x, BestActorAward))\nTEXT: Daveed Diggs played Thomas Jefferson.\nFOL: Plays(DaveedDiggs, ThomasJefferson)\nTEXT: Musicals on Broadway are not films.\nFOL: all x. ((Musical(x) & OnBroadway(x)) -> -Film(x))\nTEXT: Daveed Diggs won the best actor award.\nFOL: exists x. (BRICS(x) & Speaks(x, Hindi))\n\nANSWER: True\n</EVALUATE>\n\n<PREMISES>\nA mammal never breathes.\nSome birds are mammals.\n</PREMISES>\n<CONCLUSION>\nAll birds breathe.\n</CONCLUSION>\n<EVALUATE>", "raw_generations": ["Generation 1:\nTEXT: A mammal never breathes.\nFOL: all x. (Mammal(x) -> -Breathes(x))\nTEXT: Some birds are mammals.\nFOL: exists x. (Bird(x) & Mammal(x))\nTEXT: All birds breathe.\nFOL: all x. (Bird(x) -> Breathes(x))\n\nANSWER: False (given the premises, it is not possible to conclude that all birds breathe)\nProcessed: False", "Generation 2:\nTEXT: A mammal never breathes.\nFOL: all x. (Mammal(x) -> -Breathes(x))\nTEXT: Some birds are mammals.\nFOL: exists x. (Bird(x) & Mammal(x))\nTEXT: All birds breathe.\nFOL: all x. (Bird(x) -> Breathes(x))\n\nANSWER: False (The premises do not imply that all birds breathe because some birds are also mammals, and mammals do not breathe according to the first premise.)\nProcessed: False", "Generation 3:\nTEXT: A mammal never breathes.\nFOL: all x. (Mammal(x) -> -Breathes(x))\nTEXT: Some birds are mammals.\nFOL: exists x. (Bird(x) & Mammal(x))\nTEXT: All birds breathe.\nFOL: all x. (Bird(x) -> Breathes(x))\n\nANSWER: False (The premises do not imply the conclusion. It is possible for some birds not to breathe.)\nProcessed: False", "Generation 4:\nTEXT: A mammal never breathes.\nFOL: all x. (Mammal(x) -> -Breathes(x))\nTEXT: Some birds are mammals.\nFOL: exists x. (Bird(x) & Mammal(x))\nTEXT: All birds breathe.\nFOL: all x. (Bird(x) -> Breathes(x))\n\nANSWER: False\n\nIn this case, the premises state that some birds are mammals and that mammals never breathe. Since birds are not mammals, the conclusion that all birds breathe does not follow from the premises. The conclusion is false because there are birds (which do not belong to the category of mammals) that do breathe.\nProcessed: False", "Generation 5:\nTEXT: A mammal never breathes.\nFOL: all x. (Mammal(x) -> -Breathes(x))\nTEXT: Some birds are mammals.\nFOL: exists x. (Bird(x) & Mammal(x))\nTEXT: All birds breathe.\nFOL: all x. (Bird(x) -> Breathes(x))\n\nANSWER: False\n\nExplanation: The premises state that mammals do not breathe and that some birds are mammals. However, the conclusion states that all birds breathe, which contradicts the information provided about mammals. Since some birds are mammals, it is not true that all birds breathe.\nProcessed: False", "Generation 6:\nTEXT: A mammal never breathes.\nFOL: all x. (Mammal(x) -> -Breaths(x))\nTEXT: Some birds are mammals.\nFOL: exists x. (Bird(x) & Mammal(x))\nTEXT: All birds breathe.\nFOL: all x. (Bird(x) -> Breaths(x))\n\nANSWER: False (Given the premises, it cannot be concluded that all birds breathe.)\nProcessed: False", "Generation 7:\nTEXT: A mammal never breathes.\nFOL: all x. (Mammal(x) -> -Breaths(x))\nTEXT: Some birds are mammals.\nFOL: exists x. (Bird(x) & Mammal(x))\nTEXT: All birds breathe.\nFOL: all x. (Bird(x) -> Breaths(x))\n\nANSWER: False (The conclusion does not follow from the premises. There are birds that are not mammals, and the premise states that mammals do not breathe, not that all animals do not breathe.)\nProcessed: False", "Generation 8:\nTEXT: A mammal never breathes.\nFOL: all x. (Mammal(x) -> -Breaths(x))\nTEXT: Some birds are mammals.\nFOL: exists x. (Bird(x) & Mammal(x))\nTEXT: All birds breathe.\nFOL: all x. (Bird(x) -> Breaths(x))\n\nANSWER: False\n\nIn this case, the premises state that some birds are mammals, which are the animals that don't breathe according to the first premise. Therefore, it is not possible for all birds to breathe.\nProcessed: False", "Generation 9:\nTEXT: A mammal never breathes.\nFOL: all x. (Mammal(x) -> -Breaths(x))\nTEXT: Some birds are mammals.\nFOL: exists x. (Bird(x) & Mammal(x))\nTEXT: All birds breathe.\nFOL: all x. (Bird(x) -> Breaths(x))\n\nANSWER: False (given the premises, some birds do not breathe)\nProcessed: False", "Generation 10:\nFOL:\nTEXT: A mammal never breathes.\nFOL: all x. (Mammal(x) -> -Breathes(x))\nTEXT: Some birds are mammals.\nFOL: exists x. (Bird(x) & Mammal(x))\nTEXT: All birds breathe.\nFOL: all x. Bird(x) -> Breathes(x)\n\nANSWER: False (given the premises, it cannot be logically concluded that all birds breathe)\nProcessed: False\n\nReference: False\n========================================"], "answers": ["False", "False", "False", "False", "False", "False", "False", "False", "False", "False"]}
{"idx": 80, "prompt": "The following is a first-order logic (FOL) problem.\nThe problem is to determine whether the conclusion follows from the premises.\nThe premises are given in the form of a set of first-order logic sentences.\nThe conclusion is given in the form of a single first-order logic sentence.\nThe task is to translate each of the premises and conclusions into FOL expressions.and then to evaluate the conclusion as ANSWER: True, ANSWER: False, or ANSWER: Uncertain given the premises. The output should follow format TEXT: \nFOL: \nTEXT: \nFOL:... ANSWER: \n\n\n<PREMISES>\nAll biodegradable things are environment-friendly.\nAll woodware is biodegradable.\nAll paper is woodware.\nNothing is a good thing and also a bad thing.\nAll environment-friendly things are good.\nA worksheet is either paper or environment-friendly.\n</PREMISES>\n<CONCLUSION>\nA worksheet is not biodegradable.\n</CONCLUSION>\n<EVALUATE>\nTEXT: All biodegradable things are environment-friendly.\nFOL: all x. (Biodegradable(x) -> EnvironmentFriendly(x))\nTEXT: All woodware is biodegradable.\nFOL: all x. (Woodware(x) -> Biodegradable(x))\nTEXT: All paper is woodware.\nFOL: all x. (Paper(x) -> Woodware(x))\nTEXT: Nothing is a good thing and also a bad thing.\nFOL: -(exists x. (Good(x) & Bad(x)))\nTEXT: All environment-friendly things are good.\nFOL: all x. (EnvironmentFriendly(x) -> Good(x))\nTEXT: A worksheet is either paper or environment-friendly.\nFOL: ((Paper(Worksheet) & -EnvironmentFriendly(Worksheet)) | (-Paper(Worksheet) & EnvironmentFriendly(Worksheet)))\nTEXT: A worksheet is not biodegradable.\nFOL: -Dispensable(Worksheet)\n\nANSWER: Uncertain\n</EVALUATE>\n\n<PREMISES>\nA La Liga soccer team ranks higher than another La Liga soccer team if it receives more points.\nIf there are two La Liga soccer teams and neither has more points than the other, then the team which receives more points from the games between the two teams ranks higher.\nReal Madrid and Barcelona are both La Liga soccer teams.\nReal Madrid received more points than Barcelona.\nNeither Real Madrid nor Barcelona received more points from the games between them.\n</PREMISES>\n<CONCLUSION>\nReal Madrid ranks higher than Barcelona.\n</CONCLUSION>\n<EVALUATE>\nTEXT: A La Liga soccer team ranks higher than another La Liga soccer team if it receives more points.\nFOL: all x. all y. (LaLigaSoccerTeam(x) & LaLigaSoccerTeam(y) & MorePoints(x, y) -> RankHigherThan(x, y))\nTEXT: If there are two La Liga soccer teams and neither has more points than the other, then the team which receives more points from the games between the two teams ranks higher.\nFOL: all x. all y. (LaLigaSoccerTeam(x) & LaLigaSoccerTeam(y) & -MorePoints(x, y) & -MorePoints(y, x) & MorePointsInGameBetween(x, y) ->  RankHigherThan(x, y))\nTEXT: Real Madrid and Barcelona are both La Liga soccer teams.\nFOL: LaLigaSoccerTeam(RealMadrid) & LaLigaSoccerTeam(Barcelona)\nTEXT: Real Madrid received more points than Barcelona.\nFOL: MorePoints(RealMadrid, Barcelona)\nTEXT: Neither Real Madrid nor Barcelona received more points from the games between them.\nFOL: -MorePointsInGameBetween(RealMadrid, Barcelona) & -MorePointsInGameBetween(Barcelona, RealMadrid)\nTEXT: Real Madrid ranks higher than Barcelona.\nFOL: HigherRank(RealMadrid, Barcelona)\n\nANSWER: True\n</EVALUATE>\n\n<PREMISES>\nAll professional athletes spend most of their time on sports.\nAll Olympic gold medal winners are professional athletes.\nNo full-time scientists spend the majority of their time on sports.\nAll Nobel physics laureates are full-time scientists.\nAmy spends the most time on sports, or Amy is an Olympic gold medal winner.\nIf Amy is not a Nobel physics laureate, then Amy is not an Olympic gold medal winner.\n</PREMISES>\n<CONCLUSION>\nIf Amy is not an Olympic gold medal winner, then Amy is a Nobel physics laureate.\n</CONCLUSION>\n<EVALUATE>\nTEXT: All professional athletes spend most of their time on sports.\nFOL: all x. (ProfessionalAthlete(x) -> SpendOn(x, MostOfTheirTime, Sports))\nTEXT: All Olympic gold medal winners are professional athletes.\nFOL: all x. (OlympicGoldMedalWinner(x) -> ProfessionalAthlete(x))\nTEXT: No full-time scientists spend the majority of their time on sports.\nFOL: all x. (FullTimeScientist(x) -> -SpendOn(x, MostOfTheirTime, Sports))\nTEXT: All Nobel physics laureates are full-time scientists.\nFOL: all x. (NobelPhysicsLaureate(x) -> FullTimeScientist(x))\nTEXT: Amy spends the most time on sports, or Amy is an Olympic gold medal winner.\nFOL: SpendOn(Amy, MostOfTheirTime, Sports) | OlympicGoldMedalWinner(Amy)\nTEXT: If Amy is not a Nobel physics laureate, then Amy is not an Olympic gold medal winner.\nFOL: -NobelPhysicsLaureate(Amy) -> -OlympicGoldMedalWinner(Amy)\nTEXT: If Amy is not an Olympic gold medal winner, then Amy is a Nobel physics laureate.\nFOL: -OlympicGoldMedalWinner(Amy) -> NobelLaureate(Amy)\n\nANSWER: False\n</EVALUATE>\n\n<PREMISES>\nIf a person pays their taxes, then they contribute to the country.\nEveryone who works for a government department pays a tax on their salary.\nEveryone in the army is an employee of a government department.\nEveryone convicted of murder goes to prison.\nEveryone who has been to prison has a criminal record.\nJames was either once convicted of murder, or spent time in prison.\nJames either has a criminal record, or pays his taxes.\n</PREMISES>\n<CONCLUSION>\nJames does not contribute to the country.\n</CONCLUSION>\n<EVALUATE>\nTEXT: If a person pays their taxes, then they contribute to the country.\nFOL: all x. (Taxpayer(x) -> ContributeTo(x, Country))\nTEXT: Everyone who works for a government department pays a tax on their salary.\nFOL: all x. (WorkFor(x, GovernmentAgency) -> Taxpayer(x))\nTEXT: Everyone in the army is an employee of a government department.\nFOL: all x. (ServesIn(x, TheArmy) -> WorkFor(x, GovernmentAgency))\nTEXT: Everyone convicted of murder goes to prison.\nFOL: all x. (SentencedForMurder(x) -> Imprisoned(x))\nTEXT: Everyone who has been to prison has a criminal record.\nFOL: all x. (Imprisoned((x) -> Has(x, CriminalRecord))\nTEXT: James was either once convicted of murder, or spent time in prison.\nFOL: ((SentencedForMurder(James) & -Imprisoned(James)) | (-SentencedForMurder(James) & Imprisoned(James)))\nTEXT: James either has a criminal record, or pays his taxes.\nFOL: ((Has(James, CriminalRecord) & -Taxpayer(James)) | (-Has(James, CriminalRecord) & Taxpayer(James)))\nTEXT: James does not contribute to the country.\nFOL: ContributeToCountry(James)\n\nANSWER: Uncertain\n</EVALUATE>\n\n<PREMISES>\nNo songs are visuals.\nAll folk songs are songs.\nAll videos are visuals.\nAll movies are videos.\nAll sci-fi movies are movies.\nInception is a sci-fi movie.\nMac is neither a folk song nor a sci-fi movie.\n</PREMISES>\n<CONCLUSION>\nInception is a folk song.\n</CONCLUSION>\n<EVALUATE>\nTEXT: No songs are visuals.\nFOL: all x. (Song(x) -> -Visual(x))\nTEXT: All folk songs are songs.\nFOL: all x. (FolkSong(x) -> Song(x))\nTEXT: All videos are visuals.\nFOL: all x. (Video(x) -> Visual(x))\nTEXT: All movies are videos.\nFOL: all x. (Movie(x) -> Video(x))\nTEXT: All sci-fi movies are movies.\nFOL: all x. (ScifiMovie(x) -> Movie(x))\nTEXT: Inception is a sci-fi movie.\nFOL: ScifiMovie(Inception)\nTEXT: Mac is neither a folk song nor a sci-fi movie.\nFOL: -FolkSong(Mac) & -ScifiMovie(Mac)\nTEXT: Inception is a folk song.\nFOL: FolkSong(Inception)\n\nANSWER: False\n</EVALUATE>\n\n<PREMISES>\nEvery chef can cook.\nSome people who aren’t chefs can cook.\nPeople who cook can make scrambled eggs and pasta.\nIf someone can make cookies and muffins, they are a baker.\nBakers who can also make scrambled eggs can make a good breakfast.\nLuke can make cookies, scrambled eggs, and muffins, but not pasta.\n</PREMISES>\n<CONCLUSION>\nLuke is a chef.\n</CONCLUSION>\n<EVALUATE>\nTEXT: Every chef can cook.\nFOL: all x. (Chef(x) -> Can(x, Cook))\nTEXT: Some people who aren’t chefs can cook.\nFOL: exists x. (-Chef(x) & Can(x, Cook))\nTEXT: People who cook can make scrambled eggs and pasta.\nFOL: all x. (Can(x, Cook) -> (CanMake(x, ScrambledEggs) & CanMake(x, Pasta)))\nTEXT: If someone can make cookies and muffins, they are a baker.\nFOL: all x. (CanMake(x, Cookies) & CanMake(x, Muffins) -> Baker(x))\nTEXT: Bakers who can also make scrambled eggs can make a good breakfast.\nFOL: all x. ((Baker(x) & CanMake(x, ScrambledEggs)) -> CanMake(x, GoodBreakfast))\nTEXT: Luke can make cookies, scrambled eggs, and muffins, but not pasta.\nFOL: CanMake(Luke, Cookies) & (CanMake(Luke, ScrambledEggs) & CanMake(Luke, Muffins) & -CanMake(Luke, Pasta)\nTEXT: Luke is a chef.\nFOL: MakeGoodBreakfast(Luke)\n\nANSWER: False\n</EVALUATE>\n\n<PREMISES>\nETS develops various standardized tests primarily in the United States for K-12 and higher education.\nETS administers international tests, including the TOEFL, TOEIC, GRE, and subject tests.\nMany of the assessments ETS develops are associated with entry to the US tertiary and quaternary education institutions.\nETS also develops K-12 statewide assessments used for accountability testing in many states.\n</PREMISES>\n<CONCLUSION>\nETS doesn't administer tests internationally.\n</CONCLUSION>\n<EVALUATE>\nTEXT: ETS develops various standardized tests primarily in the United States for K-12 and higher education.\nFOL: exists x. exists y. (Develop(eTS, x) & Develop(eTS, y) & StandardizedTest(x) & StandardizedTest(y) & In(x, UnitedState) & In(y, UnitedState) & For(x, kOneTwoAndHigherEducation) & For(y, kOneTwoAndHigherEducation))\nTEXT: ETS administers international tests, including the TOEFL, TOEIC, GRE, and subject tests.\nFOL: exists x. (Administer(eTS, x) & InternationalTest(x) & (TOEFL(x) | TOEIC(x) | GRE(x) | SubjectTest(x)))\nTEXT: Many of the assessments ETS develops are associated with entry to the US tertiary and quaternary education institutions.\nFOL: exists x. (Develop(eTS, x) & AssociatedWith(x, EntryToUSEducationInstitution))\nTEXT: ETS also develops K-12 statewide assessments used for accountability testing in many states.\nFOL: exists x. (Develop(eTS, x) & StateWideAssesment(x) & UsedFor(x, AccountabilityTesting))\nTEXT: ETS doesn't administer tests internationally.\nFOL: exists x. (Develops(Ets, x) & For(x, k-OneTwoandhighereducation)) & exists x. (Develops(Ets, x) & AssociatedWith(x, Entrytouseducationinstitutions))\n\nANSWER: False\n</EVALUATE>\n\n<PREMISES>\nDaveed Diggs is an actor and film producer.\nDaveed Diggs played two roles in the musical Hamilton on Broadway.\nOne of the actors from Hamilton won the best actor award.\nThe actor playing Thomas Jefferson won the best actor award.\nDaveed Diggs played Thomas Jefferson.\nMusicals on Broadway are not films.\n</PREMISES>\n<CONCLUSION>\nDaveed Diggs won the best actor award.\n</CONCLUSION>\n<EVALUATE>\nTEXT: Daveed Diggs is an actor and film producer.\nFOL: Actor(DaveedDiggs) & FilmProducer(DaveedDiggs)\nTEXT: Daveed Diggs played two roles in the musical Hamilton on Broadway.\nFOL: exists x. exists y.(PlaysIn(DaveedDiggs, x, Hamilton) & (-(x=y)) & PlaysIn(DaveedDiggs, y, Hamilton)) & OnBroadway(Hamilton) & Musical(Hamilton)\nTEXT: One of the actors from Hamilton won the best actor award.\nFOL: exists x. exists y.(Actor(x) & PlaysIn(x, y, Hamilton) & Wins(x, BestActorAward))\nTEXT: The actor playing Thomas Jefferson won the best actor award.\nFOL: exists x. (Actor(x) & PlaysIn(x, ThomasJefferson, Hamilton) & Wins(x, BestActorAward))\nTEXT: Daveed Diggs played Thomas Jefferson.\nFOL: Plays(DaveedDiggs, ThomasJefferson)\nTEXT: Musicals on Broadway are not films.\nFOL: all x. ((Musical(x) & OnBroadway(x)) -> -Film(x))\nTEXT: Daveed Diggs won the best actor award.\nFOL: exists x. (BRICS(x) & Speaks(x, Hindi))\n\nANSWER: True\n</EVALUATE>\n\n<PREMISES>\nIf something can transport multiple passengers, then they are not one-seaters.\nAll corgis can transport multiple passengers.\nAll single-seat electric cars are one-seaters.\nAll Solo EV cars are single-seat electric cars.\nIf the Queen's dogs are not corgis, then the Queen's dogs are not corgis or a single-seat electric car.\n</PREMISES>\n<CONCLUSION>\nThe Queen's dogs are corgis.\n</CONCLUSION>\n<EVALUATE>", "raw_generations": ["Generation 1:\nTEXT: If something can transport multiple passengers, then they are not one-seaters.\nFOL: all x. (CanTransportMultiplePassengers(x) -> -OneSeater(x))\nTEXT: All corgis can transport multiple passengers.\nFOL: all x. (Corgi(x) -> CanTransportMultiplePassengers(x))\nTEXT: All single-seat electric cars are one-seaters.\nFOL: all x. (SingleSeatElectricCar(x) -> OneSeater(x))\nTEXT: All Solo EV cars are single-seat electric cars.\nFOL: all x. (SoloEVCar(x) -> SingleSeatElectricCar(x))\nTEXT: If the Queen's dogs are not corgis, then the Queen's dogs are not corgis or a single-seat electric car.\nFOL: -(QueensDogs(QueensDogs) & Corgi(QueensDogs)) -> (-Corgi(QueensDogs) & -SingleSeatElectricCar(QueensDogs))\nTEXT: The Queen's dogs are corgis.\nFOL: Corgi(QueensDogs)\n\nANSWER: False\nProcessed: False", "Generation 2:\nTEXT: If something can transport multiple passengers, then they are not one-seaters.\nFOL: all x. (CanTransportMultiplePassengers(x) -> -OneSeater(x))\nTEXT: All corgis can transport multiple passengers.\nFOL: all x. (Corgi(x) -> CanTransportMultiplePassengers(x))\nTEXT: All single-seat electric cars are one-seaters.\nFOL: all x. (SingleSeatElectricCar(x) -> OneSeater(x))\nTEXT: All Solo EV cars are single-seat electric cars.\nFOL: all x. (SoloEVCar(x) -> SingleSeatElectricCar(x))\nTEXT: If the Queen's dogs are not corgis, then the Queen's dogs are not corgis or a single-seat electric car.\nFOL: -Corgi(QueensDogs) -> (-Corgi(QueensDogs) & -SingleSeatElectricCar(QueensDogs))\nTEXT: The Queen's dogs are corgis.\nFOL: Corgi(QueensDogs)\n\nANSWER: False\nProcessed: False", "Generation 3:\nTEXT: If something can transport multiple passengers, then they are not one-seaters.\nFOL: all x. (CanTransportMultiplePassengers(x) -> -OneSeater(x))\nTEXT: All corgis can transport multiple passengers.\nFOL: all x. (Corgi(x) -> CanTransportMultiplePassengers(x))\nTEXT: All single-seat electric cars are one-seaters.\nFOL: all x. (SingleSeatElectricCar(x) -> OneSeater(x))\nTEXT: All Solo EV cars are single-seat electric cars.\nFOL: all x. (SoloEVCar(x) -> SingleSeatElectricCar(x))\nTEXT: If the Queen's dogs are not corgis, then the Queen's dogs are not corgis or a single-seat electric car.\nFOL: -(QueensDogs(x) & Corgi(x)) -> (-Corgi(x) & -SingleSeatElectricCar(x))\nTEXT: The Queen's dogs are corgis.\nFOL: Corgi(QueensDogs)\n\nANSWER: False\n\nIn this case, the conclusion is false because the premises do not imply that the Queen's dogs are corgis. If the Queen's dogs are not corgis, then they could potentially be single-seat electric cars. However, the premises do not provide any information about what the Queen's dogs are if they are not corgis.\nProcessed: False", "Generation 4:\nTEXT: If something can transport multiple passengers, then they are not one-seaters.\nFOL: all x. (CanTransportMultiplePassengers(x) -> -OneSeater(x))\nTEXT: All corgis can transport multiple passengers.\nFOL: all x. (Corgi(x) -> CanTransportMultiplePassengers(x))\nTEXT: All single-seat electric cars are one-seaters.\nFOL: all x. (SingleSeatElectricCar(x) -> OneSeater(x))\nTEXT: All Solo EV cars are single-seat electric cars.\nFOL: all x. (SoloEVCar(x) -> SingleSeatElectricCar(x))\nTEXT: If the Queen's dogs are not corgis, then the Queen's dogs are not corgis or a single-seat electric car.\nFOL: -Corgi(TheQueensDogs) -> (-Corgi(TheQueensDogs) & -SingleSeatElectricCar(TheQueensDogs))\nTEXT: The Queen's dogs are corgis.\nFOL: Corgi(TheQueensDogs)\n\nANSWER: False\n\nIn the given premises, it is stated that \"all corgis can transport multiple passengers,\" which contradicts the fact that corgis are typically small dogs and do not have the ability to transport multiple passengers. Therefore, the conclusion that \"The Queen's dogs are corgis\" is false.\nProcessed: False", "Generation 5:\nTEXT: If something can transport multiple passengers, then they are not one-seaters.\nFOL: all x. (CanTransportMultiplePassengers(x) -> -OneSeater(x))\nTEXT: All corgis can transport multiple passengers.\nFOL: all x. (Corgi(x) -> CanTransportMultiplePassengers(x))\nTEXT: All single-seat electric cars are one-seaters.\nFOL: all x. (SingleSeatElectricCar(x) -> OneSeater(x))\nTEXT: All Solo EV cars are single-seat electric cars.\nFOL: all x. (SoloEV(x) -> SingleSeatElectricCar(x))\nTEXT: If the Queen's dogs are not corgis, then the Queen's dogs are not corgis or a single-seat electric car.\nFOL: -(Corgi(QueensDogs) -> (Corgi(QueensDogs) | (SingleSeatElectricCar(QueensDogs))))\nTEXT: The Queen's dogs are corgis.\nFOL: Corgi(QueensDogs)\n\nANSWER: False\nProcessed: False", "Generation 6:\nTEXT: If something can transport multiple passengers, then they are not one-seaters.\nFOL: all x. (CanTransportMultiplePassengers(x) -> -OneSeater(x))\n\nTEXT: All corgis can transport multiple passengers.\nFOL: all x. (Corgi(x) -> CanTransportMultiplePassengers(x))\n\nTEXT: All single-seat electric cars are one-seaters.\nFOL: all x. (SingleSeatElectricCar(x) -> OneSeater(x))\n\nTEXT: All Solo EV cars are single-seat electric cars.\nFOL: all x. (SoloEV(x) -> SingleSeatElectricCar(x))\n\nTEXT: If the Queen's dogs are not corgis, then the Queen's dogs are not corgis or a single-seat electric car.\nFOL: -Corgi(QueensDogs) -> (-Corgi(QueensDogs) & -SingleSeatElectricCar(QueensDogs))\n\nTEXT: The Queen's dogs are corgis.\nFOL: Corgi(QueensDogs)\n\nANSWER: False\nProcessed: False", "Generation 7:\nTEXT: If something can transport multiple passengers, then they are not one-seaters.\nFOL: all x. (CanTransportMultiplePassengers(x) -> -OneSeater(x))\n\nTEXT: All corgis can transport multiple passengers.\nFOL: all x. (Corgi(x) -> CanTransportMultiplePassengers(x))\n\nTEXT: All single-seat electric cars are one-seaters.\nFOL: all x. (SingleSeatElectricCar(x) -> OneSeater(x))\n\nTEXT: All Solo EV cars are single-seat electric cars.\nFOL: all x. (SoloEV(x) -> SingleSeatElectricCar(x))\n\nTEXT: If the Queen's dogs are not corgis, then the Queen's dogs are not corgis or a single-seat electric car.\nFOL: -(exists x. (QueensDogs(x) & Corgi(x))) -> -(exists x. (QueensDogs(x) & Corgi(x))) | -(exists x. (QueensDogs(x) & SingleSeatElectricCar(x)))\n\nTEXT: The Queen's dogs are corgis.\nFOL: Corgi(QueensDogs)\n\nANSWER: False\nProcessed: False", "Generation 8:\nTEXT: If something can transport multiple passengers, then they are not one-seaters.\nFOL: all x. (CanTransportMultiplePassengers(x) -> -OneSeater(x))\nTEXT: All corgis can transport multiple passengers.\nFOL: all x. (Corgi(x) -> CanTransportMultiplePassengers(x))\nTEXT: All single-seat electric cars are one-seaters.\nFOL: all x. (SingleSeatElectricCar(x) -> OneSeater(x))\nTEXT: All Solo EV cars are single-seat electric cars.\nFOL: all x. (SoloEVCar(x) -> SingleSeatElectricCar(x))\nTEXT: If the Queen's dogs are not corgis, then the Queen's dogs are not corgis or a single-seat electric car.\nFOL: -Corgi(TheQueensDogs) -> -(Corgi(TheQueensDogs) & -OneSeater(TheQueensDogs))\nTEXT: The Queen's dogs are corgis.\nFOL: Corgi(TheQueensDogs)\n\nANSWER: False (The premises do not allow us to conclude that the Queen's dogs are corgis.)\nProcessed: False", "Generation 9:\nTEXT: If something can transport multiple passengers, then they are not one-seaters.\nFOL: all x. (CanTransport(x, MultiplePassengers) -> -OneSeater(x))\n\nTEXT: All corgis can transport multiple passengers.\nFOL: all x. (Corgi(x) -> CanTransport(x, MultiplePassengers))\n\nTEXT: All single-seat electric cars are one-seaters.\nFOL: all x. (SingleSeatElectricCar(x) -> OneSeater(x))\n\nTEXT: All Solo EV cars are single-seat electric cars.\nFOL: all x. (SoloEV(x) -> SingleSeatElectricCar(x))\n\nTEXT: If the Queen's dogs are not corgis, then the Queen's dogs are not corgis or a single-seat electric car.\nFOL: -(Corgi(TheQueensDogs) -> -Corgi(TheQueensDogs) & -SingleSeatElectricCar(TheQueensDogs))\n\nTEXT: The Queen's dogs are corgis.\nFOL: Corgi(TheQueensDogs)\n\nANSWER: True\nProcessed: True", "Generation 10:\nTEXT: If something can transport multiple passengers, then they are not one-seaters.\nFOL: all x. (CanTransport(x, MultiplePassengers) -> -OneSeater(x))\nTEXT: All corgis can transport multiple passengers.\nFOL: all x. (Corgi(x) -> CanTransport(x, MultiplePassengers))\nTEXT: All single-seat electric cars are one-seaters.\nFOL: all x. (OneSeater(x) -> SingleSeatElectricCar(x))\nTEXT: All Solo EV cars are single-seat electric cars.\nFOL: all x. (SingleSeatElectricCar(x) -> SoloEVCar(x))\nTEXT: If the Queen's dogs are not corgis, then the Queen's dogs are not corgis or a single-seat electric car.\nFOL: -Corgi(QueensDogs) -> ((-Corgi(QueensDogs) & -SingleSeatElectricCar(QueensDogs)) | (-SingleSeatElectricCar(QueensDogs)))\nTEXT: The Queen's dogs are corgis.\nFOL: Corgi(QueensDogs)\n\nANSWER: False\nProcessed: False\n\nReference: Uncertain\n========================================"], "answers": ["False", "False", "False", "False", "False", "False", "False", "False", "True", "False"]}
