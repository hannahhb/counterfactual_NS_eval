{"timestamp": "2025-05-02T01:31:40.990826", "premises": ["all x. (Biodegradable(x) -> EnvironmentFriendly(x))", "all x. (Woodware(x) -> Biodegradable(x))", "all x. (Paper(x) -> Woodware(x))", "-(exists x. (Good(x) & Bad(x)))", "all x. (EnvironmentFriendly(x) -> Good(x))", "((Paper(Worksheet) & -EnvironmentFriendly(Worksheet)) | (-Paper(Worksheet) & EnvironmentFriendly(Worksheet)))", "-Biodegradable(Worksheet)", "all x. all y. (LaLigaSoccerTeam(x) & LaLigaSoccerTeam(y) & MorePoints(x, y) -> RankHigherThan(x, y))", "all x. all y. (LaLigaSoccerTeam(x) & LaLigaSoccerTeam(y) & -MorePoints(x, y) & -MorePoints(y, x) & MorePointsInGameBetween(x, y) ->  RankHigherThan(x, y))", "LaLigaSoccerTeam(RealMadrid) & LaLigaSoccerTeam(Barcelona)", "MorePoints(RealMadrid, Barcelona)", "-MorePointsInGameBetween(RealMadrid, Barcelona) & -MorePointsInGameBetween(Barcelona, RealMadrid)", "RankHigherThan(RealMadrid, Barcelona)", "all x. (ProfessionalAthlete(x) -> SpendOn(x, MostOfTheirTime, Sports))", "all x. (OlympicGoldMedalWinner(x) -> ProfessionalAthlete(x))", "all x. (FullTimeScientist(x) -> -SpendOn(x, MostOfTheirTime, Sports))", "all x. (NobelPhysicsLaureate(x) -> FullTimeScientist(x))", "(SpendOn(Amy, MostOfTheirTime, Sports) | OlympicGoldMedalWinner(Amy))", "-NobelPhysicsLaureate(Amy) -> -OlympicGoldMedalWinner(Amy)", "-OlympicGoldMedalWinner(Amy) -> NobelPhysicsLaureate(Amy)", "all x. (Taxpayer(x) -> ContributeTo(x, Country))", "all x. (WorkFor(x, GovernmentAgency) -> Taxpayer(x))", "all x. (ServesIn(x, TheArmy) -> WorkFor(x, GovernmentAgency))", "all x. (SentencedForMurder(x) -> Imprisoned(x))", "all x. (Imprisoned(x) -> Has(x, CriminalRecord))", "(SentencedForMurder(James) & -Imprisoned(James)) | (-SentencedForMurder(James) & Imprisoned(James))", "(Has(James, CriminalRecord) & -Taxpayer(James)) | (-Has(James, CriminalRecord) & Taxpayer(James))", "-ContributeTo(James, Country)", "all x. (Song(x) -> -Visual(x))", "all x. (FolkSong(x) -> Song(x))", "all x. (Video(x) -> Visual(x))", "all x. (Movie(x) -> Video(x))", "all x. (ScifiMovie(x) -> Movie(x))", "ScifiMovie(Inception)", "-FolkSong(Mac) & -ScifiMovie(Mac)", "FolkSong(Inception)", "all x. (Chef(x) -> Can(x, Cook))", "exists x. (-Chef(x) & Can(x, Cook))", "all x. (Can(x, Cook) -> (CanMake(x, ScrambledEggs) & CanMake(x, Pasta)))", "all x. (CanMake(x, Cookies) & CanMake(x, Muffins) -> Baker(x))", "all x. ((Baker(x) & CanMake(x, ScrambledEggs)) -> CanMake(x, GoodBreakfast))", "CanMake(Luke, Cookies) & (CanMake(Luke, ScrambledEggs) & CanMake(Luke, Muffins) & -CanMake(Luke, Pasta))", "Chef(Luke)", "exists x. exists y. (Develop(ETS, x) & Develop(ETS, y) & StandardizedTest(x) & StandardizedTest(y) & In(x, UnitedState) & In(y, UnitedState) & For(x, kOneTwoAndHigherEducation) & For(y, kOneTwoAndHigherEducation))", "exists x. (Administer(ETS, x) & InternationalTest(x) & (TOEFL(x) | TOEIC(x) | GRE(x) | SubjectTest(x)))", "exists x. (Develop(ETS, x) & AssociatedWith(x, EntryToUSEducationInstitution))", "exists x. (Develop(ETS, x) & StateWideAssesment(x) & UsedFor(x, AccountabilityTesting))", "-Administer(ETS, InternationalTest)", "Actor(DaveedDiggs) & FilmProducer(DaveedDiggs)", "exists x. exists y. (PlaysIn(DaveedDiggs, x, Hamilton) & (-(x=y)) & PlaysIn(DaveedDiggs, y, Hamilton)) & OnBroadway(Hamilton) & Musical(Hamilton)", "exists x. exists y. (Actor(x) & PlaysIn(x, y, Hamilton) & Wins(x, BestActorAward))", "exists x. (Actor(x) & PlaysIn(x, ThomasJefferson, Hamilton) & Wins(x, BestActorAward))", "Plays(DaveedDiggs, ThomasJefferson)", "all x. ((Musical(x) & OnBroadway(x)) -> -Film(x))", "Wins(DaveedDiggs, BestActorAward)", "CzechChoralConductor(MiroslavVenhoda) & Specialized(MiroslavVenhoda, RenaissanceMusic) & Specialized(MiroslavVenhoda, BaroqueMusic)", "all x. (ChoralConductor(x) -> Musician(x))", "exists x. (Musician(x) & Love(x, Music))", "Published(MiroslavVenhoda, Book, OneNineFourSix, MethodOfStudyingGregorianChant)"], "conclusion": "-exists x. (ChoralConductor(x) & Specialized(x, RenaissanceMusic))", "error_type": "<class 'nltk.inference.prover9.Prover9FatalException'>", "error_message": "(FATAL)\n%%ERROR: The following symbols are used with multiple arities: InternationalTest/1, InternationalTest/0.\n\n\nFatal error:  The following symbols are used with multiple arities: InternationalTest/1, InternationalTest/0", "stack_trace": "Traceback (most recent call last):\n  File \"/data/gpfs/projects/punim0478/bansaab/linc2/eval/tasks/utils.py\", line 124, in evaluate\n    truth_value = prover.prove(c, p_list)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/inference/api.py\", line 37, in prove\n    return self._prove(goal, assumptions, verbose)[0]\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/inference/prover9.py\", line 327, in _prove\n    stdout, returncode = self._call_prover9(\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/inference/prover9.py\", line 370, in _call_prover9\n    raise Prover9FatalException(returncode, errormsg)\nnltk.inference.prover9.Prover9FatalException: (FATAL)\n%%ERROR: The following symbols are used with multiple arities: InternationalTest/1, InternationalTest/0.\n\n\nFatal error:  The following symbols are used with multiple arities: InternationalTest/1, InternationalTest/0\n"}
{"timestamp": "2025-05-02T01:33:20.868704", "premises": ["all x. (Biodegradable(x) -> EnvironmentFriendly(x))", "all x. (Woodware(x) -> Biodegradable(x))", "all x. (Paper(x) -> Woodware(x))", "-(exists x. (Good(x) & Bad(x)))", "all x. (EnvironmentFriendly(x) -> Good(x))", "((Paper(Worksheet) & -EnvironmentFriendly(Worksheet)) | (-Paper(Worksheet) & EnvironmentFriendly(Worksheet)))", "-Biodegradable(Worksheet)", "all x. all y. (LaLigaSoccerTeam(x) & LaLigaSoccerTeam(y) & MorePoints(x, y) -> RankHigherThan(x, y))", "all x. all y. (LaLigaSoccerTeam(x) & LaLigaSoccerTeam(y) & -MorePoints(x, y) & -MorePoints(y, x) & MorePointsInGameBetween(x, y) ->  RankHigherThan(x, y))", "LaLigaSoccerTeam(RealMadrid) & LaLigaSoccerTeam(Barcelona)", "MorePoints(RealMadrid, Barcelona)", "-MorePointsInGameBetween(RealMadrid, Barcelona) & -MorePointsInGameBetween(Barcelona, RealMadrid)", "RankHigherThan(RealMadrid, Barcelona)", "all x. (ProfessionalAthlete(x) -> SpendOn(x, MostOfTheirTime, Sports))", "all x. (OlympicGoldMedalWinner(x) -> ProfessionalAthlete(x))", "all x. (FullTimeScientist(x) -> -SpendOn(x, MostOfTheirTime, Sports))", "all x. (NobelPhysicsLaureate(x) -> FullTimeScientist(x))", "SpendOn(Amy, MostOfTheirTime, Sports) | OlympicGoldMedalWinner(Amy)", "-NobelPhysicsLaureate(Amy) -> -OlympicGoldMedalWinner(Amy)", "-OlympicGoldMedalWinner(Amy) -> NobelPhysicsLaureate(Amy)", "all x. (Taxpayer(x) -> ContributeTo(x, Country))", "all x. (WorkFor(x, GovernmentAgency) -> Taxpayer(x))", "all x. (ServesIn(x, TheArmy) -> WorkFor(x, GovernmentAgency))", "all x. (SentencedForMurder(x) -> Imprisoned(x))", "all x. (Imprisoned(x) -> Has(x, CriminalRecord))", "((SentencedForMurder(James) & -Imprisoned(James)) | (-SentencedForMurder(James) & Imprisoned(James)))", "((Has(James, CriminalRecord) & -Taxpayer(James)) | (-Has(James, CriminalRecord) & Taxpayer(James)))", "-ContributeTo(James, Country)", "all x. (Song(x) -> -Visual(x))", "all x. (FolkSong(x) -> Song(x))", "all x. (Video(x) -> Visual(x))", "all x. (Movie(x) -> Video(x))", "all x. (ScifiMovie(x) -> Movie(x))", "ScifiMovie(Inception)", "-FolkSong(Mac) & -ScifiMovie(Mac)", "FolkSong(Inception)", "all x. (Chef(x) -> Can(x, Cook))", "exists x. (-Chef(x) & Can(x, Cook))", "all x. (Can(x, Cook) -> (CanMake(x, ScrambledEggs) & CanMake(x, Pasta)))", "all x. (CanMake(x, Cookies) & CanMake(x, Muffins) -> Baker(x))", "all x. ((Baker(x) & CanMake(x, ScrambledEggs)) -> CanMake(x, GoodBreakfast))", "CanMake(Luke, Cookies) & (CanMake(Luke, ScrambledEggs) & CanMake(Luke, Muffins) & -CanMake(Luke, Pasta))", "Chef(Luke)", "exists x. exists y. (Develop(ETS, x) & Develop(ETS, y) & StandardizedTest(x) & StandardizedTest(y) & In(x, UnitedState) & In(y, UnitedState) & For(x, kOneTwoAndHigherEducation) & For(y, kOneTwoAndHigherEducation))", "exists x. (Administer(ETS, x) & InternationalTest(x) & (TOEFL(x) | TOEIC(x) | GRE(x) | SubjectTest(x)))", "exists x. (Develop(ETS, x) & AssociatedWith(x, EntryToUSEducationInstitution))", "exists x. (Develop(ETS, x) & StateWideAssesment(x) & UsedFor(x, AccountabilityTesting))", "-(exists x. (Administer(ETS, x) & InternationalTest(x)))", "Actor(DaveedDiggs) & FilmProducer(DaveedDiggs)", "exists x. exists y.(PlaysIn(DaveedDiggs, x, Hamilton) & (-(x=y)) & PlaysIn(DaveedDiggs, y, Hamilton)) & OnBroadway(Hamilton) & Musical(Hamilton)", "exists x. exists y.(Actor(x) & PlaysIn(x, y, Hamilton) & Wins(x, BestActorAward))", "exists x. (Actor(x) & PlaysIn(x, ThomasJefferson, Hamilton) & Wins(x, BestActorAward))", "Plays(DaveedDiggs, ThomasJefferson)", "all x. ((Musical(x) & OnBroadway(x)) -> -Film(x))", "Wins(DaveedDiggs, BestActorAward)", "Czech(ChoralConductor(MiroslavVenhoda)) & (Specialized(MiroslavVenhoda, Renaissance) | Specialized(MiroslavVenhoda, Baroque))", "all x. (ChoralConductor(x) -> Musician(x))", "exists x. (Musician(x) & Loves(x, Music))", "Published(MiroslavVenhoda, OneNineFourSix, MethodOfStudyingGregorianChant)", "-(exists x. (ChoralConductor(x) & Specialized(x, Renaissance)))"], "conclusion": "-(exists x. (ChoralConductor(x) & Specialized(x, RenaissanceAndBaroque)))", "error_type": "<class 'nltk.inference.prover9.Prover9FatalException'>", "error_message": "(FATAL)\n%%ERROR: The following symbols/arities are used as both relation and function symbols: ChoralConductor/1.\n\n\nFatal error:  The following symbols/arities are used as both relation and function symbols: ChoralConductor/1", "stack_trace": "Traceback (most recent call last):\n  File \"/data/gpfs/projects/punim0478/bansaab/linc2/eval/tasks/utils.py\", line 124, in evaluate\n    truth_value = prover.prove(c, p_list)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/inference/api.py\", line 37, in prove\n    return self._prove(goal, assumptions, verbose)[0]\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/inference/prover9.py\", line 327, in _prove\n    stdout, returncode = self._call_prover9(\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/inference/prover9.py\", line 370, in _call_prover9\n    raise Prover9FatalException(returncode, errormsg)\nnltk.inference.prover9.Prover9FatalException: (FATAL)\n%%ERROR: The following symbols/arities are used as both relation and function symbols: ChoralConductor/1.\n\n\nFatal error:  The following symbols/arities are used as both relation and function symbols: ChoralConductor/1\n"}
