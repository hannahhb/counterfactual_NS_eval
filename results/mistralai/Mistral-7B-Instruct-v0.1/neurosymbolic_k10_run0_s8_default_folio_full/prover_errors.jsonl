{"timestamp": "2025-09-16T17:12:19.518996", "premises": ["all x. all y. (PerformInTalentShow(x, y) -> Attend(x, y) & EngagedWithSchoolEvents(x, y))", "all x. (PerformInTalentShow(x) | InactiveAndDisinterested(x))", "all x. (ChaperoneHighSchoolDances(x) -> NotStudentWhoAttendsSchool(x))", "all x. (InactiveAndDisinterested(x) -> ChaperoneHighSchoolDances(x))", "all x. (YoungChildOrTeenager(x) & WishToFurtherCareerAndEducation(x) -> StudentWhoAttendsSchool(x))"], "conclusion": "(Attend(Bonnie, school) & EngagedWithSchoolEvents(Bonnie, school)) | (NotAttend(Bonnie, school) & NotEngagedWithSchoolEvents(Bonnie, school)) & (NotStudent(Bonnie) | NotYoungChild(Bonnie) | NotTeenager(Bonnie))", "error_type": "<class 'nltk.inference.prover9.Prover9FatalException'>", "error_message": "(FATAL)\n%%ERROR: The following symbols are used with multiple arities: PerformInTalentShow/1, PerformInTalentShow/2.\n\n\nFatal error:  The following symbols are used with multiple arities: PerformInTalentShow/1, PerformInTalentShow/2", "stack_trace": "Traceback (most recent call last):\n  File \"/data/gpfs/projects/punim0478/bansaab/linc2/eval/tasks/owafoltask.py\", line 577, in _process_neurosymbolic\n    parsed = json.loads(gen)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/json/__init__.py\", line 346, in loads\n    return _default_decoder.decode(s)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/json/decoder.py\", line 337, in decode\n    obj, end = self.raw_decode(s, idx=_w(s, 0).end())\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/json/decoder.py\", line 355, in raw_decode\n    raise JSONDecodeError(\"Expecting value\", s, err.value) from None\njson.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"/data/gpfs/projects/punim0478/bansaab/linc2/eval/tasks/utils.py\", line 219, in evaluate\n    truth_value = prover.prove(c, p_list)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/inference/api.py\", line 37, in prove\n    return self._prove(goal, assumptions, verbose)[0]\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/inference/prover9.py\", line 327, in _prove\n    stdout, returncode = self._call_prover9(\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/inference/prover9.py\", line 370, in _call_prover9\n    raise Prover9FatalException(returncode, errormsg)\nnltk.inference.prover9.Prover9FatalException: (FATAL)\n%%ERROR: The following symbols are used with multiple arities: PerformInTalentShow/1, PerformInTalentShow/2.\n\n\nFatal error:  The following symbols are used with multiple arities: PerformInTalentShow/1, PerformInTalentShow/2\n"}
{"timestamp": "2025-09-16T17:12:19.521880", "premises": ["all x. all y. (PerformInTalentShowsOften(x, y) -> AttendAndEngagedWithSchoolEvents(x, y))", "all x. all y. (PerformInTalentShowsOften(x, y) -> NotActiveAndDisinterested(x, y) | NotPerformInTalentShowsOften(x, y))", "all x. all y. (ChaperoneHighSchoolDances(x) -> NotStudentWhoAttendsSchool(x, y))", "all x. (NotActiveAndDisinterested(x) -> ChaperoneHighSchoolDances(x))", "all x. (YoungChildrenAndTeenagers(x) -> WishToFurtherAcademicCareersAndEducationalOpportunities(x) & StudentsWhoAttendSchool(x))"], "conclusion": "all x. (Bonnie(x) -> (AttendAndEngagedWithSchoolEvents(x) & StudentsWhoAttendSchool(x)) | (NotAttendAndEngagedWithSchoolEvents(x) & NotStudentsWhoAttendSchool(x)))", "error_type": "<class 'nltk.inference.prover9.Prover9FatalException'>", "error_message": "(FATAL)\n%%ERROR: The following symbols are used with multiple arities: NotActiveAndDisinterested/1, NotActiveAndDisinterested/2, AttendAndEngagedWithSchoolEvents/2, AttendAndEngagedWithSchoolEvents/1.\n\n\nFatal error:  The following symbols are used with multiple arities: NotActiveAndDisinterested/1, NotActiveAndDisinterested/2, AttendAndEngagedWithSchoolEvents/2, AttendAndEngagedWithSchoolEvents/1", "stack_trace": "Traceback (most recent call last):\n  File \"/data/gpfs/projects/punim0478/bansaab/linc2/eval/tasks/owafoltask.py\", line 577, in _process_neurosymbolic\n    parsed = json.loads(gen)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/json/__init__.py\", line 346, in loads\n    return _default_decoder.decode(s)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/json/decoder.py\", line 337, in decode\n    obj, end = self.raw_decode(s, idx=_w(s, 0).end())\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/json/decoder.py\", line 355, in raw_decode\n    raise JSONDecodeError(\"Expecting value\", s, err.value) from None\njson.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"/data/gpfs/projects/punim0478/bansaab/linc2/eval/tasks/utils.py\", line 219, in evaluate\n    truth_value = prover.prove(c, p_list)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/inference/api.py\", line 37, in prove\n    return self._prove(goal, assumptions, verbose)[0]\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/inference/prover9.py\", line 327, in _prove\n    stdout, returncode = self._call_prover9(\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/inference/prover9.py\", line 370, in _call_prover9\n    raise Prover9FatalException(returncode, errormsg)\nnltk.inference.prover9.Prover9FatalException: (FATAL)\n%%ERROR: The following symbols are used with multiple arities: NotActiveAndDisinterested/1, NotActiveAndDisinterested/2, AttendAndEngagedWithSchoolEvents/2, AttendAndEngagedWithSchoolEvents/1.\n\n\nFatal error:  The following symbols are used with multiple arities: NotActiveAndDisinterested/1, NotActiveAndDisinterested/2, AttendAndEngagedWithSchoolEvents/2, AttendAndEngagedWithSchoolEvents/1\n"}
{"timestamp": "2025-09-16T17:12:19.491435", "premises": ["all x. (PerformInTalentShows(x) -> AttendSchoolEvents(x) & BeEngaged(x))", "all x. (PerformInTalentShows(x) | InactiveAndDisinterested(x))", "all x. (ChaperoneHighSchoolDances(x) -> NotStudent(x))", "all x. (InactiveAndDisinterested(x) -> ChaperoneHighSchoolDances(x))", "all x. (WishToFurtherAcademicCareers(x) & EducationalOpportunities(x) -> Student(x) & AttendSchool(x))"], "conclusion": "Bonnie is either (AttendSchoolEvents(Bonnie) & BeEngaged(Bonnie) & Student(Bonnie) & AttendSchool(Bonnie)) | (NotAttendSchoolEvents(Bonnie) & NotBeEngaged(Bonnie) & NotStudent(Bonnie) & NotAttendSchool(Bonnie))", "error_type": "<class 'nltk.sem.logic.LogicalExpressionException'>", "error_message": "Unexpected token: 'is'.\nBonnie is either (AttendSchoolEvents(Bonnie) & BeEngaged(Bonnie) & Student(Bonnie) & AttendSchool(Bonnie)) | (NotAttendSchoolEvents(Bonnie) & NotBeEngaged(Bonnie) & NotStudent(Bonnie) & NotAttendSchool(Bonnie))\n       ^", "stack_trace": "Traceback (most recent call last):\n  File \"/data/gpfs/projects/punim0478/bansaab/linc2/eval/tasks/owafoltask.py\", line 577, in _process_neurosymbolic\n    parsed = json.loads(gen)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/json/__init__.py\", line 346, in loads\n    return _default_decoder.decode(s)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/json/decoder.py\", line 337, in decode\n    obj, end = self.raw_decode(s, idx=_w(s, 0).end())\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/json/decoder.py\", line 355, in raw_decode\n    raise JSONDecodeError(\"Expecting value\", s, err.value) from None\njson.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/sem/logic.py\", line 156, in parse\n    raise UnexpectedTokenException(self._currentIndex + 1, self.token(0))\nnltk.sem.logic.UnexpectedTokenException: Unexpected token: 'is'.\n\nThe above exception was the direct cause of the following exception:\n\nTraceback (most recent call last):\n  File \"/data/gpfs/projects/punim0478/bansaab/linc2/eval/tasks/utils.py\", line 215, in evaluate\n    c = read_expr(conclusion)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/sem/logic.py\", line 957, in fromstring\n    return cls._logic_parser.parse(s, signature)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/sem/logic.py\", line 159, in parse\n    raise LogicalExpressionException(None, msg) from e\nnltk.sem.logic.LogicalExpressionException: Unexpected token: 'is'.\nBonnie is either (AttendSchoolEvents(Bonnie) & BeEngaged(Bonnie) & Student(Bonnie) & AttendSchool(Bonnie)) | (NotAttendSchoolEvents(Bonnie) & NotBeEngaged(Bonnie) & NotStudent(Bonnie) & NotAttendSchool(Bonnie))\n       ^\n"}
{"timestamp": "2025-09-16T17:12:19.415979", "premises": ["all x. (PerformInTalentShowsOften(x) -> AttendAndEngagedInSchoolEvents(x))", "all x. (PerformInTalentShowsOften(x) | InactiveAndDisinterested(x))", "all x. (ChaperoneHighSchoolDances(x) -> NotStudentWhoAttendsSchool(x))", "all x. (InactiveAndDisinterested(x) -> ChaperoneHighSchoolDances(x))", "all x. (YoungAndTeenage(x) & WishToFurtherAcademicCareers(x) & EducationalOpportunities(x) -> StudentWhoAttendsSchool(x))"], "conclusion": "(Bonnie AttendsAndEngagedInSchoolEvents & Bonnie StudentWhoAttendsSchool) | (Bonnie NotAttendAndNotEngagedInSchoolEvents & Bonnie NotStudentWhoAttendsSchool)", "error_type": "<class 'nltk.sem.logic.LogicalExpressionException'>", "error_message": "Unexpected token: 'AttendsAndEngagedInSchoolEvents'.  Expected token ')'.\n(Bonnie AttendsAndEngagedInSchoolEvents & Bonnie StudentWhoAttendsSchool) | (Bonnie NotAttendAndNotEngagedInSchoolEvents & Bonnie NotStudentWhoAttendsSchool)\n        ^", "stack_trace": "Traceback (most recent call last):\n  File \"/data/gpfs/projects/punim0478/bansaab/linc2/eval/tasks/owafoltask.py\", line 577, in _process_neurosymbolic\n    parsed = json.loads(gen)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/json/__init__.py\", line 346, in loads\n    return _default_decoder.decode(s)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/json/decoder.py\", line 337, in decode\n    obj, end = self.raw_decode(s, idx=_w(s, 0).end())\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/json/decoder.py\", line 355, in raw_decode\n    raise JSONDecodeError(\"Expecting value\", s, err.value) from None\njson.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/sem/logic.py\", line 154, in parse\n    result = self.process_next_expression(None)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/sem/logic.py\", line 290, in process_next_expression\n    accum = self.handle(tok, context)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/sem/logic.py\", line 315, in handle\n    return self.handle_open(tok, context)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/sem/logic.py\", line 450, in handle_open\n    self.assertNextToken(Tokens.CLOSE)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/sem/logic.py\", line 573, in assertNextToken\n    raise UnexpectedTokenException(self._currentIndex, tok, expected)\nnltk.sem.logic.UnexpectedTokenException: Unexpected token: 'AttendsAndEngagedInSchoolEvents'.  Expected token ')'.\n\nThe above exception was the direct cause of the following exception:\n\nTraceback (most recent call last):\n  File \"/data/gpfs/projects/punim0478/bansaab/linc2/eval/tasks/utils.py\", line 215, in evaluate\n    c = read_expr(conclusion)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/sem/logic.py\", line 957, in fromstring\n    return cls._logic_parser.parse(s, signature)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/sem/logic.py\", line 159, in parse\n    raise LogicalExpressionException(None, msg) from e\nnltk.sem.logic.LogicalExpressionException: Unexpected token: 'AttendsAndEngagedInSchoolEvents'.  Expected token ')'.\n(Bonnie AttendsAndEngagedInSchoolEvents & Bonnie StudentWhoAttendsSchool) | (Bonnie NotAttendAndNotEngagedInSchoolEvents & Bonnie NotStudentWhoAttendsSchool)\n        ^\n"}
{"timestamp": "2025-09-16T17:12:19.414574", "premises": ["all x. (Perform(x, talent shows often) -> Attend(x, school events) & Engaged(x, school events))", "all x. (Perform(x, talent shows often) | Inactive(x))", "all x. (Chaperone(x, high school dances) -> Not student(x, school))", "all x. (Inactive(x) & Disinterested(x) -> Chaperone(x, high school dances))", "all x. (Young(x) & (AcademicCareer(x) | EducationalOpportunities(x)) -> Student(x, school)"], "conclusion": "(Bonnie, Attend(Bonnie, school events) & Engaged(Bonnie, school events) & Student(Bonnie, school)) | (Bonnie, Not attend(Bonnie, school events) & Not engaged(Bonnie, school events) & Not student(Bonnie, school))", "error_type": "<class 'nltk.sem.logic.LogicalExpressionException'>", "error_message": "Unexpected token: ','.  Expected token ')'.\n(Bonnie, Attend(Bonnie, school events) & Engaged(Bonnie, school events) & Student(Bonnie, school)) | (Bonnie, Not attend(Bonnie, school events) & Not engaged(Bonnie, school events) & Not student(Bonnie, school))\n       ^", "stack_trace": "Traceback (most recent call last):\n  File \"/data/gpfs/projects/punim0478/bansaab/linc2/eval/tasks/owafoltask.py\", line 577, in _process_neurosymbolic\n    parsed = json.loads(gen)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/json/__init__.py\", line 346, in loads\n    return _default_decoder.decode(s)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/json/decoder.py\", line 337, in decode\n    obj, end = self.raw_decode(s, idx=_w(s, 0).end())\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/json/decoder.py\", line 355, in raw_decode\n    raise JSONDecodeError(\"Expecting value\", s, err.value) from None\njson.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/sem/logic.py\", line 154, in parse\n    result = self.process_next_expression(None)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/sem/logic.py\", line 290, in process_next_expression\n    accum = self.handle(tok, context)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/sem/logic.py\", line 315, in handle\n    return self.handle_open(tok, context)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/sem/logic.py\", line 450, in handle_open\n    self.assertNextToken(Tokens.CLOSE)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/sem/logic.py\", line 573, in assertNextToken\n    raise UnexpectedTokenException(self._currentIndex, tok, expected)\nnltk.sem.logic.UnexpectedTokenException: Unexpected token: ','.  Expected token ')'.\n\nThe above exception was the direct cause of the following exception:\n\nTraceback (most recent call last):\n  File \"/data/gpfs/projects/punim0478/bansaab/linc2/eval/tasks/utils.py\", line 215, in evaluate\n    c = read_expr(conclusion)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/sem/logic.py\", line 957, in fromstring\n    return cls._logic_parser.parse(s, signature)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/sem/logic.py\", line 159, in parse\n    raise LogicalExpressionException(None, msg) from e\nnltk.sem.logic.LogicalExpressionException: Unexpected token: ','.  Expected token ')'.\n(Bonnie, Attend(Bonnie, school events) & Engaged(Bonnie, school events) & Student(Bonnie, school)) | (Bonnie, Not attend(Bonnie, school events) & Not engaged(Bonnie, school events) & Not student(Bonnie, school))\n       ^\n"}
{"timestamp": "2025-09-16T17:13:22.419239", "premises": ["all x. all y. (PerformInSchoolTalentShows(x, y) -> AttendAndEngagedWithSchoolEvents(x, y))", "all x. (PerformInSchoolTalentShows(x) | InactiveAndDisinterested(x))", "all x. (ChaperoneHighSchoolDances(x) -> NotStudentWhoAttendsSchool(x))", "all x. (InactiveAndDisinterested(x) -> ChaperoneHighSchoolDances(x))", "all x. (WishToFurtherAcademicCareerAndOpportunities(x) -> StudentWhoAttendsSchool(x))"], "conclusion": "Bonnie -> (AttendsAndEngagedWithSchoolEvents(Bonnie) & StudentWhoAttendsSchool(Bonnie)) | (-AttendsAndEngagedWithSchoolEvents(Bonnie) & -StudentWhoAttendsSchool(Bonnie))", "error_type": "<class 'nltk.inference.prover9.Prover9FatalException'>", "error_message": "(FATAL)\n%%ERROR: The following symbols/arities are used as both relation and function symbols: Bonnie/0.\n\n\nFatal error:  The following symbols/arities are used as both relation and function symbols: Bonnie/0", "stack_trace": "Traceback (most recent call last):\n  File \"/data/gpfs/projects/punim0478/bansaab/linc2/eval/tasks/owafoltask.py\", line 577, in _process_neurosymbolic\n    parsed = json.loads(gen)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/json/__init__.py\", line 346, in loads\n    return _default_decoder.decode(s)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/json/decoder.py\", line 337, in decode\n    obj, end = self.raw_decode(s, idx=_w(s, 0).end())\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/json/decoder.py\", line 355, in raw_decode\n    raise JSONDecodeError(\"Expecting value\", s, err.value) from None\njson.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"/data/gpfs/projects/punim0478/bansaab/linc2/eval/tasks/utils.py\", line 219, in evaluate\n    truth_value = prover.prove(c, p_list)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/inference/api.py\", line 37, in prove\n    return self._prove(goal, assumptions, verbose)[0]\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/inference/prover9.py\", line 327, in _prove\n    stdout, returncode = self._call_prover9(\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/inference/prover9.py\", line 370, in _call_prover9\n    raise Prover9FatalException(returncode, errormsg)\nnltk.inference.prover9.Prover9FatalException: (FATAL)\n%%ERROR: The following symbols/arities are used as both relation and function symbols: Bonnie/0.\n\n\nFatal error:  The following symbols/arities are used as both relation and function symbols: Bonnie/0\n"}
{"timestamp": "2025-09-16T17:13:22.410522", "premises": ["all x. (Perform(x) & Often(x) -> Attend(x) & Engaged(x))", "all x. (Perform(x) & Often(x) | NotPerform(x) & Often(x) -> Inactive(x) | Inactive(x) & Disinterested(x))", "all x. (Chaperone(x) -> NotStudent(x) & NotAttend(x))", "all x. (Inactive(x) & Disinterested(x) -> Chaperone(x))", "all x. (YoungChild(x) | Teenager(x) & Wish(x, FurtherAcademicCareer) & EducationalOpportunities -> Student(x) & Attend(x))"], "conclusion": "all x. (Bonnie -> Either(x, Attend(x) & Engaged(x) & Student(x) & Attend(x)) | Neither(x, Attend(x) & Engaged(x) & Student(x)) | Neither(x, Attend(x) & Engaged(x) & NotStudent(x)))", "error_type": "<class 'nltk.sem.logic.LogicalExpressionException'>", "error_message": "Unexpected token: '&'.  Expected token ')'.\nall x. (Bonnie -> Either(x, Attend(x) & Engaged(x) & Student(x) & Attend(x)) | Neither(x, Attend(x) & Engaged(x) & Student(x)) | Neither(x, Attend(x) & Engaged(x) & NotStudent(x)))\n                                      ^", "stack_trace": "Traceback (most recent call last):\n  File \"/data/gpfs/projects/punim0478/bansaab/linc2/eval/tasks/owafoltask.py\", line 577, in _process_neurosymbolic\n    parsed = json.loads(gen)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/json/__init__.py\", line 346, in loads\n    return _default_decoder.decode(s)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/json/decoder.py\", line 337, in decode\n    obj, end = self.raw_decode(s, idx=_w(s, 0).end())\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/json/decoder.py\", line 355, in raw_decode\n    raise JSONDecodeError(\"Expecting value\", s, err.value) from None\njson.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/sem/logic.py\", line 154, in parse\n    result = self.process_next_expression(None)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/sem/logic.py\", line 290, in process_next_expression\n    accum = self.handle(tok, context)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/sem/logic.py\", line 312, in handle\n    return self.handle_quant(tok, context)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/sem/logic.py\", line 427, in handle_quant\n    accum = self.process_next_expression(tok)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/sem/logic.py\", line 290, in process_next_expression\n    accum = self.handle(tok, context)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/sem/logic.py\", line 315, in handle\n    return self.handle_open(tok, context)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/sem/logic.py\", line 449, in handle_open\n    accum = self.process_next_expression(None)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/sem/logic.py\", line 297, in process_next_expression\n    return self.attempt_adjuncts(accum, context)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/sem/logic.py\", line 323, in attempt_adjuncts\n    expression = self.attempt_BooleanExpression(expression, context)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/sem/logic.py\", line 485, in attempt_BooleanExpression\n    factory, expression, self.process_next_expression(tok)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/sem/logic.py\", line 290, in process_next_expression\n    accum = self.handle(tok, context)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/sem/logic.py\", line 303, in handle\n    return self.handle_variable(tok, context)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/sem/logic.py\", line 359, in handle_variable\n    self.assertNextToken(Tokens.CLOSE)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/sem/logic.py\", line 573, in assertNextToken\n    raise UnexpectedTokenException(self._currentIndex, tok, expected)\nnltk.sem.logic.UnexpectedTokenException: Unexpected token: '&'.  Expected token ')'.\n\nThe above exception was the direct cause of the following exception:\n\nTraceback (most recent call last):\n  File \"/data/gpfs/projects/punim0478/bansaab/linc2/eval/tasks/utils.py\", line 215, in evaluate\n    c = read_expr(conclusion)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/sem/logic.py\", line 957, in fromstring\n    return cls._logic_parser.parse(s, signature)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/sem/logic.py\", line 159, in parse\n    raise LogicalExpressionException(None, msg) from e\nnltk.sem.logic.LogicalExpressionException: Unexpected token: '&'.  Expected token ')'.\nall x. (Bonnie -> Either(x, Attend(x) & Engaged(x) & Student(x) & Attend(x)) | Neither(x, Attend(x) & Engaged(x) & Student(x)) | Neither(x, Attend(x) & Engaged(x) & NotStudent(x)))\n                                      ^\n"}
{"timestamp": "2025-09-16T17:13:22.415094", "premises": ["all x. all y. (PerformInSchoolTalentShows(x, y) -> AttendSchoolEvents(x, y) & EngagedWithSchoolEvents(x, y))", "all x. all y. (PerformInSchoolTalentShows(x, y) | InactiveAndDisinterested(x, y))", "all x. (ChaperoneHighSchoolDances(x) -> NotStudent(x) & NotAttendSchoolEvents(x) & NotEngagedWithSchoolEvents(x))", "all x. (InactiveAndDisinterested(x) -> ChaperoneHighSchoolDances(x))", "all x. (YoungChildOrTeenager(x) & WishToFurtherAcademicCareerAndEducationalOpportunities(x) -> Student(x) & AttendSchoolEvents(x) & EngagedWithSchoolEvents(x))"], "conclusion": "Equal(Bonnie,all) x. (PerformInSchoolTalentShows(x) & AttendSchoolEvents(x) & EngagedWithSchoolEvents(x) & Student(x)) | all x. (InactiveAndDisinterested(x) & ChaperoneHighSchoolDances(x) & Equal(Bonnie,x))", "error_type": "<class 'nltk.sem.logic.LogicalExpressionException'>", "error_message": "')' is an illegal variable name.  Constants may not be quantified.\nEqual(Bonnie,all) x. (PerformInSchoolTalentShows(x) & AttendSchoolEvents(x) & EngagedWithSchoolEvents(x) & Student(x)) | all x. (InactiveAndDisinterested(x) & ChaperoneHighSchoolDances(x) & Equal(Bonnie,x))\n                ^", "stack_trace": "Traceback (most recent call last):\n  File \"/data/gpfs/projects/punim0478/bansaab/linc2/eval/tasks/owafoltask.py\", line 577, in _process_neurosymbolic\n    parsed = json.loads(gen)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/json/__init__.py\", line 346, in loads\n    return _default_decoder.decode(s)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/json/decoder.py\", line 337, in decode\n    obj, end = self.raw_decode(s, idx=_w(s, 0).end())\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/json/decoder.py\", line 355, in raw_decode\n    raise JSONDecodeError(\"Expecting value\", s, err.value) from None\njson.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/sem/logic.py\", line 154, in parse\n    result = self.process_next_expression(None)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/sem/logic.py\", line 290, in process_next_expression\n    accum = self.handle(tok, context)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/sem/logic.py\", line 303, in handle\n    return self.handle_variable(tok, context)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/sem/logic.py\", line 357, in handle_variable\n    accum, self.process_next_expression(APP)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/sem/logic.py\", line 290, in process_next_expression\n    accum = self.handle(tok, context)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/sem/logic.py\", line 312, in handle\n    return self.handle_quant(tok, context)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/sem/logic.py\", line 412, in handle_quant\n    vars = [self.get_next_token_variable(\"quantified\")]\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/sem/logic.py\", line 368, in get_next_token_variable\n    raise LogicalExpressionException(\nnltk.sem.logic.LogicalExpressionException: ')' is an illegal variable name.  Constants may not be quantified.\n\nThe above exception was the direct cause of the following exception:\n\nTraceback (most recent call last):\n  File \"/data/gpfs/projects/punim0478/bansaab/linc2/eval/tasks/utils.py\", line 215, in evaluate\n    c = read_expr(conclusion)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/sem/logic.py\", line 957, in fromstring\n    return cls._logic_parser.parse(s, signature)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/sem/logic.py\", line 159, in parse\n    raise LogicalExpressionException(None, msg) from e\nnltk.sem.logic.LogicalExpressionException: ')' is an illegal variable name.  Constants may not be quantified.\nEqual(Bonnie,all) x. (PerformInSchoolTalentShows(x) & AttendSchoolEvents(x) & EngagedWithSchoolEvents(x) & Student(x)) | all x. (InactiveAndDisinterested(x) & ChaperoneHighSchoolDances(x) & Equal(Bonnie,x))\n                ^\n"}
{"timestamp": "2025-09-16T17:14:21.008526", "premises": ["all x. all y. (PerformInTalentShows(x,y) -> AttendAndEngaged(x,y))", "all x. all y. (PerformInTalentShows(x,y) | InactiveAndDisinterested(x,y))", "all x. (ChaperoneHighSchoolDances(x) -> NotStudent(x))", "all x. (InactiveAndDisinterested(x) -> ChaperoneHighSchoolDances(x))", "all x. (YoungChildOrTeenager(x) & WishToFurtherCareer(x) -> StudentWhoAttendsSchool(x))"], "conclusion": "all x. (Bonnie(x) -> (AttendAndEngaged(x) & Student(x))) | (Bonnie(x) -> (NotAttendAndNotEngaged(x) & NotStudent(x)))", "error_type": "<class 'nltk.inference.prover9.Prover9FatalException'>", "error_message": "(FATAL)\n%%ERROR: The following symbols are used with multiple arities: InactiveAndDisinterested/1, InactiveAndDisinterested/2, AttendAndEngaged/2, AttendAndEngaged/1.\n\n\nFatal error:  The following symbols are used with multiple arities: InactiveAndDisinterested/1, InactiveAndDisinterested/2, AttendAndEngaged/2, AttendAndEngaged/1", "stack_trace": "Traceback (most recent call last):\n  File \"/data/gpfs/projects/punim0478/bansaab/linc2/eval/tasks/owafoltask.py\", line 577, in _process_neurosymbolic\n    parsed = json.loads(gen)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/json/__init__.py\", line 346, in loads\n    return _default_decoder.decode(s)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/json/decoder.py\", line 337, in decode\n    obj, end = self.raw_decode(s, idx=_w(s, 0).end())\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/json/decoder.py\", line 355, in raw_decode\n    raise JSONDecodeError(\"Expecting value\", s, err.value) from None\njson.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"/data/gpfs/projects/punim0478/bansaab/linc2/eval/tasks/utils.py\", line 219, in evaluate\n    truth_value = prover.prove(c, p_list)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/inference/api.py\", line 37, in prove\n    return self._prove(goal, assumptions, verbose)[0]\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/inference/prover9.py\", line 327, in _prove\n    stdout, returncode = self._call_prover9(\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/inference/prover9.py\", line 370, in _call_prover9\n    raise Prover9FatalException(returncode, errormsg)\nnltk.inference.prover9.Prover9FatalException: (FATAL)\n%%ERROR: The following symbols are used with multiple arities: InactiveAndDisinterested/1, InactiveAndDisinterested/2, AttendAndEngaged/2, AttendAndEngaged/1.\n\n\nFatal error:  The following symbols are used with multiple arities: InactiveAndDisinterested/1, InactiveAndDisinterested/2, AttendAndEngaged/2, AttendAndEngaged/1\n"}
{"timestamp": "2025-09-16T17:16:48.568380", "premises": ["all x. (ScheduleMeeting(x, Customers) -> AppearsInCompany(x, Today))", "all x. (HasLunchInCompany(x) -> SchedulesMeeting(x, Customers))", "all x. (EitherHasLunchInCompany(x) | HasLunchAtHome(x))", "all x. (HasLunchAtHome(x) -> WorkingRemotelyFromHome(x))", "all x. (InOtherCountries(x) -> WorkingRemotelyFromHome(x))", "all x. (Manager(x) -> NotWorkingRemotelyFromHome(x))", "either (Manager(James) & AppearsInCompany(James, Today)) | (NotManager(James) & NotAppearsInCompany(James, Today))"], "conclusion": "HasLunchInCompany(James)", "error_type": "<class 'nltk.sem.logic.LogicalExpressionException'>", "error_message": "Unexpected token: '&'.  Expected token ')'.\neither (Manager(James) & AppearsInCompany(James, Today)) | (NotManager(James) & NotAppearsInCompany(James, Today))\n                       ^", "stack_trace": "Traceback (most recent call last):\n  File \"/data/gpfs/projects/punim0478/bansaab/linc2/eval/tasks/owafoltask.py\", line 577, in _process_neurosymbolic\n    parsed = json.loads(gen)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/json/__init__.py\", line 346, in loads\n    return _default_decoder.decode(s)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/json/decoder.py\", line 337, in decode\n    obj, end = self.raw_decode(s, idx=_w(s, 0).end())\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/json/decoder.py\", line 355, in raw_decode\n    raise JSONDecodeError(\"Expecting value\", s, err.value) from None\njson.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/sem/logic.py\", line 154, in parse\n    result = self.process_next_expression(None)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/sem/logic.py\", line 290, in process_next_expression\n    accum = self.handle(tok, context)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/sem/logic.py\", line 303, in handle\n    return self.handle_variable(tok, context)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/sem/logic.py\", line 359, in handle_variable\n    self.assertNextToken(Tokens.CLOSE)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/sem/logic.py\", line 573, in assertNextToken\n    raise UnexpectedTokenException(self._currentIndex, tok, expected)\nnltk.sem.logic.UnexpectedTokenException: Unexpected token: '&'.  Expected token ')'.\n\nThe above exception was the direct cause of the following exception:\n\nTraceback (most recent call last):\n  File \"/data/gpfs/projects/punim0478/bansaab/linc2/eval/tasks/utils.py\", line 216, in evaluate\n    p_list = [read_expr(p) for p in premises]\n  File \"/data/gpfs/projects/punim0478/bansaab/linc2/eval/tasks/utils.py\", line 216, in <listcomp>\n    p_list = [read_expr(p) for p in premises]\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/sem/logic.py\", line 957, in fromstring\n    return cls._logic_parser.parse(s, signature)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/sem/logic.py\", line 159, in parse\n    raise LogicalExpressionException(None, msg) from e\nnltk.sem.logic.LogicalExpressionException: Unexpected token: '&'.  Expected token ')'.\neither (Manager(James) & AppearsInCompany(James, Today)) | (NotManager(James) & NotAppearsInCompany(James, Today))\n                       ^\n"}
{"timestamp": "2025-09-16T17:16:48.599488", "premises": ["all x. (Employee(x) & ScheduleMeetingWithCustomers(x) -> AppearsInCompany(x) | AppearsInCompany(x))", "all x. (HasLunchInCompany(x) -> SchedulesMeetingWithCustomers(x))", "all x. (Employee(x) -> (HasLunchInCompany(x) | HasLunchAtHome(x)))", "all x. (HasLunchAtHome(x) -> WorksRemotelyFromHome(x))", "all x. (In(x, OtherCountries) -> WorksRemotelyFromHome(x))", "all x. (Manager(x) -> -WorksRemotelyFromHome(x))", "(James is Manager) -> AppearsInCompany(James) | (James is not Manager) -> AppearsInCompany(James)"], "conclusion": "(James is Manager) -> (AppearsInCompany(James) & HasLunchInCompany(James)) | (James is not Manager) -> (AppearsInCompany(James) & HasLunchInCompany(James))", "error_type": "<class 'nltk.sem.logic.LogicalExpressionException'>", "error_message": "Unexpected token: 'is'.  Expected token ')'.\n(James is Manager) -> (AppearsInCompany(James) & HasLunchInCompany(James)) | (James is not Manager) -> (AppearsInCompany(James) & HasLunchInCompany(James))\n       ^", "stack_trace": "Traceback (most recent call last):\n  File \"/data/gpfs/projects/punim0478/bansaab/linc2/eval/tasks/owafoltask.py\", line 577, in _process_neurosymbolic\n    parsed = json.loads(gen)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/json/__init__.py\", line 346, in loads\n    return _default_decoder.decode(s)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/json/decoder.py\", line 337, in decode\n    obj, end = self.raw_decode(s, idx=_w(s, 0).end())\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/json/decoder.py\", line 355, in raw_decode\n    raise JSONDecodeError(\"Expecting value\", s, err.value) from None\njson.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/sem/logic.py\", line 154, in parse\n    result = self.process_next_expression(None)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/sem/logic.py\", line 290, in process_next_expression\n    accum = self.handle(tok, context)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/sem/logic.py\", line 315, in handle\n    return self.handle_open(tok, context)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/sem/logic.py\", line 450, in handle_open\n    self.assertNextToken(Tokens.CLOSE)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/sem/logic.py\", line 573, in assertNextToken\n    raise UnexpectedTokenException(self._currentIndex, tok, expected)\nnltk.sem.logic.UnexpectedTokenException: Unexpected token: 'is'.  Expected token ')'.\n\nThe above exception was the direct cause of the following exception:\n\nTraceback (most recent call last):\n  File \"/data/gpfs/projects/punim0478/bansaab/linc2/eval/tasks/utils.py\", line 215, in evaluate\n    c = read_expr(conclusion)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/sem/logic.py\", line 957, in fromstring\n    return cls._logic_parser.parse(s, signature)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/sem/logic.py\", line 159, in parse\n    raise LogicalExpressionException(None, msg) from e\nnltk.sem.logic.LogicalExpressionException: Unexpected token: 'is'.  Expected token ')'.\n(James is Manager) -> (AppearsInCompany(James) & HasLunchInCompany(James)) | (James is not Manager) -> (AppearsInCompany(James) & HasLunchInCompany(James))\n       ^\n"}
{"timestamp": "2025-09-16T17:16:48.605108", "premises": ["all x. (ScheduleMeeting(x) -> AppearsInCompany(x))", "all x. (HasLunchInCompany(x) -> SchedulesMeeting(x))", "all x. (Employee(x) -> (HasLunchInCompany(x) | HasLunchAtHome(x)))", "all x. (HasLunchAtHome(x) -> RemoteWorkingFromHome(x))", "all x. (InOtherCountry(x) -> RemoteWorkingFromHome(x))", "all x. (Manager(x) -> NotRemoteWorkingFromHome(x))", "((Manager(James) & AppearsInCompany(James)) | ((NotManager(James) & NotAppearsInCompany(James)))"], "conclusion": "HasLunchInCompany(James)", "error_type": "<class 'nltk.sem.logic.LogicalExpressionException'>", "error_message": "End of input found.  Expected token ')'.\n((Manager(James) & AppearsInCompany(James)) | ((NotManager(James) & NotAppearsInCompany(James)))\n                                                                                                ^", "stack_trace": "Traceback (most recent call last):\n  File \"/data/gpfs/projects/punim0478/bansaab/linc2/eval/tasks/owafoltask.py\", line 577, in _process_neurosymbolic\n    parsed = json.loads(gen)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/json/__init__.py\", line 346, in loads\n    return _default_decoder.decode(s)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/json/decoder.py\", line 337, in decode\n    obj, end = self.raw_decode(s, idx=_w(s, 0).end())\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/json/decoder.py\", line 355, in raw_decode\n    raise JSONDecodeError(\"Expecting value\", s, err.value) from None\njson.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/sem/logic.py\", line 270, in token\n    tok = self._buffer[self._currentIndex]\nIndexError: list index out of range\n\nThe above exception was the direct cause of the following exception:\n\nTraceback (most recent call last):\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/sem/logic.py\", line 562, in assertNextToken\n    tok = self.token()\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/sem/logic.py\", line 276, in token\n    raise ExpectedMoreTokensException(self._currentIndex + 1) from e\nnltk.sem.logic.ExpectedMoreTokensException: End of input found.  More tokens expected.\n\nThe above exception was the direct cause of the following exception:\n\nTraceback (most recent call last):\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/sem/logic.py\", line 154, in parse\n    result = self.process_next_expression(None)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/sem/logic.py\", line 290, in process_next_expression\n    accum = self.handle(tok, context)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/sem/logic.py\", line 315, in handle\n    return self.handle_open(tok, context)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/sem/logic.py\", line 450, in handle_open\n    self.assertNextToken(Tokens.CLOSE)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/sem/logic.py\", line 564, in assertNextToken\n    raise ExpectedMoreTokensException(\nnltk.sem.logic.ExpectedMoreTokensException: End of input found.  Expected token ')'.\n\nThe above exception was the direct cause of the following exception:\n\nTraceback (most recent call last):\n  File \"/data/gpfs/projects/punim0478/bansaab/linc2/eval/tasks/utils.py\", line 216, in evaluate\n    p_list = [read_expr(p) for p in premises]\n  File \"/data/gpfs/projects/punim0478/bansaab/linc2/eval/tasks/utils.py\", line 216, in <listcomp>\n    p_list = [read_expr(p) for p in premises]\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/sem/logic.py\", line 957, in fromstring\n    return cls._logic_parser.parse(s, signature)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/sem/logic.py\", line 159, in parse\n    raise LogicalExpressionException(None, msg) from e\nnltk.sem.logic.LogicalExpressionException: End of input found.  Expected token ')'.\n((Manager(James) & AppearsInCompany(James)) | ((NotManager(James) & NotAppearsInCompany(James)))\n                                                                                                ^\n"}
{"timestamp": "2025-09-16T17:16:48.606695", "premises": ["all x. (ScheduleMeeting(x, Customers) -> AppearsInCompany(x, Today))", "all x. (HasLunch(x, Company) -> SchedulesMeetingsWithCustomers(x))", "all x. (HasLunch(x, Company) | HasLunch(x, Home))", "all x. (HasLunch(x, Home) -> WorkingRemotelyFromHome(x))", "all x. (In(x, OtherCountries) -> WorkingRemotelyFromHome(x))", "all x. (Manager(x) -> NotWorkingRemotelyFromHome(x))"], "conclusion": "(James(Manager) & AppearsInCompany(James, Today)) | (James(NotManager) & NotAppearsInCompany(James, Today))", "error_type": "<class 'nltk.inference.prover9.Prover9FatalException'>", "error_message": "(FATAL)\n%%ERROR: The following symbols are used with multiple arities: James/1, James/0, Manager/1, Manager/0.\n\n\nFatal error:  The following symbols are used with multiple arities: James/1, James/0, Manager/1, Manager/0", "stack_trace": "Traceback (most recent call last):\n  File \"/data/gpfs/projects/punim0478/bansaab/linc2/eval/tasks/owafoltask.py\", line 577, in _process_neurosymbolic\n    parsed = json.loads(gen)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/json/__init__.py\", line 346, in loads\n    return _default_decoder.decode(s)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/json/decoder.py\", line 337, in decode\n    obj, end = self.raw_decode(s, idx=_w(s, 0).end())\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/json/decoder.py\", line 355, in raw_decode\n    raise JSONDecodeError(\"Expecting value\", s, err.value) from None\njson.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"/data/gpfs/projects/punim0478/bansaab/linc2/eval/tasks/utils.py\", line 219, in evaluate\n    truth_value = prover.prove(c, p_list)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/inference/api.py\", line 37, in prove\n    return self._prove(goal, assumptions, verbose)[0]\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/inference/prover9.py\", line 327, in _prove\n    stdout, returncode = self._call_prover9(\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/inference/prover9.py\", line 370, in _call_prover9\n    raise Prover9FatalException(returncode, errormsg)\nnltk.inference.prover9.Prover9FatalException: (FATAL)\n%%ERROR: The following symbols are used with multiple arities: James/1, James/0, Manager/1, Manager/0.\n\n\nFatal error:  The following symbols are used with multiple arities: James/1, James/0, Manager/1, Manager/0\n"}
{"timestamp": "2025-09-16T17:19:17.117818", "premises": ["all x. (SchedulesMeeting(x, customers) -> AppearsInCompany(x, today))", "all x. (HasLunch(x, company) -> SchedulesMeeting(x, customers))", "all x. (HasLunch(x) -> (InCompany(x) | AtHome(x)))", "all x. (HasLunch(x, atHome) -> RemoteFromHome(x))", "all x. (InOtherCountry(x) -> RemoteFromHome(x))", "-RemoteFromHome(Manager)"], "conclusion": "(Manager(James) & AppearsInCompany(James, today)) | (-Manager(James) & -AppearsInCompany(James, today))", "error_type": "<class 'nltk.inference.prover9.Prover9FatalException'>", "error_message": "(FATAL)\n%%ERROR: The following symbols are used with multiple arities: HasLunch/1, HasLunch/2, Manager/1, Manager/0.\n\n\nFatal error:  The following symbols are used with multiple arities: HasLunch/1, HasLunch/2, Manager/1, Manager/0", "stack_trace": "Traceback (most recent call last):\n  File \"/data/gpfs/projects/punim0478/bansaab/linc2/eval/tasks/owafoltask.py\", line 577, in _process_neurosymbolic\n    parsed = json.loads(gen)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/json/__init__.py\", line 346, in loads\n    return _default_decoder.decode(s)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/json/decoder.py\", line 337, in decode\n    obj, end = self.raw_decode(s, idx=_w(s, 0).end())\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/json/decoder.py\", line 355, in raw_decode\n    raise JSONDecodeError(\"Expecting value\", s, err.value) from None\njson.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"/data/gpfs/projects/punim0478/bansaab/linc2/eval/tasks/utils.py\", line 219, in evaluate\n    truth_value = prover.prove(c, p_list)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/inference/api.py\", line 37, in prove\n    return self._prove(goal, assumptions, verbose)[0]\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/inference/prover9.py\", line 327, in _prove\n    stdout, returncode = self._call_prover9(\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/inference/prover9.py\", line 370, in _call_prover9\n    raise Prover9FatalException(returncode, errormsg)\nnltk.inference.prover9.Prover9FatalException: (FATAL)\n%%ERROR: The following symbols are used with multiple arities: HasLunch/1, HasLunch/2, Manager/1, Manager/0.\n\n\nFatal error:  The following symbols are used with multiple arities: HasLunch/1, HasLunch/2, Manager/1, Manager/0\n"}
{"timestamp": "2025-09-16T17:19:17.105830", "premises": ["all x. (Employee(x) & ScheduledMeetingWithCustomers(x) -> AppearsInCompanyToday(x))", "all x. (LunchInCompany(x) -> SchedulesMeetingsWithCustomers(x))", "all x. (LunchInCompany(x) | LunchAtHome(x))", "all x. (LunchAtHome(x) -> WorkingRemotelyFromHome(x))", "all x. (InOtherCountries(x) -> WorkingRemotelyFromHome(x))", "not exists x. (Manager(x) & WorkingRemotelyFromHome(x))"], "conclusion": "James is either (Manager(James) & AppearsInCompanyToday(James)) | (not Manager(James) & not AppearsInCompanyToday(James))", "error_type": "<class 'nltk.sem.logic.LogicalExpressionException'>", "error_message": "Unexpected token: 'is'.\nJames is either (Manager(James) & AppearsInCompanyToday(James)) | (not Manager(James) & not AppearsInCompanyToday(James))\n      ^", "stack_trace": "Traceback (most recent call last):\n  File \"/data/gpfs/projects/punim0478/bansaab/linc2/eval/tasks/owafoltask.py\", line 577, in _process_neurosymbolic\n    parsed = json.loads(gen)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/json/__init__.py\", line 346, in loads\n    return _default_decoder.decode(s)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/json/decoder.py\", line 337, in decode\n    obj, end = self.raw_decode(s, idx=_w(s, 0).end())\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/json/decoder.py\", line 355, in raw_decode\n    raise JSONDecodeError(\"Expecting value\", s, err.value) from None\njson.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/sem/logic.py\", line 156, in parse\n    raise UnexpectedTokenException(self._currentIndex + 1, self.token(0))\nnltk.sem.logic.UnexpectedTokenException: Unexpected token: 'is'.\n\nThe above exception was the direct cause of the following exception:\n\nTraceback (most recent call last):\n  File \"/data/gpfs/projects/punim0478/bansaab/linc2/eval/tasks/utils.py\", line 215, in evaluate\n    c = read_expr(conclusion)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/sem/logic.py\", line 957, in fromstring\n    return cls._logic_parser.parse(s, signature)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/sem/logic.py\", line 159, in parse\n    raise LogicalExpressionException(None, msg) from e\nnltk.sem.logic.LogicalExpressionException: Unexpected token: 'is'.\nJames is either (Manager(James) & AppearsInCompanyToday(James)) | (not Manager(James) & not AppearsInCompanyToday(James))\n      ^\n"}
{"timestamp": "2025-09-16T17:19:17.187309", "premises": ["all x. (AppearsInCompanyToday(x) -> Employee(x) & SchedulesMeetingWithCustomers(x))", "all x. (HasLunchInCompany(x) -> SchedulesMeetingWithCustomers(x))", "all x. (HasLunchInCompany(x) -> Employee(x) | Employee(x) & HasLunchAtHome(x))", "all x. (HasLunchAtHome(x) -> NotAppearsInCompanyToday(x) & WorksRemotelyFromHome(x))", "all x. (HasLunchAtHome(x) -> Employee(x) & NotAppearsInCompanyToday(x))", "all x. (AppearsInCompanyToday(x) -> Manager(x) & NotWorksRemotelyFromHome(x))", "all x. (WorksRemotelyFromHome(x) -> NotManager(x) & NotAppearsInCompanyToday(x))", "James(x) & (AppearsInCompanyToday(x) | NotAppearsInCompanyToday(x)) & (Manager(x) | NotManager(x))", "James(x) & NotAppearsInCompanyToday(x) & NotManager(x) & NotWorksRemotelyFromHome(x)", "James(x) & NotAppearsInCompanyToday(x) & NotManager(x) & HasLunchAtHome(x) & NotWorksRemotelyFromHome(x)", "James(x) & NotAppearsInCompanyToday(x) & NotManager(x) & NotHasLunchAtHome(x) & NotWorksRemotelyFromHome(x)", "James(x) & NotAppearsInCompanyToday(x) & NotManager(x) & NotHasLunchAtHome(x) & WorksRemotelyFromHome(x)", "NotAppearsInCompanyToday(x) & NotManager(x) & NotHasLunchAtHome(x) & WorksRemotelyFromHome(x)", "NotAppearsInCompanyToday(x) & NotManager(x) & NotHasLunchAtHome(x) & NotWorksRemotelyFromHome(x)", "NotAppearsInCompanyToday(x) & NotManager(x) & NotHasLunchAtHome(x) & AppearsInCompanyToday(x) & NotWorksRemotelyFromHome(x)", "NotAppearsInCompanyToday(x) & NotManager(x) & NotHasLunchAtHome(x) & AppearsInCompanyToday(x) & WorksRemotelyFromHome(x)", "NotAppearsInCompanyToday(x) & NotManager(x) & NotHasLunchAtHome(x) & NotAppearsInCompanyToday(x) & WorksRemotelyFromHome(x)", "NotAppearsInCompanyToday(x) & NotManager(x) & NotHasLunchAtHome(x) & NotAppearsInCompanyToday(x) & NotWorksRemotelyFromHome(x)", "NotAppearsInCompanyToday(x) & NotManager(x) & NotHasLunchAtHome(x) & NotAppearsInCompanyToday(x) & NotWorksRemotelyFromHome(x)", "NotAppearsInCompanyToday(x) & NotManager(x) & NotHasLunchAtHome(x) & NotAppearsInCompanyToday(x) & NotWorksRemotelyFromHome(x)", "NotAppearsInCompanyToday(x) & NotManager(x) & NotHasLunchAtHome(x) & NotAppearsInCompanyToday(x) & NotWorksRemotelyFromHome(x)", "NotAppearsInCompanyToday(x) & NotManager(x) & NotHasLunchAtHome(x) & NotAppearsInCompanyToday(x) & NotWorksRemotelyFromHome(x)", "NotAppearsInCompanyToday(x) & NotManager(x) & NotHasLunchAtHome(x) & NotAppearsInCompanyToday(x) & NotWorksRemotelyFromHome(x)", "NotAppearsInCompanyToday(x) & NotManager(x) & NotHasLunchAtHome(x) & NotAppearsInCompanyToday(x) & NotWorksRemotelyFromHome(x)", "NotAppearsInCompanyToday(x) & NotManager(x) & NotHasLunchAtHome(x) & NotAppearsInCompanyToday(x) & NotWorksRemotelyFromHome(x)", "NotAppearsInCompanyToday(x) & NotManager(x) & NotHasLunchAtHome(x) & NotAppearsInCompanyToday(x) & NotWorksRemotelyFromHome(x)", "NotAppearsInCompanyToday(x) & NotManager(x) & NotHasLunchAtHome(x) & NotAppearsInCompanyToday(x) & NotWorksRemotelyFromHome(x)", "NotAppearsInCompanyToday(x) & NotManager(x) & NotHasLunchAtHome(x) & NotAppearsInCompanyToday(x) & NotWorksRemotelyFromHome(x)", "NotAppearsInCompanyToday(x) & NotManager(x) & NotHasLunchAtHome(x) & NotAppearsInCompanyToday(x) & NotWorksRemotelyFromHome(x)", "NotAppearsInCompanyToday(x) & NotManager(x) & NotHasLunchAtHome(x) & NotAppearsInCompanyToday(x) & NotWorksRemotelyFromHome(x)", "NotAppearsInCompanyToday(x) & NotManager(x) & NotHasLunchAtHome(x) & NotAppearsInCompanyToday(x) & NotWorksRemotelyFromHome(x)", "NotAppearsInCompanyToday(x) & NotManager(x) & NotHasLunchAtHome(x) & NotAppearsInCompanyToday(x) & NotWorksRemotelyFromHome(x)", "NotAppearsInCompanyToday(x) & NotManager(x) & NotHasLunchAtHome(x) & NotAppearsInCompanyToday(x) & NotWorksRemotelyFromHome(x)", "NotAppearsInCompanyToday(x) & NotManager(x) & NotHasLunchAtHome(x) & NotAppearsInCompanyToday(x) & NotWorksRemotelyFromHome(x)", "NotAppearsInCompanyToday(x) & NotManager(x) & NotHasLunchAtHome(x) & NotAppearsInCompanyToday(x) & NotWorksRemotelyFromHome(x)", "NotAppearsInCompanyToday(x) & NotManager(x) & NotHasLunchAtHome(x) & NotAppearsInCompanyToday(x) & NotWorksRemotelyFromHome(x)", "NotAppearsInCompanyToday(x) & NotManager(x) & NotHasLunchAtHome(x) & NotAppearsInCompanyToday(x) & NotWorksRemotelyFromHome(x)", "NotAppearsInCompanyToday(x) & NotManager(x) & NotHasLunchAtHome(x) & NotAppearsInCompanyToday(x) & NotWorksRemotelyFromHome(x)", "NotAppearsInCompanyToday(x) & NotManager(x) & NotHasLunchAtHome(x) & NotAppearsInCompanyToday(x) & NotWorksRemotelyFromHome(x)", "NotAppearsInCompanyToday(x) & NotManager(x) & NotHasLunchAtHome(x) & NotAppearsInCompanyToday(x) & NotWorksRemotelyFromHome(x)", "NotAppearsInCompanyToday(x) & NotManager(x) & NotHasLunchAtHome(x) & NotAppearsInCompanyToday(x) & NotWorksRemotelyFromHome(x)", "NotAppearsInCompanyToday(x) & NotManager(x) & NotHasLunchAtHome(x) & NotAppearsInCompanyToday(x) & NotWorksRemotelyFromHome(x)", "NotAppearsInCompanyToday(x) & NotManager(x) & NotHasLunchAtHome(x) & NotAppearsInCompanyToday(x) & NotWorksRemotelyFromHome(x)", "NotAppearsInCompanyToday(x) & NotManager(x) & NotHasLunchAtHome(x) & NotAppearsInCompanyToday(x) & NotWorksRemotelyFromHome(x)", "NotAppearsInCompanyToday(x) & NotManager(x) & NotHasLunchAtHome(x) & NotAppearsInCompanyToday(x) & NotWorksRemotelyFromHome(x)", "NotAppearsInCompanyToday(x) & NotManager(x) & NotHasLunchAtHome(x) & NotAppearsInCompanyToday(x) & NotWorksRemotelyFromHome(x)", "NotAppearsInCompanyToday(x) & NotManager(x) & NotHasLunchAtHome(x) & NotAppearsInCompanyToday(x) & NotWorksRemotelyFromHome(x)", "NotAppearsInCompanyToday(x) & NotManager(x) & NotHasLunchAtHome(x) & NotAppearsInCompanyToday(x) & NotWorksRemotelyFromHome(x)", "NotAppearsInCompanyToday(x) & NotManager(x) & NotHasLunchAtHome(x) & NotAppearsInCompanyToday(x) & NotWorksRemotelyFromHome(x)", "NotAppearsInCompanyToday(x) & NotManager(x) & NotHasLunchAtHome(x) & NotAppearsInCompanyToday(x) & NotWorksRemotelyFromHome(x)", "NotAppearsInCompanyToday(x) & NotManager(x) & NotHasLunchAtHome(x) & NotAppearsInCompanyToday(x) & NotWorksRemotelyFromHome(x)", "NotAppearsInCompanyToday(x) & NotManager(x) & NotHasLunchAtHome(x) & NotAppearsInCompanyToday(x) & NotWorksRemotelyFromHome(x)", "NotAppearsInCompanyToday(x) & NotManager(x) & NotHasLunchAtHome(x) & NotAppearsInCompanyToday(x) & NotWorksRemotelyFromHome(x)", "NotAppearsInCompanyToday(x) & NotManager(x) & NotHasLunchAtHome(x) & NotAppearsInCompanyToday(x) & NotWorksRemotelyFromHome(x)", "NotAppearsInCompanyToday(x) & NotManager(x) & NotHasLunchAtHome(x) & NotAppearsInCompanyToday(x) & NotWorksRemotelyFromHome(x)", "NotAppearsInCompanyToday(x) & NotManager(x) & NotHasLunchAtHome(x) & NotAppearsInCompanyToday(x) & NotWorksRemotelyFromHome(x)", "NotAppearsInCompanyToday(x) & NotManager(x) & NotHasLunchAtHome(x) & NotAppearsInCompanyToday(x) & NotWorksRemotelyFromHome(x)", "NotAppearsInCompanyToday(x) & NotManager(x) & NotHasLunchAtHome(x) & NotAppearsInCompanyToday(x) & NotWorksRemotelyFromHome(x)", "NotAppearsInCompanyToday(x) & NotManager(x) & NotHasLunchAtHome(x) & NotAppearsInCompanyToday(x) & NotWorksRemotelyFromHome(x)", "NotAppearsInCompanyToday(x) & NotManager(x) & NotHasLunchAtHome(x) & NotAppearsInCompanyToday(x) & NotWorksRemotelyFromHome(x)", "NotAppearsInCompanyToday(x) & NotManager(x) & NotHasLunchAtHome(x) & NotAppearsInCompanyToday(x) & NotWorksRemotelyFromHome(x)", "NotAppearsInCompanyToday(x) & NotManager(x) & NotHasLunchAtHome(x) & NotAppearsInCompanyToday(x) & NotWorksRemotelyFromHome(x)", "NotAppearsInCompanyToday(x) & NotManager(x) & NotHasLunchAtHome(x) & NotAppearsInCompanyToday(x) & NotWorksRemotelyFromHome(x)", "NotAppearsInCompanyToday(x) & NotManager(x) & NotHasLunchAtHome(x) & NotAppearsInCompanyToday(x) & NotWorksRemotelyFromHome(x)", "NotAppearsInCompanyToday(x) & NotManager(x) & NotHasLunchAtHome(x) & NotAppearsInCompanyToday(x) & NotWorksRemotelyFromHome(x)", "NotAppearsInCompanyToday(x) & NotManager(x) & NotHasLunchAtHome(x) & NotAppearsInCompanyToday(x) & NotWorksRemotelyFromHome(x)", "NotAppearsInCompanyToday(x) & NotManager(x) & NotHasLunchAtHome(x) & NotAppearsInCompanyToday(x) & NotWorksRemotelyFromHome(x)", "NotAppearsInCompanyToday(x) & NotManager(x) & NotHasLunchAtHome(x) & NotAppearsInCompanyToday(x) & NotWorksRemotelyFromHome(x)", "NotAppearsInCompanyToday(x) & NotManager(x) & NotHasLunchAtHome(x) & NotAppearsInCompanyToday(x) & NotWorksRemotelyFromHome(x)", "NotAppearsInCompanyToday(x) & NotManager(x) & NotHasLunchAtHome(x) & NotAppearsInCompanyToday(x) & NotWorksRemotelyFromHome(x)", "NotAppearsInCompanyToday(x) & NotManager(x) & NotHasLunchAtHome(x) & NotAppearsInCompanyToday(x) & NotWorksRemotelyFromHome(x)", "NotAppearsInCompanyToday(x) & NotManager(x) & NotHasLunchAtHome(x) & NotAppearsInCompanyToday(x) & NotWorksRemotelyFromHome(x)", "NotAppearsInCompanyToday(x) & NotManager(x) & NotHasLunchAtHome(x) & NotAppearsInCompanyToday(x) & NotWorksRemotelyFromHome(x)", "NotAppearsInCompanyToday(x) & NotManager(x) & NotHasLunchAtHome(x) & NotAppearsInCompanyToday(x) & NotWorksRemotelyFromHome(x)", "NotAppearsInCompanyToday(x) & NotManager(x) & NotHasLunchAtHome(x) & NotAppearsInCompanyToday(x) & NotWorksRemotelyFromHome(x)", "NotAppearsInCompanyToday(x) & NotManager(x) & NotHasLunchAtHome(x) & NotAppearsInCompanyToday(x) & NotWorksRemotelyFromHome(x)", "NotAppearsInCompanyToday(x) & NotManager(x) & NotHasLunchAtHome(x) & NotAppearsInCompanyToday(x) & NotWorksRemotelyFromHome(x)", "NotAppearsInCompanyToday(x) & NotManager(x) & NotHasLunchAtHome(x) & NotAppearsInCompanyToday(x) & NotWorksRemotelyFromHome(x)", "NotAppearsInCompanyToday(x) & NotManager(x) & NotHasLunchAtHome(x) & NotAppearsInCompanyToday(x) & NotWorksRemotelyFromHome(x)", "NotAppearsInCompanyToday(x) & NotManager(x) & NotHasLunchAtHome(x) & NotAppearsInCompanyToday(x) & NotWorksRemotelyFromHome(x)", "NotAppearsInCompanyToday(x) & NotManager(x) & NotHasLunchAtHome(x) & NotAppearsInCompanyToday(x) & NotWorksRemotelyFromHome(x)", "NotAppearsInCompanyToday(x) & NotManager(x) & NotHasLunchAtHome(x) & NotAppearsInCompanyToday(x) & NotWorksRemotelyFromHome(x)", "NotAppearsInCompanyToday(x) & NotManager(x) & NotHasLunchAtHome(x) & NotAppearsInCompanyToday(x) & NotWorksRemotelyFromHome(x)", "NotAppearsInCompanyToday(x) & NotManager(x) & NotHasLunchAtHome(x) & NotAppearsInCompanyToday(x) & NotWorksRemotelyFromHome(x)", "NotAppearsInCompanyToday(x) & NotManager(x) & NotHasLunchAtHome(x) & NotAppearsInCompanyToday(x) & NotWorksRemotelyFromHome(x)", "NotAppearsInCompanyToday(x) & NotManager(x) & NotHasLunchAtHome(x) & NotAppearsInCompanyToday(x) & NotWorksRemotelyFromHome(x)", "NotAppearsInCompanyToday(x) & NotManager(x) & NotHasLunchAtHome(x) & NotAppearsInCompanyToday(x) & NotWorksRemotelyFromHome(x)", "NotAppearsInCompanyToday(x) & NotManager(x) & NotHasLunchAtHome(x) & NotAppearsInCompanyToday(x) & NotWorksRemotelyFromHome(x)", "NotAppearsInCompanyToday(x) & NotManager(x) & NotHasLunchAtHome(x) & NotAppearsInCompanyToday(x) & NotWorksRemotelyFromHome(x)", "NotAppearsInCompanyToday(x) & NotManager(x) & NotHasLunchAtHome(x) & NotAppearsInCompanyToday(x) & NotWorksRemotelyFromHome(x)", "NotAppearsInCompanyToday(x) & NotManager(x) & NotHasLunchAtHome(x) & NotAppearsInCompanyToday(x) & NotWorksRemotelyFromHome(x)", "NotAppearsInCompanyToday(x) & NotManager(x) & NotHasLunchAtHome(x) & NotAppearsInCompanyToday(x) & NotWorksRemotelyFromHome(x)", "NotAppearsInCompanyToday(x) & NotManager(x) & NotHasLunchAtHome(x) & NotAppearsInCompanyToday(x) & NotWorksRemotelyFromHome(x)", "NotAppearsInCompanyToday(x) & NotManager(x) & NotHasLunchAtHome(x) & NotAppearsInCompanyToday(x) & NotWorksRemotelyFromHome(x)", "NotAppearsInCompanyToday(x) & NotManager(x) & NotHasLunchAtHome(x) & NotAppearsInCompanyToday(x) & NotWorksRemotelyFromHome(x)", "NotAppearsInCompanyToday(x) & NotManager(x) & NotHasLunchAtHome(x) & NotAppearsInCompanyToday(x) & NotWorksRemotelyFromHome(x)", "NotAppearsInCompanyToday(x) & NotManager(x) & NotHasLunchAtHome(x) & NotAppearsInCompanyToday(x) & NotWorksRemotelyFromHome(x)", "NotAppearsInCompanyToday(x) & NotManager(x) & NotHasLunchAtHome(x) & NotAppearsInCompanyToday(x) & NotWorksRemotelyFromHome(x)", "NotAppearsInCompanyToday(x) & NotManager(x) & NotHasLunchAtHome(x) & NotAppearsInCompanyToday(x) & NotWorksRemotelyFromHome(x)", "NotAppearsInCompanyToday(x) & NotManager(x) & NotHasLunchAtHome(x) & NotAppearsInCompanyToday(x) & NotWorksRemotelyFromHome(x)", "NotAppearsInCompanyToday(x) & NotManager(x) & NotHasLunchAtHome(x) & NotAppearsInCompanyToday(x) & NotWorksRemotelyFromHome(x)", "NotAppearsInCompanyToday(x) & NotManager(x) & NotHasLunchAtHome(x) & NotAppearsInCompanyToday(x) & NotWorksRemotelyFromHome(x)", "NotAppearsInCompanyToday(x) & NotManager(x) & NotHasLunchAtHome(x) & NotAppearsInCompanyToday(x) & NotWorksRemotelyFromHome(x)", "NotAppearsInCompanyToday(x) & NotManager(x) & NotHasLunchAtHome(x) & NotAppearsInCompanyToday(x) & NotWorksRemotelyFromHome(x)", "NotAppearsInCompanyToday(x) & NotManager(x) & NotHasLunchAtHome(x) & NotAppearsInCompanyToday(x) & NotWorksRemotelyFromHome(x)", "NotAppearsInCompanyToday(x) & NotManager(x) & NotHasLunchAtHome(x) & NotAppearsInCompanyToday(x) & NotWorksRemotelyFromHome(x)", "NotAppearsInCompanyToday(x) & NotManager(x) & NotHasLunchAtHome(x) & NotAppearsInCompanyToday(x) & NotWorksRemotelyFromHome(x)", "NotAppearsInCompanyToday(x) & NotManager(x) & NotHasLunchAtHome(x) & NotAppearsInCompanyToday(x) & NotWorksRemotelyFromHome(x)", "NotAppearsInCompanyToday(x) & NotManager(x) & NotHasLunchAtHome(x) & NotAppearsInCompanyToday(x) & NotWorksRemotelyFromHome(x)", "NotAppearsInCompanyToday(x) & NotManager(x) & NotHasLunchAtHome(x) & NotAppearsInCompanyToday(x) & NotWorksRemotelyFromHome(x)", "NotAppearsInCompanyToday(x) & NotManager(x) & NotHasLunchAtHome(x) & NotAppearsInCompanyToday(x) & NotWorksRemotelyFromHome(x)", "NotAppearsInCompanyToday(x) & NotManager(x) & NotHasLunchAtHome(x) & NotAppearsInCompanyToday(x) & NotWorksRemotelyFromHome(x)", "NotAppearsInCompanyToday(x) & NotManager(x) & NotHasLunchAtHome(x) & NotAppearsInCompanyToday(x) & NotWorksRemotelyFromHome(x)", "NotAppearsInCompanyToday(x) & NotManager(x) & NotHasLunchAtHome(x) & NotAppearsInCompanyToday(x) & NotWorksRemotelyFromHome(x)", "NotAppearsInCompanyToday(x) & NotManager(x) & NotHasLunchAtHome(x) & NotAppearsInCompanyToday(x) & NotWorksRemotelyFromHome(x)", "NotAppearsInCompanyToday(x) & NotManager(x) & NotHasLunchAtHome(x) & NotAppearsInCompanyToday(x) & NotWorksRemotelyFromHome(x)", "NotAppearsInCompanyToday(x) & NotManager(x) & NotHasLunchAtHome(x) & NotAppearsInCompanyToday(x) & NotWorksRemotelyFromHome(x)", "NotAppearsInCompanyToday(x) & NotManager(x) & NotHasLunchAtHome(x) & NotAppearsInCompanyToday(x) & NotWorksRemotelyFromHome(x)", "NotAppearsInCompanyToday(x) & NotManager(x) & NotHasLunchAtHome(x) & NotAppearsInCompanyToday(x) & NotWorksRemotelyFromHome(x)", "NotAppearsInCompanyToday(x) & NotManager(x) & NotHasLunchAtHome(x) & NotAppearsInCompanyToday(x) & NotWorksRemotelyFromHome(x)", "NotAppearsInCompanyToday(x) & NotManager(x) & NotHasLunchAtHome(x) & NotAppearsInCompanyToday(x) & NotWorksRemotelyFromHome(x)", "NotAppearsInCompanyToday(x) & NotManager(x) & NotHasLunchAtHome(x) & NotAppearsInCompanyToday(x) & NotWorksRemotelyFromHome(x)", "NotAppearsInCompanyToday(x) & NotManager(x) & NotHasLunchAtHome(x) & NotAppearsInCompanyToday(x) & NotWorksRemotelyFromHome(x)", "NotAppearsInCompanyToday(x) & NotManager(x) & NotHasLunchAtHome(x) & NotAppearsInCompanyToday(x) & NotWorksRemotelyFromHome(x)", "NotAppearsInCompanyToday(x) & NotManager(x) & NotHasLunchAtHome(x) & NotAppearsInCompanyToday(x) & NotWorksRemotelyFromHome(x)", "NotAppearsInCompanyToday(x) & NotManager(x) & NotHasLunchAtHome(x) & NotAppearsInCompanyToday(x) & NotWorksRemotelyFromHome(x)", "NotAppearsInCompanyToday(x) & NotManager(x) & NotHasLunchAtHome(x) & NotAppearsInCompanyToday(x) & NotWorksRemotelyFromHome(x)", "NotAppearsInCompanyToday(x) & NotManager(x) & NotHasLunchAtHome(x) & NotAppearsInCompanyToday(x) & NotWorksRemotelyFromHome(x)", "NotAppearsInCompanyToday(x) & NotManager(x) & NotHasLunchAtHome(x) & NotAppearsInCompanyToday(x) & NotWorksRemotelyFromHome(x)", "NotAppearsInCompanyToday(x) & NotManager(x) & NotHasLunchAtHome(x) & NotAppearsInCompanyToday(x) & NotWorksRemotelyFromHome(x)", "NotAppearsInCompanyToday(x) & NotManager(x) & NotHasLunchAtHome(x) & NotAppearsInCompanyToday(x) & NotWorksRemotelyFromHome(x)", "NotAppearsInCompanyToday(x) & NotManager(x) & NotHasLunchAtHome(x) & NotAppearsInCompanyToday(x) & NotWorksRemotelyFromHome(x)", "NotAppearsInCompanyToday(x) & NotManager(x) & NotHasLunchAtHome(x) & NotAppearsInCompanyToday(x) & NotWorksRemotelyFromHome(x)", "NotAppearsInCompanyToday(x) & NotManager(x) & NotHasLunchAtHome(x) & NotAppearsInCompanyToday(x) & NotWorksRemotelyFromHome(x)", "NotAppearsInCompanyToday(x) & NotManager(x) & NotHasLunchAtHome(x) & NotAppearsInCompanyToday(x) & NotWorksRemotelyFromHome(x)", "NotAppearsInCompanyToday(x) & NotManager(x) & NotHasLunchAtHome(x) & NotAppearsInCompanyToday(x) & NotWorksRemotelyFromHome(x)", "NotAppearsInCompanyToday(x) & NotManager(x) & NotHasLunchAtHome(x) & NotAppearsInCompanyToday(x) & NotWorksRemotelyFromHome(x)", "NotAppearsInCompanyToday(x) & NotManager(x) & NotHasLunchAtHome(x) & NotAppearsInCompanyToday(x) & NotWorksRemotelyFromHome(x)", "NotAppearsInCompanyToday(x) & NotManager(x) & NotHasLunchAtHome(x) & NotAppearsInCompanyToday(x) & NotWorksRemotelyFromHome(x)", "NotAppearsInCompanyToday(x) & NotManager(x) & NotHasLunchAtHome(x) & NotAppearsInCompanyToday(x) & NotWorksRemotelyFromHome(x)", "NotAppearsInCompanyToday(x) & NotManager(x) & NotHasLunchAtHome(x) & NotAppearsInCompanyToday(x) & NotWorksRemotelyFromHome(x)", "NotAppearsInCompanyToday(x) & NotManager(x) & NotHasLunchAtHome(x) & NotAppearsInCompanyToday(x) & NotWorksRemotelyFromHome(x)", "NotAppearsInCompanyToday(x) & NotManager(x) & NotHasLunchAtHome(x) & NotAppearsInCompanyToday(x) & NotWorksRemotelyFromHome(x)", "NotAppearsInCompanyToday(x) & NotManager(x) & NotHasLunchAtHome(x) & NotAppearsInCompanyToday(x) & NotWorksRemotelyFromHome(x)", "NotAppearsInCompanyToday(x) & NotManager(x) & NotHasLunchAtHome(x) & NotAppearsInCompanyToday(x) & NotWorksRemotelyFromHome(x)", "NotAppearsInCompanyToday(x) & NotManager(x) & NotHasLunchAtHome(x) & NotAppearsInCompanyToday(x) & NotWorksRemotelyFromHome(x)", "NotAppearsInCompanyToday(x) & NotManager(x) & NotHasLunchAtHome(x) & NotAppearsInCompanyToday(x) & NotWorksRemotelyFromHome(x)", "NotAppearsInCompanyToday(x) & NotManager(x) & NotHasLunchAtHome(x) & NotAppearsInCompanyToday(x) & NotWorksRemotelyFromHome(x)", "NotAppearsInCompanyToday(x) & NotManager(x) & NotHasLunchAtHome(x) & NotAppearsInCompanyToday(x) & NotWorksRemotelyFromHome(x)", "NotAppearsInCompanyToday(x) & NotManager(x) & NotHasLunchAtHome(x) & NotAppearsInCompanyToday(x) & NotWorksRemotelyFromHome(x)", "NotAppearsInCompanyToday(x) & NotManager(x) & NotHasLunchAtHome(x) & NotAppearsInCompanyToday(x) & NotWorksRemotelyFromHome(x)", "NotAppearsInCompanyToday(x) & NotManager(x) & NotHasLunchAtHome(x) & NotAppearsInCompanyToday(x) & NotWorksRemotelyFromHome(x)", "NotAppearsInCompanyToday(x) & NotManager(x) & NotHasLunchAtHome(x) & NotAppearsInCompanyToday(x) & NotWorksRemotelyFromHome(x)", "NotAppearsInCompanyToday(x) & NotManager(x) & NotHasLunchAtHome(x) & NotAppearsInCompanyToday(x) & NotWorksRemotelyFromHome(x)", "NotAppearsInCompanyToday(x) & NotManager(x) & NotHasLunchAtHome(x) & NotAppearsInCompanyToday(x) & NotWorksRemotelyFromHome(x)", "NotAppearsInCompanyToday(x) & NotManager(x) & NotHasLunchAtHome(x) & NotAppearsInCompanyToday(x) & NotWorksRemotelyFromHome(x)", "NotAppearsInCompanyToday(x) & NotManager(x) & NotHasLunchAtHome(x) & NotAppearsInCompanyToday(x) & NotWorksRemotelyFromHome(x)", "NotAppearsInCompanyToday(x) & NotManager(x) & NotHasLunchAtHome(x) & NotAppearsInCompanyToday(x) & NotWorksRemotelyFromHome(x)"], "conclusion": "NotAppearsInCompanyToday(x) & NotManager(x) & NotHasLunchAtHome(x", "error_type": "<class 'nltk.sem.logic.LogicalExpressionException'>", "error_message": "End of input found.  Expected token ')'.\nNotAppearsInCompanyToday(x) & NotManager(x) & NotHasLunchAtHome(x\n                                                                 ^", "stack_trace": "Traceback (most recent call last):\n  File \"/data/gpfs/projects/punim0478/bansaab/linc2/eval/tasks/owafoltask.py\", line 577, in _process_neurosymbolic\n    parsed = json.loads(gen)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/json/__init__.py\", line 346, in loads\n    return _default_decoder.decode(s)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/json/decoder.py\", line 337, in decode\n    obj, end = self.raw_decode(s, idx=_w(s, 0).end())\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/json/decoder.py\", line 355, in raw_decode\n    raise JSONDecodeError(\"Expecting value\", s, err.value) from None\njson.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/sem/logic.py\", line 270, in token\n    tok = self._buffer[self._currentIndex]\nIndexError: list index out of range\n\nThe above exception was the direct cause of the following exception:\n\nTraceback (most recent call last):\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/sem/logic.py\", line 562, in assertNextToken\n    tok = self.token()\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/sem/logic.py\", line 276, in token\n    raise ExpectedMoreTokensException(self._currentIndex + 1) from e\nnltk.sem.logic.ExpectedMoreTokensException: End of input found.  More tokens expected.\n\nThe above exception was the direct cause of the following exception:\n\nTraceback (most recent call last):\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/sem/logic.py\", line 154, in parse\n    result = self.process_next_expression(None)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/sem/logic.py\", line 297, in process_next_expression\n    return self.attempt_adjuncts(accum, context)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/sem/logic.py\", line 323, in attempt_adjuncts\n    expression = self.attempt_BooleanExpression(expression, context)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/sem/logic.py\", line 485, in attempt_BooleanExpression\n    factory, expression, self.process_next_expression(tok)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/sem/logic.py\", line 290, in process_next_expression\n    accum = self.handle(tok, context)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/sem/logic.py\", line 303, in handle\n    return self.handle_variable(tok, context)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/sem/logic.py\", line 359, in handle_variable\n    self.assertNextToken(Tokens.CLOSE)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/sem/logic.py\", line 564, in assertNextToken\n    raise ExpectedMoreTokensException(\nnltk.sem.logic.ExpectedMoreTokensException: End of input found.  Expected token ')'.\n\nThe above exception was the direct cause of the following exception:\n\nTraceback (most recent call last):\n  File \"/data/gpfs/projects/punim0478/bansaab/linc2/eval/tasks/utils.py\", line 215, in evaluate\n    c = read_expr(conclusion)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/sem/logic.py\", line 957, in fromstring\n    return cls._logic_parser.parse(s, signature)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/sem/logic.py\", line 159, in parse\n    raise LogicalExpressionException(None, msg) from e\nnltk.sem.logic.LogicalExpressionException: End of input found.  Expected token ')'.\nNotAppearsInCompanyToday(x) & NotManager(x) & NotHasLunchAtHome(x\n                                                                 ^\n"}
{"timestamp": "2025-09-16T17:20:08.625695", "premises": ["all x. (Employee(x) & SchedulesMeetingWithCustomers(x) -> AppearsInCompanyToday(x))", "all x. (HasLunchInCompany(x) -> SchedulesMeetingWithCustomers(x))", "all x. (Employee(x) -> (HasLunchInCompany(x) | HasLunchAtHome(x)))", "all x. (HasLunchAtHome(x) -> WorksRemotelyFromHome(x))", "all x. (InOtherCountries(x) -> WorksRemotelyFromHome(x))", "not all x. (Manager(x) -> WorksRemotelyFromHome(x))"], "conclusion": "((Manager(James) & AppearsInCompanyToday(James)) | ((not Manager(James) & not AppearsInCompanyToday(James)))", "error_type": "<class 'nltk.sem.logic.LogicalExpressionException'>", "error_message": "End of input found.  Expected token ')'.\n((Manager(James) & AppearsInCompanyToday(James)) | ((not Manager(James) & not AppearsInCompanyToday(James)))\n                                                                                                            ^", "stack_trace": "Traceback (most recent call last):\n  File \"/data/gpfs/projects/punim0478/bansaab/linc2/eval/tasks/owafoltask.py\", line 577, in _process_neurosymbolic\n    parsed = json.loads(gen)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/json/__init__.py\", line 346, in loads\n    return _default_decoder.decode(s)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/json/decoder.py\", line 337, in decode\n    obj, end = self.raw_decode(s, idx=_w(s, 0).end())\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/json/decoder.py\", line 355, in raw_decode\n    raise JSONDecodeError(\"Expecting value\", s, err.value) from None\njson.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/sem/logic.py\", line 270, in token\n    tok = self._buffer[self._currentIndex]\nIndexError: list index out of range\n\nThe above exception was the direct cause of the following exception:\n\nTraceback (most recent call last):\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/sem/logic.py\", line 562, in assertNextToken\n    tok = self.token()\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/sem/logic.py\", line 276, in token\n    raise ExpectedMoreTokensException(self._currentIndex + 1) from e\nnltk.sem.logic.ExpectedMoreTokensException: End of input found.  More tokens expected.\n\nThe above exception was the direct cause of the following exception:\n\nTraceback (most recent call last):\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/sem/logic.py\", line 154, in parse\n    result = self.process_next_expression(None)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/sem/logic.py\", line 290, in process_next_expression\n    accum = self.handle(tok, context)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/sem/logic.py\", line 315, in handle\n    return self.handle_open(tok, context)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/sem/logic.py\", line 450, in handle_open\n    self.assertNextToken(Tokens.CLOSE)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/sem/logic.py\", line 564, in assertNextToken\n    raise ExpectedMoreTokensException(\nnltk.sem.logic.ExpectedMoreTokensException: End of input found.  Expected token ')'.\n\nThe above exception was the direct cause of the following exception:\n\nTraceback (most recent call last):\n  File \"/data/gpfs/projects/punim0478/bansaab/linc2/eval/tasks/utils.py\", line 215, in evaluate\n    c = read_expr(conclusion)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/sem/logic.py\", line 957, in fromstring\n    return cls._logic_parser.parse(s, signature)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/sem/logic.py\", line 159, in parse\n    raise LogicalExpressionException(None, msg) from e\nnltk.sem.logic.LogicalExpressionException: End of input found.  Expected token ')'.\n((Manager(James) & AppearsInCompanyToday(James)) | ((not Manager(James) & not AppearsInCompanyToday(James)))\n                                                                                                            ^\n"}
{"timestamp": "2025-09-16T17:23:05.618664", "premises": ["all x. (InfectiousDisease(x) -> CausedBy(x, MonkeypoxVirus))", "all x. (MonkeypoxVirus -> OccursIn(x, Animals))", "all x. (Animals -> Mammals)", "all x. (Mammals -> Animals)", "all x. (Symptons(x) -> Monkeypox)", "all x. (Symptons(x) -> Glu)", "all x. (Glu -> Tired)", "exists x. (Animal(x))", "exists x. (Animal(x) & Glu(x))", "exists x. (Animal(x) & Tired(x))", "exists x. (Mammal(x))", "exists x. (Mammal(x) & Animal(x))", "exists x. (Mammal(x) & Glu(x))", "exists x. (Mammal(x) & Tired(x))", "exists x. (Animal(x) & Mammal(x))", "exists x. (Animal(x) & Glu(x))", "exists x. (Animal(x) & Tired(x))", "exists x. (Glu(x) & Tired(x))", "exists x. (Animal(x))", "exists x. (Mammal(x))", "exists x. (Glu(x))", "exists x. (Tired(x))", "exists x. (Animal(x) & Mammal(x) & Glu(x) & Tired(x))", "exists x. (Animal(x) & Mammal(x) & Tired(x))", "exists x. (Mammal(x) & Tired(x))", "exists x. (Animal(x))", "exists x. (Glu(x))", "exists x. (Tired(x))", "exists x. (Mammal(x) & Glu(x))", "exists x. (Mammal(x) & Tired(x))", "exists x. (Animal(x) & Mammal(x) & Glu(x))", "exists x. (Animal(x) & Mammal(x) & Tired(x))", "exists x. (Glu(x) & Tired(x))", "exists x. (Animal(x))", "exists x. (Mammal(x))", "exists x. (Glu(x))", "exists x. (Tired(x))", "exists x. (Animal(x) & Mammal(x) & Glu(x) & Tired(x))", "exists x. (Animal(x) & Mammal(x) & Glu(x))", "exists x. (Animal(x) & Mammal(x) & Tired(x))", "exists x. (Mammal(x) & Tired(x))", "exists x. (Animal(x))", "exists x. (Glu(x))", "exists x. (Tired(x))", "exists x. (Animal(x) & Mammal(x) & Glu(x))", "exists x. (Animal(x) & Mammal(x) & Tired(x))", "exists x. (Mammal(x) & Glu(x))", "exists x. (Mammal(x) & Tired(x))", "exists x. (Animal(x) & Mammal(x) & Glu(x))", "exists x. (Animal(x) & Mammal(x) & Tired(x))", "exists x. (Glu(x) & Tired(x))", "exists x. (Animal(x))", "exists x. (Mammal(x))", "exists x. (Glu(x))", "exists x. (Tired(x))", "exists x. (Animal(x) & Mammal(x) & Glu(x) & Tired(x))", "exists x. (Animal(x) & Mammal(x) & Glu(x))", "exists x. (Animal(x) & Mammal(x) & Tired(x))", "exists x. (Mammal(x) & Tired(x))", "exists x. (Animal(x))", "exists x. (Glu(x))", "exists x. (Tired(x))", "exists x. (Mammal(x) & Glu(x))", "exists x. (Mammal(x) & Tired(x))", "exists x. (Animal(x) & Mammal(x) & Glu(x))", "exists x. (Animal(x) & Mammal(x) & Tired(x))", "exists x. (Glu(x) & Tired(x))", "exists x. (Animal(x))", "exists x. (Mammal(x))", "exists x. (Glu(x))", "exists x. (Tired(x))", "exists x. (Animal(x) & Mammal(x) & Glu(x) & Tired(x))", "exists x. (Animal(x) & Mammal(x) & Glu(x))", "exists x. (Animal(x) & Mammal(x) & Tired(x))", "exists x. (Mammal(x) & Tired(x))", "exists x. (Animal(x))", "exists x. (Glu(x))", "exists x. (Tired(x))", "exists x. (Animal(x) & Mammal(x) & Glu(x))", "exists x. (Animal(x) & Mammal(x) & Tired(x))", "exists x. (Mammal(x) & Glu(x))", "exists x. (Mammal(x) & Tired(x))", "exists x. (Animal(x) & Mammal(x) & Glu(x))", "exists x. (Animal(x) & Mammal(x) & Tired(x))", "exists x. (Glu(x) & Tired(x))", "exists x. (Animal(x))", "exists x. (Mammal(x))", "exists x. (Glu(x))", "exists x. (Tired(x))", "exists x. (Animal(x) & Mammal(x) & Glu(x) & Tired(x))", "exists x. (Animal(x) & Mammal(x) & Glu(x))", "exists x. (Animal(x) & Mammal(x) & Tired(x))", "exists x. (Mammal(x) & Tired(x))", "exists x. (Animal(x))", "exists x. (Glu(x))", "exists x. (Tired(x))", "exists x. (Mammal(x) & Glu(x))", "exists x. (Mammal(x) & Tired(x))", "exists x. (Animal(x) & Mammal(x) & Glu(x))", "exists x. (Animal(x) & Mammal(x) & Tired(x))", "exists x. (Glu(x) & Tired(x))", "exists x. (Animal(x))", "exists x. (Mammal(x))", "exists x. (Glu(x))", "exists x. (Tired(x))", "exists x. (Animal(x) & Mammal(x) & Glu(x) & Tired(x))", "exists x. (Animal(x) & Mammal(x) & Glu(x))", "exists x. (Animal(x) & Mammal(x) & Tired(x))", "exists x. (Mammal(x) & Tired(x))", "exists x. (Animal(x))", "exists x. (Glu(x))", "exists x. (Tired(x))", "exists x. (Mammal(x) & Glu(x))", "exists x. (Mammal(x) & Tired(x))", "exists x. (Animal(x) & Mammal(x) & Glu(x))", "exists x. (Animal(x) & Mammal(x) & Tired(x))", "exists x. (Glu(x) & Tired(x))", "exists x. (Animal(x))", "exists x. (Mammal(x))", "exists x. (Glu(x))", "exists x. (Tired(x))", "exists x. (Animal(x) & Mammal(x) & Glu(x) & Tired(x))", "exists x. (Animal(x) & Mammal(x) & Glu(x))", "exists x. (Animal(x) & Mammal(x) & Tired(x))", "exists x. (Mammal(x) & Tired(x))", "exists x. (Animal(x))", "exists x. (Glu(x))", "exists x. (Tired(x))", "exists x. (Mammal(x) & Glu(x))", "exists x. (Mammal(x) & Tired(x))", "exists x. (Animal(x) & Mammal(x) & Glu(x))", "exists x. (Animal(x) & Mammal(x) & Tired(x))", "exists x. (Glu(x) & Tired(x))", "exists x. (Animal(x))", "exists x. (Mammal(x))", "exists x. (Glu(x))", "exists x. (Tired(x))", "exists x. (Animal(x) & Mammal(x) & Glu(x) & Tired(x))", "exists x. (Animal(x) & Mammal(x) & Glu(x))", "exists x. (Animal(x) & Mammal(x) & Tired(x))", "exists x. (Mammal(x) & Tired(x))", "exists x. (x is Animal) & exists x. (x is Mammal)", "exists x. (Animal(x) & Mammal(x))", "exists x. (Glu(x)) & exists x. (Tired(x))", "exists x. (Glu(x) & Tired(x))", "exists x. (Animal(x)) & exists x. (Mammal(x))", "exists x. (Animal(x) & Mammal(x))", "exists x. (Glu(x)) & exists x. (Tired(x))", "exists x. (Glu(x) & Tired(x))", "exists x. (Animal(x)) & exists x. (Mammal(x))", "exists x. (Animal(x) & Mammal(x))", "exists x. (Glu(x)) & exists x. (Tired(x))", "exists x. (Glu(x) & Tired(x))", "exists x. (Animal(x)) & exists x. (Mammal(x))", "exists x. (Animal(x) & Mammal(x))", "exists x. (Glu(x)) & exists x. (Tired(x))", "exists x. (Glu(x) & Tired(x))", "exists x. (Animal(x)) & exists x. (Mammal(x))", "exists x. (Animal(x) & Mammal(x))", "exists x. (Glu(x)) & exists x. (Tired(x))", "exists x. (Glu(x) & Tired(x))", "exists x. (Animal(x)) & exists x. (Mammal(x))", "exists x. (Animal(x) & Mammal(x))", "exists x. (Glu(x)) & exists x. (Tired(x))", "exists x. (Glu(x) & Tired(x))", "exists x. (Animal(x)) & exists x. (Mammal(x))", "exists x. (Animal(x) & Mammal(x))", "exists x. (Glu(x)) & exists x. (Tired(x))", "exists x. (Glu(x) & Tired(x))", "exists x. (Animal(x)) & exists x. (Mammal(x))", "exists x. (Animal(x) & Mammal(x))", "exists x. (Glu(x)) & exists x. (Tired(x))", "exists x. (Glu(x) & Tired(x))", "exists x. (Animal(x)) & exists x. (Mammal(x))", "exists x. (Animal(x) & Mammal(x))", "exists x. (Glu(x)) & exists x. (Tired(x))", "exists x. (Glu(x) & Tired(x))", "exists x. (Animal(x)) & exists x. (Mammal(x))", "exists x. (Animal(x) & Mammal(x))", "exists x. (Glu(x)) & exists x. (Tired(x))", "exists x. (Glu(x) & Tired(x))", "exists x. (Animal(x)) & exists x. (Mammal(x))", "exists x. (Animal(x) & Mammal(x))", "exists x. (Glu(x)) & exists x. (Tired(x))", "exists x. (Glu(x) & Tired(x))", "exists x. (Animal(x)) & exists x. (Mammal(x))", "exists x. (Animal(x) & Mammal(x))", "exists x. (Glu(x)) & exists x. (Tired(x))", "exists x. (Glu(x) & Tired(x))", "exists x. (Animal(x)) & exists x. (Mammal(x))", "exists x. (Animal(x) & Mammal(x))", "exists x. (Glu(x)) & exists x. (Tired(x))", "exists x. (Glu(x) & Tired(x))", "exists x. (Animal(x)) & exists x. (Mammal(x))", "exists x. (Animal(x) & Mammal(x))", "exists x. (Glu(x)) & exists x. (Tired(x))", "exists x. (Glu(x) & Tired(x))", "exists x. (Animal(x)) & exists x. (Mammal(x))", "exists x. (Animal(x) & Mammal(x))", "exists x. (Glu(x)) & exists x. (Tired(x))", "exists x. (Glu(x) & Tired(x))", "exists x. (Animal(x)) & exists x. (Mammal(x))", "exists x. (Animal(x) & Mammal(x))", "exists x. (Glu(x)) & exists x. (Tired(x))", "exists x. (Glu(x) & Tired(x))", "exists x. (Animal(x)) & exists x. (Mammal(x))", "exists x. (Animal(x) & Mammal(x))", "exists x. (Glu(x)) & exists x. (Tired(x))", "exists x. (Glu(x) & Tired(x))", "exists x. (Animal(x)) & exists x. (Mammal(x))", "exists x. (Animal(x) & Mammal(x))", "exists x. (Glu(x)) & exists x. (Tired(x))", "exists x. (Glu(x) & Tired(x))", "exists x. (Animal(x)) & exists x. (Mammal(x))", "exists x. (Animal(x) & Mammal(x))", "exists x. (Glu(x)) & exists x. (Tired(x))", "exists x. (Glu(x) & Tired(x))", "exists x. (Animal(x)) & exists x. (Mammal(x))", "exists x. (Animal(x) & Mammal(x))", "exists x. (Glu(x)) & exists x. (Tired(x))", "exists x. (Glu(x) & Tired(x))", "exists x. (Animal(x)) & exists x. (Mammal(x))", "exists x. (Animal(x) & Mammal(x))", "exists x. (Glu(x)) & exists x. (Tired(x))", "exists x. (Glu(x) & Tired(x))", "exists x. (Animal(x)) & exists x. (Mammal(x))", "exists x. (Animal(x) & Mammal(x))", "exists x. (Glu(x)) & exists x. (Tired(x))", "exists x. (Glu(x) & Tired(x))", "exists x. (Animal(x)) & exists x. (Mammal(x))", "exists x. (Animal(x) & Mammal(x))", "exists x. (Glu(x)) & exists x. (Tired(x))", "exists x. (Glu(x) & Tired(x))", "exists x. (Animal(x)) & exists x. (Mammal(x))", "exists x. (Animal(x) & Mammal(x))", "exists x. (Glu(x)) & exists x. (Tired(x))", "exists x. (Glu(x) & Tired(x))", "exists x. (Animal(x)) & exists x. (Mammal(x))", "exists x. (Animal(x) & Mammal(x))", "exists x. (Glu(x)) & exists x. (Tired(x))", "exists x. (Glu(x) & Tired(x))", "exists x. (Animal(x)) & exists x. (Mammal(x))", "exists x. (Animal(x) & Mammal(x))", "exists x. (Glu(x)) & exists x. (Tired(x))", "exists x. (Glu(x) & Tired(x))", "exists x. (Animal(x)) & exists x. (Mammal(x))", "exists x. (Animal(x) & Mammal(x))", "exists x. (Glu(x)) & exists x. (Tired(x))", "exists x. (Glu(x) & Tired(x))", "exists x. (Animal(x)) & exists x. (Mammal(x))", "exists x. (Animal(x) & Mammal(x))", "exists x. (Glu(x)) & exists x. (Tired(x))", "exists x. (Glu(x) & Tired(x))", "exists x. (Animal(x)) & exists x. (Mammal(x))", "exists x. (Animal(x) & Mammal(x))", "exists x. (Glu(x)) & exists x. (Tired(x))", "exists x. (Glu(x) & Tired(x))", "exists x. (Animal(x)) & exists x. (Mammal(x))", "exists x. (Animal(x) & Mammal(x))", "exists x. (Glu(x)) & exists x. (Tired(x))", "exists x. (Glu(x) & Tired(x))", "exists x. (Animal(x)) & exists x. (Mammal(x))", "exists x. (Animal(x) & Mammal(x))", "exists x. (Glu(x)) & exists x. (Tired(x))", "exists x. (Glu(x) & Tired(x))", "exists x. (Animal(x)) & exists x. (Mammal(x))", "exists x. (Animal(x) & Mammal(x))", "exists x. (Glu(x)) & exists x. (Tired(x))", "exists x. (Glu(x) & Tired(x))", "exists x. (Animal(x)) & exists x. (Mammal(x))", "exists x. (Animal(x) & Mammal(x))", "exists x. (Glu(x)) & exists x. (Tired(x))", "exists x. (Glu(x) & Tired(x))", "exists x. (Animal(x)) & exists x. (Mammal(x))", "exists x. (Animal(x) & Mammal(x))", "exists x. (Glu(x)) & exists x. (Tired(x))", "exists x. (Glu(x) & Tired(x))", "exists x. (Animal(x)) & exists x. (Mammal(x))", "exists x. (Animal(x) & Mammal(x))", "exists x. (Glu(x)) & exists x. (Tired(x))", "exists x. (Glu(x) & Tired(x))", "exists x. (Animal(x)) & exists x. (Mammal(x))", "exists x. (Animal(x) & Mammal(x))", "exists x. (Glu(x)) & exists x. (Tired(x))", "exists x. (Glu(x) & Tired(x))", "exists x. (Animal(x)) & exists x. (Mammal(x))", "exists x. (Animal(x) & Mammal(x))", "exists x. (Glu(x)) & exists x. (Tired(x))", "exists x. (Glu(x) & Tired(x))", "exists x. (Animal(x)) & exists x. (Mammal(x))", "exists x. (Animal(x) & Mammal(x))", "exists x. (Glu(x)) & exists x. (Tired(x))", "exists x. (Glu(x) & Tired(x))", "exists x. (Animal(x)) & exists x. (Mammal(x))", "exists x. (Animal(x) & Mammal(x))", "exists x. (Glu(x)) & exists x. (Tired(x))", "exists x. (Glu(x) & Tired(x))", "exists x. (Animal(x)) & exists x. (Mammal(x))", "exists x. (Animal(x) & Mammal(x))", "exists x. (Glu(x)) & exists x. (Tired(x))", "exists x. (Glu(x) & Tired(x))", "exists x. (Animal(x)) & exists x. (Mammal(x))", "exists x. (Animal(x) & Mammal(x))", "exists x. (Glu(x)) & exists x. (Tired(x))", "exists x. (Glu(x) & Tired(x))", "exists x. (Animal(x)) & exists x. (Mammal(x))", "exists x. (Animal(x) & Mammal(x))", "exists x. (Glu(x)) & exists x. (Tired(x))", "exists x. (Glu(x) & Tired(x))", "exists x. (Animal(x)) & exists x. (Mammal(x))", "exists x. (Animal(x) & Mammal(x))", "exists x. (Glu(x)) & exists x. (Tired(x))", "exists x. (Glu(x) & Tired(x))", "exists x. (Animal(x)) & exists x. (Mammal(x))", "exists x. (Animal(x) & Mammal(x))", "exists x. (Glu(x)) & exists x. (Tired(x))", "exists x. (Glu(x) & Tired(x))", "exists x. (Animal(x)) & exists x. (Mammal(x))", "exists x. (Animal(x) & Mammal(x))", "exists x. (Glu(x)) & exists x. (Tired(x))", "exists x. (Glu(x) & Tired(x))", "exists x. (Animal(x)) & exists x. (Mammal(x))", "exists x. (Animal(x) & Mammal(x))", "exists x. (Glu(x)) & exists x. (Tired(x))", "exists x. (Glu(x) & Tired(x))", "exists x. (Animal(x)) & exists x. (Mammal(x))", "exists x. (Animal(x) & Mammal(x))", "exists x. (Glu(x)) & exists x. (Tired(x))", "exists x. (Glu(x) & Tired(x))", "exists x. (Animal(x)) & exists x. (Mammal(x))", "exists x. (Animal(x) & Mammal(x))", "exists x. (Glu(x)) & exists x. (Tired(x))", "exists x. (Glu(x) & Tired(x))", "exists x. (Animal(x)) & exists x. (Mammal(x))", "exists x. (Animal(x) & Mammal(x))", "exists x. (Glu(x)) & exists x. (Tired(x))", "exists x. (Glu(x) & Tired(x))", "exists x. (Animal(x)) & exists x. (Mammal(x))", "exists x. (Animal(x) & Mammal(x))", "exists x. (Glu(x)) & exists x. (Tired(x))", "exists x. (Glu(x) & Tired(x))", "exists x. (Animal(x)) & exists x. (Mammal(x))", "exists x. (Animal(x) & Mammal(x))", "exists x. (Glu(x)) & exists x. (Tired(x))", "exists x. (Glu(x) & Tired(x))", "exists x. (Animal(x)) & exists x. (Mammal(x))", "exists x. (Animal(x) & Mammal(x))", "exists x. (Glu(x)) & exists x. (Tired(x))", "exists x. (Glu(x) & Tired(x))", "exists x. (Animal(x)) & exists x. (Mammal(x))", "exists x. (Animal(x) & Mammal(x))", "exists x. (Glu(x)) & exists x. (Tired(x))", "exists x. (Glu(x) & Tired(x))", "exists x. (Animal(x)) & exists x. (Mammal(x))", "exists x. (Animal(x) & Mammal(x))", "exists x. (Glu(x)) & exists x. (Tired(x))", "exists x. (Glu(x) & Tired(x))", "exists x. (Animal(x)) & exists x. (Mammal(x))", "exists x. (Animal(x) & Mammal(x))", "exists x. (Glu(x)) & exists x. (Tired(x))", "exists x. (Glu(x) & Tired(x))", "exists x. (Animal(x)) & exists x. (Mammal(x))", "exists x. (Animal(x) & Mammal(x))", "exists x. (Glu(x)) & exists x. (Tired(x))", "exists x. (Glu(x) & Tired(x))", "exists x. (Animal(x)) & exists x. (Mammal(x))", "exists x. (Animal(x) & Mammal(x))", "exists x. (Glu(x)) & exists x. (Tired(x))", "exists x. (Glu(x) & Tired(x))", "exists x. (Animal(x)) & exists x. (Mammal(x))", "exists x. (Animal(x) & Mammal(x))", "exists x. (Glu(x)) & exists x. (Tired(x))", "exists x. (Glu(x) & Tired(x))", "exists x. (Animal(x)) & exists x. (Mammal(x))", "exists x. (Animal(x) & Mammal(x))", "exists x. (Glu(x)) & exists x. (Tired(x))", "exists x. (Glu(x) & Tired(x))", "exists x. (Animal(x)) & exists x. (Mammal(x))", "exists x. (Animal(x) & Mammal(x))", "exists x. (Glu(x)) & exists x. (Tired(x))", "exists x. (Glu(x) & Tired(x))", "exists x. (Animal(x)) & exists x. (Mammal(x))", "exists x. (Animal(x) & Mammal(x))", "exists x. (Glu(x)) & exists x. (Tired(x))", "exists x. (Glu(x) & Tired(x))", "exists x. (Animal(x)) & exists x. (Mammal(x))", "exists x. (Animal(x) & Mammal(x))", "exists x. (Glu(x)) & exists x. (Tired(x))", "exists x. (Glu(x) & Tired(x))", "exists x. (Animal(x)) & exists x. (Mammal(x))", "exists x. (Animal(x) & Mammal(x))", "exists x. (Glu(x)) & exists x. (Tired(x))", "exists x. (Glu(x) & Tired(x))", "exists x. (Animal(x)) & exists x. (Mammal(x))", "exists x. (Animal(x) & Mammal(x))"], "conclusion": "exists x. (Gl", "error_type": "<class 'nltk.sem.logic.LogicalExpressionException'>", "error_message": "End of input found.  Expected token ')'.\nexists x. (Gl\n             ^", "stack_trace": "Traceback (most recent call last):\n  File \"/data/gpfs/projects/punim0478/bansaab/linc2/eval/tasks/owafoltask.py\", line 577, in _process_neurosymbolic\n    parsed = json.loads(gen)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/json/__init__.py\", line 346, in loads\n    return _default_decoder.decode(s)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/json/decoder.py\", line 337, in decode\n    obj, end = self.raw_decode(s, idx=_w(s, 0).end())\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/json/decoder.py\", line 355, in raw_decode\n    raise JSONDecodeError(\"Expecting value\", s, err.value) from None\njson.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/sem/logic.py\", line 270, in token\n    tok = self._buffer[self._currentIndex]\nIndexError: list index out of range\n\nThe above exception was the direct cause of the following exception:\n\nTraceback (most recent call last):\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/sem/logic.py\", line 562, in assertNextToken\n    tok = self.token()\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/sem/logic.py\", line 276, in token\n    raise ExpectedMoreTokensException(self._currentIndex + 1) from e\nnltk.sem.logic.ExpectedMoreTokensException: End of input found.  More tokens expected.\n\nThe above exception was the direct cause of the following exception:\n\nTraceback (most recent call last):\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/sem/logic.py\", line 154, in parse\n    result = self.process_next_expression(None)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/sem/logic.py\", line 290, in process_next_expression\n    accum = self.handle(tok, context)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/sem/logic.py\", line 312, in handle\n    return self.handle_quant(tok, context)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/sem/logic.py\", line 427, in handle_quant\n    accum = self.process_next_expression(tok)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/sem/logic.py\", line 290, in process_next_expression\n    accum = self.handle(tok, context)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/sem/logic.py\", line 315, in handle\n    return self.handle_open(tok, context)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/sem/logic.py\", line 450, in handle_open\n    self.assertNextToken(Tokens.CLOSE)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/sem/logic.py\", line 564, in assertNextToken\n    raise ExpectedMoreTokensException(\nnltk.sem.logic.ExpectedMoreTokensException: End of input found.  Expected token ')'.\n\nThe above exception was the direct cause of the following exception:\n\nTraceback (most recent call last):\n  File \"/data/gpfs/projects/punim0478/bansaab/linc2/eval/tasks/utils.py\", line 215, in evaluate\n    c = read_expr(conclusion)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/sem/logic.py\", line 957, in fromstring\n    return cls._logic_parser.parse(s, signature)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/sem/logic.py\", line 159, in parse\n    raise LogicalExpressionException(None, msg) from e\nnltk.sem.logic.LogicalExpressionException: End of input found.  Expected token ')'.\nexists x. (Gl\n             ^\n"}
{"timestamp": "2025-09-16T17:23:05.640066", "premises": ["all x. (Monkeypox(x) -> MonkeypoxVirus(x))", "all x. (MonkeypoxVirus(x) -> OccurIn(x, Animals) & (Humans(x) | Animal(x)))", "all x. (Humans(x) -> Mammals(x))", "all x. (Mammals(x) -> Animals(x))", "all x. (Symptons(x) -> Fever(x) | Headache(x) | MusclePains(x) | FeelingTired(x))", "all x. (FeelingTired(x) -> GetGlu(x))"], "conclusion": "exists x. (OccurIn(x, Animals))", "error_type": "<class 'nltk.inference.prover9.Prover9FatalException'>", "error_message": "(FATAL)\n%%ERROR: The following symbols are used with multiple arities: Animals/1, Animals/0.\n\n\nFatal error:  The following symbols are used with multiple arities: Animals/1, Animals/0", "stack_trace": "Traceback (most recent call last):\n  File \"/data/gpfs/projects/punim0478/bansaab/linc2/eval/tasks/owafoltask.py\", line 577, in _process_neurosymbolic\n    parsed = json.loads(gen)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/json/__init__.py\", line 346, in loads\n    return _default_decoder.decode(s)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/json/decoder.py\", line 337, in decode\n    obj, end = self.raw_decode(s, idx=_w(s, 0).end())\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/json/decoder.py\", line 355, in raw_decode\n    raise JSONDecodeError(\"Expecting value\", s, err.value) from None\njson.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"/data/gpfs/projects/punim0478/bansaab/linc2/eval/tasks/utils.py\", line 219, in evaluate\n    truth_value = prover.prove(c, p_list)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/inference/api.py\", line 37, in prove\n    return self._prove(goal, assumptions, verbose)[0]\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/inference/prover9.py\", line 327, in _prove\n    stdout, returncode = self._call_prover9(\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/inference/prover9.py\", line 370, in _call_prover9\n    raise Prover9FatalException(returncode, errormsg)\nnltk.inference.prover9.Prover9FatalException: (FATAL)\n%%ERROR: The following symbols are used with multiple arities: Animals/1, Animals/0.\n\n\nFatal error:  The following symbols are used with multiple arities: Animals/1, Animals/0\n"}
{"timestamp": "2025-09-16T17:23:05.622702", "premises": ["all x. (Monkeypox(x) -> MonkeypoxVirus(x))", "all x. (MonkeypoxVirus(x) -> CanOccur(x, animals))", "all x. (Humans(x) -> Mammals(x))", "all x. (Mammals(x) -> Animals(x))", "all x. (Symptons(x) -> Fever(x) | Headache(x) | MusclePains(x) | FeelingTired(x))", "all x. (Glu(x) -> FeelingTired(x))"], "conclusion": "all x. (Animals(x) -> exists(x))", "error_type": "<class 'nltk.sem.logic.LogicalExpressionException'>", "error_message": "'(' is an illegal variable name.  Constants may not be quantified.\nall x. (Animals(x) -> exists(x))\n                            ^", "stack_trace": "Traceback (most recent call last):\n  File \"/data/gpfs/projects/punim0478/bansaab/linc2/eval/tasks/owafoltask.py\", line 577, in _process_neurosymbolic\n    parsed = json.loads(gen)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/json/__init__.py\", line 346, in loads\n    return _default_decoder.decode(s)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/json/decoder.py\", line 337, in decode\n    obj, end = self.raw_decode(s, idx=_w(s, 0).end())\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/json/decoder.py\", line 355, in raw_decode\n    raise JSONDecodeError(\"Expecting value\", s, err.value) from None\njson.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/sem/logic.py\", line 154, in parse\n    result = self.process_next_expression(None)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/sem/logic.py\", line 290, in process_next_expression\n    accum = self.handle(tok, context)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/sem/logic.py\", line 312, in handle\n    return self.handle_quant(tok, context)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/sem/logic.py\", line 427, in handle_quant\n    accum = self.process_next_expression(tok)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/sem/logic.py\", line 290, in process_next_expression\n    accum = self.handle(tok, context)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/sem/logic.py\", line 315, in handle\n    return self.handle_open(tok, context)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/sem/logic.py\", line 449, in handle_open\n    accum = self.process_next_expression(None)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/sem/logic.py\", line 297, in process_next_expression\n    return self.attempt_adjuncts(accum, context)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/sem/logic.py\", line 323, in attempt_adjuncts\n    expression = self.attempt_BooleanExpression(expression, context)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/sem/logic.py\", line 485, in attempt_BooleanExpression\n    factory, expression, self.process_next_expression(tok)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/sem/logic.py\", line 290, in process_next_expression\n    accum = self.handle(tok, context)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/sem/logic.py\", line 312, in handle\n    return self.handle_quant(tok, context)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/sem/logic.py\", line 412, in handle_quant\n    vars = [self.get_next_token_variable(\"quantified\")]\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/sem/logic.py\", line 368, in get_next_token_variable\n    raise LogicalExpressionException(\nnltk.sem.logic.LogicalExpressionException: '(' is an illegal variable name.  Constants may not be quantified.\n\nThe above exception was the direct cause of the following exception:\n\nTraceback (most recent call last):\n  File \"/data/gpfs/projects/punim0478/bansaab/linc2/eval/tasks/utils.py\", line 215, in evaluate\n    c = read_expr(conclusion)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/sem/logic.py\", line 957, in fromstring\n    return cls._logic_parser.parse(s, signature)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/sem/logic.py\", line 159, in parse\n    raise LogicalExpressionException(None, msg) from e\nnltk.sem.logic.LogicalExpressionException: '(' is an illegal variable name.  Constants may not be quantified.\nall x. (Animals(x) -> exists(x))\n                            ^\n"}
{"timestamp": "2025-09-16T17:23:05.637801", "premises": ["all x. (Monkeypox(x) -> InfectiousDisease(x) & CausedBy(x, MonkeypoxVirus))", "all x. (Monkeypox(x) -> InfectiousDisease(x) & CausedBy(x, MonkeypoxVirus))", "all x. (MonkeypoxVirus(x) -> OccursIn(x, CertainAnimals) & OccursIn(x, Humans))", "all x. (Humans(x) -> Mammals(x))", "all x. (Mammals(x) -> Animals(x))", "all x. (Symptons(x) -> Monkeypox(x))", "all x. (FeelTired(x) -> Symptons(x))", "all x. (OccursIn(x, CertainAnimals) & OccursIn(x, Humans))", "all x. (Monkeypox(x) -> InfectiousDisease(x) & CausedBy(x, MonkeypoxVirus))", "all x. (MonkeypoxVirus(x) -> OccursIn(x, CertainAnimals) & OccursIn(x, Humans))", "all x. (Humans(x) -> Mammals(x))", "all x. (Mammals(x) -> Animals(x))", "all x. (Symptons(x) -> Monkeypox(x))", "all x. (FeelTired(x) -> Symptons(x))", "all x. (OccursIn(x, CertainAnimals) & OccursIn(x, Humans))"], "conclusion": "all x. (OccursIn(x, CertainAnimals) & OccursIn(x, Humans))", "error_type": "<class 'nltk.inference.prover9.Prover9FatalException'>", "error_message": "(FATAL)\n%%ERROR: The following symbols are used with multiple arities: MonkeypoxVirus/1, MonkeypoxVirus/0, Humans/1, Humans/0.\n\n\nFatal error:  The following symbols are used with multiple arities: MonkeypoxVirus/1, MonkeypoxVirus/0, Humans/1, Humans/0", "stack_trace": "Traceback (most recent call last):\n  File \"/data/gpfs/projects/punim0478/bansaab/linc2/eval/tasks/owafoltask.py\", line 577, in _process_neurosymbolic\n    parsed = json.loads(gen)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/json/__init__.py\", line 346, in loads\n    return _default_decoder.decode(s)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/json/decoder.py\", line 337, in decode\n    obj, end = self.raw_decode(s, idx=_w(s, 0).end())\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/json/decoder.py\", line 355, in raw_decode\n    raise JSONDecodeError(\"Expecting value\", s, err.value) from None\njson.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"/data/gpfs/projects/punim0478/bansaab/linc2/eval/tasks/utils.py\", line 219, in evaluate\n    truth_value = prover.prove(c, p_list)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/inference/api.py\", line 37, in prove\n    return self._prove(goal, assumptions, verbose)[0]\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/inference/prover9.py\", line 327, in _prove\n    stdout, returncode = self._call_prover9(\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/inference/prover9.py\", line 370, in _call_prover9\n    raise Prover9FatalException(returncode, errormsg)\nnltk.inference.prover9.Prover9FatalException: (FATAL)\n%%ERROR: The following symbols are used with multiple arities: MonkeypoxVirus/1, MonkeypoxVirus/0, Humans/1, Humans/0.\n\n\nFatal error:  The following symbols are used with multiple arities: MonkeypoxVirus/1, MonkeypoxVirus/0, Humans/1, Humans/0\n"}
{"timestamp": "2025-09-16T17:23:05.645167", "premises": ["all x. (Monkeypox(x) -> MonkeypoxVirus(x))", "Monkeypox(x) -> MonkeypoxVirus(x)", "MonkeypoxVirus(x) -> OccursIn(x, Animals)", "Mammals(x) -> Animals(x)", "SymptonsOf(x, Monkeypox) -> FeelsTired(x)", "FeelsTired(x) -> Glu(x)", "Monkeypox(x) -> MonkeypoxVirus(x)", "MonkeypoxVirus(x) -> OccursIn(x, Animals)", "Mammals(x) -> Animals(x)", "SymptonsOf(x, Monkeypox) -> FeelsTired(x)", "FeelsTired(x) -> Glu(x)", "Monkeypox(x) -> MonkeypoxVirus(x)", "MonkeypoxVirus(x) -> OccursIn(x, Animals)", "Mammals(x) -> Animals(x)", "SymptonsOf(x, Monkeypox) -> FeelsTired(x)", "FeelsTired(x) -> Glu(x)", "Monkeypox(x) -> MonkeypoxVirus(x)", "MonkeypoxVirus(x) -> OccursIn(x, Animals)", "Mammals(x) -> Animals(x)", "SymptonsOf(x, Monkeypox) -> FeelsTired(x)", "FeelsTired(x) -> Glu(x)", "Monkeypox(x) -> MonkeypoxVirus(x)", "MonkeypoxVirus(x) -> OccursIn(x, Animals)", "Mammals(x) -> Animals(x)", "SymptonsOf(x, Monkeypox) -> FeelsTired(x)", "FeelsTired(x) -> Glu(x)", "Monkeypox(x) -> MonkeypoxVirus(x)", "MonkeypoxVirus(x) -> OccursIn(x, Animals)", "Mammals(x) -> Animals(x)", "SymptonsOf(x, Monkeypox) -> FeelsTired(x)", "FeelsTired(x) -> Glu(x)", "Monkeypox(x) -> MonkeypoxVirus(x)", "MonkeypoxVirus(x) -> OccursIn(x, Animals)", "Mammals(x) -> Animals(x)", "SymptonsOf(x, Monkeypox) -> FeelsTired(x)", "FeelsTired(x) -> Glu(x)", "Monkeypox(x) -> MonkeypoxVirus(x)", "MonkeypoxVirus(x) -> OccursIn(x, Animals)", "Mammals(x) -> Animals(x)", "SymptonsOf(x, Monkeypox) -> FeelsTired(x)", "FeelsTired(x) -> Glu(x)", "Monkeypox(x) -> MonkeypoxVirus(x)", "MonkeypoxVirus(x) -> OccursIn(x, Animals)", "Mammals(x) -> Animals(x)", "SymptonsOf(x, Monkeypox) -> FeelsTired(x)"], "conclusion": "FeelsTired(x) -> Glu(x)", "error_type": "<class 'nltk.inference.prover9.Prover9FatalException'>", "error_message": "(FATAL)\n%%ERROR: The following symbols are used with multiple arities: Monkeypox/1, Monkeypox/0, Animals/1, Animals/0.\n\n\nFatal error:  The following symbols are used with multiple arities: Monkeypox/1, Monkeypox/0, Animals/1, Animals/0", "stack_trace": "Traceback (most recent call last):\n  File \"/data/gpfs/projects/punim0478/bansaab/linc2/eval/tasks/owafoltask.py\", line 577, in _process_neurosymbolic\n    parsed = json.loads(gen)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/json/__init__.py\", line 346, in loads\n    return _default_decoder.decode(s)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/json/decoder.py\", line 337, in decode\n    obj, end = self.raw_decode(s, idx=_w(s, 0).end())\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/json/decoder.py\", line 355, in raw_decode\n    raise JSONDecodeError(\"Expecting value\", s, err.value) from None\njson.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"/data/gpfs/projects/punim0478/bansaab/linc2/eval/tasks/utils.py\", line 219, in evaluate\n    truth_value = prover.prove(c, p_list)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/inference/api.py\", line 37, in prove\n    return self._prove(goal, assumptions, verbose)[0]\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/inference/prover9.py\", line 327, in _prove\n    stdout, returncode = self._call_prover9(\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/inference/prover9.py\", line 370, in _call_prover9\n    raise Prover9FatalException(returncode, errormsg)\nnltk.inference.prover9.Prover9FatalException: (FATAL)\n%%ERROR: The following symbols are used with multiple arities: Monkeypox/1, Monkeypox/0, Animals/1, Animals/0.\n\n\nFatal error:  The following symbols are used with multiple arities: Monkeypox/1, Monkeypox/0, Animals/1, Animals/0\n"}
{"timestamp": "2025-09-16T17:23:05.647506", "premises": ["all x. (Monkeypox(x) -> MonkeypoxVirus(x))", "all x. (MonkeypoxVirus(x) -> OccursIn(x, Animal))", "all x. (Human(x) -> Mammal(x))", "all x. (Mammal(x) -> Animal(x))", "all x. (Monkeypox(x) -> Symptons(x))", "all x. (GetGlu(x) -> FeelTired(x))"], "conclusion": "exists x. (OccursIn(x, Animal))", "error_type": "<class 'nltk.inference.prover9.Prover9FatalException'>", "error_message": "(FATAL)\n%%ERROR: The following symbols are used with multiple arities: Animal/1, Animal/0.\n\n\nFatal error:  The following symbols are used with multiple arities: Animal/1, Animal/0", "stack_trace": "Traceback (most recent call last):\n  File \"/data/gpfs/projects/punim0478/bansaab/linc2/eval/tasks/owafoltask.py\", line 577, in _process_neurosymbolic\n    parsed = json.loads(gen)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/json/__init__.py\", line 346, in loads\n    return _default_decoder.decode(s)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/json/decoder.py\", line 337, in decode\n    obj, end = self.raw_decode(s, idx=_w(s, 0).end())\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/json/decoder.py\", line 355, in raw_decode\n    raise JSONDecodeError(\"Expecting value\", s, err.value) from None\njson.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"/data/gpfs/projects/punim0478/bansaab/linc2/eval/tasks/utils.py\", line 219, in evaluate\n    truth_value = prover.prove(c, p_list)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/inference/api.py\", line 37, in prove\n    return self._prove(goal, assumptions, verbose)[0]\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/inference/prover9.py\", line 327, in _prove\n    stdout, returncode = self._call_prover9(\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/inference/prover9.py\", line 370, in _call_prover9\n    raise Prover9FatalException(returncode, errormsg)\nnltk.inference.prover9.Prover9FatalException: (FATAL)\n%%ERROR: The following symbols are used with multiple arities: Animal/1, Animal/0.\n\n\nFatal error:  The following symbols are used with multiple arities: Animal/1, Animal/0\n"}
{"timestamp": "2025-09-16T17:25:28.394541", "premises": ["text: Monkeypox is an infectious disease caused by the monkeypox virus.", "MonkeypoxDisease(x) -> MonkeypoxVirus(x)", "MonkeypoxVirus(x) -> OccursIn(x, CertainAnimals)", "Human(x) -> Mammal(x)", "Mammal(x) -> Animal(x)", "Symptons(MonkeypoxDisease, x) -> Fever(x) & Headache(x) & MusclePains(x) & FeelingTired(x)", "Flu(x) -> FeelingTired(x)"], "conclusion": "-Flu(x)", "error_type": "<class 'nltk.sem.logic.LogicalExpressionException'>", "error_message": "Unexpected token: 'Monkeypox'.\ntext: Monkeypox is an infectious disease caused by the monkeypox virus.\n      ^", "stack_trace": "Traceback (most recent call last):\n  File \"/data/gpfs/projects/punim0478/bansaab/linc2/eval/tasks/owafoltask.py\", line 577, in _process_neurosymbolic\n    parsed = json.loads(gen)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/json/__init__.py\", line 346, in loads\n    return _default_decoder.decode(s)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/json/decoder.py\", line 337, in decode\n    obj, end = self.raw_decode(s, idx=_w(s, 0).end())\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/json/decoder.py\", line 355, in raw_decode\n    raise JSONDecodeError(\"Expecting value\", s, err.value) from None\njson.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/sem/logic.py\", line 156, in parse\n    raise UnexpectedTokenException(self._currentIndex + 1, self.token(0))\nnltk.sem.logic.UnexpectedTokenException: Unexpected token: 'Monkeypox'.\n\nThe above exception was the direct cause of the following exception:\n\nTraceback (most recent call last):\n  File \"/data/gpfs/projects/punim0478/bansaab/linc2/eval/tasks/utils.py\", line 216, in evaluate\n    p_list = [read_expr(p) for p in premises]\n  File \"/data/gpfs/projects/punim0478/bansaab/linc2/eval/tasks/utils.py\", line 216, in <listcomp>\n    p_list = [read_expr(p) for p in premises]\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/sem/logic.py\", line 957, in fromstring\n    return cls._logic_parser.parse(s, signature)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/sem/logic.py\", line 159, in parse\n    raise LogicalExpressionException(None, msg) from e\nnltk.sem.logic.LogicalExpressionException: Unexpected token: 'Monkeypox'.\ntext: Monkeypox is an infectious disease caused by the monkeypox virus.\n      ^\n"}
{"timestamp": "2025-09-16T17:25:28.393450", "premises": ["all x. (Monkeypox(x) -> MonkeypoxVirus(x))", "all x. (MonkeypoxVirus(x) -> Occur(x, Animals) | Occur(x, Humans))", "all x. (Human(x) -> Mammal(x))", "all x. (Mammal(x) -> Animal(x))", "all x. (Symptom(x) -> Monkeypox(x))", "all x. (GetGlu(x) -> FeelTired(x))"], "conclusion": "-GetFlu()", "error_type": "<class 'nltk.sem.logic.LogicalExpressionException'>", "error_message": "Unexpected token: ')'.  Expression expected.\n-GetFlu()\n        ^", "stack_trace": "Traceback (most recent call last):\n  File \"/data/gpfs/projects/punim0478/bansaab/linc2/eval/tasks/owafoltask.py\", line 577, in _process_neurosymbolic\n    parsed = json.loads(gen)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/json/__init__.py\", line 346, in loads\n    return _default_decoder.decode(s)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/json/decoder.py\", line 337, in decode\n    obj, end = self.raw_decode(s, idx=_w(s, 0).end())\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/json/decoder.py\", line 355, in raw_decode\n    raise JSONDecodeError(\"Expecting value\", s, err.value) from None\njson.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/sem/logic.py\", line 154, in parse\n    result = self.process_next_expression(None)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/sem/logic.py\", line 290, in process_next_expression\n    accum = self.handle(tok, context)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/sem/logic.py\", line 306, in handle\n    return self.handle_negation(tok, context)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/sem/logic.py\", line 327, in handle_negation\n    return self.make_NegatedExpression(self.process_next_expression(Tokens.NOT))\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/sem/logic.py\", line 290, in process_next_expression\n    accum = self.handle(tok, context)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/sem/logic.py\", line 303, in handle\n    return self.handle_variable(tok, context)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/sem/logic.py\", line 352, in handle_variable\n    accum, self.process_next_expression(APP)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/sem/logic.py\", line 293, in process_next_expression\n    raise UnexpectedTokenException(\nnltk.sem.logic.UnexpectedTokenException: Unexpected token: ')'.  Expression expected.\n\nThe above exception was the direct cause of the following exception:\n\nTraceback (most recent call last):\n  File \"/data/gpfs/projects/punim0478/bansaab/linc2/eval/tasks/utils.py\", line 215, in evaluate\n    c = read_expr(conclusion)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/sem/logic.py\", line 957, in fromstring\n    return cls._logic_parser.parse(s, signature)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/sem/logic.py\", line 159, in parse\n    raise LogicalExpressionException(None, msg) from e\nnltk.sem.logic.LogicalExpressionException: Unexpected token: ')'.  Expression expected.\n-GetFlu()\n        ^\n"}
{"timestamp": "2025-09-16T17:25:28.413028", "premises": ["all x. (Monkeypox(x) -> InfectiousDisease(x) & MonkeypoxVirus(x))", "all x. (Monkeypox(x) -> InfectiousDisease(x) & MonkeypoxVirus(x))", "all x. (MonkeypoxVirus(x) -> OccursIn(x, CertainAnimals) & OccursIn(x, Humans))", "all x. (Humans(x) -> Mammals(x))", "all x. (SymptonsOfMonkeypox(x) -> Fever(x) & Headache(x) & MusclePains(x) & FeelingTired(x) & ...)", "all x. (FeelingTired(x) -> GetsGlu(x))"], "conclusion": "-InfectiousDisease(Flu) | -OccursIn(Humans, Flu)", "error_type": "<class 'nltk.sem.logic.LogicalExpressionException'>", "error_message": "Unexpected token: '.'.  Expression expected.\nall x. (SymptonsOfMonkeypox(x) -> Fever(x) & Headache(x) & MusclePains(x) & FeelingTired(x) & ...)\n                                                                                              ^", "stack_trace": "Traceback (most recent call last):\n  File \"/data/gpfs/projects/punim0478/bansaab/linc2/eval/tasks/owafoltask.py\", line 577, in _process_neurosymbolic\n    parsed = json.loads(gen)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/json/__init__.py\", line 346, in loads\n    return _default_decoder.decode(s)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/json/decoder.py\", line 337, in decode\n    obj, end = self.raw_decode(s, idx=_w(s, 0).end())\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/json/decoder.py\", line 355, in raw_decode\n    raise JSONDecodeError(\"Expecting value\", s, err.value) from None\njson.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/sem/logic.py\", line 154, in parse\n    result = self.process_next_expression(None)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/sem/logic.py\", line 290, in process_next_expression\n    accum = self.handle(tok, context)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/sem/logic.py\", line 312, in handle\n    return self.handle_quant(tok, context)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/sem/logic.py\", line 427, in handle_quant\n    accum = self.process_next_expression(tok)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/sem/logic.py\", line 290, in process_next_expression\n    accum = self.handle(tok, context)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/sem/logic.py\", line 315, in handle\n    return self.handle_open(tok, context)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/sem/logic.py\", line 449, in handle_open\n    accum = self.process_next_expression(None)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/sem/logic.py\", line 297, in process_next_expression\n    return self.attempt_adjuncts(accum, context)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/sem/logic.py\", line 323, in attempt_adjuncts\n    expression = self.attempt_BooleanExpression(expression, context)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/sem/logic.py\", line 485, in attempt_BooleanExpression\n    factory, expression, self.process_next_expression(tok)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/sem/logic.py\", line 297, in process_next_expression\n    return self.attempt_adjuncts(accum, context)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/sem/logic.py\", line 323, in attempt_adjuncts\n    expression = self.attempt_BooleanExpression(expression, context)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/sem/logic.py\", line 485, in attempt_BooleanExpression\n    factory, expression, self.process_next_expression(tok)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/sem/logic.py\", line 293, in process_next_expression\n    raise UnexpectedTokenException(\nnltk.sem.logic.UnexpectedTokenException: Unexpected token: '.'.  Expression expected.\n\nThe above exception was the direct cause of the following exception:\n\nTraceback (most recent call last):\n  File \"/data/gpfs/projects/punim0478/bansaab/linc2/eval/tasks/utils.py\", line 216, in evaluate\n    p_list = [read_expr(p) for p in premises]\n  File \"/data/gpfs/projects/punim0478/bansaab/linc2/eval/tasks/utils.py\", line 216, in <listcomp>\n    p_list = [read_expr(p) for p in premises]\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/sem/logic.py\", line 957, in fromstring\n    return cls._logic_parser.parse(s, signature)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/sem/logic.py\", line 159, in parse\n    raise LogicalExpressionException(None, msg) from e\nnltk.sem.logic.LogicalExpressionException: Unexpected token: '.'.  Expression expected.\nall x. (SymptonsOfMonkeypox(x) -> Fever(x) & Headache(x) & MusclePains(x) & FeelingTired(x) & ...)\n                                                                                              ^\n"}
{"timestamp": "2025-09-16T17:25:28.413769", "premises": ["all x. (Monkeypox(x) -> MonkeypoxVirus(x))", "all x. (MonkeypoxVirus(x) -> OccursIn(x, CertainAnimals))", "all x. (Human(x) -> Mammal(x))", "all x. (Mammal(x) -> Animal(x))", "all x. (Symptons(x) -> Monkeypox(x))", "all x. (FeelTired(x) -> Glu(x))"], "conclusion": "notexists x. (Glu(x))", "error_type": "<class 'nltk.sem.logic.LogicalExpressionException'>", "error_message": "Unexpected token: 'x'.\nnotexists x. (Glu(x))\n          ^", "stack_trace": "Traceback (most recent call last):\n  File \"/data/gpfs/projects/punim0478/bansaab/linc2/eval/tasks/owafoltask.py\", line 577, in _process_neurosymbolic\n    parsed = json.loads(gen)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/json/__init__.py\", line 346, in loads\n    return _default_decoder.decode(s)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/json/decoder.py\", line 337, in decode\n    obj, end = self.raw_decode(s, idx=_w(s, 0).end())\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/json/decoder.py\", line 355, in raw_decode\n    raise JSONDecodeError(\"Expecting value\", s, err.value) from None\njson.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/sem/logic.py\", line 156, in parse\n    raise UnexpectedTokenException(self._currentIndex + 1, self.token(0))\nnltk.sem.logic.UnexpectedTokenException: Unexpected token: 'x'.\n\nThe above exception was the direct cause of the following exception:\n\nTraceback (most recent call last):\n  File \"/data/gpfs/projects/punim0478/bansaab/linc2/eval/tasks/utils.py\", line 215, in evaluate\n    c = read_expr(conclusion)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/sem/logic.py\", line 957, in fromstring\n    return cls._logic_parser.parse(s, signature)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/sem/logic.py\", line 159, in parse\n    raise LogicalExpressionException(None, msg) from e\nnltk.sem.logic.LogicalExpressionException: Unexpected token: 'x'.\nnotexists x. (Glu(x))\n          ^\n"}
{"timestamp": "2025-09-16T17:25:28.414045", "premises": ["all x. (Monkeypox(x) -> InfectiousDisease(x) & CausedBy(x, MonkeypoxVirus))", "all x. (MonkeypoxVirus(x) -> OccursIn(x, CertainAnimals) & Including(x, Humans))", "all x. (Humans(x) -> Mammals(x))", "all x. (Mammals(x) -> Animals(x))", "all x. (Symptons(x, Monkeypox) -> Include(x, Fever) & Include(x, Headache) & Include(x, MusclePains) & Include(x, Tired))", "all x. (FeelsTired(x) -> Glu(x))"], "conclusion": "not exists x. (Glu(x))", "error_type": "<class 'nltk.inference.prover9.Prover9FatalException'>", "error_message": "(FATAL)\n%%ERROR: The following symbols are used with multiple arities: Monkeypox/1, Monkeypox/0, Humans/1, Humans/0, MonkeypoxVirus/1, MonkeypoxVirus/0.\n\n\nFatal error:  The following symbols are used with multiple arities: Monkeypox/1, Monkeypox/0, Humans/1, Humans/0, MonkeypoxVirus/1, MonkeypoxVirus/0", "stack_trace": "Traceback (most recent call last):\n  File \"/data/gpfs/projects/punim0478/bansaab/linc2/eval/tasks/owafoltask.py\", line 577, in _process_neurosymbolic\n    parsed = json.loads(gen)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/json/__init__.py\", line 346, in loads\n    return _default_decoder.decode(s)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/json/decoder.py\", line 337, in decode\n    obj, end = self.raw_decode(s, idx=_w(s, 0).end())\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/json/decoder.py\", line 355, in raw_decode\n    raise JSONDecodeError(\"Expecting value\", s, err.value) from None\njson.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"/data/gpfs/projects/punim0478/bansaab/linc2/eval/tasks/utils.py\", line 219, in evaluate\n    truth_value = prover.prove(c, p_list)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/inference/api.py\", line 37, in prove\n    return self._prove(goal, assumptions, verbose)[0]\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/inference/prover9.py\", line 327, in _prove\n    stdout, returncode = self._call_prover9(\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/inference/prover9.py\", line 370, in _call_prover9\n    raise Prover9FatalException(returncode, errormsg)\nnltk.inference.prover9.Prover9FatalException: (FATAL)\n%%ERROR: The following symbols are used with multiple arities: Monkeypox/1, Monkeypox/0, Humans/1, Humans/0, MonkeypoxVirus/1, MonkeypoxVirus/0.\n\n\nFatal error:  The following symbols are used with multiple arities: Monkeypox/1, Monkeypox/0, Humans/1, Humans/0, MonkeypoxVirus/1, MonkeypoxVirus/0\n"}
{"timestamp": "2025-09-16T17:25:28.403562", "premises": ["all x. (Monkeypox(x) -> MonkeypoxVirus(x))", "all x. (MonkeypoxVirus(x) -> CanOccur(x, CertainAnimal))", "all x. (Mammal(x) -> Animal(x))", "all x. (Mammal(x) -> Animal(x))", "all x. (Symptons(x, Monkeypox) -> Includes(x, Fever, Headache, MusclePains, FeelingTired))", "all x. (Glu(x) -> FeelingTired(x))"], "conclusion": "-Glu(x) -> -FeelingTired(x)", "error_type": "<class 'nltk.inference.prover9.Prover9FatalException'>", "error_message": "(FATAL)\n%%ERROR: The following symbols are used with multiple arities: FeelingTired/1, FeelingTired/0, Monkeypox/1, Monkeypox/0.\n\n\nFatal error:  The following symbols are used with multiple arities: FeelingTired/1, FeelingTired/0, Monkeypox/1, Monkeypox/0", "stack_trace": "Traceback (most recent call last):\n  File \"/data/gpfs/projects/punim0478/bansaab/linc2/eval/tasks/owafoltask.py\", line 577, in _process_neurosymbolic\n    parsed = json.loads(gen)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/json/__init__.py\", line 346, in loads\n    return _default_decoder.decode(s)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/json/decoder.py\", line 337, in decode\n    obj, end = self.raw_decode(s, idx=_w(s, 0).end())\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/json/decoder.py\", line 355, in raw_decode\n    raise JSONDecodeError(\"Expecting value\", s, err.value) from None\njson.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"/data/gpfs/projects/punim0478/bansaab/linc2/eval/tasks/utils.py\", line 219, in evaluate\n    truth_value = prover.prove(c, p_list)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/inference/api.py\", line 37, in prove\n    return self._prove(goal, assumptions, verbose)[0]\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/inference/prover9.py\", line 327, in _prove\n    stdout, returncode = self._call_prover9(\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/inference/prover9.py\", line 370, in _call_prover9\n    raise Prover9FatalException(returncode, errormsg)\nnltk.inference.prover9.Prover9FatalException: (FATAL)\n%%ERROR: The following symbols are used with multiple arities: FeelingTired/1, FeelingTired/0, Monkeypox/1, Monkeypox/0.\n\n\nFatal error:  The following symbols are used with multiple arities: FeelingTired/1, FeelingTired/0, Monkeypox/1, Monkeypox/0\n"}
{"timestamp": "2025-09-16T17:25:28.437698", "premises": ["all x. (Monkeypox(x) -> VirusCausedDisease(x))", "all x. (Monkeypox(x) -> VirusCausedDisease(x))", "all x. (MonkeypoxVirus(x) -> CanOccur(x, humans))", "all x. (Humans(x) -> Mammals(x))", "all x. (SymptomOf(x, Monkeypox) -> Fever(x))", "all x. (SymptomOf(x, Monkeypox) -> Tiredness(x))"], "conclusion": "all x. (Glu(x) -> People(x))", "error_type": "<class 'nltk.inference.prover9.Prover9FatalException'>", "error_message": "(FATAL)\n%%ERROR: The following symbols are used with multiple arities: Monkeypox/1, Monkeypox/0.\n\n\nFatal error:  The following symbols are used with multiple arities: Monkeypox/1, Monkeypox/0", "stack_trace": "Traceback (most recent call last):\n  File \"/data/gpfs/projects/punim0478/bansaab/linc2/eval/tasks/owafoltask.py\", line 577, in _process_neurosymbolic\n    parsed = json.loads(gen)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/json/__init__.py\", line 346, in loads\n    return _default_decoder.decode(s)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/json/decoder.py\", line 337, in decode\n    obj, end = self.raw_decode(s, idx=_w(s, 0).end())\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/json/decoder.py\", line 355, in raw_decode\n    raise JSONDecodeError(\"Expecting value\", s, err.value) from None\njson.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"/data/gpfs/projects/punim0478/bansaab/linc2/eval/tasks/utils.py\", line 219, in evaluate\n    truth_value = prover.prove(c, p_list)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/inference/api.py\", line 37, in prove\n    return self._prove(goal, assumptions, verbose)[0]\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/inference/prover9.py\", line 327, in _prove\n    stdout, returncode = self._call_prover9(\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/inference/prover9.py\", line 370, in _call_prover9\n    raise Prover9FatalException(returncode, errormsg)\nnltk.inference.prover9.Prover9FatalException: (FATAL)\n%%ERROR: The following symbols are used with multiple arities: Monkeypox/1, Monkeypox/0.\n\n\nFatal error:  The following symbols are used with multiple arities: Monkeypox/1, Monkeypox/0\n"}
{"timestamp": "2025-09-16T17:25:28.475894", "premises": ["all x. (Monkeypox(x) -> Virus(x) & Animal(x) & InfectiousDisease(x))", "all x. (Virus(x) -> OccursIn(x, CertainAnimals))", "all x. (OccursIn(x, CertainAnimals) -> OccursIn(x, Humans))", "all x. (Humans -> Mammals)", "all x. (Mammals -> Animals)", "all x. all y. (SymptonsOf(x, Monkeypox) -> SymptonsOf(y, Glu))", "all x. all y. (SymptonsOf(x, Monkeypox) -> SymptonsOf(y, Tiredness))", "all x. (SymptonsOf(x, Monkeypox) -> SymptonsOf(x, Fever))", "all x. (SymptonsOf(x, Monkeypox) -> SymptonsOf(x, Headache))", "all x. (SymptonsOf(x, Monkeypox) -> SymptonsOf(x, MusclePains))", "all x. (SymptonsOf(x, Monkeypox) -> SymptonsOf(x, Sickness))", "all x. (SymptonsOf(x, Monkeypox) -> SymptonsOf(x, Illness))", "all x. (SymptonsOf(x, Monkeypox) -> SymptonsOf(x, Disease))", "all x. (SymptonsOf(x, Monkeypox) -> SymptonsOf(x, Virus))", "all x. (SymptonsOf(x, Monkeypox) -> SymptonsOf(x, Animal))", "all x. (SymptonsOf(x, Monkeypox) -> SymptonsOf(x, Mammal))", "all x. (SymptonsOf(x, Monkeypox) -> SymptonsOf(x, Human))", "all x. (SymptonsOf(x, Monkeypox) -> SymptonsOf(x, Glu))", "all x. (SymptonsOf(x, Monkeypox) -> SymptonsOf(x, Tiredness))", "all x. (SymptonsOf(x, Monkeypox) -> SymptonsOf(x, Fever))", "all x. (SymptonsOf(x, Monkeypox) -> SymptonsOf(x, Headache))", "all x. (SymptonsOf(x, Monkeypox) -> SymptonsOf(x, MusclePains))", "all x. (SymptonsOf(x, Monkeypox) -> SymptonsOf(x, Sickness))", "all x. (SymptonsOf(x, Monkeypox) -> SymptonsOf(x, Illness))", "all x. (SymptonsOf(x, Monkeypox) -> SymptonsOf(x, Disease))", "all x. (SymptonsOf(x, Monkeypox) -> SymptonsOf(x, Virus))", "all x. (SymptonsOf(x, Monkeypox) -> SymptonsOf(x, Animal))", "all x. (SymptonsOf(x, Monkeypox) -> SymptonsOf(x, Mammal))", "all x. (SymptonsOf(x, Monkeypox) -> SymptonsOf(x, Human))", "all x. (SymptonsOf(x, Monkeypox) -> SymptonsOf(x, Glu))", "all x. (SymptonsOf(x, Monkeypox) -> SymptonsOf(x, Tiredness))", "all x. (SymptonsOf(x, Monkeypox) -> SymptonsOf(x, Fever))", "all x. (SymptonsOf(x, Monkeypox) -> SymptonsOf(x, Headache))", "all x. (SymptonsOf(x, Monkeypox) -> SymptonsOf(x, MusclePains))", "all x. (SymptonsOf(x, Monkeypox) -> SymptonsOf(x, Sickness))", "all x. (SymptonsOf(x, Monkeypox) -> SymptonsOf(x, Illness))", "all x. (SymptonsOf(x, Monkeypox) -> SymptonsOf(x, Disease))", "all x. (SymptonsOf(x, Monkeypox) -> SymptonsOf(x, Virus))", "all x. (SymptonsOf(x, Monkeypox) -> SymptonsOf(x, Animal))", "all x. (SymptonsOf(x, Monkeypox) -> SymptonsOf(x, Mammal))", "all x. (SymptonsOf(x, Monkeypox) -> SymptonsOf(x, Human))", "all x. (SymptonsOf(x, Monkeypox) -> SymptonsOf(x, Glu))", "all x. (SymptonsOf(x, Monkeypox) -> SymptonsOf(x, Tiredness))", "all x. (SymptonsOf(x, Monkeypox) -> SymptonsOf(x, Fever))", "all x. (SymptonsOf(x, Monkeypox) -> SymptonsOf(x, Headache))", "all x. (SymptonsOf(x, Monkeypox) -> SymptonsOf(x, MusclePains))", "all x. (SymptonsOf(x, Monkeypox) -> SymptonsOf(x, Sickness))", "all x. (SymptonsOf(x, Monkeypox) -> SymptonsOf(x, Illness))", "all x. (SymptonsOf(x, Monkeypox) -> SymptonsOf(x, Disease))", "all x. (SymptonsOf(x, Monkeypox) -> SymptonsOf(x, Virus))", "all x. (SymptonsOf(x, Monkeypox) -> SymptonsOf(x, Animal))", "all x. (SymptonsOf(x, Monkeypox) -> SymptonsOf(x, Mammal))", "all x. (SymptonsOf(x, Monkeypox) -> SymptonsOf(x, Human))", "all x. (SymptonsOf(x, Monkeypox) -> SymptonsOf(x, Glu))", "all x. (SymptonsOf(x, Monkeypox) -> SymptonsOf(x, Tiredness))", "all x. (SymptonsOf(x, Monkeypox) -> SymptonsOf(x, Fever))", "all x. (SymptonsOf(x, Monkeypox) -> SymptonsOf(x, Headache))", "all x. (SymptonsOf(x, Monkeypox) -> SymptonsOf(x, MusclePains))", "all x. (SymptonsOf(x, Monkeypox) -> SymptonsOf(x, Sickness))", "all x. (SymptonsOf(x, Monkeypox) -> SymptonsOf(x, Illness))", "all x. (SymptonsOf(x, Monkeypox) -> SymptonsOf(x, Disease))", "all x. (SymptonsOf(x, Monkeypox) -> SymptonsOf(x, Virus))", "all x. (SymptonsOf(x, Monkeypox) -> SymptonsOf(x, Animal))", "all x. (SymptonsOf(x, Monkeypox) -> SymptonsOf(x, Mammal))", "all x. (SymptonsOf(x, Monkeypox) -> SymptonsOf(x, Human))", "all x. (SymptonsOf(x, Monkeypox) -> SymptonsOf(x, Glu))", "all x. (SymptonsOf(x, Monkeypox) -> SymptonsOf(x, Tiredness))", "all x. (SymptonsOf(x, Monkeypox) -> SymptonsOf(x, Fever))", "all x. (SymptonsOf(x, Monkeypox) -> SymptonsOf(x, Headache))", "all x. (SymptonsOf(x, Monkeypox) -> SymptonsOf(x, MusclePains))", "all x. (SymptonsOf(x, Monkeypox) -> SymptonsOf(x, Sickness))", "all x. (SymptonsOf(x, Monkeypox) -> SymptonsOf(x, Illness))", "all x. (SymptonsOf(x, Monkeypox) -> SymptonsOf(x, Disease))", "all x. (SymptonsOf(x, Monkeypox) -> SymptonsOf(x, Virus))", "all x. (SymptonsOf(x, Monkeypox) -> SymptonsOf(x, Animal))", "all x. (SymptonsOf(x, Monkeypox) -> SymptonsOf(x, Mammal))", "all x. (SymptonsOf(x, Monkeypox) -> SymptonsOf(x, Human))", "all x. (SymptonsOf(x, Monkeypox) -> SymptonsOf(x, Glu))", "all x. (SymptonsOf(x, Monkeypox) -> SymptonsOf(x, Tiredness))", "all x. (SymptonsOf(x, Monkeypox) -> SymptonsOf(x, Fever))", "all x. (SymptonsOf(x, Monkeypox) -> SymptonsOf(x, Headache))", "all x. (SymptonsOf(x, Monkeypox) -> SymptonsOf(x, MusclePains))", "all x. (SymptonsOf(x, Monkeypox) -> SymptonsOf(x, Sickness))", "all x. (SymptonsOf(x, Monkeypox) -> SymptonsOf(x, Illness))", "all x. (SymptonsOf(x, Monkeypox) -> SymptonsOf(x, Disease))", "all x. (SymptonsOf(x, Monkeypox) -> SymptonsOf(x, Virus))", "all x. (SymptonsOf(x, Monkeypox) -> SymptonsOf(x, Animal))", "all x. (SymptonsOf(x, Monkeypox) -> SymptonsOf(x, Mammal))", "all x. (SymptonsOf(x, Monkepox) -> SymptonsOf(x, Human))", "all x. (SymptonsOf(x, Monkeypox) -> SymptonsOf(x, Glu))", "all x. (SymptonsOf(x, Monkeypox) -> SymptonsOf(x, Tiredness))", "all x. (SymptonsOf(x, Monkeypox) -> SymptonsOf(x, Fever))", "all x. (SymptonsOf(x, Monkeypox) -> SymptonsOf(x, Headache))", "all x. (SymptonsOf(x, Monkeypox) -> SymptonsOf(x, MusclePains))", "all x. (SymptonsOf(x, Monkeypox) -> SymptonsOf(x, Sickness))", "all x. (SymptonsOf(x, Monkeypox) -> SymptonsOf(x, Illness))", "all x. (SymptonsOf(x, Monkeypox) -> SymptonsOf(x, Disease))", "all x. (SymptonsOf(x, Monkeypox) -> SymptonsOf(x, Virus))", "all x. (SymptonsOf(x, Monkeypox) -> SymptonsOf(x, Animal))", "all x. (SymptonsOf(x, Monkeypox) -> SymptonsOf(x, Mammal))", "all x. (SymptonsOf(x, Monkeypox) -> SymptonsOf(x, Human))", "all x. (SymptonsOf(x, Monkeypox) -> SymptonsOf(x, Glu))", "all x. (SymptonsOf(x, Monkeypox) -> SymptonsOf(x, Tiredness))", "all x. (SymptonsOf(x, Monkeypox) -> SymptonsOf(x, Fever))", "all x. (SymptonsOf(x, Monkeypox) -> SymptonsOf(x, Headache))", "all x. (SymptonsOf(x, Monkeypox) -> SymptonsOf(x, MusclePains))", "all x. (SymptonsOf(x, Monkeypox) -> SymptonsOf(x, Sickness))", "all x. (SymptonsOf(x, Monkeypox) -> SymptonsOf(x, Illness))", "all x. (SymptonsOf(x, Monkeypox) -> SymptonsOf(x, Disease))", "all x. (SymptonsOf(x, Monkeypox) -> SymptonsOf(x, Virus))", "all x. (SymptonsOf(x, Monkeypox) -> SymptonsOf(x, Animal))", "all x. (SymptonsOf(x, Monkeypox) -> SymptonsOf(x, Mammal))", "all x. (SymptonsOf(x, Monkeypox) -> SymptonsOf(x, Human))", "all x. (SymptonsOf(x, Monkeypox) -> SymptonsOf(x, Glu))", "all x. (SymptonsOf(x, Monkeypox) -> SymptonsOf(x, Tiredness))", "all x. (SymptonsOf(x, Monkeypox) -> SymptonsOf(x, Fever))", "all x. (SymptonsOf(x, Monkeypox) -> SymptonsOf(x, Headache))", "all x. (SymptonsOf(x, Monkeypox) -> SymptonsOf(x, MusclePains))", "all x. (SymptonsOf(x, Monkeypox) -> SymptonsOf(x, Sickness))", "all x. (SymptonsOf(x, Monkeypox) -> SymptonsOf(x, Illness))", "all x. (SymptonsOf(x, Monkeypox) -> SymptonsOf(x, Disease))", "all x. (SymptonsOf(x, Monkeypox) -> SymptonsOf(x, Virus))", "all x. (SymptonsOf(x, Monkeypox) -> SymptonsOf(x, Animal))", "all x. (SymptonsOf(x, Monkeypox) -> SymptonsOf(x, Mammal))", "all x. (SymptonsOf(x, Monkeypox) -> SymptonsOf(x, Human))", "all x. (SymptonsOf(x, Monkeypox) -> SymptonsOf(x, Glu))", "all x. (SymptonsOf(x, Monkeypox) -> SymptonsOf(x, Tiredness))", "all x. (SymptonsOf(x, Monkeypox) -> SymptonsOf(x, Fever))", "all x. (SymptonsOf(x, Monkeypox) -> SymptonsOf(x, Headache))", "all x. (SymptonsOf(x, Monkeypox) -> SymptonsOf(x, MusclePains))", "all x. (SymptonsOf(x, Monkeypox) -> SymptonsOf(x, Sickness))", "all x. (SymptonsOf(x, Monkeypox) -> SymptonsOf(x, Illness))", "all x. (SymptonsOf(x, Monkeypox) -> SymptonsOf(x, Disease))", "all x. (SymptonsOf(x, Monkeypox) -> SymptonsOf(x, Virus))", "all x. (SymptonsOf(x, Monkeypox) -> SymptonsOf(x, Animal))", "all x. (SymptonsOf(x, Monkeypox) -> SymptonsOf(x, Mammal))", "all x. (SymptonsOf(x, Monkeypox) -> SymptonsOf(x, Human))", "all x. (SymptonsOf(x, Monkeypox) -> SymptonsOf(x, Glu))", "all x. (SymptonsOf(x, Monkeypox) -> SymptonsOf(x, Tiredness))", "all x. (SymptonsOf(x, Monkeypox) -> SymptonsOf(x, Fever))", "all x. (SymptonsOf(x, Monkeypox) -> SymptonsOf(x, Headache))", "all x. (SymptonsOf(x, Monkeypox) -> SymptonsOf(x, MusclePains))", "all x. (SymptonsOf(x, Monkeypox) -> SymptonsOf(x, Sickness))", "all x. (SymptonsOf(x, Monkeypox) -> SymptonsOf(x, Illness))", "all x. (SymptonsOf(x, Monkeypox) -> SymptonsOf(x, Disease))", "all x. (SymptonsOf(x, Monkeypox) -> SymptonsOf(x, Virus))", "all x. (SymptonsOf(x, Monkeypox) -> SymptonsOf(x, Animal))", "all x. (SymptonsOf(x, Monkeypox) -> SymptonsOf(x, Mammal))", "all x. (SymptonsOf(x, Monkeypox) -> SymptonsOf(x, Human))", "all x. (SymptonsOf(x, Monkeypox) -> SymptonsOf(x, Glu))", "all x. (SymptonsOf(x, Monkeypox) -> SymptonsOf(x, Tiredness))", "all x. (SymptonsOf(x, Monkeypox) -> SymptonsOf(x, Fever))", "all x. (SymptonsOf(x, Monkeypox) -> SymptonsOf(x, Headache))", "all x. (SymptonsOf(x, Monkeypox) -> SymptonsOf(x, MusclePains))", "all x. (SymptonsOf(x, Monkeypox) -> SymptonsOf(x, Sickness))", "all x. (SymptonsOf(x, Monkeypox) -> SymptonsOf(x, Illness))", "all x. (SymptonsOf(x, Monkeypox) -> SymptonsOf(x, Disease))", "all x. (SymptonsOf(x, Monkeypox) -> SymptonsOf(x, Virus))", "all x. (SymptonsOf(x, Monkeypox) -> SymptonsOf(x, Animal))", "all x. (SymptonsOf(x, Monkeypox) -> SymptonsOf(x, Mammal))", "all x. (SymptonsOf(x, Monkeypox) -> SymptonsOf(x, Human))", "all x. (SymptonsOf(x, Monkeypox) -> SymptonsOf(x, Glu))", "all x. (SymptonsOf(x, Monkeypox) -> SymptonsOf(x, Tiredness))", "all x. (SymptonsOf(x, Monkeypox) -> SymptonsOf(x, Fever))", "all x. (SymptonsOf(x, Monkeypox) -> SymptonsOf(x, Headache))", "all x. (SymptonsOf(x, Monkeypox) -> SymptonsOf(x, MusclePains))", "all x. (SymptonsOf(x, Monkeypox) -> SymptonsOf(x, Sickness))", "all x. (SymptonsOf(x, Monkeypox) -> SymptonsOf(x, Illness))", "all x. (SymptonsOf(x, Monkeypox) -> SymptonsOf(x, Disease))", "all x. (SymptonsOf(x, Monkeypox) -> SymptonsOf(x, Virus))", "all x. (SymptonsOf(x, Monkeypox) -> SymptonsOf(x, Animal))", "all x. (SymptonsOf(x, Monkeypox) -> SymptonsOf(x, Mammal))", "all x. (SymptonsOf(x, Monkeypox) -> SymptonsOf(x, Human))", "all x. (SymptonsOf(x, Monkeypox) -> SymptonsOf(x, Glu))", "all x. (SymptonsOf(x, Monkeypox) -> SymptonsOf(x, Tiredness))", "all x. (SymptonsOf(x, Monkeypox) -> SymptonsOf(x, Fever))", "all x. (SymptonsOf(x, Monkeypox) -> SymptonsOf(x, Headache))", "all x. (SymptonsOf(x, Monkeypox) -> SymptonsOf(x, MusclePains))", "all x. (SymptonsOf(x, Monkeypox) -> SymptonsOf(x, Sickness))", "all x. (SymptonsOf(x, Monkeypox) -> SymptonsOf(x, Illness))", "all x. (SymptonsOf(x, Monkeypox) -> SymptonsOf(x, Disease))", "all x. (SymptonsOf(x, Monkeypox) -> SymptonsOf(x, Virus))", "all x. (SymptonsOf(x, Monkeypox) -> SymptonsOf(x, Animal))", "all x. (SymptonsOf(x, Monkeypox) -> SymptonsOf(x, Mammal))", "all x. (SymptonsOf(x, Monkeypox) -> SymptonsOf(x, Human))", "all x. (SymptonsOf(x, Monkeypox) -> SymptonsOf(x, Glu))", "all x. (SymptonsOf(x, Monkeypox) -> SymptonsOf(x, Tiredness))", "all x. (SymptonsOf(x, Monkeypox) -> SymptonsOf(x, Fever))", "all x. (SymptonsOf(x, Monkeypox) -> SymptonsOf(x, Headache))", "all x. (SymptonsOf(x, Monkeypox) -> SymptonsOf(x, MusclePains))", "all x. (SymptonsOf(x, Monkeypox) -> SymptonsOf(x, Sickness))", "all x. (SymptonsOf(x, Monkeypox) -> SymptonsOf(x, Illness))", "all x. (SymptonsOf(x, Monkeypox) -> SymptonsOf(x, Disease))", "all x. (SymptonsOf(x, Monkeypox) -> SymptonsOf(x, Virus))", "all x. (SymptonsOf(x, Monkeypox) -> SymptonsOf(x, Animal))", "all x. (SymptonsOf(x, Monkeypox) -> SymptonsOf(x, Mammal))", "all x. (SymptonsOf(x, Monkeypox) -> SymptonsOf(x, Human))", "all x. (SymptonsOf(x, Monkeypox) -> SymptonsOf(x, Glu))", "all x. (SymptonsOf(x, Monkeypox) -> SymptonsOf(x, Tiredness))", "all x. (SymptonsOf(x, Monkeypox) -> SymptonsOf(x, Fever))", "all x. (SymptonsOf(x, Monkeypox) -> SymptonsOf(x, Headache))", "all x. (SymptonsOf(x, Monkeypox) -> SymptonsOf(x, MusclePains))", "all x. (SymptonsOf(x, Monkeypox) -> SymptonsOf(x, Sickness))", "all x. (SymptonsOf(x, Monkeypox) -> SymptonsOf(x, Illness))", "all x. (SymptonsOf(x, Monkeypox) -> SymptonsOf(x, Disease))", "all x. (SymptonsOf(x, Monkeypox) -> SymptonsOf(x, Virus))", "all x. (SymptonsOf(x, Monkeypox) -> SymptonsOf(x, Animal))", "all x. (SymptonsOf(x, Monkeypox) -> SymptonsOf(x, Mammal))", "all x. (SymptonsOf(x, Monkeypox) -> SymptonsOf(x, Human))", "all x. (SymptonsOf(x, Monkeypox) -> SymptonsOf(x, Glu))", "all x. (SymptonsOf(x, Monkeypox) -> SymptonsOf(x, Tiredness))", "all x. (SymptonsOf(x, Monkeypox) -> SymptonsOf(x, Fever))", "all x. (SymptonsOf(x, Monkeypox) -> SymptonsOf(x, Headache))", "all x. (SymptonsOf(x, Monkeypox) -> SymptonsOf(x, MusclePains))", "all x. (SymptonsOf(x, Monkeypox) -> SymptonsOf(x, Sickness))", "all x. (SymptonsOf(x, Monkeypox) -> SymptonsOf(x, Illness))", "all x. (SymptonsOf(x, Monkeypox) -> SymptonsOf(x, Disease))", "all x. (SymptonsOf(x, Monkeypox) -> SymptonsOf(x, Virus))", "all x. (SymptonsOf(x, Monkeypox) -> SymptonsOf(x, Animal))", "all x. (SymptonsOf(x, Monkeypox) -> SymptonsOf(x, Mammal))", "all x. (SymptonsOf(x, Monkeypox) -> SymptonsOf(x, Human))", "all x. (SymptonsOf(x, Monkeypox) -> SymptonsOf(x, Glu))", "all x. (SymptonsOf(x, Monkeypox) -> SymptonsOf(x, Tiredness))", "all x. (SymptonsOf(x, Monkeypox) -> SymptonsOf(x, Fever))", "all x. (SymptonsOf(x, Monkeypox) -> SymptonsOf(x, Headache))", "all x. (SymptonsOf(x, Monkeypox) -> SymptonsOf(x, MusclePains))", "all x. (SymptonsOf(x, Monkeypox) -> SymptonsOf(x, Sickness))", "all x. (SymptonsOf(x, Monkeypox) -> SymptonsOf(x, Illness))", "all x. (SymptonsOf(x, Monkeypox) -> SymptonsOf(x, Disease))", "all x. (SymptonsOf(x, Monkeypox) -> SymptonsOf(x, Virus))", "all x. (SymptonsOf(x, Monkeypox) -> SymptonsOf(x, Animal))", "all x. (SymptonsOf(x, Monkeypox) -> SymptonsOf(x, Mammal))", "all x. (SymptonsOf(x, Monkeypox) -> SymptonsOf(x, Human))", "all x. (SymptonsOf(x, Monkeypox) -> SymptonsOf(x, Glu))", "all x. (SymptonsOf(x, Monkeypox) -> SymptonsOf(x, Tiredness))", "all x. (SymptonsOf(x, Monkeypox) -> SymptonsOf(x, Fever))", "all x. (SymptonsOf(x, Monkeypox) -> SymptonsOf(x, Headache))", "all x. (SymptonsOf(x, Monkeypox) -> SymptonsOf(x, MusclePains))", "all x. (SymptonsOf(x, Monkeypox) -> SymptonsOf(x, Sickness))", "all x. (SymptonsOf(x, Monkeypox) -> SymptonsOf(x, Illness))", "all x. (SymptonsOf(x, Monkeypox) -> SymptonsOf(x, Disease))", "all x. (SymptonsOf(x, Monkeypox) -> SymptonsOf(x, Virus))", "all x. (SymptonsOf(x, Monkeypox) -> SymptonsOf(x, Animal))", "all x. (SymptonsOf(x, Monkeypox) -> SymptonsOf(x, Mammal))", "all x. (SymptonsOf(x, Monkeypox) -> SymptonsOf(x, Human))", "all x. (SymptonsOf(x, Monkeypox) -> SymptonsOf(x, Glu))", "all x. (SymptonsOf(x, Monkeypox) -> SymptonsOf(x, Tiredness))", "all x. (SymptonsOf(x, Monkeypox) -> SymptonsOf(x, Fever))", "all x. (SymptonsOf(x, Monkeypox) -> SymptonsOf(x, Headache))", "all x. (SymptonsOf(x, Monkeypox) -> SymptonsOf(x, MusclePains))", "all x. (SymptonsOf(x, Monkeypox) -> SymptonsOf(x, Sickness))", "all x. (SymptonsOf(x, Monkeypox) -> SymptonsOf(x, Illness))", "all x. (SymptonsOf(x, Monkeypox) -> SymptonsOf(x, Disease))", "all x. (SymptonsOf(x, Monkeypox) -> SymptonsOf(x, Virus))", "all x. (SymptonsOf(x, Monkeypox) -> SymptonsOf(x, Animal))", "all x. (SymptonsOf(x, Monkeypox) -> SymptonsOf(x, Mammal))", "all x. (SymptonsOf(x, Monkeypox) -> SymptonsOf(x, Human))", "all x. (SymptonsOf(x, Monkeypox) -> SymptonsOf(x, Glu))", "all x. (SymptonsOf(x, Monkeypox) -> SymptonsOf(x, Tiredness))", "all x. (SymptonsOf(x, Monkeypox) -> SymptonsOf(x, Fever))", "all x. (SymptonsOf(x, Monkeypox) -> SymptonsOf(x, Headache))", "all x. (SymptonsOf(x, Monkeypox) -> SymptonsOf(x, MusclePains))"], "conclusion": "all x. (SymptonsOf(x, Monkeypox) -> SymptonsOf(x, Sickness))", "error_type": "<class 'nltk.inference.prover9.Prover9FatalException'>", "error_message": "(FATAL)\n%%ERROR: The following symbols/arities are used as both relation and function symbols: Humans/0.\n\n\nFatal error:  The following symbols/arities are used as both relation and function symbols: Humans/0", "stack_trace": "Traceback (most recent call last):\n  File \"/data/gpfs/projects/punim0478/bansaab/linc2/eval/tasks/owafoltask.py\", line 577, in _process_neurosymbolic\n    parsed = json.loads(gen)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/json/__init__.py\", line 346, in loads\n    return _default_decoder.decode(s)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/json/decoder.py\", line 337, in decode\n    obj, end = self.raw_decode(s, idx=_w(s, 0).end())\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/json/decoder.py\", line 355, in raw_decode\n    raise JSONDecodeError(\"Expecting value\", s, err.value) from None\njson.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"/data/gpfs/projects/punim0478/bansaab/linc2/eval/tasks/utils.py\", line 219, in evaluate\n    truth_value = prover.prove(c, p_list)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/inference/api.py\", line 37, in prove\n    return self._prove(goal, assumptions, verbose)[0]\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/inference/prover9.py\", line 327, in _prove\n    stdout, returncode = self._call_prover9(\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/inference/prover9.py\", line 370, in _call_prover9\n    raise Prover9FatalException(returncode, errormsg)\nnltk.inference.prover9.Prover9FatalException: (FATAL)\n%%ERROR: The following symbols/arities are used as both relation and function symbols: Humans/0.\n\n\nFatal error:  The following symbols/arities are used as both relation and function symbols: Humans/0\n"}
{"timestamp": "2025-09-16T17:29:43.903535", "premises": ["all x. (Disease(x) -> Monkeypox(x) & CausedBy(x, MonkeypoxVirus))", "all x. (Virus(x) -> Monkeypox(x) & OccursIn(x, CertainAnimals))", "all x. (Mammal(x) -> Human(x))", "all x. (Animal(x) -> Mammal(x))", "all x. (Disease(x) -> Symptons(x) & Symptons(x) = Fever & Symptons(x) = Headache & Symptons(x) = MusclePains & Symptons(x) = FeelingTired & Symptons(x) = SoOn)", "all x. (Disease(x) -> Symptons(x) & Symptons(x) = FeelingTired & Symptons(x) = SoOn)"], "conclusion": "all x. (Disease(x) -> Symptons(x) & Symptons(x) = Coughing)", "error_type": "<class 'nltk.inference.prover9.Prover9FatalException'>", "error_message": "(FATAL)\n%%ERROR: The following symbols/arities are used as both relation and function symbols: Symptons/1.\n\n\nFatal error:  The following symbols/arities are used as both relation and function symbols: Symptons/1", "stack_trace": "Traceback (most recent call last):\n  File \"/data/gpfs/projects/punim0478/bansaab/linc2/eval/tasks/owafoltask.py\", line 577, in _process_neurosymbolic\n    parsed = json.loads(gen)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/json/__init__.py\", line 346, in loads\n    return _default_decoder.decode(s)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/json/decoder.py\", line 337, in decode\n    obj, end = self.raw_decode(s, idx=_w(s, 0).end())\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/json/decoder.py\", line 355, in raw_decode\n    raise JSONDecodeError(\"Expecting value\", s, err.value) from None\njson.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"/data/gpfs/projects/punim0478/bansaab/linc2/eval/tasks/utils.py\", line 219, in evaluate\n    truth_value = prover.prove(c, p_list)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/inference/api.py\", line 37, in prove\n    return self._prove(goal, assumptions, verbose)[0]\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/inference/prover9.py\", line 327, in _prove\n    stdout, returncode = self._call_prover9(\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/inference/prover9.py\", line 370, in _call_prover9\n    raise Prover9FatalException(returncode, errormsg)\nnltk.inference.prover9.Prover9FatalException: (FATAL)\n%%ERROR: The following symbols/arities are used as both relation and function symbols: Symptons/1.\n\n\nFatal error:  The following symbols/arities are used as both relation and function symbols: Symptons/1\n"}
{"timestamp": "2025-09-16T17:29:43.903663", "premises": ["Monkeypox(x) -> MonkeypoxVirus(x)", "MonkeypoxVirus(x) -> OccursIn(x, Animals) | OccursIn(x, Humans)", "Humans -> Mammals", "Mammals -> Animals", "Symptons(x) -> Fever(x) | Headache(x) | MusclePains(x) | FeelingTired(x)", "FeelTired(x) -> Glu(x)"], "conclusion": "Symptons(x) -> Coughing(x)", "error_type": "<class 'nltk.inference.prover9.Prover9FatalException'>", "error_message": "(FATAL)\n%%ERROR: The following symbols/arities are used as both relation and function symbols: Animals/0, Humans/0.\n\n\nFatal error:  The following symbols/arities are used as both relation and function symbols: Animals/0, Humans/0", "stack_trace": "Traceback (most recent call last):\n  File \"/data/gpfs/projects/punim0478/bansaab/linc2/eval/tasks/owafoltask.py\", line 577, in _process_neurosymbolic\n    parsed = json.loads(gen)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/json/__init__.py\", line 346, in loads\n    return _default_decoder.decode(s)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/json/decoder.py\", line 337, in decode\n    obj, end = self.raw_decode(s, idx=_w(s, 0).end())\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/json/decoder.py\", line 355, in raw_decode\n    raise JSONDecodeError(\"Expecting value\", s, err.value) from None\njson.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"/data/gpfs/projects/punim0478/bansaab/linc2/eval/tasks/utils.py\", line 219, in evaluate\n    truth_value = prover.prove(c, p_list)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/inference/api.py\", line 37, in prove\n    return self._prove(goal, assumptions, verbose)[0]\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/inference/prover9.py\", line 327, in _prove\n    stdout, returncode = self._call_prover9(\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/inference/prover9.py\", line 370, in _call_prover9\n    raise Prover9FatalException(returncode, errormsg)\nnltk.inference.prover9.Prover9FatalException: (FATAL)\n%%ERROR: The following symbols/arities are used as both relation and function symbols: Animals/0, Humans/0.\n\n\nFatal error:  The following symbols/arities are used as both relation and function symbols: Animals/0, Humans/0\n"}
{"timestamp": "2025-09-16T17:29:43.903741", "premises": ["all x. (Monkeypox(x) -> InfectiousDisease(x) & CausedBy(x, MonkeypoxVirus))", "all x. (MonkeypoxVirus(x) -> CanOccurIn(x, CertainAnimals) & Including(x, Humans))", "all x. (Humans(x) -> Mammals(x))", "all x. (Mammals(x) -> Animals(x))", "all x. (Symptons(x, Monkeypox) -> Fever(x) & Headache(x) & MusclePains(x) & FeelingTired(x))", "all x. (FeelingTired(x) -> Glu(x))"], "conclusion": "all x. (Symptons(x, Monkeypox) -> Coughing(x))", "error_type": "<class 'nltk.inference.prover9.Prover9FatalException'>", "error_message": "(FATAL)\n%%ERROR: The following symbols are used with multiple arities: Humans/1, Humans/0, MonkeypoxVirus/1, MonkeypoxVirus/0, Monkeypox/1, Monkeypox/0.\n\n\nFatal error:  The following symbols are used with multiple arities: Humans/1, Humans/0, MonkeypoxVirus/1, MonkeypoxVirus/0, Monkeypox/1, Monkeypox/0", "stack_trace": "Traceback (most recent call last):\n  File \"/data/gpfs/projects/punim0478/bansaab/linc2/eval/tasks/owafoltask.py\", line 577, in _process_neurosymbolic\n    parsed = json.loads(gen)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/json/__init__.py\", line 346, in loads\n    return _default_decoder.decode(s)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/json/decoder.py\", line 337, in decode\n    obj, end = self.raw_decode(s, idx=_w(s, 0).end())\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/json/decoder.py\", line 355, in raw_decode\n    raise JSONDecodeError(\"Expecting value\", s, err.value) from None\njson.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"/data/gpfs/projects/punim0478/bansaab/linc2/eval/tasks/utils.py\", line 219, in evaluate\n    truth_value = prover.prove(c, p_list)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/inference/api.py\", line 37, in prove\n    return self._prove(goal, assumptions, verbose)[0]\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/inference/prover9.py\", line 327, in _prove\n    stdout, returncode = self._call_prover9(\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/inference/prover9.py\", line 370, in _call_prover9\n    raise Prover9FatalException(returncode, errormsg)\nnltk.inference.prover9.Prover9FatalException: (FATAL)\n%%ERROR: The following symbols are used with multiple arities: Humans/1, Humans/0, MonkeypoxVirus/1, MonkeypoxVirus/0, Monkeypox/1, Monkeypox/0.\n\n\nFatal error:  The following symbols are used with multiple arities: Humans/1, Humans/0, MonkeypoxVirus/1, MonkeypoxVirus/0, Monkeypox/1, Monkeypox/0\n"}
{"timestamp": "2025-09-16T17:29:43.907768", "premises": ["all x. (Monkeypox(x) -> Disease(x) & CausedBy(x, MonkeypoxVirus))", "all x. (MonkeypoxVirus(x) -> OccurIn(x, Animals) & OccurIn(x, Humans))", "all x. (Human(x) -> Mammal(x))", "all x. (Mammal(x) -> Animal(x))", "all x. (Symptons(x, Monkeypox) -> Includes(x, Fever) & Includes(x, Headache) & Includes(x, MusclePains) & Includes(x, FeelingTired))", "all x. (Symptons(x, Monkeypox) -> Includes(x, FeelingTired) & CausedBy(x, Glu))"], "conclusion": "all x. (Symptons(x, Monkeypox) -> Includes(x, Coughing))", "error_type": "<class 'nltk.inference.prover9.Prover9FatalException'>", "error_message": "(FATAL)\n%%ERROR: The following symbols are used with multiple arities: MonkeypoxVirus/1, MonkeypoxVirus/0, Monkeypox/1, Monkeypox/0.\n\n\nFatal error:  The following symbols are used with multiple arities: MonkeypoxVirus/1, MonkeypoxVirus/0, Monkeypox/1, Monkeypox/0", "stack_trace": "Traceback (most recent call last):\n  File \"/data/gpfs/projects/punim0478/bansaab/linc2/eval/tasks/owafoltask.py\", line 577, in _process_neurosymbolic\n    parsed = json.loads(gen)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/json/__init__.py\", line 346, in loads\n    return _default_decoder.decode(s)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/json/decoder.py\", line 337, in decode\n    obj, end = self.raw_decode(s, idx=_w(s, 0).end())\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/json/decoder.py\", line 355, in raw_decode\n    raise JSONDecodeError(\"Expecting value\", s, err.value) from None\njson.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"/data/gpfs/projects/punim0478/bansaab/linc2/eval/tasks/utils.py\", line 219, in evaluate\n    truth_value = prover.prove(c, p_list)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/inference/api.py\", line 37, in prove\n    return self._prove(goal, assumptions, verbose)[0]\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/inference/prover9.py\", line 327, in _prove\n    stdout, returncode = self._call_prover9(\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/inference/prover9.py\", line 370, in _call_prover9\n    raise Prover9FatalException(returncode, errormsg)\nnltk.inference.prover9.Prover9FatalException: (FATAL)\n%%ERROR: The following symbols are used with multiple arities: MonkeypoxVirus/1, MonkeypoxVirus/0, Monkeypox/1, Monkeypox/0.\n\n\nFatal error:  The following symbols are used with multiple arities: MonkeypoxVirus/1, MonkeypoxVirus/0, Monkeypox/1, Monkeypox/0\n"}
{"timestamp": "2025-09-16T17:29:43.905583", "premises": ["all x. (Monkeypox(x) -> CausedBy(x, MonkeypoxVirus))", "all x. (MonkeypoxVirus(x) -> CanOccurIn(x, Animals))", "all x. (Animal(x) -> Mammal(x))", "all x. (Mammal(x) -> Animal(x))", "all x. (Monkeypox(x) -> Symptom(x, Fever))", "all x. (Monkeypox(x) -> Symptom(x, Headache))", "all x. (Monkeypox(x) -> Symptom(x, MusclePains))", "all x. (Monkeypox(x) -> Symptom(x, Tired))", "all x. (Tired(x) -> Symptom(x, Glu))", "all x. (Symptom(x, Glu) -> Symptom(x, Coughing))", "all x. (Symptom(x, Coughing) -> SymptonOf(x, Monkeypox))"], "conclusion": "SymptonsOf(Monkeypox, Coughing)", "error_type": "<class 'nltk.inference.prover9.Prover9FatalException'>", "error_message": "(FATAL)\n%%ERROR: The following symbols are used with multiple arities: Tired/1, Tired/0, MonkeypoxVirus/1, MonkeypoxVirus/0, Monkeypox/1, Monkeypox/0.\n\n\nFatal error:  The following symbols are used with multiple arities: Tired/1, Tired/0, MonkeypoxVirus/1, MonkeypoxVirus/0, Monkeypox/1, Monkeypox/0", "stack_trace": "Traceback (most recent call last):\n  File \"/data/gpfs/projects/punim0478/bansaab/linc2/eval/tasks/owafoltask.py\", line 577, in _process_neurosymbolic\n    parsed = json.loads(gen)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/json/__init__.py\", line 346, in loads\n    return _default_decoder.decode(s)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/json/decoder.py\", line 337, in decode\n    obj, end = self.raw_decode(s, idx=_w(s, 0).end())\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/json/decoder.py\", line 355, in raw_decode\n    raise JSONDecodeError(\"Expecting value\", s, err.value) from None\njson.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"/data/gpfs/projects/punim0478/bansaab/linc2/eval/tasks/utils.py\", line 219, in evaluate\n    truth_value = prover.prove(c, p_list)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/inference/api.py\", line 37, in prove\n    return self._prove(goal, assumptions, verbose)[0]\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/inference/prover9.py\", line 327, in _prove\n    stdout, returncode = self._call_prover9(\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/inference/prover9.py\", line 370, in _call_prover9\n    raise Prover9FatalException(returncode, errormsg)\nnltk.inference.prover9.Prover9FatalException: (FATAL)\n%%ERROR: The following symbols are used with multiple arities: Tired/1, Tired/0, MonkeypoxVirus/1, MonkeypoxVirus/0, Monkeypox/1, Monkeypox/0.\n\n\nFatal error:  The following symbols are used with multiple arities: Tired/1, Tired/0, MonkeypoxVirus/1, MonkeypoxVirus/0, Monkeypox/1, Monkeypox/0\n"}
{"timestamp": "2025-09-16T17:29:43.928152", "premises": ["all x. (Monkeypox(x) -> InfectiousDisease(x) & CausedBy(x, MonkeypoxVirus))", "all x. (MonkeypoxVirus(x) -> OccurIn(x, CertainAnimals) & Including(x, Humans))", "all x. (Humans(x) -> Mammals(x))", "all x. (Mammals(x) -> Animals(x))", "all x. (Symptons(x, Monkeypox) -> Fever(x) & Headache(x) & MusclePains(x) & FeelingTired(x))", "all x. (FeelingTired(x) -> Glu(x))"], "conclusion": "all x. (Symptons(x, Monkeypox) -> Coughing(x))", "error_type": "<class 'nltk.inference.prover9.Prover9FatalException'>", "error_message": "(FATAL)\n%%ERROR: The following symbols are used with multiple arities: Humans/1, Humans/0, MonkeypoxVirus/1, MonkeypoxVirus/0, Monkeypox/1, Monkeypox/0.\n\n\nFatal error:  The following symbols are used with multiple arities: Humans/1, Humans/0, MonkeypoxVirus/1, MonkeypoxVirus/0, Monkeypox/1, Monkeypox/0", "stack_trace": "Traceback (most recent call last):\n  File \"/data/gpfs/projects/punim0478/bansaab/linc2/eval/tasks/owafoltask.py\", line 577, in _process_neurosymbolic\n    parsed = json.loads(gen)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/json/__init__.py\", line 346, in loads\n    return _default_decoder.decode(s)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/json/decoder.py\", line 337, in decode\n    obj, end = self.raw_decode(s, idx=_w(s, 0).end())\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/json/decoder.py\", line 355, in raw_decode\n    raise JSONDecodeError(\"Expecting value\", s, err.value) from None\njson.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"/data/gpfs/projects/punim0478/bansaab/linc2/eval/tasks/utils.py\", line 219, in evaluate\n    truth_value = prover.prove(c, p_list)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/inference/api.py\", line 37, in prove\n    return self._prove(goal, assumptions, verbose)[0]\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/inference/prover9.py\", line 327, in _prove\n    stdout, returncode = self._call_prover9(\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/inference/prover9.py\", line 370, in _call_prover9\n    raise Prover9FatalException(returncode, errormsg)\nnltk.inference.prover9.Prover9FatalException: (FATAL)\n%%ERROR: The following symbols are used with multiple arities: Humans/1, Humans/0, MonkeypoxVirus/1, MonkeypoxVirus/0, Monkeypox/1, Monkeypox/0.\n\n\nFatal error:  The following symbols are used with multiple arities: Humans/1, Humans/0, MonkeypoxVirus/1, MonkeypoxVirus/0, Monkeypox/1, Monkeypox/0\n"}
{"timestamp": "2025-09-16T17:34:54.027128", "premises": ["all x. (WildTurkey(x) -> (EasternWildTurkey(x) | OsceolaWildTurkey(x) | GouldsWildTurkey(x) | MerriamsWildTurkey(x) | RioGrandeWildTurkey(x) | OcellatedWildTurkey(x)))", "all x. (WildTurkey(x) -> (EasternWildTurkey(x) | OsceolaWildTurkey(x) | GouldsWildTurkey(x) | MerriamsWildTurkey(x) | RioGrandeWildTurkey(x) | OcellatedWildTurkey(x)))", "-EasternWildTurkey(Tom)", "-OsceolaWildTurkey(Tom)", "-GouldsWildTurkey(Tom) -MerriamsWildTurkey(Tom) -RioGrandeWildTurkey(Tom)", "WildTurkey(Tom)"], "conclusion": "OcellatedWildTurkey(Tom)", "error_type": "<class 'nltk.sem.logic.LogicalExpressionException'>", "error_message": "Unexpected token: '-'.\n-GouldsWildTurkey(Tom) -MerriamsWildTurkey(Tom) -RioGrandeWildTurkey(Tom)\n                       ^", "stack_trace": "Traceback (most recent call last):\n  File \"/data/gpfs/projects/punim0478/bansaab/linc2/eval/tasks/owafoltask.py\", line 577, in _process_neurosymbolic\n    parsed = json.loads(gen)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/json/__init__.py\", line 346, in loads\n    return _default_decoder.decode(s)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/json/decoder.py\", line 337, in decode\n    obj, end = self.raw_decode(s, idx=_w(s, 0).end())\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/json/decoder.py\", line 355, in raw_decode\n    raise JSONDecodeError(\"Expecting value\", s, err.value) from None\njson.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/sem/logic.py\", line 156, in parse\n    raise UnexpectedTokenException(self._currentIndex + 1, self.token(0))\nnltk.sem.logic.UnexpectedTokenException: Unexpected token: '-'.\n\nThe above exception was the direct cause of the following exception:\n\nTraceback (most recent call last):\n  File \"/data/gpfs/projects/punim0478/bansaab/linc2/eval/tasks/utils.py\", line 216, in evaluate\n    p_list = [read_expr(p) for p in premises]\n  File \"/data/gpfs/projects/punim0478/bansaab/linc2/eval/tasks/utils.py\", line 216, in <listcomp>\n    p_list = [read_expr(p) for p in premises]\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/sem/logic.py\", line 957, in fromstring\n    return cls._logic_parser.parse(s, signature)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/sem/logic.py\", line 159, in parse\n    raise LogicalExpressionException(None, msg) from e\nnltk.sem.logic.LogicalExpressionException: Unexpected token: '-'.\n-GouldsWildTurkey(Tom) -MerriamsWildTurkey(Tom) -RioGrandeWildTurkey(Tom)\n                       ^\n"}
{"timestamp": "2025-09-16T17:34:54.035646", "premises": ["TEXT: There are six types of wild turkeys: Eastern wild turkey, Osceola wild turkey, Gould\u2019s wild turkey, Merriam\u2019s wild turkey, Rio Grande wild turkey, and Ocellated wild turkey.", "not(EasternTurkey(Tom))", "not(OsceolaTurkey(Tom))", "not(GouldTurkey(Tom)) & not(MerriamTurkey(Tom)) & not(RioGrandeTurkey(Tom))", "WildTurkey(Tom)"], "conclusion": "OcellatedTurkey(Tom)", "error_type": "<class 'nltk.sem.logic.LogicalExpressionException'>", "error_message": "Unexpected token: 'There'.\nTEXT: There are six types of wild turkeys: Eastern wild turkey, Osceola wild turkey, Gould\u2019s wild turkey, Merriam\u2019s wild turkey, Rio Grande wild turkey, and Ocellated wild turkey.\n      ^", "stack_trace": "Traceback (most recent call last):\n  File \"/data/gpfs/projects/punim0478/bansaab/linc2/eval/tasks/owafoltask.py\", line 577, in _process_neurosymbolic\n    parsed = json.loads(gen)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/json/__init__.py\", line 346, in loads\n    return _default_decoder.decode(s)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/json/decoder.py\", line 337, in decode\n    obj, end = self.raw_decode(s, idx=_w(s, 0).end())\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/json/decoder.py\", line 355, in raw_decode\n    raise JSONDecodeError(\"Expecting value\", s, err.value) from None\njson.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/sem/logic.py\", line 156, in parse\n    raise UnexpectedTokenException(self._currentIndex + 1, self.token(0))\nnltk.sem.logic.UnexpectedTokenException: Unexpected token: 'There'.\n\nThe above exception was the direct cause of the following exception:\n\nTraceback (most recent call last):\n  File \"/data/gpfs/projects/punim0478/bansaab/linc2/eval/tasks/utils.py\", line 216, in evaluate\n    p_list = [read_expr(p) for p in premises]\n  File \"/data/gpfs/projects/punim0478/bansaab/linc2/eval/tasks/utils.py\", line 216, in <listcomp>\n    p_list = [read_expr(p) for p in premises]\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/sem/logic.py\", line 957, in fromstring\n    return cls._logic_parser.parse(s, signature)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/sem/logic.py\", line 159, in parse\n    raise LogicalExpressionException(None, msg) from e\nnltk.sem.logic.LogicalExpressionException: Unexpected token: 'There'.\nTEXT: There are six types of wild turkeys: Eastern wild turkey, Osceola wild turkey, Gould\u2019s wild turkey, Merriam\u2019s wild turkey, Rio Grande wild turkey, and Ocellated wild turkey.\n      ^\n"}
{"timestamp": "2025-09-16T17:34:54.030436", "premises": ["all x. (Tom(x) -> WildTurkey(x))", "all x. all y. (TypeOf(x, y) -> Tom(x))", "all x. all y. (Not(x, y) -> Not(x, Tom))", "all x. all y. (Not(x, y) -> Not(x, Tom))", "all x. all y. (Not(x, y) -> Not(x, Tom))", "all x. all y. (Not(x, y) -> Not(x, Tom))", "all x. all y. (Not(x, y) -> Not(x, Tom))", "all x. all y. (Not(x, y) -> Not(x, Tom))", "all x. all y. (Not(x, y) -> Not(x, Tom))", "all x. all y. (Not(x, y) -> Not(x, Tom))", "all x. all y. (Not(x, y) -> Not(x, Tom))", "all x. all y. (Not(x, y) -> Not(x, Tom))", "all x. all y. (Not(x, y) -> Not(x, Tom))", "all x. all y. (Not(x, y) -> Not(x, Tom))", "all x. all y. (Not(x, y) -> Not(x, Tom))", "all x. all y. (Not(x, y) -> Not(x, Tom))", "all x. all y. (Not(x, y) -> Not(x, Tom))", "all x. all y. (Not(x, y) -> Not(x, Tom))", "all x. all y. (Not(x, y) -> Not(x, Tom))", "all x. all y. (Not(x, y) -> Not(x, Tom))", "all x. all y. (Not(x, y) -> Not(x, Tom))", "all x. all y. (Not(x, y) -> Not(x, Tom))", "all x. all y. (Not(x, y) -> Not(x, Tom))", "all x. all y. (Not(x, y) -> Not(x, Tom))", "all x. all y. (Not(x, y) -> Not(x, Tom))", "all x. all y. (Not(x, y) -> Not(x, Tom))", "all x. all y. (Not(x, y) -> Not(x, Tom))", "all x. all y. (Not(x, y) -> Not(x, Tom))", "all x. all y. (Not(x, y) -> Not(x, Tom))", "all x. all y. (Not(x, y) -> Not(x, Tom))", "all x. all y. (Not(x, y) -> Not(x, Tom))", "all x. all y. (Not(x, y) -> Not(x, Tom))", "all x. all y. (Not(x, y) -> Not(x, Tom))", "all x. all y. (Not(x, y) -> Not(x, Tom))", "all x. all y. (Not(x, y) -> Not(x, Tom))", "all x. all y. (Not(x, y) -> Not(x, Tom))", "all x. all y. (Not(x, y) -> Not(x, Tom))", "all x. all y. (Not(x, y) -> Not(x, Tom))", "all x. all y. (Not(x, y) -> Not(x, Tom))", "all x. all y. (Not(x, y) -> Not(x, Tom))", "all x. all y. (Not(x, y) -> Not(x, Tom))", "all x. all y. (Not(x, y) -> Not(x, Tom))", "all x. all y. (Not(x, y) -> Not(x, Tom))", "all x. all y. (Not(x, y) -> Not(x, Tom))", "all x. all y. (Not(x, y) -> Not(x, Tom))", "all x. all y. (Not(x, y) -> Not(x, Tom))", "all x. all y. (Not(x, y) -> Not(x, Tom))", "all x. all y. (Not(x, y) -> Not(x, Tom))", "all x. all y. (Not(x, y) -> Not(x, Tom))", "all x. all y. (Not(x, y) -> Not(x, Tom))", "all x. all y. (Not(x, y) -> Not(x, Tom))", "all x. all y. (Not(x, y) -> Not(x, Tom))", "all x. all y. (Not(x, y) -> Not(x, Tom))", "all x. all y. (Not(x, y) -> Not(x, Tom))", "all x. all y. (Not(x, y) -> Not(x, Tom))", "all x. all y. (Not(x, y) -> Not(x, Tom))", "all x. all y. (Not(x, y) -> Not(x, Tom))", "all x. all y. (Not(x, y) -> Not(x, Tom))", "all x. all y. (Not(x, y) -> Not(x, Tom))", "all x. all y. (Not(x, y) -> Not(x, Tom))", "all x. all y. (Not(x, y) -> Not(x, Tom))", "all x. all y. (Not(x, y) -> Not(x, Tom))", "all x. all y. (Not(x, y) -> Not(x, Tom))", "all x. all y. (Not(x, y) -> Not(x, Tom))", "all x. all y. (Not(x, y) -> Not(x, Tom))", "all x. all y. (Not(x, y) -> Not(x, Tom))", "all x. all y. (Not(x, y) -> Not(x, Tom))", "all x. all y. (Not(x, y) -> Not(x, Tom))", "all x. all y. (Not(x, y) -> Not(x, Tom))", "all x. all y. (Not(x, y) -> Not(x, Tom))", "all x. all y. (Not(x, y) -> Not(x, Tom))", "all x. all y. (Not(x, y) -> Not(x, Tom))", "all x. all y. (Not(x, y) -> Not(x, Tom))", "all x. all y. (Not(x, y) -> Not(x, Tom))", "all x. all y. (Not(x, y) -> Not(x, Tom))", "all x. all y. (Not(x, y) -> Not(x, Tom))", "all x. all y. (Not(x, y) -> Not(x, Tom))", "all x. all y. (Not(x, y) -> Not(x, Tom))", "all x. all y. (Not(x, y) -> Not(x, Tom))", "all x. all y. (Not(x, y) -> Not(x, Tom))", "all x. all y. (Not(x, y) -> Not(x, Tom))", "all x. all y. (Not(x, y) -> Not(x, Tom))", "all x. all y. (Not(x, y) -> Not(x, Tom))", "all x. all y. (Not(x, y) -> Not(x, Tom))", "all x. all y. (Not(x, y) -> Not(x, Tom))", "all x. all y. (Not(x, y) -> Not(x, Tom))", "all x. all y. (Not(x, y) -> Not(x, Tom))", "all x. all y. (Not(x, y) -> Not(x, Tom))", "all x. all y. (Not(x, y) -> Not(x, Tom))", "all x. all y. (Not(x, y) -> Not(x, Tom))", "all x. all y. (Not(x, y) -> Not(x, Tom))", "all x. all y. (Not(x, y) -> Not(x, Tom))", "all x. all y. (Not(x, y) -> Not(x, Tom))", "all x. all y. (Not(x, y) -> Not(x, Tom))", "all x. all y. (Not(x, y) -> Not(x, Tom))", "all x. all y. (Not(x, y) -> Not(x, Tom))", "all x. all y. (Not(x, y) -> Not(x, Tom))", "all x. all y. (Not(x, y) -> Not(x, Tom))", "all x. all y. (Not(x, y) -> Not(x, Tom))", "all x. all y. (Not(x, y) -> Not(x, Tom))", "all x. all y. (Not(x, y) -> Not(x, Tom))", "all x. all y. (Not(x, y) -> Not(x, Tom))", "all x. all y. (Not(x, y) -> Not(x, Tom))", "all x. all y. (Not(x, y) -> Not(x, Tom))", "all x. all y. (Not(x, y) -> Not(x, Tom))", "all x. all y. (Not(x, y) -> Not(x, Tom))", "all x. all y. (Not(x, y) -> Not(x, Tom))", "all x. all y. (Not(x, y) -> Not(x, Tom))", "all x. all y. (Not(x, y) -> Not(x, Tom))", "all x. all y. (Not(x, y) -> Not(x, Tom))", "all x. all y. (Not(x, y) -> Not(x, Tom))", "all x. all y. (Not(x, y) -> Not(x, Tom))", "all x. all y. (Not(x, y) -> Not(x, Tom))", "all x. all y. (Not(x, y) -> Not(x, Tom))", "all x. all y. (Not(x, y) -> Not(x, Tom))", "all x. all y. (Not(x, y) -> Not(x, Tom))", "all x. all y. (Not(x, y) -> Not(x, Tom))", "all x. all y. (Not(x, y) -> Not(x, Tom))", "all x. all y. (Not(x, y) -> Not(x, Tom))", "all x. all y. (Not(x, y) -> Not(x, Tom))", "all x. all y. (Not(x, y) -> Not(x, Tom))", "all x. all y. (Not(x, y) -> Not(x, Tom))", "all x. all y. (Not(x, y) -> Not(x, Tom))", "all x. all y. (Not(x, y) -> Not(x, Tom))", "all x. all y. (Not(x, y) -> Not(x, Tom))", "all x. all y. (Not(x, y) -> Not(x, Tom))", "all x. all y. (Not(x, y) -> Not(x, Tom))", "all x. all y. (Not(x, y) -> Not(x, Tom))", "all x. all y. (Not(x, y) -> Not(x, Tom))", "all x. all y. (Not(x, y) -> Not(x, Tom))", "all x. all y. (Not(x, y) -> Not(x, Tom))", "all x. all y. (Not(x, y) -> Not(x, Tom))", "all x. all y. (Not(x, y) -> Not(x, Tom))", "all x. all y. (Not(x, y) -> Not(x, Tom))", "all x. all y. (Not(x, y) -> Not(x, Tom))", "all x. all y. (Not(x, y) -> Not(x, Tom))", "all x. all y. (Not(x, y) -> Not(x, Tom))", "all x. all y. (Not(x, y) -> Not(x, Tom))", "all x. all y. (Not(x, y) -> Not(x, Tom))", "all x. all y. (Not(x, y) -> Not(x, Tom))", "all x. all y. (Not(x, y) -> Not(x, Tom))", "all x. all y. (Not(x, y) -> Not(x, Tom))", "all x. all y. (Not(x, y) -> Not(x, Tom))", "all x. all y. (Not(x, y) -> Not(x, Tom))", "all x. all y. (Not(x, y) -> Not(x, Tom))", "all x. all y. (Not(x, y) -> Not(x, Tom))", "all x. all y. (Not(x, y) -> Not(x, Tom))", "all x. all y. (Not(x, y) -> Not(x, Tom))", "all x. all y. (Not(x, y) -> Not(x, Tom))", "all x. all y. (Not(x, y) -> Not(x, Tom))", "all x. all y. (Not(x, y) -> Not(x, Tom))", "all x. all y. (Not(x, y) -> Not(x, Tom))", "all x. all y. (Not(x, y) -> Not(x, Tom))", "all x. all y. (Not(x, y) -> Not(x, Tom))", "all x. all y. (Not(x, y) -> Not(x, Tom))", "all x. all y. (Not(x, y) -> Not(x, Tom))", "all x. all y. (Not(x, y) -> Not(x, Tom))", "all x. all y. (Not(x, y) -> Not(x, Tom))", "all x. all y. (Not(x, y) -> Not(x, Tom))", "all x. all y. (Not(x, y) -> Not(x, Tom))", "all x. all y. (Not(x, y) -> Not(x, Tom))", "all x. all y. (Not(x, y) -> Not(x, Tom))", "all x. all y. (Not(x, y) -> Not(x, Tom))", "all x. all y. (Not(x, y) -> Not(x, Tom))", "all x. all y. (Not(x, y) -> Not(x, Tom))", "all x. all y. (Not(x, y) -> Not(x, Tom))", "all x. all y. (Not(x, y) -> Not(x, Tom))", "all x. all y. (Not(x, y) -> Not(x, Tom))", "all x. all y. (Not(x, y) -> Not(x, Tom))", "all x. all y. (Not(x, y) -> Not(x, Tom))", "all x. all y. (Not(x, y) -> Not(x, Tom))", "all x. all y. (Not(x, y) -> Not(x, Tom))", "all x. all y. (Not(x, y) -> Not(x, Tom))", "all x. all y. (Not(x, y) -> Not(x, Tom))", "all x. all y. (Not(x, y) -> Not(x, Tom))", "all x. all y. (Not(x, y) -> Not(x, Tom))", "all x. all y. (Not(x, y) -> Not(x, Tom))", "all x. all y. (Not(x, y) -> Not(x, Tom))", "all x. all y. (Not(x, y) -> Not(x, Tom))", "all x. all y. (Not(x, y) -> Not(x, Tom))", "all x. all y. (Not(x, y) -> Not(x, Tom))", "all x. all y. (Not(x, y) -> Not(x, Tom))", "all x. all y. (Not(x, y) -> Not(x, Tom))", "all x. all y. (Not(x, y) -> Not(x, Tom))", "all x. all y. (Not(x, y) -> Not(x, Tom))", "all x. all y. (Not(x, y) -> Not(x, Tom))", "all x. all y. (Not(x, y) -> Not(x, Tom))", "all x. all y. (Not(x, y) -> Not(x, Tom))", "all x. all y. (Not(x, y) -> Not(x, Tom))", "all x. all y. (Not(x, y) -> Not(x, Tom))", "all x. all y. (Not(x, y) -> Not(x, Tom))", "all x. all y. (Not(x, y) -> Not(x, Tom))", "all x. all y. (Not(x, y) -> Not(x, Tom))", "all x. all y. (Not(x, y) -> Not(x, Tom))", "all x. all y. (Not(x, y) -> Not(x, Tom))", "all x. all y. (Not(x, y) -> Not(x, Tom))", "all x. all y. (Not(x, y) -> Not(x, Tom))", "all x. all y. (Not(x, y) -> Not(x, Tom))", "all x. all y. (Not(x, y) -> Not(x, Tom))", "all x. all y. (Not(x, y) -> Not(x, Tom))", "all x. all y. (Not(x, y) -> Not(x, Tom))", "all x. all y. (Not(x, y) -> Not(x, Tom))", "all x. all y. (Not(x, y) -> Not(x, Tom))", "all x. all y. (Not(x, y) -> Not(x, Tom))", "all x. all y. (Not(x, y) -> Not(x, Tom))", "all x. all y. (Not(x, y) -> Not(x, Tom))", "all x. all y. (Not(x, y) -> Not(x, Tom))", "all x. all y. (Not(x, y) -> Not(x, Tom))", "all x. all y. (Not(x, y) -> Not(x, Tom))", "all x. all y. (Not(x, y) -> Not(x, Tom))", "all x. all y. (Not(x, y) -> Not(x, Tom))", "all x. all y. (Not(x, y) -> Not(x, Tom))", "all x. all y. (Not(x, y) -> Not(x, Tom))", "all x. all y. (Not(x, y) -> Not(x, Tom))", "all x. all y. (Not(x, y) -> Not(x, Tom))", "all x. all y. (Not(x, y) -> Not(x, Tom))", "all x. all y. (Not(x, y) -> Not(x, Tom))", "all x. all y. (Not(x, y) -> Not(x, Tom))", "all x. all y. (Not(x, y) -> Not(x, Tom))", "all x. all y. (Not(x, y) -> Not(x, Tom))", "all x. all y. (Not(x, y) -> Not(x, Tom))", "all x. all y. (Not(x, y) -> Not(x, Tom))", "all x. all y. (Not(x, y) -> Not(x, Tom))", "all x. all y. (Not(x, y) -> Not(x, Tom))", "all x. all y. (Not(x, y) -> Not(x, Tom))", "all x. all y. (Not(x, y) -> Not(x, Tom))", "all x. all y. (Not(x, y) -> Not(x, Tom))", "all x. all y. (Not(x, y) -> Not(x, Tom))", "all x. all y. (Not(x, y) -> Not(x, Tom))", "all x. all y. (Not(x, y) -> Not(x, Tom))", "all x. all y. (Not(x, y) -> Not(x, Tom))", "all x. all y. (Not(x, y) -> Not(x, Tom))", "all x. all y. (Not(x, y) -> Not(x, Tom))", "all x. all y. (Not(x, y) -> Not(x, Tom))", "all x. all y. (Not(x, y) -> Not(x, Tom))", "all x. all y. (Not(x, y) -> Not(x, Tom))", "all x. all y. (Not(x, y) -> Not(x, Tom))", "all x. all y. (Not(x, y) -> Not(x, Tom))", "all x. all y. (Not(x, y) -> Not(x, Tom))", "all x. all y. (Not(x, y) -> Not(x, Tom))", "all x. all y. (Not(x, y) -> Not(x, Tom))", "all x. all y. (Not(x, y) -> Not(x, Tom))", "all x. all y. (Not(x, y) -> Not(x, Tom))"], "conclusion": "all x. all y.", "error_type": "<class 'nltk.sem.logic.LogicalExpressionException'>", "error_message": "End of input found.  Expression expected.\nall x. all y.\n             ^", "stack_trace": "Traceback (most recent call last):\n  File \"/data/gpfs/projects/punim0478/bansaab/linc2/eval/tasks/owafoltask.py\", line 577, in _process_neurosymbolic\n    parsed = json.loads(gen)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/json/__init__.py\", line 346, in loads\n    return _default_decoder.decode(s)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/json/decoder.py\", line 337, in decode\n    obj, end = self.raw_decode(s, idx=_w(s, 0).end())\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/json/decoder.py\", line 355, in raw_decode\n    raise JSONDecodeError(\"Expecting value\", s, err.value) from None\njson.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/sem/logic.py\", line 154, in parse\n    result = self.process_next_expression(None)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/sem/logic.py\", line 290, in process_next_expression\n    accum = self.handle(tok, context)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/sem/logic.py\", line 312, in handle\n    return self.handle_quant(tok, context)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/sem/logic.py\", line 427, in handle_quant\n    accum = self.process_next_expression(tok)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/sem/logic.py\", line 290, in process_next_expression\n    accum = self.handle(tok, context)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/sem/logic.py\", line 312, in handle\n    return self.handle_quant(tok, context)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/sem/logic.py\", line 417, in handle_quant\n    raise ExpectedMoreTokensException(\nnltk.sem.logic.ExpectedMoreTokensException: End of input found.  Expression expected.\n\nThe above exception was the direct cause of the following exception:\n\nTraceback (most recent call last):\n  File \"/data/gpfs/projects/punim0478/bansaab/linc2/eval/tasks/utils.py\", line 215, in evaluate\n    c = read_expr(conclusion)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/sem/logic.py\", line 957, in fromstring\n    return cls._logic_parser.parse(s, signature)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/sem/logic.py\", line 159, in parse\n    raise LogicalExpressionException(None, msg) from e\nnltk.sem.logic.LogicalExpressionException: End of input found.  Expression expected.\nall x. all y.\n             ^\n"}
{"timestamp": "2025-09-16T17:34:54.082220", "premises": ["all x. (WildTurkey(x) -> (Eastern(x) | Osceola(x) | Goulds(x) | Merriams(x) | RioGrande(x) | Ocellated(x)))", "all x. (Not(Eastern(x)) & Not(Osceola(x)) & Not(Goulds(x)) & Not(Merriams(x)) & Not(RioGrande(x)) & Not(Ocellated(x))) & WildTurkey(x)", "all x. (Not(Eastern(x)) & Not(Osceola(x)) & Not(Goulds(x)) & Not(Merriams(x)) & Not(RioGrande(x)) & Not(Ocellated(x))) & WildTurkey(x)", "all x. (Not(Eastern(x)) & Not(Osceola(x)) & Not(Goulds(x)) & Not(Merriams(x)) & Not(RioGrande(x)) & Not(Ocellated(x))) & WildTurkey(x)", "all x. (Not(Eastern(x)) & Not(Osceola(x)) & Not(Goulds(x)) & Not(Merriams(x)) & Not(RioGrande(x)) & Not(Ocellated(x))) & WildTurkey(x)", "all x. (Not(Eastern(x)) & Not(Osceola(x)) & Not(Goulds(x)) & Not(Merriams(x)) & Not(RioGrande(x)) & Not(Ocellated(x))) & WildTurkey(x)", "all x. (Not(Eastern(x)) & Not(Osceola(x)) & Not(Goulds(x)) & Not(Merriams(x)) & Not(RioGrande(x)) & Not(Ocellated(x))) & WildTurkey(x)", "all x. (Not(Eastern(x)) & Not(Osceola(x)) & Not(Goulds(x)) & Not(Merriams(x)) & Not(RioGrande(x)) & Not(Ocellated(x))) & WildTurkey(x)", "all x. (Not(Eastern(x)) & Not(Osceola(x)) & Not(Goulds(x)) & Not(Merriams(x)) & Not(RioGrande(x)) & Not(Ocellated(x))) & WildTurkey(x)", "all x. (Not(Eastern(x)) & Not(Osceola(x)) & Not(Goulds(x)) & Not(Merriams(x)) & Not(RioGrande(x)) & Not(Ocellated(x))) & WildTurkey(x)", "all x. (Not(Eastern(x)) & Not(Osceola(x)) & Not(Goulds(x)) & Not(Merriams(x)) & Not(RioGrande(x)) & Not(Ocellated(x))) & WildTurkey(x)", "all x. (Not(Eastern(x)) & Not(Osceola(x)) & Not(Goulds(x)) & Not(Merriams(x)) & Not(RioGrande(x)) & Not(Ocellated(x))) & WildTurkey(x)", "all x. (Not(Eastern(x)) & Not(Osceola(x)) & Not(Goulds(x)) & Not(Merriams(x)) & Not(RioGrande(x)) & Not(Ocellated(x))) & WildTurkey(x)", "all x. (Not(Eastern(x)) & Not(Osceola(x)) & Not(Goulds(x)) & Not(Merriams(x)) & Not(RioGrande(x)) & Not(Ocellated(x))) & WildTurkey(x)", "all x. (Not(Eastern(x)) & Not(Osceola(x)) & Not(Goulds(x)) & Not(Merriams(x)) & Not(RioGrande(x)) & Not(Ocellated(x))) & WildTurkey(x)", "all x. (Not(Eastern(x)) & Not(Osceola(x)) & Not(Goulds(x)) & Not(Merriams(x)) & Not(RioGrande(x)) & Not(Ocellated(x))) & WildTurkey(x)", "all x. (Not(Eastern(x)) & Not(Osceola(x)) & Not(Goulds(x)) & Not(Merriams(x)) & Not(RioGrande(x)) & Not(Ocellated(x))) & WildTurkey(x)", "all x. (Not(Eastern(x)) & Not(Osceola(x)) & Not(Goulds(x)) & Not(Merriams(x)) & Not(RioGrande(x)) & Not(Ocellated(x))) & WildTurkey(x)", "all x. (Not(Eastern(x)) & Not(Osceola(x)) & Not(Goulds(x)) & Not(Merriams(x)) & Not(RioGrande(x)) & Not(Ocellated(x))) & WildTurkey(x)", "all x. (Not(Eastern(x)) & Not(Osceola(x)) & Not(Goulds(x)) & Not(Merriams(x)) & Not(RioGrande(x)) & Not(Ocellated(x))) & WildTurkey(x)", "all x. (Not(Eastern(x)) & Not(Osceola(x)) & Not(Goulds(x)) & Not(Merriams(x)) & Not(RioGrande(x)) & Not(Ocellated(x))) & WildTurkey(x)", "all x. (Not(Eastern(x)) & Not(Osceola(x)) & Not(Goulds(x)) & Not(Merriams(x)) & Not(RioGrande(x)) & Not(Ocellated(x))) & WildTurkey(x)", "all x. (Not(Eastern(x)) & Not(Osceola(x)) & Not(Goulds(x)) & Not(Merriams(x)) & Not(RioGrande(x)) & Not(Ocellated(x))) & WildTurkey(x)", "all x. (Not(Eastern(x)) & Not(Osceola(x)) & Not(Goulds(x)) & Not(Merriams(x)) & Not(RioGrande(x)) & Not(Ocellated(x))) & WildTurkey(x)", "all x. (Not(Eastern(x)) & Not(Osceola(x)) & Not(Goulds(x)) & Not(Merriams(x)) & Not(RioGrande(x)) & Not(Ocellated(x))) & WildTurkey(x)", "all x. (Not(Eastern(x)) & Not(Osceola(x)) & Not(Goulds(x)) & Not(Merriams(x)) & Not(RioGrande(x)) & Not(Ocellated(x))) & WildTurkey(x)", "all x. (Not(Eastern(x)) & Not(Osceola(x)) & Not(Goulds(x)) & Not(Merriams(x)) & Not(RioGrande(x)) & Not(Ocellated(x))) & WildTurkey(x)", "all x. (Not(Eastern(x)) & Not(Osceola(x)) & Not(Goulds(x)) & Not(Merriams(x)) & Not(RioGrande(x)) & Not(Ocellated(x))) & WildTurkey(x)", "all x. (Not(Eastern(x)) & Not(Osceola(x)) & Not(Goulds(x)) & Not(Merriams(x)) & Not(RioGrande(x)) & Not(Ocellated(x))) & WildTurkey(x)", "all x. (Not(Eastern(x)) & Not(Osceola(x)) & Not(Goulds(x)) & Not(Merriams(x)) & Not(RioGrande(x)) & Not(Ocellated(x))) & WildTurkey(x)", "all x. (Not(Eastern(x)) & Not(Osceola(x)) & Not(Goulds(x)) & Not(Merriams(x)) & Not(RioGrande(x)) & Not(Ocellated(x))) & WildTurkey(x)", "all x. (Not(Eastern(x)) & Not(Osceola(x)) & Not(Goulds(x)) & Not(Merriams(x)) & Not(RioGrande(x)) & Not(Ocellated(x))) & WildTurkey(x)", "all x. (Not(Eastern(x)) & Not(Osceola(x)) & Not(Goulds(x)) & Not(Merriams(x)) & Not(RioGrande(x)) & Not(Ocellated(x))) & WildTurkey(x)", "all x. (Not(Eastern(x)) & Not(Osceola(x)) & Not(Goulds(x)) & Not(Merriams(x)) & Not(RioGrande(x)) & Not(Ocellated(x))) & WildTurkey(x)", "all x. (Not(Eastern(x)) & Not(Osceola(x)) & Not(Goulds(x)) & Not(Merriams(x)) & Not(RioGrande(x)) & Not(Ocellated(x))) & WildTurkey(x)", "all x. (Not(Eastern(x)) & Not(Osceola(x)) & Not(Goulds(x)) & Not(Merriams(x)) & Not(RioGrande(x)) & Not(Ocellated(x))) & WildTurkey(x)", "all x. (Not(Eastern(x)) & Not(Osceola(x)) & Not(Goulds(x)) & Not(Merriams(x)) & Not(RioGrande(x)) & Not(Ocellated(x))) & WildTurkey(x)", "all x. (Not(Eastern(x)) & Not(Osceola(x)) & Not(Goulds(x)) & Not(Merriams(x)) & Not(RioGrande(x)) & Not(Ocellated(x))) & WildTurkey(x)", "all x. (Not(Eastern(x)) & Not(Osceola(x)) & Not(Goulds(x)) & Not(Merriams(x)) & Not(RioGrande(x)) & Not(Ocellated(x))) & WildTurkey(x)", "all x. (Not(Eastern(x)) & Not(Osceola(x)) & Not(Goulds(x)) & Not(Merriams(x)) & Not(RioGrande(x)) & Not(Ocellated(x))) & WildTurkey(x)", "all x. (Not(Eastern(x)) & Not(Osceola(x)) & Not(Goulds(x)) & Not(Merriams(x)) & Not(RioGrande(x)) & Not(Ocellated(x))) & WildTurkey(x)", "all x. (Not(Eastern(x)) & Not(Osceola(x)) & Not(Goulds(x)) & Not(Merriams(x)) & Not(RioGrande(x)) & Not(Ocellated(x))) & WildTurkey(x)", "all x. (Not(Eastern(x)) & Not(Osceola(x)) & Not(Goulds(x)) & Not(Merriams(x)) & Not(RioGrande(x)) & Not(Ocellated(x))) & WildTurkey(x)", "all x. (Not(Eastern(x)) & Not(Osceola(x)) & Not(Goulds(x)) & Not(Merriams(x)) & Not(RioGrande(x)) & Not(Ocellated(x))) & WildTurkey(x)", "all x. (Not(Eastern(x)) & Not(Osceola(x)) & Not(Goulds(x)) & Not(Merriams(x)) & Not(RioGrande(x)) & Not(Ocellated(x))) & WildTurkey(x)", "all x. (Not(Eastern(x)) & Not(Osceola(x)) & Not(Goulds(x)) & Not(Merriams(x)) & Not(RioGrande(x)) & Not(Ocellated(x))) & WildTurkey(x)", "all x. (Not(Eastern(x)) & Not(Osceola(x)) & Not(Goulds(x)) & Not(Merriams(x)) & Not(RioGrande(x)) & Not(Ocellated(x))) & WildTurkey(x)", "all x. (Not(Eastern(x)) & Not(Osceola(x)) & Not(Goulds(x)) & Not(Merriams(x)) & Not(RioGrande(x)) & Not(Ocellated(x))) & WildTurkey(x)", "all x. (Not(Eastern(x)) & Not(Osceola(x)) & Not(Goulds(x)) & Not(Merriams(x)) & Not(RioGrande(x)) & Not(Ocellated(x))) & WildTurkey(x)", "all x. (Not(Eastern(x)) & Not(Osceola(x)) & Not(Goulds(x)) & Not(Merriams(x)) & Not(RioGrande(x)) & Not(Ocellated(x))) & WildTurkey(x)", "all x. (Not(Eastern(x)) & Not(Osceola(x)) & Not(Goulds(x)) & Not(Merriams(x)) & Not(RioGrande(x)) & Not(Ocellated(x))) & WildTurkey(x)", "all x. (Not(Eastern(x)) & Not(Osceola(x)) & Not(Goulds(x)) & Not(Merriams(x)) & Not(RioGrande(x)) & Not(Ocellated(x))) & WildTurkey(x)", "all x. (Not(Eastern(x)) & Not(Osceola(x)) & Not(Goulds(x)) & Not(Merriams(x)) & Not(RioGrande(x)) & Not(Ocellated(x))) & WildTurkey(x)", "all x. (Not(Eastern(x)) & Not(Osceola(x)) & Not(Goulds(x)) & Not(Merriams(x)) & Not(RioGrande(x)) & Not(Ocellated(x))) & WildTurkey(x)", "all x. (Not(Eastern(x)) & Not(Osceola(x)) & Not(Goulds(x)) & Not(Merriams(x)) & Not(RioGrande(x)) & Not(Ocellated(x))) & WildTurkey(x)", "all x. (Not(Eastern(x)) & Not(Osceola(x)) & Not(Goulds(x)) & Not(Merriams(x)) & Not(RioGrande(x)) & Not(Ocellated(x))) & WildTurkey(x)", "all x. (Not(Eastern(x)) & Not(Osceola(x)) & Not(Goulds(x)) & Not(Merriams(x)) & Not(RioGrande(x)) & Not(Ocellated(x))) & WildTurkey(x)", "all x. (Not(Eastern(x)) & Not(Osceola(x)) & Not(Goulds(x)) & Not(Merriams(x)) & Not(RioGrande(x)) & Not(Ocellated(x))) & WildTurkey(x)", "all x. (Not(Eastern(x)) & Not(Osceola(x)) & Not(Goulds(x)) & Not(Merriams(x)) & Not(RioGrande(x)) & Not(Ocellated(x))) & WildTurkey(x)", "all x. (Not(Eastern(x)) & Not(Osceola(x)) & Not(Goulds(x)) & Not(Merriams(x)) & Not(RioGrande(x)) & Not(Ocellated(x))) & WildTurkey(x)", "all x. (Not(Eastern(x)) & Not(Osceola(x)) & Not(Goulds(x)) & Not(Merriams(x)) & Not(RioGrande(x)) & Not(Ocellated(x))) & WildTurkey(x)", "all x. (Not(Eastern(x)) & Not(Osceola(x)) & Not(Goulds(x)) & Not(Merriams(x)) & Not(RioGrande(x)) & Not(Ocellated(x))) & WildTurkey(x)", "all x. (Not(Eastern(x)) & Not(Osceola(x)) & Not(Goulds(x)) & Not(Merriams(x)) & Not(RioGrande(x)) & Not(Ocellated(x))) & WildTurkey(x)", "all x. (Not(Eastern(x)) & Not(Osceola(x)) & Not(Goulds(x)) & Not(Merriams(x)) & Not(RioGrande(x)) & Not(Ocellated(x))) & WildTurkey(x)", "all x. (Not(Eastern(x)) & Not(Osceola(x)) & Not(Goulds(x)) & Not(Merriams(x)) & Not(RioGrande(x)) & Not(Ocellated(x))) & WildTurkey(x)", "all x. (Not(Eastern(x)) & Not(Osceola(x)) & Not(Goulds(x)) & Not(Merriams(x)) & Not(RioGrande(x)) & Not(Ocellated(x))) & WildTurkey(x)", "all x. (Not(Eastern(x)) & Not(Osceola(x)) & Not(Goulds(x)) & Not(Merriams(x)) & Not(RioGrande(x)) & Not(Ocellated(x))) & WildTurkey(x)", "all x. (Not(Eastern(x)) & Not(Osceola(x)) & Not(Goulds(x)) & Not(Merriams(x)) & Not(RioGrande(x)) & Not(Ocellated(x))) & WildTurkey(x)", "all x. (Not(Eastern(x)) & Not(Osceola(x)) & Not(Goulds(x)) & Not(Merriams(x)) & Not(RioGrande(x)) & Not(Ocellated(x))) & WildTurkey(x)", "all x. (Not(Eastern(x)) & Not(Osceola(x)) & Not(Goulds(x)) & Not(Merriams(x)) & Not(RioGrande(x)) & Not(Ocellated(x))) & WildTurkey(x)", "all x. (Not(Eastern(x)) & Not(Osceola(x)) & Not(Goulds(x)) & Not(Merriams(x)) & Not(RioGrande(x)) & Not(Ocellated(x))) & WildTurkey(x)", "all x. (Not(Eastern(x)) & Not(Osceola(x)) & Not(Goulds(x)) & Not(Merriams(x)) & Not(RioGrande(x)) & Not(Ocellated(x))) & WildTurkey(x)", "all x. (Not(Eastern(x)) & Not(Osceola(x)) & Not(Goulds(x)) & Not(Merriams(x)) & Not(RioGrande(x)) & Not(Ocellated(x))) & WildTurkey(x)", "all x. (Not(Eastern(x)) & Not(Osceola(x)) & Not(Goulds(x)) & Not(Merriams(x)) & Not(RioGrande(x)) & Not(Ocellated(x))) & WildTurkey(x)", "all x. (Not(Eastern(x)) & Not(Osceola(x)) & Not(Goulds(x)) & Not(Merriams(x)) & Not(RioGrande(x)) & Not(Ocellated(x))) & WildTurkey(x)", "all x. (Not(Eastern(x)) & Not(Osceola(x)) & Not(Goulds(x)) & Not(Merriams(x)) & Not(RioGrande(x)) & Not(Ocellated(x))) & WildTurkey(x)", "all x. (Not(Eastern(x)) & Not(Osceola(x)) & Not(Goulds(x)) & Not(Merriams(x)) & Not(RioGrande(x)) & Not(Ocellated(x))) & WildTurkey(x)", "all x. (Not(Eastern(x)) & Not(Osceola(x)) & Not(Goulds(x)) & Not(Merriams(x)) & Not(RioGrande(x)) & Not(Ocellated(x))) & WildTurkey(x)", "all x. (Not(Eastern(x)) & Not(Osceola(x)) & Not(Goulds(x)) & Not(Merriams(x)) & Not(RioGrande(x)) & Not(Ocellated(x))) & WildTurkey(x)", "all x. (Not(Eastern(x)) & Not(Osceola(x)) & Not(Goulds(x)) & Not(Merriams(x)) & Not(RioGrande(x)) & Not(Ocellated(x))) & WildTurkey(x)", "all x. (Not(Eastern(x)) & Not(Osceola(x)) & Not(Goulds(x)) & Not(Merriams(x)) & Not(RioGrande(x)) & Not(Ocellated(x))) & WildTurkey(x)", "all x. (Not(Eastern(x)) & Not(Osceola(x)) & Not(Goulds(x)) & Not(Merriams(x)) & Not(RioGrande(x)) & Not(Ocellated(x))) & WildTurkey(x)", "all x. (Not(Eastern(x)) & Not(Osceola(x)) & Not(Goulds(x)) & Not(Merriams(x)) & Not(RioGrande(x)) & Not(Ocellated(x))) & WildTurkey(x)", "all x. (Not(Eastern(x)) & Not(Osceola(x)) & Not(Goulds(x)) & Not(Merriams(x)) & Not(RioGrande(x)) & Not(Ocellated(x))) & WildTurkey(x)", "all x. (Not(Eastern(x)) & Not(Osceola(x)) & Not(Goulds(x)) & Not(Merriams(x)) & Not(RioGrande(x)) & Not(Ocellated(x))) & WildTurkey(x)", "all x. (Not(Eastern(x)) & Not(Osceola(x)) & Not(Goulds(x)) & Not(Merriams(x)) & Not(RioGrande(x)) & Not(Ocellated(x))) & WildTurkey(x)", "all x. (Not(Eastern(x)) & Not(Osceola(x)) & Not(Goulds(x)) & Not(Merriams(x)) & Not(RioGrande(x)) & Not(Ocellated(x))) & WildTurkey(x)", "all x. (Not(Eastern(x)) & Not(Osceola(x)) & Not(Goulds(x)) & Not(Merriams(x)) & Not(RioGrande(x)) & Not(Ocellated(x))) & WildTurkey(x)", "all x. (Not(Eastern(x)) & Not(Osceola(x)) & Not(Goulds(x)) & Not(Merriams(x)) & Not(RioGrande(x)) & Not(Ocellated(x))) & WildTurkey(x)", "all x. (Not(Eastern(x)) & Not(Osceola(x)) & Not(Goulds(x)) & Not(Merriams(x)) & Not(RioGrande(x)) & Not(Ocellated(x))) & WildTurkey(x)", "all x. (Not(Eastern(x)) & Not(Osceola(x)) & Not(Goulds(x)) & Not(Merriams(x)) & Not(RioGrande(x)) & Not(Ocellated(x))) & WildTurkey(x)", "all x. (Not(Eastern(x)) & Not(Osceola(x)) & Not(Goulds(x)) & Not(Merriams(x)) & Not(RioGrande(x)) & Not(Ocellated(x))) & WildTurkey(x)", "all x. (Not(Eastern(x)) & Not(Osceola(x)) & Not(Goulds(x)) & Not(Merriams(x)) & Not(RioGrande(x)) & Not(Ocellated(x))) & WildTurkey(x)", "all x. (Not(Eastern(x)) & Not(Osceola(x)) & Not(Goulds(x)) & Not(Merriams(x)) & Not(RioGrande(x)) & Not(Ocellated(x))) & WildTurkey(x)", "all x. (Not(Eastern(x)) & Not(Osceola(x)) & Not(Goulds(x)) & Not(Merriams(x)) & Not(RioGrande(x)) & Not(Ocellated(x))) & WildTurkey(x)", "all x. (Not(Eastern(x)) & Not(Osceola(x)) & Not(Goulds(x)) & Not(Merriams(x)) & Not(RioGrande(x)) & Not(Ocellated(x))) & WildTurkey(x)", "all x. (Not(Eastern(x)) & Not(Osceola(x)) & Not(Goulds(x)) & Not(Merriams(x)) & Not(RioGrande(x)) & Not(Ocellated(x))) & WildTurkey(x)", "all x. (Not(Eastern(x)) & Not(Osceola(x)) & Not(Goulds(x)) & Not(Merriams(x)) & Not(RioGrande(x)) & Not(Ocellated(x))) & WildTurkey(x)", "all x. (Not(Eastern(x)) & Not(Osceola(x)) & Not(Goulds(x)) & Not(Merriams(x)) & Not(RioGrande(x)) & Not(Ocellated(x))) & WildTurkey(x)", "all x. (Not(Eastern(x)) & Not(Osceola(x)) & Not(Goulds(x)) & Not(Merriams(x)) & Not(RioGrande(x)) & Not(Ocellated(x))) & WildTurkey(x)", "all x. (Not(Eastern(x)) & Not(Osceola(x)) & Not(Goulds(x)) & Not(Merriams(x)) & Not(RioGrande(x)) & Not(Ocellated(x))) & WildTurkey(x)", "all x. (Not(Eastern(x)) & Not(Osceola(x)) & Not(Goulds(x)) & Not(Merriams(x)) & Not(RioGrande(x)) & Not(Ocellated(x))) & WildTurkey(x)", "all x. (Not(Eastern(x)) & Not(Osceola(x)) & Not(Goulds(x)) & Not(Merriams(x)) & Not(RioGrande(x)) & Not(Ocellated(x))) & WildTurkey(x)", "all x. (Not(Eastern(x)) & Not(Osceola(x)) & Not(Goulds(x)) & Not(Merriams(x)) & Not(RioGrande(x)) & Not(Ocellated(x))) & WildTurkey(x)", "all x. (Not(Eastern(x)) & Not(Osceola(x)) & Not(Goulds(x)) & Not(Merriams(x)) & Not(RioGrande(x)) & Not(Ocellated(x))) & WildTurkey(x)", "all x. (Not(Eastern(x)) & Not(Osceola(x)) & Not(Goulds(x)) & Not(Merriams(x)) & Not(RioGrande(x)) & Not(Ocellated(x))) & WildTurkey(x)", "all x. (Not(Eastern(x)) & Not(Osceola(x)) & Not(Goulds(x)) & Not(Merriams(x)) & Not(RioGrande(x)) & Not(Ocellated(x))) & WildTurkey(x)", "all x. (Not(Eastern(x)) & Not(Osceola(x)) & Not(Goulds(x)) & Not(Merriams(x)) & Not(RioGrande(x)) & Not(Ocellated(x))) & WildTurkey(x)", "all x. (Not(Eastern(x)) & Not(Osceola(x)) & Not(Goulds(x)) & Not(Merriams(x)) & Not(RioGrande(x)) & Not(Ocellated(x))) & WildTurkey(x)", "all x. (Not(Eastern(x)) & Not(Osceola(x)) & Not(Goulds(x)) & Not(Merriams(x)) & Not(RioGrande(x)) & Not(Ocellated(x))) & WildTurkey(x)", "all x. (Not(Eastern(x)) & Not(Osceola(x)) & Not(Goulds(x)) & Not(Merriams(x)) & Not(RioGrande(x)) & Not(Ocellated(x))) & WildTurkey(x)", "all x. (Not(Eastern(x)) & Not(Osceola(x)) & Not(Goulds(x)) & Not(Merriams(x)) & Not(RioGrande(x)) & Not(Ocellated(x))) & WildTurkey(x)", "all x. (Not(Eastern(x)) & Not(Osceola(x)) & Not(Goulds(x)) & Not(Merriams(x)) & Not(RioGrande(x)) & Not(Ocellated(x))) & WildTurkey(x)", "all x. (Not(Eastern(x)) & Not(Osceola(x)) & Not(Goulds(x)) & Not(Merriams(x)) & Not(RioGrande(x)) & Not(Ocellated(x))) & WildTurkey(x)", "all x. (Not(Eastern(x)) & Not(Osceola(x)) & Not(Goulds(x)) & Not(Merriams(x)) & Not(RioGrande(x)) & Not(Ocellated(x))) & WildTurkey(x)", "all x. (Not(Eastern(x)) & Not(Osceola(x)) & Not(Goulds(x)) & Not(Merriams(x)) & Not(RioGrande(x)) & Not(Ocellated(x))) & WildTurkey(x)", "all x. (Not(Eastern(x)) & Not(Osceola(x)) & Not(Goulds(x)) & Not(Merriams(x)) & Not(RioGrande(x)) & Not(Ocellated(x))) & WildTurkey(x)", "all x. (Not(Eastern(x)) & Not(Osceola(x)) & Not(Goulds(x)) & Not(Merriams(x)) & Not(RioGrande(x)) & Not(Ocellated(x))) & WildTurkey(x)", "all x. (Not(Eastern(x)) & Not(Osceola(x)) & Not(Goulds(x)) & Not(Merriams(x)) & Not(RioGrande(x)) & Not(Ocellated(x))) & WildTurkey(x)", "all x. (Not(Eastern(x)) & Not(Osceola(x)) & Not(Goulds(x)) & Not(Merriams(x)) & Not(RioGrande(x)) & Not(Ocellated(x))) & WildTurkey(x)"], "conclusion": "all x. (Not(Eastern(x)) & Not(Osceola(x)) & Not(Goulds(x)) & Not(Merriams(x)) &", "error_type": "<class 'nltk.sem.logic.LogicalExpressionException'>", "error_message": "End of input found.  Expression expected.\nall x. (Not(Eastern(x)) & Not(Osceola(x)) & Not(Goulds(x)) & Not(Merriams(x)) &\n                                                                               ^", "stack_trace": "Traceback (most recent call last):\n  File \"/data/gpfs/projects/punim0478/bansaab/linc2/eval/tasks/owafoltask.py\", line 577, in _process_neurosymbolic\n    parsed = json.loads(gen)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/json/__init__.py\", line 346, in loads\n    return _default_decoder.decode(s)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/json/decoder.py\", line 337, in decode\n    obj, end = self.raw_decode(s, idx=_w(s, 0).end())\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/json/decoder.py\", line 355, in raw_decode\n    raise JSONDecodeError(\"Expecting value\", s, err.value) from None\njson.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/sem/logic.py\", line 270, in token\n    tok = self._buffer[self._currentIndex]\nIndexError: list index out of range\n\nThe above exception was the direct cause of the following exception:\n\nTraceback (most recent call last):\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/sem/logic.py\", line 284, in process_next_expression\n    tok = self.token()\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/sem/logic.py\", line 276, in token\n    raise ExpectedMoreTokensException(self._currentIndex + 1) from e\nnltk.sem.logic.ExpectedMoreTokensException: End of input found.  More tokens expected.\n\nThe above exception was the direct cause of the following exception:\n\nTraceback (most recent call last):\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/sem/logic.py\", line 154, in parse\n    result = self.process_next_expression(None)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/sem/logic.py\", line 290, in process_next_expression\n    accum = self.handle(tok, context)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/sem/logic.py\", line 312, in handle\n    return self.handle_quant(tok, context)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/sem/logic.py\", line 427, in handle_quant\n    accum = self.process_next_expression(tok)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/sem/logic.py\", line 290, in process_next_expression\n    accum = self.handle(tok, context)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/sem/logic.py\", line 315, in handle\n    return self.handle_open(tok, context)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/sem/logic.py\", line 449, in handle_open\n    accum = self.process_next_expression(None)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/sem/logic.py\", line 297, in process_next_expression\n    return self.attempt_adjuncts(accum, context)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/sem/logic.py\", line 323, in attempt_adjuncts\n    expression = self.attempt_BooleanExpression(expression, context)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/sem/logic.py\", line 485, in attempt_BooleanExpression\n    factory, expression, self.process_next_expression(tok)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/sem/logic.py\", line 286, in process_next_expression\n    raise ExpectedMoreTokensException(\nnltk.sem.logic.ExpectedMoreTokensException: End of input found.  Expression expected.\n\nThe above exception was the direct cause of the following exception:\n\nTraceback (most recent call last):\n  File \"/data/gpfs/projects/punim0478/bansaab/linc2/eval/tasks/utils.py\", line 215, in evaluate\n    c = read_expr(conclusion)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/sem/logic.py\", line 957, in fromstring\n    return cls._logic_parser.parse(s, signature)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/sem/logic.py\", line 159, in parse\n    raise LogicalExpressionException(None, msg) from e\nnltk.sem.logic.LogicalExpressionException: End of input found.  Expression expected.\nall x. (Not(Eastern(x)) & Not(Osceola(x)) & Not(Goulds(x)) & Not(Merriams(x)) &\n                                                                               ^\n"}
{"timestamp": "2025-09-16T17:40:36.906417", "premises": ["all x. (WildTurkey(x) -> (Eastern(x) | Osceola(x) | Goulds(x) | Merriams(x) | RioGrande(x) | Ocellated(x)))", "all x. (WildTurkey(x) -> (Eastern(x) | Osceola(x) | Goulds(x) | Merriams(x) | RioGrande(x) | Ocellated(x)))", "-Eastern(Tom)", "-Osceola(Tom)", "-Goulds(Tom) -Merriams(Tom) -RioGrande(Tom)", "WildTurkey(Tom)"], "conclusion": "Eastern(Tom)", "error_type": "<class 'nltk.sem.logic.LogicalExpressionException'>", "error_message": "Unexpected token: '-'.\n-Goulds(Tom) -Merriams(Tom) -RioGrande(Tom)\n             ^", "stack_trace": "Traceback (most recent call last):\n  File \"/data/gpfs/projects/punim0478/bansaab/linc2/eval/tasks/owafoltask.py\", line 577, in _process_neurosymbolic\n    parsed = json.loads(gen)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/json/__init__.py\", line 346, in loads\n    return _default_decoder.decode(s)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/json/decoder.py\", line 337, in decode\n    obj, end = self.raw_decode(s, idx=_w(s, 0).end())\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/json/decoder.py\", line 355, in raw_decode\n    raise JSONDecodeError(\"Expecting value\", s, err.value) from None\njson.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/sem/logic.py\", line 156, in parse\n    raise UnexpectedTokenException(self._currentIndex + 1, self.token(0))\nnltk.sem.logic.UnexpectedTokenException: Unexpected token: '-'.\n\nThe above exception was the direct cause of the following exception:\n\nTraceback (most recent call last):\n  File \"/data/gpfs/projects/punim0478/bansaab/linc2/eval/tasks/utils.py\", line 216, in evaluate\n    p_list = [read_expr(p) for p in premises]\n  File \"/data/gpfs/projects/punim0478/bansaab/linc2/eval/tasks/utils.py\", line 216, in <listcomp>\n    p_list = [read_expr(p) for p in premises]\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/sem/logic.py\", line 957, in fromstring\n    return cls._logic_parser.parse(s, signature)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/sem/logic.py\", line 159, in parse\n    raise LogicalExpressionException(None, msg) from e\nnltk.sem.logic.LogicalExpressionException: Unexpected token: '-'.\n-Goulds(Tom) -Merriams(Tom) -RioGrande(Tom)\n             ^\n"}
{"timestamp": "2025-09-16T17:40:36.939023", "premises": ["all x. (Tom(x) -> -EasternTurkey(x))", "all x. (Tom(x) -> -OsceolaTurkey(x))", "all x. (Tom(x) -> -GouldTurkey(x) & -MerriamTurkey(x) & -RioGrandeTurkey(x))", "all x. (Tom(x) -> WildTurkey(x))"], "conclusion": "EasternTurkey(Tom)", "error_type": "<class 'nltk.inference.prover9.Prover9FatalException'>", "error_message": "(FATAL)\n%%ERROR: The following symbols are used with multiple arities: Tom/1, Tom/0.\n\n\nFatal error:  The following symbols are used with multiple arities: Tom/1, Tom/0", "stack_trace": "Traceback (most recent call last):\n  File \"/data/gpfs/projects/punim0478/bansaab/linc2/eval/tasks/owafoltask.py\", line 577, in _process_neurosymbolic\n    parsed = json.loads(gen)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/json/__init__.py\", line 346, in loads\n    return _default_decoder.decode(s)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/json/decoder.py\", line 337, in decode\n    obj, end = self.raw_decode(s, idx=_w(s, 0).end())\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/json/decoder.py\", line 355, in raw_decode\n    raise JSONDecodeError(\"Expecting value\", s, err.value) from None\njson.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"/data/gpfs/projects/punim0478/bansaab/linc2/eval/tasks/utils.py\", line 219, in evaluate\n    truth_value = prover.prove(c, p_list)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/inference/api.py\", line 37, in prove\n    return self._prove(goal, assumptions, verbose)[0]\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/inference/prover9.py\", line 327, in _prove\n    stdout, returncode = self._call_prover9(\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/inference/prover9.py\", line 370, in _call_prover9\n    raise Prover9FatalException(returncode, errormsg)\nnltk.inference.prover9.Prover9FatalException: (FATAL)\n%%ERROR: The following symbols are used with multiple arities: Tom/1, Tom/0.\n\n\nFatal error:  The following symbols are used with multiple arities: Tom/1, Tom/0\n"}
{"timestamp": "2025-09-16T17:40:36.939292", "premises": ["all x. (WildTurkey(x) -> (Eastern(x) | Osceola(x) | Gould's(x) | Merriam's(x) | RioGrande(x) | Ocellated(x)))", "-Eastern(Tom) & -Osceola(Tom) & -Gould's(Tom) & -Merriam's(Tom) & -RioGrande(Tom) & -Ocellated(Tom)", "Eastern(Tom) | Osceola(Tom) | Gould's(Tom) | Merriam's(Tom) | RioGrande(Tom) | Ocellated(Tom)", "all x. (WildTurkey(x) -> Tom(x))", "Eastern(Tom) | Osceola(Tom) | Gould's(Tom) | Merriam's(Tom) | RioGrande(Tom) | Ocellated(Tom)", "all x. (Tom(x) -> WildTurkey(x))", "Eastern(Tom) | Osceola(Tom) | Gould's(Tom) | Merriam's(Tom) | RioGrande(Tom) | Ocellated(Tom)", "all x. (WildTurkey(x) -> Tom(x))", "Eastern(Tom) | Osceola(Tom) | Gould's(Tom) | Merriam's(Tom) | RioGrande(Tom) | Ocellated(Tom)"], "conclusion": "all x. (Tom(x) -> WildTurkey(x))", "error_type": "<class 'nltk.inference.prover9.Prover9FatalException'>", "error_message": "(FATAL)\n%%ERROR: A term cannot be constructed from the marked string:\n\n\n    all x (WildTurkey(x) -> ((((%%START ERROR%%(Eastern(x) | Osceola(x)) | Gould's(x)%%END ERROR%%) | Merriam's(x)) | RioGrande(x)) | Ocellated(x))).\n\nFatal error:  sread_term error", "stack_trace": "Traceback (most recent call last):\n  File \"/data/gpfs/projects/punim0478/bansaab/linc2/eval/tasks/owafoltask.py\", line 577, in _process_neurosymbolic\n    parsed = json.loads(gen)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/json/__init__.py\", line 346, in loads\n    return _default_decoder.decode(s)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/json/decoder.py\", line 337, in decode\n    obj, end = self.raw_decode(s, idx=_w(s, 0).end())\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/json/decoder.py\", line 355, in raw_decode\n    raise JSONDecodeError(\"Expecting value\", s, err.value) from None\njson.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"/data/gpfs/projects/punim0478/bansaab/linc2/eval/tasks/utils.py\", line 219, in evaluate\n    truth_value = prover.prove(c, p_list)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/inference/api.py\", line 37, in prove\n    return self._prove(goal, assumptions, verbose)[0]\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/inference/prover9.py\", line 327, in _prove\n    stdout, returncode = self._call_prover9(\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/inference/prover9.py\", line 370, in _call_prover9\n    raise Prover9FatalException(returncode, errormsg)\nnltk.inference.prover9.Prover9FatalException: (FATAL)\n%%ERROR: A term cannot be constructed from the marked string:\n\n\n    all x (WildTurkey(x) -> ((((%%START ERROR%%(Eastern(x) | Osceola(x)) | Gould's(x)%%END ERROR%%) | Merriam's(x)) | RioGrande(x)) | Ocellated(x))).\n\nFatal error:  sread_term error\n"}
{"timestamp": "2025-09-16T17:46:28.382243", "premises": ["all x. (WildTurkey(x) -> (EasternWildTurkey(x) | OsceolaWildTurkey(x) | GouldsWildTurkey(x) | MerriamsWildTurkey(x) | RioGrandeWildTurkey(x) | OcellatedWildTurkey(x)))", "all x. (WildTurkey(x) -> Not(EasternWildTurkey(x)) & Not(OsceolaWildTurkey(x)) & Not(GouldsWildTurkey(x)) & Not(MerriamsWildTurkey(x)) & Not(RioGrandeWildTurkey(x)) & Not(OcellatedWildTurkey(x)))", "all x. (WildTurkey(x) -> Not(EasternWildTurkey(x)) & Not(OsceolaWildTurkey(x)) & Not(GouldsWildTurkey(x)) & Not(MerriamsWildTurkey(x)) & Not(RioGrandeWildTurkey(x)) & Not(OcellatedWildTurkey(x)))", "all x. (WildTurkey(x) -> Not(EasternWildTurkey(x)) & Not(OsceolaWildTurkey(x)) & Not(GouldsWildTurkey(x)) & Not(MerriamsWildTurkey(x)) & Not(RioGrandeWildTurkey(x)) & Not(OcellatedWildTurkey(x)))", "all x. (WildTurkey(x) -> Not(EasternWildTurkey(x)) & Not(OsceolaWildTurkey(x)) & Not(GouldsWildTurkey(x)) & Not(MerriamsWildTurkey(x)) & Not(RioGrandeWildTurkey(x)) & Not(OcellatedWildTurkey(x)))", "all x. (WildTurkey(x) -> Not(EasternWildTurkey(x)) & Not(OsceolaWildTurkey(x)) & Not(GouldsWildTurkey(x)) & Not(MerriamsWildTurkey(x)) & Not(RioGrandeWildTurkey(x)) & Not(OcellatedWildTurkey(x)))", "all x. (WildTurkey(x) -> Not(EasternWildTurkey(x)) & Not(OsceolaWildTurkey(x)) & Not(GouldsWildTurkey(x)) & Not(MerriamsWildTurkey(x)) & Not(RioGrandeWildTurkey(x)) & Not(OcellatedWildTurkey(x)))", "all x. (WildTurkey(x) -> Not(EasternWildTurkey(x)) & Not(OsceolaWildTurkey(x)) & Not(GouldsWildTurkey(x)) & Not(MerriamsWildTurkey(x)) & Not(RioGrandeWildTurkey(x)) & Not(OcellatedWildTurkey(x)))", "all x. (WildTurkey(x) -> Not(EasternWildTurkey(x)) & Not(OsceolaWildTurkey(x)) & Not(GouldsWildTurkey(x)) & Not(MerriamsWildTurkey(x)) & Not(RioGrandeWildTurkey(x)) & Not(OcellatedWildTurkey(x)))", "all x. (WildTurkey(x) -> Not(EasternWildTurkey(x)) & Not(OsceolaWildTurkey(x)) & Not(GouldsWildTurkey(x)) & Not(MerriamsWildTurkey(x)) & Not(RioGrandeWildTurkey(x)) & Not(OcellatedWildTurkey(x)))", "all x. (WildTurkey(x) -> Not(EasternWildTurkey(x)) & Not(OsceolaWildTurkey(x)) & Not(GouldsWildTurkey(x)) & Not(MerriamsWildTurkey(x)) & Not(RioGrandeWildTurkey(x)) & Not(OcellatedWildTurkey(x)))", "all x. (WildTurkey(x) -> Not(EasternWildTurkey(x)) & Not(OsceolaWildTurkey(x)) & Not(GouldsWildTurkey(x)) & Not(MerriamsWildTurkey(x)) & Not(RioGrandeWildTurkey(x)) & Not(OcellatedWildTurkey(x)))", "all x. (WildTurkey(x) -> Not(EasternWildTurkey(x)) & Not(OsceolaWildTurkey(x)) & Not(GouldsWildTurkey(x)) & Not(MerriamsWildTurkey(x)) & Not(RioGrandeWildTurkey(x)) & Not(OcellatedWildTurkey(x)))", "all x. (WildTurkey(x) -> Not(EasternWildTurkey(x)) & Not(OsceolaWildTurkey(x)) & Not(GouldsWildTurkey(x)) & Not(MerriamsWildTurkey(x)) & Not(RioGrandeWildTurkey(x)) & Not(OcellatedWildTurkey(x)))", "all x. (WildTurkey(x) -> Not(EasternWildTurkey(x)) & Not(OsceolaWildTurkey(x)) & Not(GouldsWildTurkey(x)) & Not(MerriamsWildTurkey(x)) & Not(RioGrandeWildTurkey(x)) & Not(OcellatedWildTurkey(x)))", "all x. (WildTurkey(x) -> Not(EasternWildTurkey(x)) & Not(OsceolaWildTurkey(x)) & Not(GouldsWildTurkey(x)) & Not(MerriamsWildTurkey(x)) & Not(RioGrandeWildTurkey(x)) & Not(OcellatedWildTurkey(x)))", "all x. (WildTurkey(x) -> Not(EasternWildTurkey(x)) & Not(OsceolaWildTurkey(x)) & Not(GouldsWildTurkey(x)) & Not(MerriamsWildTurkey(x)) & Not(RioGrandeWildTurkey(x)) & Not(OcellatedWildTurkey(x)))", "all x. (WildTurkey(x) -> Not(EasternWildTurkey(x)) & Not(OsceolaWildTurkey(x)) & Not(GouldsWildTurkey(x)) & Not(MerriamsWildTurkey(x)) & Not(RioGrandeWildTurkey(x)) & Not(OcellatedWildTurkey(x)))", "all x. (WildTurkey(x) -> Not(EasternWildTurkey(x)) & Not(OsceolaWildTurkey(x)) & Not(GouldsWildTurkey(x)) & Not(MerriamsWildTurkey(x)) & Not(RioGrandeWildTurkey(x)) & Not(OcellatedWildTurkey(x)))", "all x. (WildTurkey(x) -> Not(EasternWildTurkey(x)) & Not(OsceolaWildTurkey(x)) & Not(GouldsWildTurkey(x)) & Not(MerriamsWildTurkey(x)) & Not(RioGrandeWildTurkey(x)) & Not(OcellatedWildTurkey(x)))", "all x. (WildTurkey(x) -> Not(EasternWildTurkey(x)) & Not(OsceolaWildTurkey(x)) & Not(GouldsWildTurkey(x)) & Not(MerriamsWildTurkey(x)) & Not(RioGrandeWildTurkey(x)) & Not(OcellatedWildTurkey(x)))", "all x. (WildTurkey(x) -> Not(EasternWildTurkey(x)) & Not(OsceolaWildTurkey(x)) & Not(GouldsWildTurkey(x)) & Not(MerriamsWildTurkey(x)) & Not(RioGrandeWildTurkey(x)) & Not(OcellatedWildTurkey(x)))", "all x. (WildTurkey(x) -> Not(EasternWildTurkey(x)) & Not(OsceolaWildTurkey(x)) & Not(GouldsWildTurkey(x)) & Not(MerriamsWildTurkey(x)) & Not(RioGrandeWildTurkey(x)) & Not(OcellatedWildTurkey(x)))", "all x. (WildTurkey(x) -> Not(EasternWildTurkey(x)) & Not(OsceolaWildTurkey(x)) & Not(GouldsWildTurkey(x)) & Not(MerriamsWildTurkey(x)) & Not(RioGrandeWildTurkey(x)) & Not(OcellatedWildTurkey(x)))", "all x. (WildTurkey(x) -> Not(EasternWildTurkey(x)) & Not(OsceolaWildTurkey(x)) & Not(GouldsWildTurkey(x)) & Not(MerriamsWildTurkey(x)) & Not(RioGrandeWildTurkey(x)) & Not(OcellatedWildTurkey(x)))", "all x. (WildTurkey(x) -> Not(EasternWildTurkey(x)) & Not(OsceolaWildTurkey(x)) & Not(GouldsWildTurkey(x)) & Not(MerriamsWildTurkey(x)) & Not(RioGrandeWildTurkey(x)) & Not(OcellatedWildTurkey(x)))", "all x. (WildTurkey(x) -> Not(EasternWildTurkey(x)) & Not(OsceolaWildTurkey(x)) & Not(GouldsWildTurkey(x)) & Not(MerriamsWildTurkey(x)) & Not(RioGrandeWildTurkey(x)) & Not(OcellatedWildTurkey(x)))", "all x. (WildTurkey(x) -> Not(EasternWildTurkey(x)) & Not(OsceolaWildTurkey(x)) & Not(GouldsWildTurkey(x)) & Not(MerriamsWildTurkey(x)) & Not(RioGrandeWildTurkey(x)) & Not(OcellatedWildTurkey(x)))", "all x. (WildTurkey(x) -> Not(EasternWildTurkey(x)) & Not(OsceolaWildTurkey(x)) & Not(GouldsWildTurkey(x)) & Not(MerriamsWildTurkey(x)) & Not(RioGrandeWildTurkey(x)) & Not(OcellatedWildTurkey(x)))", "all x. (WildTurkey(x) -> Not(EasternWildTurkey(x)) & Not(OsceolaWildTurkey(x)) & Not(GouldsWildTurkey(x)) & Not(MerriamsWildTurkey(x)) & Not(RioGrandeWildTurkey(x)) & Not(OcellatedWildTurkey(x)))", "all x. (WildTurkey(x) -> Not(EasternWildTurkey(x)) & Not(OsceolaWildTurkey(x)) & Not(GouldsWildTurkey(x)) & Not(MerriamsWildTurkey(x)) & Not(RioGrandeWildTurkey(x)) & Not(OcellatedWildTurkey(x)))", "all x. (WildTurkey(x) -> Not(EasternWildTurkey(x)) & Not(OsceolaWildTurkey(x)) & Not(GouldsWildTurkey(x)) & Not(MerriamsWildTurkey(x)) & Not(RioGrandeWildTurkey(x)) & Not(OcellatedWildTurkey(x)))", "all x. (WildTurkey(x) -> Not(EasternWildTurkey(x)) & Not(OsceolaWildTurkey(x)) & Not(GouldsWildTurkey(x)) & Not(MerriamsWildTurkey(x)) & Not(RioGrandeWildTurkey(x)) & Not(OcellatedWildTurkey(x)))", "all x. (WildTurkey(x) -> Not(EasternWildTurkey(x)) & Not(OsceolaWildTurkey(x)) & Not(GouldsWildTurkey(x)) & Not(MerriamsWildTurkey(x)) & Not(RioGrandeWildTurkey(x)) & Not(OcellatedWildTurkey(x)))", "all x. (WildTurkey(x) -> Not(EasternWildTurkey(x)) & Not(OsceolaWildTurkey(x)) & Not(GouldsWildTurkey(x)) & Not(MerriamsWildTurkey(x)) & Not(RioGrandeWildTurkey(x)) & Not(OcellatedWildTurkey(x)))", "all x. (WildTurkey(x) -> Not(EasternWildTurkey(x)) & Not(OsceolaWildTurkey(x)) & Not(GouldsWildTurkey(x)) & Not(MerriamsWildTurkey(x)) & Not(RioGrandeWildTurkey(x)) & Not(OcellatedWildTurkey(x)))", "all x. (WildTurkey(x) -> Not(EasternWildTurkey(x)) & Not(OsceolaWildTurkey(x)) & Not(GouldsWildTurkey(x)) & Not(MerriamsWildTurkey(x)) & Not(RioGrandeWildTurkey(x)) & Not(OcellatedWildTurkey(x)))", "all x. (WildTurkey(x) -> Not(EasternWildTurkey(x)) & Not(OsceolaWildTurkey(x)) & Not(GouldsWildTurkey(x)) & Not(MerriamsWildTurkey(x)) & Not(RioGrandeWildTurkey(x)) & Not(OcellatedWildTurkey(x)))", "all x. (WildTurkey(x) -> Not(EasternWildTurkey(x)) & Not(OsceolaWildTurkey(x)) & Not(GouldsWildTurkey(x)) & Not(MerriamsWildTurkey(x)) & Not(RioGrandeWildTurkey(x)) & Not(OcellatedWildTurkey(x)))", "all x. (WildTurkey(x) -> Not(EasternWildTurkey(x)) & Not(OsceolaWildTurkey(x)) & Not(GouldsWildTurkey(x)) & Not(MerriamsWildTurkey(x)) & Not(RioGrandeWildTurkey(x)) & Not(OcellatedWildTurkey(x)))", "all x. (WildTurkey(x) -> Not(EasternWildTurkey(x)) & Not(OsceolaWildTurkey(x)) & Not(GouldsWildTurkey(x)) & Not(MerriamsWildTurkey(x)) & Not(RioGrandeWildTurkey(x)) & Not(OcellatedWildTurkey(x)))", "all x. (WildTurkey(x) -> Not(EasternWildTurkey(x)) & Not(OsceolaWildTurkey(x)) & Not(GouldsWildTurkey(x)) & Not(MerriamsWildTurkey(x)) & Not(RioGrandeWildTurkey(x)) & Not(OcellatedWildTurkey(x)))", "all x. (WildTurkey(x) -> Not(EasternWildTurkey(x)) & Not(OsceolaWildTurkey(x)) & Not(GouldsWildTurkey(x)) & Not(MerriamsWildTurkey(x)) & Not(RioGrandeWildTurkey(x)) & Not(OcellatedWildTurkey(x)))", "all x. (WildTurkey(x) -> Not(EasternWildTurkey(x)) & Not(OsceolaWildTurkey(x)) & Not(GouldsWildTurkey(x)) & Not(MerriamsWildTurkey(x)) & Not(RioGrandeWildTurkey(x)) & Not(OcellatedWildTurkey(x)))", "all x. (WildTurkey(x) -> Not(EasternWildTurkey(x)) & Not(OsceolaWildTurkey(x)) & Not(GouldsWildTurkey(x)) & Not(MerriamsWildTurkey(x)) & Not(RioGrandeWildTurkey(x)) & Not(OcellatedWildTurkey(x)))", "all x. (WildTurkey(x) -> Not(EasternWildTurkey(x)) & Not(OsceolaWildTurkey(x)) & Not(GouldsWildTurkey(x)) & Not(MerriamsWildTurkey(x)) & Not(RioGrandeWildTurkey(x)) & Not(OcellatedWildTurkey(x)))", "all x. (WildTurkey(x) -> Not(EasternWildTurkey(x)) & Not(OsceolaWildTurkey(x)) & Not(GouldsWildTurkey(x)) & Not(MerriamsWildTurkey(x)) & Not(RioGrandeWildTurkey(x)) & Not(OcellatedWildTurkey(x)))", "all x. (WildTurkey(x) -> Not(EasternWildTurkey(x)) & Not(OsceolaWildTurkey(x)) & Not(GouldsWildTurkey(x)) & Not(MerriamsWildTurkey(x)) & Not(RioGrandeWildTurkey(x)) & Not(OcellatedWildTurkey(x)))", "all x. (WildTurkey(x) -> Not(EasternWildTurkey(x)) & Not(OsceolaWildTurkey(x)) & Not(GouldsWildTurkey(x)) & Not(MerriamsWildTurkey(x)) & Not(RioGrandeWildTurkey(x)) & Not(OcellatedWildTurkey(x)))", "all x. (WildTurkey(x) -> Not(EasternWildTurkey(x)) & Not(OsceolaWildTurkey(x)) & Not(GouldsWildTurkey(x)) & Not(MerriamsWildTurkey(x)) & Not(RioGrandeWildTurkey(x)) & Not(OcellatedWildTurkey(x)))", "all x. (WildTurkey(x) -> Not(EasternWildTurkey(x)) & Not(OsceolaWildTurkey(x)) & Not(GouldsWildTurkey(x)) & Not(MerriamsWildTurkey(x)) & Not(RioGrandeWildTurkey(x)) & Not(OcellatedWildTurkey(x)))", "all x. (WildTurkey(x) -> Not(EasternWildTurkey(x)) & Not(OsceolaWildTurkey(x)) & Not(GouldsWildTurkey(x)) & Not(MerriamsWildTurkey(x)) & Not(RioGrandeWildTurkey(x)) & Not(OcellatedWildTurkey(x)))", "all x. (WildTurkey(x) -> Not(EasternWildTurkey(x)) & Not(OsceolaWildTurkey(x)) & Not(GouldsWildTurkey(x)) & Not(MerriamsWildTurkey(x)) & Not(RioGrandeWildTurkey(x)) & Not(OcellatedWildTurkey(x)))", "all x. (WildTurkey(x) -> Not(EasternWildTurkey(x)) & Not(OsceolaWildTurkey(x)) & Not(GouldsWildTurkey(x)) & Not(MerriamsWildTurkey(x)) & Not(RioGrandeWildTurkey(x)) & Not(OcellatedWildTurkey(x)))", "all x. (WildTurkey(x) -> Not(EasternWildTurkey(x)) & Not(OsceolaWildTurkey(x)) & Not(GouldsWildTurkey(x)) & Not(MerriamsWildTurkey(x)) & Not(RioGrandeWildTurkey(x)) & Not(OcellatedWildTurkey(x)))", "all x. (WildTurkey(x) -> Not(EasternWildTurkey(x)) & Not(OsceolaWildTurkey(x)) & Not(GouldsWildTurkey(x)) & Not(MerriamsWildTurkey(x)) & Not(RioGrandeWildTurkey(x)) & Not(OcellatedWildTurkey(x)))", "all x. (WildTurkey(x) -> Not(EasternWildTurkey(x)) & Not(OsceolaWildTurkey(x)) & Not(GouldsWildTurkey(x)) & Not(MerriamsWildTurkey(x)) & Not(RioGrandeWildTurkey(x)) & Not(OcellatedWildTurkey(x)))", "all x. (WildTurkey(x) -> Not(EasternWildTurkey(x)) & Not(OsceolaWildTurkey(x)) & Not(GouldsWildTurkey(x)) & Not(MerriamsWildTurkey(x)) & Not(RioGrandeWildTurkey(x)) & Not(OcellatedWildTurkey(x)))", "all x. (WildTurkey(x) -> Not(EasternWildTurkey(x)) & Not(OsceolaWildTurkey(x)) & Not(GouldsWildTurkey(x)) & Not(MerriamsWildTurkey(x)) & Not(RioGrandeWildTurkey(x)) & Not(OcellatedWildTurkey(x)))", "all x. (WildTurkey(x) -> Not(EasternWildTurkey(x)) & Not(OsceolaWildTurkey(x)) & Not(GouldsWildTurkey(x)) & Not(MerriamsWildTurkey(x)) & Not(RioGrandeWildTurkey(x)) & Not(OcellatedWildTurkey(x)))", "all x. (WildTurkey(x) -> Not(EasternWildTurkey(x)) & Not(OsceolaWildTurkey(x)) & Not(GouldsWildTurkey(x)) & Not(MerriamsWildTurkey(x)) & Not(RioGrandeWildTurkey(x)) & Not(OcellatedWildTurkey(x)))", "all x. (WildTurkey(x) -> Not(EasternWildTurkey(x)) & Not(OsceolaWildTurkey(x)) & Not(GouldsWildTurkey(x)) & Not(MerriamsWildTurkey(x)) & Not(RioGrandeWildTurkey(x)) & Not(OcellatedWildTurkey(x)))", "all x. (WildTurkey(x) -> Not(EasternWildTurkey(x)) & Not(OsceolaWildTurkey(x)) & Not(GouldsWildTurkey(x)) & Not(MerriamsWildTurkey(x)) & Not(RioGrandeWildTurkey(x)) & Not(OcellatedWildTurkey(x)))", "all x. (WildTurkey(x) -> Not(EasternWildTurkey(x)) & Not(OsceolaWildTurkey(x)) & Not(GouldsWildTurkey(x)) & Not(MerriamsWildTurkey(x)) & Not(RioGrandeWildTurkey(x)) & Not(OcellatedWildTurkey(x)))", "all x. (WildTurkey(x) -> Not(EasternWildTurkey(x)) & Not(OsceolaWildTurkey(x)) & Not(GouldsWildTurkey(x)) & Not(MerriamsWildTurkey(x)) & Not(RioGrandeWildTurkey(x)) & Not(OcellatedWildTurkey(x)))", "all x. (WildTurkey(x) -> Not(EasternWildTurkey(x)) & Not(OsceolaWildTurkey(x)) & Not(GouldsWildTurkey(x)) & Not(MerriamsWildTurkey(x)) & Not(RioGrandeWildTurkey(x)) & Not(OcellatedWildTurkey(x)))", "all x. (WildTurkey(x) -> Not(EasternWildTurkey(x)) & Not(OsceolaWildTurkey(x)) & Not(GouldsWildTurkey(x)) & Not(MerriamsWildTurkey(x)) & Not(RioGrandeWildTurkey(x)) & Not(OcellatedWildTurkey(x)))", "all x. (WildTurkey(x) -> Not(EasternWildTurkey(x)) & Not(OsceolaWildTurkey(x)) & Not(GouldsWildTurkey(x)) & Not(MerriamsWildTurkey(x)) & Not(RioGrandeWildTurkey(x)) & Not(OcellatedWildTurkey(x)))", "all x. (WildTurkey(x) -> Not(EasternWildTurkey(x)) & Not(OsceolaWildTurkey(x)) & Not(GouldsWildTurkey(x)) & Not(MerriamsWildTurkey(x)) & Not(RioGrandeWildTurkey(x)) & Not(OcellatedWildTurkey(x)))", "all x. (WildTurkey(x) -> Not(EasternWildTurkey(x)) & Not(OsceolaWildTurkey(x)) & Not(GouldsWildTurkey(x)) & Not(MerriamsWildTurkey(x)) & Not(RioGrandeWildTurkey(x)) & Not(OcellatedWildTurkey(x)))", "all x. (WildTurkey(x) -> Not(EasternWildTurkey(x)) & Not(OsceolaWildTurkey(x)) & Not(GouldsWildTurkey(x)) & Not(MerriamsWildTurkey(x)) & Not(RioGrandeWildTurkey(x)) & Not(OcellatedWildTurkey(x)))", "all x. (WildTurkey(x) -> Not(EasternWildTurkey(x)) & Not(OsceolaWildTurkey(x)) & Not(GouldsWildTurkey(x)) & Not(MerriamsWildTurkey(x)) & Not(RioGrandeWildTurkey(x)) & Not(OcellatedWildTurkey(x)))", "all x. (WildTurkey(x) -> Not(EasternWildTurkey(x)) & Not(OsceolaWildTurkey(x)) & Not(GouldsWildTurkey(x)) & Not(MerriamsWildTurkey(x)) & Not(RioGrandeWildTurkey(x)) & Not(OcellatedWildTurkey(x)))", "all x. (WildTurkey(x) -> Not(EasternWildTurkey(x)) & Not(OsceolaWildTurkey(x)) & Not(GouldsWildTurkey(x)) & Not(MerriamsWildTurkey(x)) & Not(RioGrandeWildTurkey(x)) & Not(OcellatedWildTurkey(x)))", "all x. (WildTurkey(x) -> Not(EasternWildTurkey(x)) & Not(OsceolaWildTurkey(x)) & Not(GouldsWildTurkey(x)) & Not(MerriamsWildTurkey(x)) & Not(RioGrandeWildTurkey(x)) & Not(OcellatedWildTurkey(x)))", "all x. (WildTurkey(x) -> Not(EasternWildTurkey(x)) & Not(OsceolaWildTurkey(x)) & Not(GouldsWildTurkey(x)) & Not(MerriamsWildTurkey(x)) & Not(RioGrandeWildTurkey(x)) & Not(OcellatedWildTurkey(x)))", "all x. (WildTurkey(x) -> Not(EasternWildTurkey(x)) & Not(OsceolaWildTurkey(x)) & Not(GouldsWildTurkey(x)) & Not(MerriamsWildTurkey(x)) & Not(RioGrandeWildTurkey(x)) & Not(OcellatedWildTurkey(x)))", "all x. (WildTurkey(x) -> Not(EasternWildTurkey(x)) & Not(OsceolaWildTurkey(x)) & Not(GouldsWildTurkey(x)) & Not(MerriamsWildTurkey(x)) & Not(RioGrandeWildTurkey(x)) & Not(OcellatedWildTurkey(x)))", "all x. (WildTurkey(x) -> Not(EasternWildTurkey(x)) & Not(OsceolaWildTurkey(x)) & Not(GouldsWildTurkey(x)) & Not(MerriamsWildTurkey(x)) & Not(RioGrandeWildTurkey(x)) & Not(OcellatedWildTurkey(x)))", "all x. (WildTurkey(x) -> Not(EasternWildTurkey(x)) & Not(OsceolaWildTurkey(x)) & Not(GouldsWildTurkey(x)) & Not(MerriamsWildTurkey(x)) & Not(RioGrandeWildTurkey(x)) & Not(OcellatedWildTurkey(x)))", "all x. (WildTurkey(x) -> Not(EasternWildTurkey(x)) & Not(OsceolaWildTurkey(x)) & Not(GouldsWildTurkey(x)) & Not(MerriamsWildTurkey(x)) & Not(RioGrandeWildTurkey(x)) & Not(OcellatedWildTurkey(x)))", "all x. (WildTurkey(x) -> Not(EasternWildTurkey(x)) & Not(OsceolaWildTurkey(x)) & Not(GouldsWildTurkey(x)) & Not(MerriamsWildTurkey(x)) & Not(RioGrandeWildTurkey(x)) & Not(OcellatedWildTurkey(x)))", "all x. (WildTurkey(x) -> Not(EasternWildTurkey(x)) & Not(OsceolaWildTurkey(x)) & Not(GouldsWildTurkey(x)) & Not(MerriamsWildTurkey(x)) & Not(RioGrandeWildTurkey(x)) & Not(OcellatedWildTurkey(x)))", "all x. (WildTurkey(x) -> Not(EasternWildTurkey(x)) & Not(OsceolaWildTurkey(x)) & Not(GouldsWildTurkey(x)) & Not(MerriamsWildTurkey(x)) & Not(RioGrandeWildTurkey(x)) & Not(OcellatedWildTurkey(x)))", "all x. (WildTurkey(x) -> Not(EasternWildTurkey(x)) & Not(OsceolaWildTurkey(x)) & Not(GouldsWildTurkey(x)) & Not(MerriamsWildTurkey(x)) & Not(RioGrandeWildTurkey(x)) & Not(OcellatedWildTurkey(x)))", "all x. (WildTurkey(x) -> Not(EasternWildTurkey(x)) & Not(OsceolaWildTurkey(x)) & Not(GouldsWildTurkey(x)) & Not(MerriamsWildTurkey(x)) & Not(RioGrandeWildTurkey(x)) & Not(OcellatedWildTurkey(x)))", "all x. (WildTurkey(x) -> Not(EasternWildTurkey(x)) & Not(OsceolaWildTurkey(x)) & Not(GouldsWildTurkey(x)) & Not(MerriamsWildTurkey(x)) & Not(RioGrandeWildTurkey(x)) & Not(OcellatedWildTurkey(x)))", "all x. (WildTurkey(x) -> Not(EasternWildTurkey(x)) & Not(OsceolaWildTurkey(x)) & Not(GouldsWildTurkey(x)) & Not(MerriamsWildTurkey(x)) & Not(RioGrandeWildTurkey(x)) & Not(OcellatedWildTurkey(x)))"], "conclusion": "all x. (WildTurkey(x) -> Not(EasternW", "error_type": "<class 'nltk.sem.logic.LogicalExpressionException'>", "error_message": "End of input found.  Expected token ')'.\nall x. (WildTurkey(x) -> Not(EasternW\n                                     ^", "stack_trace": "Traceback (most recent call last):\n  File \"/data/gpfs/projects/punim0478/bansaab/linc2/eval/tasks/owafoltask.py\", line 577, in _process_neurosymbolic\n    parsed = json.loads(gen)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/json/__init__.py\", line 346, in loads\n    return _default_decoder.decode(s)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/json/decoder.py\", line 337, in decode\n    obj, end = self.raw_decode(s, idx=_w(s, 0).end())\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/json/decoder.py\", line 355, in raw_decode\n    raise JSONDecodeError(\"Expecting value\", s, err.value) from None\njson.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/sem/logic.py\", line 270, in token\n    tok = self._buffer[self._currentIndex]\nIndexError: list index out of range\n\nThe above exception was the direct cause of the following exception:\n\nTraceback (most recent call last):\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/sem/logic.py\", line 562, in assertNextToken\n    tok = self.token()\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/sem/logic.py\", line 276, in token\n    raise ExpectedMoreTokensException(self._currentIndex + 1) from e\nnltk.sem.logic.ExpectedMoreTokensException: End of input found.  More tokens expected.\n\nThe above exception was the direct cause of the following exception:\n\nTraceback (most recent call last):\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/sem/logic.py\", line 154, in parse\n    result = self.process_next_expression(None)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/sem/logic.py\", line 290, in process_next_expression\n    accum = self.handle(tok, context)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/sem/logic.py\", line 312, in handle\n    return self.handle_quant(tok, context)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/sem/logic.py\", line 427, in handle_quant\n    accum = self.process_next_expression(tok)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/sem/logic.py\", line 290, in process_next_expression\n    accum = self.handle(tok, context)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/sem/logic.py\", line 315, in handle\n    return self.handle_open(tok, context)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/sem/logic.py\", line 449, in handle_open\n    accum = self.process_next_expression(None)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/sem/logic.py\", line 297, in process_next_expression\n    return self.attempt_adjuncts(accum, context)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/sem/logic.py\", line 323, in attempt_adjuncts\n    expression = self.attempt_BooleanExpression(expression, context)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/sem/logic.py\", line 485, in attempt_BooleanExpression\n    factory, expression, self.process_next_expression(tok)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/sem/logic.py\", line 290, in process_next_expression\n    accum = self.handle(tok, context)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/sem/logic.py\", line 303, in handle\n    return self.handle_variable(tok, context)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/sem/logic.py\", line 359, in handle_variable\n    self.assertNextToken(Tokens.CLOSE)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/sem/logic.py\", line 564, in assertNextToken\n    raise ExpectedMoreTokensException(\nnltk.sem.logic.ExpectedMoreTokensException: End of input found.  Expected token ')'.\n\nThe above exception was the direct cause of the following exception:\n\nTraceback (most recent call last):\n  File \"/data/gpfs/projects/punim0478/bansaab/linc2/eval/tasks/utils.py\", line 215, in evaluate\n    c = read_expr(conclusion)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/sem/logic.py\", line 957, in fromstring\n    return cls._logic_parser.parse(s, signature)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/sem/logic.py\", line 159, in parse\n    raise LogicalExpressionException(None, msg) from e\nnltk.sem.logic.LogicalExpressionException: End of input found.  Expected token ')'.\nall x. (WildTurkey(x) -> Not(EasternW\n                                     ^\n"}
{"timestamp": "2025-09-16T17:46:28.369730", "premises": ["exists x. (WildTurkey(x) & Not(EasternWildTurkey(x)) & Not(OsceolaWildTurkey(x)) & Not(GouldsWildTurkey(x)) & Not(MerriamsWildTurkey(x)) & Not(RioGrandeWildTurkey(x)) & Not(OcellatedWildTurkey(x)))", "all x. (WildTurkey(x) ->", "not(EasternWildTurkey(Tom))", "not(OsceolaWildTurkey(Tom))", "not(GouldsWildTurkey(Tom)) & not(MerriamsWildTurkey(Tom)) & not(RioGrandeWildTurkey(Tom))", "WildTurkey(Tom)", "Joey is a wild turkey.", "* Tom is not an Eastern wild turkey: not(EasternWildTurkey(Tom))"], "conclusion": "* Joey is not an Eastern wild turkey: not(EasternWildTurkey(Joey))", "error_type": "<class 'nltk.sem.logic.LogicalExpressionException'>", "error_message": "Unexpected token: 'Joey'.\n* Joey is not an Eastern wild turkey: not(EasternWildTurkey(Joey))\n  ^", "stack_trace": "Traceback (most recent call last):\n  File \"/data/gpfs/projects/punim0478/bansaab/linc2/eval/tasks/owafoltask.py\", line 577, in _process_neurosymbolic\n    parsed = json.loads(gen)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/json/__init__.py\", line 346, in loads\n    return _default_decoder.decode(s)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/json/decoder.py\", line 337, in decode\n    obj, end = self.raw_decode(s, idx=_w(s, 0).end())\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/json/decoder.py\", line 355, in raw_decode\n    raise JSONDecodeError(\"Expecting value\", s, err.value) from None\njson.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/sem/logic.py\", line 156, in parse\n    raise UnexpectedTokenException(self._currentIndex + 1, self.token(0))\nnltk.sem.logic.UnexpectedTokenException: Unexpected token: 'Joey'.\n\nThe above exception was the direct cause of the following exception:\n\nTraceback (most recent call last):\n  File \"/data/gpfs/projects/punim0478/bansaab/linc2/eval/tasks/utils.py\", line 215, in evaluate\n    c = read_expr(conclusion)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/sem/logic.py\", line 957, in fromstring\n    return cls._logic_parser.parse(s, signature)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/sem/logic.py\", line 159, in parse\n    raise LogicalExpressionException(None, msg) from e\nnltk.sem.logic.LogicalExpressionException: Unexpected token: 'Joey'.\n* Joey is not an Eastern wild turkey: not(EasternWildTurkey(Joey))\n  ^\n"}
{"timestamp": "2025-09-16T17:46:28.379967", "premises": ["all x. (WildTurkey(x) -> (EasternTurkey(x) | OsceolaTurkey(x) | GouldsTurkey(x) | MerriamsTurkey(x) | RioGrandeTurkey(x) | OcellatedTurkey(x)))", "all x. (Tom(x) -> WildTurkey(x))", "-EasternTurkey(Tom) & -OsceolaTurkey(Tom) & -GouldsTurkey(Tom) & -MerriamsTurkey(Tom) & -RioGrandeTurkey(Tom) & -OcellatedTurkey(Tom)", "Tom(x) -> WildTurkey(x)", "all x. (Joey(x) -> WildTurkey(x))", "-EasternTurkey(Joey) & -OsceolaTurkey(Joey) & -GouldsTurkey(Joey) & -MerriamsTurkey(Joey) & -RioGrandeTurkey(Joey) & -OcellatedTurkey(Joey)"], "conclusion": "Joey(x) -> WildTurkey(x)", "error_type": "<class 'nltk.inference.prover9.Prover9FatalException'>", "error_message": "(FATAL)\n%%ERROR: The following symbols are used with multiple arities: Joey/1, Joey/0, Tom/1, Tom/0.\n\n\nFatal error:  The following symbols are used with multiple arities: Joey/1, Joey/0, Tom/1, Tom/0", "stack_trace": "Traceback (most recent call last):\n  File \"/data/gpfs/projects/punim0478/bansaab/linc2/eval/tasks/owafoltask.py\", line 577, in _process_neurosymbolic\n    parsed = json.loads(gen)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/json/__init__.py\", line 346, in loads\n    return _default_decoder.decode(s)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/json/decoder.py\", line 337, in decode\n    obj, end = self.raw_decode(s, idx=_w(s, 0).end())\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/json/decoder.py\", line 355, in raw_decode\n    raise JSONDecodeError(\"Expecting value\", s, err.value) from None\njson.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"/data/gpfs/projects/punim0478/bansaab/linc2/eval/tasks/utils.py\", line 219, in evaluate\n    truth_value = prover.prove(c, p_list)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/inference/api.py\", line 37, in prove\n    return self._prove(goal, assumptions, verbose)[0]\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/inference/prover9.py\", line 327, in _prove\n    stdout, returncode = self._call_prover9(\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/inference/prover9.py\", line 370, in _call_prover9\n    raise Prover9FatalException(returncode, errormsg)\nnltk.inference.prover9.Prover9FatalException: (FATAL)\n%%ERROR: The following symbols are used with multiple arities: Joey/1, Joey/0, Tom/1, Tom/0.\n\n\nFatal error:  The following symbols are used with multiple arities: Joey/1, Joey/0, Tom/1, Tom/0\n"}
{"timestamp": "2025-09-16T17:46:28.411848", "premises": ["TEXT: There are six types of wild turkeys: Eastern wild turkey, Osceola wild turkey, Gould\u2019s wild turkey, Merriam\u2019s wild turkey, Rio Grande wild turkey, and Ocellated wild turkey.", "not EasternTurkey(Tom)", "not OsceolaTurkey(Tom)", "not GouldsTurkey(Tom) & not MerriamsTurkey(Tom) & not RioGrandeTurkey(Tom)", "WildTurkey(Tom)"], "conclusion": "WildTurkey(Joey)", "error_type": "<class 'nltk.sem.logic.LogicalExpressionException'>", "error_message": "Unexpected token: 'There'.\nTEXT: There are six types of wild turkeys: Eastern wild turkey, Osceola wild turkey, Gould\u2019s wild turkey, Merriam\u2019s wild turkey, Rio Grande wild turkey, and Ocellated wild turkey.\n      ^", "stack_trace": "Traceback (most recent call last):\n  File \"/data/gpfs/projects/punim0478/bansaab/linc2/eval/tasks/owafoltask.py\", line 577, in _process_neurosymbolic\n    parsed = json.loads(gen)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/json/__init__.py\", line 346, in loads\n    return _default_decoder.decode(s)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/json/decoder.py\", line 337, in decode\n    obj, end = self.raw_decode(s, idx=_w(s, 0).end())\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/json/decoder.py\", line 355, in raw_decode\n    raise JSONDecodeError(\"Expecting value\", s, err.value) from None\njson.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/sem/logic.py\", line 156, in parse\n    raise UnexpectedTokenException(self._currentIndex + 1, self.token(0))\nnltk.sem.logic.UnexpectedTokenException: Unexpected token: 'There'.\n\nThe above exception was the direct cause of the following exception:\n\nTraceback (most recent call last):\n  File \"/data/gpfs/projects/punim0478/bansaab/linc2/eval/tasks/utils.py\", line 216, in evaluate\n    p_list = [read_expr(p) for p in premises]\n  File \"/data/gpfs/projects/punim0478/bansaab/linc2/eval/tasks/utils.py\", line 216, in <listcomp>\n    p_list = [read_expr(p) for p in premises]\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/sem/logic.py\", line 957, in fromstring\n    return cls._logic_parser.parse(s, signature)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/sem/logic.py\", line 159, in parse\n    raise LogicalExpressionException(None, msg) from e\nnltk.sem.logic.LogicalExpressionException: Unexpected token: 'There'.\nTEXT: There are six types of wild turkeys: Eastern wild turkey, Osceola wild turkey, Gould\u2019s wild turkey, Merriam\u2019s wild turkey, Rio Grande wild turkey, and Ocellated wild turkey.\n      ^\n"}
{"timestamp": "2025-09-16T17:46:28.427202", "premises": ["all x. (WildTurkey(x) -> Tom(x))", "all x. all y. (Tom(x) -> EasternTurkey(x) | OsceolaTurkey(x) | GouldsTurkey(x) | MerriamsTurkey(x) | RioGrandeTurkey(x) | OcellatedTurkey(x))", "all x. all y. (Tom(x) -> Not(EasternTurkey(x)) | Not(OsceolaTurkey(x)) | Not(GouldsTurkey(x)) | Not(MerriamsTurkey(x)) | Not(RioGrandeTurkey(x)) | Not(OcellatedTurkey(x)))", "all x. (Not(EasternTurkey(x)) & Not(OsceolaTurkey(x)) & Not(GouldsTurkey(x)) & Not(MerriamsTurkey(x)) & Not(RioGrandeTurkey(x)) & Not(OcellatedTurkey(x)))", "all x. (WildTurkey(x) -> Joey(x))"], "conclusion": "all x. (Joey(x) -> Tom(x))", "error_type": "<class 'nltk.inference.prover9.Prover9FatalException'>", "error_message": "(FATAL)\n%%ERROR: The following symbols/arities are used as both relation and function symbols: EasternTurkey/1, OsceolaTurkey/1, GouldsTurkey/1, MerriamsTurkey/1, RioGrandeTurkey/1, OcellatedTurkey/1.\n\n\nFatal error:  The following symbols/arities are used as both relation and function symbols: EasternTurkey/1, OsceolaTurkey/1, GouldsTurkey/1, MerriamsTurkey/1, RioGrandeTurkey/1, OcellatedTurkey/1", "stack_trace": "Traceback (most recent call last):\n  File \"/data/gpfs/projects/punim0478/bansaab/linc2/eval/tasks/owafoltask.py\", line 577, in _process_neurosymbolic\n    parsed = json.loads(gen)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/json/__init__.py\", line 346, in loads\n    return _default_decoder.decode(s)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/json/decoder.py\", line 337, in decode\n    obj, end = self.raw_decode(s, idx=_w(s, 0).end())\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/json/decoder.py\", line 355, in raw_decode\n    raise JSONDecodeError(\"Expecting value\", s, err.value) from None\njson.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"/data/gpfs/projects/punim0478/bansaab/linc2/eval/tasks/utils.py\", line 219, in evaluate\n    truth_value = prover.prove(c, p_list)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/inference/api.py\", line 37, in prove\n    return self._prove(goal, assumptions, verbose)[0]\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/inference/prover9.py\", line 327, in _prove\n    stdout, returncode = self._call_prover9(\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/inference/prover9.py\", line 370, in _call_prover9\n    raise Prover9FatalException(returncode, errormsg)\nnltk.inference.prover9.Prover9FatalException: (FATAL)\n%%ERROR: The following symbols/arities are used as both relation and function symbols: EasternTurkey/1, OsceolaTurkey/1, GouldsTurkey/1, MerriamsTurkey/1, RioGrandeTurkey/1, OcellatedTurkey/1.\n\n\nFatal error:  The following symbols/arities are used as both relation and function symbols: EasternTurkey/1, OsceolaTurkey/1, GouldsTurkey/1, MerriamsTurkey/1, RioGrandeTurkey/1, OcellatedTurkey/1\n"}
{"timestamp": "2025-09-16T17:46:28.426772", "premises": ["all x. (WildTurkey(x) -> (EasternWildTurkey(x) | OsceolaWildTurkey(x) | GouldsWildTurkey(x) | MerriamsWildTurkey(x) | RioGrandeWildTurkey(x) | OcellatedWildTurkey(x)))", "all x. (NotEasternWildTurkey(x) & NotOsceolaWildTurkey(x) & NotGouldsWildTurkey(x) & NotMerriamsWildTurkey(x) & NotRioGrandeWildTurkey(x) & NotOcellatedWildTurkey(x))", "all x. (WildTurkey(x) -> Not(NotEasternWildTurkey(x) & NotOsceolaWildTurkey(x) & NotGouldsWildTurkey(x) & NotMerriamsWildTurkey(x) & NotRioGrandeWildTurkey(x) & NotOcellatedWildTurkey(x)))", "all x. (WildTurkey(x) -> Not(Not(EasternWildTurkey(x) & OsceolaWildTurkey(x) & GouldsWildTurkey(x) & MerriamsWildTurkey(x) & RioGrandeWildTurkey(x) & OcellatedWildTurkey(x))) & (EasternWildTurkey(x) | OsceolaWildTurkey(x) | GouldsWildTurkey(x) | MerriamsWildTurkey(x) | RioGrandeWildTurkey(x) | OcellatedWildTurkey(x)))", "all x. (WildTurkey(x) -> Not(Not(EasternWildTurkey(x) & OsceolaWildTurkey(x) & GouldsWildTurkey(x) & MerriamsWildTurkey(x) & RioGrandeWildTurkey(x) & OcellatedWildTurkey(x))) & (EasternWildTurkey(x) | OsceolaWildTurkey(x) | GouldsWildTurkey(x) | MerriamsWildTurkey(x) | RioGrandeWildTurkey(x) | OcellatedWildTurkey(x)))", "all x. (WildTurkey(x) -> Not(Not(EasternWildTurkey(x) & OsceolaWildTurkey(x) & GouldsWildTurkey(x) & MerriamsWildTurkey(x) & RioGrandeWildTurkey(x) & OcellatedWildTurkey(x))) & (EasternWildTurkey(x) | OsceolaWildTurkey(x) | GouldsWildTurkey(x) | MerriamsWildTurkey(x) | RioGrandeWildTurkey(x) & OcellatedWildTurkey(x)))", "all x. (WildTurkey(x) -> Not(Not(EasternWildTurkey(x) & OsceolaWildTurkey(x) & GouldsWildTurkey(x) & MerriamsWildTurkey(x) & RioGrandeWildTurkey(x) & OcellatedWildTurkey(x))) & (EasternWildTurkey(x) | OsceolaWildTurkey(x) | GouldsWildTurkey(x) & MerriamsWildTurkey(x) & RioGrandeWildTurkey(x) & OcellatedWildTurkey(x)))", "all x. (WildTurkey(x) -> Not(Not(EasternWildTurkey(x) & OsceolaWildTurkey(x) & GouldsWildTurkey(x) & MerriamsWildTurkey(x) & RioGrandeWildTurkey(x) & OcellatedWildTurkey(x))) & (EasternWildTurkey(x) | OsceolaWildTurkey(x) | GouldsWildTurkey(x) & MerriamsWildTurkey(x) & RioGrandeWildTurkey(x) & OcellatedWildTurkey(x)))", "all x. (WildTurkey(x) -> Not(Not(EasternWildTurkey(x) & OsceolaWildTurkey(x) & GouldsWildTurkey(x) & MerriamsWildTurkey(x) & RioGrandeWildTurkey(x) & OcellatedWildTurkey(x))) & (EasternWildTurkey(x) | OsceolaWildTurkey(x) | GouldsWildTurkey(x) & MerriamsWildTurkey(x) & RioGrandeWildTurkey(x) & OcellatedWildTurkey(x)))", "all x. (WildTurkey(x) -> Not(Not(EasternWildTurkey(x) & OsceolaWildTurkey(x) & GouldsWildTurkey(x) & MerriamsWildTurkey(x) & RioGrandeWildTurkey(x) & OcellatedWildTurkey(x))) & (EasternWildTurkey(x) | OsceolaWildTurkey(x) | GouldsWildTurkey(x) & MerriamsWildTurkey(x) & RioGrandeWildTurkey(x) & OcellatedWildTurkey(x)))", "all x. (WildTurkey(x) -> Not(Not(EasternWildTurkey(x) & OsceolaWildTurkey(x) & GouldsWildTurkey(x) & MerriamsWildTurkey(x) & RioGrandeWildTurkey(x) & OcellatedWildTurkey(x))) & (EasternWildTurkey(x) | OsceolaWildTurkey(x) | GouldsWildTurkey(x) & MerriamsWildTurkey(x) & RioGrandeWildTurkey(x) & OcellatedWildTurkey(x)))", "all x. (WildTurkey(x) -> Not(Not(EasternWildTurkey(x) & OsceolaWildTurkey(x) & GouldsWildTurkey(x) & MerriamsWildTurkey(x) & RioGrandeWildTurkey(x) & OcellatedWildTurkey(x))) & (EasternWildTurkey(x) | OsceolaWildTurkey(x) | GouldsWildTurkey(x) & MerriamsWildTurkey(x) & RioGrandeWildTurkey(x) & OcellatedWildTurkey(x)))", "all x. (WildTurkey(x) -> Not(Not(EasternWildTurkey(x) & OsceolaWildTurkey(x) & GouldsWildTurkey(x) & MerriamsWildTurkey(x) & RioGrandeWildTurkey(x) & OcellatedWildTurkey(x))) & (EasternWildTurkey(x) | OsceolaWildTurkey(x) | GouldsWildTurkey(x) & MerriamsWildTurkey(x) & RioGrandeWildTurkey(x) & OcellatedWildTurkey(x)))", "all x. (WildTurkey(x) -> Not(Not(EasternWildTurkey(x) & OsceolaWildTurkey(x) & GouldsWildTurkey(x) & MerriamsWildTurkey(x) & RioGrandeWildTurkey(x) & OcellatedWildTurkey(x))) & (EasternWildTurkey(x) | OsceolaWildTurkey(x) | GouldsWildTurkey(x) & MerriamsWildTurkey(x) & RioGrandeWildTurkey(x) & OcellatedWildTurkey(x)))", "all x. (WildTurkey(x) -> Not(Not(EasternWildTurkey(x) & OsceolaWildTurkey(x) & GouldsWildTurkey(x) & MerriamsWildTurkey(x) & RioGrandeWildTurkey(x) & OcellatedWildTurkey(x))) & (EasternWildTurkey(x) | OsceolaWildTurkey(x) | GouldsWildTurkey(x) & MerriamsWildTurkey(x) & RioGrandeWildTurkey(x) & OcellatedWildTurkey(x)))", "all x. (WildTurkey(x) -> Not(Not(EasternWildTurkey(x) & OsceolaWildTurkey(x) & GouldsWildTurkey(x) & MerriamsWildTurkey(x) & RioGrandeWildTurkey(x) & OcellatedWildTurkey(x))) & (EasternWildTurkey(x) | OsceolaWildTurkey(x) | GouldsWildTurkey(x) & MerriamsWildTurkey(x) & RioGrandeWildTurkey(x) & OcellatedWildTurkey(x)))", "all x. (WildTurkey(x) -> Not(Not(EasternWildTurkey(x) & OsceolaWildTurkey(x) & GouldsWildTurkey(x) & MerriamsWildTurkey(x) & RioGrandeWildTurkey(x) & OcellatedWildTurkey(x))) & (EasternWildTurkey(x) | OsceolaWildTurkey(x) | GouldsWildTurkey(x) & MerriamsWildTurkey(x) & RioGrandeWildTurkey(x) & OcellatedWildTurkey(x)))", "all x. (WildTurkey(x) -> Not(Not(EasternWildTurkey(x) & OsceolaWildTurkey(x) & GouldsWildTurkey(x) & MerriamsWildTurkey(x) & RioGrandeWildTurkey(x) & OcellatedWildTurkey(x))) & (EasternWildTurkey(x) | OsceolaWildTurkey(x) | GouldsWildTurkey(x) & MerriamsWildTurkey(x) & RioGrandeWildTurkey(x) & OcellatedWildTurkey(x)))", "all x. (WildTurkey(x) -> Not(Not(EasternWildTurkey(x) & OsceolaWildTurkey(x) & GouldsWildTurkey(x) & MerriamsWildTurkey(x) & RioGrandeWildTurkey(x) & OcellatedWildTurkey(x))) & (EasternWildTurkey(x) | OsceolaWildTurkey(x) | GouldsWildTurkey(x) & MerriamsWildTurkey(x) & RioGrandeWildTurkey(x) & OcellatedWildTurkey(x)))", "all x. (WildTurkey(x) -> Not(Not(EasternWildTurkey(x) & OsceolaWildTurkey(x) & GouldsWildTurkey(x) & MerriamsWildTurkey(x) & RioGrandeWildTurkey(x) & OcellatedWildTurkey(x))) & (EasternWildTurkey(x) | OsceolaWildTurkey(x) | GouldsWildTurkey(x) & MerriamsWildTurkey(x) & RioGrandeWildTurkey(x) & OcellatedWildTurkey(x)))", "all x. (WildTurkey(x) -> Not(Not(EasternWildTurkey(x) & OsceolaWildTurkey(x) & GouldsWildTurkey(x) & MerriamsWildTurkey(x) & RioGrandeWildTurkey(x) & OcellatedWildTurkey(x))) & (EasternWildTurkey(x) | OsceolaWildTurkey(x) | GouldsWildTurkey(x) & MerriamsWildTurkey(x) & RioGrandeWildTurkey(x) & OcellatedWildTurkey(x)))", "all x. (WildTurkey(x) -> Not(Not(EasternWildTurkey(x) & OsceolaWildTurkey(x) & GouldsWildTurkey(x) & MerriamsWildTurkey(x) & RioGrandeWildTurkey(x) & OcellatedWildTurkey(x))) & (EasternWildTurkey(x) | OsceolaWildTurkey(x) | GouldsWildTurkey(x) & MerriamsWildTurkey(x) & RioGrandeWildTurkey(x) & OcellatedWildTurkey(x)))", "all x. (WildTurkey(x) -> Not(Not(EasternWildTurkey(x) & OsceolaWildTurkey(x) & GouldsWildTurkey(x) & MerriamsWildTurkey(x) & RioGrandeWildTurkey(x) & OcellatedWildTurkey(x))) & (EasternWildTurkey(x) | OsceolaWildTurkey(x) | GouldsWildTurkey(x) & MerriamsWildTurkey(x) & RioGrandeWildTurkey(x) & OcellatedWildTurkey(x)))", "all x. (WildTurkey(x) -> Not(Not(EasternWildTurkey(x) & OsceolaWildTurkey(x) & GouldsWildTurkey(x) & MerriamsWildTurkey(x) & RioGrandeWildTurkey(x) & OcellatedWildTurkey(x))) & (EasternWildTurkey(x) | OsceolaWildTurkey(x) | GouldsWildTurkey(x) & MerriamsWildTurkey(x) & RioGrandeWildTurkey(x) & OcellatedWildTurkey(x)))", "all x. (WildTurkey(x) -> Not(Not(EasternWildTurkey(x) & OsceolaWildTurkey(x) & GouldsWildTurkey(x) & MerriamsWildTurkey(x) & RioGrandeWildTurkey(x) & OcellatedWildTurkey(x))) & (EasternWildTurkey(x) | OsceolaWildTurkey(x) | GouldsWildTurkey(x) & MerriamsWildTurkey(x) & RioGrandeWildTurkey(x) & OcellatedWildTurkey(x)))", "all x. (WildTurkey(x) -> Not(Not(EasternWildTurkey(x) & OsceolaWildTurkey(x) & GouldsWildTurkey(x) & MerriamsWildTurkey(x) & RioGrandeWildTurkey(x) & OcellatedWildTurkey(x))) & (EasternWildTurkey(x) | OsceolaWildTurkey(x) | GouldsWildTurkey(x) & MerriamsWildTurkey(x) & RioGrandeWildTurkey(x) & OcellatedWildTurkey(x)))", "all x. (WildTurkey(x) -> Not(Not(EasternWildTurkey(x) & OsceolaWildTurkey(x) & GouldsWildTurkey(x) & MerriamsWildTurkey(x) & RioGrandeWildTurkey(x) & OcellatedWildTurkey(x))) & (EasternWildTurkey(x) | OsceolaWildTurkey(x) | GouldsWildTurkey(x) & MerriamsWildTurkey(x) & RioGrandeWildTurkey(x) & OcellatedWildTurkey(x)))", "all x. (WildTurkey(x) -> Not(Not(EasternWildTurkey(x) & OsceolaWildTurkey(x) & GouldsWildTurkey(x) & MerriamsWildTurkey(x) & RioGrandeWildTurkey(x) & OcellatedWildTurkey(x))) & (EasternWildTurkey(x) | OsceolaWildTurkey(x) | GouldsWildTurkey(x) & MerriamsWildTurkey(x) & RioGrandeWildTurkey(x) & OcellatedWildTurkey(x)))", "all x. (WildTurkey(x) -> Not(Not(EasternWildTurkey(x) & OsceolaWildTurkey(x) & GouldsWildTurkey(x) & MerriamsWildTurkey(x) & RioGrandeWildTurkey(x) & OcellatedWildTurkey(x))) & (EasternWildTurkey(x) | OsceolaWildTurkey(x) | GouldsWildTurkey(x) & MerriamsWildTurkey(x) & RioGrandeWildTurkey(x) & OcellatedWildTurkey(x)))", "all x. (WildTurkey(x) -> Not(Not(EasternWildTurkey(x) & OsceolaWildTurkey(x) & GouldsWildTurkey(x) & MerriamsWildTurkey(x) & RioGrandeWildTurkey(x) & OcellatedWildTurkey(x))) & (EasternWildTurkey(x) | OsceolaWildTurkey(x) | GouldsWildTurkey(x) & MerriamsWildTurkey(x) & RioGrandeWildTurkey(x) & OcellatedWildTurkey(x)))", "all x. (WildTurkey(x) -> Not(Not(EasternWildTurkey(x) & OsceolaWildTurkey(x) & GouldsWildTurkey(x) & MerriamsWildTurkey(x) & RioGrandeWildTurkey(x) & OcellatedWildTurkey(x))) & (EasternWildTurkey(x) | OsceolaWildTurkey(x) | GouldsWildTurkey(x) & MerriamsWildTurkey(x) & RioGrandeWildTurkey(x) & OcellatedWildTurkey(x)))", "all x. (WildTurkey(x) -> Not(Not(EasternWildTurkey(x) & OsceolaWildTurkey(x) & GouldsWildTurkey(x) & MerriamsWildTurkey(x) & RioGrandeWildTurkey(x) & OcellatedWildTurkey(x))) & (EasternWildTurkey(x) | OsceolaWildTurkey(x) | GouldsWildTurkey(x) & MerriamsWildTurkey(x) & RioGrandeWildTurkey(x) & OcellatedWildTurkey(x)))", "all x. (WildTurkey(x) -> Not(Not(EasternWildTurkey(x) & OsceolaWildTurkey(x) & GouldsWildTurkey(x) & MerriamsWildTurkey(x) & RioGrandeWildTurkey(x) & OcellatedWildTurkey(x))) & (EasternWildTurkey(x) | OsceolaWildTurkey(x) | GouldsWildTurkey(x) & MerriamsWildTurkey(x) & RioGrandeWildTurkey(x) & OcellatedWildTurkey(x)))", "all x. (WildTurkey(x) -> Not(Not(EasternWildTurkey(x) & OsceolaWildTurkey(x) & GouldsWildTurkey(x) & MerriamsWildTurkey(x) & RioGrandeWildTurkey(x) & OcellatedWildTurkey(x))) & (EasternWildTurkey(x) | OsceolaWildTurkey(x) | GouldsWildTurkey(x) & MerriamsWildTurkey(x) & RioGrandeWildTurkey(x) & OcellatedWildTurkey(x)))", "all x. (WildTurkey(x) -> Not(Not(EasternWildTurkey(x) & OsceolaWildTurkey(x) & GouldsWildTurkey(x) & MerriamsWildTurkey(x) & RioGrandeWildTurkey(x) & OcellatedWildTurkey(x))) & (EasternWildTurkey(x) | OsceolaWildTurkey(x) | GouldsWildTurkey(x) & MerriamsWildTurkey(x) & RioGrandeWildTurkey(x) & OcellatedWildTurkey(x)))", "all x. (WildTurkey(x) -> Not(Not(EasternWildTurkey(x) & OsceolaWildTurkey(x) & GouldsWildTurkey(x) & MerriamsWildTurkey(x) & RioGrandeWildTurkey(x) & OcellatedWildTurkey(x))) & (EasternWildTurkey(x) | OsceolaWildTurkey(x) | GouldsWildTurkey(x) & MerriamsWildTurkey(x) & RioGrandeWildTurkey(x) & OcellatedWildTurkey(x)))", "all x. (WildTurkey(x) -> Not(Not(EasternWildTurkey(x) & OsceolaWildTurkey(x) & GouldsWildTurkey(x) & MerriamsWildTurkey(x) & RioGrandeWildTurkey(x) & OcellatedWildTurkey(x))) & (EasternWildTurkey(x) | OsceolaWildTurkey(x) | GouldsWildTurkey(x) & MerriamsWildTurkey(x) & RioGrandeWildTurkey(x) & OcellatedWildTurkey(x)))", "all x. (WildTurkey(x) -> Not(Not(EasternWildTurkey(x) & OsceolaWildTurkey(x) & GouldsWildTurkey(x) & MerriamsWildTurkey(x) & RioGrandeWildTurkey(x) & OcellatedWildTurkey(x))) & (EasternWildTurkey(x) | OsceolaWildTurkey(x) | GouldsWildTurkey(x) & MerriamsWildTurkey(x) & RioGrandeWildTurkey(x) & OcellatedWildTurkey(x)))", "all x. (WildTurkey(x) -> Not(Not(EasternWildTurkey(x) & OsceolaWildTurkey(x) & GouldsWildTurkey(x) & MerriamsWildTurkey(x) & RioGrandeWildTurkey(x) & OcellatedWildTurkey(x))) & (EasternWildTurkey(x) | OsceolaWildTurkey(x) | GouldsWildTurkey(x) & MerriamsWildTurkey(x) & RioGrandeWildTurkey(x) & OcellatedWildTurkey(x)))", "all x. (WildTurkey(x) -> Not(Not(EasternWildTurkey(x) & OsceolaWildTurkey(x) & GouldsWildTurkey(x) & MerriamsWildTurkey(x) & RioGrandeWildTurkey(x) & OcellatedWildTurkey(x))) & (EasternWildTurkey(x) | OsceolaWildTurkey(x) | GouldsWildTurkey(x) & MerriamsWildTurkey(x) & RioGrandeWildTurkey(x) & OcellatedWildTurkey(x)))", "all x. (WildTurkey(x) -> Not(Not(EasternWildTurkey(x) & OsceolaWildTurkey(x) & GouldsWildTurkey(x) & MerriamsWildTurkey(x) & RioGrandeWildTurkey(x) & OcellatedWildTurkey(x))) & (EasternWildTurkey(x) | OsceolaWildTurkey(x) | GouldsWildTurkey(x) & MerriamsWildTurkey(x) & RioGrandeWildTurkey(x) & OcellatedWildTurkey(x)))", "all x. (WildTurkey(x) -> Not(Not(EasternWildTurkey(x) & OsceolaWildTurkey(x) & GouldsWildTurkey(x) & MerriamsWildTurkey(x) & RioGrandeWildTurkey(x) & OcellatedWildTurkey(x))) & (EasternWildTurkey(x) | OsceolaWildTurkey(x) | GouldsWildTurkey(x) & MerriamsWildTurkey(x) & RioGrandeWildTurkey(x) & OcellatedWildTurkey(x)))", "all x. (WildTurkey(x) -> Not(Not(EasternWildTurkey(x) & OsceolaWildTurkey(x) & GouldsWildTurkey(x) & MerriamsWildTurkey(x) & RioGrandeWildTurkey(x) & OcellatedWildTurkey(x))) & (EasternWildTurkey(x) | OsceolaWildTurkey(x) | GouldsWildTurkey(x) & MerriamsWildTurkey(x) & RioGrandeWildTurkey(x) & OcellatedWildTurkey(x)))", "all x. (WildTurkey(x) -> Not(Not(EasternWildTurkey(x) & OsceolaWildTurkey(x) & GouldsWildTurkey(x) & MerriamsWildTurkey(x) & RioGrandeWildTurkey(x) & OcellatedWildTurkey(x))) & (EasternWildTurkey(x) | OsceolaWildTurkey(x) | GouldsWildTurkey(x) & MerriamsWildTurkey(x) & RioGrandeWildTurkey(x) & OcellatedWildTurkey(x)))", "all x. (WildTurkey(x) -> Not(Not(EasternWildTurkey(x) & OsceolaWildTurkey(x) & GouldsWildTurkey(x) & MerriamsWildTurkey(x) & RioGrandeWildTurkey(x) & OcellatedWildTurkey(x))) & (EasternWildTurkey(x) | OsceolaWildTurkey(x) | GouldsWildTurkey(x) & MerriamsWildTurkey(x) & RioGrandeWildTurkey(x) & OcellatedWildTurkey(x)))", "all x. (WildTurkey(x) -> Not(Not(EasternWildTurkey(x) & OsceolaWildTurkey(x) & GouldsWildTurkey(x) & MerriamsWildTurkey(x) & RioGrandeWildTurkey(x) & OcellatedWildTurkey(x))) & (EasternWildTurkey(x) | OsceolaWildTurkey(x) | GouldsWildTurkey(x) & MerriamsWildTurkey(x) & RioGrandeWildTurkey(x) & OcellatedWildTurkey(x)))", "all x. (WildTurkey(x) -> Not(Not(EasternWildTurkey(x) & OsceolaWildTurkey(x) & GouldsWildTurkey(x) & MerriamsWildTurkey(x) & RioGrandeWildTurkey(x) & OcellatedWildTurkey(x))) & (EasternWildTurkey(x) | OsceolaWildTurkey(x) | GouldsWildTurkey(x) & MerriamsWildTurkey(x) & RioGrandeWildTurkey(x) & OcellatedWildTurkey(x)))", "all x. (WildTurkey(x) -> Not(Not(EasternWildTurkey(x) & OsceolaWildTurkey(x) & GouldsWildTurkey(x) & MerriamsWildTurkey(x) & RioGrandeWildTurkey(x) & OcellatedWildTurkey(x))) & (EasternWildTurkey(x) | OsceolaWildTurkey(x) | GouldsWildTurkey(x) & MerriamsWildTurkey(x) & RioGrandeWildTurkey(x) & OcellatedWildTurkey(x)))", "all x. (WildTurkey(x) -> Not(Not(EasternWildTurkey(x) & OsceolaWildTurkey(x) & GouldsWildTurkey(x) & MerriamsWildTurkey(x) & RioGrandeWildTurkey(x) & OcellatedWildTurkey(x))) & (EasternWildTurkey(x) | OsceolaWildTurkey(x) | GouldsWildTurkey(x) & MerriamsWildTurkey(x) & RioGrandeWildTurkey(x) & OcellatedWildTurkey(x)))", "all x. (WildTurkey(x) -> Not(Not(EasternWildTurkey(x) & OsceolaWildTurkey(x) & GouldsWildTurkey(x) & MerriamsWildTurkey(x) & RioGrandeWildTurkey(x) & OcellatedWildTurkey(x))) & (EasternWildTurkey(x) | OsceolaWildTurkey(x) | GouldsWildTurkey(x) & MerriamsWildTurkey(x) & RioGrandeWildTurkey(x) & OcellatedWildTurkey(x)))", "all x. (WildTurkey(x) -> Not(Not(EasternWildTurkey(x) & OsceolaWildTurkey(x) & GouldsWildTurkey(x) & MerriamsWildTurkey(x) & RioGrandeWildTurkey(x) & OcellatedWildTurkey(x))) & (EasternWildTurkey(x) | OsceolaWildTurkey(x) | GouldsWildTurkey(x) & MerriamsWildTurkey(x) & RioGrandeWildTurkey(x) & OcellatedWildTurkey(x)))", "all x. (WildTurkey(x) -> Not(Not(EasternWildTurkey(x) & OsceolaWildTurkey(x) & GouldsWildTurkey(x) & MerriamsWildTurkey(x) & RioGrandeWildTurkey(x) & OcellatedWildTurkey(x))) & (EasternWildTurkey(x) | OsceolaWildTurkey(x) | GouldsWildTurkey(x) & MerriamsWildTurkey(x) & RioGrandeWildTurkey(x) & OcellatedWildTurkey(x)))", "all x. (WildTurkey(x) -> Not(Not(EasternWildTurkey(x) & OsceolaWildTurkey(x) & GouldsWildTurkey(x) & MerriamsWildTurkey(x) & RioGrandeWildTurkey(x) & OcellatedWildTurkey(x))) & (EasternWildTurkey(x) | OsceolaWildTurkey(x) | GouldsWildTurkey(x) & MerriamsWildTurkey(x) & RioGrandeWildTurkey(x) & OcellatedWildTurkey(x)))", "all x. (WildTurkey(x) -> Not(Not(EasternWildTurkey(x) & OsceolaWildTurkey(x) & GouldsWildTurkey(x) & MerriamsWildTurkey(x) & RioGrandeWildTurkey(x) & OcellatedWildTurkey(x))) & (EasternWildTurkey(x) | OsceolaWildTurkey(x) | GouldsWildTurkey(x) & MerriamsWildTurkey(x) & RioGrandeWildTurkey(x) & OcellatedWildTurkey(x)))", "all x. (WildTurkey(x) -> Not(Not(EasternWildTurkey(x) & OsceolaWildTurkey(x) & GouldsWildTurkey(x) & MerriamsWildTurkey(x) & RioGrandeWildTurkey(x) & OcellatedWildTurkey(x))) & (EasternWildTurkey(x) | OsceolaWildTurkey(x) | GouldsWildTurkey(x) & MerriamsWildTurkey(x) & RioGrandeWildTurkey(x) & OcellatedWildTurkey(x)))"], "conclusion": "all x. (WildTurkey(x) -> Not(Not(EasternWildTurkey(x) & OsceolaWildTurkey(x) & GouldsWildTurkey(x) & MerriamsWildTurkey(x) & RioGrandeWildTurkey(x) & OcellatedWildTurkey(x))) & (EasternW", "error_type": "<class 'nltk.sem.logic.LogicalExpressionException'>", "error_message": "Unexpected token: '&'.  Expected token ')'.\nall x. (WildTurkey(x) -> Not(Not(EasternWildTurkey(x) & OsceolaWildTurkey(x) & GouldsWildTurkey(x) & MerriamsWildTurkey(x) & RioGrandeWildTurkey(x) & OcellatedWildTurkey(x))) & (EasternW\n                                                      ^", "stack_trace": "Traceback (most recent call last):\n  File \"/data/gpfs/projects/punim0478/bansaab/linc2/eval/tasks/owafoltask.py\", line 577, in _process_neurosymbolic\n    parsed = json.loads(gen)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/json/__init__.py\", line 346, in loads\n    return _default_decoder.decode(s)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/json/decoder.py\", line 337, in decode\n    obj, end = self.raw_decode(s, idx=_w(s, 0).end())\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/json/decoder.py\", line 355, in raw_decode\n    raise JSONDecodeError(\"Expecting value\", s, err.value) from None\njson.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/sem/logic.py\", line 154, in parse\n    result = self.process_next_expression(None)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/sem/logic.py\", line 290, in process_next_expression\n    accum = self.handle(tok, context)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/sem/logic.py\", line 312, in handle\n    return self.handle_quant(tok, context)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/sem/logic.py\", line 427, in handle_quant\n    accum = self.process_next_expression(tok)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/sem/logic.py\", line 290, in process_next_expression\n    accum = self.handle(tok, context)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/sem/logic.py\", line 315, in handle\n    return self.handle_open(tok, context)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/sem/logic.py\", line 449, in handle_open\n    accum = self.process_next_expression(None)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/sem/logic.py\", line 297, in process_next_expression\n    return self.attempt_adjuncts(accum, context)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/sem/logic.py\", line 323, in attempt_adjuncts\n    expression = self.attempt_BooleanExpression(expression, context)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/sem/logic.py\", line 485, in attempt_BooleanExpression\n    factory, expression, self.process_next_expression(tok)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/sem/logic.py\", line 290, in process_next_expression\n    accum = self.handle(tok, context)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/sem/logic.py\", line 303, in handle\n    return self.handle_variable(tok, context)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/sem/logic.py\", line 352, in handle_variable\n    accum, self.process_next_expression(APP)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/sem/logic.py\", line 290, in process_next_expression\n    accum = self.handle(tok, context)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/sem/logic.py\", line 303, in handle\n    return self.handle_variable(tok, context)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/sem/logic.py\", line 359, in handle_variable\n    self.assertNextToken(Tokens.CLOSE)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/sem/logic.py\", line 573, in assertNextToken\n    raise UnexpectedTokenException(self._currentIndex, tok, expected)\nnltk.sem.logic.UnexpectedTokenException: Unexpected token: '&'.  Expected token ')'.\n\nThe above exception was the direct cause of the following exception:\n\nTraceback (most recent call last):\n  File \"/data/gpfs/projects/punim0478/bansaab/linc2/eval/tasks/utils.py\", line 215, in evaluate\n    c = read_expr(conclusion)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/sem/logic.py\", line 957, in fromstring\n    return cls._logic_parser.parse(s, signature)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/sem/logic.py\", line 159, in parse\n    raise LogicalExpressionException(None, msg) from e\nnltk.sem.logic.LogicalExpressionException: Unexpected token: '&'.  Expected token ')'.\nall x. (WildTurkey(x) -> Not(Not(EasternWildTurkey(x) & OsceolaWildTurkey(x) & GouldsWildTurkey(x) & MerriamsWildTurkey(x) & RioGrandeWildTurkey(x) & OcellatedWildTurkey(x))) & (EasternW\n                                                      ^\n"}
{"timestamp": "2025-09-16T17:48:48.223736", "premises": ["exists x. (JapaneseGameCompany(x) & Created(x, LegendOfZelda))", "exists x. (GameInTop10(x) -> JapaneseGameCompany(x))", "exists x. (SellsMoreThanOneMillionCopies(x) -> GameInTop10(x))", "SellsMoreThanOneMillionCopies(LegendOfZelda)", "GameInTop10(LegendOfZelda)"], "conclusion": "LegendOfZelda is in the Top 10 list.", "error_type": "<class 'nltk.sem.logic.LogicalExpressionException'>", "error_message": "Unexpected token: 'is'.\nLegendOfZelda is in the Top 10 list.\n              ^", "stack_trace": "Traceback (most recent call last):\n  File \"/data/gpfs/projects/punim0478/bansaab/linc2/eval/tasks/owafoltask.py\", line 577, in _process_neurosymbolic\n    parsed = json.loads(gen)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/json/__init__.py\", line 346, in loads\n    return _default_decoder.decode(s)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/json/decoder.py\", line 337, in decode\n    obj, end = self.raw_decode(s, idx=_w(s, 0).end())\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/json/decoder.py\", line 355, in raw_decode\n    raise JSONDecodeError(\"Expecting value\", s, err.value) from None\njson.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/sem/logic.py\", line 156, in parse\n    raise UnexpectedTokenException(self._currentIndex + 1, self.token(0))\nnltk.sem.logic.UnexpectedTokenException: Unexpected token: 'is'.\n\nThe above exception was the direct cause of the following exception:\n\nTraceback (most recent call last):\n  File \"/data/gpfs/projects/punim0478/bansaab/linc2/eval/tasks/utils.py\", line 215, in evaluate\n    c = read_expr(conclusion)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/sem/logic.py\", line 957, in fromstring\n    return cls._logic_parser.parse(s, signature)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/sem/logic.py\", line 159, in parse\n    raise LogicalExpressionException(None, msg) from e\nnltk.sem.logic.LogicalExpressionException: Unexpected token: 'is'.\nLegendOfZelda is in the Top 10 list.\n              ^\n"}
{"timestamp": "2025-09-16T17:48:48.242886", "premises": ["all x. (LegendofZelda(x) -> JapaneseGameCompany(x))", "all x. (Top10List(x) -> JapaneseGameCompany(x))", "all x. (SellsMoreThanOneMillionCopies(x) -> Top10List(x))", "SellsMoreThanOneMillionCopies(LegendofZelda)", "all x. (Building(x) -> Height(x))", "EiffelTower(x) -> Building(x)", "EiffelTower(x) -> In(x, Paris)", "all x. (In(x, Paris) -> Height(x))", "EiffelTower(x) -> TallestBuildingInParis(x)", "EiffelTower(x) -> Height(x)", "EiffelTower(x) -> TallestBuildingInParis(x)", "EiffelTower(x) -> TallestBuildingInParis(x) & Height(x)", "EiffelTower(x) -> TallestBuildingInParis(x) & Height(x) & In(x, Paris)", "EiffelTower(x) -> TallestBuildingInParis(x) & Height(x) & In(x, Paris) & Height(x)", "EiffelTower(x) -> TallestBuildingInParis(x) & Height(x) & In(x, Paris) & Height(x) & Height(x)", "EiffelTower(x) -> TallestBuildingInParis(x) & Height(x) & In(x, Paris) & Height(x) & Height(x) & Height(x)", "EiffelTower(x) -> TallestBuildingInParis(x) & Height(x) & In(x, Paris) & Height(x) & Height(x) & Height(x) & Height(x)", "EiffelTower(x) -> TallestBuildingInParis(x) & Height(x) & In(x, Paris) & Height(x) & Height(x) & Height(x) & Height(x) & Height(x)", "EiffelTower(x) -> TallestBuildingInParis(x) & Height(x) & In(x, Paris) & Height(x) & Height(x) & Height(x) & Height(x) & Height(x) & Height(x)", "EiffelTower(x) -> TallestBuildingInParis(x) & Height(x) & In(x, Paris) & Height(x) & Height(x) & Height(x) & Height(x) & Height(x) & Height(x) & Height(x)", "EiffelTower(x) -> TallestBuildingInParis(x) & Height(x) & In(x, Paris) & Height(x) & Height(x) & Height(x) & Height(x) & Height(x) & Height(x) & Height(x) & Height(x)", "EiffelTower(x) -> TallestBuildingInParis(x) & Height(x) & In(x, Paris) & Height(x) & Height(x) & Height(x) & Height(x) & Height(x) & Height(x) & Height(x) & Height(x) & Height(x)", "EiffelTower(x) -> TallestBuildingInParis(x) & Height(x) & In(x, Paris) & Height(x) & Height(x) & Height(x) & Height(x) & Height(x) & Height(x) & Height(x) & Height(x) & Height(x) & Height(x)", "EiffelTower(x) -> TallestBuildingInParis(x) & Height(x) & In(x, Paris) & Height(x) & Height(x) & Height(x) & Height(x) & Height(x) & Height(x) & Height(x) & Height(x) & Height(x) & Height(x) & Height(x)", "EiffelTower(x) -> TallestBuildingInParis(x) & Height(x) & In(x, Paris) & Height(x) & Height(x) & Height(x) & Height(x) & Height(x) & Height(x) & Height(x) & Height(x) & Height(x) & Height(x) & Height(x) & Height(x)", "EiffelTower(x) -> TallestBuildingInParis(x) & Height(x) & In(x, Paris) & Height(x) & Height(x) & Height(x) & Height(x) & Height(x) & Height(x) & Height(x) & Height(x) & Height(x) & Height(x) & Height(x) & Height(x)", "EiffelTower(x) -> TallestBuildingInParis(x) & Height(x) & In(x, Paris) & Height(x) & Height(x) & Height(x) & Height(x) & Height(x) & Height(x) & Height(x) & Height(x) & Height(x) & Height(x) & Height(x) & Height(x) & Height(x)", "EiffelTower(x) -> TallestBuildingInParis(x) & Height(x) & In(x, Paris) & Height(x) & Height(x) & Height(x) & Height(x) & Height(x) & Height(x) & Height(x) & Height(x) & Height(x) & Height(x) & Height(x) & Height(x) & Height(x)", "EiffelTower(x) -> TallestBuildingInParis(x) & Height(x) & In(x, Paris) & Height(x) & Height(x) & Height(x) & Height(x) & Height(x) & Height(x) & Height(x) & Height(x) & Height(x) & Height(x) & Height(x) & Height(x) & Height(x)", "EiffelTower(x) -> TallestBuildingInParis(x) & Height(x) & In(x, Paris) & Height(x) & Height(x) & Height(x) & Height(x) & Height(x) & Height(x) & Height(x) & Height(x) & Height(x) & Height(x) & Height(x) & Height(x) & Height(x) & Height(x)", "EiffelTower(x) -> TallestBuildingInParis(x) & Height(x) & In(x, Paris) & Height(x) & Height(x) & Height(x) & Height(x) & Height(x) & Height(x) & Height(x) & Height(x) & Height(x) & Height(x) & Height(x) & Height(x) & Height(x) & Height(x) & Height(x) & Height(x)"], "conclusion": "EiffelTower(x) -> TallestBuildingInParis(x) & Height(x) & In(x, Paris) & Height(x) & Height(x) & Height(x) & Height(x) & Height(x) & Height(x) & Height(x) & Height(x) & Height(x) & Height(x) & Height(x) & Height(x) & Height(x) & Height(x) & Height(x) & Height(x) & Height(x) & Height(x) & Height(x) & Height(x) & Height(x) & Height(x) & Height(x) & Height(x) & Height(x) & Height(x) & Height(x) & Height(x) & Height(x) & Height(x) & Height(x) & Height(x) & Height(x) & Height(x) & Height(x) & Height(x) & Height(x) & Height(x) & Height(x) & Height(x) & Height(x) & Height(x) & Height(x) & Height(x) & Height(x) & Height(x) & Height(x) & Height(x) & Height(x) & Height(x) & Height(x) & Height(x) & Height(x) & Height(x) & Height(x) & Height(x) & Height(x) & Height(x) & Height(x) & Height(x) & Height(x) & Height(x) & Height(x) & Height(x) & Height(x) & Height(x) & Height(x) & Height(x) & Height(x) & Height(x) & Height(x) & Height(x) & Height(x) & Height(x) & Height(x) & Height(x) & Height(x) & Height(x) & Height(x) & Height(x) & Height(x) & Height(x) & Height(x) & Height(x) & Height(x) & Height(x) & Height(x) & Height(x) & Height(x) & Height(x) & Height(x) & Height(x) & Height(x) & Height(x) & Height(x) & Height(x) & Height(x) & Height(x) & Height(x) & Height(x) & Height(x) & Height(x) & Height(x) & Height(x) & Height(x) & Height(x) & Height(x) & Height(x) & Height(x) & Height(x) & Height(x) & Height(x) & Height(x) & Height(x) & Height(x) & Height(x) & Height(x) & Height(x) & Height(x) & Height(x) & Height(x) & Height(x) & Height(x) & Height(x) & Height(x) & Height(x) & Height(x) & Height(x) & Height(x) & Height(x) & Height(x) & Height(x) & Height(x) & Height(x) & Height(x) & Height(x) & Height(x) & Height(x) & Height(x) & Height(x) & Height(x) & Height(x) & Height(x) & Height(x) & Height(x) & Height(x) & Height(x) & Height(x) & Height(x) & Height(x) & Height(x) & Height(x) & Height(x) & Height(x) & Height(x) & Height(x) & Height(x) & Height(x) & Height(x) & Height(x) & Height(x) & Height(x) & Height(x) & Height(x) & Height(x) & Height(x) & Height(x) & Height(x) & Height(x) & Height(x) & Height(x) & Height(x) & Height(x) & Height(x) & Height(x) & Height(x) & Height(x) & Height(x) & Height(x) & Height(x) & Height(x) & Height(x) & Height(x) & Height(x) & Height(x) & Height(x) & Height(x) & Height(x) & Height(x) & Height(x) & Height(x) & Height(x) & Height(x) & Height(x) & Height(x) & Height(x) & Height(x) & Height(x) & Height(x) & Height(x) & Height(x) & Height(x) & Height(x) & Height(x) & Height(x) & Height(x) & Height(x) & Height(x) & Height(x) & Height(x) & Height(x) & Height(x) & Height(x) & Height(x) & Height(x) & Height(x) & Height(x) & Height(x) & Height(x) & Height(x) & Height(x) & Height(x) & Height(x) & Height(x) & Height(x) & Height(x) & Height(x) & Height(x) & Height(x) & Height(x) & Height(x) & Height(x) & Height(x) & Height(x) & Height(x) & Height(x) & Height(x) & Height(x) & Height(x) & Height(x) & Height(x) & Height(x) & Height(x) & Height(x) & Height(x) & Height(x) & Height(x) & Height(x) & Height(x) & Height(x) & Height(x) & Height(x) & Height(x) & Height(x) & Height(x) & Height(x) & Height(x) & Height(x) & Height(x) & Height(x) & Height(x) & Height(x) & Height(x) & Height(x) & Height(x) & Height(x) & Height(x) & Height(x) & Height(x) & Height(x) & Height(x) & Height(x) & Height(x) & Height(x) & Height(x) & Height(x) & Height(x) & Height(x) & Height(x) & Height(x) & Height(x) & Height(x) & Height(x) & Height(x) & Height(x) & Height(x) & Height(x) & Height(x) & Height(x) & Height(x) & Height(x) & Height(x) & Height(x) & Height(x) & Height(x) & Height(x) & Height(x) & Height(x) & Height(x) & Height(x) & Height(x) & Height(x) & Height(x) & Height(x) & Height(x) & Height(x) & Height(x) & Height(x) & Height(x) & Height(x) & Height(x) & Height(x) & Height(x) & Height(x) & Height(x) & Height(x) & Height(x) & Height(x) & Height(x) & Height(x) & Height(x) & Height(x) & Height(x) & Height(x) & Height(x) & Height(x) & Height(x) & Height(x) & Height(x) & Height(x) & Height(x) & Height(x) & Height(x) & Height(x) & Height(x) & Height(x) & Height(x) & Height(x) & Height(x) & Height(x) & Height(x) & Height(x) & Height(x) & Height(x) & Height(x) & Height(x) & Height(x) & Height(x) & Height(x) & Height(x) & Height(x) & Height(x) & Height(x) & Height(x) & Height(x) & Height(x) & Height(x) & Height(x) & Height(x) & Height(x) & Height(x) & Height(x) & Height(x) & Height(x) & Height(x) & Height(x) & Height(x) & Height(x) & Height(x) & Height(x) & Height(x) & Height(x) & Height(x) & Height(x) & Height(x) & Height(x) & Height(x) & Height(x) & Height(x) & Height(x) & Height(x) & Height(x) & Height(x) & Height(x) & Height(x) & Height(x) & Height(x) & Height(x) & Height(x) & Height(x) & Height(x) & Height(x) & Height(x) & Height(x) & Height(x) & Height(x) & Height(x) & Height(x) & Height(x) & Height(x) & Height(x) & Height(x) & Height(x) & Height(x) & Height(x) & Height(x) & Height(x) & Height(x) & Height(x) & Height(x) & Height(x) & Height(x) & Height(x) & Height(x) & Height(x) & Height(x) & Height(x) & Height(x) & Height(x) & Height(x) & Height(x) & Height(x) & Height(x) & Height(x) & Height(x) & Height(x) & Height(x) & Height(x) & Height(x) & Height(x) & Height(x) & Height(x) & Height(x) & Height(x) & Height(x) & Height(x) & Height(x) & Height(x) & Height(x) & Height(x) & Height(x) & Height(x) & Height(x) & Height(x) & Height(x) & Height(x) & Height(x) & Height(x) & Height(x) & Height(x) & Height(x) & Height(x) & Height(x) & Height(x) & Height(x) & Height(x) & Height(x) & Height(x) & Height(x) & Height(x) & Height(x) & Height(x) & Height(x) & Height(x) & Height(x) & Height(x) & Height(x) & Height(x) & Height(x) & Height(x) & Height(x) & Height(x) & Height(x) & Height(x) & Height(x) & Height(x) & Height(x) & Height(x) & Height(x) & Height(x) & Height(x) & Height(x) & Height(x) & Height(x) & Height(x) & Height(x) & Height(x) & Height(x) & Height(x) & Height(x) & Height(x) & Height(x) & Height(x) & Height(x) & Height(x) & Height(x) & Height(x) & Height(x) & Height(x) & Height(x) & Height(x) & Height(x) & Height(x) & Height(x) & Height(x) & Height(x) & Height(x) & Height(x) & Height(x) & Height(x) & Height(x) & Height(x) & Height(x) & Height(x) & Height(x) & Height(x) & Height(x) & Height(x) & Height(x) & Height(x) & Height(x) & Height(x) & Height(x) & Height(x) & Height(x) & Height(x) & Height(x) & Height(x) & Height(x) & Height(x) & Height(x) & Height(x) & Height(x) & Height(x) & Height(x) & Height(x) & Height(x) & Height(x) & Height(x) & Height(x) & Height(x) & Height(x) & Height(x) & Height(x) & Height(x) & Height(x) & Height(x) & Height(x) & Height(x) & Height(x) & Height(x) & Height(x) & Height(x) & Height(x) & Height(x) & Height(x) & Height(x) & Height(x) & Height(x) & Height(x) & Height(x) & Height(x) & Height(x) & Height(x) & Height(x) & Height(x) & Height(x) & Height(x) & Height(x) & Height(x) & Height(x) & Height(x) & Height(x) & Height(x) & Height(x) & Height(x) & Height(x) & Height(x) & Height(x) (F))(F))(F))(F))(F))(F))(F))(F))(F))(F))(F))(F))(F))(F))(F))(F))(F))(F))(F))(F))(F))(F))(F))(F))(F))(F))(F))(F))(F))(F))(F))(F))(F))(F))(F))(F))(F))(F))(F))(F))(F))(F))(F))(F))(F))(F))(F))(F))(F))(F))(F))(F))(F))(F))(F))(F))(F))(F))(F))(F))(F))(F))(F))(F))(F))(F))(F))(F))(F))(F))(F))(F))(F))(F))(F))(F))(F))(F))(F))(F))(F))(F))(F))(F))(F))(F))(F))(F))(F))(F))(F))(F))(F))(F))(F))(F))(F))(F))(F))(F))(F))(F))(F))(F))(F))(F))(F))(F))(F))(F))(F))(F))(F))(F))(F))(F))(F))(F))(F))(F))(F))(F))(F))(F))(F))(F))(F))(F))(F))(F))(F))(F))(F))(F))(F))(F))(F))(F))(F))(F))(F))(F))(F))(F))(F))(F))(F))(F))(F))(F))(F))(F))(F))(F))(F))(F))(F))(F))(F))(F))(F))(F))(F))(F))(F))(F))(F))(F))(F))(F))(F))(F))(F))(F))(F))(F))(F))(F))(F))(F))(F))(F))(F))(F))(F))(F))(F))(F))(F))(F))(F))(F))(F))(F))(F))(F))(F))(F))(F))(F))(F))(F))(F))(F))(F))(F))(F))(F))(F))(F))(F))(F))(F))(F))(F))(F))(F))(F))(F))(F))(F))(F))(F))(F))(F))(F))(F))(F))(F))(F))(F))(F))(F))(f(x.36) (F))(F))(f(x.36) (F))(f(x.36) (F))(F))(F))(F))(F))(f(x.36) (F))(f(x.36) (F))(f(x.36) (F))(f(x.36) (F))(f(x.36) (F))(f(x.36) (F))(f(x.36) (F))(f(x.36) (F))(f(x.36) (F))(f(x.36) (F))(f(x.36) (F))(f(x.36) (F))(f(x.36) (F))(f(x.36) (F))(f(x.36) (F))(f(x.36) (F))(f(x.36) (F))(f(x.36) (F))(F))(F))(f(x.36) (F))(f(x.36) (F))(f(x.36) (F))(f(x.36) (F))(f(x.36) (F))(f(x.36) (F))(F))(F))(F))(F))(F))(F))(F))(F))(F))(F))(F))(F))(F))(F))(F))(F))(F))(F))(F))(F))(F))(F))(F))(F))(F))(F))(F))(F))(F))(F))(F))(F))(F))(F))(F))(F))(F))(F))(F))(F))(F))(F))(F))(F))(F))(f(x.36) (F))(f(x.36) (F))(f(x.36) (F))(f(x.36) (F))(f(x.36) (F))(f(x.36) (F))(f(x.36) (F))(f(x.36) (F))(f(x.36) (F))(f(x.36) (F))(f(x.36) (F))(f(x.36) (F))(f(x.36) (F))(f(x.36) (F))(f(x.36) (F))(F))(F))(F))(F))(F))(F))(F))(F))(F))(F))(F))(F))(F))(F))(F))(F))(F))(F))(F))(F))(F))(F))(F))(F))(F))(F))(F))(F))(F))(F))(F))(F))(F))(F))(F))(F))(F))(F))(F))(F))(F))(F))(F))(F))(F))(F))(F))(F))(F))(F))(F))(F))(F))(F))(F))(F))(F))(F))(F))(F))(F))(F))(F))(F))(F))(F))(F))(F))(F))(f(x.36) (F))(f(x.36) (F))(f(x.36) (F))(f(x.36) (F))(f(x.36) (F))(f(x.36) (F))(f(x.36) (F))(f(x.36) (F))(f(x.36) (F))(f(x.36) (F))(f(x.36) (F))(F))(F))(F))(F))(F))(F))(F))(F))(F))(F))(F))(F))(F))(F))(F))(F))(F))(F))(F))(F))(F))(F))(F))(F))(F))(F))(F))(F))(F))(F))(F))(F))(F))(F))(F))(F))(F))(F))(f(x.36) (F))(f(x.36) (F))(f(x.36) (F))(f(x.36) (F))(f(x.36) (F))(f(x.36) (F))(f(x.36) (F))(f(x.36) (F))(f(x.36) (F))(f(x.36) (F))(f(x.36) (F))(F))(F))(F))(F))(F))(F))(F))(F))(F))(F))(F))(F))(F))(F))(F))(F))(F))(F))(F))(F))(F))(F))(F))(F))(F))(F))(F))(F))(F))(F))(F))(F))(F))(F))(F))(F))(F))(F))(f(x.36) (F))(f(x.36) (F))(f(x.36) (F))(f(x.36) (F))(f(x.36) (F))(f(x.36) (F))(f(x.36) (F))(f(x.36) (F))(f(x.36) (F))(F))(F))(F))(F))(F))(F))(F))(F))(F))(F))(F))(F))(F))(F))(F))(F))(F))(F))(F))(F))(F))(F))(F))(F))(F))(F))(F))(F))(F))(F))(F))(F))(F))(F))(F))(F))(F))(F))(F))(F))(F))(F))(F))(F))(F))(F))(F))(F))(F))(F))(F))(F))(F))(F))(F))(F))(F))(F))(F))(F))(F))(F))(F))(F))(F))(F))(F))(F))(F))(F))(F))(F))(F))(F))(F))(F))(F))(F))(F))(F))(F))(F))(F))(F))(F))(F))(F))(F))(F))(F))(F))(F))(F))(F))(F))(F))(F))(F))(F))(F))(F))(F))(F))(F))(F))(F))(F))(F))(F))(F))(F))(F))(F))(F))(F))(F))(F))(F))(f(x.36) (F))(f(x.36) (F))(f(x.36) (F))(f(x.36) (F))(f(x.36) (F))(f(x.36) (F))(f(x.36) (F))(f(x.36) (F))(f(x.36) (F))(f(x.36) (F))(f(x.36) (F))(F))(F))(F))(F))(F))(F))(F))(f))(fx.36) (F))(f(x.36) (F))(f(x.36) (F))(f(x.36) (F))(f(x.36) (F))(f(x.36) (F))(f(x", "error_type": "<class 'nltk.sem.logic.LogicalExpressionException'>", "error_message": "End of input found.  More tokens expected.\nEiffelTower(x) -> TallestBuildingInParis(x) & Height(x) & In(x, Paris) & Height(x) & Height(x) & Height(x) & Height(x) & Height(x) & Height(x) & Height(x) & Height(x) & Height(x) & Height(x) & Height(x) & Height(x) & Height(x)\n               ^", "stack_trace": "Traceback (most recent call last):\n  File \"/data/gpfs/projects/punim0478/bansaab/linc2/eval/tasks/owafoltask.py\", line 577, in _process_neurosymbolic\n    parsed = json.loads(gen)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/json/__init__.py\", line 346, in loads\n    return _default_decoder.decode(s)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/json/decoder.py\", line 337, in decode\n    obj, end = self.raw_decode(s, idx=_w(s, 0).end())\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/json/decoder.py\", line 355, in raw_decode\n    raise JSONDecodeError(\"Expecting value\", s, err.value) from None\njson.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/sem/logic.py\", line 270, in token\n    tok = self._buffer[self._currentIndex]\nIndexError: list index out of range\n\nThe above exception was the direct cause of the following exception:\n\nTraceback (most recent call last):\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/sem/logic.py\", line 154, in parse\n    result = self.process_next_expression(None)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/sem/logic.py\", line 297, in process_next_expression\n    return self.attempt_adjuncts(accum, context)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/sem/logic.py\", line 323, in attempt_adjuncts\n    expression = self.attempt_BooleanExpression(expression, context)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/sem/logic.py\", line 485, in attempt_BooleanExpression\n    factory, expression, self.process_next_expression(tok)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/sem/logic.py\", line 297, in process_next_expression\n    return self.attempt_adjuncts(accum, context)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/sem/logic.py\", line 323, in attempt_adjuncts\n    expression = self.attempt_BooleanExpression(expression, context)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/sem/logic.py\", line 485, in attempt_BooleanExpression\n    factory, expression, self.process_next_expression(tok)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/sem/logic.py\", line 290, in process_next_expression\n    accum = self.handle(tok, context)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/sem/logic.py\", line 303, in handle\n    return self.handle_variable(tok, context)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/sem/logic.py\", line 348, in handle_variable\n    self.token()  # swallow the Open Paren\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/sem/logic.py\", line 276, in token\n    raise ExpectedMoreTokensException(self._currentIndex + 1) from e\nnltk.sem.logic.ExpectedMoreTokensException: End of input found.  More tokens expected.\n\nThe above exception was the direct cause of the following exception:\n\nTraceback (most recent call last):\n  File \"/data/gpfs/projects/punim0478/bansaab/linc2/eval/tasks/utils.py\", line 216, in evaluate\n    p_list = [read_expr(p) for p in premises]\n  File \"/data/gpfs/projects/punim0478/bansaab/linc2/eval/tasks/utils.py\", line 216, in <listcomp>\n    p_list = [read_expr(p) for p in premises]\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/sem/logic.py\", line 957, in fromstring\n    return cls._logic_parser.parse(s, signature)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/sem/logic.py\", line 159, in parse\n    raise LogicalExpressionException(None, msg) from e\nnltk.sem.logic.LogicalExpressionException: End of input found.  More tokens expected.\nEiffelTower(x) -> TallestBuildingInParis(x) & Height(x) & In(x, Paris) & Height(x) & Height(x) & Height(x) & Height(x) & Height(x) & Height(x) & Height(x) & Height(x) & Height(x) & Height(x) & Height(x) & Height(x) & Height(x)\n               ^\n"}
{"timestamp": "2025-09-16T17:48:48.254958", "premises": ["all x. (Created(JapaneseGameCompany, x) -> Game(x) & LegendOfZelda(x))", "all x. (InTop10(x) -> MadeByJapaneseGameCompany(x))", "all x. (SellsMoreThanOneMillionCopies(x) -> InTop10(x))", "SellsMoreThanOneMillionCopies(LegendOfZelda)"], "conclusion": "InTop10(LegendOfZelda)", "error_type": "<class 'nltk.inference.prover9.Prover9FatalException'>", "error_message": "(FATAL)\n%%ERROR: The following symbols are used with multiple arities: LegendOfZelda/1, LegendOfZelda/0.\n\n\nFatal error:  The following symbols are used with multiple arities: LegendOfZelda/1, LegendOfZelda/0", "stack_trace": "Traceback (most recent call last):\n  File \"/data/gpfs/projects/punim0478/bansaab/linc2/eval/tasks/owafoltask.py\", line 577, in _process_neurosymbolic\n    parsed = json.loads(gen)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/json/__init__.py\", line 346, in loads\n    return _default_decoder.decode(s)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/json/decoder.py\", line 337, in decode\n    obj, end = self.raw_decode(s, idx=_w(s, 0).end())\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/json/decoder.py\", line 355, in raw_decode\n    raise JSONDecodeError(\"Expecting value\", s, err.value) from None\njson.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"/data/gpfs/projects/punim0478/bansaab/linc2/eval/tasks/utils.py\", line 219, in evaluate\n    truth_value = prover.prove(c, p_list)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/inference/api.py\", line 37, in prove\n    return self._prove(goal, assumptions, verbose)[0]\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/inference/prover9.py\", line 327, in _prove\n    stdout, returncode = self._call_prover9(\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/inference/prover9.py\", line 370, in _call_prover9\n    raise Prover9FatalException(returncode, errormsg)\nnltk.inference.prover9.Prover9FatalException: (FATAL)\n%%ERROR: The following symbols are used with multiple arities: LegendOfZelda/1, LegendOfZelda/0.\n\n\nFatal error:  The following symbols are used with multiple arities: LegendOfZelda/1, LegendOfZelda/0\n"}
{"timestamp": "2025-09-16T17:48:48.265207", "premises": ["all x. (Game(x) -> (Created(JapaneseGameCompany, x) & LegendofZelda(x)))", "all x. (Game(x) -> (InTop10List(x) & MadeByJapaneseGameCompany(x)))", "all x. (Game(x) -> (SellsMoreThanOneMillionCopies(x) -> InTop10List(x)))", "SellsMoreThanOneMillionCopies(LegendofZelda)"], "conclusion": "InTop10List(LegendofZelda)", "error_type": "<class 'nltk.inference.prover9.Prover9FatalException'>", "error_message": "(FATAL)\n%%ERROR: The following symbols are used with multiple arities: LegendofZelda/1, LegendofZelda/0.\n\n\nFatal error:  The following symbols are used with multiple arities: LegendofZelda/1, LegendofZelda/0", "stack_trace": "Traceback (most recent call last):\n  File \"/data/gpfs/projects/punim0478/bansaab/linc2/eval/tasks/owafoltask.py\", line 577, in _process_neurosymbolic\n    parsed = json.loads(gen)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/json/__init__.py\", line 346, in loads\n    return _default_decoder.decode(s)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/json/decoder.py\", line 337, in decode\n    obj, end = self.raw_decode(s, idx=_w(s, 0).end())\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/json/decoder.py\", line 355, in raw_decode\n    raise JSONDecodeError(\"Expecting value\", s, err.value) from None\njson.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"/data/gpfs/projects/punim0478/bansaab/linc2/eval/tasks/utils.py\", line 219, in evaluate\n    truth_value = prover.prove(c, p_list)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/inference/api.py\", line 37, in prove\n    return self._prove(goal, assumptions, verbose)[0]\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/inference/prover9.py\", line 327, in _prove\n    stdout, returncode = self._call_prover9(\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/inference/prover9.py\", line 370, in _call_prover9\n    raise Prover9FatalException(returncode, errormsg)\nnltk.inference.prover9.Prover9FatalException: (FATAL)\n%%ERROR: The following symbols are used with multiple arities: LegendofZelda/1, LegendofZelda/0.\n\n\nFatal error:  The following symbols are used with multiple arities: LegendofZelda/1, LegendofZelda/0\n"}
{"timestamp": "2025-09-16T17:50:10.637682", "premises": ["all x. (LegendOfZelda(x) -> CreatedBy(JapaneseGameCompany, x))", "all x. (Top10List(x) -> MadeBy(JapaneseGameCompany, x))", "all x. (SellsMoreThanOneMillionCopies(x) -> SelectedIntoTop10List(x))", "SellsMoreThanOneMillionCopies(LegendOfZelda)"], "conclusion": "MadeBy(JapaneseGameCompany, FIFA22)", "error_type": "<class 'nltk.inference.prover9.Prover9FatalException'>", "error_message": "(FATAL)\n%%ERROR: The following symbols are used with multiple arities: LegendOfZelda/1, LegendOfZelda/0.\n\n\nFatal error:  The following symbols are used with multiple arities: LegendOfZelda/1, LegendOfZelda/0", "stack_trace": "Traceback (most recent call last):\n  File \"/data/gpfs/projects/punim0478/bansaab/linc2/eval/tasks/owafoltask.py\", line 577, in _process_neurosymbolic\n    parsed = json.loads(gen)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/json/__init__.py\", line 346, in loads\n    return _default_decoder.decode(s)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/json/decoder.py\", line 337, in decode\n    obj, end = self.raw_decode(s, idx=_w(s, 0).end())\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/json/decoder.py\", line 355, in raw_decode\n    raise JSONDecodeError(\"Expecting value\", s, err.value) from None\njson.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"/data/gpfs/projects/punim0478/bansaab/linc2/eval/tasks/utils.py\", line 219, in evaluate\n    truth_value = prover.prove(c, p_list)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/inference/api.py\", line 37, in prove\n    return self._prove(goal, assumptions, verbose)[0]\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/inference/prover9.py\", line 327, in _prove\n    stdout, returncode = self._call_prover9(\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/inference/prover9.py\", line 370, in _call_prover9\n    raise Prover9FatalException(returncode, errormsg)\nnltk.inference.prover9.Prover9FatalException: (FATAL)\n%%ERROR: The following symbols are used with multiple arities: LegendOfZelda/1, LegendOfZelda/0.\n\n\nFatal error:  The following symbols are used with multiple arities: LegendOfZelda/1, LegendOfZelda/0\n"}
{"timestamp": "2025-09-16T17:50:10.664847", "premises": ["all x. (JapaneseGameCompany(x) -> LegendOfZelda(x))", "all x. (TopTenList(x) -> JapaneseGameCompany(x))", "all x. (SellsMoreThanOneMillionCopies(x) -> SelectedForTopTenList(x))", "SellsMoreThanOneMillionCopies(LegendOfZelda)", "SelectedForTopTenList(LegendOfZelda)", "TopTenList(LegendOfZelda)", "all x. (TopTenList(x) & JapaneseGameCompany(x))", "all x. (FIFA22(x) -> JapaneseGameCompany(x))", "all x. (FIFA22(x) -> SellsMoreThanOneMillionCopies(x))", "all x. (FIFA22(x) -> SelectedForTopTenList(x))", "SelectedForTopTenList(FIFA22)", "TopTenList(FIFA22)", "all x. (FIFA22(x) -> JapaneseGameCompany(x))", "all x. (FIFA22(x) -> SellsMoreThanOneMillionCopies(x))", "all x. (FIFA22(x) -> SelectedForTopTenList(x))", "SelectedForTopTenList(FIFA22)", "TopTenList(FIFA22)", "all x. (FIFA22(x) -> JapaneseGameCompany(x))", "all x. (FIFA22(x) -> SellsMoreThanOneMillionCopies(x))", "all x. (FIFA22(x) -> SelectedForTopTenList(x))", "SelectedForTopTenList(FIFA22)"], "conclusion": "TopTenList(FIFA22)", "error_type": "<class 'nltk.inference.prover9.Prover9FatalException'>", "error_message": "(FATAL)\n%%ERROR: The following symbols are used with multiple arities: LegendOfZelda/1, LegendOfZelda/0, FIFA22/1, FIFA22/0.\n\n\nFatal error:  The following symbols are used with multiple arities: LegendOfZelda/1, LegendOfZelda/0, FIFA22/1, FIFA22/0", "stack_trace": "Traceback (most recent call last):\n  File \"/data/gpfs/projects/punim0478/bansaab/linc2/eval/tasks/owafoltask.py\", line 577, in _process_neurosymbolic\n    parsed = json.loads(gen)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/json/__init__.py\", line 346, in loads\n    return _default_decoder.decode(s)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/json/decoder.py\", line 337, in decode\n    obj, end = self.raw_decode(s, idx=_w(s, 0).end())\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/json/decoder.py\", line 355, in raw_decode\n    raise JSONDecodeError(\"Expecting value\", s, err.value) from None\njson.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"/data/gpfs/projects/punim0478/bansaab/linc2/eval/tasks/utils.py\", line 219, in evaluate\n    truth_value = prover.prove(c, p_list)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/inference/api.py\", line 37, in prove\n    return self._prove(goal, assumptions, verbose)[0]\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/inference/prover9.py\", line 327, in _prove\n    stdout, returncode = self._call_prover9(\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/inference/prover9.py\", line 370, in _call_prover9\n    raise Prover9FatalException(returncode, errormsg)\nnltk.inference.prover9.Prover9FatalException: (FATAL)\n%%ERROR: The following symbols are used with multiple arities: LegendOfZelda/1, LegendOfZelda/0, FIFA22/1, FIFA22/0.\n\n\nFatal error:  The following symbols are used with multiple arities: LegendOfZelda/1, LegendOfZelda/0, FIFA22/1, FIFA22/0\n"}
{"timestamp": "2025-09-16T17:50:10.665436", "premises": ["all x. (Created(x, LegendOfZelda) -> JapaneseGameCompany(x))", "all x. (Top10(x) -> JapaneseGameCompany(x))", "all x. (SellsMoreThan1MillionCopies(x) -> Top10(x))", "SellsMoreThan1MillionCopies(LegendOfZelda)", "all x. (JapaneseGameCompany(x) -> SellsMoreThan1MillionCopies(x))", "SellsMoreThan1MillionCopies(FIFA22)", "all x. (FIFA22 -> Top10(x))", "all x. (Top10(x) -> JapaneseGameCompany(x))", "all x. (JapaneseGameCompany(x) -> SellsMoreThan1MillionCopies(x))", "SellsMoreThan1MillionCopies(FIFA22)", "all x. (FIFA22 -> Top10(x))", "all x. (Top10(x) -> JapaneseGameCompany(x))", "all x. (JapaneseGameCompany(x) -> SellsMoreThan1MillionCopies(x))"], "conclusion": "SellsMoreThan1MillionCopies(FIFA22)", "error_type": "<class 'nltk.inference.prover9.Prover9FatalException'>", "error_message": "(FATAL)\n%%ERROR: The following symbols/arities are used as both relation and function symbols: FIFA22/0.\n\n\nFatal error:  The following symbols/arities are used as both relation and function symbols: FIFA22/0", "stack_trace": "Traceback (most recent call last):\n  File \"/data/gpfs/projects/punim0478/bansaab/linc2/eval/tasks/owafoltask.py\", line 577, in _process_neurosymbolic\n    parsed = json.loads(gen)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/json/__init__.py\", line 346, in loads\n    return _default_decoder.decode(s)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/json/decoder.py\", line 337, in decode\n    obj, end = self.raw_decode(s, idx=_w(s, 0).end())\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/json/decoder.py\", line 355, in raw_decode\n    raise JSONDecodeError(\"Expecting value\", s, err.value) from None\njson.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"/data/gpfs/projects/punim0478/bansaab/linc2/eval/tasks/utils.py\", line 219, in evaluate\n    truth_value = prover.prove(c, p_list)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/inference/api.py\", line 37, in prove\n    return self._prove(goal, assumptions, verbose)[0]\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/inference/prover9.py\", line 327, in _prove\n    stdout, returncode = self._call_prover9(\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/inference/prover9.py\", line 370, in _call_prover9\n    raise Prover9FatalException(returncode, errormsg)\nnltk.inference.prover9.Prover9FatalException: (FATAL)\n%%ERROR: The following symbols/arities are used as both relation and function symbols: FIFA22/0.\n\n\nFatal error:  The following symbols/arities are used as both relation and function symbols: FIFA22/0\n"}
{"timestamp": "2025-09-16T17:52:18.536831", "premises": ["all x. (Created(JapaneseGameCompany, x) -> LegendofZelda(x))", "all x. (InTopTen(x) -> MadeByJapaneseGameCompany(x))", "all x. (SellsMoreThanOneMillionCopies(x) -> InTopTen(x))", "SellsMoreThanOneMillionCopies(LegendofZelda)"], "conclusion": "-InTopTen(LegendofZelda)", "error_type": "<class 'nltk.inference.prover9.Prover9FatalException'>", "error_message": "(FATAL)\n%%ERROR: The following symbols are used with multiple arities: LegendofZelda/1, LegendofZelda/0.\n\n\nFatal error:  The following symbols are used with multiple arities: LegendofZelda/1, LegendofZelda/0", "stack_trace": "Traceback (most recent call last):\n  File \"/data/gpfs/projects/punim0478/bansaab/linc2/eval/tasks/owafoltask.py\", line 577, in _process_neurosymbolic\n    parsed = json.loads(gen)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/json/__init__.py\", line 346, in loads\n    return _default_decoder.decode(s)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/json/decoder.py\", line 337, in decode\n    obj, end = self.raw_decode(s, idx=_w(s, 0).end())\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/json/decoder.py\", line 355, in raw_decode\n    raise JSONDecodeError(\"Expecting value\", s, err.value) from None\njson.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"/data/gpfs/projects/punim0478/bansaab/linc2/eval/tasks/utils.py\", line 219, in evaluate\n    truth_value = prover.prove(c, p_list)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/inference/api.py\", line 37, in prove\n    return self._prove(goal, assumptions, verbose)[0]\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/inference/prover9.py\", line 327, in _prove\n    stdout, returncode = self._call_prover9(\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/inference/prover9.py\", line 370, in _call_prover9\n    raise Prover9FatalException(returncode, errormsg)\nnltk.inference.prover9.Prover9FatalException: (FATAL)\n%%ERROR: The following symbols are used with multiple arities: LegendofZelda/1, LegendofZelda/0.\n\n\nFatal error:  The following symbols are used with multiple arities: LegendofZelda/1, LegendofZelda/0\n"}
{"timestamp": "2025-09-16T17:52:18.569066", "premises": ["all x. (LegendOfZelda(x) -> CreatedBy(JapaneseGameCompany, x))", "all x. (Top10Game(x) -> MadeBy(JapaneseGameCompany, x))", "all x. (SellsMoreThanOneMillionCopies(x) -> SelectedTop10(x))", "SellsMoreThanOneMillionCopies(LegendOfZelda)"], "conclusion": "-Top10Game(LegendOfZelda)", "error_type": "<class 'nltk.inference.prover9.Prover9FatalException'>", "error_message": "(FATAL)\n%%ERROR: The following symbols are used with multiple arities: LegendOfZelda/1, LegendOfZelda/0.\n\n\nFatal error:  The following symbols are used with multiple arities: LegendOfZelda/1, LegendOfZelda/0", "stack_trace": "Traceback (most recent call last):\n  File \"/data/gpfs/projects/punim0478/bansaab/linc2/eval/tasks/owafoltask.py\", line 577, in _process_neurosymbolic\n    parsed = json.loads(gen)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/json/__init__.py\", line 346, in loads\n    return _default_decoder.decode(s)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/json/decoder.py\", line 337, in decode\n    obj, end = self.raw_decode(s, idx=_w(s, 0).end())\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/json/decoder.py\", line 355, in raw_decode\n    raise JSONDecodeError(\"Expecting value\", s, err.value) from None\njson.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"/data/gpfs/projects/punim0478/bansaab/linc2/eval/tasks/utils.py\", line 219, in evaluate\n    truth_value = prover.prove(c, p_list)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/inference/api.py\", line 37, in prove\n    return self._prove(goal, assumptions, verbose)[0]\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/inference/prover9.py\", line 327, in _prove\n    stdout, returncode = self._call_prover9(\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/inference/prover9.py\", line 370, in _call_prover9\n    raise Prover9FatalException(returncode, errormsg)\nnltk.inference.prover9.Prover9FatalException: (FATAL)\n%%ERROR: The following symbols are used with multiple arities: LegendOfZelda/1, LegendOfZelda/0.\n\n\nFatal error:  The following symbols are used with multiple arities: LegendOfZelda/1, LegendOfZelda/0\n"}
{"timestamp": "2025-09-16T17:52:18.570112", "premises": ["all x. (JapaneseGameCompany(x) -> LegendOfZelda(x))", "all x. (Top10List(x) -> JapaneseGameCompany(x))", "all x. (SellsMoreThan1MillionCopies(x) -> Top10List(x))", "SellsMoreThan1MillionCopies(LegendOfZelda)"], "conclusion": "-Top10List(LegendOfZelda)", "error_type": "<class 'nltk.inference.prover9.Prover9FatalException'>", "error_message": "(FATAL)\n%%ERROR: The following symbols are used with multiple arities: LegendOfZelda/1, LegendOfZelda/0.\n\n\nFatal error:  The following symbols are used with multiple arities: LegendOfZelda/1, LegendOfZelda/0", "stack_trace": "Traceback (most recent call last):\n  File \"/data/gpfs/projects/punim0478/bansaab/linc2/eval/tasks/owafoltask.py\", line 577, in _process_neurosymbolic\n    parsed = json.loads(gen)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/json/__init__.py\", line 346, in loads\n    return _default_decoder.decode(s)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/json/decoder.py\", line 337, in decode\n    obj, end = self.raw_decode(s, idx=_w(s, 0).end())\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/json/decoder.py\", line 355, in raw_decode\n    raise JSONDecodeError(\"Expecting value\", s, err.value) from None\njson.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"/data/gpfs/projects/punim0478/bansaab/linc2/eval/tasks/utils.py\", line 219, in evaluate\n    truth_value = prover.prove(c, p_list)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/inference/api.py\", line 37, in prove\n    return self._prove(goal, assumptions, verbose)[0]\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/inference/prover9.py\", line 327, in _prove\n    stdout, returncode = self._call_prover9(\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/inference/prover9.py\", line 370, in _call_prover9\n    raise Prover9FatalException(returncode, errormsg)\nnltk.inference.prover9.Prover9FatalException: (FATAL)\n%%ERROR: The following symbols are used with multiple arities: LegendOfZelda/1, LegendOfZelda/0.\n\n\nFatal error:  The following symbols are used with multiple arities: LegendOfZelda/1, LegendOfZelda/0\n"}
{"timestamp": "2025-09-16T17:52:18.569605", "premises": ["(Top10 -> all x. (Japanese(x) & Created(x, LegendOfZelda)) & all x. (Top10(x) -> Japanese(x)) & all x. (SellsMoreThanOneMillionCopies(x) -> Top10(x)) & SellsMoreThanOneMillionCopies(LegendOfZelda) -> LegendOfZelda)"], "conclusion": "(Top10 <- Japanese <- Created(Japanese, LegendOfZelda) & SellsMoreThanOneMillionCopies(LegendOfZelda) -> LegendOfZelda)", "error_type": "<class 'nltk.sem.logic.LogicalExpressionException'>", "error_message": "Unexpected token: '<'.  Expected token ')'.\n(Top10 <- Japanese <- Created(Japanese, LegendOfZelda) & SellsMoreThanOneMillionCopies(LegendOfZelda) -> LegendOfZelda)\n       ^", "stack_trace": "Traceback (most recent call last):\n  File \"/data/gpfs/projects/punim0478/bansaab/linc2/eval/tasks/owafoltask.py\", line 577, in _process_neurosymbolic\n    parsed = json.loads(gen)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/json/__init__.py\", line 346, in loads\n    return _default_decoder.decode(s)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/json/decoder.py\", line 337, in decode\n    obj, end = self.raw_decode(s, idx=_w(s, 0).end())\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/json/decoder.py\", line 355, in raw_decode\n    raise JSONDecodeError(\"Expecting value\", s, err.value) from None\njson.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/sem/logic.py\", line 154, in parse\n    result = self.process_next_expression(None)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/sem/logic.py\", line 290, in process_next_expression\n    accum = self.handle(tok, context)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/sem/logic.py\", line 315, in handle\n    return self.handle_open(tok, context)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/sem/logic.py\", line 450, in handle_open\n    self.assertNextToken(Tokens.CLOSE)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/sem/logic.py\", line 573, in assertNextToken\n    raise UnexpectedTokenException(self._currentIndex, tok, expected)\nnltk.sem.logic.UnexpectedTokenException: Unexpected token: '<'.  Expected token ')'.\n\nThe above exception was the direct cause of the following exception:\n\nTraceback (most recent call last):\n  File \"/data/gpfs/projects/punim0478/bansaab/linc2/eval/tasks/utils.py\", line 215, in evaluate\n    c = read_expr(conclusion)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/sem/logic.py\", line 957, in fromstring\n    return cls._logic_parser.parse(s, signature)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/sem/logic.py\", line 159, in parse\n    raise LogicalExpressionException(None, msg) from e\nnltk.sem.logic.LogicalExpressionException: Unexpected token: '<'.  Expected token ')'.\n(Top10 <- Japanese <- Created(Japanese, LegendOfZelda) & SellsMoreThanOneMillionCopies(LegendOfZelda) -> LegendOfZelda)\n       ^\n"}
{"timestamp": "2025-09-16T17:52:18.569780", "premises": ["all x. (Game(x) -> (CreatedBy(x, Japanese) & InTop10(x)) | (SellsMoreThanOneMillionCopies(x) & InTop10(x)))", "all x. (Top10(x) -> MadeByJapanese(x))", "all x. (SellsMoreThanOneMillionCopies(x) -> Top10(x))", "LegendOfZelda(x) -> SellsMoreThanOneMillionCopies(x)", "LegendOfZelda(x) -> InTop10(x)", "LegendOfZelda(x) -> MadeByJapanese(x)", "LegendOfZelda(x) -> Game(x)", "LegendOfZelda(x) -> NotInTop10(x)", "LegendOfZelda(x) -> SellsMoreThanOneMillionCopies(x)", "LegendOfZelda(x) -> NotMadeByJapanese(x)", "LegendOfZelda(x) -> NotGame(x)", "LegendOfZelda(x) -> MadeByJapanese(x) & InTop10(x) & SellsMoreThanOneMillionCopies(x)", "LegendOfZelda(x) -> NotInTop10(x)", "LegendOfZelda(x) -> NotMadeByJapanese(x)", "LegendOfZelda(x) -> NotSellsMoreThanOneMillionCopies(x)", "LegendOfZelda(x) -> NotGame(x)", "LegendOfZelda(x) -> MadeByJapanese(x) & InTop10(x) & NotSellsMoreThanOneMillionCopies(x)", "LegendOfZelda(x) -> NotInTop10(x) & NotMadeByJapanese(x)", "LegendOfZelda(x) -> NotSellsMoreThanOneMillionCopies(x)", "LegendOfZelda(x) -> NotGame(x)", "LegendOfZelda(x) -> MadeByJapanese(x) & NotInTop10(x) & NotSellsMoreThanOneMillionCopies(x)", "LegendOfZelda(x) -> NotMadeByJapanese(x) & NotInTop10(x) & NotSellsMoreThanOneMillionCopies(x)", "LegendOfZelda(x) -> NotGame(x) & NotMadeByJapanese(x) & NotInTop10(x)", "LegendOfZelda(x) -> NotMadeByJapanese(x) & NotInTop10(x) & NotSellsMoreThanOneMillionCopies(x)", "LegendOfZelda(x) -> NotGame(x) & NotMadeByJapanese(x) & NotInTop10(x) & NotSellsMoreThanOneMillionCopies(x)", "LegendOfZelda(x) -> NotMadeByJapanese(x) & NotInTop10(x) & NotSellsMoreThanOneMillionCopies(x) & NotGame(x)", "LegendOfZelda(x) -> NotMadeByJapanese(x) & NotInTop10(x) & NotSellsMoreThanOneMillionCopies(x) & NotGame(x)", "LegendOfZelda(x) -> NotMadeByJapanese(x) & NotInTop10(x) & NotSellsMoreThanOneMillionCopies(x) & NotGame(x)", "LegendOfZelda(x) -> NotMadeByJapanese(x) & NotInTop10(x) & NotSellsMoreThanOneMillionCopies(x) & NotGame(x)", "LegendOfZelda(x) -> NotMadeByJapanese(x) & NotInTop10(x) & NotSellsMoreThanOneMillionCopies(x) & NotGame(x)", "LegendOfZelda(x) -> NotMadeByJapanese(x) & NotInTop10(x) & NotSellsMoreThanOneMillionCopies(x) & NotGame(x)", "LegendOfZelda(x) -> NotMadeByJapanese(x) & NotInTop10(x) & NotSellsMoreThanOneMillionCopies(x) & NotGame(x)", "LegendOfZelda(x) -> NotMadeByJapanese(x) & NotInTop10(x) & NotSellsMoreThanOneMillionCopies(x) & NotGame(x)", "LegendOfZelda(x) -> NotMadeByJapanese(x) & NotInTop10(x) & NotSellsMoreThanOneMillionCopies(x) & NotGame(x)", "LegendOfZelda(x) -> NotMadeByJapanese(x) & NotInTop10(x) & NotSellsMoreThanOneMillionCopies(x) & NotGame(x)", "LegendOfZelda(x) -> NotMadeByJapanese(x) & NotInTop10(x) & NotSellsMoreThanOneMillionCopies(x) & NotGame(x)", "LegendOfZelda(x) -> NotMadeByJapanese(x) & NotInTop10(x) & NotSellsMoreThanOneMillionCopies(x) & NotGame(x)", "LegendOfZelda(x) -> NotMadeByJapanese(x) & NotInTop10(x) & NotSellsMoreThanOneMillionCopies(x) & NotGame(x)", "LegendOfZelda(x) -> NotMadeByJapanese(x) & NotInTop10(x) & NotSellsMoreThanOneMillionCopies(x) & NotGame(x)", "LegendOfZelda(x) -> NotMadeByJapanese(x) & NotInTop10(x) & NotSellsMoreThanOneMillionCopies(x) & NotGame(x)", "LegendOfZelda(x) -> NotMadeByJapanese(x) & NotInTop10(x) & NotSellsMoreThanOneMillionCopies(x) & NotGame(x)", "LegendOfZelda(x) -> NotMadeByJapanese(x) & NotInTop10(x) & NotSellsMoreThanOneMillionCopies(x) & NotGame(x)", "LegendOfZelda(x) -> NotMadeByJapanese(x) & NotInTop10(x) & NotSellsMoreThanOneMillionCopies(x) & NotGame(x)", "LegendOfZelda(x) -> NotMadeByJapanese(x) & NotInTop10(x) & NotSellsMoreThanOneMillionCopies(x) & NotGame(x)", "LegendOfZelda(x) -> NotMadeByJapanese(x) & NotInTop10(x) & NotSellsMoreThanOneMillionCopies(x) & NotGame(x)", "LegendOfZelda(x) -> NotMadeByJapanese(x) & NotInTop10(x) & NotSellsMoreThanOneMillionCopies(x) & NotGame(x)", "LegendOfZelda(x) -> NotMadeByJapanese(x) & NotInTop10(x) & NotSellsMoreThanOneMillionCopies(x) & NotGame(x)", "LegendOfZelda(x) -> NotMadeByJapanese(x) & NotInTop10(x) & NotSellsMoreThanOneMillionCopies(x) & NotGame(x)", "LegendOfZelda(x) -> NotMadeByJapanese(x) & NotInTop10(x) & NotSellsMoreThanOneMillionCopies(x) & NotGame(x)", "LegendOfZelda(x) -> NotMadeByJapanese(x) & NotInTop10(x) & NotSellsMoreThanOneMillionCopies(x) & NotGame(x)", "LegendOfZelda(x) -> NotMadeByJapanese(x) & NotInTop10(x) & NotSellsMoreThanOneMillionCopies(x) & NotGame(x)", "LegendOfZelda(x) -> NotMadeByJapanese(x) & NotInTop10(x) & NotSellsMoreThanOneMillionCopies(x) & NotGame(x)", "LegendOfZelda(x) -> NotMadeByJapanese(x) & NotInTop10(x) & NotSellsMoreThanOneMillionCopies(x) & NotGame(x)", "LegendOfZelda(x) -> NotMadeByJapanese(x) & NotInTop10(x) & NotSellsMoreThanOneMillionCopies(x) & NotGame(x)", "LegendOfZelda(x) -> NotMadeByJapanese(x) & NotInTop10(x) & NotSellsMoreThanOneMillionCopies(x) & NotGame(x)", "LegendOfZelda(x) -> NotMadeByJapanese(x) & NotInTop10(x) & NotSellsMoreThanOneMillionCopies(x) & NotGame(x)", "LegendOfZelda(x) -> NotMadeByJapanese(x) & NotInTop10(x) & NotSellsMoreThanOneMillionCopies(x) & NotGame(x)", "LegendOfZelda(x) -> NotMadeByJapanese(x) & NotInTop10(x) & NotSellsMoreThanOneMillionCopies(x) & NotGame(x)", "LegendOfZelda(x) -> NotMadeByJapanese(x) & NotInTop10(x) & NotSellsMoreThanOneMillionCopies(x) & NotGame(x)", "LegendOfZelda(x) -> NotMadeByJapanese(x) & NotInTop10(x) & NotSellsMoreThanOneMillionCopies(x) & NotGame(x)", "LegendOfZelda(x) -> NotMadeByJapanese(x) & NotInTop10(x) & NotSellsMoreThanOneMillionCopies(x) & NotGame(x)", "LegendOfZelda(x) -> NotMadeByJapanese(x) & NotInTop10(x) & NotSellsMoreThanOneMillionCopies(x) & NotGame(x)", "LegendOfZelda(x) -> NotMadeByJapanese(x) & NotInTop10(x) & NotSellsMoreThanOneMillionCopies(x) & NotGame(x)", "LegendOfZelda(x) -> NotMadeByJapanese(x) & NotInTop10(x) & NotSellsMoreThan1MillionCopies(x) & NotGame(x)", "LegendOfZelda(x) -> NotMadeByJapanese(x) & NotInTop10(x) & NotSellsMoreThan1MillionCopies(x) & NotGame(x)", "LegendOfZelda(x) -> NotMadeByJapanese(x) & NotInTop10(x) & NotSellsMoreThan1MillionCopies(x) & NotGame(x)", "LegendOfZelda(x) -> NotMadeByJapanese(x) & NotInTop10(x) & NotSellsMoreThan1MillionCopies(x) & NotGame(x)", "LegendOfZelda(x) -> NotMadeByJapanese(x) & NotInTop10(x) & NotSellsMoreThan1MillionCopies(x) & NotGame(x)", "LegendOfZelda(x) -> NotMadeByJapanese(x) & NotInTop10(x) & NotSellsMoreThan1MillionCopies(x) & NotGame(x)", "LegendOfZelda(x) -> NotMadeByJapanese(x) & NotInTop10(x) & NotSellsMoreThan1MillionCopies(x) & NotGame(x)", "LegendOfZelda(x) -> NotMadeByJapanese(x) & NotInTop10(x) & NotSellsMoreThan1MillionCopies(x) & NotGame(x)", "LegendOfZelda(x) -> NotMadeByJapanese(x) & NotInTop10(x) & NotSellsMoreThan1MillionCopies(x) & NotGame(x)", "LegendOfZelda(x) -> NotMadeByJapanese(x) & NotInTop10(x) & NotSellsMoreThan1MillionCopies(x) & NotGame(x)", "LegendOfZelda(x) -> NotMadeByJapanese(x) & NotInTop10(x) & NotSellsMoreThan1MillionCopies(x) & NotGame(x)", "LegendOfZelda(x) -> NotMadeByJapanese(x) & NotInTop10(x) & NotSellsMoreThan1MillionCopies(x) & NotGame(x)", "LegendOfZelda(x) -> NotMadeByJapanese(x) & NotInTop10(x) & NotSellsMoreThan1MillionCopies(x) & NotGame(x)", "LegendOfZelda(x) -> NotMadeByJapanese(x) & NotInTop10(x) & NotSellsMoreThan1MillionCopies(x) & NotGame(x)", "LegendOfZelda(x) -> NotMadeByJapanese(x) & NotInTop10(x) & NotSellsMoreThan1MillionCopies(x) & NotGame(x)", "LegendOfZelda(x) -> NotMadeByJapanese(x) & NotInTop10(x) & NotSellsMoreThan1MillionCopies(x) & NotGame(x)", "LegendOfZelda(x) -> NotMadeByJapanese(x) & NotInTop10(x) & NotSellsMoreThan1MillionCopies(x) & NotGame(x)", "LegendOfZelda(x) -> NotMadeByJapanese(x) & NotInTop10(x) & NotSellsMoreThan1MillionCopies(x) & NotGame(x)", "LegendOfZelda(x) -> NotMadeByJapanese(x) -> NotSellsMoreThan1MillionCopies(x) & NotGame(x)", "LegendOfZelda(x) -> NotMadeByJapanese(x) -> NotSellsMoreThan1MillionCopies(x) & NotGame(x)", "LegendOfZelda(x) -> NotMadeByJapanese(x) -> NotSellsMoreThan1MillionCopies(x) & NotGame(x)", "LegendOfZelda(x) -> NotMadeByJapanese(x) -> NotSellsMoreThan1MillionCopies(x) & NotGame(x)", "LegendOfZelda(x) -> NotMadeByJapanese(x) -> NotSellsMoreThan1MillionCopies(x) & NotGame(x)", "LegendOfZelda(x) -> NotMadeByJapanese(x) -> NotSellsMoreThan1MillionCopies(x) & NotGame(x)", "LegendOfZelda(x) -> NotMadeByJapanese(x) -> NotSellsMoreThan1MillionCopies(x) & NotGame(x)", "LegendOfZelda(x) -> NotMadeByJapanese(x) -> NotSellsMoreThan1MillionCopies(x) & NotGame(x)", "LegendOfZelda(x) -> NotMadeByJapanese(x) -> NotSellsMoreThan1MillionCopies(x) & NotGame(x)", "LegendOfZelda(x) -> NotMadeByJapanese(x) -> NotSellsMoreThan1MillionCopies(x) & NotGame(x)", "LegendOfZelda(x) -> NotMadeByJapanese(x) -> NotSellsMoreThan1MillionCopies(x) & NotGame(x)", "LegendOfZelda(x) -> NotMadeByJapanese(x) -> NotSellsMoreThan1MillionCopies(x) & NotGame(x)", "LegendOfZelda(x) -> NotMadeByJapanese(x) -> NotSellsMoreThan1MillionCopies(x) & NotGame(x)", "LegendOfZelda(x) -> NotMadeByJapanese(x) -> NotSellsMoreThan1MillionCopies(x) & NotGame(x)", "LegendOfZelda(x) -> NotMadeByJapanese(x) -> NotSellsMoreThan1MillionCopies(x) & NotGame(x)", "LegendOfZelda(x) -> NotMadeByJapanese(x) -> NotSellsMoreThan1MillionCopies(x) & NotGame(x)", "LegendOfZelda(x) -> NotMadeByJapanese(x) -> NotSellsMoreThan1MillionCopies(x) & NotGame(x)", "LegendOfZelda(x) -> NotMadeByJapanese(x) -> NotSellsMoreThan1MillionCopies(x) & NotGame(x)", "LegendOfZelda(x) -> NotMadeByJapanese(x) -> NotSellsMoreThan1MillionCopies(x) & NotGame(x)", "LegendOfZelda(x) -> NotMadeByJapanese(x) -> NotSellsMoreThan1MillionCopies(x) & NotGame(x)", "LegendOfZelda(x) -> NotMadeByJapanese(x) -> NotSellsMoreThan1MillionCopies(x) & NotGame(x)", "LegendOfZelda(x) -> NotMadeByJapanese(x) -> NotSellsMoreThan1MillionCopies(x) & NotGame(x)", "LegendOfZelda(x) -> NotMadeByJapanese(x) -> NotSellsMoreThan1MillionCopies(x) & NotGame(x)", "LegendOfZelda(x) -> NotMadeByJapanese(x) -> NotSellsMoreThan1MillionCopies(x) & NotGame(x)", "LegendOfZelda(x) -> NotMadeByJapanese(x) -> NotSellsMoreThan1MillionCopies(x) & NotGame(x)", "LegendOfZelda(x) -> NotMadeByJapanese(x) -> NotSellsMoreThan1MillionCopies(x) & NotGame(x)", "LegendOfZelda(x) -> NotMadeByJapanese(x) -> NotSellsMoreThan1MillionCopies(x) & NotGame(x)", "LegendOfZelda(x) -> NotMadeByJapanese(x) -> NotSellsMoreThan1MillionCopies(x) & NotGame(x)", "LegendOfZelda(x) -> NotMadeByJapanese(x) -> NotSellsMoreThan1MillionCopies(x) & NotGame(x)", "LegendOfZelda(x) -> NotMadeByJapanese(x) -> NotSellsMoreThan1MillionCopies(x) & NotGame(x)", "LegendOfZelda(x) -> NotMadeByJapanese(x) -> NotSellsMoreThan1MillionCopies(x) & NotGame(x)", "LegendOfZelda(x) -> NotMadeByJapanese(x) -> NotSellsMoreThan1MillionCopies(x) & NotGame(x)", "LegendOfZelda(x) -> NotMadeByJapanese(x) -> NotSellsMoreThan1MillionCopies(x) & NotGame(x)", "LegendOfZelda(x) -> NotMadeByJapanese(x) -> NotSellsMoreThan1MillionCopies(x) & NotGame(x)", "LegendOfZelda(x) -> NotMadeByJapanese(x) -> NotSellsMoreThan1MillionCopies(x) & NotGame(x)", "LegendOfZelda(x) -> NotMadeByJapanese(x) -> NotSellsMoreThan1MillionCopies(x) & NotGame(x)", "LegendOfZelda(x) -> NotMadeByJapanese(x) -> NotSellsMoreThan1MillionCopies(x) & NotGame(x)", "LegendOfZelda(x) -> NotMadeByJapanese(x) -> NotSellsMoreThan1MillionCopies(x) & NotGame(x)", "LegendOfZelda(x) -> NotMadeByJapanese(x) -> NotSellsMoreThan1MillionCopies(x) & NotGame(x)", "LegendOfZelda(x) -> NotMadeByJapanese(x) -> NotSellsMoreThan1MillionCopies(x) & NotGame(x)", "LegendOfZelda(x) -> NotMadeByJapanese(x) -> NotSellsMoreThan1MillionCopies(x) & NotGame(x)", "LegendOfZelda(x) -> NotMadeByJapanese(x) -> NotSellsMoreThan1MillionCopies(x) & NotGame(x)", "LegendOfZelda(x) -> NotMadeByJapanese(x) -> NotSellsMoreThan1MillionCopies(x) & NotGame(x)", "LegendOfZelda(x) -> NotMadeByJapanese(x) -> NotSellsMoreThan1MillionCopies(x) & NotGame(x)", "LegendOfZelda(x) -> NotMadeByJapanese(x) -> NotSellsMoreThan1MillionCopies(x) & NotGame(x)", "LegendOfZelda(x) -> NotMadeByJapanese(x) -> NotSellsMoreThan1MillionCopies(x) & NotGame(x)", "LegendOfZelda(x) -> NotMadeByJapanese(x) -> NotSellsMoreThan1MillionCopies(x) & NotGame(x)", "LegendOfZelda(x) -> NotMadeByJapanese(x) -> NotSellsMoreThan1MillionCopies(x) & NotGame(x)", "LegendOfZelda(x) -> NotMadeByJapanese(x) -> NotSellsMoreThan1MillionCopies(x) & NotGame(x)", "LegendOfZelda(x) -> NotMadeByJapanese(x) -> NotSellsMoreThan1MillionCopies(x) & NotGame(x)", "LegendOfZelda(x) -> NotMadeByJapanese(x) -> NotSellsMoreThan1MillionCopies(x) & NotGame(x)", "LegendOfZelda(x) -> NotMadeByJapanese(x) -> NotSellsMoreThan1MillionCopies(x) & NotGame(x)", "LegendOfZelda(x) -> NotMadeByJapanese(x) -> NotSellsMoreThan1MillionCopies(x) & NotGame(x)", "LegendOfZelda(x) -> NotMadeByJapanese(x) -> NotSellsMoreThan1MillionCopies(x) & NotGame(x)", "LegendOfZelda(x) -> NotMadeByJapanese(x) -> NotSellsMoreThan1MillionCopies(x) & NotGame(x)", "LegendOfZelda(x) -> NotMadeByJapanese(x) -> NotSellsMoreThan1MillionCopies(x) & NotGame(x)", "LegendOfZelda(x) -> NotMadeByJapanese(x) -> NotSellsMoreThan1MillionCopies(x) & NotGame(x)", "LegendOfZelda(x) -> NotMadeByJapanese(x) -> NotSellsMoreThan1MillionCopies(x) & NotGame(x)", "LegendOfZelda(x) -> NotMadeByJapanese(x) -> NotSellsMoreThan1MillionCopies(x) & NotGame(x)", "LegendOfZelda(x) -> NotMadeByJapanese(x) -> NotSellsMoreThan1MillionCopies(x) & NotGame(x)", "LegendOfZelda(x) -> NotMadeByJapanese(x) -> NotSellsMoreThan1MillionCopies(x) & NotGame(x)", "LegendOfZelda(x) -> NotMadeByJapanese(x) -> NotSellsMoreThan1MillionCopies(x) & NotGame(x)", "LegendOfZelda(x) -> NotMadeByJapanese(x) -> NotSellsMoreThan1MillionCopies(x) & NotGame(x)", "LegendOfZelda(x) -> NotMadeByJapanese(x) -> NotSellsMoreThan1MillionCopies(x) & NotGame(x)", "LegendOfZelda(x) -> NotMadeByJapanese(x) -> NotSellsMoreThan1MillionCopies(x) & NotGame(x)", "LegendOfZelda(x) -> NotMadeByJapanese(x) -> NotSellsMoreThan1MillionCopies(x) & NotGame(x)", "LegendOfZelda(x) -> NotMadeByJapanese(x) -> NotSellsMoreThan1MillionCopies(x) & NotGame(x)", "LegendOfZelda(x) -> NotMadeByJapanese(x) -> NotSellsMoreThan1MillionCopies(x) & NotGame(x)", "LegendOfZelda(x) -> NotMadeByJapanese(x) -> NotSellsMoreThan1MillionCopies(x) & NotGame(x)", "LegendOfZelda(x) -> NotMadeByJapanese(x) -> NotSellsMoreThan1MillionCopies(x) & NotGame(x)", "LegendOfZelda(x) -> NotMadeByJapanese(x) -> NotSellsMoreThan1MillionCopies(x) & NotGame(x)", "LegendOfZelda(x) -> NotMadeByJapanese(x) -> NotSellsMoreThan1MillionCopies(x) & NotGame(x)", "LegendOfZelda(x) -> NotMadeByJapanese(x) -> NotSellsMoreThan1MillionCopies(x) & NotGame(x)", "LegendOfZelda(x) -> NotMadeByJapanese(x) -> NotSellsMoreThan1MillionCopies(x) & NotGame(x)", "LegendOfZelda(x) -> NotMadeByJapanese(x) -> NotSellsMoreThan1MillionCopies(x) & NotGame(x)", "LegendOfZelda(x) -> NotMadeByJapanese(x) -> NotSellsMoreThan1MillionCopies(x) & NotGame(x)", "LegendOfZelda(x) -> NotMadeByJapanese(x) -> NotSellsMoreThan1MillionCopies(x) & NotGame(x)", "LegendOfZelda(x) -> NotMadeByJapanese(x) -> NotSellsMoreThan1MillionCopies(x) & NotGame(x)", "LegendOfZelda(x) -> NotMadeByJapanese(x) -> NotSellsMoreThan1MillionCopies(x) & NotGame(x)", "LegendOfZelda(x) -> NotMadeByJapanese(x) -> NotSellsMoreThan1MillionCopies(x) & NotGame(x)", "LegendOfZelda(x) -> NotMadeByJapanese(x) -> NotSellsMoreThan1MillionCopies(x) & NotGame(x)", "LegendOfZelda(x) -> NotMadeByJapanese(x) -> NotSellsMoreThan1MillionCopies(x) & NotGame(x)", "LegendOfZelda(x) -> NotMadeByJapanese(x) -> NotSellsMoreThan1MillionCopies(x) & NotGame(x)", "LegendOfZelda(x) -> NotMadeByJapanese(x) -> NotSellsMoreThan1MillionCopies(x) & NotGame(x)", "LegendOfZelda(x) -> NotMadeByJapanese(x) -> NotSellsMoreThan1MillionCopies(x) & NotGame(x)", "LegendOfZelda(x) -> NotMadeByJapanese(x) -> NotSellsMoreThan1MillionCopies(x) & NotGame(x)", "LegendOfZelda(x) -> NotMadeByJapanese(x) -> NotSellsMoreThan1MillionCopies(x) & NotGame(x)", "LegendOfZelda(x) -> NotMadeByJapanese(x) -> NotSellsMoreThan1MillionCopies(x) & NotGame(x)", "LegendOfZelda(x) -> NotMadeByJapanese(x) -> NotSellsMoreThan1MillionCopies(x) & NotGame(x)", "LegendOfZelda(x) -> NotMadeByJapanese(x) -> NotSellsMoreThan1MillionCopies(x) & NotGame(x)", "LegendOfZelda(x) -> NotMadeByJapanese(x) -> NotSellsMoreThan1MillionCopies(x) & NotGame(x)", "LegendOfZelda(x) -> NotMadeByJapanese(x) -> NotSellsMoreThan1MillionCopies(x) & NotGame(x)", "LegendOfZelda(x) -> NotMadeByJapanese(x) -> NotSellsMoreThan1MillionCopies(x) & NotGame(x)", "LegendOfZelda(x) -> NotMadeByJapanese(x) -> NotSellsMoreThan1MillionCopies(x) & NotGame(x)", "LegendOfZelda(x) -> NotMadeByJapanese(x) -> NotSellsMoreThan1MillionCopies(x) & NotGame(x)", "LegendOfZelda(x) -> NotMadeByJapanese(x) -> NotSellsMoreThan1MillionCopies(x) & NotGame(x)", "LegendOfZelda(x) -> NotMadeByJapanese(x) -> NotSellsMoreThan1MillionCopies(x) & NotGame(x)", "LegendOfZelda(x) -> NotMadeByJapanese(x) -> NotSellsMoreThan1MillionCopies(x) & NotGame(x)", "LegendOfZelda(x) -> NotMadeByJapanese(x) -> NotSellsMoreThan1MillionCopies(x) & NotGame(x)", "LegendOfZelda(x) -> NotMadeByJapanese(x) -> NotSellsMoreThan1MillionCopies(x) & NotGame(x)", "LegendOfZelda(x) -> NotMadeByJapanese(x) -> NotSellsMoreThan1MillionCopies(x) & NotGame(x)", "LegendOfZelda(x) -> NotMadeByJapanese(x) -> NotSellsMoreThan1MillionCopies(x) & NotGame(x)", "LegendOfZelda(x) -> NotMadeByJapanese(x) -> NotSellsMoreThan1MillionCopies(x) & NotGame(x)", "LegendOfZelda(x) -> NotMadeByJapanese(x) -> NotSellsMoreThan1MillionCopies(x) & NotGame(x)", "LegendOfZelda(x) -> NotMadeByJapanese(x) -> NotSellsMoreThan1MillionCopies(x) & NotGame(x)"], "conclusion": "LegendOfZelda(x) -> NotMadeByJapanese", "error_type": "<class 'nltk.sem.logic.LogicalExpressionException'>", "error_message": "Unexpected token: '-'.\nLegendOfZelda(x) -> MadeByJapanese(x) & InTop10(x) & SellsMoreThanOneMillionCopies(x)\n               ^", "stack_trace": "Traceback (most recent call last):\n  File \"/data/gpfs/projects/punim0478/bansaab/linc2/eval/tasks/owafoltask.py\", line 577, in _process_neurosymbolic\n    parsed = json.loads(gen)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/json/__init__.py\", line 346, in loads\n    return _default_decoder.decode(s)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/json/decoder.py\", line 337, in decode\n    obj, end = self.raw_decode(s, idx=_w(s, 0).end())\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/json/decoder.py\", line 355, in raw_decode\n    raise JSONDecodeError(\"Expecting value\", s, err.value) from None\njson.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/sem/logic.py\", line 156, in parse\n    raise UnexpectedTokenException(self._currentIndex + 1, self.token(0))\nnltk.sem.logic.UnexpectedTokenException: Unexpected token: '-'.\n\nThe above exception was the direct cause of the following exception:\n\nTraceback (most recent call last):\n  File \"/data/gpfs/projects/punim0478/bansaab/linc2/eval/tasks/utils.py\", line 216, in evaluate\n    p_list = [read_expr(p) for p in premises]\n  File \"/data/gpfs/projects/punim0478/bansaab/linc2/eval/tasks/utils.py\", line 216, in <listcomp>\n    p_list = [read_expr(p) for p in premises]\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/sem/logic.py\", line 957, in fromstring\n    return cls._logic_parser.parse(s, signature)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/sem/logic.py\", line 159, in parse\n    raise LogicalExpressionException(None, msg) from e\nnltk.sem.logic.LogicalExpressionException: Unexpected token: '-'.\nLegendOfZelda(x) -> MadeByJapanese(x) & InTop10(x) & SellsMoreThanOneMillionCopies(x)\n               ^\n"}
{"timestamp": "2025-09-16T17:52:18.574097", "premises": ["all x. (Created(JapaneseGameCompany, x) -> LegendOfZelda(x))", "all x. (Top10(x) -> MadeBy(JapaneseGameCompany, x))", "all x. (SellsMoreThanOneMillionCopies(x) -> SelectedIntoTop10(x))", "SellsMoreThanOneMillionCopies(LegendOfZelda)"], "conclusion": "-Top10(LegendOfZelda)", "error_type": "<class 'nltk.inference.prover9.Prover9FatalException'>", "error_message": "(FATAL)\n%%ERROR: The following symbols are used with multiple arities: LegendOfZelda/1, LegendOfZelda/0.\n\n\nFatal error:  The following symbols are used with multiple arities: LegendOfZelda/1, LegendOfZelda/0", "stack_trace": "Traceback (most recent call last):\n  File \"/data/gpfs/projects/punim0478/bansaab/linc2/eval/tasks/owafoltask.py\", line 577, in _process_neurosymbolic\n    parsed = json.loads(gen)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/json/__init__.py\", line 346, in loads\n    return _default_decoder.decode(s)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/json/decoder.py\", line 337, in decode\n    obj, end = self.raw_decode(s, idx=_w(s, 0).end())\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/json/decoder.py\", line 355, in raw_decode\n    raise JSONDecodeError(\"Expecting value\", s, err.value) from None\njson.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"/data/gpfs/projects/punim0478/bansaab/linc2/eval/tasks/utils.py\", line 219, in evaluate\n    truth_value = prover.prove(c, p_list)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/inference/api.py\", line 37, in prove\n    return self._prove(goal, assumptions, verbose)[0]\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/inference/prover9.py\", line 327, in _prove\n    stdout, returncode = self._call_prover9(\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/inference/prover9.py\", line 370, in _call_prover9\n    raise Prover9FatalException(returncode, errormsg)\nnltk.inference.prover9.Prover9FatalException: (FATAL)\n%%ERROR: The following symbols are used with multiple arities: LegendOfZelda/1, LegendOfZelda/0.\n\n\nFatal error:  The following symbols are used with multiple arities: LegendOfZelda/1, LegendOfZelda/0\n"}
{"timestamp": "2025-09-16T17:56:24.742556", "premises": ["all x. (Rabbit(x) -> Cute(x))", "all x. (Turtle(x) -> exists(x))", "all x. (Animal(x) -> Rabbit(x) | Squirrel(x))", "all x. (Skittish(x) -> NotStill(x))", "all x. (Squirrel(x) -> Skittish(x))"], "conclusion": "not Skittish(Rock)", "error_type": "<class 'nltk.sem.logic.LogicalExpressionException'>", "error_message": "'(' is an illegal variable name.  Constants may not be quantified.\nall x. (Turtle(x) -> exists(x))\n                           ^", "stack_trace": "Traceback (most recent call last):\n  File \"/data/gpfs/projects/punim0478/bansaab/linc2/eval/tasks/owafoltask.py\", line 577, in _process_neurosymbolic\n    parsed = json.loads(gen)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/json/__init__.py\", line 346, in loads\n    return _default_decoder.decode(s)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/json/decoder.py\", line 337, in decode\n    obj, end = self.raw_decode(s, idx=_w(s, 0).end())\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/json/decoder.py\", line 355, in raw_decode\n    raise JSONDecodeError(\"Expecting value\", s, err.value) from None\njson.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/sem/logic.py\", line 154, in parse\n    result = self.process_next_expression(None)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/sem/logic.py\", line 290, in process_next_expression\n    accum = self.handle(tok, context)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/sem/logic.py\", line 312, in handle\n    return self.handle_quant(tok, context)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/sem/logic.py\", line 427, in handle_quant\n    accum = self.process_next_expression(tok)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/sem/logic.py\", line 290, in process_next_expression\n    accum = self.handle(tok, context)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/sem/logic.py\", line 315, in handle\n    return self.handle_open(tok, context)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/sem/logic.py\", line 449, in handle_open\n    accum = self.process_next_expression(None)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/sem/logic.py\", line 297, in process_next_expression\n    return self.attempt_adjuncts(accum, context)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/sem/logic.py\", line 323, in attempt_adjuncts\n    expression = self.attempt_BooleanExpression(expression, context)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/sem/logic.py\", line 485, in attempt_BooleanExpression\n    factory, expression, self.process_next_expression(tok)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/sem/logic.py\", line 290, in process_next_expression\n    accum = self.handle(tok, context)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/sem/logic.py\", line 312, in handle\n    return self.handle_quant(tok, context)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/sem/logic.py\", line 412, in handle_quant\n    vars = [self.get_next_token_variable(\"quantified\")]\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/sem/logic.py\", line 368, in get_next_token_variable\n    raise LogicalExpressionException(\nnltk.sem.logic.LogicalExpressionException: '(' is an illegal variable name.  Constants may not be quantified.\n\nThe above exception was the direct cause of the following exception:\n\nTraceback (most recent call last):\n  File \"/data/gpfs/projects/punim0478/bansaab/linc2/eval/tasks/utils.py\", line 216, in evaluate\n    p_list = [read_expr(p) for p in premises]\n  File \"/data/gpfs/projects/punim0478/bansaab/linc2/eval/tasks/utils.py\", line 216, in <listcomp>\n    p_list = [read_expr(p) for p in premises]\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/sem/logic.py\", line 957, in fromstring\n    return cls._logic_parser.parse(s, signature)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/sem/logic.py\", line 159, in parse\n    raise LogicalExpressionException(None, msg) from e\nnltk.sem.logic.LogicalExpressionException: '(' is an illegal variable name.  Constants may not be quantified.\nall x. (Turtle(x) -> exists(x))\n                           ^\n"}
{"timestamp": "2025-09-16T17:56:24.782494", "premises": ["all x. (Rabbit(x) -> Cute(x))", "exists x. (Turtle(x))", "all x. (Animal(x) -> Rabbit(x) | Squirrel(x))", "all x. (Skittish(x) -> NotStill(x))", "all x. (Squirrel(x) -> Skittish(x))", "Rock is Still"], "conclusion": "Turtle(Rock)", "error_type": "<class 'nltk.sem.logic.LogicalExpressionException'>", "error_message": "Unexpected token: 'is'.\nRock is Still\n     ^", "stack_trace": "Traceback (most recent call last):\n  File \"/data/gpfs/projects/punim0478/bansaab/linc2/eval/tasks/owafoltask.py\", line 577, in _process_neurosymbolic\n    parsed = json.loads(gen)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/json/__init__.py\", line 346, in loads\n    return _default_decoder.decode(s)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/json/decoder.py\", line 337, in decode\n    obj, end = self.raw_decode(s, idx=_w(s, 0).end())\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/json/decoder.py\", line 355, in raw_decode\n    raise JSONDecodeError(\"Expecting value\", s, err.value) from None\njson.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/sem/logic.py\", line 156, in parse\n    raise UnexpectedTokenException(self._currentIndex + 1, self.token(0))\nnltk.sem.logic.UnexpectedTokenException: Unexpected token: 'is'.\n\nThe above exception was the direct cause of the following exception:\n\nTraceback (most recent call last):\n  File \"/data/gpfs/projects/punim0478/bansaab/linc2/eval/tasks/utils.py\", line 216, in evaluate\n    p_list = [read_expr(p) for p in premises]\n  File \"/data/gpfs/projects/punim0478/bansaab/linc2/eval/tasks/utils.py\", line 216, in <listcomp>\n    p_list = [read_expr(p) for p in premises]\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/sem/logic.py\", line 957, in fromstring\n    return cls._logic_parser.parse(s, signature)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/sem/logic.py\", line 159, in parse\n    raise LogicalExpressionException(None, msg) from e\nnltk.sem.logic.LogicalExpressionException: Unexpected token: 'is'.\nRock is Still\n     ^\n"}
{"timestamp": "2025-09-16T17:56:24.758103", "premises": ["all x. (Rabbit(x) -> Cute(x))", "exists x. (Turtle(x))", "all x. (Animal(x) -> (Rabbit(x) | Squirrel(x)))", "all x. (Skittish(x) -> NotStill(x))", "all x. (Squirrel(x) -> Skittish(x))", "Rock(x) -> Still(x)"], "conclusion": "Rabbit(Rock)", "error_type": "<class 'nltk.inference.prover9.Prover9FatalException'>", "error_message": "(FATAL)\n%%ERROR: The following symbols are used with multiple arities: Rock/1, Rock/0.\n\n\nFatal error:  The following symbols are used with multiple arities: Rock/1, Rock/0", "stack_trace": "Traceback (most recent call last):\n  File \"/data/gpfs/projects/punim0478/bansaab/linc2/eval/tasks/owafoltask.py\", line 577, in _process_neurosymbolic\n    parsed = json.loads(gen)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/json/__init__.py\", line 346, in loads\n    return _default_decoder.decode(s)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/json/decoder.py\", line 337, in decode\n    obj, end = self.raw_decode(s, idx=_w(s, 0).end())\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/json/decoder.py\", line 355, in raw_decode\n    raise JSONDecodeError(\"Expecting value\", s, err.value) from None\njson.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"/data/gpfs/projects/punim0478/bansaab/linc2/eval/tasks/utils.py\", line 219, in evaluate\n    truth_value = prover.prove(c, p_list)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/inference/api.py\", line 37, in prove\n    return self._prove(goal, assumptions, verbose)[0]\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/inference/prover9.py\", line 327, in _prove\n    stdout, returncode = self._call_prover9(\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/inference/prover9.py\", line 370, in _call_prover9\n    raise Prover9FatalException(returncode, errormsg)\nnltk.inference.prover9.Prover9FatalException: (FATAL)\n%%ERROR: The following symbols are used with multiple arities: Rock/1, Rock/0.\n\n\nFatal error:  The following symbols are used with multiple arities: Rock/1, Rock/0\n"}
{"timestamp": "2025-09-16T17:56:24.787269", "premises": ["all x. (Animal(x) -> Rabbit(x) | Squirrel(x))", "exists x. (Animal(x))", "all x. (Rabbit(x) -> Cute(x))", "exists x. (Turtle(x))", "all x. (Squirrel(x) -> Skittish(x))", "not exists x. (Still(x))", "exists x. (Skittish(x) & NotStill(x))", "exists x. (Squirrel(x) & NotStill(x))", "all x. (Squirrel(x) -> Rock(x))", "exists x. (Rock(x))", "exists x. (Squirrel(x) & NotStill(x))", "exists x. (Rabbit(x) & NotStill(x))", "exists x. (Turtle(x) & NotStill(x))", "exists x. (Animal(x) & NotStill(x))", "exists x. (Animal(x) & NotStill(x))", "exists x. (Animal(x) & NotStill(x))", "exists x. (Animal(x) & NotStill(x))", "exists x. (Animal(x) & NotStill(x))", "exists x. (Animal(x) & NotStill(x))", "exists x. (Animal(x) & NotStill(x))", "exists x. (Animal(x) & NotStill(x))", "exists x. (Animal(x) & NotStill(x))", "exists x. (Animal(x) & NotStill(x))", "exists x. (Animal(x) & NotStill(x))", "exists x. (Animal(x) & NotStill(x))", "exists x. (Animal(x) & NotStill(x))", "exists x. (Animal(x) & NotStill(x))", "exists x. (Animal(x) & NotStill(x))", "exists x. (Animal(x) & NotStill(x))", "exists x. (Animal(x) & NotStill(x))", "exists x. (Animal(x) & NotStill(x))", "exists x. (Animal(x) & NotStill(x))", "exists x. (Animal(x) & NotStill(x))", "exists x. (Animal(x) & NotStill(x))", "exists x. (Animal(x) & NotStill(x))", "exists x. (Animal(x) & NotStill(x))", "exists x. (Animal(x) & NotStill(x))", "exists x. (Animal(x) & NotStill(x))", "exists x. (Animal(x) & NotStill(x))", "exists x. (Animal(x) & NotStill(x))", "exists x. (Animal(x) & NotStill(x))", "exists x. (Animal(x) & NotStill(x))", "exists x. (Animal(x) & NotStill(x))", "exists x. (Animal(x) & NotStill(x))", "exists x. (Animal(x) & NotStill(x))", "exists x. (Animal(x) & NotStill(x))", "exists x. (Animal(x) & NotStill(x))", "exists x. (Animal(x) & NotStill(x))", "exists x. (Animal(x) & NotStill(x))", "exists x. (Animal(x) & NotStill(x))", "exists x. (Animal(x) & NotStill(x))", "exists x. (Animal(x) & NotStill(x))", "exists x. (Animal(x) & NotStill(x))", "exists x. (Animal(x) & NotStill(x))", "exists x. (Animal(x) & NotStill(x))", "exists x. (Animal(x) & NotStill(x))", "exists x. (Animal(x) & NotStill(x))", "exists x. (Animal(x) & NotStill(x))", "exists x. (Animal(x) & NotStill(x))", "exists x. (Animal(x) & NotStill(x))", "exists x. (Animal(x) & NotStill(x))", "exists x. (Animal(x) & NotStill(x))", "exists x. (Animal(x) & NotStill(x))", "exists x. (Animal(x) & NotStill(x))", "exists x. (Animal(x) & NotStill(x))", "exists x. (Animal(x) & NotStill(x))", "exists x. (Animal(x) & NotStill(x))", "exists x. (Animal(x) & NotStill(x))", "exists x. (Animal(x) & NotStill(x))", "exists x. (Animal(x) & NotStill(x))", "exists x. (Animal(x) & NotStill(x))", "exists x. (Animal(x) & NotStill(x))", "exists x. (Animal(x) & NotStill(x))", "exists x. (Animal(x) & NotStill(x))", "exists x. (Animal(x) & NotStill(x))", "exists x. (Animal(x) & NotStill(x))", "exists x. (Animal(x) & NotStill(x))", "exists x. (Animal(x) & NotStill(x))", "exists x. (Animal(x) & NotStill(x))", "exists x. (Animal(x) & NotStill(x))", "exists x. (Animal(x) & NotStill(x))", "exists x. (Animal(x) & NotStill(x))", "exists x. (Animal(x) & NotStill(x))", "exists x. (Animal(x) & NotStill(x))", "exists x. (Animal(x) & NotStill(x))", "exists x. (Animal(x) & NotStill(x))", "exists x. (Animal(x) & NotStill(x))", "exists x. (Animal(x) & NotStill(x))", "exists x. (Animal(x) & NotStill(x))", "exists x. (Animal(x) & NotStill(x))", "exists x. (Animal(x) & NotStill(x))", "exists x. (Animal(x) & NotStill(x))", "exists x. (Animal(x) & NotStill(x))", "exists x. (Animal(x) & NotStill(x))", "exists x. (Animal(x) & NotStill(x))", "exists x. (Animal(x) & NotStill(x))", "exists x. (Animal(x) & NotStill(x))", "exists x. (Animal(x) & NotStill(x))", "exists x. (Animal(x) & NotStill(x))", "exists x. (Animal(x) & NotStill(x))", "exists x. (Animal(x) & NotStill(x))", "exists x. (Animal(x) & NotStill(x))", "exists x. (Animal(x) & NotStill(x))", "exists x. (Animal(x) & NotStill(x))", "exists x. (Animal(x) & NotStill(x))", "exists x. (Animal(x) & NotStill(x))", "exists x. (Animal(x) & NotStill(x))", "exists x. (Animal(x) & NotStill(x))", "exists x. (Animal(x) & NotStill(x))", "exists x. (Animal(x) & NotStill(x))", "exists x. (Animal(x) & NotStill(x))", "exists x. (Animal(x) & NotStill(x))", "exists x. (Animal(x) & NotStill(x))", "exists x. (Animal(x) & NotStill(x))", "exists x. (Animal(x) & NotStill(x))", "exists x. (Animal(x) & NotStill(x))", "exists x. (Animal(x) & NotStill(x))", "exists x. (Animal(x) & NotStill(x))", "exists x. (Animal(x) & NotStill(x))", "exists x. (Animal(x) & NotStill(x))", "exists x. (Animal(x) & NotStill(x))", "exists x. (Animal(x) & NotStill(x))", "exists x. (Animal(x) & NotStill(x))", "exists x. (Animal(x) & NotStill(x))", "exists x. (Animal(x) & NotStill(x))", "exists x. (Animal(x) & NotStill(x))", "exists x. (Animal(x) & NotStill(x))", "exists x. (Animal(x) & NotStill(x))", "exists x. (Animal(x) & NotStill(x))", "exists x. (Animal(x) & NotStill(x))", "exists x. (Animal(x) & NotStill(x))", "exists x. (Animal(x) & NotStill(x))", "exists x. (Animal(x) & NotStill(x))", "exists x. (Animal(x) & NotStill(x))", "exists x. (Animal(x) & NotStill(x))", "exists x. (Animal(x) & NotStill(x))", "exists x. (Animal(x) & NotStill(x))", "exists x. (Animal(x) & NotStill(x))", "exists x. (Animal(x) & NotStill(x))", "exists x. (Animal(x) & NotStill(x))", "exists x. (Animal(x) & NotStill(x))", "exists x. (Animal(x) & NotStill(x))", "exists x. (Animal(x) & NotStill(x))", "exists x. (Animal(x) & NotStill(x))", "exists x. (Animal(x) & NotStill(x))", "exists x. (Animal(x) & NotStill(x))", "exists x. (Animal(x) & NotStill(x))", "exists x. (Animal(x) & NotStill(x))", "exists x. (Animal(x) & NotStill(x))", "exists x. (Animal(x) & NotStill(x))", "exists x. (Animal(x) & NotStill(x))", "exists x. (Animal(x) & NotStill(x))", "exists x. (Animal(x) & NotStill(x))", "exists x. (Animal(x) & NotStill(x))", "exists x. (Animal(x) & NotStill(x))", "exists x. (Animal(x) & NotStill(x))", "exists x. (Animal(x) & NotStill(x))", "exists x. (Animal(x) & NotStill(x))", "exists x. (Animal(x) & NotStill(x))", "exists x. (Animal(x) & NotStill(x))", "exists x. (Animal(x) & NotStill(x))", "exists x. (Animal(x) & NotStill(x))", "exists x. (Animal(x) & NotStill(x))", "exists x. (Animal(x) & NotStill(x))", "exists x. (Animal(x) & NotStill(x))", "exists x. (Animal(x) & NotStill(x))", "exists x. (Animal(x) & NotStill(x))", "exists x. (Animal(x) & NotStill(x))", "exists x. (Animal(x) & NotStill(x))", "exists x. (Animal(x) & NotStill(x))", "exists x. (Animal(x) & NotStill(x))", "exists x. (Animal(x) & NotStill(x))", "exists x. (Animal(x) & NotStill(x))", "exists x. (Animal(x) & NotStill(x))", "exists x. (Animal(x) & NotStill(x))", "exists x. (Animal(x) & NotStill(x))", "exists x. (Animal(x) & NotStill(x))", "exists x. (Animal(x) & NotStill(x))", "exists x. (Animal(x) & NotStill(x))", "exists x. (Animal(x) & NotStill(x))", "exists x. (Animal(x) & NotStill(x))", "exists x. (Animal(x) & NotStill(x))", "exists x. (Animal(x) & NotStill(x))", "exists x. (Animal(x) & NotStill(x))", "exists x. (Animal(x) & NotStill(x))", "exists x. (Animal(x) & NotStill(x))", "exists x. (Animal(x) & NotStill(x))", "exists x. (Animal(x) & NotStill(x))", "exists x. (Animal(x) & NotStill(x))", "exists x. (Animal(x) & NotStill(x))", "exists x. (Animal(x) & NotStill(x))", "exists x. (Animal(x) & NotStill(x))", "exists x. (Animal(x) & NotStill(x))", "exists x. (Animal(x) & NotStill(x))", "exists x. (Animal(x) & NotStill(x))", "exists x. (Animal(x) & NotStill(x))", "exists x. (Animal(x) & NotStill(x))", "exists x. (Animal(x) & NotStill(x))", "exists x. (Animal(x) & NotStill(x))", "exists x. (Animal(x) & NotStill(x))", "exists x. (Animal(x) & NotStill(x))", "exists x. (Animal(x) & NotStill(x))", "exists x. (Animal(x) & NotStill(x))", "exists x. (Animal(x) & NotStill(x))", "exists x. (Animal(x) & NotStill(x))", "exists x. (Animal(x) & NotStill(x))", "exists x. (Animal(x) & NotStill(x))", "exists x. (Animal(x) & NotStill(x))", "exists x. (Animal(x) & NotStill(x))", "exists x. (Animal(x) & NotStill(x))", "exists x. (Animal(x) & NotStill(x))", "exists x. (Animal(x) & NotStill(x))", "exists x. (Animal(x) & NotStill(x))", "exists x. (Animal(x) & NotStill(x))", "exists x. (Animal(x) & NotStill(x))", "exists x. (Animal(x) & NotStill(x))", "exists x. (Animal(x) & NotStill(x))", "exists x. (Animal(x) & NotStill(x))", "exists x. (Animal(x) & NotStill(x))", "exists x. (Animal(x) & NotStill(x))", "exists x. (Animal(x) & NotStill(x))", "exists x. (Animal(x) & NotStill(x))", "exists x. (Animal(x) & NotStill(x))", "exists x. (Animal(x) & NotStill(x))", "exists x. (Animal(x) & NotStill(x))", "exists x. (Animal(x) & NotStill(x))", "exists x. (Animal(x) & NotStill(x))", "exists x. (Animal(x) & NotStill(x))", "exists x. (Animal(x) & NotStill(x))", "exists x. (Animal(x) & NotStill(x))", "exists x. (Animal(x) & NotStill(x))", "exists x. (Animal(x) & NotStill(x))", "exists x. (Animal(x) & NotStill(x))", "exists x. (Animal(x) & NotStill(x))", "exists x. (Animal(x) & NotStill(x))", "exists x. (Animal(x) & NotStill(x))", "exists x. (Animal(x) & NotStill(x))", "exists x. (Animal(x) & NotStill(x))", "exists x. (Animal(x) & NotStill(x))", "exists x. (Animal(x) & NotStill(x))", "exists x. (Animal(x) & NotStill(x))", "exists x. (Animal(x) & NotStill(x))", "exists x. (Animal(x) & NotStill(x))", "exists x. (Animal(x) & NotStill(x))", "exists x. (Animal(x) & NotStill(x))", "exists x. (Animal(x) & NotStill(x))", "exists x. (Animal(x) & NotStill(x))", "exists x. (Animal(x) & NotStill(x))", "exists x. (Animal(x) & NotStill(x))", "exists x. (Animal(x) & NotStill(x))", "exists x. (Animal(x) & NotStill(x))", "exists x. (Animal(x) & NotStill(x))", "exists x. (Animal(x) & NotStill(x))", "exists x. (Animal(x) & NotStill(x))", "exists x. (Animal(x) & NotStill(x))", "exists x. (Animal(x) & NotStill(x))", "exists x. (Animal(x) & NotStill(x))", "exists x. (Animal(x) & NotStill(x))", "exists x. (Animal(x) & NotStill(x))", "exists x. (Animal(x) & NotStill(x))", "exists x. (Animal(x) & NotStill(x))", "exists x. (Animal(x) & NotStill(x))", "exists x. (Animal(x) & NotStill(x))", "exists x. (Animal(x) & NotStill(x))", "exists x. (Animal(x) & NotStill(x))", "exists x. (Animal(x) & NotStill(x))", "exists x. (Animal(x) & NotStill(x))", "exists x. (Animal(x) & NotStill(x))", "exists x. (Animal(x) & NotStill(x))", "exists x. (Animal(x) & NotStill(x))", "exists x. (Animal(x) & NotStill(x))", "exists x. (Animal(x) & NotStill(x))", "exists x. (Animal(x) & NotStill(x))", "exists x. (Animal(x) & NotStill(x))", "exists x. (Animal(x) & NotStill(x))", "exists x. (Animal(x) & NotStill(x))", "exists x. (Animal(x) & NotStill(x))", "exists x. (Animal(x) & NotStill(x))", "exists x. (Animal(x) & NotStill(x))", "exists x. (Animal(x) & NotStill(x))", "exists x. (Animal(x) & NotStill(x))", "exists x. (Animal(x) & NotStill(x))", "exists x. (Animal(x) & NotStill(x))", "exists x. (Animal(x) & NotStill(x))", "exists x. (Animal(x) & NotStill(x))", "exists x. (Animal(x) & NotStill(x))", "exists x. (Animal(x) & NotStill(x))", "exists x. (Animal(x) & NotStill(x))", "exists x. (Animal(x) & NotStill(x))", "exists x. (Animal(x) & NotStill(x))", "exists x. (Animal(x) & NotStill(x))", "exists x. (Animal(x) & NotStill(x))", "exists x. (Animal(x) & NotStill(x))", "exists x. (Animal(x) & NotStill(x))", "exists x. (Animal(x) & NotStill(x))", "exists x. (Animal(x) & NotStill(x))", "exists x. (Animal(x) & NotStill(x))", "exists x. (Animal(x) & NotStill(x))", "exists x. (Animal(x) & NotStill(x))", "exists x. (Animal(x) & NotStill(x))", "exists x. (Animal(x) & NotStill(x))", "exists x. (Animal(x) & NotStill(x))", "exists x. (Animal(x) & NotStill(x))", "exists x. (Animal(x) & NotStill(x))", "exists x. (Animal(x) & NotStill(x))", "exists x. (Animal(x) & NotStill(x))", "exists x. (Animal(x) & NotStill(x))", "exists x. (Animal(x) & NotStill(x))", "exists x. (Animal(x) & NotStill(x))", "exists x. (Animal(x) & NotStill(x))", "exists x. (Animal(x) & NotStill(x))", "exists x. (Animal(x) & NotStill(x))", "exists x. (Animal(x) & NotStill(x))", "exists x. (Animal(x) & NotStill(x))", "exists x. (Animal(x) & NotStill(x))", "exists x. (Animal(x) & NotStill(x))", "exists x. (Animal(x) & NotStill(x))", "exists x. (Animal(x) & NotStill(x))", "exists x. (Animal(x) & NotStill(x))", "exists x. (Animal(x) & NotStill(x))", "exists x. (Animal(x) & NotStill(x))", "exists x. (Animal(x) & NotStill(x))", "exists x. (Animal(x) & NotStill(x))", "exists x. (Animal(x) & NotStill(x))", "exists x. (Animal(x) & NotStill(x))", "exists x. (Animal(x) & NotStill(x))", "exists x. (Animal(x) & NotStill(x))", "exists x. (Animal(x) & NotStill(x))", "exists x. (Animal(x) & NotStill(x))", "exists x. (Animal(x) & NotStill(x))", "exists x. (Animal(x) & NotStill(x))", "exists x. (Animal(x) & NotStill(x))", "exists x. (Animal(x) & NotStill(x))", "exists x. (Animal(x) & NotStill(x))", "exists x. (Animal(x) & NotStill(x))", "exists x. (Animal(x) & NotStill(x))", "exists x. (Animal(x) & NotStill(x))", "exists x. (Animal(x) & NotStill(x))", "exists x. (Animal(x) & NotStill(x))", "exists x. (Animal(x) & NotStill(x))", "exists x. (Animal(x) & NotStill(x))", "exists x. (Animal(x) & NotStill(x))", "exists x. (Animal(x) & NotStill(x))", "exists x. (Animal(x) & NotStill(x))", "exists x. (Animal(x) & NotStill(x))", "exists x.", "exists x. (Animal(x) & NotStill(x))", "exists x. (Animal(x) & NotStill(x))", "exists x. (Animal(x) & NotStill(x))", "exists x. (Animal(x) & NotStill(x))", "exists x. (Animal(x) & NotStill(x))", "exists x. (Animal(x) & NotStill(x))", "exists x. (Animal(x) & NotStill(x))", "exists x. (Animal(x) & NotStill(x))", "exists x. (Animal(x) & NotStill(x))", "exists x. (Animal(x) & NotStill(x))", "exists x. (Animal(x) & NotStill(x))", "exists x. (Animal(x) & NotStill(x))", "exists x. (Animal(x) & NotStill(x))", "exists x. (Animal(x) & NotStill(x))", "exists x. (Animal(x) & NotStill(x))", "exists x. (Animal(x) & NotStill(x))", "exists x. (Animal(x) & NotStill(x))", "exists x. (Animal(x) & NotStill(x))", "exists x. (Animal(x) & NotStill(x))", "exists x. (Animal(x) & NotStill(x))", "exists x. (Animal(x) & NotStill(x))", "exists x. (Animal(x) & NotStill(x))", "exists x. (Animal(x) & NotStill(x))", "exists x. (Animal(x) & NotStill(x))", "exists x. (Animal(x) & NotStill(x))", "exists x. (Animal(x) & NotStill(x))", "exists x. (Animal(x) & NotStill(x))", "exists x. (Animal(x) & NotStill(x))", "exists x. (Animal(x) & NotStill(x))", "exists x. (Animal(x) & NotStill(x))", "exists x. (Animal(x) & NotStill(x))", "exists x. (Animal(x) & NotStill(x))", "exists x. (Animal(x) & NotStill(x))", "exists x. (Animal(x) & NotStill(x))", "exists x. (Animal(x) & NotStill(x))", "exists x. (Animal(x) & NotStill(x))", "exists x. (Animal(x) & NotStill(x))", "exists x. (Animal(x) & NotStill(x))", "exists x. (Animal(x) & NotStill(x))", "exists x. (Animal(x) & NotStill(x))", "exists x. (Animal(x) & NotStill(x))", "exists x. (Animal(x) & NotStill(x))", "exists x. (Animal(x) & NotStill(x))", "exists x. (Animal(x) & NotStill(x))", "exists x. (Animal(x) & NotStill(x))"], "conclusion": "exists x. (Animal", "error_type": "<class 'nltk.sem.logic.LogicalExpressionException'>", "error_message": "End of input found.  Expected token ')'.\nexists x. (Animal\n                 ^", "stack_trace": "Traceback (most recent call last):\n  File \"/data/gpfs/projects/punim0478/bansaab/linc2/eval/tasks/owafoltask.py\", line 577, in _process_neurosymbolic\n    parsed = json.loads(gen)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/json/__init__.py\", line 346, in loads\n    return _default_decoder.decode(s)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/json/decoder.py\", line 337, in decode\n    obj, end = self.raw_decode(s, idx=_w(s, 0).end())\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/json/decoder.py\", line 355, in raw_decode\n    raise JSONDecodeError(\"Expecting value\", s, err.value) from None\njson.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/sem/logic.py\", line 270, in token\n    tok = self._buffer[self._currentIndex]\nIndexError: list index out of range\n\nThe above exception was the direct cause of the following exception:\n\nTraceback (most recent call last):\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/sem/logic.py\", line 562, in assertNextToken\n    tok = self.token()\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/sem/logic.py\", line 276, in token\n    raise ExpectedMoreTokensException(self._currentIndex + 1) from e\nnltk.sem.logic.ExpectedMoreTokensException: End of input found.  More tokens expected.\n\nThe above exception was the direct cause of the following exception:\n\nTraceback (most recent call last):\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/sem/logic.py\", line 154, in parse\n    result = self.process_next_expression(None)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/sem/logic.py\", line 290, in process_next_expression\n    accum = self.handle(tok, context)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/sem/logic.py\", line 312, in handle\n    return self.handle_quant(tok, context)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/sem/logic.py\", line 427, in handle_quant\n    accum = self.process_next_expression(tok)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/sem/logic.py\", line 290, in process_next_expression\n    accum = self.handle(tok, context)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/sem/logic.py\", line 315, in handle\n    return self.handle_open(tok, context)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/sem/logic.py\", line 450, in handle_open\n    self.assertNextToken(Tokens.CLOSE)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/sem/logic.py\", line 564, in assertNextToken\n    raise ExpectedMoreTokensException(\nnltk.sem.logic.ExpectedMoreTokensException: End of input found.  Expected token ')'.\n\nThe above exception was the direct cause of the following exception:\n\nTraceback (most recent call last):\n  File \"/data/gpfs/projects/punim0478/bansaab/linc2/eval/tasks/utils.py\", line 215, in evaluate\n    c = read_expr(conclusion)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/sem/logic.py\", line 957, in fromstring\n    return cls._logic_parser.parse(s, signature)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/sem/logic.py\", line 159, in parse\n    raise LogicalExpressionException(None, msg) from e\nnltk.sem.logic.LogicalExpressionException: End of input found.  Expected token ')'.\nexists x. (Animal\n                 ^\n"}
{"timestamp": "2025-09-16T18:00:20.686452", "premises": ["TEXT: all rabbits are cute.", "all x. (Rabbit(x) -> Cute(x))", "exists x. (Turtle(x))", "all x. (Animal(x) -> Rabbit(x) | Squirrel(x))", "all x. (Skittish(x) -> -Still(x))", "all x. (Squirrel(x) -> Skittish(x))", "Rock(x) -> Still(x)"], "conclusion": "-Turtle(Rock)", "error_type": "<class 'nltk.sem.logic.LogicalExpressionException'>", "error_message": "Unexpected token: 'all'.\nTEXT: all rabbits are cute.\n      ^", "stack_trace": "Traceback (most recent call last):\n  File \"/data/gpfs/projects/punim0478/bansaab/linc2/eval/tasks/owafoltask.py\", line 577, in _process_neurosymbolic\n    parsed = json.loads(gen)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/json/__init__.py\", line 346, in loads\n    return _default_decoder.decode(s)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/json/decoder.py\", line 337, in decode\n    obj, end = self.raw_decode(s, idx=_w(s, 0).end())\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/json/decoder.py\", line 355, in raw_decode\n    raise JSONDecodeError(\"Expecting value\", s, err.value) from None\njson.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/sem/logic.py\", line 156, in parse\n    raise UnexpectedTokenException(self._currentIndex + 1, self.token(0))\nnltk.sem.logic.UnexpectedTokenException: Unexpected token: 'all'.\n\nThe above exception was the direct cause of the following exception:\n\nTraceback (most recent call last):\n  File \"/data/gpfs/projects/punim0478/bansaab/linc2/eval/tasks/utils.py\", line 216, in evaluate\n    p_list = [read_expr(p) for p in premises]\n  File \"/data/gpfs/projects/punim0478/bansaab/linc2/eval/tasks/utils.py\", line 216, in <listcomp>\n    p_list = [read_expr(p) for p in premises]\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/sem/logic.py\", line 957, in fromstring\n    return cls._logic_parser.parse(s, signature)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/sem/logic.py\", line 159, in parse\n    raise LogicalExpressionException(None, msg) from e\nnltk.sem.logic.LogicalExpressionException: Unexpected token: 'all'.\nTEXT: all rabbits are cute.\n      ^\n"}
{"timestamp": "2025-09-16T18:00:20.702453", "premises": ["all x. (Rabbit(x) -> Cute(x))", "exists x. (Turtle(x))", "all x. (Animal(x) -> (Rabbit(x) | Squirrel(x)))", "all x. (Skittish(x) -> -Still(x))", "all x. (Squirrel(x) -> Skittish(x))", "Rock(x) -> Still(x)"], "conclusion": "-Turtle(Rock)", "error_type": "<class 'nltk.inference.prover9.Prover9FatalException'>", "error_message": "(FATAL)\n%%ERROR: The following symbols are used with multiple arities: Rock/1, Rock/0.\n\n\nFatal error:  The following symbols are used with multiple arities: Rock/1, Rock/0", "stack_trace": "Traceback (most recent call last):\n  File \"/data/gpfs/projects/punim0478/bansaab/linc2/eval/tasks/owafoltask.py\", line 577, in _process_neurosymbolic\n    parsed = json.loads(gen)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/json/__init__.py\", line 346, in loads\n    return _default_decoder.decode(s)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/json/decoder.py\", line 337, in decode\n    obj, end = self.raw_decode(s, idx=_w(s, 0).end())\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/json/decoder.py\", line 355, in raw_decode\n    raise JSONDecodeError(\"Expecting value\", s, err.value) from None\njson.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"/data/gpfs/projects/punim0478/bansaab/linc2/eval/tasks/utils.py\", line 219, in evaluate\n    truth_value = prover.prove(c, p_list)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/inference/api.py\", line 37, in prove\n    return self._prove(goal, assumptions, verbose)[0]\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/inference/prover9.py\", line 327, in _prove\n    stdout, returncode = self._call_prover9(\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/inference/prover9.py\", line 370, in _call_prover9\n    raise Prover9FatalException(returncode, errormsg)\nnltk.inference.prover9.Prover9FatalException: (FATAL)\n%%ERROR: The following symbols are used with multiple arities: Rock/1, Rock/0.\n\n\nFatal error:  The following symbols are used with multiple arities: Rock/1, Rock/0\n"}
{"timestamp": "2025-09-16T18:00:20.717100", "premises": ["all x. (Cute(x) -> Rabbit(x))", "all x. (Exist(x) -> Turtle(x))", "all x. all y. (Animal(x) & Animal(y) -> Rabbit(x) | Squirrel(y))", "all x. all y. (Skittish(x) & Still(y) -> -Skittish(x))", "all x. (Skittish(x) -> Squirrel(x))", "not Still(Rock)", "all x. (FurOrHair(x) -> Animal(x))", "all x. (Scales(x) -> Animal(x))", "all x. (Gills(x) -> Fish(x))", "all x. (Scales(x) -> Fish(x))", "all x. (Mammal(x) -> Dolphin(x))"], "conclusion": "Fish(Dolphin)", "error_type": "<class 'nltk.inference.prover9.Prover9FatalException'>", "error_message": "(FATAL)\n%%ERROR: The following symbols are used with multiple arities: Dolphin/1, Dolphin/0.\n\n\nFatal error:  The following symbols are used with multiple arities: Dolphin/1, Dolphin/0", "stack_trace": "Traceback (most recent call last):\n  File \"/data/gpfs/projects/punim0478/bansaab/linc2/eval/tasks/owafoltask.py\", line 577, in _process_neurosymbolic\n    parsed = json.loads(gen)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/json/__init__.py\", line 346, in loads\n    return _default_decoder.decode(s)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/json/decoder.py\", line 337, in decode\n    obj, end = self.raw_decode(s, idx=_w(s, 0).end())\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/json/decoder.py\", line 355, in raw_decode\n    raise JSONDecodeError(\"Expecting value\", s, err.value) from None\njson.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"/data/gpfs/projects/punim0478/bansaab/linc2/eval/tasks/utils.py\", line 219, in evaluate\n    truth_value = prover.prove(c, p_list)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/inference/api.py\", line 37, in prove\n    return self._prove(goal, assumptions, verbose)[0]\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/inference/prover9.py\", line 327, in _prove\n    stdout, returncode = self._call_prover9(\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/inference/prover9.py\", line 370, in _call_prover9\n    raise Prover9FatalException(returncode, errormsg)\nnltk.inference.prover9.Prover9FatalException: (FATAL)\n%%ERROR: The following symbols are used with multiple arities: Dolphin/1, Dolphin/0.\n\n\nFatal error:  The following symbols are used with multiple arities: Dolphin/1, Dolphin/0\n"}
{"timestamp": "2025-09-16T18:00:20.723941", "premises": ["all x. (Rabbit(x) -> Cute(x))", "exists x. (Turtle(x))", "all x. (Animal(x) -> Rabbit(x) | Squirrel(x))", "all x. (Skittish(x) -> NotStill(x))", "all x. (Squirrel(x) -> Skittish(x))", "Rock(x) -> Still(x)"], "conclusion": "-Turtle(Rock)", "error_type": "<class 'nltk.inference.prover9.Prover9FatalException'>", "error_message": "(FATAL)\n%%ERROR: The following symbols are used with multiple arities: Rock/1, Rock/0.\n\n\nFatal error:  The following symbols are used with multiple arities: Rock/1, Rock/0", "stack_trace": "Traceback (most recent call last):\n  File \"/data/gpfs/projects/punim0478/bansaab/linc2/eval/tasks/owafoltask.py\", line 577, in _process_neurosymbolic\n    parsed = json.loads(gen)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/json/__init__.py\", line 346, in loads\n    return _default_decoder.decode(s)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/json/decoder.py\", line 337, in decode\n    obj, end = self.raw_decode(s, idx=_w(s, 0).end())\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/json/decoder.py\", line 355, in raw_decode\n    raise JSONDecodeError(\"Expecting value\", s, err.value) from None\njson.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"/data/gpfs/projects/punim0478/bansaab/linc2/eval/tasks/utils.py\", line 219, in evaluate\n    truth_value = prover.prove(c, p_list)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/inference/api.py\", line 37, in prove\n    return self._prove(goal, assumptions, verbose)[0]\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/inference/prover9.py\", line 327, in _prove\n    stdout, returncode = self._call_prover9(\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/inference/prover9.py\", line 370, in _call_prover9\n    raise Prover9FatalException(returncode, errormsg)\nnltk.inference.prover9.Prover9FatalException: (FATAL)\n%%ERROR: The following symbols are used with multiple arities: Rock/1, Rock/0.\n\n\nFatal error:  The following symbols are used with multiple arities: Rock/1, Rock/0\n"}
{"timestamp": "2025-09-16T18:00:20.723331", "premises": ["all x. (Rabbit(x) -> Cute(x))", "all x. (Rabbit(x) -> Cute(x))", "exists y. (Turtle(y))", "x. (Animal(x) -> Rabbit(x) | Squirrel(x))", "y. (Skittish(y) -> Not(Still(y)))", "x. (Squirrel(x) -> Skittish(x))", "x. (Rock(x) -> Still(x))", "(x. (Animal(x) -> Rabbit(x) | Squirrel(x)) & x. (Squirrel(x))) & -x. (Turtle(x))", "all x. (Animal(x) -> Furry(x))", "all x. (Cat(x) -> Furry(x))", "exists x. (Cat(x) & Tail(x))", "all x. (Dog(x) -> Furry(x))", "exists x. (Dog(x) & Tail(x))", "all x. (Cat(x) -> Animal(x))", "all x. (Dog(x) -> Animal(x))", "all x. (Animal(x) -> Furry(x))", "all x. (Fruit(x) -> Round(x))", "all x. (Fruit(x) -> Round(x))", "all x. (Apple(x) -> Fruit(x))", "all x. (Banana(x) -> Fruit(x))", "all x. (Banana(x) -> Yellow(x))", "all x. (Orange(x) -> Fruit(x))", "all x. (Orange(x) -> Round(x))", "(all x. (Fruit(x) -> Yellow(x)) & all x. (Fruit(x) -> Round(x)))", "all x. (Animal(x) -> Furry(x))", "all x. (Dog(x) -> Furry(x))", "exists x. (Dog(x) & Tail(x))", "all x. (Cat(x) -> Furry(x))", "exists x. (Cat(x) & Tail(x))", "all x. (Animal(x) -> Furry(x))", "exists x. (Animal(x) & Tail(x))", "all x. (Animal(x) -> Furry(x)) & all x. (Animal(x) -> Tail(x))", "all x. (Animal(x) -> Furry(x))", "all x. (Cat(x) -> Furry(x))", "all x. (Dog(x) -> Furry(x))", "all x. (Animal(x) -> Furry(x))", "all x. (Animal(x) -> Furry(x))", "all x. (Cat(x) -> Animal(x))", "all x. (Dog(x) -> Animal(x))", "all x. (Animal(x) -> Furry(x))", "all x. (Animal(x) -> Furry(x))", "all x. (Cat(x) -> Furry(x))", "all x. (Dog(x) -> Furry(x))", "all x. (Animal(x) -> Furry(x))", "all x. (Animal(x) -> Furry(x))", "all x. (Cat(x) -> Animal(x))", "all x. (Dog(x) -> Animal(x))", "all x. (Animal(x) -> Furry(x))", "all x. (Animal(x) -> Furry(x))", "all x. (Cat(x) -> Furry(x))", "all x. (Dog(x) -> Furry(x))", "all x. (Animal(x) -> Furry(x))", "all x. (Animal(x) -> Furry(x))", "all x. (Cat(x) -> Animal(x))", "all x. (Dog(x) -> Animal(x))", "all x. (Animal(x) -> Furry(x))", "all x. (Animal(x) -> Furry(x))", "all x. (Cat(x) -> Furry(x))", "all x. (Dog(x) -> Furry(x))", "all x. (Animal(x) -> Furry(x))", "all x. (Animal(x) -> Furry(x))", "all x. (Cat(x) -> Animal(x))", "all x. (Dog(x) -> Animal(x))", "all x. (Animal(x) -> Furry(x))", "all x. (Animal(x) -> Furry(x))", "all x. (Cat(x) -> Furry(x))", "all x. (Dog(x) -> Furry(x))", "all x. (Animal(x) -> Furry(x))", "all x. (Animal(x) -> Furry(x))", "all x. (Cat(x) -> Animal(x))", "all x. (Dog(x) -> Animal(x))", "all x. (Animal(x) -> Furry(x))", "all x. (Animal(x) -> Furry(x))", "all x. (Cat(x) -> Furry(x))", "all x. (Dog(x) -> Furry(x))", "all x. (Animal(x) -> Furry(x))", "all x. (Animal(x) -> Furry(x))", "all x. (Cat(x) -> Animal(x))", "all x. (Dog(x) -> Animal(x))", "all x. (Animal(x) -> Furry(x))", "all x. (Animal(x) -> Furry(x))", "all x. (Cat(x) -> Furry(x))", "all x. (Dog(x) -> Furry(x))", "all x. (Animal(x) -> Furry(x))", "all x. (Animal(x) -> Furry(x))", "all x. (Cat(x) -> Animal(x))", "all x. (Dog(x) -> Animal(x))", "all x. (Animal(x) -> Furry(x))", "all x. (Animal(x) -> Furry(x))", "all x. (Cat(x) -> Furry(x))", "all x. (Dog(x) -> Furry(x))", "all x. (Animal(x) -> Furry(x))", "all x. (Animal(x) -> Furry(x))", "all x. (Cat(x) -> Animal(x))", "all x. (Dog(x) -> Animal(x))", "all x. (Animal(x) -> Furry(x))", "all x. (Animal(x) -> Furry(x))", "all x. (Cat(x) -> Furry(x))", "all x. (Dog(x) -> Furry(x))", "all x. (Animal(x) -> Furry(x))", "all x. (Animal(x) -> Furry(x))", "all x. (Cat(x) -> Animal(x))", "all x. (Dog(x) -> Animal(x))", "all x. (Animal(x) -> Furry(x))", "all x. (Animal(x) -> Furry(x))", "all x. (Cat(x) -> Furry(x))", "all x. (Dog(x) -> Furry(x))", "all x. (Animal(x) -> Furry(x))", "all x. (Animal(x) -> Furry(x))", "all x. (Cat(x) -> Animal(x))", "all x. (Dog(x) -> Animal(x))", "all x. (Animal(x) -> Furry(x))", "all x. (Animal(x) -> Furry(x))", "all x. (Cat(x) -> Furry(x))", "all x. (Dog(x) -> Furry(x))", "all x. (Animal(x) -> Furry(x))", "all x. (Animal(x) -> Furry(x))", "all x. (Cat(x) -> Animal(x))", "all x. (Dog(x) -> Animal(x))", "all x. (Animal(x) -> Furry(x))", "all x. (Animal(x) -> Furry(x))", "all x. (Cat(x) -> Furry(x))", "all x. (Dog(x) -> Furry(x))", "all x. (Animal(x) -> Furry(x))", "all x. (Animal(x) -> Furry(x))", "all x. (Cat(x) -> Animal(x))", "all x. (Dog(x) -> Animal(x))", "all x. (Animal(x) -> Furry(x))", "all x. (Animal(x) -> Furry(x))", "all x. (Cat(x) -> Furry(x))", "all x. (Dog(x) -> Furry(x))", "all x. (Animal(x) -> Furry(x))", "all x. (Animal(x) -> Furry(x))", "all x. (Cat(x) -> Animal(x))", "all x. (Dog(x) -> Animal(x))", "all x. (Animal(x) -> Furry(x))", "all x. (Animal(x) -> Furry(x))", "all x. (Cat(x) -> Furry(x))", "all x. (Dog(x) -> Furry(x))", "all x. (Animal(x) -> Furry(x))", "all x. (Animal(x) -> Furry(x))", "all x. (Cat(x) -> Animal(x))", "all x. (Dog(x) -> Animal(x))", "all x. (Animal(x) -> Furry(x))", "all x. (Animal(x) -> Furry(x))", "all x. (Cat(x) -> Furry(x))", "all x. (Dog(x) -> Furry(x))", "all x. (Animal(x) -> Furry(x))", "all x. (Animal(x) -> Furry(x))", "all x. (Cat(x) -> Animal(x))", "all x. (Dog(x) -> Animal(x))", "all x. (Animal(x) -> Furry(x))", "all x. (Animal(x) -> Furry(x))", "all x. (Cat(x) -> Furry(x))", "all x. (Dog(x) -> Furry(x))", "all x. (Animal(x) -> Furry(x))", "all x. (Animal(x) -> Furry(x))", "all x. (Cat(x) -> Animal(x))", "all x. (Dog(x) -> Animal(x))", "all x. (Animal(x) -> Furry(x))", "all x. (Animal(x) -> Furry(x))", "all x. (Cat(x) -> Furry(x))", "all x. (Dog(x) -> Furry(x))", "all x. (Animal(x) -> Furry(x))", "all x. (Animal(x) -> Furry(x))", "all x. (Cat(x) -> Animal(x))", "all x. (Dog(x) -> Animal(x))", "all x. (Animal(x) -> Furry(x))", "all x. (Animal(x) -> Furry(x))", "all x. (Cat(x) -> Furry(x))", "all x. (Dog(x) -> Furry(x))", "all x. (Animal(x) -> Furry(x))", "all x. (Animal(x) -> Furry(x))"], "conclusion": "all x.", "error_type": "<class 'nltk.sem.logic.LogicalExpressionException'>", "error_message": "End of input found.  Expression expected.\nall x.\n      ^", "stack_trace": "Traceback (most recent call last):\n  File \"/data/gpfs/projects/punim0478/bansaab/linc2/eval/tasks/owafoltask.py\", line 577, in _process_neurosymbolic\n    parsed = json.loads(gen)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/json/__init__.py\", line 346, in loads\n    return _default_decoder.decode(s)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/json/decoder.py\", line 337, in decode\n    obj, end = self.raw_decode(s, idx=_w(s, 0).end())\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/json/decoder.py\", line 355, in raw_decode\n    raise JSONDecodeError(\"Expecting value\", s, err.value) from None\njson.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/sem/logic.py\", line 154, in parse\n    result = self.process_next_expression(None)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/sem/logic.py\", line 290, in process_next_expression\n    accum = self.handle(tok, context)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/sem/logic.py\", line 312, in handle\n    return self.handle_quant(tok, context)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/sem/logic.py\", line 417, in handle_quant\n    raise ExpectedMoreTokensException(\nnltk.sem.logic.ExpectedMoreTokensException: End of input found.  Expression expected.\n\nThe above exception was the direct cause of the following exception:\n\nTraceback (most recent call last):\n  File \"/data/gpfs/projects/punim0478/bansaab/linc2/eval/tasks/utils.py\", line 215, in evaluate\n    c = read_expr(conclusion)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/sem/logic.py\", line 957, in fromstring\n    return cls._logic_parser.parse(s, signature)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/sem/logic.py\", line 159, in parse\n    raise LogicalExpressionException(None, msg) from e\nnltk.sem.logic.LogicalExpressionException: End of input found.  Expression expected.\nall x.\n      ^\n"}
{"timestamp": "2025-09-16T18:00:20.727433", "premises": ["all x. (Rabbit(x) -> Cute(x))", "exists x. (Turtle(x))", "all x. (Animal(x) -> (Rabbit(x) | Squirrel(x)))", "all x. (Skittish(x) -> NotStill(x))", "all x. (Squirrel(x) -> Skittish(x))", "Rock(x) -> Still(x)"], "conclusion": "Rock(x) -> Not(Turtle(x))", "error_type": "<class 'nltk.inference.prover9.Prover9FatalException'>", "error_message": "(FATAL)\n%%ERROR: The following symbols/arities are used as both relation and function symbols: Turtle/1.\n\n\nFatal error:  The following symbols/arities are used as both relation and function symbols: Turtle/1", "stack_trace": "Traceback (most recent call last):\n  File \"/data/gpfs/projects/punim0478/bansaab/linc2/eval/tasks/owafoltask.py\", line 577, in _process_neurosymbolic\n    parsed = json.loads(gen)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/json/__init__.py\", line 346, in loads\n    return _default_decoder.decode(s)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/json/decoder.py\", line 337, in decode\n    obj, end = self.raw_decode(s, idx=_w(s, 0).end())\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/json/decoder.py\", line 355, in raw_decode\n    raise JSONDecodeError(\"Expecting value\", s, err.value) from None\njson.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"/data/gpfs/projects/punim0478/bansaab/linc2/eval/tasks/utils.py\", line 219, in evaluate\n    truth_value = prover.prove(c, p_list)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/inference/api.py\", line 37, in prove\n    return self._prove(goal, assumptions, verbose)[0]\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/inference/prover9.py\", line 327, in _prove\n    stdout, returncode = self._call_prover9(\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/inference/prover9.py\", line 370, in _call_prover9\n    raise Prover9FatalException(returncode, errormsg)\nnltk.inference.prover9.Prover9FatalException: (FATAL)\n%%ERROR: The following symbols/arities are used as both relation and function symbols: Turtle/1.\n\n\nFatal error:  The following symbols/arities are used as both relation and function symbols: Turtle/1\n"}
{"timestamp": "2025-09-16T18:00:50.921593", "premises": ["all x. (Rabbit(x) -> Cute(x))", "exists x. (Turtle(x))", "all x. (Animal(x) -> (Rabbit(x) | Squirrel(x)))", "all x. (Skittish(x) -> NotStill(x))", "all x. (Squirrel(x) -> Skittish(x))", "not Still(Rock)"], "conclusion": "Equal(Rock,Turtle) | Equal(Rock,Cute)", "error_type": "<class 'nltk.inference.prover9.Prover9FatalException'>", "error_message": "(FATAL)\n%%ERROR: The following symbols are used with multiple arities: Cute/1, Cute/0, Turtle/1, Turtle/0.\n\n\nFatal error:  The following symbols are used with multiple arities: Cute/1, Cute/0, Turtle/1, Turtle/0", "stack_trace": "Traceback (most recent call last):\n  File \"/data/gpfs/projects/punim0478/bansaab/linc2/eval/tasks/owafoltask.py\", line 577, in _process_neurosymbolic\n    parsed = json.loads(gen)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/json/__init__.py\", line 346, in loads\n    return _default_decoder.decode(s)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/json/decoder.py\", line 337, in decode\n    obj, end = self.raw_decode(s, idx=_w(s, 0).end())\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/json/decoder.py\", line 355, in raw_decode\n    raise JSONDecodeError(\"Expecting value\", s, err.value) from None\njson.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"/data/gpfs/projects/punim0478/bansaab/linc2/eval/tasks/utils.py\", line 219, in evaluate\n    truth_value = prover.prove(c, p_list)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/inference/api.py\", line 37, in prove\n    return self._prove(goal, assumptions, verbose)[0]\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/inference/prover9.py\", line 327, in _prove\n    stdout, returncode = self._call_prover9(\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/inference/prover9.py\", line 370, in _call_prover9\n    raise Prover9FatalException(returncode, errormsg)\nnltk.inference.prover9.Prover9FatalException: (FATAL)\n%%ERROR: The following symbols are used with multiple arities: Cute/1, Cute/0, Turtle/1, Turtle/0.\n\n\nFatal error:  The following symbols are used with multiple arities: Cute/1, Cute/0, Turtle/1, Turtle/0\n"}
{"timestamp": "2025-09-16T18:00:50.922321", "premises": ["all x. (Rabbit(x) -> Cute(x))", "all x. (Turtle(x) -> exists(x))", "all x. all y. (Rabbit(x) -> Animal(x, y) | Animal(x, y) -> Squirrel(x))", "all x. (Skittish(x) -> NotStill(x))", "all x. (Squirrel(x) -> Skittish(x))", "NotStill(Rock)"], "conclusion": "Cute(Rock) | exists(Rock)", "error_type": "<class 'nltk.sem.logic.LogicalExpressionException'>", "error_message": "'(' is an illegal variable name.  Constants may not be quantified.\nCute(Rock) | exists(Rock)\n                   ^", "stack_trace": "Traceback (most recent call last):\n  File \"/data/gpfs/projects/punim0478/bansaab/linc2/eval/tasks/owafoltask.py\", line 577, in _process_neurosymbolic\n    parsed = json.loads(gen)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/json/__init__.py\", line 346, in loads\n    return _default_decoder.decode(s)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/json/decoder.py\", line 337, in decode\n    obj, end = self.raw_decode(s, idx=_w(s, 0).end())\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/json/decoder.py\", line 355, in raw_decode\n    raise JSONDecodeError(\"Expecting value\", s, err.value) from None\njson.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/sem/logic.py\", line 154, in parse\n    result = self.process_next_expression(None)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/sem/logic.py\", line 297, in process_next_expression\n    return self.attempt_adjuncts(accum, context)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/sem/logic.py\", line 323, in attempt_adjuncts\n    expression = self.attempt_BooleanExpression(expression, context)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/sem/logic.py\", line 485, in attempt_BooleanExpression\n    factory, expression, self.process_next_expression(tok)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/sem/logic.py\", line 290, in process_next_expression\n    accum = self.handle(tok, context)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/sem/logic.py\", line 312, in handle\n    return self.handle_quant(tok, context)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/sem/logic.py\", line 412, in handle_quant\n    vars = [self.get_next_token_variable(\"quantified\")]\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/sem/logic.py\", line 368, in get_next_token_variable\n    raise LogicalExpressionException(\nnltk.sem.logic.LogicalExpressionException: '(' is an illegal variable name.  Constants may not be quantified.\n\nThe above exception was the direct cause of the following exception:\n\nTraceback (most recent call last):\n  File \"/data/gpfs/projects/punim0478/bansaab/linc2/eval/tasks/utils.py\", line 215, in evaluate\n    c = read_expr(conclusion)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/sem/logic.py\", line 957, in fromstring\n    return cls._logic_parser.parse(s, signature)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/sem/logic.py\", line 159, in parse\n    raise LogicalExpressionException(None, msg) from e\nnltk.sem.logic.LogicalExpressionException: '(' is an illegal variable name.  Constants may not be quantified.\nCute(Rock) | exists(Rock)\n                   ^\n"}
{"timestamp": "2025-09-16T18:00:50.923191", "premises": ["all x. (Rabbit(x) -> Cute(x))", "exists x. (Turtle(x))", "x. (Animal(x) -> (Rabbit(x) | Squirrel(x)))", "all x. (Skittish(x) -> NotStill(x))", "all x. (Squirrel(x) -> Skittish(x))", "NotStill(Rock)"], "conclusion": "Equal(Rock,Turtle) | Cute", "error_type": "<class 'nltk.sem.logic.LogicalExpressionException'>", "error_message": "Unexpected token: '.'.\nx. (Animal(x) -> (Rabbit(x) | Squirrel(x)))\n ^", "stack_trace": "Traceback (most recent call last):\n  File \"/data/gpfs/projects/punim0478/bansaab/linc2/eval/tasks/owafoltask.py\", line 577, in _process_neurosymbolic\n    parsed = json.loads(gen)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/json/__init__.py\", line 346, in loads\n    return _default_decoder.decode(s)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/json/decoder.py\", line 337, in decode\n    obj, end = self.raw_decode(s, idx=_w(s, 0).end())\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/json/decoder.py\", line 355, in raw_decode\n    raise JSONDecodeError(\"Expecting value\", s, err.value) from None\njson.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/sem/logic.py\", line 156, in parse\n    raise UnexpectedTokenException(self._currentIndex + 1, self.token(0))\nnltk.sem.logic.UnexpectedTokenException: Unexpected token: '.'.\n\nThe above exception was the direct cause of the following exception:\n\nTraceback (most recent call last):\n  File \"/data/gpfs/projects/punim0478/bansaab/linc2/eval/tasks/utils.py\", line 216, in evaluate\n    p_list = [read_expr(p) for p in premises]\n  File \"/data/gpfs/projects/punim0478/bansaab/linc2/eval/tasks/utils.py\", line 216, in <listcomp>\n    p_list = [read_expr(p) for p in premises]\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/sem/logic.py\", line 957, in fromstring\n    return cls._logic_parser.parse(s, signature)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/sem/logic.py\", line 159, in parse\n    raise LogicalExpressionException(None, msg) from e\nnltk.sem.logic.LogicalExpressionException: Unexpected token: '.'.\nx. (Animal(x) -> (Rabbit(x) | Squirrel(x)))\n ^\n"}
{"timestamp": "2025-09-16T18:06:37.930700", "premises": ["all x. (Animal(x) -> (Rabbit(x) | Squirrel(x)))", "all x. (Skittish(x) -> Squirrel(x))", "all x. (Still(x) -> Rock(x))", "all x. (Cute(x) -> Rabbit(x))", "all x. (Not(x) -> x)", "not all x. (Skittish(x))", "not all x. (Still(x))", "not all x. (Cute(x))", "not all x. (Animal(x))", "or all x. (Animal(x))", "or all x. (Rabbit(x))", "or all x. (Squirrel(x))", "or all x. (Cute(x))", "or all x. (Still(x))", "or all x. (Not(x))", "or all x. (Animal(x))", "or all x. (Rabbit(x))", "or all x. (Squirrel(x))", "or all x. (Cute(x))", "or all x. (Still(x))", "or all x. (Not(x))", "or all x. (Animal(x))", "or all x. (Rabbit(x))", "or all x. (Squirrel(x))", "or all x. (Cute(x))", "or all x. (Still(x))", "or all x. (Not(x))", "or all x. (Animal(x))", "or all x. (Rabbit(x))", "or all x. (Squirrel(x))", "or all x. (Cute(x))", "or all x. (Still(x))", "or all x. (Not(x))", "or all x. (Animal(x))", "or all x. (Rabbit(x))", "or all x. (Squirrel(x))", "or all x. (Cute(x))", "or all x. (Still(x))", "or all x. (Not(x))", "or all x. (Animal(x))", "or all x. (Rabbit(x))", "or all x. (Squirrel(x))", "or all x. (Cute(x))", "or all x. (Still(x))", "or all x. (Not(x))", "or all x. (Animal(x))", "or all x. (Rabbit(x))", "or all x. (Squirrel(x))", "or all x. (Cute(x))", "or all x. (Still(x))", "or all x. (Not(x))", "or all x. (Animal(x))", "or all x. (Rabbit(x))", "or all x. (Squirrel(x))", "or all x. (Cute(x))", "or all x. (Still(x))", "or all x. (Not(x))", "or all x. (Animal(x))", "or all x. (Rabbit(x))", "or all x. (Squirrel(x))", "or all x. (Cute(x))", "or all x. (Still(x))", "or all x. (Not(x))", "or all x. (Animal(x))", "or all x. (Rabbit(x))", "or all x. (Squirrel(x))", "or all x. (Cute(x))", "or all x. (Still(x))", "or all x. (Not(x))", "or all x. (Animal(x))", "or all x. (Rabbit(x))", "or all x. (Squirrel(x))", "or all x. (Cute(x))", "or all x. (Still(x))", "or all x. (Not(x))", "or all x. (Animal(x))", "or all x. (Rabbit(x))", "or all x. (Squirrel(x))", "or all x. (Cute(x))", "or all x. (Still(x))", "or all x. (Not(x))", "or all x. (Animal(x))", "or all x. (Rabbit(x))", "or all x. (Squirrel(x))", "or all x. (Cute(x))", "or all x. (Still(x))", "or all x. (Not(x))", "or all x. (Animal(x))", "or all x. (Rabbit(x))", "or all x. (Squirrel(x))", "or all x. (Cute(x))", "or all x. (Still(x))", "or all x. (Not(x))", "or all x. (Animal(x))", "or all x. (Rabbit(x))", "or all x. (Squirrel(x))", "or all x. (Cute(x))", "or all x. (Still(x))", "or all x. (Not(x))", "or all x. (Animal(x))", "or all x. (Rabbit(x))", "or all x. (Squirrel(x))", "or all x. (Cute(x))", "or all x. (Still(x))", "or all x. (Not(x))", "or all x. (Animal(x))", "or all x. (Rabbit(x))", "or all x. (Squirrel(x))", "or all x. (Cute(x))", "or all x. (Still(x))", "or all x. (Not(x))", "or all x. (Animal(x))", "or all x. (Rabbit(x))", "or all x. (Squirrel(x))", "or all x. (Cute(x))", "or all x. (Still(x))", "or all x. (Not(x))", "or all x. (Animal(x))", "or all x. (Rabbit(x))", "or all x. (Squirrel(x))", "or all x. (Cute(x))", "or all x. (Still(x))", "or all x. (Not(x))", "or all x. (Animal(x))", "or all x. (Rabbit(x))", "or all x. (Squirrel(x))", "or all x. (Cute(x))", "or all x. (Still(x))", "or all x. (Not(x))", "or all x. (Animal(x))", "or all x. (Rabbit(x))", "or all x. (Squirrel(x))", "or all x. (Cute(x))", "or all x. (Still(x))", "or all x. (Not(x))", "or all x. (Animal(x))", "or all x. (Rabbit(x))", "or all x. (Squirrel(x))", "or all x. (Cute(x))", "or all x. (Still(x))", "or all x. (Not(x))", "or all x. (Animal(x))", "or all x. (Rabbit(x))", "or all x. (Squirrel(x))", "or all x. (Cute(x))", "or all x. (Still(x))", "or all x. (Not(x))", "or all x. (Animal(x))", "or all x. (Rabbit(x))", "or all x. (Squirrel(x))", "or all x. (Cute(x))", "or all x. (Still(x))", "or all x. (Not(x))", "or all x. (Animal(x))", "or all x. (Rabbit(x))", "or all x. (Squirrel(x))", "or all x. (Cute(x))", "or all x. (Still(x))", "or all x. (Not(x))", "or all x. (Animal(x))", "or all x. (Rabbit(x))", "or all x. (Squirrel(x))", "or all x. (Cute(x))", "or all x. (Still(x))", "or all x. (Not(x))", "or all x. (Animal(x))", "or all x. (Rabbit(x))", "or all x. (Squirrel(x))", "or all x. (Cute(x))", "or all x. (Still(x))", "or all x. (Not(x))", "or all x. (Animal(x))", "or all x. (Rabbit(x))", "or all x. (Squirrel(x))", "or all x. (Cute(x))", "or all x. (Still(x))", "or all x. (Not(x))", "or all x. (Animal(x))", "or all x. (Rabbit(x))", "or all x. (Squirrel(x))", "or all x. (Cute(x))", "or all x. (Still(x))", "or all x. (Not(x))", "or all x. (Animal(x))", "or all x. (Rabbit(x))", "or all x. (Squirrel(x))", "or all x. (Cute(x))", "or all x. (Still(x))", "or all x. (Not(x))", "or all x. (Animal(x))", "or all x. (Rabbit(x))", "or all x. (Squirrel(x))", "or all x. (Cute(x))", "or all x. (Still(x))", "or all x. (Not(x))", "or all x. (Animal(x))", "or all x. (Rabbit(x))", "or all x. (Squirrel(x))", "or all x. (Cute(x))", "or all x. (Still(x))", "or all x. (Not(x))", "or all x. (Animal(x))", "or all x. (Rabbit(x))", "or all x. (Squirrel(x))", "or all x. (Cute(x))", "or all x. (Still(x))", "or all x. (Not(x))", "or all x. (Animal(x))", "or all x. (Rabbit(x))", "or all x. (Squirrel(x))", "or all x. (Cute(x))", "or all x. (Still(x))", "or all x. (Not(x))", "or all x. (Animal(x))", "or all x. (Rabbit(x))", "or all x. (Squirrel(x))", "or all x. (Cute(x))", "or all x. (Still(x))", "or all x. (Not(x))", "or all x. (Animal(x))", "or all x. (Rabbit(x))", "or all x. (Squirrel(x))", "or all x. (Cute(x))", "or all x. (Still(x))", "or all x. (Not(x))", "or all x. (Animal(x))", "or all x. (Rabbit(x))", "or all x. (Squirrel(x))", "or all x. (Cute(x))", "or all x. (Still(x))", "or all x. (Not(x))", "or all x. (Animal(x))", "or all x. (Rabbit(x))", "or all x. (Squirrel(x))", "or all x. (Cute(x))", "or all x. (Still(x))", "or all x. (Not(x))", "or all x. (Animal(x))", "or all x. (Rabbit(x))", "or all x. (Squirrel(x))", "or all x. (Cute(x))", "or all x. (Still(x))", "or all x. (Not(x))", "or all x. (Animal(x))", "or all x. (Rabbit(x))", "or all x. (Squirrel(x))", "or all x. (Cute(x))", "or all x. (Still(x))", "or all x. (Not(x))", "or all x. (Animal(x))", "or all x. (Rabbit(x))", "or all x. (Squirrel(x))", "or all x. (Cute(x))", "or all x. (Still(x))", "or all x. (Not(x))", "or all x. (Animal(x))", "or all x. (Rabbit(x))", "or all x. (Squirrel(x))", "or all x. (Cute(x))", "or all x. (Still(x))", "or all x. (Not(x))", "or all x. (Animal(x))", "or all x. (Rabbit(x))", "or all x. (Squirrel(x))", "or all x. (Cute(x))", "or all x. (Still(x))", "or all x. (Not(x))", "or all x. (Animal(x))", "or all x. (Rabbit(x))", "or all x. (Squirrel(x))", "or all x. (Cute(x))", "or all x. (Still(x))", "or all x. (Not(x))", "or all x. (Animal(x))", "or all x. (Rabbit(x))", "or all x. (Squirrel(x))", "or all x. (Cute(x))", "or all x. (Still(x))", "or all x. (Not(x))", "or all x. (Animal(x))", "or all x. (Rabbit(x))", "or all x. (Squirrel(x))", "or all x. (Cute(x))", "or all x. (Still(x))", "or all x. (Not(x))", "or all x. (Animal(x))", "or all x. (Rabbit(x))", "or all x. (Squirrel(x))", "or all x. (Cute(x))", "or all x. (Still(x))", "or all x. (Not(x))", "or all x. (Animal(x))", "or all x. (Rabbit(x))", "or all x. (Squirrel(x))", "or all x. (Cute(x))", "or all x. (Still(x))", "or all x. (Not(x))", "or all x. (Animal(x))", "or all x. (Rabbit(x))", "or all x. (Squirrel(x))", "or all x. (Cute(x))", "or all x. (Still(x))", "or all x. (Not(x))", "or all x. (Animal(x))", "or all x. (Rabbit(x))", "or all x. (Squirrel(x))", "or all x. (Cute(x))", "or all x. (Still(x))", "or all x. (Not(x))", "or all x. (Animal(x))", "or all x. (Rabbit(x))", "or all x. (Squirrel(x))", "or all x. (Cute(x))", "or all x. (Still(x))", "or all x. (Not(x))", "or all x. (Animal(x))", "or all x. (Rabbit(x))", "or all x. (Squirrel(x))", "or all x. (Cute(x))", "or all x. (Still(x))", "or all x. (Not(x))", "or all x. (Animal(x))", "or all x. (Rabbit(x))", "or all x. (Squirrel(x))", "or all x. (Cute(x))", "or all x. (Still(x))", "or all x. (Not(x))", "or all x. (Animal(x))", "or all x. (Rabbit(x))", "or all x. (Squirrel(x))", "or all x. (Cute(x))", "or all x. (Still(x))", "or all x. (Not(x))", "or all x. (Animal(x))", "or all x. (Rabbit(x))", "or all x. (Squirrel(x))", "or all x. (Cute(x))", "or all x. (Still(x))", "or all x. (Not(x))", "or all x. (Animal(x))", "or all x. (Rabbit(x))", "or all x. (Squirrel(x))", "or all x. (Cute(x))", "or all x. (Still(x))", "or all x. (Not(x))", "or all x. (Animal(x))", "or all x. (Rabbit(x))", "or all x. (Squirrel(x))", "or all x. (Cute(x))", "or all x. (Still(x))", "or all x. (Not(x))", "or all x. (Animal(x))", "or all x. (Rabbit(x))", "or all x. (Squirrel(x))", "or all x. (Cute(x))", "or all x. (Still(x))", "or all x. (Not(x))", "or all x. (Animal(x))", "or all x. (Rabbit(x))", "or all x. (Squirrel(x))", "or all x. (Cute(x))", "or all x. (Still(x))", "or all x. (Not(x))", "or all x. (Animal(x))", "or all x. (Rabbit(x))", "or all x. (Squirrel(x))", "or all x. (Cute(x))", "or all x. (Still(x))", "or all x. (Not(x))", "or all x. (Animal(x))", "or all x. (Rabbit(x))", "or all x. (Squirrel(x))", "or all x. (Cute(x))", "or all x. (Still(x))", "or all x. (Not(x))", "or all x. (Animal(x))", "or all x. (Rabbit(x))", "or all x. (Squirrel(x))", "or all x. (Cute(x))", "or all x. (Still(x))", "or all x. (Not(x))", "or all x. (Animal(x))", "or all x. (Rabbit(x))", "or all x. (Squirrel(x))", "or all x. (Cute(x))", "or all x. (Still(x))", "or all x. (Not(x))", "or all x. (Animal(x))", "or all x. (Rabbit(x))", "or all x. (Squirrel(x))", "or all x. (Cute(x))", "or all x. (Still(x))", "or all x. (Not(x))", "or all x. (Animal(x))", "or all x. (Rabbit(x))", "or all x. (Squirrel(x))", "or all x. (Cute(x))", "or all x. (Still(x))", "or all x. (Not(x))", "or all x. (Animal(x))", "or all x. (Rabbit(x))", "or all x. (Squirrel(x))", "or all x. (Cute(x))", "or all x. (Still(x))", "or all x. (Not(x))", "or all x. (Animal(x))", "or all x. (Rabbit(x))", "or all x. (Squirrel(x))", "or all x. (Cute(x))", "or all x. (Still(x))", "or all x. (Not(x))", "or all x. (Animal(x))", "or all x. (Rabbit(x))", "or all x. (Squirrel(x))", "or all x. (Cute(x))", "or all x. (Still(x))", "or all x. (Not(x))", "or all x. (Animal(x))", "or all x. (Rabbit(x))", "or all x. (Squirrel(x))", "or all x. (Cute(x))", "or all x. (Still(x))", "or all x. (Not(x))", "or all x. (Animal(x))", "or all x. (Rabbit(x))", "or all x. (Squirrel(x))", "or all x. (Cute(x))", "or all x. (Still(x))", "or all x. (Not(x))", "or all x. (Animal(x))", "or all x. (Rabbit(x))", "or all x. (Squirrel(x))", "or all x. (Cute(x))", "or all x. (Still(x))", "or all x. (Not(x))", "or all x. (Animal(x))", "or all x. (Rabbit(x))", "or all x. (Squirrel(x))", "or all x. (Cute(x))", "or all x. (Still(x))", "or all x. (Not(x))", "or all x. (Animal(x))", "or all x. (Rabbit(x))", "or all x. (Squirrel(x))", "or all x. (Cute(x))", "or all x. (Still(x))", "or all x. (Not(x))", "or all x. (Animal(x))", "or all x. (Rabbit(x))", "or all x. (Squirrel(x))", "or all x. (Cute(x))", "or all x. (Still(x))", "or all x. (Not(x))", "or all x. (Animal(x))", "or all x. (Rabbit(x))", "or all x. (Squirrel(x))", "or all x. (Cute(x))", "or all x. (Still(x))", "or all x. (Not(x))", "or all x. (Animal(x))", "or all x. (Rabbit(x))", "or all x. (Squirrel(x))", "or all x. (Cute(x))", "or all x. (Still(x))", "or all x. (Not(x))", "or all x. (Animal(x))", "or all x. (Rabbit(x))", "or all x. (Squirrel(x))", "or all x. (Cute(x))", "or all x. (Still(x))", "or all x. (Not(x))", "or all x. (Animal(x))", "or all x. (Rabbit(x))", "or all x. (Squirrel(x))", "or all x. (Cute(x))", "or all x. (Still(x))", "or all x. (Not(x))", "or all x. (Animal(x))", "or all x. (Rabbit(x))", "or all x. (Squirrel(x))", "or all x. (Cute(x))", "or all x. (Still(x))", "or all x. (Not(x))", "or all x. (Animal(x))", "or all x. (Rabbit(x))", "or all x. (Squirrel(x))", "or all x. (Cute(x))", "or all x. (Still(x))", "or all x. (Not(x))", "or all x. (Animal(x))", "or all x. (Rabbit(x))", "or all x. (Squirrel(x))", "or all x. (Cute(x))", "or all x. (Still(x))", "or all x. (Not(x))", "or all x. (Animal(x))", "or all x. (Rabbit(x))", "or all x. (Squirrel(x))", "or all x. (Cute(x))", "or all x. (Still(x))", "or all x. (Not(x))", "or all x. (Animal(x))", "or all x. (Rabbit(x))", "or all x. (Squirrel(x))", "or all x. (Cute(x))", "or all x. (Still(x))", "or all x. (Not(x))", "or all x. (Animal(x))", "or all x. (Rabbit(x))", "or all x. (Squirrel(x))", "or all x. (Cute(x))", "or all x. (Still(x))", "or all x. (Not(x))", "or all x. (Animal(x))", "or all x. (Rabbit(x))", "or all x. (Squirrel(x))", "or all x. (Cute(x))", "or all x. (Still(x))", "or all x. (Not(x))", "or all x. (Animal(x))", "or all x. (Rabbit(x))", "or all x. (Squirrel(x))", "or all x. (Cute(x))", "or all x. (Still(x))", "or all x. (Not(x))", "or all x. (Animal(x))", "or all x. (Rabbit(x))", "or all x. (Squirrel(x))", "or all x. (Cute(x))", "or all x. (Still(x))", "or all x. (Not(x))", "or all x. (Animal(x))", "or all x. (Rabbit(x))", "or all x. (Squirrel(x))", "or all x. (Cute(x))", "or all x. (Still(x))", "or all x. (Not(x))"], "conclusion": "or all x. (Animal(x))", "error_type": "<class 'nltk.sem.logic.LogicalExpressionException'>", "error_message": "Unexpected token: 'or'.  Expression expected.\nor all x. (Animal(x))\n^", "stack_trace": "Traceback (most recent call last):\n  File \"/data/gpfs/projects/punim0478/bansaab/linc2/eval/tasks/owafoltask.py\", line 577, in _process_neurosymbolic\n    parsed = json.loads(gen)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/json/__init__.py\", line 346, in loads\n    return _default_decoder.decode(s)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/json/decoder.py\", line 337, in decode\n    obj, end = self.raw_decode(s, idx=_w(s, 0).end())\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/json/decoder.py\", line 355, in raw_decode\n    raise JSONDecodeError(\"Expecting value\", s, err.value) from None\njson.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/sem/logic.py\", line 154, in parse\n    result = self.process_next_expression(None)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/sem/logic.py\", line 293, in process_next_expression\n    raise UnexpectedTokenException(\nnltk.sem.logic.UnexpectedTokenException: Unexpected token: 'or'.  Expression expected.\n\nThe above exception was the direct cause of the following exception:\n\nTraceback (most recent call last):\n  File \"/data/gpfs/projects/punim0478/bansaab/linc2/eval/tasks/utils.py\", line 215, in evaluate\n    c = read_expr(conclusion)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/sem/logic.py\", line 957, in fromstring\n    return cls._logic_parser.parse(s, signature)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/sem/logic.py\", line 159, in parse\n    raise LogicalExpressionException(None, msg) from e\nnltk.sem.logic.LogicalExpressionException: Unexpected token: 'or'.  Expression expected.\nor all x. (Animal(x))\n^\n"}
{"timestamp": "2025-09-16T18:06:37.916859", "premises": ["all x. (Animal(x) -> Rabbit(x) | Squirrel(x))", "all x. (Cute(x) -> Rabbit(x))", "all x. (Skittish(x) -> Squirrel(x))", "all x. (Still(x) -> -Skittish(x))", "all x. (Skittish(x) -> Squirrel(x))", "not Skittish(Rock)", "all x. (Not(Skittish(x)) -> Rabbit(x))", "all x. (Not(Skittish(x)) -> Squirrel(x))", "Skittish(Squirrel)", "Rabbit(Rock) | Squirrel(Rock)", "Skittish(Rock) | Not(Still(Rock))", "Skittish(Rock) | Not(Skittish(Rock))", "Skittish(Rock) | Squirrel(Rock)", "Skittish(Rock) | Not(Skittish(Rock))", "Skittish(Rock) | Not(Skittish(Rock))", "Skittish(Rock) | Not(Skittish(Rock))", "Skittish(Rock) | Skittish(Rock)", "Skittish(Rock) | Skittish(Rock)", "Skittish(Rock) | Skittish(Rock)", "Skittish(Rock) | Skittish(Rock)", "Skittish(Rock) | Skittish(Rock)", "Skittish(Rock) | Skittish(Rock)", "Skittish(Rock) | Skittish(Rock)", "Skittish(Rock) | Skittish(Rock)", "Skittish(Rock) | Skittish(Rock)", "Skittish(Rock) | Skittish(Rock)", "Skittish(Rock) | Skittish(Rock)", "Skittish(Rock) | Skittish(Rock)", "Skittish(Rock) | Skittish(Rock)", "Skittish(Rock) | Skittish(Rock)", "Skittish(Rock) | Skittish(Rock)", "Skittish(Rock) | Skittish(Rock)", "Skittish(Rock) | Skittish(Rock)", "Skittish(Rock) | Skittish(Rock)", "Skittish(Rock) | Skittish(Rock)", "Skittish(Rock) | Skittish(Rock)", "Skittish(Rock) | Skittish(Rock)", "Skittish(Rock) | Skittish(Rock)", "Skittish(Rock) | Skittish(Rock)", "Skittish(Rock) | Skittish(Rock)", "Skittish(Rock) | Skittish(Rock)", "Skittish(Rock) | Skittish(Rock)", "Skittish(Rock) | Skittish(Rock)", "Skittish(Rock) | Skittish(Rock)", "Skittish(Rock) | Skittish(Rock)", "Skittish(Rock) | Skittish(Rock)", "Skittish(Rock) | Skittish(Rock)", "Skittish(Rock) | Skittish(Rock)", "Skittish(Rock) | Skittish(Rock)", "Skittish(Rock) | Skittish(Rock)", "Skittish(Rock) | Skittish(Rock)", "Skittish(Rock) | Skittish(Rock)", "Skittish(Rock) | Skittish(Rock)", "Skittish(Rock) | Skittish(Rock)", "Skittish(Rock) | Skittish(Rock)", "Skittish(Rock) | Skittish(Rock)", "Skittish(Rock) | Skittish(Rock)", "Skittish(Rock) | Skittish(Rock)", "Skittish(Rock) | Skittish(Rock)", "Skittish(Rock) | Skittish(Rock)", "Skittish(Rock) | Skittish(Rock)", "Skittish(Rock) | Skittish(Rock)", "Skittish(Rock) | Skittish(Rock)", "Skittish(Rock) | Skittish(Rock)", "Skittish(Rock) | Skittish(Rock)", "Skittish(Rock) | Skittish(Rock)", "Skittish(Rock) | Skittish(Rock)", "Skittish(Rock) | Skittish(Rock)", "Skittish(Rock) | Skittish(Rock)", "Skittish(Rock) | Skittish(Rock)", "Skittish(Rock) | Skittish(Rock)", "Skittish(Rock) | Skittish(Rock)", "Skittish(Rock) | Skittish(Rock)", "Skittish(Rock) | Skittish(Rock)", "Skittish(Rock) | Skittish(Rock)", "Skittish(Rock) | Skittish(Rock)", "Skittish(Rock) | Skittish(Rock)", "Skittish(Rock) | Skittish(Rock)", "Skittish(Rock) | Skittish(Rock)", "Skittish(Rock) | Skittish(Rock)", "Skittish(Rock) | Skittish(Rock)", "Skittish(Rock) | Skittish(Rock)", "Skittish(Rock) | Skittish(Rock)", "Skittish(Rock) | Skittish(Rock)", "Skittish(Rock) | Skittish(Rock)", "Skittish(Rock) | Skittish(Rock)", "Skittish(Rock) | Skittish(Rock)", "Skittish(Rock) | Skittish(Rock)", "Skittish(Rock) | Skittish(Rock)", "Skittish(Rock) | Skittish(Rock)", "Skittish(Rock) | Skittish(Rock)", "Skittish(Rock) | Skittish(Rock)", "Skittish(Rock) | Skittish(Rock)", "Skittish(Rock) | Skittish(Rock)", "Skittish(Rock) | Skittish(Rock)", "Skittish(Rock) | Skittish(Rock)", "Skittish(Rock) | Skittish(Rock)", "Skittish(Rock) | Skittish(Rock)", "Skittish(Rock) | Skittish(Rock)", "Skittish(Rock) | Skittish(Rock)", "Skittish(Rock) | Skittish(Rock)", "Skittish(Rock) | Skittish(Rock)", "Skittish(Rock) | Skittish(Rock)", "Skittish(Rock) | Skittish(Rock)", "Skittish(Rock) | Skittish(Rock)", "Skittish(Rock) | Skittish(Rock)", "Skittish(Rock) | Skittish(Rock)", "Skittish(Rock) | Skittish(Rock)", "Skittish(Rock) | Skittish(Rock)", "Skittish(Rock) | Skittish(Rock)", "Skittish(Rock) | Skittish(Rock)", "Skittish(Rock) | Skittish(Rock)", "Skittish(Rock) | Skittish(Rock)", "Skittish(Rock) | Skittish(Rock)", "Skittish(Rock) | Skittish(Rock)", "Skittish(Rock) | Skittish(Rock)", "Skittish(Rock) | Skittish(Rock)", "Skittish(Rock) | Skittish(Rock)", "Skittish(Rock) | Skittish(Rock)", "Skittish(Rock) | Skittish(Rock)", "Skittish(Rock) | Skittish(Rock)", "Skittish(Rock) | Skittish(Rock)", "Skittish(Rock) | Skittish(Rock)", "Skittish(Rock) | Skittish(Rock)", "Skittish(Rock) | Skittish(Rock)", "Skittish(Rock) | Skittish(Rock)", "Skittish(Rock) | Skittish(Rock)", "Skittish(Rock) | Skittish(Rock)", "Skittish(Rock) | Skittish(Rock)", "Skittish(Rock) | Skittish(Rock)", "Skittish(Rock) | Skittish(Rock)", "Skittish(Rock) | Skittish(Rock)", "Skittish(Rock) | Skittish(Rock)", "Skittish(Rock) | Skittish(Rock)", "Skittish(Rock) | Skittish(Rock)", "Skittish(Rock) | Skittish(Rock)", "Skittish(Rock) | Skittish(Rock)", "Skittish(Rock) | Skittish(Rock)", "Skittish(Rock) | Skittish(Rock)", "Skittish(Rock) | Skittish(Rock)", "Skittish(Rock) | Skittish(Rock)", "Skittish(Rock) | Skittish(Rock)", "Skittish(Rock) | Skittish(Rock)", "Skittish(Rock) | Skittish(Rock)", "Skittish(Rock) | Skittish(Rock)", "Skittish(Rock) | Skittish(Rock)", "Skittish(Rock) | Skittish(Rock)", "Skittish(Rock) | Skittish(Rock)", "Skittish(Rock) | Skittish(Rock)", "Skittish(Rock) | Skittish(Rock)", "Skittish(Rock) | Skittish(Rock)", "Skittish(Rock) | Skittish(Rock)", "Skittish(Rock) | Skittish(Rock)", "Skittish(Rock) | Skittish(Rock)", "Skittish(Rock) | Skittish(Rock)", "Skittish(Rock) | Skittish(Rock)", "Skittish(Rock) | Skittish(Rock)", "Skittish(Rock) | Skittish(Rock)", "Skittish(Rock) | Skittish(Rock)", "Skittish(Rock) | Skittish(Rock)", "Skittish(Rock) | Skittish(Rock)", "Skittish(Rock) | Skittish(Rock)", "Skittish(Rock) | Skittish(Rock)", "Skittish(Rock) | Skittish(Rock)", "Skittish(Rock) | Skittish(Rock)", "Skittish(Rock) | Skittish(Rock)", "Skittish(Rock) | Skittish(Rock)", "Skittish(Rock) | Skittish(Rock)", "Skittish(Rock) | Skittish(Rock)", "Skittish(Rock) | Skittish(Rock)", "Skittish(Rock) | Skittish(Rock)", "Skittish(Rock) | Skittish(Rock)", "Skittish(Rock) | Skittish(Rock)", "Skittish(Rock) | Skittish(Rock)", "Skittish(Rock) | Skittish(Rock)", "Skittish(Rock) | Skittish(Rock)", "Skittish(Rock) | Skittish(Rock)", "Skittish(Rock) | Skittish(Rock)", "Skittish(Rock) | Skittish(Rock)", "Skittish(Rock) | Skittish(Rock)", "Skittish(Rock) | Skittish(Rock)", "Skittish(Rock) | Skittish(Rock)", "Skittish(Rock) | Skittish(Rock)", "Skittish(Rock) | Skittish(Rock)", "Skittish(Rock) | Skittish(Rock)", "Skittish(Rock) | Skittish(Rock)", "Skittish(Rock) | Skittish(Rock)", "Skittish(Rock) | Skittish(Rock)", "Skittish(Rock) | Skittish(Rock)", "Skittish(Rock) | Skittish(Rock)", "Skittish(Rock) | Skittish(Rock)", "Skittish(Rock) | Skittish(Rock)", "Skittish(Rock) | Skittish(Rock)", "Skittish(Rock) | Skittish(Rock)", "Skittish(Rock) | Skittish(Rock)", "Skittish(Rock) | Skittish(Rock)", "Skittish(Rock) | Skittish(Rock)", "Skittish(Rock) | Skittish(Rock)", "Skittish(Rock) | Skittish(Rock)", "Skittish(Rock) | Skittish(Rock)", "Skittish(Rock) | Skittish(Rock)", "Skittish(Rock) | Skittish(Rock)", "Skittish(Rock) | Skittish(Rock)", "Skittish(Rock) | Skittish(Rock)", "Skittish(Rock) | Skittish(Rock)", "Skittish(Rock) | Skittish(Rock)", "Skittish(Rock) | Skittish(Rock)", "Skittish(Rock) | Skittish(Rock)", "Skittish(Rock) | Skittish(Rock)", "Skittish(Rock) | Skittish(Rock)", "Skittish(Rock) | Skittish(Rock)", "Skittish(Rock) | Skittish(Rock)", "Skittish(Rock) | Skittish(Rock)", "Skittish(Rock) | Skittish(Rock)", "Skittish(Rock) | Skittish(Rock)", "Skittish(Rock) | Skittish(Rock)", "Skittish(Rock) | Skittish(Rock)", "Skittish(Rock) | Skittish(Rock)", "Skittish(Rock) | Skittish(Rock)", "Skittish(Rock) | Skittish(Rock)", "Skittish(Rock) | Skittish(Rock)", "Skittish(Rock) | Skittish(Rock)", "Skittish(Rock) | Skittish(Rock)", "Skittish(Rock) | Skittish(Rock)", "Skittish(Rock) | Skittish(Rock)", "Skittish(Rock) | Skittish(Rock)", "Skittish(Rock) | Skittish(Rock)", "Skittish(Rock) | Skittish(Rock)", "Skittish(Rock) | Skittish(Rock)", "Skittish(Rock) | Skittish(Rock)", "Skittish(Rock) | Skittish(Rock)", "Skittish(Rock) | Skittish(Rock)", "Skittish(Rock) | Skittish(Rock)", "Skittish(Rock) | Skittish(Rock)", "Skittish(Rock) | Skittish(Rock)", "Skittish(Rock) | Skittish(Rock)", "Skittish(Rock) | Skittish(Rock)", "Skittish(Rock) | Skittish(Rock)", "Skittish(Rock) | Skittish(Rock)", "Skittish(Rock) | Skittish(Rock)", "Skittish(Rock) | Skittish(Rock)", "Skittish(Rock) | Skittish(Rock)", "Skittish(Rock) | Skittish(Rock)", "Skittish(Rock) | Skittish(Rock)", "Skittish(Rock) | Skittish(Rock)", "Skittish(Rock) | Skittish(Rock)", "Skittish(Rock) | Skittish(Rock)", "Skittish(Rock) | Skittish(Rock)", "Skittish(Rock) | Skittish(Rock)", "Skittish(Rock) | Skittish(Rock)", "Skittish(Rock) | Skittish(Rock)", "Skittish(Rock) | Skittish(Rock)", "Skittish(Rock) | Skittish(Rock)", "Skittish(Rock) | Skittish(Rock)", "Skittish(Rock) | Skittish(Rock)", "Skittish(Rock) | Skittish(Rock)", "Skittish(Rock) | Skittish(Rock)", "Skittish(Rock) | Skittish(Rock)", "Skittish(Rock) | Skittish(Rock)", "Skittish(Rock) | Skittish(Rock)", "Skittish(Rock) | Skittish(Rock)", "Skittish(Rock) | Skittish(Rock)", "Skittish(Rock) | Skittish(Rock)", "Skittish(Rock) | Skittish(Rock)", "Skittish(Rock) | Skittish(Rock)", "Skittish(Rock) | Skittish(Rock)", "Skittish(Rock) | Skittish(Rock)", "Skittish(Rock) | Skittish(Rock)", "Skittish(Rock) | Skittish(Rock)", "Skittish(Rock) | Skittish(Rock)", "Skittish(Rock) | Skittish(Rock)", "Skittish(Rock) | Skittish(Rock)", "Skittish(Rock) | Skittish(Rock)", "Skittish(Rock) | Skittish(Rock)", "Skittish(Rock) | Skittish(Rock)", "Skittish(Rock) | Skittish(Rock)", "Skittish(Rock) | Skittish(Rock)", "Skittish(Rock) | Skittish(Rock)", "Skittish(Rock) | Skittish(Rock)", "Skittish(Rock) | Skittish(Rock)", "Skittish(Rock) | Skittish(Rock)", "Skittish(Rock) | Skittish(Rock)", "Skittish(Rock) | Skittish(Rock)", "Skittish(Rock) | Skittish(Rock)", "Skittish(Rock) | Skittish(Rock)", "Skittish(Rock) | Skittish(Rock)", "Skittish(Rock) | Skittish(Rock)", "Skittish(Rock) | Skittish(Rock)", "Skittish(Rock) | Skittish(Rock)", "Skittish(Rock) | Skittish(Rock)", "Skittish(Rock) | Skittish(Rock)", "Skittish(Rock) | Skittish(Rock)", "Skittish(Rock) | Skittish(Rock)", "Skittish(Rock) | Skittish(Rock)", "Skittish(Rock) | Skittish(Rock)", "Skittish(Rock) | Skittish(Rock)", "Skittish(Rock) | Skittish(Rock)", "Skittish(Rock) | Skittish(Rock)", "Skittish(Rock) | Skittish(Rock)", "Skittish(Rock) | Skittish(Rock)", "Skittish(Rock) | Skittish(Rock)", "Skittish(Rock) | Skittish(Rock)", "Skittish(Rock) | Skittish(Rock)", "Skittish(Rock) | Skittish(Rock)", "Skittish(Rock) | Skittish(Rock)", "Skittish(Rock) | Skittish(Rock)", "Skittish(Rock) | Skittish(Rock)", "Skittish(Rock) | Skittish(Rock)", "Skittish(Rock) | Skittish(Rock)", "Skittish(Rock) | Skittish(Rock)", "Skittish(Rock) | Skittish(Rock)", "Skittish(Rock) | Skittish(Rock)", "Skittish(Rock) | Skittish(Rock)", "Skittish(Rock) | Skittish(Rock)", "Skittish(Rock) | Skittish(Rock)", "Skittish(Rock) | Skittish(Rock)", "Skittish(Rock) | Skittish(Rock)", "Skittish(Rock) | Skittish(Rock)", "Skittish(Rock) | Skittish(Rock)", "Skittish(Rock) | Skittish(Rock)", "Skittish(Rock) | Skittish(Rock)", "Skittish(Rock) | Skittish(Rock)", "Skittish(Rock) | Skittish(Rock)", "Skittish(Rock) | Skittish(Rock)", "Skittish(Rock) | Skittish(Rock)", "Skittish(Rock) | Skittish(Rock)", "Skittish(Rock) | Skittish(Rock)", "Skittish(Rock) | Skittish(Rock)", "Skittish(Rock) | Skittish(Rock)", "Skittish(Rock) | Skittish(Rock)", "Skittish(Rock) | Skittish(Rock)", "Skittish(Rock) | Skittish(Rock)", "Skittish(Rock) | Skittish(Rock)", "Skittish(Rock) | Skittish(Rock)", "Skittish(Rock) | Skittish(Rock)", "Skittish(Rock) | Skittish(Rock)", "Skittish(Rock) | Skittish(Rock)", "Skittish(Rock) | Skittish(Rock)", "Skittish(Rock) | Skittish(Rock)", "Skittish(Rock) | Skittish(Rock)", "Skittish(Rock) | Skittish(Rock)", "Skittish(Rock) | Skittish(Rock)", "Skittish(Rock) | Skittish(Rock)", "Skittish(Rock) | Skittish(Rock)", "Skittish(Rock) | Skittish(Rock)", "Skittish(Rock) | Skittish(Rock)", "Skittish(Rock) | Skittish(Rock)", "Skittish(Rock) | Skittish(Rock)", "Skittish(Rock) | Skittish(Rock)", "Skittish(Rock) | Skittish(Rock)", "Skittish(Rock) | Skittish(Rock)", "Skittish(Rock) | Skittish(Rock)", "Skittish(Rock) | Skittish(Rock)", "Skittish(Rock) | Skittish(Rock)", "Skittish(Rock) | Skittish(Rock)", "Skittish(Rock) | Skittish(Rock)", "Skittish(Rock) | Skittish(Rock)", "Skittish(Rock) | Skittish(Rock)", "Skittish(Rock) | Skittish(Rock)", "Skittish(Rock) | Skittish(Rock)", "Skittish(Rock) | Skittish(Rock)", "Skittish(Rock) | Skittish(Rock)", "Skittish(Rock) | Skittish(Rock)", "Skittish(Rock) | Skittish(Rock)", "Skittish(Rock) | Skittish(Rock)", "Skittish(Rock) | Skittish(Rock)", "Skittish(Rock) | Skittish(Rock)", "Skittish(Rock) | Skittish(Rock)", "Skittish(Rock) | Skittish(Rock)", "Skittish(Rock) | Skittish(Rock)", "Skittish(Rock) | Skittish(Rock)", "Skittish(Rock) | Skittish(Rock)", "Skittish(Rock) | Skittish(Rock)", "Skittish(Rock) | Skittish(Rock)", "Skittish(Rock) | Skittish(Rock)", "Skittish(Rock) | Skittish(Rock)", "Skittish(Rock) | Skittish(Rock)", "Skittish(Rock) | Skittish(Rock)", "Skittish(Rock) | Skittish(Rock)", "Skittish(Rock) | Skittish(Rock)", "Skittish(Rock) | Skittish(Rock)", "Skittish(Rock) | Skittish(Rock)", "Skittish(Rock) | Skittish(Rock)", "Skittish(Rock) | Skittish(Rock)", "Skittish(Rock) | Skittish(Rock)", "Skittish(Rock) | Skittish(Rock)", "Skittish(Rock) | Skittish(Rock)", "Skittish(Rock) | Skittish(Rock)", "Skittish(Rock) | Skittish(Rock)", "Skittish(Rock) | Skittish(Rock)", "Skittish(Rock) | Skittish(Rock)", "Skittish(Rock) | Skittish(Rock)", "Skittish(Rock) | Skittish(Rock)", "Skittish(Rock) | Skittish(Rock)", "Skittish(Rock) | Skittish(Rock)", "Skittish(Rock) | Skittish(Rock)", "Skittish(Rock) | Skittish(Rock)", "Skittish(Rock) | Skittish(Rock)", "Skittish(Rock) | Skittish(Rock)", "Skittish(Rock) | Skittish(Rock)", "Skittish(Rock) | Skittish(Rock)", "Skittish(Rock) | Skittish(Rock)", "Skittish(Rock) | Skittish(Rock)", "Skittish(Rock) | Skittish(Rock)", "Skittish(Rock) | Skittish(Rock)", "Skittish(Rock) | Skittish(Rock)", "Skittish(Rock) | Skittish(Rock)", "Skittish(Rock) | Skittish(Rock)", "Skittish(Rock) | Skittish(Rock)", "Skittish(Rock) | Skittish(Rock)", "Skittish(Rock) | Skittish(Rock)", "Skittish(Rock) | Skittish(Rock)", "Skittish(Rock) | Skittish(Rock)", "Skittish(Rock) | Skittish(Rock)", "Skittish(Rock) | Skittish(Rock)", "Skittish(Rock) | Skittish(Rock)", "Skittish(Rock) | Skittish(Rock)", "Skittish(Rock) | Skittish(Rock)", "Skittish(Rock) | Skittish(Rock)", "Skittish(Rock) | Skittish(Rock)", "Skittish(Rock) | Skittish(Rock)", "Skittish(Rock) | Skittish(Rock)", "Skittish(Rock) | Skittish(Rock)", "Skittish(Rock) | Skittish(Rock)", "Skittish(Rock) | Skittish(Rock)", "Skittish(Rock) | Skittish(Rock)", "Skittish(Rock) | Skittish(Rock)", "Skittish(Rock) | Skittish(Rock)", "Skittish(Rock) | Skittish(Rock)", "Skittish(Rock) | Skittish(Rock)"], "conclusion": "Skittish(R", "error_type": "<class 'nltk.sem.logic.LogicalExpressionException'>", "error_message": "End of input found.  Expected token ')'.\nSkittish(R\n          ^", "stack_trace": "Traceback (most recent call last):\n  File \"/data/gpfs/projects/punim0478/bansaab/linc2/eval/tasks/owafoltask.py\", line 577, in _process_neurosymbolic\n    parsed = json.loads(gen)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/json/__init__.py\", line 346, in loads\n    return _default_decoder.decode(s)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/json/decoder.py\", line 337, in decode\n    obj, end = self.raw_decode(s, idx=_w(s, 0).end())\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/json/decoder.py\", line 355, in raw_decode\n    raise JSONDecodeError(\"Expecting value\", s, err.value) from None\njson.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/sem/logic.py\", line 270, in token\n    tok = self._buffer[self._currentIndex]\nIndexError: list index out of range\n\nThe above exception was the direct cause of the following exception:\n\nTraceback (most recent call last):\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/sem/logic.py\", line 562, in assertNextToken\n    tok = self.token()\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/sem/logic.py\", line 276, in token\n    raise ExpectedMoreTokensException(self._currentIndex + 1) from e\nnltk.sem.logic.ExpectedMoreTokensException: End of input found.  More tokens expected.\n\nThe above exception was the direct cause of the following exception:\n\nTraceback (most recent call last):\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/sem/logic.py\", line 154, in parse\n    result = self.process_next_expression(None)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/sem/logic.py\", line 290, in process_next_expression\n    accum = self.handle(tok, context)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/sem/logic.py\", line 303, in handle\n    return self.handle_variable(tok, context)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/sem/logic.py\", line 359, in handle_variable\n    self.assertNextToken(Tokens.CLOSE)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/sem/logic.py\", line 564, in assertNextToken\n    raise ExpectedMoreTokensException(\nnltk.sem.logic.ExpectedMoreTokensException: End of input found.  Expected token ')'.\n\nThe above exception was the direct cause of the following exception:\n\nTraceback (most recent call last):\n  File \"/data/gpfs/projects/punim0478/bansaab/linc2/eval/tasks/utils.py\", line 215, in evaluate\n    c = read_expr(conclusion)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/sem/logic.py\", line 957, in fromstring\n    return cls._logic_parser.parse(s, signature)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/sem/logic.py\", line 159, in parse\n    raise LogicalExpressionException(None, msg) from e\nnltk.sem.logic.LogicalExpressionException: End of input found.  Expected token ')'.\nSkittish(R\n          ^\n"}
{"timestamp": "2025-09-16T18:06:37.935218", "premises": ["all x. (Rabbit(x) -> Cute(x))", "exists x. (Turtle(x))", "all x. (Animal(x) -> Rabbit(x) | Squirrel(x))", "if skittish(x) then not still(x)", "all x. (Squirrel(x) -> Skittish(x))", "still(Rock)", "if Rabbit(x) or Squirrel(x) or skittish(x) or not still(x) then Rock is x", "if Rock is not turtle or squirrel then Rock is cute or skittish or not still"], "conclusion": "not (turtle(Rock) or squirrel(Rock)) or (cute(Rock) or skittish(Rock) or not still(Rock))", "error_type": "<class 'nltk.sem.logic.LogicalExpressionException'>", "error_message": "Unexpected token: 'skittish'.\nif skittish(x) then not still(x)\n   ^", "stack_trace": "Traceback (most recent call last):\n  File \"/data/gpfs/projects/punim0478/bansaab/linc2/eval/tasks/owafoltask.py\", line 577, in _process_neurosymbolic\n    parsed = json.loads(gen)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/json/__init__.py\", line 346, in loads\n    return _default_decoder.decode(s)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/json/decoder.py\", line 337, in decode\n    obj, end = self.raw_decode(s, idx=_w(s, 0).end())\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/json/decoder.py\", line 355, in raw_decode\n    raise JSONDecodeError(\"Expecting value\", s, err.value) from None\njson.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/sem/logic.py\", line 156, in parse\n    raise UnexpectedTokenException(self._currentIndex + 1, self.token(0))\nnltk.sem.logic.UnexpectedTokenException: Unexpected token: 'skittish'.\n\nThe above exception was the direct cause of the following exception:\n\nTraceback (most recent call last):\n  File \"/data/gpfs/projects/punim0478/bansaab/linc2/eval/tasks/utils.py\", line 216, in evaluate\n    p_list = [read_expr(p) for p in premises]\n  File \"/data/gpfs/projects/punim0478/bansaab/linc2/eval/tasks/utils.py\", line 216, in <listcomp>\n    p_list = [read_expr(p) for p in premises]\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/sem/logic.py\", line 957, in fromstring\n    return cls._logic_parser.parse(s, signature)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/sem/logic.py\", line 159, in parse\n    raise LogicalExpressionException(None, msg) from e\nnltk.sem.logic.LogicalExpressionException: Unexpected token: 'skittish'.\nif skittish(x) then not still(x)\n   ^\n"}
{"timestamp": "2025-09-16T18:06:37.942872", "premises": ["all x. (Rabbit(x) -> Cute(x))", "exists x. (Turtle(x))", "all x. (Animal(x) -> (Rabbit(x) | Squirrel(x)))", "all x. (Skittish(x) -> NotStill(x))", "all x. (Squirrel(x) -> Skittish(x))", "NotStill(Rock)"], "conclusion": "(Rock \u2228 Cute(Rock)) & (Rock \u2228 Skittish(Rock))", "error_type": "<class 'nltk.sem.logic.LogicalExpressionException'>", "error_message": "Unexpected token: '\u2228'.  Expected token ')'.\n(Rock \u2228 Cute(Rock)) & (Rock \u2228 Skittish(Rock))\n      ^", "stack_trace": "Traceback (most recent call last):\n  File \"/data/gpfs/projects/punim0478/bansaab/linc2/eval/tasks/owafoltask.py\", line 577, in _process_neurosymbolic\n    parsed = json.loads(gen)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/json/__init__.py\", line 346, in loads\n    return _default_decoder.decode(s)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/json/decoder.py\", line 337, in decode\n    obj, end = self.raw_decode(s, idx=_w(s, 0).end())\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/json/decoder.py\", line 355, in raw_decode\n    raise JSONDecodeError(\"Expecting value\", s, err.value) from None\njson.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/sem/logic.py\", line 154, in parse\n    result = self.process_next_expression(None)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/sem/logic.py\", line 290, in process_next_expression\n    accum = self.handle(tok, context)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/sem/logic.py\", line 315, in handle\n    return self.handle_open(tok, context)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/sem/logic.py\", line 450, in handle_open\n    self.assertNextToken(Tokens.CLOSE)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/sem/logic.py\", line 573, in assertNextToken\n    raise UnexpectedTokenException(self._currentIndex, tok, expected)\nnltk.sem.logic.UnexpectedTokenException: Unexpected token: '\u2228'.  Expected token ')'.\n\nThe above exception was the direct cause of the following exception:\n\nTraceback (most recent call last):\n  File \"/data/gpfs/projects/punim0478/bansaab/linc2/eval/tasks/utils.py\", line 215, in evaluate\n    c = read_expr(conclusion)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/sem/logic.py\", line 957, in fromstring\n    return cls._logic_parser.parse(s, signature)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/sem/logic.py\", line 159, in parse\n    raise LogicalExpressionException(None, msg) from e\nnltk.sem.logic.LogicalExpressionException: Unexpected token: '\u2228'.  Expected token ')'.\n(Rock \u2228 Cute(Rock)) & (Rock \u2228 Skittish(Rock))\n      ^\n"}
{"timestamp": "2025-09-16T18:06:37.936599", "premises": ["all x. (Rabbit(x) -> Cute(x))", "(Rock is not Turtle(rock) and Rock is not Squirrel(rock)) -> Cute(rock) | Skittish(rock)", "all x. (Rains(x) -> Cloudy(x))", "Sunny(x)", "all x. (Rains(x) | Sunny(x))", "all x. (Rains(x) -> NotSunny(x))", "all x. (Cloudy(x) -> NotSunny(x))", "all x. (Sunny(x) -> NotCloudy(x))", "all x. (NotCloudy(x) -> Sunny(x))", "all x. (NotSunny(x) -> NotShining(x))"], "conclusion": "Rains(x)", "error_type": "<class 'nltk.sem.logic.LogicalExpressionException'>", "error_message": "Unexpected token: 'is'.  Expected token ')'.\n(Rock is not Turtle(rock) and Rock is not Squirrel(rock)) -> Cute(rock) | Skittish(rock)\n      ^", "stack_trace": "Traceback (most recent call last):\n  File \"/data/gpfs/projects/punim0478/bansaab/linc2/eval/tasks/owafoltask.py\", line 577, in _process_neurosymbolic\n    parsed = json.loads(gen)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/json/__init__.py\", line 346, in loads\n    return _default_decoder.decode(s)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/json/decoder.py\", line 337, in decode\n    obj, end = self.raw_decode(s, idx=_w(s, 0).end())\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/json/decoder.py\", line 355, in raw_decode\n    raise JSONDecodeError(\"Expecting value\", s, err.value) from None\njson.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/sem/logic.py\", line 154, in parse\n    result = self.process_next_expression(None)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/sem/logic.py\", line 290, in process_next_expression\n    accum = self.handle(tok, context)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/sem/logic.py\", line 315, in handle\n    return self.handle_open(tok, context)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/sem/logic.py\", line 450, in handle_open\n    self.assertNextToken(Tokens.CLOSE)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/sem/logic.py\", line 573, in assertNextToken\n    raise UnexpectedTokenException(self._currentIndex, tok, expected)\nnltk.sem.logic.UnexpectedTokenException: Unexpected token: 'is'.  Expected token ')'.\n\nThe above exception was the direct cause of the following exception:\n\nTraceback (most recent call last):\n  File \"/data/gpfs/projects/punim0478/bansaab/linc2/eval/tasks/utils.py\", line 216, in evaluate\n    p_list = [read_expr(p) for p in premises]\n  File \"/data/gpfs/projects/punim0478/bansaab/linc2/eval/tasks/utils.py\", line 216, in <listcomp>\n    p_list = [read_expr(p) for p in premises]\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/sem/logic.py\", line 957, in fromstring\n    return cls._logic_parser.parse(s, signature)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/sem/logic.py\", line 159, in parse\n    raise LogicalExpressionException(None, msg) from e\nnltk.sem.logic.LogicalExpressionException: Unexpected token: 'is'.  Expected token ')'.\n(Rock is not Turtle(rock) and Rock is not Squirrel(rock)) -> Cute(rock) | Skittish(rock)\n      ^\n"}
{"timestamp": "2025-09-16T18:12:11.946807", "premises": ["all x. (Rabbit(x) -> Cute(x))", "all x. (Turtle(x) -> exists(x))", "all x. (Rabbit(x) v Squirrel(x) -> Animal(x))", "all x. (Skittish(x) -> Not Still(x))", "all x. (Squirrel(x) -> Skittish(x))", "Not Still(Rock)", "Skittish(Squirrel(x))", "Not Still(x) & Skittish(x)", "Cute(x) & Skittish(x) -> Squirrel(x)", "Cute(x) & Still(x) -> Turtle(x)", "Squirrel(x) -> Not Still(x) & Skittish(x)", "Turtle(x) -> Still(x) & Skittish(x)", "Cute(Rock) & Still(Rock) -> Turtle(Rock) & Skittish(Rock)", "Turtle(Rock) & Skittish(Rock)", "Squirrel(Rock) -> Not Still(Rock) & Skittish(Rock)", "Turtle(Rock) -> Still(Rock) & Skittish(Rock)", "Squirrel(Rock) -> Not Still(Rock) & Skittish(Rock)", "Squirrel(Rock) -> Not Still(Rock) & Skittish(Rock)", "Turtle(Rock) -> Still(Rock) & Skittish(Rock)", "Cute(Rock) & Skittish(Rock) -> Squirrel(Rock)", "Cute(Rock) & Still(Rock) -> Turtle(Rock)", "Cute(Rock) & Skittish(Rock) -> Squirrel(Rock)", "Cute(Rock) & Skittish(Rock) -> Turtle(Rock)", "Turtle(Rock) -> Still(Rock) & Skittish(Rock)", "Squirrel(Rock) -> Not Still(Rock) & Skittish(Rock)", "Turtle(Rock) -> Skittish(Rock)", "Skittish(Rock) -> Not Still(Rock)", "Turtle(Rock) -> Skittish(Rock)", "Skittish(Rock) -> Not Still(Rock)", "Turtle(Rock) -> Skittish(Rock)", "Skittish(Rock) -> Not Still(Rock)", "Turtle(Rock) -> Skittish(Rock)", "Skittish(Rock) -> Not Still(Rock)", "Turtle(Rock) -> Skittish(Rock)", "Skittish(Rock) -> Not Still(Rock)", "Turtle(Rock) -> Skittish(Rock)", "Skittish(Rock) -> Not Still(Rock)", "Turtle(Rock) -> Skittish(Rock)", "Skittish(Rock) -> Not Still(Rock)", "Turtle(Rock) -> Skittish(Rock)", "Skittish(Rock) -> Not Still(Rock)", "Turtle(Rock) -> Skittish(Rock)", "Skittish(Rock) -> Not Still(Rock)", "Turtle(Rock) -> Skittish(Rock)", "Skittish(Rock) -> Not Still(Rock)", "Turtle(Rock) -> Skittish(Rock)", "Skittish(Rock) -> Not Still(Rock)", "Turtle(Rock) -> Skittish(Rock)", "Skittish(Rock) -> Not Still(Rock)", "Turtle(Rock) -> Skittish(Rock)", "Skittish(Rock) -> Not Still(Rock)", "Turtle(Rock) -> Skittish(Rock)", "Skittish(Rock) -> Not Still(Rock)", "Turtle(Rock) -> Skittish(Rock)", "Skittish(Rock) -> Not Still(Rock)", "Turtle(Rock) -> Skittish(Rock)", "Skittish(Rock) -> Not Still(Rock)", "Turtle(Rock) -> Skittish(Rock)", "Skittish(Rock) -> Not Still(Rock)", "Turtle(Rock) -> Skittish(Rock)", "Skittish(Rock) -> Not Still(Rock)", "Turtle(Rock) -> Skittish(Rock)", "Skittish(Rock) -> Not Still(Rock)", "Turtle(Rock) -> Skittish(Rock)", "Skittish(Rock) -> Not Still(Rock)", "Turtle(Rock) -> Skittish(Rock)", "Skittish(Rock) -> Not Still(Rock)", "Turtle(Rock) -> Skittish(Rock)", "Skittish(Rock) -> Not Still(Rock)", "Turtle(Rock) -> Skittish(Rock)", "Skittish(Rock) -> Not Still(Rock)", "Turtle(Rock) -> Skittish(Rock)", "Skittish(Rock) -> Not Still(Rock)", "Turtle(Rock) -> Skittish(Rock)", "Skittish(Rock) -> Not Still(Rock)", "Turtle(Rock) -> Skittish(Rock)", "Skittish(Rock) -> Not Still(Rock)", "Turtle(Rock) -> Skittish(Rock)", "Skittish(Rock) -> Not Still(Rock)", "Turtle(Rock) -> Skittish(Rock)", "Skittish(Rock) -> Not Still(Rock)", "Turtle(Rock) -> Skittish(Rock)", "Skittish(Rock) -> Not Still(Rock)", "Turtle(Rock) -> Skittish(Rock)", "Skittish(Rock) -> Not Still(Rock)", "Turtle(Rock) -> Skittish(Rock)", "Skittish(Rock) -> Not Still(Rock)", "Turtle(Rock) -> Skittish(Rock)", "Skittish(Rock) -> Not Still(Rock)", "Turtle(Rock) -> Skittish(Rock)", "Skittish(Rock) -> Not Still(Rock)", "Turtle(Rock) -> Skittish(Rock)", "Skittish(Rock) -> Not Still(Rock)", "Turtle(Rock) -> Skittish(Rock)", "Skittish(Rock) -> Not Still(Rock)", "Turtle(Rock) -> Skittish(Rock)", "Skittish(Rock) -> Not Still(Rock)", "Turtle(Rock) -> Skittish(Rock)", "Skittish(Rock) -> Not Still(Rock)", "Turtle(Rock) -> Skittish(Rock)", "Skittish(Rock) -> Not Still(Rock)", "Turtle(Rock) -> Skittish(Rock)", "Skittish(Rock) -> Not Still(Rock)", "Turtle(Rock) -> Skittish(Rock)", "Skittish(Rock) -> Not Still(Rock)", "Turtle(Rock) -> Skittish(Rock)", "Skittish(Rock) -> Not Still(Rock)", "Turtle(Rock) -> Skittish(Rock)", "Skittish(Rock) -> Not Still(Rock)", "Turtle(Rock) -> Skittish(Rock)", "Skittish(Rock) -> Not Still(Rock)", "Turtle(Rock) -> Skittish(Rock)", "Skittish(Rock) -> Not Still(Rock)", "Turtle(Rock) -> Skittish(Rock)", "Skittish(Rock) -> Not Still(Rock)", "Turtle(Rock) -> Skittish(Rock)", "Skittish(Rock) -> Not Still(Rock)", "Turtle(Rock) -> Skittish(Rock)", "Skittish(Rock) -> Not Still(Rock)", "Turtle(Rock) -> Skittish(Rock)", "Skittish(Rock) -> Not Still(Rock)", "Turtle(Rock) -> Skittish(Rock)", "Skittish(Rock) -> Not Still(Rock)", "Turtle(Rock) -> Skittish(Rock)", "Skittish(Rock) -> Not Still(Rock)", "Turtle(Rock) -> Skittish(Rock)", "Skittish(Rock) -> Not Still(Rock)", "Turtle(Rock) -> Skittish(Rock)", "Skittish(Rock) -> Not Still(Rock)", "Turtle(Rock) -> Skittish(Rock)", "Skittish(Rock) -> Not Still(Rock)", "Turtle(Rock) -> Skittish(Rock)", "Skittish(Rock) -> Not Still(Rock)", "Turtle(Rock) -> Skittish(Rock)", "Skittish(Rock) -> Not Still(Rock)", "Turtle(Rock) -> Skittish(Rock)", "Skittish(Rock) -> Not Still(Rock)", "Turtle(Rock) -> Skittish(Rock)", "Skittish(Rock) -> Not Still(Rock)", "Turtle(Rock) -> Skittish(Rock)", "Skittish(Rock) -> Not Still(Rock)", "Turtle(Rock) -> Skittish(Rock)", "Skittish(Rock) -> Not Still(Rock)", "Turtle(Rock) -> Skittish(Rock)", "Skittish(Rock) -> Not Still(Rock)", "Turtle(Rock) -> Skittish(Rock)", "Skittish(Rock) -> Not Still(Rock)", "Turtle(Rock) -> Skittish(Rock)", "Skittish(Rock) -> Not Still(Rock)", "Turtle(Rock) -> Skittish(Rock)", "Skittish(Rock) -> Not Still(Rock)", "Turtle(Rock) -> Skittish(Rock)", "Skittish(Rock) -> Not Still(Rock)", "Turtle(Rock) -> Skittish(Rock)", "Skittish(Rock) -> Not Still(Rock)", "Turtle(Rock) -> Skittish(Rock)", "Skittish(Rock) -> Not Still(Rock)", "Turtle(Rock) -> Skittish(Rock)", "Skittish(Rock) -> Not Still(Rock)", "Turtle(Rock) -> Skittish(Rock)", "Skittish(Rock) -> Not Still(Rock)", "Turtle(Rock) -> Skittish(Rock)", "Skittish(Rock) -> Not Still(Rock)", "Turtle(Rock) -> Skittish(Rock)", "Skittish(Rock) -> Not Still(Rock)", "Turtle(Rock) -> Skittish(Rock)", "Skittish(Rock) -> Not Still(Rock)", "Turtle(Rock) -> Skittish(Rock)", "Skittish(Rock) -> Not Still(Rock)", "Turtle(Rock) -> Skittish(Rock)", "Skittish(Rock) -> Not Still(Rock)", "Turtle(Rock) -> Skittish(Rock)", "Skittish(Rock) -> Not Still(Rock)", "Turtle(Rock) -> Skittish(Rock)", "Skittish(Rock) -> Not Still(Rock)", "Turtle(Rock) -> Skittish(Rock)", "Skittish(Rock) -> Not Still(Rock)", "Turtle(Rock) -> Skittish(Rock)", "Skittish(Rock) -> Not Still(Rock)", "Turtle(Rock) -> Skittish(Rock)", "Skittish(Rock) -> Not Still(Rock)", "Turtle(Rock) -> Skittish(Rock)", "Skittish(Rock) -> Not Still(Rock)", "Turtle(Rock) -> Skittish(Rock)", "Skittish(Rock) -> Not Still(Rock)", "Turtle(Rock) -> Skittish(Rock)", "Skittish(Rock) -> Not Still(Rock)", "Turtle(Rock) -> Skittish(Rock)", "Skittish(Rock) -> Not Still(Rock)", "Turtle(Rock) -> Skittish(Rock)", "Skittish(Rock) -> Not Still(Rock)", "Turtle(Rock) -> Skittish(Rock)", "Skittish(Rock) -> Not Still(Rock)", "Turtle(Rock) -> Skittish(Rock)", "Skittish(Rock) -> Not Still(Rock)", "Turtle(Rock) -> Skittish(Rock)", "Skittish(Rock) -> Not Still(Rock)", "Turtle(Rock) -> Skittish(Rock)", "Skittish(Rock) -> Not Still(Rock)", "Turtle(Rock) -> Skittish(Rock)", "Skittish(Rock) -> Not Still(Rock)", "Turtle(Rock) -> Skittish(Rock)", "Skittish(Rock) -> Not Still(Rock)", "Turtle(Rock) -> Skittish(Rock)", "Skittish(Rock) -> Not Still(Rock)", "Turtle(Rock) -> Skittish(Rock)", "Skittish(Rock) -> Not Still(Rock)", "Turtle(Rock) -> Skittish(Rock)", "Skittish(Rock) -> Not Still(Rock)", "Turtle(Rock) -> Skittish(Rock)", "Skittish(Rock) -> Not Still(Rock)", "Turtle(Rock) -> Skittish(Rock)", "Skittish(Rock) -> Not Still(Rock)", "Turtle(Rock) -> Skittish(Rock)", "Skittish(Rock) -> Not Still(Rock)", "Turtle(Rock) -> Skittish(Rock)", "Skittish(Rock) -> Not Still(Rock)", "Turtle(Rock) -> Skittish(Rock)", "Skittish(Rock) -> Not Still(Rock)", "Turtle(Rock) -> Skittish(Rock)", "Skittish(Rock) -> Not Still(Rock)", "Turtle(Rock) -> Skittish(Rock)", "Skittish(Rock) -> Not Still(Rock)", "Turtle(Rock) -> Skittish(Rock)", "Skittish(Rock) -> Not Still(Rock)", "Turtle(Rock) -> Skittish(Rock)", "Skittish(Rock) -> Not Still(Rock)", "Turtle(Rock) -> Skittish(Rock)", "Skittish(Rock) -> Not Still(Rock)", "Turtle(Rock) -> Skittish(Rock)", "Skittish(Rock) -> Not Still(Rock)", "Turtle(Rock) -> Skittish(Rock)", "Skittish(Rock) -> Not Still(Rock)", "Turtle(Rock) -> Skittish(Rock)", "Skittish(Rock) -> Not Still(Rock)", "Turtle(Rock) -> Skittish(Rock)", "Skittish(Rock) -> Not Still(Rock)", "Turtle(Rock) -> Skittish(Rock)", "Skittish(Rock) -> Not Still(Rock)", "Turtle(Rock) -> Skittish(Rock)", "Skittish(Rock) -> Not Still(Rock)", "Turtle(Rock) -> Skittish(Rock)", "Skittish(Rock) -> Not Still(Rock)", "Turtle(Rock) -> Skittish(Rock)", "Skittish(Rock) -> Not Still(Rock)", "Turtle(Rock) -> Skittish(Rock)", "Skittish(Rock) -> Not Still(Rock)", "Turtle(Rock) -> Skittish(Rock)", "Skittish(Rock) -> Not Still(Rock)", "Turtle(Rock) -> Skittish(Rock)", "Skittish(Rock) -> Not Still(Rock)", "Turtle(Rock) -> Skittish(Rock)", "Skittish(Rock) -> Not Still(Rock)", "Turtle(Rock) -> Skittish(Rock)", "Skittish(Rock) -> Not Still(Rock)", "Turtle(Rock) -> Skittish(Rock)", "Skittish(Rock) -> Not Still(Rock)", "Turtle(Rock) -> Skittish(Rock)", "Skittish(Rock) -> Not Still(Rock)", "Turtle(Rock) -> Skittish(Rock)", "Skittish(Rock) -> Not Still(Rock)", "Turtle(Rock) -> Skittish(Rock)", "Skittish(Rock) -> Not Still(Rock)", "Turtle(Rock) -> Skittish(Rock)", "Skittish(Rock) -> Not Still(Rock)", "Turtle(Rock) -> Skittish(Rock)", "Skittish(Rock) -> Not Still(Rock)", "Turtle(Rock) -> Skittish(Rock)", "Skittish(Rock) -> Not Still(Rock)", "Turtle(Rock) -> Skittish(Rock)", "Skittish(Rock) -> Not Still(Rock)", "Turtle(Rock) -> Skittish(Rock)", "Skittish(Rock) -> Not Still(Rock)", "Turtle(Rock) -> Skittish(Rock)", "Skittish(Rock) -> Not Still(Rock)", "Turtle(Rock) -> Skittish(Rock)", "Skittish(Rock) -> Not Still(Rock)", "Turtle(Rock) -> Skittish(Rock)", "Skittish(Rock) -> Not Still(Rock)", "Turtle(Rock) -> Skittish(Rock)", "Skittish(Rock) -> Not Still(Rock)", "Turtle(Rock) -> Skittish(Rock)", "Skittish(Rock) -> Not Still(Rock)", "Turtle(Rock) -> Skittish(Rock)", "Skittish(Rock) -> Not Still(Rock)", "Turtle(Rock) -> Skittish(Rock)", "Skittish(Rock) -> Not Still(Rock)", "Turtle(Rock) -> Skittish(Rock)", "Skittish(Rock) -> Not Still(Rock)", "Turtle(Rock) -> Skittish(Rock)", "Skittish(Rock) -> Not Still(Rock)", "Turtle(Rock) -> Skittish(Rock)", "Skittish(Rock) -> Not Still(Rock)", "Turtle(Rock) -> Skittish(Rock)", "Skittish(Rock) -> Not Still(Rock)", "Turtle(Rock) -> Skittish(Rock)", "Skittish(Rock) -> Not Still(Rock)", "Turtle(Rock) -> Skittish(Rock)", "Skittish(Rock) -> Not Still(Rock)", "Turtle(Rock) -> Skittish(Rock)", "Skittish(Rock) -> Not Still(Rock)", "Turtle(Rock) -> Skittish(Rock)", "Skittish(Rock) -> Not Still(Rock)", "Turtle(Rock) -> Skittish(Rock)", "Skittish(Rock) -> Not Still(Rock)", "Turtle(Rock) -> Skittish(Rock)", "Skittish(Rock) -> Not Still(Rock)", "Turtle(Rock) -> Skittish(Rock)", "Skittish(Rock) -> Not Still(Rock)", "Turtle(Rock) -> Skittish(Rock)", "Skittish(Rock) -> Not Still(Rock)", "Turtle(Rock) -> Skittish(Rock)", "Skittish(Rock) -> Not Still(Rock)", "Turtle(Rock) -> Skittish(Rock)", "Skittish(Rock) -> Not Still(Rock)", "Turtle(Rock) -> Skittish(Rock)", "Skittish(Rock) -> Not Still(Rock)", "Turtle(Rock) -> Skittish(Rock)", "Skittish(Rock) -> Not Still(Rock)", "Turtle(Rock) -> Skittish(Rock)", "Skittish(Rock) -> Not Still(Rock)", "Turtle(Rock) -> Skittish(Rock)", "Skittish(Rock) -> Not Still(Rock)", "Turtle(Rock) -> Skittish(Rock)", "Skittish(Rock) -> Not Still(Rock)", "Turtle(Rock) -> Skittish(Rock)", "Skittish(Rock) -> Not Still(Rock)", "Turtle(Rock) -> Skittish(Rock)", "Skittish(Rock) -> Not Still(Rock)", "Turtle(Rock) -> Skittish(Rock)", "Skittish(Rock) -> Not Still(Rock)", "Turtle(Rock) -> Skittish(Rock)", "Skittish(Rock) -> Not Still(Rock)", "Turtle(Rock) -> Skittish(Rock)", "Skittish(Rock) -> Not Still(Rock)", "Turtle(Rock) -> Skittish(Rock)", "Skittish(Rock) -> Not Still(Rock)", "Turtle(Rock) -> Skittish(Rock)", "Skittish(Rock) -> Not Still(Rock)", "Turtle(Rock) -> Skittish(Rock)", "Skittish(Rock) -> Not Still(Rock)", "Turtle(Rock) -> Skittish(Rock)", "Skittish(Rock) -> Not Still(Rock)", "Turtle(Rock) -> Skittish(Rock)", "Skittish(Rock) -> Not Still(Rock)", "Turtle(Rock) -> Skittish(Rock)", "Skittish(Rock) -> Not Still(Rock)", "Turtle(Rock) -> Skittish(Rock)", "Skittish(Rock) -> Not Still(Rock)", "Turtle(Rock) -> Skittish(Rock)", "Skittish(Rock) -> Not Still(Rock)", "Turtle(Rock) -> Skittish(Rock)", "Skittish(Rock) -> Not Still(Rock)", "Turtle(Rock) -> Skittish(Rock)", "Skittish(Rock) -> Not Still(Rock)", "Turtle(Rock) -> Skittish(Rock)", "Skittish(Rock) -> Not Still(Rock)", "Turtle(Rock) -> Skittish(Rock)", "Skittish(Rock) -> Not Still(Rock)", "Turtle(Rock) -> Skittish(Rock)", "Skittish(Rock) -> Not Still(Rock)", "Turtle(Rock) -> Skittish(Rock)", "Skittish(Rock) -> Not Still(Rock)", "Turtle(Rock) -> Skittish(Rock)", "Skittish(Rock) -> Not Still(Rock)", "Turtle(Rock) -> Skittish(Rock)", "Skittish(Rock) -> Not Still(Rock)", "Turtle(Rock) -> Skittish(Rock)", "Skittish(Rock) -> Not Still(Rock)", "Turtle(Rock) -> Skittish(Rock)", "Skittish(Rock) -> Not Still(Rock)", "Turtle(Rock) -> Skittish(Rock)", "Skittish(Rock) -> Not Still(Rock)", "Turtle(Rock) -> Skittish(Rock)", "Skittish(Rock) -> Not Still(Rock)", "Turtle(Rock) -> Skittish(Rock)", "Skittish(Rock) -> Not Still(Rock)", "Turtle(Rock) -> Skittish(Rock)", "Skittish(Rock) -> Not Still(Rock)", "Turtle(Rock) -> Skittish(Rock)", "Skittish(Rock) -> Not Still(Rock)", "Turtle(Rock) -> Skittish(Rock)", "Skittish(Rock) -> Not Still(Rock)", "Turtle(Rock) -> Skittish(Rock)", "Skittish(Rock) -> Not Still(Rock)", "Turtle(Rock) -> Skittish(Rock)", "Skittish(Rock) -> Not Still(Rock)", "Turtle(Rock) -> Skittish(Rock)", "Skittish(Rock) -> Not Still(Rock)", "Turtle(Rock) -> Skittish(Rock)", "Skittish(Rock) -> Not Still(Rock)", "Turtle(Rock) -> Skittish(Rock)", "Skittish(Rock) -> Not Still(Rock)", "Turtle(Rock) -> Skittish(Rock)", "Skittish(Rock) -> Not Still(Rock)", "Turtle(Rock) -> Skittish(Rock)", "Skittish(Rock) -> Not Still(Rock)", "Turtle(Rock) -> Skittish(Rock)", "Skittish(Rock) -> Not Still(Rock)", "Turtle(Rock) -> Skittish(Rock)", "Skittish(Rock) -> Not Still(Rock)", "Turtle(Rock) -> Skittish(Rock)", "Skittish(Rock) -> Not Still(Rock)", "Turtle(Rock) -> Skittish(Rock)", "Skittish(Rock) -> Not Still(Rock)", "Turtle(Rock) -> Skittish(Rock)", "Skittish(Rock) -> Not Still(Rock)", "Turtle(Rock) -> Skittish(Rock)", "Skittish(Rock) -> Not Still(Rock)", "Turtle(Rock)Rock(Rock)FOL: Skittish(Rock) -> Not Still(Rock)", "Turtle(Rock) -> Skittish(Rock)", "Skittish(Rock) -> Not Still(Rock)", "Skittish(Rock) -> Not Still(Rock)", "Turtle(Rock) -> Skittish(Rock)", "Skittish(Rock) -> Not Still(Rock)", "Turtle(Rock) -> Skittish(Rock)", "Skittish(Rock) -> Not Still(Rock)", "Turtle(Rock) -> Skittish(Rock)", "Skittish(Rock) -> Not Still(Rock)", "Turtle(Rock) -> Skittish(Rock)", "Skittish(Rock) -> Not Still(Rock)", "Turtle(Rock) -> Skittish(Rock)", "Skittish(Rock) -> Not Still(Rock)", "Turtle(Rock) -> Skittish(Rock)", "Skittish(Rock) -> Not Still(Rock)", "Turtle(Rock) -> Skittish(Rock)", "Skittish(Rock) -> Not Still(Rock)", "Turtle(Rock) -> Skittish(Rock)", "Skittish(Rock) -> Not Still(Rock)", "Turtle(Rock) -> Skittish(Rock)", "Skittish(Rock) -> Not Still(Rock)", "Turtle(Rock) -> Skittish(Rock)", "Skittish(Rock) -> Not Still(Rock)", "Turtle(Rock) -> Skittish(Rock)", "Skittish(Rock) -> Not Still(Rock)", "Turtle(Rock) -> Skittish(Rock)"], "conclusion": "Skitt", "error_type": "<class 'nltk.sem.logic.LogicalExpressionException'>", "error_message": "'(' is an illegal variable name.  Constants may not be quantified.\nall x. (Turtle(x) -> exists(x))\n                           ^", "stack_trace": "Traceback (most recent call last):\n  File \"/data/gpfs/projects/punim0478/bansaab/linc2/eval/tasks/owafoltask.py\", line 577, in _process_neurosymbolic\n    parsed = json.loads(gen)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/json/__init__.py\", line 346, in loads\n    return _default_decoder.decode(s)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/json/decoder.py\", line 337, in decode\n    obj, end = self.raw_decode(s, idx=_w(s, 0).end())\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/json/decoder.py\", line 355, in raw_decode\n    raise JSONDecodeError(\"Expecting value\", s, err.value) from None\njson.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/sem/logic.py\", line 154, in parse\n    result = self.process_next_expression(None)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/sem/logic.py\", line 290, in process_next_expression\n    accum = self.handle(tok, context)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/sem/logic.py\", line 312, in handle\n    return self.handle_quant(tok, context)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/sem/logic.py\", line 427, in handle_quant\n    accum = self.process_next_expression(tok)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/sem/logic.py\", line 290, in process_next_expression\n    accum = self.handle(tok, context)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/sem/logic.py\", line 315, in handle\n    return self.handle_open(tok, context)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/sem/logic.py\", line 449, in handle_open\n    accum = self.process_next_expression(None)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/sem/logic.py\", line 297, in process_next_expression\n    return self.attempt_adjuncts(accum, context)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/sem/logic.py\", line 323, in attempt_adjuncts\n    expression = self.attempt_BooleanExpression(expression, context)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/sem/logic.py\", line 485, in attempt_BooleanExpression\n    factory, expression, self.process_next_expression(tok)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/sem/logic.py\", line 290, in process_next_expression\n    accum = self.handle(tok, context)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/sem/logic.py\", line 312, in handle\n    return self.handle_quant(tok, context)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/sem/logic.py\", line 412, in handle_quant\n    vars = [self.get_next_token_variable(\"quantified\")]\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/sem/logic.py\", line 368, in get_next_token_variable\n    raise LogicalExpressionException(\nnltk.sem.logic.LogicalExpressionException: '(' is an illegal variable name.  Constants may not be quantified.\n\nThe above exception was the direct cause of the following exception:\n\nTraceback (most recent call last):\n  File \"/data/gpfs/projects/punim0478/bansaab/linc2/eval/tasks/utils.py\", line 216, in evaluate\n    p_list = [read_expr(p) for p in premises]\n  File \"/data/gpfs/projects/punim0478/bansaab/linc2/eval/tasks/utils.py\", line 216, in <listcomp>\n    p_list = [read_expr(p) for p in premises]\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/sem/logic.py\", line 957, in fromstring\n    return cls._logic_parser.parse(s, signature)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/sem/logic.py\", line 159, in parse\n    raise LogicalExpressionException(None, msg) from e\nnltk.sem.logic.LogicalExpressionException: '(' is an illegal variable name.  Constants may not be quantified.\nall x. (Turtle(x) -> exists(x))\n                           ^\n"}
{"timestamp": "2025-09-16T18:12:11.971084", "premises": ["all x. (Rabbit(x) -> Cute(x))", "exists x. (Turtle(x))", "all x. (Animal(x) -> Rabbit(x) | Squirrel(x))", "all x. (Skittish(x) -> -Still(x))", "all x. (Squirrel(x) -> Skittish(x))", "Rock(x) -> Still(x)"], "conclusion": "cute(Rock) & still(Rock) -> turtle(Rock) & skittish(Rock)", "error_type": "<class 'nltk.inference.prover9.Prover9FatalException'>", "error_message": "(FATAL)\n%%ERROR: The following symbols are used with multiple arities: Rock/1, Rock/0.\n\n\nFatal error:  The following symbols are used with multiple arities: Rock/1, Rock/0", "stack_trace": "Traceback (most recent call last):\n  File \"/data/gpfs/projects/punim0478/bansaab/linc2/eval/tasks/owafoltask.py\", line 577, in _process_neurosymbolic\n    parsed = json.loads(gen)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/json/__init__.py\", line 346, in loads\n    return _default_decoder.decode(s)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/json/decoder.py\", line 337, in decode\n    obj, end = self.raw_decode(s, idx=_w(s, 0).end())\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/json/decoder.py\", line 355, in raw_decode\n    raise JSONDecodeError(\"Expecting value\", s, err.value) from None\njson.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"/data/gpfs/projects/punim0478/bansaab/linc2/eval/tasks/utils.py\", line 219, in evaluate\n    truth_value = prover.prove(c, p_list)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/inference/api.py\", line 37, in prove\n    return self._prove(goal, assumptions, verbose)[0]\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/inference/prover9.py\", line 327, in _prove\n    stdout, returncode = self._call_prover9(\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/inference/prover9.py\", line 370, in _call_prover9\n    raise Prover9FatalException(returncode, errormsg)\nnltk.inference.prover9.Prover9FatalException: (FATAL)\n%%ERROR: The following symbols are used with multiple arities: Rock/1, Rock/0.\n\n\nFatal error:  The following symbols are used with multiple arities: Rock/1, Rock/0\n"}
{"timestamp": "2025-09-16T18:12:11.972295", "premises": ["all x. (Rabbit(x) -> Cute(x))", "exists x. (Turtle(x))", "all x. (Animal(x) -> (Rabbit(x) | Squirrel(x)))", "all x. (Skittish(x) -> -Still(x))", "all x. (Squirrel(x) -> Skittish(x))", "Rock(x) -> Still(x)"], "conclusion": "(Cute(Rock) & Still(Rock)) -> (Turtle(Rock) & Skittish(Rock))", "error_type": "<class 'nltk.inference.prover9.Prover9FatalException'>", "error_message": "(FATAL)\n%%ERROR: The following symbols are used with multiple arities: Rock/1, Rock/0.\n\n\nFatal error:  The following symbols are used with multiple arities: Rock/1, Rock/0", "stack_trace": "Traceback (most recent call last):\n  File \"/data/gpfs/projects/punim0478/bansaab/linc2/eval/tasks/owafoltask.py\", line 577, in _process_neurosymbolic\n    parsed = json.loads(gen)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/json/__init__.py\", line 346, in loads\n    return _default_decoder.decode(s)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/json/decoder.py\", line 337, in decode\n    obj, end = self.raw_decode(s, idx=_w(s, 0).end())\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/json/decoder.py\", line 355, in raw_decode\n    raise JSONDecodeError(\"Expecting value\", s, err.value) from None\njson.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"/data/gpfs/projects/punim0478/bansaab/linc2/eval/tasks/utils.py\", line 219, in evaluate\n    truth_value = prover.prove(c, p_list)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/inference/api.py\", line 37, in prove\n    return self._prove(goal, assumptions, verbose)[0]\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/inference/prover9.py\", line 327, in _prove\n    stdout, returncode = self._call_prover9(\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/inference/prover9.py\", line 370, in _call_prover9\n    raise Prover9FatalException(returncode, errormsg)\nnltk.inference.prover9.Prover9FatalException: (FATAL)\n%%ERROR: The following symbols are used with multiple arities: Rock/1, Rock/0.\n\n\nFatal error:  The following symbols are used with multiple arities: Rock/1, Rock/0\n"}
{"timestamp": "2025-09-16T18:17:54.100777", "premises": ["* all x. (Popular(x) -> BingeWatch(x))", "all x. (Popular(x) -> BingeWatch(x))", "all x. (BingeWatch(x) -> Download(x))", "all x. (-Download(x, Blackmirror) & NetflixShow(x))", "all x. (BingeWatch(x) -> Share(x, Lisa))"], "conclusion": "all x. (NetflixShow(x))", "error_type": "<class 'nltk.sem.logic.LogicalExpressionException'>", "error_message": "Unexpected token: 'all'.\n* all x. (Popular(x) -> BingeWatch(x))\n  ^", "stack_trace": "Traceback (most recent call last):\n  File \"/data/gpfs/projects/punim0478/bansaab/linc2/eval/tasks/owafoltask.py\", line 577, in _process_neurosymbolic\n    parsed = json.loads(gen)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/json/__init__.py\", line 346, in loads\n    return _default_decoder.decode(s)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/json/decoder.py\", line 337, in decode\n    obj, end = self.raw_decode(s, idx=_w(s, 0).end())\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/json/decoder.py\", line 355, in raw_decode\n    raise JSONDecodeError(\"Expecting value\", s, err.value) from None\njson.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/sem/logic.py\", line 156, in parse\n    raise UnexpectedTokenException(self._currentIndex + 1, self.token(0))\nnltk.sem.logic.UnexpectedTokenException: Unexpected token: 'all'.\n\nThe above exception was the direct cause of the following exception:\n\nTraceback (most recent call last):\n  File \"/data/gpfs/projects/punim0478/bansaab/linc2/eval/tasks/utils.py\", line 216, in evaluate\n    p_list = [read_expr(p) for p in premises]\n  File \"/data/gpfs/projects/punim0478/bansaab/linc2/eval/tasks/utils.py\", line 216, in <listcomp>\n    p_list = [read_expr(p) for p in premises]\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/sem/logic.py\", line 957, in fromstring\n    return cls._logic_parser.parse(s, signature)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/sem/logic.py\", line 159, in parse\n    raise LogicalExpressionException(None, msg) from e\nnltk.sem.logic.LogicalExpressionException: Unexpected token: 'all'.\n* all x. (Popular(x) -> BingeWatch(x))\n  ^\n"}
{"timestamp": "2025-09-16T18:17:54.103667", "premises": ["all x. (Popular(x) -> KarenWillBingeWatch(x))", "all x. (KarenWillBingeWatch(x) -> KarenWillDownload(x))", "all x. (KarenWillDownload(x) -> -Downloaded(x, BlackMirror))", "all x. (KarenWillDownload(x) -> Downloaded(x, StrangerThings))", "all x. (KarenWillBingeWatch(x) -> SharedWithLisa(x))", "all x. (SharedWithLisa(x) -> x is StrangerThings)", "all x. (Hamburger(x) -> Meat(x))", "all x. (Meat(x) -> NotVegetarian(x))", "all x. (NotVegetarian(x) -> NotVegan(x))", "all x. (Fries(x) -> SideDish(x))"], "conclusion": "all x. (SideDish(x) -> MadeOfPotatoes(x))", "error_type": "<class 'nltk.sem.logic.LogicalExpressionException'>", "error_message": "Unexpected token: 'is'.  Expected token ')'.\nall x. (SharedWithLisa(x) -> x is StrangerThings)\n                               ^", "stack_trace": "Traceback (most recent call last):\n  File \"/data/gpfs/projects/punim0478/bansaab/linc2/eval/tasks/owafoltask.py\", line 577, in _process_neurosymbolic\n    parsed = json.loads(gen)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/json/__init__.py\", line 346, in loads\n    return _default_decoder.decode(s)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/json/decoder.py\", line 337, in decode\n    obj, end = self.raw_decode(s, idx=_w(s, 0).end())\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/json/decoder.py\", line 355, in raw_decode\n    raise JSONDecodeError(\"Expecting value\", s, err.value) from None\njson.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/sem/logic.py\", line 154, in parse\n    result = self.process_next_expression(None)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/sem/logic.py\", line 290, in process_next_expression\n    accum = self.handle(tok, context)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/sem/logic.py\", line 312, in handle\n    return self.handle_quant(tok, context)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/sem/logic.py\", line 427, in handle_quant\n    accum = self.process_next_expression(tok)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/sem/logic.py\", line 290, in process_next_expression\n    accum = self.handle(tok, context)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/sem/logic.py\", line 315, in handle\n    return self.handle_open(tok, context)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/sem/logic.py\", line 450, in handle_open\n    self.assertNextToken(Tokens.CLOSE)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/sem/logic.py\", line 573, in assertNextToken\n    raise UnexpectedTokenException(self._currentIndex, tok, expected)\nnltk.sem.logic.UnexpectedTokenException: Unexpected token: 'is'.  Expected token ')'.\n\nThe above exception was the direct cause of the following exception:\n\nTraceback (most recent call last):\n  File \"/data/gpfs/projects/punim0478/bansaab/linc2/eval/tasks/utils.py\", line 216, in evaluate\n    p_list = [read_expr(p) for p in premises]\n  File \"/data/gpfs/projects/punim0478/bansaab/linc2/eval/tasks/utils.py\", line 216, in <listcomp>\n    p_list = [read_expr(p) for p in premises]\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/sem/logic.py\", line 957, in fromstring\n    return cls._logic_parser.parse(s, signature)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/sem/logic.py\", line 159, in parse\n    raise LogicalExpressionException(None, msg) from e\nnltk.sem.logic.LogicalExpressionException: Unexpected token: 'is'.  Expected token ')'.\nall x. (SharedWithLisa(x) -> x is StrangerThings)\n                               ^\n"}
{"timestamp": "2025-09-16T18:17:54.128646", "premises": ["all x. (Popular(x) -> BingeWatch(Karen, x))", "Popular(Stranger Things)", "all x. (Popular(x) -> BingeWatch(Karen, x))", "all x. (BingeWatch(Karen, x) -> Download(Karen, x))", "all x. (Download(Karen, x) -> !Download(Karen, BlackMirror))", "NetflixShow(Black Mirror)", "all x. (BingeWatch(Karen, x) -> Share(Karen, x))", "all x. (Popular(x) -> BingeWatch(Karen, x))", "Popular(Stranger Things)", "all x. (Popular(x) -> BingeWatch(Karen, x))", "all x. (BingeWatch(Karen, x) -> Download(Karen, x))", "all x. (Download(Karen, x) -> !Download(Karen, BlackMirror))", "NetflixShow(Black Mirror)", "all x. (BingeWatch(Karen, x) -> Share(Karen, x))", "all x. (Popular(x) -> BingeWatch(Karen, x))", "Popular(Stranger Things)", "all x. (Popular(x) -> BingeWatch(Karen, x))", "all x. (BingeWatch(Karen, x) -> Download(Karen, x))", "all x. (Download(Karen, x) -> !Download(Karen, BlackMirror))", "NetflixShow(Black Mirror)", "all x. (BingeWatch(Karen, x) -> Share(Karen, x))", "all x. (Popular(x) -> BingeWatch(Karen, x))", "Popular(Stranger Things)", "all x. (Popular(x) -> BingeWatch(Karen, x))", "all x. (BingeWatch(Karen, x) -> Download(Karen, x))", "all x. (Download(Karen, x) -> !Download(Karen, BlackMirror))", "NetflixShow(Black Mirror)", "all x. (BingeWatch(Karen, x) -> Share(Karen, x))", "all x. (Popular(x) -> BingeWatch(Karen, x))", "Popular(Stranger Things)", "all x. (Popular(x) -> BingeWatch(Karen, x))", "all x. (BingeWatch(Karen, x) -> Download(Karen, x))", "all x. (Download(Karen, x) -> !Download(Karen, BlackMirror))", "NetflixShow(Black Mirror)", "all x. (BingeWatch(Karen, x) -> Share(Karen, x))", "all x. (Popular(x) -> BingeWatch(Karen, x))", "Popular(Stranger Things)", "all x. (Popular(x) -> BingeWatch(Karen, x))", "all x. (BingeWatch(Karen, x) -> Download(Karen, x))", "all x. (Download(Karen, x) -> !Download(Karen, BlackMirror))", "NetflixShow(Black Mirror)", "all x. (BingeWatch(Karen, x) -> Share(Karen, x))", "all x. (Popular(x) -> BingeWatch(Karen, x))", "Popular(Stranger Things)", "all x. (Popular(x) -> BingeWatch(Karen, x))", "all x. (BingeWatch(Karen, x) -> Download(Karen, x))", "all x. (Download(Karen, x) -> !Download(Karen, BlackMirror))", "NetflixShow(Black Mirror)", "all x. (BingeWatch(Karen, x) -> Share(Karen, x))", "all x. (Popular(x) -> BingeWatch(Karen, x))", "Popular(Stranger Things)", "all x. (Popular(x) -> BingeWatch(Karen, x))", "all x. (BingeWatch(Karen, x) -> Download(Karen, x))", "all x. (Download(Karen, x) -> !Download(Karen, BlackMirror))", "NetflixShow(Black Mirror)", "all x. (BingeWatch(Karen, x) -> Share(Karen, x))", "all x. (Popular(x) -> BingeWatch(Karen, x))", "Popular(Stranger Things)", "all x. (Popular(x) -> BingeWatch(Karen, x))", "all x. (BingeWatch(Karen, x) -> Download(Karen, x))", "all x. (Download(Karen, x) -> !Download(Karen, BlackMirror))", "NetflixShow(Black Mirror)", "all x. (BingeWatch(Karen, x) -> Share(Karen, x))", "all x. (Popular(x) -> BingeWatch(Karen, x))", "Popular(Stranger Things)", "all x. (Popular(x) -> BingeWatch(Karen, x))", "all x. (BingeWatch(Karen, x) -> Download(Karen, x))", "all x. (Download(Karen, x) -> !Download(Karen, BlackMirror))", "NetflixShow(Black Mirror)", "all x. (BingeWatch(Karen, x) -> Share(Karen, x))", "all x. (Popular(x) -> BingeWatch(Karen, x))", "Popular(Stranger Things)", "all x. (Popular(x) -> BingeWatch(Karen, x))", "all x. (BingeWatch(Karen, x) -> Download(Karen, x))", "all x. (Download(Karen, x) -> !Download(Karen, BlackMirror))", "NetflixShow(Black Mirror)", "all x. (BingeWatch(Karen, x) -> Share(Karen, x))", "all x. (Popular(x) -> BingeWatch(Karen, x))", "Popular(Stranger Things)", "all x. (Popular(x) -> BingeWatch(Karen, x))", "all x. (BingeWatch(Karen, x) -> Download(Karen, x))", "all x. (Download(Karen, x) -> !Download(Karen, BlackMirror))", "NetflixShow(Black Mirror)", "all x. (BingeWatch(Karen, x) -> Share(Karen, x))", "all x. (Popular(x) -> BingeWatch(Karen, x))", "Popular(Stranger Things)", "all x. (Popular(x) -> BingeWatch(Karen, x))", "all x. (BingeWatch(Karen, x) -> Download(Karen, x))", "all x. (Download(Karen, x) -> !Download(Karen, BlackMirror))", "NetflixShow(Black Mirror)", "all x. (BingeWatch(Karen, x) -> Share(Karen, x))", "all x. (Popular(x) -> BingeWatch(Karen, x))", "Popular(Stranger Things)", "all x. (Popular(x) -> BingeWatch(Karen, x))", "all x. (BingeWatch(Karen, x) -> Download(Karen, x))", "all x. (Download(Karen, x) -> !Download(Karen, BlackMirror))", "NetflixShow(Black Mirror)", "all x. (BingeWatch(Karen, x) -> Share(Karen, x))", "all x. (Popular(x) -> BingeWatch(Karen, x))", "Popular(Stranger Things)", "all x. (Popular(x) -> BingeWatch(Karen, x))", "all x. (BingeWatch(Karen, x) -> Download(Karen, x))", "all x. (Download(Karen, x) -> !Download(Karen, BlackMirror))", "NetflixShow(Black Mirror)", "all x. (BingeWatch(Karen, x) -> Share(Karen, x))", "all x. (Popular(x) -> BingeWatch(Karen, x))", "Popular(Stranger Things)", "all x. (Popular(x) -> BingeWatch(Karen, x))", "all x. (BingeWatch(Karen, x) -> Download(Karen, x))", "all x. (Download(Karen, x) -> !Download(Karen, BlackMirror))", "NetflixShow(Black Mirror)", "all x. (BingeWatch(Karen, x) -> Share(Karen, x))", "all x. (Popular(x) -> BingeWatch(Karen, x))", "Popular(Stranger Things)", "all x. (Popular(x) -> BingeWatch(Karen, x))", "all x. (BingeWatch(Karen, x) -> Download(Karen, x))", "all x. (Download(Karen, x) -> !Download(Karen, BlackMirror))", "NetflixShow(Black Mirror)", "all x. (BingeWatch(Karen, x) -> Share(Karen, x))", "all x. (Popular(x) -> BingeWatch(Karen, x))", "Popular(Stranger Things)", "all x. (Popular(x) -> BingeWatch(Karen, x))", "all x. (BingeWatch(Karen, x) -> Download(Karen, x))", "all x. (Download(Karen, x) -> !Download(Karen, BlackMirror))", "NetflixShow(Black Mirror)", "all x. (BingeWatch(Karen, x) -> Share(Karen, x))", "all x. (Popular(x) -> BingeWatch(Karen, x))", "Popular(Stranger Things)", "all x. (Popular(x) -> BingeWatch(Karen, x))", "all x. (BingeWatch(Karen, x) -> Download(Karen, x))", "all x. (Download(Karen, x) -> !Download(Karen, BlackMirror))", "NetflixShow(Black Mirror)", "all x. (BingeWatch(Karen, x) -> Share(Karen, x))", "all x. (Popular(x) -> BingeWatch(Karen, x))", "Popular(Stranger Things)", "all x. (Popular(x) -> BingeWatch(Karen, x))", "all x. (BingeWatch(Karen, x) -> Download(Karen, x))", "all x. (Download(Karen, x) -> !Download(Karen, BlackMirror))", "NetflixShow(Black Mirror)", "all x. (BingeWatch(Karen, x) -> Share(Karen, x))", "all x. (Popular(x) -> BingeWatch(Karen, x))", "Popular(Stranger Things)", "all x. (Popular(x) -> BingeWatch(Karen, x))"], "conclusion": "all x. (BingeWatch(Karen, x) -> Download(Karen, x))", "error_type": "<class 'nltk.sem.logic.LogicalExpressionException'>", "error_message": "Unexpected token: 'Things'.  Expected token ')'.\nPopular(Stranger Things)\n                 ^", "stack_trace": "Traceback (most recent call last):\n  File \"/data/gpfs/projects/punim0478/bansaab/linc2/eval/tasks/owafoltask.py\", line 577, in _process_neurosymbolic\n    parsed = json.loads(gen)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/json/__init__.py\", line 346, in loads\n    return _default_decoder.decode(s)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/json/decoder.py\", line 337, in decode\n    obj, end = self.raw_decode(s, idx=_w(s, 0).end())\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/json/decoder.py\", line 355, in raw_decode\n    raise JSONDecodeError(\"Expecting value\", s, err.value) from None\njson.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/sem/logic.py\", line 154, in parse\n    result = self.process_next_expression(None)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/sem/logic.py\", line 290, in process_next_expression\n    accum = self.handle(tok, context)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/sem/logic.py\", line 303, in handle\n    return self.handle_variable(tok, context)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/sem/logic.py\", line 359, in handle_variable\n    self.assertNextToken(Tokens.CLOSE)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/sem/logic.py\", line 573, in assertNextToken\n    raise UnexpectedTokenException(self._currentIndex, tok, expected)\nnltk.sem.logic.UnexpectedTokenException: Unexpected token: 'Things'.  Expected token ')'.\n\nThe above exception was the direct cause of the following exception:\n\nTraceback (most recent call last):\n  File \"/data/gpfs/projects/punim0478/bansaab/linc2/eval/tasks/utils.py\", line 216, in evaluate\n    p_list = [read_expr(p) for p in premises]\n  File \"/data/gpfs/projects/punim0478/bansaab/linc2/eval/tasks/utils.py\", line 216, in <listcomp>\n    p_list = [read_expr(p) for p in premises]\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/sem/logic.py\", line 957, in fromstring\n    return cls._logic_parser.parse(s, signature)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/sem/logic.py\", line 159, in parse\n    raise LogicalExpressionException(None, msg) from e\nnltk.sem.logic.LogicalExpressionException: Unexpected token: 'Things'.  Expected token ')'.\nPopular(Stranger Things)\n                 ^\n"}
{"timestamp": "2025-09-16T18:17:54.130881", "premises": ["all x. (PopularNetflixShow(x) -> NetflixShow(x))", "all x. (PopularNetflixShow(x) -> KarenWillBingeWatch(x))", "all x. (KarenWillBingeWatch(x) <=> KarenWillDownload(x))", "-KarenWillDownload(BlackMirror)", "all x. (NetflixShow(x) -> BlackMirror(x))", "all x. (KarenWillBingeWatch(x) -> KarenWillShare(x))"], "conclusion": "KarenWillShare(StrangerThings)", "error_type": "<class 'nltk.inference.prover9.Prover9FatalException'>", "error_message": "(FATAL)\n%%ERROR: The following symbols are used with multiple arities: BlackMirror/1, BlackMirror/0.\n\n\nFatal error:  The following symbols are used with multiple arities: BlackMirror/1, BlackMirror/0", "stack_trace": "Traceback (most recent call last):\n  File \"/data/gpfs/projects/punim0478/bansaab/linc2/eval/tasks/owafoltask.py\", line 577, in _process_neurosymbolic\n    parsed = json.loads(gen)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/json/__init__.py\", line 346, in loads\n    return _default_decoder.decode(s)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/json/decoder.py\", line 337, in decode\n    obj, end = self.raw_decode(s, idx=_w(s, 0).end())\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/json/decoder.py\", line 355, in raw_decode\n    raise JSONDecodeError(\"Expecting value\", s, err.value) from None\njson.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"/data/gpfs/projects/punim0478/bansaab/linc2/eval/tasks/utils.py\", line 219, in evaluate\n    truth_value = prover.prove(c, p_list)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/inference/api.py\", line 37, in prove\n    return self._prove(goal, assumptions, verbose)[0]\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/inference/prover9.py\", line 327, in _prove\n    stdout, returncode = self._call_prover9(\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/inference/prover9.py\", line 370, in _call_prover9\n    raise Prover9FatalException(returncode, errormsg)\nnltk.inference.prover9.Prover9FatalException: (FATAL)\n%%ERROR: The following symbols are used with multiple arities: BlackMirror/1, BlackMirror/0.\n\n\nFatal error:  The following symbols are used with multiple arities: BlackMirror/1, BlackMirror/0\n"}
{"timestamp": "2025-09-16T18:20:16.761560", "premises": ["all x. (NetflixShow(x) -> Popular(x))", "all x. (Popular(x) -> BingeWatch(x, Karen))", "-(Download(x)) -> all x. (BingeWatch(x, Karen))", "-Download(Black Mirror)", "NetflixShow(Black Mirror)", "all x. (BingeWatch(x, Karen) -> Share(x, Lisa))"], "conclusion": "all x. (NetflixShow(x) -> Popular(x))", "error_type": "<class 'nltk.sem.logic.LogicalExpressionException'>", "error_message": "Unexpected token: 'Mirror'.  Expected token ')'.\n-Download(Black Mirror)\n                ^", "stack_trace": "Traceback (most recent call last):\n  File \"/data/gpfs/projects/punim0478/bansaab/linc2/eval/tasks/owafoltask.py\", line 577, in _process_neurosymbolic\n    parsed = json.loads(gen)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/json/__init__.py\", line 346, in loads\n    return _default_decoder.decode(s)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/json/decoder.py\", line 337, in decode\n    obj, end = self.raw_decode(s, idx=_w(s, 0).end())\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/json/decoder.py\", line 355, in raw_decode\n    raise JSONDecodeError(\"Expecting value\", s, err.value) from None\njson.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/sem/logic.py\", line 154, in parse\n    result = self.process_next_expression(None)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/sem/logic.py\", line 290, in process_next_expression\n    accum = self.handle(tok, context)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/sem/logic.py\", line 306, in handle\n    return self.handle_negation(tok, context)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/sem/logic.py\", line 327, in handle_negation\n    return self.make_NegatedExpression(self.process_next_expression(Tokens.NOT))\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/sem/logic.py\", line 290, in process_next_expression\n    accum = self.handle(tok, context)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/sem/logic.py\", line 303, in handle\n    return self.handle_variable(tok, context)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/sem/logic.py\", line 359, in handle_variable\n    self.assertNextToken(Tokens.CLOSE)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/sem/logic.py\", line 573, in assertNextToken\n    raise UnexpectedTokenException(self._currentIndex, tok, expected)\nnltk.sem.logic.UnexpectedTokenException: Unexpected token: 'Mirror'.  Expected token ')'.\n\nThe above exception was the direct cause of the following exception:\n\nTraceback (most recent call last):\n  File \"/data/gpfs/projects/punim0478/bansaab/linc2/eval/tasks/utils.py\", line 216, in evaluate\n    p_list = [read_expr(p) for p in premises]\n  File \"/data/gpfs/projects/punim0478/bansaab/linc2/eval/tasks/utils.py\", line 216, in <listcomp>\n    p_list = [read_expr(p) for p in premises]\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/sem/logic.py\", line 957, in fromstring\n    return cls._logic_parser.parse(s, signature)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/sem/logic.py\", line 159, in parse\n    raise LogicalExpressionException(None, msg) from e\nnltk.sem.logic.LogicalExpressionException: Unexpected token: 'Mirror'.  Expected token ')'.\n-Download(Black Mirror)\n                ^\n"}
{"timestamp": "2025-09-16T18:20:16.762570", "premises": ["1. all x. all y. (Popular(x) & Karen(y) -> BingeWatch(x, y))", "all x. all y. (Popular(x) & NetflixShow(x) -> Karen(y))", "all x. all y. (Popular(x) & Karen(y) -> BingeWatch(x, y))", "all x. all y. (BingeWatch(x, y) & Download(x, y) -> Karen(y))", "all x. (Download(x, BlackMirror) -> -True(x))"], "conclusion": "all x. all y. (BingeWatch(x, y) & NetflixShow(x) -> Share(x, y))", "error_type": "<class 'nltk.sem.logic.LogicalExpressionException'>", "error_message": "Unexpected token: '.'.\n1. all x. all y. (Popular(x) & Karen(y) -> BingeWatch(x, y))\n ^", "stack_trace": "Traceback (most recent call last):\n  File \"/data/gpfs/projects/punim0478/bansaab/linc2/eval/tasks/owafoltask.py\", line 577, in _process_neurosymbolic\n    parsed = json.loads(gen)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/json/__init__.py\", line 346, in loads\n    return _default_decoder.decode(s)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/json/decoder.py\", line 337, in decode\n    obj, end = self.raw_decode(s, idx=_w(s, 0).end())\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/json/decoder.py\", line 355, in raw_decode\n    raise JSONDecodeError(\"Expecting value\", s, err.value) from None\njson.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/sem/logic.py\", line 156, in parse\n    raise UnexpectedTokenException(self._currentIndex + 1, self.token(0))\nnltk.sem.logic.UnexpectedTokenException: Unexpected token: '.'.\n\nThe above exception was the direct cause of the following exception:\n\nTraceback (most recent call last):\n  File \"/data/gpfs/projects/punim0478/bansaab/linc2/eval/tasks/utils.py\", line 216, in evaluate\n    p_list = [read_expr(p) for p in premises]\n  File \"/data/gpfs/projects/punim0478/bansaab/linc2/eval/tasks/utils.py\", line 216, in <listcomp>\n    p_list = [read_expr(p) for p in premises]\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/sem/logic.py\", line 957, in fromstring\n    return cls._logic_parser.parse(s, signature)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/sem/logic.py\", line 159, in parse\n    raise LogicalExpressionException(None, msg) from e\nnltk.sem.logic.LogicalExpressionException: Unexpected token: '.'.\n1. all x. all y. (Popular(x) & Karen(y) -> BingeWatch(x, y))\n ^\n"}
{"timestamp": "2025-09-16T18:20:16.789020", "premises": ["all x. (Popular(x) -> NetflixShow(x))", "all x. (Popular(x) -> BingeWatch(Karen, x))", "all x. (BingeWatch(Karen, x) -> Download(Karen, x))", "-Download(Karen, Black Mirror)", "NetflixShow(Black Mirror)", "all x. (BingeWatch(Karen, x) -> Share(Karen, x))"], "conclusion": "Popular(Black Mirror)", "error_type": "<class 'nltk.sem.logic.LogicalExpressionException'>", "error_message": "Unexpected token: 'Mirror'.  Expected token ')'.\nPopular(Black Mirror)\n              ^", "stack_trace": "Traceback (most recent call last):\n  File \"/data/gpfs/projects/punim0478/bansaab/linc2/eval/tasks/owafoltask.py\", line 577, in _process_neurosymbolic\n    parsed = json.loads(gen)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/json/__init__.py\", line 346, in loads\n    return _default_decoder.decode(s)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/json/decoder.py\", line 337, in decode\n    obj, end = self.raw_decode(s, idx=_w(s, 0).end())\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/json/decoder.py\", line 355, in raw_decode\n    raise JSONDecodeError(\"Expecting value\", s, err.value) from None\njson.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/sem/logic.py\", line 154, in parse\n    result = self.process_next_expression(None)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/sem/logic.py\", line 290, in process_next_expression\n    accum = self.handle(tok, context)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/sem/logic.py\", line 303, in handle\n    return self.handle_variable(tok, context)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/sem/logic.py\", line 359, in handle_variable\n    self.assertNextToken(Tokens.CLOSE)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/sem/logic.py\", line 573, in assertNextToken\n    raise UnexpectedTokenException(self._currentIndex, tok, expected)\nnltk.sem.logic.UnexpectedTokenException: Unexpected token: 'Mirror'.  Expected token ')'.\n\nThe above exception was the direct cause of the following exception:\n\nTraceback (most recent call last):\n  File \"/data/gpfs/projects/punim0478/bansaab/linc2/eval/tasks/utils.py\", line 215, in evaluate\n    c = read_expr(conclusion)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/sem/logic.py\", line 957, in fromstring\n    return cls._logic_parser.parse(s, signature)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/sem/logic.py\", line 159, in parse\n    raise LogicalExpressionException(None, msg) from e\nnltk.sem.logic.LogicalExpressionException: Unexpected token: 'Mirror'.  Expected token ')'.\nPopular(Black Mirror)\n              ^\n"}
{"timestamp": "2025-09-16T18:20:16.782775", "premises": ["all x. (PopularNetflixShow(x) -> StrangerThings(x))", "all x. (PopularNetflixShow(x) -> BingeWatch(x, Karen))", "all x. (BingeWatch(x, Karen) -> Download(x, Karen))", "-Download(BlackMirror, Karen)", "all x. (NetflixShow(x) -> BlackMirror(x))", "all x. (BingeWatch(x, Karen) -> Share(x, Karen, Lisa))"], "conclusion": "PopularNetflixShow(BlackMirror) & all x. (BingeWatch(x, Karen) -> Share(x, Karen, Lisa))", "error_type": "<class 'nltk.inference.prover9.Prover9FatalException'>", "error_message": "(FATAL)\n%%ERROR: The following symbols are used with multiple arities: BlackMirror/1, BlackMirror/0.\n\n\nFatal error:  The following symbols are used with multiple arities: BlackMirror/1, BlackMirror/0", "stack_trace": "Traceback (most recent call last):\n  File \"/data/gpfs/projects/punim0478/bansaab/linc2/eval/tasks/owafoltask.py\", line 577, in _process_neurosymbolic\n    parsed = json.loads(gen)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/json/__init__.py\", line 346, in loads\n    return _default_decoder.decode(s)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/json/decoder.py\", line 337, in decode\n    obj, end = self.raw_decode(s, idx=_w(s, 0).end())\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/json/decoder.py\", line 355, in raw_decode\n    raise JSONDecodeError(\"Expecting value\", s, err.value) from None\njson.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"/data/gpfs/projects/punim0478/bansaab/linc2/eval/tasks/utils.py\", line 219, in evaluate\n    truth_value = prover.prove(c, p_list)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/inference/api.py\", line 37, in prove\n    return self._prove(goal, assumptions, verbose)[0]\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/inference/prover9.py\", line 327, in _prove\n    stdout, returncode = self._call_prover9(\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/inference/prover9.py\", line 370, in _call_prover9\n    raise Prover9FatalException(returncode, errormsg)\nnltk.inference.prover9.Prover9FatalException: (FATAL)\n%%ERROR: The following symbols are used with multiple arities: BlackMirror/1, BlackMirror/0.\n\n\nFatal error:  The following symbols are used with multiple arities: BlackMirror/1, BlackMirror/0\n"}
{"timestamp": "2025-09-16T18:22:35.982101", "premises": ["all x. (Popular(x) -> KarenBingeWatches(x))", "all x. (Equal(x,StrangerThings)) (-> Popular(x))", "all x. (Popular(x) -> KarenBingeWatches(x))", "all x. (KarenBingeWatches(x) -> KarenDownloads(x))", "all x. (KarenBingeWatches(x) -> KarenDoesNotDownload(x))", "all x. (Equal(x,BlackMirror)) (-> NetflixShow(x))"], "conclusion": "all x. (KarenBingeWatches(x) -> KarenShares(x))", "error_type": "<class 'nltk.sem.logic.LogicalExpressionException'>", "error_message": "Unexpected token: '->'.  Expression expected.\nall x. (Equal(x,StrangerThings)) (-> Popular(x))\n                                  ^", "stack_trace": "Traceback (most recent call last):\n  File \"/data/gpfs/projects/punim0478/bansaab/linc2/eval/tasks/owafoltask.py\", line 577, in _process_neurosymbolic\n    parsed = json.loads(gen)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/json/__init__.py\", line 346, in loads\n    return _default_decoder.decode(s)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/json/decoder.py\", line 337, in decode\n    obj, end = self.raw_decode(s, idx=_w(s, 0).end())\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/json/decoder.py\", line 355, in raw_decode\n    raise JSONDecodeError(\"Expecting value\", s, err.value) from None\njson.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/sem/logic.py\", line 154, in parse\n    result = self.process_next_expression(None)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/sem/logic.py\", line 290, in process_next_expression\n    accum = self.handle(tok, context)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/sem/logic.py\", line 312, in handle\n    return self.handle_quant(tok, context)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/sem/logic.py\", line 427, in handle_quant\n    accum = self.process_next_expression(tok)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/sem/logic.py\", line 297, in process_next_expression\n    return self.attempt_adjuncts(accum, context)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/sem/logic.py\", line 322, in attempt_adjuncts\n    expression = self.attempt_ApplicationExpression(expression, context)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/sem/logic.py\", line 532, in attempt_ApplicationExpression\n    expression, self.process_next_expression(APP)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/sem/logic.py\", line 293, in process_next_expression\n    raise UnexpectedTokenException(\nnltk.sem.logic.UnexpectedTokenException: Unexpected token: '->'.  Expression expected.\n\nThe above exception was the direct cause of the following exception:\n\nTraceback (most recent call last):\n  File \"/data/gpfs/projects/punim0478/bansaab/linc2/eval/tasks/utils.py\", line 216, in evaluate\n    p_list = [read_expr(p) for p in premises]\n  File \"/data/gpfs/projects/punim0478/bansaab/linc2/eval/tasks/utils.py\", line 216, in <listcomp>\n    p_list = [read_expr(p) for p in premises]\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/sem/logic.py\", line 957, in fromstring\n    return cls._logic_parser.parse(s, signature)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/sem/logic.py\", line 159, in parse\n    raise LogicalExpressionException(None, msg) from e\nnltk.sem.logic.LogicalExpressionException: Unexpected token: '->'.  Expression expected.\nall x. (Equal(x,StrangerThings)) (-> Popular(x))\n                                  ^\n"}
{"timestamp": "2025-09-16T18:22:36.017194", "premises": ["all x. (NetflixShow(x) -> Popular(x))", "all x. (NetflixShow(x) -> Popular(x))", "all x. (Popular(x) -> KarenWillBingeWatch(x))", "all x. (KarenWillBingeWatch(x) -> KarenWillDownload(x))", "all x. (KarenWillDownload(x) -> NotDownloads(x, BlackMirror))", "all x. (NotDownloads(x, BlackMirror) -> NetflixShow(x))", "all x. (KarenWillBingeWatch(x) -> KarenWillShare(x))"], "conclusion": "all x. (LisaWillWatch(x) -> BlackMirror(x))", "error_type": "<class 'nltk.inference.prover9.Prover9FatalException'>", "error_message": "(FATAL)\n%%ERROR: The following symbols are used with multiple arities: BlackMirror/1, BlackMirror/0.\n\n\nFatal error:  The following symbols are used with multiple arities: BlackMirror/1, BlackMirror/0", "stack_trace": "Traceback (most recent call last):\n  File \"/data/gpfs/projects/punim0478/bansaab/linc2/eval/tasks/owafoltask.py\", line 577, in _process_neurosymbolic\n    parsed = json.loads(gen)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/json/__init__.py\", line 346, in loads\n    return _default_decoder.decode(s)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/json/decoder.py\", line 337, in decode\n    obj, end = self.raw_decode(s, idx=_w(s, 0).end())\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/json/decoder.py\", line 355, in raw_decode\n    raise JSONDecodeError(\"Expecting value\", s, err.value) from None\njson.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"/data/gpfs/projects/punim0478/bansaab/linc2/eval/tasks/utils.py\", line 219, in evaluate\n    truth_value = prover.prove(c, p_list)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/inference/api.py\", line 37, in prove\n    return self._prove(goal, assumptions, verbose)[0]\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/inference/prover9.py\", line 327, in _prove\n    stdout, returncode = self._call_prover9(\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/inference/prover9.py\", line 370, in _call_prover9\n    raise Prover9FatalException(returncode, errormsg)\nnltk.inference.prover9.Prover9FatalException: (FATAL)\n%%ERROR: The following symbols are used with multiple arities: BlackMirror/1, BlackMirror/0.\n\n\nFatal error:  The following symbols are used with multiple arities: BlackMirror/1, BlackMirror/0\n"}
{"timestamp": "2025-09-16T18:22:36.017688", "premises": ["all x. (Popular(x) -> NetflixShow(x))", "all x. (Popular(x) -> KarenWillBingeWatch(x))", "all x. (KarenWillBingeWatch(x) -> KarenWillDownload(x))", "-KarenWillDownload(BlackMirror)", "all x. (NetflixShow(x) -> BlackMirror(x))", "all x. (KarenWillBingeWatch(x) -> KarenWillShare(x) -> Lisa)"], "conclusion": "KarenWillShare(BlackMirror)", "error_type": "<class 'nltk.inference.prover9.Prover9FatalException'>", "error_message": "(FATAL)\n%%ERROR: The following symbols are used with multiple arities: BlackMirror/1, BlackMirror/0.\n\n\nFatal error:  The following symbols are used with multiple arities: BlackMirror/1, BlackMirror/0", "stack_trace": "Traceback (most recent call last):\n  File \"/data/gpfs/projects/punim0478/bansaab/linc2/eval/tasks/owafoltask.py\", line 577, in _process_neurosymbolic\n    parsed = json.loads(gen)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/json/__init__.py\", line 346, in loads\n    return _default_decoder.decode(s)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/json/decoder.py\", line 337, in decode\n    obj, end = self.raw_decode(s, idx=_w(s, 0).end())\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/json/decoder.py\", line 355, in raw_decode\n    raise JSONDecodeError(\"Expecting value\", s, err.value) from None\njson.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"/data/gpfs/projects/punim0478/bansaab/linc2/eval/tasks/utils.py\", line 219, in evaluate\n    truth_value = prover.prove(c, p_list)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/inference/api.py\", line 37, in prove\n    return self._prove(goal, assumptions, verbose)[0]\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/inference/prover9.py\", line 327, in _prove\n    stdout, returncode = self._call_prover9(\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/inference/prover9.py\", line 370, in _call_prover9\n    raise Prover9FatalException(returncode, errormsg)\nnltk.inference.prover9.Prover9FatalException: (FATAL)\n%%ERROR: The following symbols are used with multiple arities: BlackMirror/1, BlackMirror/0.\n\n\nFatal error:  The following symbols are used with multiple arities: BlackMirror/1, BlackMirror/0\n"}
{"timestamp": "2025-09-16T18:23:19.521624", "premises": ["Beijing is the capital of the People's Republic of China.", "Beijing has hosted both the 2008 Summer Olympics and a winter olympics.", "beijing hosted the 2008 summer olympics and a winter olympics.", "beijing hosted both the 2008 summer olympics and a winter olympics.", "beijing has hosted both the 2008 summer olympics and a winter olympics."], "conclusion": "beijing has hosted both the 2008 summer olympics and a winter olympics.", "error_type": "<class 'nltk.sem.logic.LogicalExpressionException'>", "error_message": "Unexpected token: 'has'.\nbeijing has hosted both the 2008 summer olympics and a winter olympics.\n        ^", "stack_trace": "Traceback (most recent call last):\n  File \"/data/gpfs/projects/punim0478/bansaab/linc2/eval/tasks/owafoltask.py\", line 577, in _process_neurosymbolic\n    parsed = json.loads(gen)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/json/__init__.py\", line 346, in loads\n    return _default_decoder.decode(s)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/json/decoder.py\", line 337, in decode\n    obj, end = self.raw_decode(s, idx=_w(s, 0).end())\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/json/decoder.py\", line 355, in raw_decode\n    raise JSONDecodeError(\"Expecting value\", s, err.value) from None\njson.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/sem/logic.py\", line 156, in parse\n    raise UnexpectedTokenException(self._currentIndex + 1, self.token(0))\nnltk.sem.logic.UnexpectedTokenException: Unexpected token: 'has'.\n\nThe above exception was the direct cause of the following exception:\n\nTraceback (most recent call last):\n  File \"/data/gpfs/projects/punim0478/bansaab/linc2/eval/tasks/utils.py\", line 215, in evaluate\n    c = read_expr(conclusion)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/sem/logic.py\", line 957, in fromstring\n    return cls._logic_parser.parse(s, signature)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/sem/logic.py\", line 159, in parse\n    raise LogicalExpressionException(None, msg) from e\nnltk.sem.logic.LogicalExpressionException: Unexpected token: 'has'.\nbeijing has hosted both the 2008 summer olympics and a winter olympics.\n        ^\n"}
{"timestamp": "2025-09-16T18:23:19.528229", "premises": ["all x. (Beijing(x) -> Capital(x, People'sRepublicofChina))", "all x. (Beijing(x) -> Populous(x) & NationalCapital(x))", "all x. (Beijing(x) -> LocatedIn(x, NorthernChina))", "all x. (Beijing(x) -> Host(x, 2008 Summer Olympics) & Host(x, 2008 Summer Paralympics))", "all x. (Beijing(x) -> Host(x, SummerOlympics) & Host(x, WinterOlympics) & Host(x, SummerParalympics) & Host(x, WinterParalympics))"], "conclusion": "all x. (University(x) & Rank(x, AsiaPacific) & Rank(x, World))", "error_type": "<class 'nltk.sem.logic.LogicalExpressionException'>", "error_message": "Unexpected token: 'Summer'.  Expected token ')'.\nall x. (Beijing(x) -> Host(x, 2008 Summer Olympics) & Host(x, 2008 Summer Paralympics))\n                                   ^", "stack_trace": "Traceback (most recent call last):\n  File \"/data/gpfs/projects/punim0478/bansaab/linc2/eval/tasks/owafoltask.py\", line 577, in _process_neurosymbolic\n    parsed = json.loads(gen)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/json/__init__.py\", line 346, in loads\n    return _default_decoder.decode(s)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/json/decoder.py\", line 337, in decode\n    obj, end = self.raw_decode(s, idx=_w(s, 0).end())\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/json/decoder.py\", line 355, in raw_decode\n    raise JSONDecodeError(\"Expecting value\", s, err.value) from None\njson.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/sem/logic.py\", line 154, in parse\n    result = self.process_next_expression(None)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/sem/logic.py\", line 290, in process_next_expression\n    accum = self.handle(tok, context)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/sem/logic.py\", line 312, in handle\n    return self.handle_quant(tok, context)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/sem/logic.py\", line 427, in handle_quant\n    accum = self.process_next_expression(tok)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/sem/logic.py\", line 290, in process_next_expression\n    accum = self.handle(tok, context)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/sem/logic.py\", line 315, in handle\n    return self.handle_open(tok, context)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/sem/logic.py\", line 449, in handle_open\n    accum = self.process_next_expression(None)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/sem/logic.py\", line 297, in process_next_expression\n    return self.attempt_adjuncts(accum, context)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/sem/logic.py\", line 323, in attempt_adjuncts\n    expression = self.attempt_BooleanExpression(expression, context)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/sem/logic.py\", line 485, in attempt_BooleanExpression\n    factory, expression, self.process_next_expression(tok)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/sem/logic.py\", line 290, in process_next_expression\n    accum = self.handle(tok, context)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/sem/logic.py\", line 303, in handle\n    return self.handle_variable(tok, context)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/sem/logic.py\", line 359, in handle_variable\n    self.assertNextToken(Tokens.CLOSE)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/sem/logic.py\", line 573, in assertNextToken\n    raise UnexpectedTokenException(self._currentIndex, tok, expected)\nnltk.sem.logic.UnexpectedTokenException: Unexpected token: 'Summer'.  Expected token ')'.\n\nThe above exception was the direct cause of the following exception:\n\nTraceback (most recent call last):\n  File \"/data/gpfs/projects/punim0478/bansaab/linc2/eval/tasks/utils.py\", line 216, in evaluate\n    p_list = [read_expr(p) for p in premises]\n  File \"/data/gpfs/projects/punim0478/bansaab/linc2/eval/tasks/utils.py\", line 216, in <listcomp>\n    p_list = [read_expr(p) for p in premises]\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/sem/logic.py\", line 957, in fromstring\n    return cls._logic_parser.parse(s, signature)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/sem/logic.py\", line 159, in parse\n    raise LogicalExpressionException(None, msg) from e\nnltk.sem.logic.LogicalExpressionException: Unexpected token: 'Summer'.  Expected token ')'.\nall x. (Beijing(x) -> Host(x, 2008 Summer Olympics) & Host(x, 2008 Summer Paralympics))\n                                   ^\n"}
{"timestamp": "2025-09-16T18:23:19.529776", "premises": ["all x. (Capital(x) -> Beijing(x))", "all x. (MostPopulous(x) -> NationalCapitalCity(x))", "all x. (Location(x) -> NorthernChina(x))", "all x. (Hosted(x) -> SummerOlympics(x) & SummerParalympics(x))", "all x. (Hosted(x) -> SummerOlympics(x) & WinterOlympics(x) & SummerParalympics(x) & WinterParalympics(x))"], "conclusion": "all x. (Universities(x) -> ConsistentlyRank(x, AsiaPacific) & ConsistentlyRank(x, World) & 91(x) & -(x, NotUniversity))", "error_type": "<class 'nltk.sem.logic.LogicalExpressionException'>", "error_message": "Unexpected token: ','.  Expected token ')'.\nall x. (Universities(x) -> ConsistentlyRank(x, AsiaPacific) & ConsistentlyRank(x, World) & 91(x) & -(x, NotUniversity))\n                                                                                                      ^", "stack_trace": "Traceback (most recent call last):\n  File \"/data/gpfs/projects/punim0478/bansaab/linc2/eval/tasks/owafoltask.py\", line 577, in _process_neurosymbolic\n    parsed = json.loads(gen)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/json/__init__.py\", line 346, in loads\n    return _default_decoder.decode(s)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/json/decoder.py\", line 337, in decode\n    obj, end = self.raw_decode(s, idx=_w(s, 0).end())\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/json/decoder.py\", line 355, in raw_decode\n    raise JSONDecodeError(\"Expecting value\", s, err.value) from None\njson.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/sem/logic.py\", line 154, in parse\n    result = self.process_next_expression(None)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/sem/logic.py\", line 290, in process_next_expression\n    accum = self.handle(tok, context)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/sem/logic.py\", line 312, in handle\n    return self.handle_quant(tok, context)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/sem/logic.py\", line 427, in handle_quant\n    accum = self.process_next_expression(tok)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/sem/logic.py\", line 290, in process_next_expression\n    accum = self.handle(tok, context)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/sem/logic.py\", line 315, in handle\n    return self.handle_open(tok, context)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/sem/logic.py\", line 449, in handle_open\n    accum = self.process_next_expression(None)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/sem/logic.py\", line 297, in process_next_expression\n    return self.attempt_adjuncts(accum, context)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/sem/logic.py\", line 323, in attempt_adjuncts\n    expression = self.attempt_BooleanExpression(expression, context)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/sem/logic.py\", line 485, in attempt_BooleanExpression\n    factory, expression, self.process_next_expression(tok)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/sem/logic.py\", line 297, in process_next_expression\n    return self.attempt_adjuncts(accum, context)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/sem/logic.py\", line 323, in attempt_adjuncts\n    expression = self.attempt_BooleanExpression(expression, context)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/sem/logic.py\", line 485, in attempt_BooleanExpression\n    factory, expression, self.process_next_expression(tok)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/sem/logic.py\", line 290, in process_next_expression\n    accum = self.handle(tok, context)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/sem/logic.py\", line 306, in handle\n    return self.handle_negation(tok, context)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/sem/logic.py\", line 327, in handle_negation\n    return self.make_NegatedExpression(self.process_next_expression(Tokens.NOT))\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/sem/logic.py\", line 290, in process_next_expression\n    accum = self.handle(tok, context)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/sem/logic.py\", line 315, in handle\n    return self.handle_open(tok, context)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/sem/logic.py\", line 450, in handle_open\n    self.assertNextToken(Tokens.CLOSE)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/sem/logic.py\", line 573, in assertNextToken\n    raise UnexpectedTokenException(self._currentIndex, tok, expected)\nnltk.sem.logic.UnexpectedTokenException: Unexpected token: ','.  Expected token ')'.\n\nThe above exception was the direct cause of the following exception:\n\nTraceback (most recent call last):\n  File \"/data/gpfs/projects/punim0478/bansaab/linc2/eval/tasks/utils.py\", line 215, in evaluate\n    c = read_expr(conclusion)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/sem/logic.py\", line 957, in fromstring\n    return cls._logic_parser.parse(s, signature)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/sem/logic.py\", line 159, in parse\n    raise LogicalExpressionException(None, msg) from e\nnltk.sem.logic.LogicalExpressionException: Unexpected token: ','.  Expected token ')'.\nall x. (Universities(x) -> ConsistentlyRank(x, AsiaPacific) & ConsistentlyRank(x, World) & 91(x) & -(x, NotUniversity))\n                                                                                                      ^\n"}
{"timestamp": "2025-09-16T18:23:19.547116", "premises": ["all x. (CapitalOf(x, PeopleSRepublicOfChina) & City(x) & Populous(x) & Location(x, NorthernChina) & HostedOlympics(x, 2008SummerOlympics) & HostedOlympics(x, 2008SummerParalympics) & HasConsistentlyRankedUniversities(x))", "all x. (CapitalOf(x, PeopleSRepublicOfChina) & City(x))", "all x. (Populous(x) & City(x))", "all x. (Location(x, NorthernChina))", "all x. (HostedOlympics(x, 2008SummerOlympics) & HostedOlympics(x, 2008SummerParalympics))", "all x. (HostedOlympics(x, SummerOlympics) & HostedOlympics(x, WinterOlympics) & HostedOlympics(x, SummerParalympics) & HostedOlympics(x, WinterParalympics))"], "conclusion": "all x. (HasConsistentlyRankedUniversities(x, AsiaPacific) & HasConsistentlyRankedUniversities(x, World))", "error_type": "<class 'nltk.inference.prover9.Prover9FatalException'>", "error_message": "(FATAL)\n%%ERROR: The following symbols are used with multiple arities: HasConsistentlyRankedUniversities/1, HasConsistentlyRankedUniversities/2.\n\n\nFatal error:  The following symbols are used with multiple arities: HasConsistentlyRankedUniversities/1, HasConsistentlyRankedUniversities/2", "stack_trace": "Traceback (most recent call last):\n  File \"/data/gpfs/projects/punim0478/bansaab/linc2/eval/tasks/owafoltask.py\", line 577, in _process_neurosymbolic\n    parsed = json.loads(gen)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/json/__init__.py\", line 346, in loads\n    return _default_decoder.decode(s)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/json/decoder.py\", line 337, in decode\n    obj, end = self.raw_decode(s, idx=_w(s, 0).end())\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/json/decoder.py\", line 355, in raw_decode\n    raise JSONDecodeError(\"Expecting value\", s, err.value) from None\njson.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"/data/gpfs/projects/punim0478/bansaab/linc2/eval/tasks/utils.py\", line 219, in evaluate\n    truth_value = prover.prove(c, p_list)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/inference/api.py\", line 37, in prove\n    return self._prove(goal, assumptions, verbose)[0]\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/inference/prover9.py\", line 327, in _prove\n    stdout, returncode = self._call_prover9(\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/inference/prover9.py\", line 370, in _call_prover9\n    raise Prover9FatalException(returncode, errormsg)\nnltk.inference.prover9.Prover9FatalException: (FATAL)\n%%ERROR: The following symbols are used with multiple arities: HasConsistentlyRankedUniversities/1, HasConsistentlyRankedUniversities/2.\n\n\nFatal error:  The following symbols are used with multiple arities: HasConsistentlyRankedUniversities/1, HasConsistentlyRankedUniversities/2\n"}
{"timestamp": "2025-09-16T18:24:07.180742", "premises": ["Beijing(capital, People'sRepublicofChina)", "Beijing(mostPopulous, nationalCapitalCity)", "Beijing(location, NorthernChina)", "Beijing(hosted, 2008SummerOlympics) & Beijing(hosted, 2008SummerParalympics)", "Beijing(hosted, SummerOlympics) & Beijing(hosted, WinterOlympics) & Beijing(hosted, SummerParalympics) & Beijing(hosted, WinterParalympics)"], "conclusion": "Beijing(hasUniversities, 91) & Beijing(universitiesRank, Asia-Pacific) & Beijing(universitiesRank, world)", "error_type": "<class 'nltk.sem.logic.LogicalExpressionException'>", "error_message": "Unexpected token: '-'.  Expected token ')'.\nBeijing(hasUniversities, 91) & Beijing(universitiesRank, Asia-Pacific) & Beijing(universitiesRank, world)\n                                                             ^", "stack_trace": "Traceback (most recent call last):\n  File \"/data/gpfs/projects/punim0478/bansaab/linc2/eval/tasks/owafoltask.py\", line 577, in _process_neurosymbolic\n    parsed = json.loads(gen)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/json/__init__.py\", line 346, in loads\n    return _default_decoder.decode(s)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/json/decoder.py\", line 337, in decode\n    obj, end = self.raw_decode(s, idx=_w(s, 0).end())\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/json/decoder.py\", line 355, in raw_decode\n    raise JSONDecodeError(\"Expecting value\", s, err.value) from None\njson.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/sem/logic.py\", line 154, in parse\n    result = self.process_next_expression(None)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/sem/logic.py\", line 297, in process_next_expression\n    return self.attempt_adjuncts(accum, context)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/sem/logic.py\", line 323, in attempt_adjuncts\n    expression = self.attempt_BooleanExpression(expression, context)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/sem/logic.py\", line 485, in attempt_BooleanExpression\n    factory, expression, self.process_next_expression(tok)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/sem/logic.py\", line 290, in process_next_expression\n    accum = self.handle(tok, context)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/sem/logic.py\", line 303, in handle\n    return self.handle_variable(tok, context)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/sem/logic.py\", line 359, in handle_variable\n    self.assertNextToken(Tokens.CLOSE)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/sem/logic.py\", line 573, in assertNextToken\n    raise UnexpectedTokenException(self._currentIndex, tok, expected)\nnltk.sem.logic.UnexpectedTokenException: Unexpected token: '-'.  Expected token ')'.\n\nThe above exception was the direct cause of the following exception:\n\nTraceback (most recent call last):\n  File \"/data/gpfs/projects/punim0478/bansaab/linc2/eval/tasks/utils.py\", line 215, in evaluate\n    c = read_expr(conclusion)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/sem/logic.py\", line 957, in fromstring\n    return cls._logic_parser.parse(s, signature)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/sem/logic.py\", line 159, in parse\n    raise LogicalExpressionException(None, msg) from e\nnltk.sem.logic.LogicalExpressionException: Unexpected token: '-'.  Expected token ')'.\nBeijing(hasUniversities, 91) & Beijing(universitiesRank, Asia-Pacific) & Beijing(universitiesRank, world)\n                                                             ^\n"}
{"timestamp": "2025-09-16T18:24:07.179663", "premises": ["capital(Beijing, People's Republic of China)", "populous(Beijing, national capital city)", "located(Beijing, northern China)", "hosted(Beijing, 2008 Summer Olympics and 2008 Summer Paralympics Games)", "hosted(Beijing, both Summer and Winter Olympics, along with Summer and Winter Paralympics)", "ranked(Beijing, universities, Asia-Pacific, world)", "all x. (AlwaysTired(x) -> NotGoodWorker(x))", "all x. (Hardworking(x) & AlwaysDoesJob(x) -> GoodWorker(x))", "all x. (AlwaysTired(x) -> NotGoodWorker(x))"], "conclusion": "all x. (Hardworking(x) & AlwaysDoesJob(x) -> GoodWorker(x))", "error_type": "<class 'nltk.sem.logic.LogicalExpressionException'>", "error_message": "Unexpected token: 'Republic'.  Expected token ')'.\ncapital(Beijing, People's Republic of China)\n                          ^", "stack_trace": "Traceback (most recent call last):\n  File \"/data/gpfs/projects/punim0478/bansaab/linc2/eval/tasks/owafoltask.py\", line 577, in _process_neurosymbolic\n    parsed = json.loads(gen)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/json/__init__.py\", line 346, in loads\n    return _default_decoder.decode(s)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/json/decoder.py\", line 337, in decode\n    obj, end = self.raw_decode(s, idx=_w(s, 0).end())\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/json/decoder.py\", line 355, in raw_decode\n    raise JSONDecodeError(\"Expecting value\", s, err.value) from None\njson.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/sem/logic.py\", line 154, in parse\n    result = self.process_next_expression(None)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/sem/logic.py\", line 290, in process_next_expression\n    accum = self.handle(tok, context)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/sem/logic.py\", line 303, in handle\n    return self.handle_variable(tok, context)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/sem/logic.py\", line 359, in handle_variable\n    self.assertNextToken(Tokens.CLOSE)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/sem/logic.py\", line 573, in assertNextToken\n    raise UnexpectedTokenException(self._currentIndex, tok, expected)\nnltk.sem.logic.UnexpectedTokenException: Unexpected token: 'Republic'.  Expected token ')'.\n\nThe above exception was the direct cause of the following exception:\n\nTraceback (most recent call last):\n  File \"/data/gpfs/projects/punim0478/bansaab/linc2/eval/tasks/utils.py\", line 216, in evaluate\n    p_list = [read_expr(p) for p in premises]\n  File \"/data/gpfs/projects/punim0478/bansaab/linc2/eval/tasks/utils.py\", line 216, in <listcomp>\n    p_list = [read_expr(p) for p in premises]\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/sem/logic.py\", line 957, in fromstring\n    return cls._logic_parser.parse(s, signature)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/sem/logic.py\", line 159, in parse\n    raise LogicalExpressionException(None, msg) from e\nnltk.sem.logic.LogicalExpressionException: Unexpected token: 'Republic'.  Expected token ')'.\ncapital(Beijing, People's Republic of China)\n                          ^\n"}
{"timestamp": "2025-09-16T18:24:07.192474", "premises": ["TEXT: Beijing is the capital of the People's Republic of China.", "capital(Beijing, People'sRepublicOfChina)", "populous(Beijing) & nationalCapital(Beijing)", "northern(Beijing)", "hosted(Beijing, 2008SummerOlympics) & hosted(Beijing, 2008SummerParalympics)", "hosted(Beijing, SummerOlympics) & hosted(Beijing, WinterOlympics) & hosted(Beijing, SummerParalympics) & hosted(Beijing, WinterParalympics)", "universities(Beijing) & consistentlyRank(best, Asia-Pacific) & consistentlyRank(best, world)"], "conclusion": "southern(Beijing)", "error_type": "<class 'nltk.sem.logic.LogicalExpressionException'>", "error_message": "Unexpected token: 'Beijing'.\nTEXT: Beijing is the capital of the People's Republic of China.\n      ^", "stack_trace": "Traceback (most recent call last):\n  File \"/data/gpfs/projects/punim0478/bansaab/linc2/eval/tasks/owafoltask.py\", line 577, in _process_neurosymbolic\n    parsed = json.loads(gen)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/json/__init__.py\", line 346, in loads\n    return _default_decoder.decode(s)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/json/decoder.py\", line 337, in decode\n    obj, end = self.raw_decode(s, idx=_w(s, 0).end())\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/json/decoder.py\", line 355, in raw_decode\n    raise JSONDecodeError(\"Expecting value\", s, err.value) from None\njson.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/sem/logic.py\", line 156, in parse\n    raise UnexpectedTokenException(self._currentIndex + 1, self.token(0))\nnltk.sem.logic.UnexpectedTokenException: Unexpected token: 'Beijing'.\n\nThe above exception was the direct cause of the following exception:\n\nTraceback (most recent call last):\n  File \"/data/gpfs/projects/punim0478/bansaab/linc2/eval/tasks/utils.py\", line 216, in evaluate\n    p_list = [read_expr(p) for p in premises]\n  File \"/data/gpfs/projects/punim0478/bansaab/linc2/eval/tasks/utils.py\", line 216, in <listcomp>\n    p_list = [read_expr(p) for p in premises]\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/sem/logic.py\", line 957, in fromstring\n    return cls._logic_parser.parse(s, signature)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/sem/logic.py\", line 159, in parse\n    raise LogicalExpressionException(None, msg) from e\nnltk.sem.logic.LogicalExpressionException: Unexpected token: 'Beijing'.\nTEXT: Beijing is the capital of the People's Republic of China.\n      ^\n"}
{"timestamp": "2025-09-16T18:24:07.186175", "premises": ["Beijing(x) -> CapitalOf(x, People's Republic of China)", "Beijing(x) -> MostPopulousNationalCapitalCity(x)", "Beijing(x) -> LocationIn(x, Northern China)", "Beijing(x) -> Hosted(x, 2008 Summer Olympics) & Beijing(x) -> Hosted(x, 2008 Summer Paralympics)", "Beijing(x) -> Hosted(x, Summer Olympics) & Beijing(x) -> Hosted(x, Winter Olympics) & Beijing(x) -> Hosted(x, Summer Paralympics) & Beijing(x) -> Hosted(x, Winter Paralympics)"], "conclusion": "many x. (Beijing(x) & University(x) & (Best(x, Asia-Pacific) & Best(x, World)))", "error_type": "<class 'nltk.sem.logic.LogicalExpressionException'>", "error_message": "Unexpected token: 'x'.\nmany x. (Beijing(x) & University(x) & (Best(x, Asia-Pacific) & Best(x, World)))\n     ^", "stack_trace": "Traceback (most recent call last):\n  File \"/data/gpfs/projects/punim0478/bansaab/linc2/eval/tasks/owafoltask.py\", line 577, in _process_neurosymbolic\n    parsed = json.loads(gen)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/json/__init__.py\", line 346, in loads\n    return _default_decoder.decode(s)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/json/decoder.py\", line 337, in decode\n    obj, end = self.raw_decode(s, idx=_w(s, 0).end())\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/json/decoder.py\", line 355, in raw_decode\n    raise JSONDecodeError(\"Expecting value\", s, err.value) from None\njson.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/sem/logic.py\", line 156, in parse\n    raise UnexpectedTokenException(self._currentIndex + 1, self.token(0))\nnltk.sem.logic.UnexpectedTokenException: Unexpected token: 'x'.\n\nThe above exception was the direct cause of the following exception:\n\nTraceback (most recent call last):\n  File \"/data/gpfs/projects/punim0478/bansaab/linc2/eval/tasks/utils.py\", line 215, in evaluate\n    c = read_expr(conclusion)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/sem/logic.py\", line 957, in fromstring\n    return cls._logic_parser.parse(s, signature)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/sem/logic.py\", line 159, in parse\n    raise LogicalExpressionException(None, msg) from e\nnltk.sem.logic.LogicalExpressionException: Unexpected token: 'x'.\nmany x. (Beijing(x) & University(x) & (Best(x, Asia-Pacific) & Best(x, World)))\n     ^\n"}
{"timestamp": "2025-09-16T18:24:07.195542", "premises": ["all x. (Beijing(x) -> Capital(x, People'sRepublicofChina))", "all x. (Beijing(x) -> Populous(x) & NationalCapital(x))", "all x. (Beijing(x) -> LocatedIn(x, NorthernChina))", "all x. (Beijing(x) -> Hosted(x, 2008SummerOlympics) & Hosted(x, 2008SummerParalympics))", "all x. (Beijing(x) -> Hosted(x, SummerOlympics) & Hosted(x, WinterOlympics) & Hosted(x, SummerParalympics) & Hosted(x, WinterParalympics))"], "conclusion": "all x. (Beijing(x) -> Many(x, Universities) & Rank(x, Best) & (Asia-Pacific(x) | World(x)))", "error_type": "<class 'nltk.sem.logic.LogicalExpressionException'>", "error_message": "Unexpected token: '-'.  Expected token ')'.\nall x. (Beijing(x) -> Many(x, Universities) & Rank(x, Best) & (Asia-Pacific(x) | World(x)))\n                                                                   ^", "stack_trace": "Traceback (most recent call last):\n  File \"/data/gpfs/projects/punim0478/bansaab/linc2/eval/tasks/owafoltask.py\", line 577, in _process_neurosymbolic\n    parsed = json.loads(gen)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/json/__init__.py\", line 346, in loads\n    return _default_decoder.decode(s)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/json/decoder.py\", line 337, in decode\n    obj, end = self.raw_decode(s, idx=_w(s, 0).end())\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/json/decoder.py\", line 355, in raw_decode\n    raise JSONDecodeError(\"Expecting value\", s, err.value) from None\njson.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/sem/logic.py\", line 154, in parse\n    result = self.process_next_expression(None)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/sem/logic.py\", line 290, in process_next_expression\n    accum = self.handle(tok, context)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/sem/logic.py\", line 312, in handle\n    return self.handle_quant(tok, context)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/sem/logic.py\", line 427, in handle_quant\n    accum = self.process_next_expression(tok)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/sem/logic.py\", line 290, in process_next_expression\n    accum = self.handle(tok, context)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/sem/logic.py\", line 315, in handle\n    return self.handle_open(tok, context)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/sem/logic.py\", line 449, in handle_open\n    accum = self.process_next_expression(None)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/sem/logic.py\", line 297, in process_next_expression\n    return self.attempt_adjuncts(accum, context)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/sem/logic.py\", line 323, in attempt_adjuncts\n    expression = self.attempt_BooleanExpression(expression, context)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/sem/logic.py\", line 485, in attempt_BooleanExpression\n    factory, expression, self.process_next_expression(tok)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/sem/logic.py\", line 297, in process_next_expression\n    return self.attempt_adjuncts(accum, context)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/sem/logic.py\", line 323, in attempt_adjuncts\n    expression = self.attempt_BooleanExpression(expression, context)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/sem/logic.py\", line 485, in attempt_BooleanExpression\n    factory, expression, self.process_next_expression(tok)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/sem/logic.py\", line 290, in process_next_expression\n    accum = self.handle(tok, context)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/sem/logic.py\", line 315, in handle\n    return self.handle_open(tok, context)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/sem/logic.py\", line 450, in handle_open\n    self.assertNextToken(Tokens.CLOSE)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/sem/logic.py\", line 573, in assertNextToken\n    raise UnexpectedTokenException(self._currentIndex, tok, expected)\nnltk.sem.logic.UnexpectedTokenException: Unexpected token: '-'.  Expected token ')'.\n\nThe above exception was the direct cause of the following exception:\n\nTraceback (most recent call last):\n  File \"/data/gpfs/projects/punim0478/bansaab/linc2/eval/tasks/utils.py\", line 215, in evaluate\n    c = read_expr(conclusion)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/sem/logic.py\", line 957, in fromstring\n    return cls._logic_parser.parse(s, signature)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/sem/logic.py\", line 159, in parse\n    raise LogicalExpressionException(None, msg) from e\nnltk.sem.logic.LogicalExpressionException: Unexpected token: '-'.  Expected token ')'.\nall x. (Beijing(x) -> Many(x, Universities) & Rank(x, Best) & (Asia-Pacific(x) | World(x)))\n                                                                   ^\n"}
{"timestamp": "2025-09-16T18:24:07.202278", "premises": ["all x. (CapitalOf(x) & People'sRepublicOfChina(x))", "all x. (Populous(x) & NationalCapitalCity(x))", "all x. (Location(x) & North(x))", "all x. (Hosted(x, 2008SummerOlympics) & Hosted(x, 2008SummerParalympics))", "all x. (Hosted(x, SummerOlympics) & Hosted(x, WinterOlympics) & Hosted(x, SummerParalympics) & Hosted(x, WinterParalympics))", "all x. (Rank(x, Best) & Universities(x) & AsiaPacific(x) & World(x))"], "conclusion": "all x. (Location(x) & South(x))", "error_type": "<class 'nltk.inference.prover9.Prover9FatalException'>", "error_message": "(FATAL)\n%%ERROR: A term cannot be constructed from the marked string:\n\n\n    all x (%%START ERROR%%CapitalOf(x) & People'sRepublicOfChina(x)%%END ERROR%%).\n\nFatal error:  sread_term error", "stack_trace": "Traceback (most recent call last):\n  File \"/data/gpfs/projects/punim0478/bansaab/linc2/eval/tasks/owafoltask.py\", line 577, in _process_neurosymbolic\n    parsed = json.loads(gen)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/json/__init__.py\", line 346, in loads\n    return _default_decoder.decode(s)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/json/decoder.py\", line 337, in decode\n    obj, end = self.raw_decode(s, idx=_w(s, 0).end())\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/json/decoder.py\", line 355, in raw_decode\n    raise JSONDecodeError(\"Expecting value\", s, err.value) from None\njson.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"/data/gpfs/projects/punim0478/bansaab/linc2/eval/tasks/utils.py\", line 219, in evaluate\n    truth_value = prover.prove(c, p_list)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/inference/api.py\", line 37, in prove\n    return self._prove(goal, assumptions, verbose)[0]\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/inference/prover9.py\", line 327, in _prove\n    stdout, returncode = self._call_prover9(\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/inference/prover9.py\", line 370, in _call_prover9\n    raise Prover9FatalException(returncode, errormsg)\nnltk.inference.prover9.Prover9FatalException: (FATAL)\n%%ERROR: A term cannot be constructed from the marked string:\n\n\n    all x (%%START ERROR%%CapitalOf(x) & People'sRepublicOfChina(x)%%END ERROR%%).\n\nFatal error:  sread_term error\n"}
{"timestamp": "2025-09-16T18:24:07.202468", "premises": ["capital(Beijing, People'sRepublicofChina)", "populous(Beijing) & nationalCapitalCity(Beijing)", "locatedIn(Beijing, NorthernChina)", "hosted(Beijing, 2008SummerOlympics) & hosted(Beijing, 2008SummerParalympics)", "hosted(Beijing, SummerOlympics) & hosted(Beijing, WinterOlympics) & hosted(Beijing, SummerParalympics) & hosted(Beijing, WinterParalympics)"], "conclusion": "universities(Beijing, 91) & rankAmongBest(Beijing, AsiaPacific, world)", "error_type": "<class 'nltk.inference.prover9.Prover9FatalException'>", "error_message": "(FATAL)\n%%ERROR: A term cannot be constructed from the marked string:\n\n\n    capital(%%START ERROR%%Beijing,People'sRepublicofChina%%END ERROR%%).\n\nFatal error:  sread_term error", "stack_trace": "Traceback (most recent call last):\n  File \"/data/gpfs/projects/punim0478/bansaab/linc2/eval/tasks/owafoltask.py\", line 577, in _process_neurosymbolic\n    parsed = json.loads(gen)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/json/__init__.py\", line 346, in loads\n    return _default_decoder.decode(s)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/json/decoder.py\", line 337, in decode\n    obj, end = self.raw_decode(s, idx=_w(s, 0).end())\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/json/decoder.py\", line 355, in raw_decode\n    raise JSONDecodeError(\"Expecting value\", s, err.value) from None\njson.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"/data/gpfs/projects/punim0478/bansaab/linc2/eval/tasks/utils.py\", line 219, in evaluate\n    truth_value = prover.prove(c, p_list)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/inference/api.py\", line 37, in prove\n    return self._prove(goal, assumptions, verbose)[0]\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/inference/prover9.py\", line 327, in _prove\n    stdout, returncode = self._call_prover9(\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/inference/prover9.py\", line 370, in _call_prover9\n    raise Prover9FatalException(returncode, errormsg)\nnltk.inference.prover9.Prover9FatalException: (FATAL)\n%%ERROR: A term cannot be constructed from the marked string:\n\n\n    capital(%%START ERROR%%Beijing,People'sRepublicofChina%%END ERROR%%).\n\nFatal error:  sread_term error\n"}
{"timestamp": "2025-09-16T18:24:07.202391", "premises": ["all x. (Capital(x) & People'sRepublicofChina(x))", "all x. (MostPopulous(x) & NationalCapitalCity(x))", "all x. (Location(x) & NorthernChina(x))", "all x. (Hosted(x) & 2008SummerOlympics(x) & 2008SummerParalympics(x))", "all x. (Hosted(x) & (SummerOlympics(x) & WinterOlympics(x)) & (SummerParalympics(x) & WinterParalympics(x)))"], "conclusion": "all x. (University(x) & 91(x) & (AsiaPacific(x) & World(x)))", "error_type": "<class 'nltk.inference.prover9.Prover9FatalException'>", "error_message": "(FATAL)\n%%ERROR: A term cannot be constructed from the marked string:\n\n\n    all x (%%START ERROR%%Capital(x) & People'sRepublicofChina(x)%%END ERROR%%).\n\nFatal error:  sread_term error", "stack_trace": "Traceback (most recent call last):\n  File \"/data/gpfs/projects/punim0478/bansaab/linc2/eval/tasks/owafoltask.py\", line 577, in _process_neurosymbolic\n    parsed = json.loads(gen)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/json/__init__.py\", line 346, in loads\n    return _default_decoder.decode(s)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/json/decoder.py\", line 337, in decode\n    obj, end = self.raw_decode(s, idx=_w(s, 0).end())\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/json/decoder.py\", line 355, in raw_decode\n    raise JSONDecodeError(\"Expecting value\", s, err.value) from None\njson.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"/data/gpfs/projects/punim0478/bansaab/linc2/eval/tasks/utils.py\", line 219, in evaluate\n    truth_value = prover.prove(c, p_list)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/inference/api.py\", line 37, in prove\n    return self._prove(goal, assumptions, verbose)[0]\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/inference/prover9.py\", line 327, in _prove\n    stdout, returncode = self._call_prover9(\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/inference/prover9.py\", line 370, in _call_prover9\n    raise Prover9FatalException(returncode, errormsg)\nnltk.inference.prover9.Prover9FatalException: (FATAL)\n%%ERROR: A term cannot be constructed from the marked string:\n\n\n    all x (%%START ERROR%%Capital(x) & People'sRepublicofChina(x)%%END ERROR%%).\n\nFatal error:  sread_term error\n"}
{"timestamp": "2025-09-16T18:24:07.207972", "premises": ["capital(Beijing, People'sRepublicofChina)", "populous(Beijing) & nationalCapital(Beijing)", "location(Beijing, NorthernChina)", "host(Beijing, 2008SummerOlympics) & host(Beijing, 2008SummerParalympics)", "host(Beijing, 2008SummerOlympics) & host(Beijing, 2008WinterOlympics) & host(Beijing, 2008SummerParalympics) & host(Beijing, 2008WinterParalympics)", "rank(BeijingUniversities, AsiaPacific) & rank(BeijingUniversities, world)"], "conclusion": "location(Beijing, SouthernChina)", "error_type": "<class 'nltk.inference.prover9.Prover9FatalException'>", "error_message": "(FATAL)\n%%ERROR: A term cannot be constructed from the marked string:\n\n\n    capital(%%START ERROR%%Beijing,People'sRepublicofChina%%END ERROR%%).\n\nFatal error:  sread_term error", "stack_trace": "Traceback (most recent call last):\n  File \"/data/gpfs/projects/punim0478/bansaab/linc2/eval/tasks/owafoltask.py\", line 577, in _process_neurosymbolic\n    parsed = json.loads(gen)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/json/__init__.py\", line 346, in loads\n    return _default_decoder.decode(s)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/json/decoder.py\", line 337, in decode\n    obj, end = self.raw_decode(s, idx=_w(s, 0).end())\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/json/decoder.py\", line 355, in raw_decode\n    raise JSONDecodeError(\"Expecting value\", s, err.value) from None\njson.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"/data/gpfs/projects/punim0478/bansaab/linc2/eval/tasks/utils.py\", line 219, in evaluate\n    truth_value = prover.prove(c, p_list)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/inference/api.py\", line 37, in prove\n    return self._prove(goal, assumptions, verbose)[0]\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/inference/prover9.py\", line 327, in _prove\n    stdout, returncode = self._call_prover9(\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/inference/prover9.py\", line 370, in _call_prover9\n    raise Prover9FatalException(returncode, errormsg)\nnltk.inference.prover9.Prover9FatalException: (FATAL)\n%%ERROR: A term cannot be constructed from the marked string:\n\n\n    capital(%%START ERROR%%Beijing,People'sRepublicofChina%%END ERROR%%).\n\nFatal error:  sread_term error\n"}
{"timestamp": "2025-09-16T18:24:07.210151", "premises": ["all x. (Beijing(x) -> CapitalOf(x, People'sRepublicofChina))", "all x. (Beijing(x) -> Populous(x) & NationalCapitalCity(x))", "all x. (Beijing(x) -> LocatedIn(x, NorthernChina))", "all x. (Beijing(x) -> Hosted(x, 2008SummerOlympics) & Hosted(x, 2008SummerParalympics))", "all x. (Beijing(x) -> Hosted(x, SummerOlympics) & Hosted(x, WinterOlympics) & Hosted(x, SummerParalympics) & Hosted(x, WinterParalympics))", "all x. (University(x) & Beijing(x) -> RankedAmongBest(x, AsiaPacific) & RankedAmongBest(x, World))"], "conclusion": "all x. (Beijing(x) -> LocatedIn(x, SouthernChina))", "error_type": "<class 'nltk.inference.prover9.Prover9FatalException'>", "error_message": "(FATAL)\n%%ERROR: A term cannot be constructed from the marked string:\n\n\n    all x (Beijing(x) -> CapitalOf(%%START ERROR%%x,People'sRepublicofChina%%END ERROR%%)).\n\nFatal error:  sread_term error", "stack_trace": "Traceback (most recent call last):\n  File \"/data/gpfs/projects/punim0478/bansaab/linc2/eval/tasks/owafoltask.py\", line 577, in _process_neurosymbolic\n    parsed = json.loads(gen)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/json/__init__.py\", line 346, in loads\n    return _default_decoder.decode(s)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/json/decoder.py\", line 337, in decode\n    obj, end = self.raw_decode(s, idx=_w(s, 0).end())\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/json/decoder.py\", line 355, in raw_decode\n    raise JSONDecodeError(\"Expecting value\", s, err.value) from None\njson.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"/data/gpfs/projects/punim0478/bansaab/linc2/eval/tasks/utils.py\", line 219, in evaluate\n    truth_value = prover.prove(c, p_list)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/inference/api.py\", line 37, in prove\n    return self._prove(goal, assumptions, verbose)[0]\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/inference/prover9.py\", line 327, in _prove\n    stdout, returncode = self._call_prover9(\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/inference/prover9.py\", line 370, in _call_prover9\n    raise Prover9FatalException(returncode, errormsg)\nnltk.inference.prover9.Prover9FatalException: (FATAL)\n%%ERROR: A term cannot be constructed from the marked string:\n\n\n    all x (Beijing(x) -> CapitalOf(%%START ERROR%%x,People'sRepublicofChina%%END ERROR%%)).\n\nFatal error:  sread_term error\n"}
{"timestamp": "2025-09-16T18:25:51.050248", "premises": ["all x. (Capital(x) -> Beijing(x))", "all x. (MostPopulous(x) -> NationalCapitalCity(x) & City(x) -> Beijing(x))", "all x. (Location(x) -> NorthernChina(x) & City(x) -> Beijing(x))", "all x. (Hosted(x, SummerOlympics) & Hosted(x, SummerParalympics) -> Beijing(x))", "all x. (Hosted(x, SummerOlympics) & Hosted(x, WinterOlympics) & Hosted(x, SummerParalympics) & Hosted(x, WinterParalympics) -> Beijing(x))", "all x. all y. (University(x) & Rank(x, AsiaPacific) & Rank(x, World) & From(y, Beijing) -> Equal(x,y))"], "conclusion": "all x. all y. (City(x) & Rank(x, UrbanPopulation) & From(y, Beijing) -> Equal(x,y))", "error_type": "<class 'nltk.inference.prover9.Prover9FatalException'>", "error_message": "(FATAL)\n%%ERROR: The following symbols are used with multiple arities: Beijing/1, Beijing/0.\n\n\nFatal error:  The following symbols are used with multiple arities: Beijing/1, Beijing/0", "stack_trace": "Traceback (most recent call last):\n  File \"/data/gpfs/projects/punim0478/bansaab/linc2/eval/tasks/owafoltask.py\", line 577, in _process_neurosymbolic\n    parsed = json.loads(gen)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/json/__init__.py\", line 346, in loads\n    return _default_decoder.decode(s)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/json/decoder.py\", line 337, in decode\n    obj, end = self.raw_decode(s, idx=_w(s, 0).end())\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/json/decoder.py\", line 355, in raw_decode\n    raise JSONDecodeError(\"Expecting value\", s, err.value) from None\njson.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"/data/gpfs/projects/punim0478/bansaab/linc2/eval/tasks/utils.py\", line 219, in evaluate\n    truth_value = prover.prove(c, p_list)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/inference/api.py\", line 37, in prove\n    return self._prove(goal, assumptions, verbose)[0]\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/inference/prover9.py\", line 327, in _prove\n    stdout, returncode = self._call_prover9(\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/inference/prover9.py\", line 370, in _call_prover9\n    raise Prover9FatalException(returncode, errormsg)\nnltk.inference.prover9.Prover9FatalException: (FATAL)\n%%ERROR: The following symbols are used with multiple arities: Beijing/1, Beijing/0.\n\n\nFatal error:  The following symbols are used with multiple arities: Beijing/1, Beijing/0\n"}
{"timestamp": "2025-09-16T18:25:51.057180", "premises": ["all x. (CapitalOf(x, Beijing) -> Beijing(x))", "all x. (Populous(x, Beijing) -> NationalCapitalCity(x, Beijing))", "all x. (LocatedIn(x, Beijing, NorthernChina) -> Beijing(x))", "all x. (Hosted(x, Beijing, 2008, SummerOlympics) & Hosted(x, Beijing, 2008, SummerParalympics) -> Beijing(x))", "all x. (Hosted(x, Beijing, SummerOlympics) & Hosted(x, Beijing, WinterOlympics) & Hosted(x, Beijing, SummerParalympics) & Hosted(x, Beijing, WinterParalympics) -> Beijing(x))", "all x. (ConsistentlyRanked(x, Beijing, Best, AsiaPacific) & ConsistentlyRanked(x, Beijing, Best, World) -> Beijing(x))"], "conclusion": "all x. (SecondLargest(x, Beijing, China, UrbanPopulation) -> Beijing(x))", "error_type": "<class 'nltk.inference.prover9.Prover9FatalException'>", "error_message": "(FATAL)\n%%ERROR: The following symbols are used with multiple arities: Hosted/3, Hosted/4, Beijing/1, Beijing/0.\n\n\nFatal error:  The following symbols are used with multiple arities: Hosted/3, Hosted/4, Beijing/1, Beijing/0", "stack_trace": "Traceback (most recent call last):\n  File \"/data/gpfs/projects/punim0478/bansaab/linc2/eval/tasks/owafoltask.py\", line 577, in _process_neurosymbolic\n    parsed = json.loads(gen)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/json/__init__.py\", line 346, in loads\n    return _default_decoder.decode(s)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/json/decoder.py\", line 337, in decode\n    obj, end = self.raw_decode(s, idx=_w(s, 0).end())\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/json/decoder.py\", line 355, in raw_decode\n    raise JSONDecodeError(\"Expecting value\", s, err.value) from None\njson.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"/data/gpfs/projects/punim0478/bansaab/linc2/eval/tasks/utils.py\", line 219, in evaluate\n    truth_value = prover.prove(c, p_list)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/inference/api.py\", line 37, in prove\n    return self._prove(goal, assumptions, verbose)[0]\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/inference/prover9.py\", line 327, in _prove\n    stdout, returncode = self._call_prover9(\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/inference/prover9.py\", line 370, in _call_prover9\n    raise Prover9FatalException(returncode, errormsg)\nnltk.inference.prover9.Prover9FatalException: (FATAL)\n%%ERROR: The following symbols are used with multiple arities: Hosted/3, Hosted/4, Beijing/1, Beijing/0.\n\n\nFatal error:  The following symbols are used with multiple arities: Hosted/3, Hosted/4, Beijing/1, Beijing/0\n"}
{"timestamp": "2025-09-16T18:25:51.050636", "premises": ["all x. (CapitalOf(x, PeopleSRepublicOfChina) & Equal(x,Beijing))", "all x. (MostPopulousNationalCapitalCity(x) & Equal(x,Beijing))", "all x. (LocatedIn(x, NorthernChina) & Equal(x,Beijing))", "all x. (Hosted(x, 2008SummerOlympics) & Hosted(x, 2008SummerParalympics) & Equal(x,Beijing))", "all x. (Hosted(x, SummerOlympics) & Hosted(x, WinterOlympics) & Hosted(x, SummerParalympics) & Hosted(x, WinterParalympics) & Equal(x,Beijing))", "all x. (ConsistentlyRank(x, BestUniversities) & Equal(AsiaPacific,partOf)(x, World) & Equal(x,Beijing))", "all x. (CapitalOf(x, PeopleSRepublicOfChina) & Equal(x,Beijing)) & all x. (MostPopulousNationalCapitalCity(x) & Equal(x,Beijing)) & all x. (LocatedIn(x, NorthernChina) & Equal(x,Beijing)) & all x. (Hosted(x, 2008SummerOlympics) & Hosted(x, 2008SummerParalympics) & Equal(x,Beijing)) & all x. (Hosted(x, SummerOlympics) & Hosted(x, WinterOlympics) & Hosted(x, SummerParalympics) & Hosted(x, WinterParalympics) & Equal(x,Beijing)) & all x. (ConsistentlyRank(x, BestUniversities) & Equal(AsiaPacific,partOf)(x, World) & Equal(x,Beijing))", "all x. (CapitalOf(x, PeopleSRepublicOfChina) & Equal(x,Beijing)) & all x. (MostPopulousNationalCapitalCity(x) & Equal(x,Beijing)) & all x. (LocatedIn(x, NorthernChina) & Equal(x,Beijing)) & all x. (Hosted(x, 2008SummerOlympics) & Hosted(x, 2008SummerParalympics) & Equal(x,Beijing)) & all x. (Hosted(x, SummerOlympics) & Hosted(x, WinterOlympics) & Hosted(x, SummerParalympics) & Hosted(x, WinterParalympics) & Equal(x,Beijing)) & all x. (ConsistentlyRank(x, BestUniversities) & Equal(AsiaPacific,partOf)(x, World) & Equal(x,Beijing)) & all x. (Population(x) = Beijing)", "all x. (LandBorder(x, Asia) -> MemberOf(x, ShanghaiCooperationOrganization))", "all x. (MemberOf(x, ShanghaiCooperationOrganization) -> Equal(CentralAsia,partOf)(x))", "all x. (Equal(CentralAsia,partOf)(x) -> LandBorder(x, Asia))", "all x. (MemberOf(x, ShanghaiCooperationOrganization) -> Equal(China,x))", "all x. (LandBorder(x, Asia) -> MemberOf(x, ShanghaiCooperationOrganization)) & all x. (MemberOf(x, ShanghaiCooperationOrganization) -> Equal(CentralAsia,partOf)(x)) & all x. (Equal(CentralAsia,partOf)(x) -> LandBorder(x, Asia)) & all x. (MemberOf(x, ShanghaiCooperationOrganization) -> Equal(China,x))", "all x. (LandBorder(x, Asia) -> MemberOf(x, ShanghaiCooperationOrganization)) & all x. (MemberOf(x, ShanghaiCooperationOrganization) -> Equal(CentralAsia,partOf)(x)) & all x. (Equal(CentralAsia,partOf)(x) -> LandBorder(x, Asia)) & all x. (MemberOf(x, ShanghaiCooperationOrganization) -> Equal(China,x)) & all x. (Equal(China,memberOf)(x, ShanghaiCooperationOrganization))", "all x. (LandBorder(x, Asia) -> MemberOf(x, ShanghaiCooperationOrganization)) & all x. (MemberOf(x, ShanghaiCooperationOrganization) -> Equal(CentralAsia,partOf)(x)) & all x. (Equal(CentralAsia,partOf)(x) -> LandBorder(x, Asia)) & all x. (MemberOf(x, ShanghaiCooperationOrganization) -> Equal(China,x)) & all x. (Equal(China,memberOf)(x, ShanghaiCooperationOrganization))", "all x. (LandBorder(x, Asia) -> MemberOf(x, ShanghaiCooperationOrganization))", "all x. (MemberOf(x, ShanghaiCooperationOrganization) -> Equal(CentralAsia,partOf)(x))", "all x. (Equal(CentralAsia,partOf)(x) -> LandBorder(x, Asia))", "all x. (MemberOf(x, ShanghaiCooperationOrganization) -> Equal(China,x))", "all x. (LandBorder(x, Asia) -> MemberOf(x, ShanghaiCooperationOrganization)) & all x. (MemberOf(x, ShanghaiCooperationOrganization) -> Equal(CentralAsia,partOf)(x)) & all x. (Equal(CentralAsia,partOf)(x) -> LandBorder(x, Asia)) & all x. (MemberOf(x, ShanghaiCooperationOrganization) -> Equal(China,x))", "all x. (LandBorder(x, Asia) -> MemberOf(x, ShanghaiCooperationOrganization)) & all x. (MemberOf(x, ShanghaiCooperationOrganization) -> Equal(CentralAsia,partOf)(x)) & all x. (Equal(CentralAsia,partOf)(x) -> LandBorder(x, Asia)) & all x. (MemberOf(x, ShanghaiCooperationOrganization) -> Equal(China,x)) & all x. (Equal(China,memberOf)(x, ShanghaiCooperationOrganization))", "all x. (LandBorder(x, Asia) -> MemberOf(x, ShanghaiCooperationOrganization)) & all x. (MemberOf(x, ShanghaiCooperationOrganization) -> Equal(CentralAsia,partOf)(x)) & all x. (Equal(CentralAsia,partOf)(x) -> LandBorder(x, Asia)) & all x. (MemberOf(x, ShanghaiCooperationOrganization) -> Equal(China,x)) & all x. (Equal(China,memberOf)(x, ShanghaiCooperationOrganization))", "all x. (LandBorder(x, Asia) -> MemberOf(x, ShanghaiCooperationOrganization)) & all x. (MemberOf(x, ShanghaiCooperationOrganization) -> Equal(CentralAsia,partOf)(x)) & all x. (Equal(CentralAsia,partOf)(x) -> LandBorder(x, Asia)) & all x. (MemberOf(x, ShanghaiCooperationOrganization) -> Equal(China,x)) & all x. (Equal(China,memberOf)(x, ShanghaiCooperationOrganization))", "all x. (LandBorder(x, Asia) -> MemberOf(x, ShanghaiCooperationOrganization))", "all x. (MemberOf(x, ShanghaiCooperationOrganization) -> Equal(CentralAsia,partOf)(x))", "all x. (Equal(CentralAsia,partOf)(x) -> LandBorder(x, Asia))", "all x. (MemberOf(x, ShanghaiCooperationOrganization) -> Equal(China,x))", "all x. (LandBorder(x, Asia) -> MemberOf(x, ShanghaiCooperationOrganization)) & all x. (MemberOf(x, ShanghaiCooperationOrganization) -> Equal(CentralAsia,partOf)(x)) & all x. (Equal(CentralAsia,partOf)(x) -> LandBorder(x, Asia)) & all x. (MemberOf(x, ShanghaiCooperationOrganization) -> Equal(China,x))", "all x. (LandBorder(x, Asia) -> MemberOf(x, ShanghaiCooperationOrganization)) & all x. (MemberOf(x, ShanghaiCooperationOrganization) -> Equal(CentralAsia,partOf)(x)) & all x. (Equal(CentralAsia,partOf)(x) -> LandBorder(x, Asia)) & all x. (MemberOf(x, ShanghaiCooperationOrganization) -> Equal(China,x)) & all x. (Equal(China,memberOf)(x, ShanghaiCooperationOrganization))", "all x. (LandBorder(x, Asia) -> MemberOf(x, ShanghaiCooperationOrganization)) & all x. (MemberOf(x, ShanghaiCooperationOrganization) -> Equal(CentralAsia,partOf)(x)) & all x. (Equal(CentralAsia,partOf)(x) -> LandBorder(x, Asia)) & all x. (MemberOf(x, ShanghaiCooperationOrganization) -> Equal(China,x)) & all x. (Equal(China,memberOf)(x, ShanghaiCooperationOrganization))", "all x. (LandBorder(x, Asia) -> MemberOf(x, ShanghaiCooperationOrganization)) & all x. (MemberOf(x, ShanghaiCooperationOrganization) -> Equal(CentralAsia,partOf)(x)) & all x. (Equal(CentralAsia,partOf)(x) -> LandBorder(x, Asia)) & all x. (MemberOf(x, ShanghaiCooperationOrganization) -> Equal(China,x)) & all x. (Equal(China,memberOf)(x, ShanghaiCooperationOrganization))", "all x. (LandBorder(x, Asia) -> MemberOf(x, ShanghaiCooperationOrganization)) & all x. (MemberOf(x, ShanghaiCooperationOrganization) -> Equal(CentralAsia,partOf)(x)) & all x. (Equal(CentralAsia,partOf)(x) -> LandBorder(x, Asia)) & all x. (MemberOf(x, ShanghaiCooperationOrganization) -> Equal(China,x)) & all x. (Equal(China,memberOf)(x, ShanghaiCooperationOrganization))", "all x. (LandBorder(x, Asia) -> MemberOf(x, ShanghaiCooperationOrganization))", "all x. (MemberOf(x, ShanghaiCooperationOrganization) -> Equal(CentralAsia,partOf)(x))", "all x. (Equal(CentralAsia,partOf)(x) -> LandBorder(x, Asia))", "all x. (MemberOf(x, ShanghaiCooperationOrganization) -> Equal(China,x))", "all x. (LandBorder(x, Asia) -> MemberOf(x, ShanghaiCooperationOrganization)) & all x. (MemberOf(x, ShanghaiCooperationOrganization) -> Equal(CentralAsia,partOf)(x)) & all x. (Equal(CentralAsia,partOf)(x) -> LandBorder(x, Asia)) & all x. (MemberOf(x, ShanghaiCooperationOrganization) -> Equal(China,x))", "all x. (LandBorder(x, Asia) -> MemberOf(x, ShanghaiCooperationOrganization)) & all x. (MemberOf(x, ShanghaiCooperationOrganization) -> Equal(CentralAsia,partOf)(x)) & all x. (Equal(CentralAsia,partOf)(x) -> LandBorder(x, Asia)) & all x. (MemberOf(x, ShanghaiCooperationOrganization) -> Equal(China,x)) & all x. (Equal(China,memberOf)(x, ShanghaiCooperationOrganization))", "all x. (LandBorder(x, Asia) -> MemberOf(x, ShanghaiCooperationOrganization)) & all x. (MemberOf(x, ShanghaiCooperationOrganization) -> Equal(CentralAsia,partOf)(x)) & all x. (Equal(CentralAsia,partOf)(x) -> LandBorder(x, Asia)) & all x. (MemberOf(x, ShanghaiCooperationOrganization) -> Equal(China,x)) & all x. (Equal(China,memberOf)(x, ShanghaiCooperationOrganization))", "all x. (LandBorder(x, Asia) -> MemberOf(x, ShanghaiCooperationOrganization)) & all x. (MemberOf(x, ShanghaiCooperationOrganization) -> Equal(CentralAsia,partOf)(x)) & all x. (Equal(CentralAsia,partOf)(x) -> LandBorder(x, Asia)) & all x. (MemberOf(x, ShanghaiCooperationOrganization) -> Equal(China,x)) & all x. (Equal(China,memberOf)(x, ShanghaiCooperationOrganization))"], "conclusion": "all x. (LandBorder(x, Asia) -> MemberOf(x, ShanghaiCooperationOrganization)) & all x. (MemberOf(x, ShanghaiCooperationOrganization) -> Equal(CentralAsia,partOf)(x)) & all x. (Equal(CentralAsia,partOf)(x) -> LandBorder(x, Asia)) & all x. (MemberOf(x, ShanghaiCooperationOrganization) -> Equal(China,x)) & all x. (Equal(China,memberOf)(x, ShanghaiCooperationOrganization))", "error_type": "<class 'nltk.sem.logic.LogicalExpressionException'>", "error_message": "End of input found.  Expected token ')'.\nall x. (LandBorder(x, Asia) -> MemberOf(x, ShanghaiCooperationOrganization)) & all x. (MemberOf(x, ShanghaiCooperationOrganization) -> Equal(CentralAsia,partOf)(x)) & all x. (Equal(CentralAsia,partOf)(x) -> LandBorder(x, Asia)) & all x. (MemberOf(x, ShanghaiCooperationOrganization) -> Equal(China,x)) & all x. (Equal(China,memberOf)(x, ShanghaiCooperationOrganization))\n                                                                                                                                            ^", "stack_trace": "Traceback (most recent call last):\n  File \"/data/gpfs/projects/punim0478/bansaab/linc2/eval/tasks/owafoltask.py\", line 577, in _process_neurosymbolic\n    parsed = json.loads(gen)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/json/__init__.py\", line 346, in loads\n    return _default_decoder.decode(s)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/json/decoder.py\", line 337, in decode\n    obj, end = self.raw_decode(s, idx=_w(s, 0).end())\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/json/decoder.py\", line 355, in raw_decode\n    raise JSONDecodeError(\"Expecting value\", s, err.value) from None\njson.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/sem/logic.py\", line 270, in token\n    tok = self._buffer[self._currentIndex]\nIndexError: list index out of range\n\nThe above exception was the direct cause of the following exception:\n\nTraceback (most recent call last):\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/sem/logic.py\", line 562, in assertNextToken\n    tok = self.token()\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/sem/logic.py\", line 276, in token\n    raise ExpectedMoreTokensException(self._currentIndex + 1) from e\nnltk.sem.logic.ExpectedMoreTokensException: End of input found.  More tokens expected.\n\nThe above exception was the direct cause of the following exception:\n\nTraceback (most recent call last):\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/sem/logic.py\", line 154, in parse\n    result = self.process_next_expression(None)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/sem/logic.py\", line 297, in process_next_expression\n    return self.attempt_adjuncts(accum, context)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/sem/logic.py\", line 323, in attempt_adjuncts\n    expression = self.attempt_BooleanExpression(expression, context)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/sem/logic.py\", line 485, in attempt_BooleanExpression\n    factory, expression, self.process_next_expression(tok)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/sem/logic.py\", line 290, in process_next_expression\n    accum = self.handle(tok, context)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/sem/logic.py\", line 312, in handle\n    return self.handle_quant(tok, context)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/sem/logic.py\", line 427, in handle_quant\n    accum = self.process_next_expression(tok)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/sem/logic.py\", line 290, in process_next_expression\n    accum = self.handle(tok, context)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/sem/logic.py\", line 315, in handle\n    return self.handle_open(tok, context)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/sem/logic.py\", line 449, in handle_open\n    accum = self.process_next_expression(None)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/sem/logic.py\", line 290, in process_next_expression\n    accum = self.handle(tok, context)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/sem/logic.py\", line 303, in handle\n    return self.handle_variable(tok, context)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/sem/logic.py\", line 359, in handle_variable\n    self.assertNextToken(Tokens.CLOSE)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/sem/logic.py\", line 564, in assertNextToken\n    raise ExpectedMoreTokensException(\nnltk.sem.logic.ExpectedMoreTokensException: End of input found.  Expected token ')'.\n\nThe above exception was the direct cause of the following exception:\n\nTraceback (most recent call last):\n  File \"/data/gpfs/projects/punim0478/bansaab/linc2/eval/tasks/utils.py\", line 216, in evaluate\n    p_list = [read_expr(p) for p in premises]\n  File \"/data/gpfs/projects/punim0478/bansaab/linc2/eval/tasks/utils.py\", line 216, in <listcomp>\n    p_list = [read_expr(p) for p in premises]\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/sem/logic.py\", line 957, in fromstring\n    return cls._logic_parser.parse(s, signature)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/sem/logic.py\", line 159, in parse\n    raise LogicalExpressionException(None, msg) from e\nnltk.sem.logic.LogicalExpressionException: End of input found.  Expected token ')'.\nall x. (LandBorder(x, Asia) -> MemberOf(x, ShanghaiCooperationOrganization)) & all x. (MemberOf(x, ShanghaiCooperationOrganization) -> Equal(CentralAsia,partOf)(x)) & all x. (Equal(CentralAsia,partOf)(x) -> LandBorder(x, Asia)) & all x. (MemberOf(x, ShanghaiCooperationOrganization) -> Equal(China,x)) & all x. (Equal(China,memberOf)(x, ShanghaiCooperationOrganization))\n                                                                                                                                            ^\n"}
{"timestamp": "2025-09-16T18:25:51.068571", "premises": ["all x. (Capital(x) -> People'sRepublicOfChina(x))", "all x. (Popular(x) & NationalCapitalCity(x))", "all x. (Location(x) -> NorthernChina(x))", "all x. (Hosted(x) & 2008SummerOlympics(x) & 2008SummerParalympics(x))", "all x. (Hosted(x) & SummerOlympics(x) & WinterOlympics(x) & SummerParalympics(x) & WinterParalympics(x))", "all x. (University(x) -> Rank(x) & AsiaPacific(x) & World(x))"], "conclusion": "all x. (City(x) -> Population(x) & Urban(x) & Chinese(x) & SecondLargest(x))", "error_type": "<class 'nltk.inference.prover9.Prover9FatalException'>", "error_message": "(FATAL)\n%%ERROR: A term cannot be constructed from the marked string:\n\n\n    all x (%%START ERROR%%Capital(x) -> People'sRepublicOfChina(x)%%END ERROR%%).\n\nFatal error:  sread_term error", "stack_trace": "Traceback (most recent call last):\n  File \"/data/gpfs/projects/punim0478/bansaab/linc2/eval/tasks/owafoltask.py\", line 577, in _process_neurosymbolic\n    parsed = json.loads(gen)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/json/__init__.py\", line 346, in loads\n    return _default_decoder.decode(s)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/json/decoder.py\", line 337, in decode\n    obj, end = self.raw_decode(s, idx=_w(s, 0).end())\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/json/decoder.py\", line 355, in raw_decode\n    raise JSONDecodeError(\"Expecting value\", s, err.value) from None\njson.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"/data/gpfs/projects/punim0478/bansaab/linc2/eval/tasks/utils.py\", line 219, in evaluate\n    truth_value = prover.prove(c, p_list)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/inference/api.py\", line 37, in prove\n    return self._prove(goal, assumptions, verbose)[0]\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/inference/prover9.py\", line 327, in _prove\n    stdout, returncode = self._call_prover9(\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/inference/prover9.py\", line 370, in _call_prover9\n    raise Prover9FatalException(returncode, errormsg)\nnltk.inference.prover9.Prover9FatalException: (FATAL)\n%%ERROR: A term cannot be constructed from the marked string:\n\n\n    all x (%%START ERROR%%Capital(x) -> People'sRepublicOfChina(x)%%END ERROR%%).\n\nFatal error:  sread_term error\n"}
{"timestamp": "2025-09-16T18:25:51.051205", "premises": ["capital(Beijing)", "world\\_capital(Beijing)", "in(Beijing, northern china)", "host(Beijing, 2008 summer olympics)", "host(Beijing, summer olympics)", "host(Beijing, winter olympics)", "host(Beijing, summer paralympics)", "host(Beijing, winter paralympics)", "many(beijing's universities)", "rank(beijing's universities)"], "conclusion": "second\\_largest\\_city(beijing)", "error_type": "<class 'nltk.sem.logic.LogicalExpressionException'>", "error_message": "Unexpected token: '\\'.\nsecond\\_largest\\_city(beijing)\n      ^", "stack_trace": "Traceback (most recent call last):\n  File \"/data/gpfs/projects/punim0478/bansaab/linc2/eval/tasks/owafoltask.py\", line 577, in _process_neurosymbolic\n    parsed = json.loads(gen)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/json/__init__.py\", line 346, in loads\n    return _default_decoder.decode(s)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/json/decoder.py\", line 337, in decode\n    obj, end = self.raw_decode(s, idx=_w(s, 0).end())\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/json/decoder.py\", line 355, in raw_decode\n    raise JSONDecodeError(\"Expecting value\", s, err.value) from None\njson.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/sem/logic.py\", line 156, in parse\n    raise UnexpectedTokenException(self._currentIndex + 1, self.token(0))\nnltk.sem.logic.UnexpectedTokenException: Unexpected token: '\\'.\n\nThe above exception was the direct cause of the following exception:\n\nTraceback (most recent call last):\n  File \"/data/gpfs/projects/punim0478/bansaab/linc2/eval/tasks/utils.py\", line 215, in evaluate\n    c = read_expr(conclusion)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/sem/logic.py\", line 957, in fromstring\n    return cls._logic_parser.parse(s, signature)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/sem/logic.py\", line 159, in parse\n    raise LogicalExpressionException(None, msg) from e\nnltk.sem.logic.LogicalExpressionException: Unexpected token: '\\'.\nsecond\\_largest\\_city(beijing)\n      ^\n"}
{"timestamp": "2025-09-16T18:25:51.057651", "premises": ["all x. (CapitalOf(x, PeopleSRepublicOfChina) & City(x) & MostPopulous(x) & LocatedIn(x, NorthernChina) & Hosted(x, 2008 Summer Olympics) & Hosted(x, 2008 Summer Paralympics Games) & Hosted(x, 2022 Winter Olympics) & Hosted(x, 2022 Winter Paralympics Games))", "all x. (CapitalOf(x, PeopleSRepublicOfChina) & City(x) & MostPopulous(x) & LocatedIn(x, NorthernChina) & Hosted(x, 2008 Summer Olympics) & Hosted(x, 2008 Summer Paralympics Games) & Hosted(x, 2022 Winter Olympics) & Hosted(x, 2022 Winter Paralympics Games))", "all x. (City(x) & MostPopulous(x) & NationalCapital(x))", "all x. (LocatedIn(x, NorthernChina))", "all x. (Hosted(x, 2008 Summer Olympics) & Hosted(x, 2008 Summer Paralympics Games))", "all x. (Hosted(x, 2008 Summer Olympics) & Hosted(x, 2008 Summer Paralympics Games) & Hosted(x, 2022 Winter Olympics) & Hosted(x, 2022 Winter Paralympics Games))", "all x. (Ranked(x, 91) & Ranked(x, BestInAsiaPacificAndTheWorld))", "all x. (City(x) & MostPopulous(x) & NationalCapital(x))", "all x. (LaLiga(x) & MorePoints(x, y) -> HigherRank(x, y))", "all x. (LaLiga(x) & -MorePoints(x, y) & -MorePoints(y, x) & MorePointsInGameBetween(x, y) -> HigherRank(x, y))", "LaLiga(RealMadrid) & LaLiga(Barcelona)", "MorePoints(RealMadrid, Barcelona)", "-MorePointsInGameBetween(RealMadrid, Barcelona) & -MorePointsInGameBetween(Barcelona, RealMadrid)"], "conclusion": "HigherRank(RealMadrid, Barcelona)", "error_type": "<class 'nltk.sem.logic.LogicalExpressionException'>", "error_message": "Unexpected token: 'Summer'.  Expected token ')'.\nall x. (CapitalOf(x, PeopleSRepublicOfChina) & City(x) & MostPopulous(x) & LocatedIn(x, NorthernChina) & Hosted(x, 2008 Summer Olympics) & Hosted(x, 2008 Summer Paralympics Games) & Hosted(x, 2022 Winter Olympics) & Hosted(x, 2022 Winter Paralympics Games))\n                                                                                                                        ^", "stack_trace": "Traceback (most recent call last):\n  File \"/data/gpfs/projects/punim0478/bansaab/linc2/eval/tasks/owafoltask.py\", line 577, in _process_neurosymbolic\n    parsed = json.loads(gen)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/json/__init__.py\", line 346, in loads\n    return _default_decoder.decode(s)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/json/decoder.py\", line 337, in decode\n    obj, end = self.raw_decode(s, idx=_w(s, 0).end())\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/json/decoder.py\", line 355, in raw_decode\n    raise JSONDecodeError(\"Expecting value\", s, err.value) from None\njson.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/sem/logic.py\", line 154, in parse\n    result = self.process_next_expression(None)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/sem/logic.py\", line 290, in process_next_expression\n    accum = self.handle(tok, context)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/sem/logic.py\", line 312, in handle\n    return self.handle_quant(tok, context)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/sem/logic.py\", line 427, in handle_quant\n    accum = self.process_next_expression(tok)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/sem/logic.py\", line 290, in process_next_expression\n    accum = self.handle(tok, context)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/sem/logic.py\", line 315, in handle\n    return self.handle_open(tok, context)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/sem/logic.py\", line 449, in handle_open\n    accum = self.process_next_expression(None)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/sem/logic.py\", line 297, in process_next_expression\n    return self.attempt_adjuncts(accum, context)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/sem/logic.py\", line 323, in attempt_adjuncts\n    expression = self.attempt_BooleanExpression(expression, context)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/sem/logic.py\", line 485, in attempt_BooleanExpression\n    factory, expression, self.process_next_expression(tok)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/sem/logic.py\", line 290, in process_next_expression\n    accum = self.handle(tok, context)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/sem/logic.py\", line 303, in handle\n    return self.handle_variable(tok, context)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/sem/logic.py\", line 359, in handle_variable\n    self.assertNextToken(Tokens.CLOSE)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/sem/logic.py\", line 573, in assertNextToken\n    raise UnexpectedTokenException(self._currentIndex, tok, expected)\nnltk.sem.logic.UnexpectedTokenException: Unexpected token: 'Summer'.  Expected token ')'.\n\nThe above exception was the direct cause of the following exception:\n\nTraceback (most recent call last):\n  File \"/data/gpfs/projects/punim0478/bansaab/linc2/eval/tasks/utils.py\", line 216, in evaluate\n    p_list = [read_expr(p) for p in premises]\n  File \"/data/gpfs/projects/punim0478/bansaab/linc2/eval/tasks/utils.py\", line 216, in <listcomp>\n    p_list = [read_expr(p) for p in premises]\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/sem/logic.py\", line 957, in fromstring\n    return cls._logic_parser.parse(s, signature)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/sem/logic.py\", line 159, in parse\n    raise LogicalExpressionException(None, msg) from e\nnltk.sem.logic.LogicalExpressionException: Unexpected token: 'Summer'.  Expected token ')'.\nall x. (CapitalOf(x, PeopleSRepublicOfChina) & City(x) & MostPopulous(x) & LocatedIn(x, NorthernChina) & Hosted(x, 2008 Summer Olympics) & Hosted(x, 2008 Summer Paralympics Games) & Hosted(x, 2022 Winter Olympics) & Hosted(x, 2022 Winter Paralympics Games))\n                                                                                                                        ^\n"}
{"timestamp": "2025-09-16T18:25:51.074820", "premises": ["all x. (Capital(x) -> Beijing(x))", "all x. (MostPopulousNationalCapitalCity(x) -> Beijing(x))", "all x. (Location(x) -> NorthernChina(x))", "all x. (Hosted(x, 2008SummerOlympics) & Hosted(x, 2008SummerParalympics))", "all x. (Hosted(x, SummerOlympics) & Hosted(x, WinterOlympics) & Hosted(x, SummerParalympics) & Hosted(x, WinterParalympics))", "all x. (Ranked(x, best) & AsiaPacific(x) & World(x))"], "conclusion": "all x. (Capital(x) -> Beijing(x)) & all x. (MostPopulousNationalCapitalCity(x) -> Beijing(x)) & all x. (Location(x) -> NorthernChina(x)) & all x. (Hosted(x, 2008SummerOlympics) & Hosted(x, 2008SummerParalympics)) & all x. (Ranked(x, best) & AsiaPacific(x) & World(x)) -> SecondLargestChineseCityByUrbanPopulation(Beijing)", "error_type": "<class 'nltk.inference.prover9.Prover9FatalException'>", "error_message": "(FATAL)\n%%ERROR: The following symbols are used with multiple arities: Beijing/1, Beijing/0.\n\n\nFatal error:  The following symbols are used with multiple arities: Beijing/1, Beijing/0", "stack_trace": "Traceback (most recent call last):\n  File \"/data/gpfs/projects/punim0478/bansaab/linc2/eval/tasks/owafoltask.py\", line 577, in _process_neurosymbolic\n    parsed = json.loads(gen)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/json/__init__.py\", line 346, in loads\n    return _default_decoder.decode(s)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/json/decoder.py\", line 337, in decode\n    obj, end = self.raw_decode(s, idx=_w(s, 0).end())\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/json/decoder.py\", line 355, in raw_decode\n    raise JSONDecodeError(\"Expecting value\", s, err.value) from None\njson.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"/data/gpfs/projects/punim0478/bansaab/linc2/eval/tasks/utils.py\", line 219, in evaluate\n    truth_value = prover.prove(c, p_list)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/inference/api.py\", line 37, in prove\n    return self._prove(goal, assumptions, verbose)[0]\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/inference/prover9.py\", line 327, in _prove\n    stdout, returncode = self._call_prover9(\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/inference/prover9.py\", line 370, in _call_prover9\n    raise Prover9FatalException(returncode, errormsg)\nnltk.inference.prover9.Prover9FatalException: (FATAL)\n%%ERROR: The following symbols are used with multiple arities: Beijing/1, Beijing/0.\n\n\nFatal error:  The following symbols are used with multiple arities: Beijing/1, Beijing/0\n"}
{"timestamp": "2025-09-16T18:25:51.080844", "premises": ["all x. (Capital(x) & People'sRepublicOfChina(x))", "all x. (MostPopulousNationalCapitalCity(x) & Beijing(x))", "all x. (NorthernChina(x) & Beijing(x))", "all x. (2008SummerOlympics(x) & 2008SummerParalympicsGames(x) & Beijing(x))", "all x. (HostedSummerOlympics(x) & HostedWinterOlympics(x) & HostedSummerParalympics(x) & HostedWinterParalympics(x) & Beijing(x))", "all x. (RankedAmongBest(x) & AsiaPacific(x) & World(x) & Universities(x) & Beijing(x))"], "conclusion": "all x. (SecondLargestChineseCityByUrbanPopulation(x) & Beijing(x))", "error_type": "<class 'nltk.inference.prover9.Prover9FatalException'>", "error_message": "(FATAL)\n%%ERROR: A term cannot be constructed from the marked string:\n\n\n    all x (%%START ERROR%%Capital(x) & People'sRepublicOfChina(x)%%END ERROR%%).\n\nFatal error:  sread_term error", "stack_trace": "Traceback (most recent call last):\n  File \"/data/gpfs/projects/punim0478/bansaab/linc2/eval/tasks/owafoltask.py\", line 577, in _process_neurosymbolic\n    parsed = json.loads(gen)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/json/__init__.py\", line 346, in loads\n    return _default_decoder.decode(s)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/json/decoder.py\", line 337, in decode\n    obj, end = self.raw_decode(s, idx=_w(s, 0).end())\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/json/decoder.py\", line 355, in raw_decode\n    raise JSONDecodeError(\"Expecting value\", s, err.value) from None\njson.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"/data/gpfs/projects/punim0478/bansaab/linc2/eval/tasks/utils.py\", line 219, in evaluate\n    truth_value = prover.prove(c, p_list)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/inference/api.py\", line 37, in prove\n    return self._prove(goal, assumptions, verbose)[0]\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/inference/prover9.py\", line 327, in _prove\n    stdout, returncode = self._call_prover9(\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/inference/prover9.py\", line 370, in _call_prover9\n    raise Prover9FatalException(returncode, errormsg)\nnltk.inference.prover9.Prover9FatalException: (FATAL)\n%%ERROR: A term cannot be constructed from the marked string:\n\n\n    all x (%%START ERROR%%Capital(x) & People'sRepublicOfChina(x)%%END ERROR%%).\n\nFatal error:  sread_term error\n"}
{"timestamp": "2025-09-16T18:25:51.081330", "premises": ["all x. (CapitalOf(x) & People'sRepublicOfChina(x))", "all x. (MostPopulous(x) & NationalCapitalCity(x))", "all x. (LocatedIn(x, NorthernChina))", "all x. (Hosted(x, SummerOlympics) & Hosted(x, SummerParalympics))", "all x. (Hosted(x, SummerOlympics) & Hosted(x, WinterOlympics) & Hosted(x, SummerParalympics) & Hosted(x, WinterParalympics))", "all x. (University(x) & ConsistentlyRankAmongBest(x, AsiaPacific) & ConsistentlyRankAmongBest(x, World))"], "conclusion": "all x. (SecondLargest(x, UrbanPopulation) & ChineseCity(x))", "error_type": "<class 'nltk.inference.prover9.Prover9FatalException'>", "error_message": "(FATAL)\n%%ERROR: A term cannot be constructed from the marked string:\n\n\n    all x (%%START ERROR%%CapitalOf(x) & People'sRepublicOfChina(x)%%END ERROR%%).\n\nFatal error:  sread_term error", "stack_trace": "Traceback (most recent call last):\n  File \"/data/gpfs/projects/punim0478/bansaab/linc2/eval/tasks/owafoltask.py\", line 577, in _process_neurosymbolic\n    parsed = json.loads(gen)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/json/__init__.py\", line 346, in loads\n    return _default_decoder.decode(s)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/json/decoder.py\", line 337, in decode\n    obj, end = self.raw_decode(s, idx=_w(s, 0).end())\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/json/decoder.py\", line 355, in raw_decode\n    raise JSONDecodeError(\"Expecting value\", s, err.value) from None\njson.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"/data/gpfs/projects/punim0478/bansaab/linc2/eval/tasks/utils.py\", line 219, in evaluate\n    truth_value = prover.prove(c, p_list)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/inference/api.py\", line 37, in prove\n    return self._prove(goal, assumptions, verbose)[0]\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/inference/prover9.py\", line 327, in _prove\n    stdout, returncode = self._call_prover9(\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/inference/prover9.py\", line 370, in _call_prover9\n    raise Prover9FatalException(returncode, errormsg)\nnltk.inference.prover9.Prover9FatalException: (FATAL)\n%%ERROR: A term cannot be constructed from the marked string:\n\n\n    all x (%%START ERROR%%CapitalOf(x) & People'sRepublicOfChina(x)%%END ERROR%%).\n\nFatal error:  sread_term error\n"}
{"timestamp": "2025-09-16T18:25:51.083474", "premises": ["all x. (Beijing(x) -> Capital(x, People'sRepublicOfChina))", "all x. (Beijing(x) -> NationalCapitalCity(x) & WorldsMostPopulousCity(x))", "all x. (Beijing(x) -> NorthernChina(x))", "all x. (Beijing(x) -> Hosted(x, 2008SummerOlympics) & Hosted(x, 2008SummerParalympics))", "all x. (Beijing(x) -> Hosted(x, SummerOlympics) & Hosted(x, WinterOlympics) & Hosted(x, SummerParalympics) & Hosted(x, WinterParalympics))"], "conclusion": "all x. (Beijing(x) -> Ranked(x, Best, Universities, AsiaPacific) & Ranked(x, Best, Universities, World))", "error_type": "<class 'nltk.inference.prover9.Prover9FatalException'>", "error_message": "(FATAL)\n%%ERROR: A term cannot be constructed from the marked string:\n\n\n    all x (Beijing(x) -> Capital(%%START ERROR%%x,People'sRepublicOfChina%%END ERROR%%)).\n\nFatal error:  sread_term error", "stack_trace": "Traceback (most recent call last):\n  File \"/data/gpfs/projects/punim0478/bansaab/linc2/eval/tasks/owafoltask.py\", line 577, in _process_neurosymbolic\n    parsed = json.loads(gen)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/json/__init__.py\", line 346, in loads\n    return _default_decoder.decode(s)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/json/decoder.py\", line 337, in decode\n    obj, end = self.raw_decode(s, idx=_w(s, 0).end())\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/json/decoder.py\", line 355, in raw_decode\n    raise JSONDecodeError(\"Expecting value\", s, err.value) from None\njson.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"/data/gpfs/projects/punim0478/bansaab/linc2/eval/tasks/utils.py\", line 219, in evaluate\n    truth_value = prover.prove(c, p_list)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/inference/api.py\", line 37, in prove\n    return self._prove(goal, assumptions, verbose)[0]\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/inference/prover9.py\", line 327, in _prove\n    stdout, returncode = self._call_prover9(\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/inference/prover9.py\", line 370, in _call_prover9\n    raise Prover9FatalException(returncode, errormsg)\nnltk.inference.prover9.Prover9FatalException: (FATAL)\n%%ERROR: A term cannot be constructed from the marked string:\n\n\n    all x (Beijing(x) -> Capital(%%START ERROR%%x,People'sRepublicOfChina%%END ERROR%%)).\n\nFatal error:  sread_term error\n"}
{"timestamp": "2025-09-16T18:31:35.731134", "premisesconclusion": "F0:", "error_type": "<class 'nltk.inference.prover9.Prover9FatalException'>", "error_message": "(FATAL)\n%%ERROR: Unexpected character (extra closing parenthesis?):\n\n%%START ERROR%%\n    FOL:%%END ERROR%%.\n\nFatal error:  sread_term error", "stack_trace": "Traceback (most recent call last):\n  File \"/data/gpfs/projects/punim0478/bansaab/linc2/eval/tasks/owafoltask.py\", line 577, in _process_neurosymbolic\n    parsed = json.loads(gen)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/json/__init__.py\", line 346, in loads\n    return _default_decoder.decode(s)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/json/decoder.py\", line 337, in decode\n    obj, end = self.raw_decode(s, idx=_w(s, 0).end())\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/json/decoder.py\", line 355, in raw_decode\n    raise JSONDecodeError(\"Expecting value\", s, err.value) from None\njson.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"/data/gpfs/projects/punim0478/bansaab/linc2/eval/tasks/utils.py\", line 219, in evaluate\n    truth_value = prover.prove(c, p_list)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/inference/api.py\", line 37, in prove\n    return self._prove(goal, assumptions, verbose)[0]\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/inference/prover9.py\", line 327, in _prove\n    stdout, returncode = self._call_prover9(\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/inference/prover9.py\", line 370, in _call_prover9\n    raise Prover9FatalException(returncode, errormsg)\nnltk.inference.prover9.Prover9FatalException: (FATAL)\n%%ERROR: Unexpected character (extra closing parenthesis?):\n\n%%START ERROR%%\n    FOL:%%END ERROR%%.\n\nFatal error:  sread_term error\n"}
{"timestamp": "2025-09-16T18:31:35.729150", "premises": ["all x. (Alien(x) -> Extraterrestrial(x))", "all x. (From(x, Mars) -> Alien(x))", "all x. (Extraterrestrial(x) -> Human(x))", "all x. (From(x, Earth) -> Human(x))", "all x. (From(x, Earth) -> Human(x)) & all x. (From(x, Mars) -> Alien(x)) -> -From(x, Earth) & -From(x, Mars)", "From(x, Earth) -> Human(x) & From(x, Mars) -> Alien(x) -> -From(x, Earth) & -From(x, Mars)", "Marvin is an alien.", "all x. all y. (GreaterThan(A,B)(x) & LesserThan(B,A)(x) -> B is smaller than A(x))", "all x. all y. (GreaterThan(A,B)(x) & LesserThan(B,A)(x) -> B is lighter than A(x))", "all x. all y. (GreaterThan(F,G)(x) & LesserThan(G,F)(x) -> G is shorter than F(x))", "all x. (Student(x) -> Either(InClassA(x) or InClassB(x)))", "all x. (InClassA(x) -> Either(InClass1(x) or InClass2(x)))", "all x. (InClassB(x) -> Either(InClass3(x) or InClass4(x)))", "if A is taller than F, then A is in class 1 and F is in class 3."], "conclusion": "all x. (GreaterThan(A,F)(x) -> InClassA(x) & InClass1(x) & F is in class 3(x))", "error_type": "<class 'nltk.sem.logic.LogicalExpressionException'>", "error_message": "Unexpected token: 'is'.  Expected token ')'.\nall x. (GreaterThan(A,F)(x) -> InClassA(x) & InClass1(x) & F is in class 3(x))\n                                                             ^", "stack_trace": "Traceback (most recent call last):\n  File \"/data/gpfs/projects/punim0478/bansaab/linc2/eval/tasks/owafoltask.py\", line 577, in _process_neurosymbolic\n    parsed = json.loads(gen)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/json/__init__.py\", line 346, in loads\n    return _default_decoder.decode(s)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/json/decoder.py\", line 337, in decode\n    obj, end = self.raw_decode(s, idx=_w(s, 0).end())\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/json/decoder.py\", line 355, in raw_decode\n    raise JSONDecodeError(\"Expecting value\", s, err.value) from None\njson.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/sem/logic.py\", line 154, in parse\n    result = self.process_next_expression(None)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/sem/logic.py\", line 290, in process_next_expression\n    accum = self.handle(tok, context)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/sem/logic.py\", line 312, in handle\n    return self.handle_quant(tok, context)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/sem/logic.py\", line 427, in handle_quant\n    accum = self.process_next_expression(tok)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/sem/logic.py\", line 290, in process_next_expression\n    accum = self.handle(tok, context)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/sem/logic.py\", line 315, in handle\n    return self.handle_open(tok, context)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/sem/logic.py\", line 450, in handle_open\n    self.assertNextToken(Tokens.CLOSE)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/sem/logic.py\", line 573, in assertNextToken\n    raise UnexpectedTokenException(self._currentIndex, tok, expected)\nnltk.sem.logic.UnexpectedTokenException: Unexpected token: 'is'.  Expected token ')'.\n\nThe above exception was the direct cause of the following exception:\n\nTraceback (most recent call last):\n  File \"/data/gpfs/projects/punim0478/bansaab/linc2/eval/tasks/utils.py\", line 215, in evaluate\n    c = read_expr(conclusion)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/sem/logic.py\", line 957, in fromstring\n    return cls._logic_parser.parse(s, signature)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/sem/logic.py\", line 159, in parse\n    raise LogicalExpressionException(None, msg) from e\nnltk.sem.logic.LogicalExpressionException: Unexpected token: 'is'.  Expected token ')'.\nall x. (GreaterThan(A,F)(x) -> InClassA(x) & InClass1(x) & F is in class 3(x))\n                                                             ^\n"}
{"timestamp": "2025-09-16T18:31:35.727419", "premises": ["all x. (Alien(x) -> Extraterrestrial(x))", "all x. (Extraterrestrial(x) -> From(x, Mars))", "all x. (Human(x) -> From(x, Earth))", "all x. (From(x, Earth) -> Not(x, Alien))", "Equal(Marvin,x)", "From(x, Mars)", "Not(x, Human)", "From(x, Earth)", "Equal(x,Marvin)", "Equal(Marvin,Alien)"], "conclusion": "Equal(Marvin,Extraterrestrial)", "error_type": "<class 'nltk.inference.prover9.Prover9FatalException'>", "error_message": "(FATAL)\n%%ERROR: The following symbols are used with multiple arities: Human/1, Human/0, Alien/1, Alien/0, Extraterrestrial/1, Extraterrestrial/0.\n\n\nFatal error:  The following symbols are used with multiple arities: Human/1, Human/0, Alien/1, Alien/0, Extraterrestrial/1, Extraterrestrial/0", "stack_trace": "Traceback (most recent call last):\n  File \"/data/gpfs/projects/punim0478/bansaab/linc2/eval/tasks/owafoltask.py\", line 577, in _process_neurosymbolic\n    parsed = json.loads(gen)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/json/__init__.py\", line 346, in loads\n    return _default_decoder.decode(s)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/json/decoder.py\", line 337, in decode\n    obj, end = self.raw_decode(s, idx=_w(s, 0).end())\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/json/decoder.py\", line 355, in raw_decode\n    raise JSONDecodeError(\"Expecting value\", s, err.value) from None\njson.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"/data/gpfs/projects/punim0478/bansaab/linc2/eval/tasks/utils.py\", line 219, in evaluate\n    truth_value = prover.prove(c, p_list)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/inference/api.py\", line 37, in prove\n    return self._prove(goal, assumptions, verbose)[0]\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/inference/prover9.py\", line 327, in _prove\n    stdout, returncode = self._call_prover9(\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/inference/prover9.py\", line 370, in _call_prover9\n    raise Prover9FatalException(returncode, errormsg)\nnltk.inference.prover9.Prover9FatalException: (FATAL)\n%%ERROR: The following symbols are used with multiple arities: Human/1, Human/0, Alien/1, Alien/0, Extraterrestrial/1, Extraterrestrial/0.\n\n\nFatal error:  The following symbols are used with multiple arities: Human/1, Human/0, Alien/1, Alien/0, Extraterrestrial/1, Extraterrestrial/0\n"}
{"timestamp": "2025-09-16T18:31:35.746665", "premises": ["all x. (Alien(x) -> Extraterrestrial(x))", "all x. (From(x, Mars) -> Alien(x))", "all x. (Human(x) -> From(x, Earth))", "all x. (Extraterrestrial(x) -> From(x, Mars))", "Marvin \u2260 From(Marvin, Earth)", "Marvin \u2260 From(Marvin, Mars)"], "conclusion": "Marvin is Extraterrestrial", "error_type": "<class 'nltk.sem.logic.LogicalExpressionException'>", "error_message": "Unexpected token: 'is'.\nMarvin is Extraterrestrial\n       ^", "stack_trace": "Traceback (most recent call last):\n  File \"/data/gpfs/projects/punim0478/bansaab/linc2/eval/tasks/owafoltask.py\", line 577, in _process_neurosymbolic\n    parsed = json.loads(gen)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/json/__init__.py\", line 346, in loads\n    return _default_decoder.decode(s)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/json/decoder.py\", line 337, in decode\n    obj, end = self.raw_decode(s, idx=_w(s, 0).end())\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/json/decoder.py\", line 355, in raw_decode\n    raise JSONDecodeError(\"Expecting value\", s, err.value) from None\njson.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/sem/logic.py\", line 156, in parse\n    raise UnexpectedTokenException(self._currentIndex + 1, self.token(0))\nnltk.sem.logic.UnexpectedTokenException: Unexpected token: 'is'.\n\nThe above exception was the direct cause of the following exception:\n\nTraceback (most recent call last):\n  File \"/data/gpfs/projects/punim0478/bansaab/linc2/eval/tasks/utils.py\", line 215, in evaluate\n    c = read_expr(conclusion)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/sem/logic.py\", line 957, in fromstring\n    return cls._logic_parser.parse(s, signature)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/sem/logic.py\", line 159, in parse\n    raise LogicalExpressionException(None, msg) from e\nnltk.sem.logic.LogicalExpressionException: Unexpected token: 'is'.\nMarvin is Extraterrestrial\n       ^\n"}
{"timestamp": "2025-09-16T18:31:35.798754", "premises": ["all x. (Alien(x) -> Extraterrestrial(x))", "all x. (From(x, Mars) -> Alien(x))", "all x. (Human(x) -> NotExtraterrestrial(x))", "all x. (From(x, Earth) -> Human(x))", "-From(Marvin, Earth) & -From(Marvin, Mars)", "-Human(Marvin) & From(Marvin, Earth)", "From(Marvin, Mars) & Extraterrestrial(Marvin)", "From(Marvin, Mars) & -Human(Marvin)", "-From(Marvin, Earth) & -Human(Marvin)", "-From(Marvin, Earth) & Extraterrestrial(Marvin)", "-From(Marvin, Mars) & Human(Marvin)", "-From(Marvin, Mars) & Extraterrestrial(Marvin)", "From(Marvin, Earth) & Human(Marvin)", "From(Marvin, Mars) & Alien(Marvin)", "-From(Marvin, Earth) & -From(Marvin, Mars)", "-Human(Marvin) & -Extraterrestrial(Marvin)", "-From(Marvin, Earth) & -Extraterrestrial(Marvin)", "-From(Marvin, Mars) & -Human(Marvin)", "-From(Marvin, Mars) & -Extraterrestrial(Marvin)", "-From(Marvin, Earth) & NotExtraterrestrial(Marvin)", "-From(Marvin, Mars) & NotExtraterrestrial(Marvin)", "From(Marvin, Earth) & Human(Marvin)", "From(Marvin, Mars) & Alien(Marvin)", "-From(Marvin, Earth) & Extraterrestrial(Marvin)", "-From(Marvin, Mars) & Human(Marvin)", "From(Marvin, Earth) & Alien(Marvin)", "From(Marvin, Mars) & Human(Marvin)", "-From(Marvin, Earth) & -Extraterrestrial(Marvin)", "-From(Marvin, Mars) & -Human(Marvin)", "From(Marvin, Earth) & Human(Marvin)", "From(Marvin, Mars) & Extraterrestrial(Marvin)", "From(Marvin, Earth) & Alien(Marvin)", "From(Marvin, Mars) & Human(Marvin)", "-From(Marvin, Earth) & -Extraterrestrial(Marvin)", "-From(Marvin, Mars) & -Human(Marvin)", "-From(Marvin, Earth) & -Alien(Marvin)", "-From(Marvin, Mars) & -Extraterrestrial(Marvin)", "From(Marvin, Earth) & NotHuman(Marvin)", "From(Marvin, Mars) & Extraterrestrial(Marvin)", "From(Marvin, Earth) & Human(Marvin)", "From(Marvin, Mars) & Alien(Marvin)", "From(Marvin, Earth) & NotExtraterrestrial(Marvin)", "From(Marvin, Mars) & NotHuman(Marvin)", "From(Marvin, Earth) & -Extraterrestrial(Marvin)", "From(Marvin, Mars) & -Human(Marvin)", "From(Marvin, Earth) & -Alien(Marvin)", "From(Marvin, Mars) & -Extraterrestrial(Marvin)", "From(Marvin, Earth) & NotHuman(Marvin)", "From(Marvin, Mars) & NotExtraterrestrial(Marvin)", "From(Marvin, Earth) & Human(Marvin)", "From(Marvin, Mars) & Alien(Marvin)", "From(Marvin, Earth) & Extraterrestrial(Marvin)", "From(Marvin, Mars) & Human(Marvin)", "From(Marvin, Earth) & Alien(Marvin)", "From(Marvin, Mars) & Human(Marvin)", "-From(Marvin, Earth) & -Extraterrestrial(Marvin)", "-From(Marvin, Mars) & -Human(Marvin)", "From(Marvin, Earth) & Human(Marvin)", "From(Marvin, Mars) & Alien(Marvin)", "From(Marvin, Earth) & Extraterrestrial(Marvin)", "From(Marvin, Mars) & Human(Marvin)", "From(Marvin, Earth) & Alien(Marvin)", "From(Marvin, Mars) & Human(Marvin)", "-From(Marvin, Earth) & -Extraterrestrial(Marvin)", "-From(Marvin, Mars) & -Human(Marvin)", "From(Marvin, Earth) & Human(Marvin)", "From(Marvin, Mars) & Extraterrestrial(Marvin)", "From(Marvin, Earth) & Alien(Marvin)", "From(Marvin, Mars) & Human(Marvin)", "From(Marvin, Earth) & NotExtraterrestrial(Marvin)", "From(Marvin, Mars) & -Human(Marvin)", "From(Marvin, Earth) & NotAlien(Marvin)", "From(Marvin, Mars) & -Extraterrestrial(Marvin)", "From(Marvin, Earth) & Human(Marvin)", "From(Marvin, Mars) & Alien(Marvin)", "From(Marvin, Earth) & -Extraterrestrial(Marvin)", "From(Marvin, Mars) & -Human(Marvin)", "From(Marvin, Earth) & Alien(Marvin)", "From(Marvin, Mars) & Human(Marvin)", "From(Marvin, Earth) & Extraterrestrial(Marvin)", "From(Marvin, Mars) & -Human(Marvin)", "From(Marvin, Earth) & NotAlien(Marvin)", "From(Marvin, Mars) & -Extraterrestrial(Marvin)", "From(Marvin, Earth) & Human(Marvin)", "From(Marvin, Mars) & Alien(Marvin)", "From(Marvin, Earth) & Extraterrestrial(Marvin)", "From(Marvin, Mars) & Human(Marvin)", "From(Marvin, Earth) & Alien(Marvin)", "From(Marvin, Mars) & Human(Marvin)", "From(Marvin, Earth) & -Extraterrestrial(Marvin)", "From(Marvin, Mars) & -Human(Marvin)", "From(Marvin, Earth) & Human(Marvin)", "From(Marvin, Mars) & Extraterrestrial(Marvin)", "From(Marvin, Earth) & Alien(Marvin)", "From(Marvin, Mars) & Human(Marvin)", "From(Marvin, Earth) & Alien(Marvin)", "From(Marvin, Mars) & Human(Marvin)", "From(Marvin, Earth) & -Extraterrestrial(Marvin)", "From(Marvin, Mars) & -Human(Marvin)", "From(Marvin, Earth) & NotAlien(Marvin)", "From(Marvin, Mars) & -Extraterrestrial(Marvin)", "From(Marvin, Earth) & Human(Marvin)", "From(Marvin, Mars) & Alien(Marvin)", "From(Marvin, Earth) & Extraterrestrial(Marvin)", "From(Marvin, Mars) & Human(Marvin)", "From(Marvin, Earth) & Alien(Marvin)", "From(Marvin, Mars) & Human(Marvin)", "From(Marvin, Earth) & -Extraterrestrial(Marvin)", "From(Marvin, Mars) & -Human(Marvin)", "From(Marvin, Earth) & NotAlien(Marvin)", "From(Marvin, Mars) & -Extraterrestrial(Marvin)", "From(Marvin, Earth) & Human(Marvin)", "From(Marvin, Mars) & Alien(Marvin)", "From(Marvin, Earth) & Extraterrestrial(Marvin)", "From(Marvin, Mars) & Human(Marvin)", "From(Marvin, Earth) & Alien(Marvin)", "From(Marvin, Mars) & Human(Marvin)", "From(Marvin, Earth) & -Extraterrestrial(Marvin)", "From(Marvin, Mars) & -Human(Marvin)", "From(Marvin, Earth) & Human(Marvin)", "From(Marvin, Mars) & Extraterrestrial(Marvin)", "From(Marvin, Earth) & Alien(Marvin)", "From(Marvin, Mars) & Human(Marvin)", "From(Marvin, Earth) & -Extraterrestrial(Marvin)", "From(Marvin, Mars) & -Human(Marvin)", "From(Marvin, Earth) & NotAlien(Marvin)", "From(Marvin, Mars) & -Extraterrestrial(Marvin)", "From(Marvin, Earth) & Human(Marvin)", "From(Marvin, Mars) & Alien(Marvin)", "From(Marvin, Earth) & Extraterrestrial(Marvin)", "From(Marvin, Mars) & Human(Marvin)", "From(Marvin, Earth) & Alien(Marvin)", "From(Marvin, Mars) & Human(Marvin)", "From(Marvin, Earth) & -Extraterrestrial(Marvin)", "From(Marvin, Mars) & -Human(Marvin)", "From(Marvin, Earth) & Human(Marvin)", "From(Marvin, Mars) & Extraterrestrial(Marvin)", "From(Marvin, Earth) & Alien(Marvin)", "From(Marvin, Mars) & Human(Marvin)", "From(Marvin, Earth) & Alien(Marvin)", "From(Marvin, Mars) & Human(Marvin)", "From(Marvin, Earth) & -Extraterrestrial(Marvin)", "From(Marvin, Earth) & Human(Marvin)", "From(Marvin, Mars) & -Extraterrestrial(Marvin)", "From(Marvin, Earth) & -Human(Marvin)", "From(Marvin, Earth) & -Extraterrestrial(Marvin)", "From(Marvin, Mars) & Human(Marvin)", "From(Marvin, Earth) & Alien(Marvin)", "From(Marvin, Mars) & -Extraterrestrial(Marvin)", "From(Marvin, Earth) & Human(Marvin)", "From(Marvin, Mars) & Alien(Marvin)", "From(Marvin, Earth) & Human(Marvin)", "From(Marvin, Mars) & -Extraterrestrial(Marvin)", "From(Marvin, Earth) & -Human(Marvin)", "From(Marvin, Earth) & -Extraterrestrial(Marvin)", "From(Marvin, Mars) & Human(Marvin)", "From(Marvin, Earth) & Alien(Marvin)", "From(Marvin, Mars) & Human(Marvin)", "From(Marvin, Earth) & Alien(Marvin)", "From(Marvin, Mars) & Human(Marvin)", "From(Marvin, Earth) & Human(Marvin)", "From(Marvin, Mars) & -Extraterrestrial(Marvin)", "From(Marvin, Earth) & -Human(Marvin)", "From(Marvin, Earth) & -Extraterrestrial(Marvin)", "From(Marvin, Mars) & Human(Marvin)", "From(Marvin, Earth) & -Extraterrestrial(Marvin)", "From(Marvin, Mars) & Human(Marvin)", "From(Marvin, Earth) & Human(Marvin)", "From(Marvin, Mars) & -Extraterrestrial(Marvin)", "From(Marvin, Earth) & -Human(Marvin)", "From(Marvin, Earth) & -Extraterrestrial(Marvin)", "From(Marvin, Earth) & Human(Marvin)", "From(Marvin, Mars) & Alien(Marvin)", "From(Marvin, Earth) & Human(Marvin)", "From(Marvin, Mars) & Human(Marvin)", "From(Marvin, Earth) & Alien(Marvin)", "From(Marvin, Mars) & -Extraterrestrial(Marvin)", "From(Marvin, Earth) & Human(Marvin)", "From(Marvin, Mars) & Human(Marvin)", "From(Marvin, Earth) & -Extraterrestrial(Marvin)", "From(Marvin, Mars) & -Human(Marvin)", "From(Marvin, Earth) & Human(Marvin)", "From(Marvin, Mars) & Alien(Marvin)", "From(Marvin, Earth) & Extraterrestrial(Marvin)", "From(Marvin, Mars) & Human(Marvin)", "From(Marvin, Earth) & Alien(Marvin)", "From(Marvin, Mars) & Human(Marvin)", "From(Marvin, Earth) & -Extraterrestrial(Marvin)", "From(Marvin, Mars) & -Human(Marvin)", "From(Marvin, Earth) & Human(Marvin)", "From(Marvin, Mars) & -Extraterrestrial(Marvin)", "From(Marvin, Earth) & Human(Marvin)", "From(Marvin, Earth) & -Extraterrestrial(Marvin)", "From(Marvin, Mars) & Human(Marvin)", "From(Marvin, Earth) & Alien(Marvin)", "From(Marvin, Mars) & -Extraterrestrial(Marvin)", "From(Marvin, Earth) & Human(Marvin)", "From(Marvin, Mars) & Human(Marvin)", "From(Marvin, Earth) & Alien(Marvin)", "From(Marvin, Mars) & Human(Marvin)", "From(Marvin, Earth) & Human(Marvin)", "From(Marvin, Mars) & -Extraterrestrial(Marvin)", "From(Marvin, Earth) & -Human(Marvin)", "From(Marvin, Earth) & -Extraterrestrial(Marvin)", "From(Marvin, Mars) & Human(Marvin)", "From(Marvin, Earth) & Alien(Marvin)", "From(Marvin, Mars) & Human(Marvin)", "From(Marvin, Earth) & Alien(Marvin)", "From(Marvin, Mars) & Human(Marvin)", "From(Marvin, Earth) & Human(Marvin)", "From(Marvin, Mars) & -Extraterrestrial(Marvin)", "From(Marvin, Earth) & -Human(Marvin)", "From(Marvin, Earth) & -Extraterrestrial(Marvin)", "From(Marvin, Mars) & Human(Marvin)", "From(Marvin, Earth) & Alien(Marvin)", "From(Marvin, Mars) & Human(Marvin)", "From(Marvin, Earth) & -Extraterrestrial(Marvin)", "From(Marvin, Mars) & Human(Marvin)", "From(Marvin, Earth) & Human(Marvin)", "From(Marvin, Mars) & -Extraterrestrial(Marvin)", "From(Marvin, Earth) & -Human(Marvin)", "From(Marvin, Earth) & Human(Marvin)", "From(Marvin, Mars) & -Extraterrestrial(Marvin)", "From(Marvin, Earth) & -Human(Marvin)", "From(Marvin, Earth) & Human(Marvin)", "From(Marvin, Mars) & -Extraterrestrial(Marvin)", "From(Marvin, Earth) & -Human(Marvin)", "From(Marvin, Earth) & -Extraterrestrial(Marvin)", "From(Marvin, Mars) & Human(Marvin)", "From(Marvin, Earth) & Alien(Marvin)", "From(Marvin, Mars) & Human(Marvin)", "From(Marvin, Earth) & Human(Marvin)", "From(Marvin, Mars) & -Extraterrestrial(Marvin)", "From(Marvin, Earth) & -Human(Marvin)", "From(Marvin, Earth) & -Extraterrestrial(Marvin)", "From(Marvin, Mars) & Human(Marvin)", "From(Marvin, Earth) & -Human(Marvin)", "From(Marvin, Mars) & Human(Marvin)", "From(Marvin, Earth) & Human(Marvin)", "From(Marvin, Mars) & -Extraterrestrial(Marvin)", "From(Marvin, Earth) & -Human(Marvin)", "From(Marvin, Earth) & -Extraterrestrial(Marvin)", "From(Marvin, Mars) & Human(Marvin)", "From(Marvin, Earth) & Alien(Marvin)", "From(Marvin, Mars) & Human(Marvin)", "From(Marvin, Earth) & Human(Marvin)", "From(Marvin, Mars) & -Extraterrestrial(Marvin)", "From(Marvin, Earth) & Human(Marvin)", "From(Marvin, Earth) & -Extraterrestrial(Marvin)", "From(Marvin, Mars) & Human(Marvin)", "From(Marvin, Earth) & -Human(Marvin)", "From(Marvin, Mars) & Human(Marvin)", "From(Marvin, Earth) & Human(Marvin)", "From(Marvin, Mars) & -Extraterrestrial(Marvin)", "From(Marvin, Earth) & -Human(Marvin)", "From(Marvin, Earth) & Human(Marvin)", "From(Marvin, Mars) & -Extraterrestrial(Marvin)", "From(Marvin, Earth) & -Human(Marvin)", "From(Marvin, Earth) & Human(Marvin)", "From(Marvin, Mars) & -Extraterrestrial(Marvin)", "From(Marvin, Earth) & -Human(Marvin)", "From(Marvin, Earth) & -Extraterrestrial(Marvin)", "From(Marvin, Mars) & Human(Marvin)", "From(Marvin, Earth) & -Human(Marvin)", "From(Marvin, Earth) & -Extraterrestrial(Marvin)", "From(Marvin, Mars) & Human(Marvin)", "From(Marvin, Earth) & Human(Marvin)", "From(Marvin, Mars) & Human(Marvin)", "From(Marvin, Earth) & Human(Marvin)", "From(Marvin, Mars) & -Extraterrestrial(Marvin)", "From(Marvin, Earth) & -Human(Marvin)", "From(Marvin, Earth) & Human(Marvin)", "From(Marvin, Mars) & -Extraterrestrial(Marvin)", "From(Marvin, Earth) & Human(Marvin)", "From(Marvin, Mars) & Human(Marvin)", "From(Marvin, Earth) & Alien(Marvin)", "From(Marvin, Mars) & Human(Marvin)", "From(Marvin, Earth) & Human(Marvin)", "From(Marvin, Mars) & -Extraterrestrial(Marvin)", "From(Marvin, Earth) & Human(Marvin)", "From(Marvin, Mars) & -Extraterrestrial(Marvin)", "From(Marvin, Earth) & Human(Marvin)", "From(Marvin, Mars) & Human(Marvin)", "From(Marvin, Earth) & -Extraterrestrial(Marvin)", "From(Marvin, Mars) & Human(Marvin)", "From(Marvin, Earth) & Human(Marvin)", "From(Marvin, Mars) & -Extraterrestrial(Marvin)", "From(Marvin, Earth) & -Human(Marvin)", "From(Marvin, Earth) & Human(Marvin)", "From(Marvin, Mars) & -Extraterrestrial(Marvin)", "From(Marvin, Earth) & Human(Marvin)", "From(Marvin, Mars) & Human(Marvin)", "From(Marvin, Earth) & Human(Marvin)", "From(Marvin, Mars) & -Extraterrestrial(Marvin)", "From(Marvin, Earth) & Human(Marvin)", "From(Marvin, Mars) & Human(Marvin)", "From(Marvin, Earth) & Human(Marvin)", "From(Marvin, Mars) & Human(Marvin)", "From(Marvin, Earth) & Human(Marvin)", "From(Marvin, Mars) & -Extraterrestrial(Marvin)", "From(Marvin, Earth) & Human(Marvin)", "From(Marvin, Mars) & Human(Marvin)", "From(Marvin, Earth) & Human(Marvin)", "From(Marvin, Mars) & Human(Marvin)", "From(Marvin, Earth) & Human(Marvin)", "From(Marvin, Mars) & Human(Marvin)", "From(Marvin, Earth) & Human(Marvin)", "From(Marvin, Mars) & -Extraterrestrial(Marvin)", "From(Marvin, Earth) & Human(Marvin)", "From(Marvin, Mars) & Human(Marvin)", "From(Marvin, Earth) & Human(Marvin)", "From(Marvin, Mars) & Human(Marvin)", "From(Marvin, Earth) & Human(Marvin)", "From(Marvin, Mars) & Human(Marvin)", "From(Marvin, Earth) & Human(Marvin)", "From(Marvin, Mars) & Human(Marvin)", "From(Marvin, Earth) & Human(Marvin)", "From(Marvin, Mars) & Human(Marvin)", "From(Marvin, Earth) & Human(Marvin)", "From(Marvin, Mars) & Human(Marvin)", "From(Marvin, Earth) & Human(Marvin)", "From(Marvin, Mars) & Human(Marvin)", "From(Marvin, Earth) & Human(Marvin)", "From(Marvin, Mars) & Human(Marvin)", "From(Marvin, Earth) & Human(Marvin)", "From(Marvin, Mars) & Human(Marvin)", "From(Marvin, Earth) & Human(Marvin)", "From(Marvin, Mars) & Human(Marvin)", "From(Marvin, Earth) & Human(Marvin)", "From(Marvin, Mars) & Human(Marvin)", "From(Marvin, Earth) & Human(Marvin)", "From(Marvin, Mars) & Human(Marvin)", "From(Marvin, Earth) & Human(Marvin)", "From(Marvin, Mars) & Human(Marvin)", "From(Marvin, Earth) & Human(Marvin)", "From(Marvin, Mars) & Human(Marvin)", "From(Marvin, Earth) & Human(Marvin)", "From(Marvin, Mars) & Human(Marvin)", "From(Marvin, Earth) & Human(Marvin)", "From(Marvin, Mars) & Human(Marvin)", "From(Marvin, Earth) & Human(Marvin)", "From(Marvin, Mars) & Human(Marvin)", "From(Marvin, Earth) & Human(Marvin)", "From(Marvin, Mars) & Human(Marvin)", "From(Marvin, Earth) & Human(Marvin)", "From(Marvin, Mars) & Human(Marvin)", "From(Marvin, Earth) & Human(Marvin)", "From(Marvin, Mars) & Human(Marvin)", "From(Marvin, Earth) & Human(Marvin)", "From(Marvin, Mars) & Human(Marvin)", "From(Marvin, Earth) & Human(Marvin)", "From(Marvin, Mars) & Human(Marvin)", "From(Marvin, Earth) & Human(Marvin)", "From(Marvin, Mars) & Human(Marvin)", "From(Marvin, Earth) & Human(Marvin)", "From(Marvin, Mars) & Human(Marvin)", "From(Marvin, Earth) & Human(Marvin)", "From(Marvin, Mars) & Human(Marvin)", "From(Marvin, Earth) & Human(Marvin)", "From(Marvin, Mars) & Human(Marvin)", "From(Marvin, Earth) & Human(Marvin)", "From(Marvin, Mars) & Human(Marvin)", "From(Marvin, Earth) & Human(Marvin)", "From(Marvin, Mars) & Human(Marvin)", "From(Marvin, Earth) & Human(Marvin)", "From(Marvin, Mars) & Human(Marvin)", "From(Marvin, Earth) & Human(Marvin)", "From(Marvin, Mars) & Human(Marvin)", "From(Marvin, Earth) & Human(Marvin)", "From(Marvin, Mars) & Human(Marvin)", "From(Marvin, Earth) & Human(Marvin)", "From(Marvin, Mars) & Human(Marvin)", "From(Marvin, Earth) & Human(Marvin)", "From(Marvin, Mars) & Human(Marvin)", "From(Marvin, Earth) & Human(Marvin)", "From(Marvin, Mars) & Human(Marvin)", "From(Marvin, Earth) & Human(Marvin)", "From(Marvin, Mars) & Human(Marvin)", "From(Marvin, Earth) & Human(Marvin)", "From(Marvin, Mars) & Human(Marvin)", "From(Marvin, Earth) & Human(Marvin)", "From(Marvin, Mars) & Human(Marvin)", "From(Marvin, Earth) & Human(Marvin)", "From(Marvin, Mars) & Human(Marvin)", "From(Marvin, Earth) & Human(Marvin)", "From(Marvin, Mars) & Human(Marvin)", "From(Marvin, Earth) & Human(Marvin)", "From(Marvin, Mars) & Human(Marvin)", "From(Marvin, Earth) & Human(Marvin)", "From(Marvin, Mars) & Human(Marvin)", "From(Marvin, Earth) & Human(Marvin)", "From(Marvin, Mars) & Human(Marvin)", "From(Marvin, Earth) & Human(Marvin)", "From(Marvin, Mars) & Human(Marvin)", "From(Marvin, Earth) & Human(Marvin)", "From(Marvin, Mars) & Human(Marvin)", "From(Marvin, Earth) & Human(Marvin)", "From(Marvin, Mars) & Human(Marvin)", "From(Marvin, Earth) & Human(Marvin)", "From(Marvin, Mars) & Human(Marvin)", "From(Marvin, Earth) & Human(Marvin)", "From(Marvin, Mars) & Human(Marvin)", "From(Marvin, Earth) & Human(Marvin)", "From(Marvin, Mars) & Human(Marvin)", "From(Marvin, Earth) & Human(Marvin)", "From(Marvin, Mars) & Human(Marvin)", "From(Marvin, Earth) & Human(Marvin)", "From(Marvin, Mars) & Human(Marvin)", "From(Marvin, Earth) & Human(Marvin)", "From(Marvin, Mars) & Human(Marvin)", "From(Marvin, Earth) & Human(Marvin)", "From(Marvin, Mars) & Human(Marvin)", "From(Marvin, Earth) & Human(Marvin)", "From(Marvin, Mars) & Human(Marvin)", "From(Marvin, Earth) & Human(Marvin)", "From(Marvin, Mars) & Human(Marvin)", "From(Marvin, Earth) & Human(Marvin)", "From(Marvin, Mars) & Human(Marvin)", "From(Marvin, Earth) & Human(Marvin)", "From(Marvin, Mars) & Human(Marvin)", "From(Marvin, Earth) & Human(Marvin)", "From(Marvin, Mars) & Human(Marvin)", "From(Marvin, Earth) & Human(Marvin)", "From(Marvin, Mars) & Human(Marvin)", "From(Marvin, Earth) & Human(Marvin)", "From(Marvin, Mars) & Human(Marvin)", "From(Marvin, Earth) & Human(Marvin)", "From(Marvin, Mars) & Human(Marvin)", "From(Marvin, Earth) & Human(Marvin)", "From(Marvin, Mars) & Human(Marvin)", "From(Marvin, Earth) & Human(Marvin)", "From(Marvin, Mars) & Human(Marvin)", "From(Marvin, Earth) & Human(Marvin)", "From(Marvin, Mars) & Human(Marvin)", "From(Marvin, Earth) & Human(Marvin)", "From(Marvin, Mars) & Human(Marvin)", "From(Marvin, Earth) & Human(Marvin)", "From(Marvin, Mars) & Human(Marvin)", "From(Marvin, Earth) & Human(Marvin)", "From(Marvin, Mars) & Human(Marvin)", "From(Marvin, Earth) & Human(Marvin)", "From(Marvin, Mars) & Human(Marvin)", "From(Marvin, Earth) & Human(Marvin)", "From(Marvin, Mars) & Human(Marvin)"], "conclusion": "From(Marvin, Earth) & Human(Marvin)", "error_type": "<class 'nltk.inference.prover9.Prover9FatalException'>", "error_message": "(FATAL)\n%%ERROR: The following symbols are used with multiple arities: Human/0, Human/1, From/0, From/2.\n\n\nFatal error:  The following symbols are used with multiple arities: Human/0, Human/1, From/0, From/2", "stack_trace": "Traceback (most recent call last):\n  File \"/data/gpfs/projects/punim0478/bansaab/linc2/eval/tasks/owafoltask.py\", line 577, in _process_neurosymbolic\n    parsed = json.loads(gen)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/json/__init__.py\", line 346, in loads\n    return _default_decoder.decode(s)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/json/decoder.py\", line 337, in decode\n    obj, end = self.raw_decode(s, idx=_w(s, 0).end())\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/json/decoder.py\", line 355, in raw_decode\n    raise JSONDecodeError(\"Expecting value\", s, err.value) from None\njson.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"/data/gpfs/projects/punim0478/bansaab/linc2/eval/tasks/utils.py\", line 219, in evaluate\n    truth_value = prover.prove(c, p_list)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/inference/api.py\", line 37, in prove\n    return self._prove(goal, assumptions, verbose)[0]\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/inference/prover9.py\", line 327, in _prove\n    stdout, returncode = self._call_prover9(\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/inference/prover9.py\", line 370, in _call_prover9\n    raise Prover9FatalException(returncode, errormsg)\nnltk.inference.prover9.Prover9FatalException: (FATAL)\n%%ERROR: The following symbols are used with multiple arities: Human/0, Human/1, From/0, From/2.\n\n\nFatal error:  The following symbols are used with multiple arities: Human/0, Human/1, From/0, From/2\n"}
{"timestamp": "2025-09-16T18:37:10.275863", "premises": ["all x. (Alien(x) -> Extraterrestrial(x))", "all x. (From(x, Mars) -> Alien(x))", "all x. (Extraterrestrial(x) -> -Human(x))", "all x. (Human(x) -> From(x, Earth))", "all x. (From(x, Mars) -> -From(x, Earth))", "all x. (From(x, Earth) -> -From(x, Mars))", "all x. (From(x, Mars) -> -From(x, Earth))", "all x. (From(x, Earth) -> -From(x, Mars))", "all x. (From(x, Earth) -> Alien(x))", "all x. (From(x, Mars) -> Alien(x))", "all x. (From(x, Earth) -> -Extraterrestrial(x))", "all x. (From(x, Mars) -> -Extraterrestrial(x))", "all x. (From(x, Earth) -> -Extraterrestrial(x))", "all x. (From(x, Mars) -> -Extraterrestrial(x))", "all x. (From(x, Earth) -> Human(x))", "all x. (From(x, Mars) -> Human(x))", "all x. (Human(x) -> From(x, Earth))", "all x. (Extraterrestrial(x) -> From(x, Mars))", "all x. (From(x, Earth) -> -From(x, Mars))", "all x. (From(x, Mars) -> -From(x, Earth))", "all x. (From(x, Earth) -> -From(x, Mars))", "all x. (From(x, Mars) -> -From(x, Earth))", "all x. (From(x, Earth) -> -From(x, Mars))", "all x. (From(x, Mars) -> Alien(x))", "all x. (From(x, Earth) -> Alien(x))", "all x. (From(x, Mars) -> -Extraterrestrial(x))", "all x. (From(x, Earth) -> -Extraterrestrial(x))", "all x. (From(x, Mars) -> -Human(x))", "all x. (From(x, Earth) -> -Human(x))", "all x. (From(x, Mars) -> -Extraterrestrial(x))", "all x. (From(x, Earth) -> -Extraterrestrial(x))", "all x. (From(x, Earth) -> Alien(x))", "all x. (From(x, Mars) -> Alien(x))", "all x. (From(x, Earth) -> -From(x, Mars))", "all x. (From(x, Mars) -> -From(x, Earth))", "all x. (From(x, Earth) -> -From(x, Mars))", "all x. (From(x, Mars) -> -From(x, Earth))", "all x. (From(x, Earth) -> -From(x, Mars))", "all x. (From(x, Earth) -> Alien(x))", "all x. (From(x, Mars) -> Alien(x))", "all x. (From(x, Earth) -> -Extraterrestrial(x))", "all x. (From(x, Mars) -> -Extraterrestrial(x))", "all x. (From(x, Earth) -> -Extraterrestrial(x))", "all x. (From(x, Mars) -> -Extraterrestrial(x))", "all x. (From(x, Earth) -> Human(x))", "all x. (From(x, Mars) -> Human(x))", "all x. (From(x, Earth) -> From(x, Mars))", "all x. (From(x, Mars) -> From(x, Earth))", "all x. (From(x, Earth) -> From(x, Mars))", "all x. (From(x, Mars) -> From(x, Earth))", "all x. (From(x, Earth) -> -From(x, Mars))", "all x. (From(x, Mars) -> -From(x, Earth))", "all x. (From(x, Earth) -> -From(x, Mars))", "all x. (From(x, Mars) -> -From(x, Earth))", "all x. (From(x, Earth) -> -From(x, Mars))", "all x. (From(x, Mars) -> Alien(x))", "all x. (From(x, Earth) -> Alien(x))", "all x. (From(x, Mars) -> -Extraterrestrial(x))", "all x. (From(x, Earth) -> -Extraterrestrial(x))", "all x. (From(x, Mars) -> -Human(x))", "all x. (From(x, Earth) -> -Human(x))", "all x. (From(x, Mars) -> -Extraterrestrial(x))", "all x. (From(x, Earth) -> -Extraterrestrial(x))", "all x. (From(x, Earth) -> Alien(x))", "all x. (From(x, Mars) -> Alien(x))", "all x. (From(x, Earth) -> From(x, Mars))", "all x. (From(x, Mars) -> From(x, Earth))", "all x. (From(x, Earth) -> From(x, Mars))", "all x. (From(x, Mars) -> From(x, Earth))", "all x. (From(x, Earth) -> -From(x, Mars))", "all x. (From(x, Mars) -> -From(x, Earth))", "all x. (From(x, Earth) -> -From(x, Mars))", "all x. (From(x, Mars) -> -From(x, Earth))", "all x. (From(x, Earth) -> Alien(x))", "all x. (From(x, Mars) -> Alien(x))", "all x. (From(x, Earth) -> -Extraterrestrial(x))", "all x. (From(x, Mars) -> -Extraterrestrial(x))", "all x. (From(x, Earth) -> -Extraterrestrial(x))", "all x. (From(x, Mars) -> -Extraterrestrial(x))", "all x. (From(x, Earth) -> Human(x))", "all x. (From(x, Mars) -> Human(x))", "all x. (From(x, Earth) -> From(x, Mars))", "all x. (From(x, Mars) -> From(x, Earth))", "all x. (From(x, Earth) -> From(x, Mars))", "all x. (From(x, Mars) -> From(x, Earth))", "all x. (From(x, Earth) -> -From(x, Mars))", "all x. (From(x, Mars) -> -From(x, Earth))", "all x. (From(x, Earth) -> -From(x, Mars))", "all x. (From(x, Mars) -> -From(x, Earth))", "all x. (From(x, Earth) -> -From(x, Mars))", "all x. (From(x, Mars) -> Alien(x))", "all x. (From(x, Earth) -> Alien(x))", "all x. (From(x, Mars) -> -Extraterrestrial(x))", "all x. (From(x, Earth) -> -Extraterrestrial(x))", "all x. (From(x, Mars) -> -Human(x))", "all x. (From(x, Earth) -> -Human(x))", "all x. (From(x, Mars) -> -Extraterrestrial(x))", "all x. (From(x, Earth) -> -Extraterrestrial(x))", "all x. (From(x, Earth) -> Alien(x))", "all x. (From(x, Mars) -> Alien(x))", "all x. (From(x, Earth) -> From(x, Mars))", "all x. (From(x, Mars) -> From(x, Earth))", "all x. (From(x, Earth) -> From(x, Mars))", "all x. (From(x, Mars) -> From(x, Earth))", "all x. (From(x, Earth) -> -From(x, Mars))", "all x. (From(x, Mars) -> -From(x, Earth))", "all x. (From(x, Earth) -> -From(x, Mars))", "all x. (From(x, Mars) -> -From(x, Earth))", "all x. (From(x, Earth) -> -From(x, Mars))", "all x. (From(x, Mars) -> Alien(x))", "all x. (From(x, Earth) -> Alien(x))", "all x. (From(x, Mars) -> -Extraterrestrial(x))", "all x. (From(x, Earth) -> -Extraterrestrial(x))", "all x. (From(x, Mars) -> -Human(x))", "all x. (From(x, Earth) -> -Human(x))", "all x. (From(x, Mars) -> -Extraterrestrial(x))", "all x. (From(x, Earth) -> -Extraterrestrial(x))", "all x. (From(x, Earth) -> Alien(x))", "all x. (From(x, Mars) -> Alien(x))", "all x. (From(x, Earth) -> From(x, Mars))", "all x. (From(x, Mars) -> From(x, Earth))", "all x. (From(x, Earth) -> From(x, Mars))", "all x. (From(x, Mars) -> From(x, Earth))", "all x. (From(x, Earth) -> -From(x, Mars))", "all x. (From(x, Mars) -> -From(x, Earth))", "all x. (From(x, Earth) -> -From(x, Mars))", "all x. (From(x, Mars) -> -From(x, Earth))", "all x. (From(x, Earth) -> -From(x, Mars))", "all x. (From(x, Mars) -> Alien(x))", "all x. (From(x, Earth) -> Alien(x))", "all x. (From(x, Mars) -> -Extraterrestrial(x))", "all x. (From(x, Earth) -> -Extraterrestrial(x))", "all x. (From(x, Mars) -> -Human(x))", "all x. (From(x, Earth) -> -Human(x))", "all x. (From(x, Mars) -> -Extraterrestrial(x))", "all x. (From(x, Earth) -> -Extraterrestrial(x))", "all x. (From(x, Earth) -> Alien(x))", "all x. (From(x, Mars) -> Alien(x))", "all x. (From(x, Earth) -> From(x, Mars))", "all x. (From(x, Mars) -> From(x, Earth))", "all x. (From(x, Earth) -> From(x, Mars))", "all x. (From(x, Mars) -> From(x, Earth))", "all x. (From(x, Earth) -> -From(x, Mars))", "all x. (From(x, Mars) -> -From(x, Earth))", "all x. (From(x, Earth) -> -From(x, Mars))", "all x. (From(x, Mars) -> -From(x, Earth))", "all x. (From(x, Earth) -> -From(x, Mars))", "all x. (From(x, Mars) -> Alien(x))", "all x. (From(x, Earth) -> Alien(x))", "all x. (From(x, Mars) -> -Extraterrestrial(x))", "all x. (From(x, Earth) -> -Extraterrestrial(x))", "all x. (From(x, Mars) -> -Human(x))", "all x. (From(x, Earth) -> -Human(x))", "all x. (From(x, Mars) -> -Extraterrestrial(x))", "all x. (From(x, Earth) -> -Extraterrestrial(x))", "all x. (From(x, Earth) -> Alien(x))", "all x. (From(x, Mars) -> Alien(x))", "all x. (From(x, Earth) -> From(x, Mars))", "all x. (From(x, Mars) -> From(x, Earth))", "all x. (From(x, Earth) -> From(x, Mars))", "all x. (From(x, Mars) -> From(x, Earth))", "all x. (From(x, Earth) -> -From(x, Mars))", "all x. (From(x, Mars) -> -From(x, Earth))", "all x. (From(x, Earth) -> -From(x, Mars))", "all x. (From(x, Mars) -> -From(x, Earth))", "all x. (From(x, Earth) -> -From(x, Mars))", "all x. (From(x, Mars) -> Alien(x))", "all x. (From(x, Earth) -> Alien(x))", "all x. (From(x, Mars) -> -Extraterrestrial(x))", "all x. (From(x, Earth) -> -Extraterrestrial(x))", "all x. (From(x, Mars) -> -Human(x))", "all x. (From(x, Earth) -> -Human(x))", "all x. (From(x, Mars) -> -Extraterrestrial(x))", "all x. (From(x, Earth) -> -Extraterrestrial(x))", "all x. (From(x, Earth) -> Alien(x))", "all x. (From(x, Mars) -> Alien(x))", "all x. (From(x, Earth) -> From(x, Mars))", "all x. (From(x, Mars) -> From(x, Earth))", "all x. (From(x, Earth) -> From(x, Mars))", "all x. (From(x, Mars) -> From(x, Earth))", "all x. (From(x, Earth) -> -From(x, Mars))", "all x. (From(x, Mars) -> -From(x, Earth))", "all x. (From(x, Earth) -> -From(x, Mars))", "all x. (From(x, Mars) -> -From(x, Earth))", "all x. (From(x, Earth) -> -From(x, Mars))", "all x. (From(x, Mars) -> Alien(x))", "all x. (From(x, Earth) -> Alien(x))", "all x. (From(x, Mars) -> -Extraterrestrial(x))", "all x. (From(x, Earth) -> -Extraterrestrial(x))", "all x. (From(x, Mars) -> -Human(x))", "all x. (From(x, Earth) -> -Human(x))", "all x. (From(x, Mars) -> -Extraterrestrial(x))", "all x. (From(x, Earth) -> -Extraterrestrial(x))", "all x. (From(x, Earth) -> Alien(x))", "all x. (From(x, Mars) -> Alien(x))", "all x. (From(x, Earth) -> From(x, Mars))", "all x. (From(x, Mars) -> From(x, Earth))", "all x. (From(x, Earth) -> From(x, Mars))", "all x. (From(x, Mars) -> From(x, Earth))", "all x. (From(x, Earth) -> -From(x, Mars))", "all x. (From(x, Mars) -> -From(x, Earth))", "all x. (From(x, Earth) -> -From(x, Mars))", "all x. (From(x, Mars) -> -From(x, Earth))", "all x. (From(x, Earth) -> -From(x, Mars))", "all x. (From(x, Mars) -> Alien(x))", "all x. (From(x, Earth) -> Alien(x))", "all x. (From(x, Mars) -> -Extraterrestrial(x))", "all x. (From(x, Earth) -> -Extraterrestrial(x))", "all x. (From(x, Mars) -> -Human(x))", "all x. (From(x, Earth) -> -Human(x))", "all x. (From(x, Mars) -> -Extraterrestrial(x))", "all x. (From(x, Earth) -> -Extraterrestrial(x))", "all x. (From(x, Earth) -> Alien(x))", "all x. (From(x, Mars) -> Alien(x))", "all x. (From(x, Earth) -> From(x, Mars))", "all x. (From(x, Mars) -> From(x, Earth))", "all x. (From(x, Earth) -> From(x, Mars))", "all x. (From(x, Mars) -> From(x, Earth))", "all x. (From(x, Earth) -> -From(x, Mars))", "all x. (From(x, Mars) -> -From(x, Earth))", "all x. (From(x, Earth) -> -From(x, Mars))", "all x. (From(x, Mars) -> -From(x, Earth))", "all x. (From(x, Earth) -> -From(x, Mars))", "all x. (From(x, Mars) -> Alien(x))", "all x. (From(x, Earth) -> Alien(x))", "all x. (From(x, Mars) -> -Extraterrestrial(x))", "all x. (From(x, Earth) -> -Extraterrestrial(x))", "all x. (From(x, Mars) -> -Human(x))", "all x. (From(x, Earth) -> -Human(x))", "all x. (From(x, Mars) -> -Extraterrestrial(x))", "all x. (From(x, Earth) -> -Extraterrestrial(x))", "all x. (From(x, Earth) -> Alien(x))", "all x. (From(x, Mars) -> Alien(x))", "all x. (From(x, Earth) -> From(x, Mars))", "all x. (From(x, Mars) -> From(x, Earth))", "all x. (From(x, Earth) -> From(x, Mars))", "all x. (From(x, Mars) -> From(x, Earth))", "all x. (From(x, Earth) -> -From(x, Mars))", "all x. (From(x, Mars) -> -From(x, Earth))", "all x. (From(x, Earth) -> -From(x, Mars))", "all x. (From(x, Mars) -> -From(x, Earth))", "all x. (From(x, Earth) -> -From(x, Mars))", "all x. (From(x, Mars) -> Alien(x))", "all x. (From(x, Earth) -> Alien(x))", "all x. (From(x, Mars) -> -Extraterrestrial(x))", "all x. (From(x, Earth) -> -Extraterrestrial(x))", "all x. (From(x, Mars) -> -Human(x))", "all x. (From(x, Earth) -> -Human(x))", "all x. (From(x, Mars) -> -Extraterrestrial(x))", "all x. (From(x, Earth) -> -Extraterrestrial(x))", "all x. (From(x, Earth) -> Alien(x))", "all x. (From(x, Mars) -> Alien(x))", "all x. (From(x, Earth) -> From(x, Mars))", "all x. (From(x, Mars) -> From(x, Earth))", "all x. (From(x, Earth) -> From(x, Mars))", "all x. (From(x, Mars) -> From(x, Earth))", "all x. (From(x, Earth) -> -From(x, Mars))", "all x. (From(x, Mars) -> -From(x, Earth))", "all x. (From(x, Earth) -> -From(x, Mars))", "all x. (From(x, Mars) -> -From(x, Earth))", "all x. (From(x, Earth) -> -From(x, Mars))", "all x. (From(x, Mars) -> Alien(x))", "all x. (From(x, Earth) -> Alien(x))", "all x. (From(x, Mars) -> -Extraterrestrial(x))", "all x. (From(x, Earth) -> -Extraterrestrial(x))", "all x. (From(x, Mars) -> -Human(x))", "all x. (From(x, Earth) -> -Human(x))", "all x. (From(x, Mars) -> -Extraterrestrial(x))", "all x. (From(x, Earth) -> -Extraterrestrial(x))", "all x. (From(x, Earth) -> Alien(x))", "all x. (From(x, Mars) -> Alien(x))", "all x. (From(x, Earth) -> From(x, Mars))", "all x. (From(x, Mars) -> From(x, Earth))", "all x. (From(x, Earth) -> From(x, Mars))", "all x. (From(x, Mars) -> From(x, Earth))", "all x. (From(x, Earth) -> -From(x, Mars))", "all x. (From(x, Mars) -> -From(x, Earth))", "all x. (From(x, Earth) -> -From(x, Mars))", "all x. (From(x, Mars) -> -From(x, Earth))", "all x. (From(x, Earth) -> -From(x, Mars))", "all x. (From(x, Mars) -> Alien(x))", "all x. (From(x, Earth) -> Alien(x))", "all x. (From(x, Mars) -> -Extraterrestrial(x))", "all x. (From(x, Earth) -> -Extraterrestrial(x))", "all x. (From(x, Mars) -> -Human(x))", "all x. (From(x, Earth) -> -Human(x))", "all x. (From(x, Mars) -> -Extraterrestrial(x))", "all x. (From(x, Earth) -> -Extraterrestrial(x))", "all x. (From(x, Earth) -> Alien(x))", "all x. (From(x, Mars) -> Alien(x))", "all x. (From(x, Earth) -> From(x, Mars))", "all x. (From(x, Mars) -> From(x, Earth))", "all x. (From(x, Earth) -> From(x, Mars))", "all x. (From(x, Mars) -> From(x, Earth))", "all x. (From(x, Earth) -> -From(x, Mars))", "all x. (From(x, Mars) -> -From(x, Earth))", "all x. (From(x, Earth) -> -From(x, Mars))", "all x. (From(x, Mars) -> -From(x, Earth))", "all x. (From(x, Earth) -> -From(x, Mars))", "all x. (From(x, Mars) -> Alien(x))", "all x. (From(x, Earth) -> Alien(x))", "all x. (From(x, Mars) -> -Extraterrestrial(x))", "all x. (From(x, Earth) -> -Extraterrestrial(x))", "all x. (From(x, Mars) -> -Human(x))", "all x. (From(x, Earth) -> -Human(x))", "all x. (From(x, Mars) -> -Extraterrestrial(x))", "all x. (From(x, Earth) -> -Extraterrestrial(x))", "all x. (From(x, Earth) -> Alien(x))", "all x. (From(x, Mars) -> Alien(x))", "all x. (From(x, Earth) -> From(x, Mars))", "all x. (From(x, Mars) -> From(x, Earth))", "all x. (From(x, Earth) -> From(x, Mars))", "all x. (From(x, Mars) -> From(x, Earth))", "all x. (From(x, Earth) -> -From(x, Mars))", "all x. (From(x, Mars) -> -From(x, Earth))", "all x. (From(x, Earth) -> -From(x, Mars))", "all x. (From(x, Mars) -> -From(x, Earth))", "all x. (From(x, Earth) -> -From(x, Mars))", "all x. (From(x, Mars) -> Alien(x))", "all x. (From(x, Earth) -> Alien(x))", "all x. (From(x, Mars) -> -Extraterrestrial(x))", "all x. (From(x, Earth) -> -Extraterrestrial(x))", "all x. (From(x, Mars) -> -Human(x))", "all x. (From(x, Earth) -> -Human(x))", "all x. (From(x, Mars) -> -Extraterrestrial(x))", "all x. (From(x, Earth) -> -Extraterrestrial(x))", "all x. (From(x, Earth) -> Alien(x))", "all x. (From(x, Mars) -> Alien(x))", "all x. (From(x, Earth) -> From(x, Mars))", "all x. (From(x, Mars) -> From(x, Earth))", "all x. (From(x, Earth) -> From(x, Mars))", "all x. (From(x, Mars) -> From(x, Earth))", "all x. (From(x, Earth) -> -From(x, Mars))", "all x. (From(x, Mars) -> -From(x, Earth))", "all x. (From(x, Earth) -> -From(x, Mars))", "all x. (From(x, Mars) -> -From(x, Earth))", "all x. (From(x, Earth) -> -From(x, Mars))", "all x. (From(x, Mars) -> Alien(x))", "all x. (From(x, Earth) -> Alien(x))", "all x. (From(x, Mars) -> -Extraterrestrial(x))", "all x. (From(x, Earth) -> -Extraterrestrial(x))", "all x. (From(x, Mars) -> -Human(x))", "all x. (From(x, Earth) -> -Human(x))", "all x. (From(x, Mars) -> -Extraterrestrial(x))", "all x. (From(x, Earth) -> -Extraterrestrial(x))", "all x. (From(x, Earth) -> Alien(x))", "all x. (From(x, Mars) -> Alien(x))", "all x. (From(x, Earth) -> From(x, Mars))", "all x. (From(x, Mars) -> From(x, Earth))", "all x. (From(x, Earth) -> From(x, Mars))", "all x. (From(x, Mars) -> From(x, Earth))", "all x. (From(x, Earth) -> -From(x, Mars))", "all x. (From(x, Mars) -> -From(x, Earth))", "all x. (From(x, Earth) -> -From(x, Mars))", "all x. (From(x, Mars) -> -From(x, Earth))", "all x. (From(x, Earth) -> -From(x, Mars))", "all x. (From(x, Mars) -> Alien(x))", "all x. (From(x, Earth) -> Alien(x))", "all x. (From(x, Mars) -> -Extraterrestrial(x))", "all x. (From(x, Earth) -> -Extraterrestrial(x))", "all x. (From(x, Mars) -> -Human(x))", "all x. (From(x, Earth) -> -Human(x))", "all x. (From(x, Mars) -> -Extraterrestrial(x))", "all x. (From(x, Earth) -> -Extraterrestrial(x))", "all x. (From(x, Earth) -> Alien(x))", "all x. (From(x, Mars) -> Alien(x))", "all x. (From(x, Earth) -> From(x, Mars))", "all x. (From(x, Mars) -> From(x, Earth))", "all x. (From(x, Earth) -> From(x, Mars))", "all x. (From(x, Mars) -> From(x, Earth))", "all x. (From(x, Earth) -> -From(x, Mars))", "all x. (From(x, Mars) -> -From(x, Earth))", "all x. (From(x, Earth) -> -From(x, Mars))", "all x. (From(x, Mars) -> -From(x, Earth))", "all x. (From(x, Earth) -> -From(x, Mars))", "all x. (From(x, Mars) -> Alien(x))", "all x. (From(x, Earth) -> Alien(x))"], "conclusion": "all x. (From(x, Mars) -> -Extrater", "error_type": "<class 'nltk.sem.logic.LogicalExpressionException'>", "error_message": "End of input found.  Expected token ')'.\nall x. (From(x, Mars) -> -Extrater\n                                  ^", "stack_trace": "Traceback (most recent call last):\n  File \"/data/gpfs/projects/punim0478/bansaab/linc2/eval/tasks/owafoltask.py\", line 577, in _process_neurosymbolic\n    parsed = json.loads(gen)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/json/__init__.py\", line 346, in loads\n    return _default_decoder.decode(s)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/json/decoder.py\", line 337, in decode\n    obj, end = self.raw_decode(s, idx=_w(s, 0).end())\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/json/decoder.py\", line 355, in raw_decode\n    raise JSONDecodeError(\"Expecting value\", s, err.value) from None\njson.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/sem/logic.py\", line 270, in token\n    tok = self._buffer[self._currentIndex]\nIndexError: list index out of range\n\nThe above exception was the direct cause of the following exception:\n\nTraceback (most recent call last):\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/sem/logic.py\", line 562, in assertNextToken\n    tok = self.token()\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/sem/logic.py\", line 276, in token\n    raise ExpectedMoreTokensException(self._currentIndex + 1) from e\nnltk.sem.logic.ExpectedMoreTokensException: End of input found.  More tokens expected.\n\nThe above exception was the direct cause of the following exception:\n\nTraceback (most recent call last):\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/sem/logic.py\", line 154, in parse\n    result = self.process_next_expression(None)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/sem/logic.py\", line 290, in process_next_expression\n    accum = self.handle(tok, context)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/sem/logic.py\", line 312, in handle\n    return self.handle_quant(tok, context)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/sem/logic.py\", line 427, in handle_quant\n    accum = self.process_next_expression(tok)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/sem/logic.py\", line 290, in process_next_expression\n    accum = self.handle(tok, context)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/sem/logic.py\", line 315, in handle\n    return self.handle_open(tok, context)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/sem/logic.py\", line 450, in handle_open\n    self.assertNextToken(Tokens.CLOSE)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/sem/logic.py\", line 564, in assertNextToken\n    raise ExpectedMoreTokensException(\nnltk.sem.logic.ExpectedMoreTokensException: End of input found.  Expected token ')'.\n\nThe above exception was the direct cause of the following exception:\n\nTraceback (most recent call last):\n  File \"/data/gpfs/projects/punim0478/bansaab/linc2/eval/tasks/utils.py\", line 215, in evaluate\n    c = read_expr(conclusion)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/sem/logic.py\", line 957, in fromstring\n    return cls._logic_parser.parse(s, signature)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/sem/logic.py\", line 159, in parse\n    raise LogicalExpressionException(None, msg) from e\nnltk.sem.logic.LogicalExpressionException: End of input found.  Expected token ')'.\nall x. (From(x, Mars) -> -Extrater\n                                  ^\n"}
{"timestamp": "2025-09-16T18:37:10.301561", "premises": ["all x. (Alien(x) -> Extraterrestrial(x))", "all x. (From(x, Mars) -> Alien(x))", "all x. (Human(x) -> -Extraterrestrial(x))", "all x. (Extraterrestrial(x) -> -Human(x))", "(Marvin, -From(Marvin, Earth)) & (Marvin, -From(Marvin, Mars))"], "conclusion": "(Marvin, Extraterrestrial(Marvin))", "error_type": "<class 'nltk.sem.logic.LogicalExpressionException'>", "error_message": "Unexpected token: ','.  Expected token ')'.\n(Marvin, Extraterrestrial(Marvin))\n       ^", "stack_trace": "Traceback (most recent call last):\n  File \"/data/gpfs/projects/punim0478/bansaab/linc2/eval/tasks/owafoltask.py\", line 577, in _process_neurosymbolic\n    parsed = json.loads(gen)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/json/__init__.py\", line 346, in loads\n    return _default_decoder.decode(s)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/json/decoder.py\", line 337, in decode\n    obj, end = self.raw_decode(s, idx=_w(s, 0).end())\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/json/decoder.py\", line 355, in raw_decode\n    raise JSONDecodeError(\"Expecting value\", s, err.value) from None\njson.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/sem/logic.py\", line 154, in parse\n    result = self.process_next_expression(None)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/sem/logic.py\", line 290, in process_next_expression\n    accum = self.handle(tok, context)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/sem/logic.py\", line 315, in handle\n    return self.handle_open(tok, context)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/sem/logic.py\", line 450, in handle_open\n    self.assertNextToken(Tokens.CLOSE)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/sem/logic.py\", line 573, in assertNextToken\n    raise UnexpectedTokenException(self._currentIndex, tok, expected)\nnltk.sem.logic.UnexpectedTokenException: Unexpected token: ','.  Expected token ')'.\n\nThe above exception was the direct cause of the following exception:\n\nTraceback (most recent call last):\n  File \"/data/gpfs/projects/punim0478/bansaab/linc2/eval/tasks/utils.py\", line 215, in evaluate\n    c = read_expr(conclusion)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/sem/logic.py\", line 957, in fromstring\n    return cls._logic_parser.parse(s, signature)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/sem/logic.py\", line 159, in parse\n    raise LogicalExpressionException(None, msg) from e\nnltk.sem.logic.LogicalExpressionException: Unexpected token: ','.  Expected token ')'.\n(Marvin, Extraterrestrial(Marvin))\n       ^\n"}
{"timestamp": "2025-09-16T18:40:44.436523", "premises": ["all x. (Alien(x) -> Extraterrestrial(x))", "all x. (From(x, Mars) -> Alien(x))", "all x. (Human(x) -> NotExtraterrestrial(x))", "all x. (Extraterrestrial(x) -> NotHuman(x))", "all x. (From(x, Earth) -> Human(x))", "all x. (From(x, Mars) -> Alien(x))", "all x. (Extraterrestrial(x) -> Alien(x))", "all x. (Human(x) -> Human(x))", "all x. (From(x, Earth) -> Human(x))", "all x. (From(x, Mars) -> Alien(x))", "all x. (Extraterrestrial(x) -> Alien(x))", "all x. (Human(x) -> Human(x))", "all x. (From(x, Earth) -> Human(x))", "all x. (From(x, Mars) -> Alien(x))", "all x. (Extraterrestrial(x) -> Alien(x))", "all x. (Human(x) -> Human(x))", "all x. (From(x, Earth) -> Human(x))", "all x. (From(x, Mars) -> Alien(x))", "all x. (Extraterrestrial(x) -> Alien(x))", "all x. (Human(x) -> Human(x))", "all x. (From(x, Earth) -> Human(x))", "all x. (From(x, Mars) -> Alien(x))", "all x. (Extraterrestrial(x) -> Alien(x))", "all x. (Human(x) -> Human(x))", "all x. (From(x, Earth) -> Human(x))", "all x. (From(x, Mars) -> Alien(x))", "all x. (Extraterrestrial(x) -> Alien(x))", "all x. (Human(x) -> Human(x))", "all x. (From(x, Earth) -> Human(x))", "all x. (From(x, Mars) -> Alien(x))", "all x. (Extraterrestrial(x) -> Alien(x))", "all x. (Human(x) -> Human(x))", "all x. (From(x, Earth) -> Human(x))", "all x. (From(x, Mars) -> Alien(x))", "all x. (Extraterrestrial(x) -> Alien(x))", "all x. (Human(x) -> Human(x))", "all x. (From(x, Earth) -> Human(x))", "all x. (From(x, Mars) -> Alien(x))", "all x. (Extraterrestrial(x) -> Alien(x))", "all x. (Human(x) -> Human(x))", "all x. (From(x, Earth) -> Human(x))", "all x. (From(x, Mars) -> Alien(x))", "all x. (Extraterrestrial(x) -> Alien(x))", "all x. (Human(x) -> Human(x))", "all x. (From(x, Earth) -> Human(x))", "all x. (From(x, Mars) -> Alien(x))", "all x. (Extraterrestrial(x) -> Alien(x))", "all x. (Human(x) -> Human(x))", "all x. (From(x, Earth) -> Human(x))", "all x. (From(x, Mars) -> Alien(x))", "all x. (Extraterrestrial(x) -> Alien(x))", "all x. (Human(x) -> Human(x))", "all x. (From(x, Earth) -> Human(x))", "all x. (From(x, Mars) -> Alien(x))", "all x. (Extraterrestrial(x) -> Alien(x))", "all x. (Human(x) -> Human(x))", "all x. (From(x, Earth) -> Human(x))", "all x. (From(x, Mars) -> Alien(x))", "all x. (Extraterrestrial(x) -> Alien(x))", "all x. (Human(x) -> Human(x))", "all x. (From(x, Earth) -> Human(x))", "all x. (From(x, Mars) -> Alien(x))", "all x. (Extraterrestrial(x) -> Alien(x))", "all x. (Human(x) -> Human(x))", "all x. (From(x, Earth) -> Human(x))", "all x. (From(x, Mars) -> Alien(x))", "all x. (Extraterrestrial(x) -> Alien(x))", "all x. (Human(x) -> Human(x))", "all x. (From(x, Earth) -> Human(x))", "all x. (From(x, Mars) -> Alien(x))", "all x. (Extraterrestrial(x) -> Alien(x))", "all x. (Human(x) -> Human(x))", "all x. (From(x, Earth) -> Human(x))", "all x. (From(x, Mars) -> Alien(x))", "all x. (Extraterrestrial(x) -> Alien(x))", "all x. (Human(x) -> Human(x))", "all x. (From(x, Earth) -> Human(x))", "all x. (From(x, Mars) -> Alien(x))", "all x. (Extraterrestrial(x) -> Alien(x))", "all x. (Human(x) -> Human(x))", "all x. (From(x, Earth) -> Human(x))", "all x. (From(x, Mars) -> Alien(x))", "all x. (Extraterrestrial(x) -> Alien(x))", "all x. (Human(x) -> Human(x))", "all x. (From(x, Earth) -> Human(x))", "all x. (From(x, Mars) -> Alien(x))", "all x. (Extraterrestrial(x) -> Alien(x))", "all x. (Human(x) -> Human(x))", "all x. (From(x, Earth) -> Human(x))", "all x. (From(x, Mars) -> Alien(x))", "all x. (Extraterrestrial(x) -> Alien(x))", "all x. (Human(x) -> Human(x))", "all x. (From(x, Earth) -> Human(x))", "all x. (From(x, Mars) -> Alien(x))", "all x. (Extraterrestrial(x) -> Alien(x))", "all x. (Human(x) -> Human(x))", "all x. (From(x, Earth) -> Human(x))", "all x. (From(x, Mars) -> Alien(x))", "all x. (Extraterrestrial(x) -> Alien(x))", "all x. (Human(x) -> Human(x))", "all x. (From(x, Earth) -> Human(x))", "all x. (From(x, Mars) -> Alien(x))", "all x. (Extraterrestrial(x) -> Alien(x))", "all x. (Human(x) -> Human(x))", "all x. (From(x, Earth) -> Human(x))", "all x. (From(x, Mars) -> Alien(x))", "all x. (Extraterrestrial(x) -> Alien(x))", "all x. (Human(x) -> Human(x))", "all x. (From(x, Earth) -> Human(x))", "all x. (From(x, Mars) -> Alien(x))", "all x. (Extraterrestrial(x) -> Alien(x))", "all x. (Human(x) -> Human(x))", "all x. (From(x, Earth) -> Human(x))", "all x. (From(x, Mars) -> Alien(x))", "all x. (Extraterrestrial(x) -> Alien(x))", "all x. (Human(x) -> Human(x))", "all x. (From(x, Earth) -> Human(x))", "all x. (From(x, Mars) -> Alien(x))", "all x. (Extraterrestrial(x) -> Alien(x))", "all x. (Human(x) -> Human(x))", "all x. (From(x, Earth) -> Human(x))", "all x. (From(x, Mars) -> Alien(x))", "all x. (Extraterrestrial(x) -> Alien(x))", "all x. (Human(x) -> Human(x))", "all x. (From(x, Earth) -> Human(x))", "all x. (From(x, Mars) -> Alien(x))", "all x. (Extraterrestrial(x) -> Alien(x))", "all x. (Human(x) -> Human(x))", "all x. (From(x, Earth) -> Human(x))", "all x. (From(x, Mars) -> Alien(x))", "all x. (Extraterrestrial(x) -> Alien(x))", "all x. (Human(x) -> Human(x))", "all x. (From(x, Earth) -> Human(x))", "all x. (From(x, Mars) -> Alien(x))", "all x. (Extraterrestrial(x) -> Alien(x))", "all x. (Human(x) -> Human(x))", "all x. (From(x, Earth) -> Human(x))", "all x. (From(x, Mars) -> Alien(x))", "all xized x. (Extraterrestrial(x) -> Alien(x))", "all x. (Human(x) -> Human(x))", "all x. (From(x, Earth) -> Human(x))", "all x. (From(x, Mars) -> Alien(x))", "all x. (Extraterrestrial(x) -> Alien(x))", "all x. (Human(x) -> Human(x))", "all x. (From(x, Earth) -> Human(x))", "all x. (From(x, Mars) -> Alien(x))", "all x. (Extraterrestrial(x) -> Alien(x))", "all x. (Human(x) -> Human(x))", "all x. (From(x, Earth) -> Human(x))", "all x. (From(x, Mars) -> Alien(x))", "all x. (Extraterrestrial(x) -> Alien(x))", "all x. (Human(x) -> Human(x))", "all x. (From(x, Earth) -> Human(x))", "all x. (From(x, Mars) -> Alien(x))", "all x. (Extraterrestrial(x) -> Alien(x))", "all x. (Human(x) -> Human(x))", "all x. (From(x, Earth) -> Human(x))", "all x. (From(x, Mars) -> Alien(x))", "all x. (Extraterrestrial(x) -> Alien(x))", "all x. (Human(x) -> Human(x))", "all x. (From(x, Earth) -> Human(x))", "all x. (From(x, Mars) -> Alien(x))", "all x. (Extraterrestrial(x) -> Alien(x))", "all x. (Human(x) -> Human(x))", "all x. (From(x, Earth) -> Human(x))", "all x. (From(x, Mars) -> Alien(x))", "all x. (Extraterrestrial(x) -> Alien(x))", "all x. (Human(x) -> Human(x))", "all x. (From(x, Earth) -> Human(x))", "all x. (From(x, Mars) -> Alien(x))", "all x. (Extraterrestrial(x) -> Alien(x))", "all x. (Human(x) -> Human(x))", "all x. (From(x, Earth) -> Human(x))", "all x. (From(x, Mars) -> Alien(x))", "all x. (Extraterrestrial(x) -> Alien(x))", "all x. (Human(x) -> Human(x))", "all x. (From(x, Earth) -> Human(x))", "all x. (From(x, Mars) -> Alien(x))", "all x. (Extraterrestrial(x) -> Alien(x))", "all x. (Human(x) -> Human(x))", "all x. (From(x, Earth) -> Human(x))", "all x. (From(x, Mars) -> Alien(x))", "all x. (Extraterrestrial(x) -> Alien(x))", "all x. (Human(x) -> Human(x))", "all x. (From(x, Earth) -> Human(x))", "all x. (From(x, Mars) -> Alien(x))", "all x. (Extraterrestrial(x) -> Alien(x))", "all x. (Human(x) -> Human(x))", "all x. (From(x, Earth) -> Human(x))", "all x. (From(x, Mars) -> Alien(x))", "all x. (Extraterrestrial(x) -> Alien(x))", "all x. (Human(x) -> Human(x))", "all x. (From(x, Earth) -> Human(x))", "all x. (From(x, Mars) -> Alien(x))", "all x. (Extraterrestrial(x) -> Alien(x))", "all x. (Human(x) -> Human(x))", "all x. (From(x, Earth) -> Human(x))", "all x. (From(x, Mars) -> Alien(x))", "all x. (Extraterrestrial(x) -> Alien(x))", "all x. (Human(x) -> Human(x))", "all x. (From(x, Earth) -> Human(x))", "all x. (From(x, Mars) -> Alien(x))", "all x. (Extraterrestrial(x) -> Alien(x))", "all x. (Human(x) -> Human(x))", "all x. (From(x, Earth) -> Human(x))", "all x. (From(x, Mars) -> Alien(x))", "all x. (Extraterrestrial(x) -> Alien(x))", "all x. (Human(x) -> Human(x))", "all x. (From(x, Earth) -> Human(x))", "all x. (From(x, Mars) -> Alien(x))", "all x. (Extraterrestrial(x) -> Alien(x))", "all x. (Human(x) -> Human(x))", "all x. (From(x, Earth) -> Human(x))", "all x. (From(x, Mars) -> Alien(x))", "all x. (Extraterrestrial(x) -> Alien(x))", "all x. (Human(x) -> Human(x))", "all x. (From(x, Earth) -> Human(x))", "all x. (From(x, Mars) -> Alien(x))", "all x. (Extraterrestrial(x) -> Alien(x))", "all x. (Human(x) -> Human(x))", "all x. (From(x, Earth) -> Human(x))", "all x. (From(x, Mars) -> Alien(x))", "all x. (Extraterrestrial(x) -> Alien(x))", "all x. (Human(x) -> Human(x))", "all x. (From(x, Earth) -> Human(x))", "all x. (From(x, Mars) -> Alien(x))", "all x. (Extraterrestrial(x) -> Alien(x))", "all x. (Human(x) -> Human(x))", "all x. (From(x, Earth) -> Human(x))", "all x. (From(x, Mars) -> Alien(x))", "all x. (Extraterrestrial(x) -> Alien(x))", "all x. (Human(x) -> Human(x))", "all x. (From(x, Earth) -> Human(x))", "all x. (From(x, Mars) -> Alien(x))", "all x. (Extraterrestrial(x) -> Alien(x))", "all x. (Human(x) -> Human(x))", "all x. (From(x, Earth) -> Human(x))", "all x. (From(x, Mars) -> Alien(x))", "all x. (Extraterrestrial(x) -> Alien(x))", "all x. (Human(x) -> Human(x))", "all x. (From(x, Earth) -> Human(x))", "all x. (From(x, Mars) -> Alien(x))", "all x. (Extraterrestrial(x) -> Alien(x))", "all x. (Human(x) -> Human(x))", "all x. (From(x, Earth) -> Human(x))", "all x. (From(x, Mars) -> Alien(x))", "all x. (Extraterrestrial(x) -> Alien(x))", "all x. (Human(x) -> Human(x))", "all x. (From(x, Earth) -> Human(x))", "all x. (From(x, Mars) -> Alien(x))", "all x. (Extraterrestrial(x) -> Alien(x))", "all x. (Human(x) -> Human(x))", "all x. (From(x, Earth) -> Human(x))", "all x. (From(x, Mars) -> Alien(x))", "all x. (Extraterrestrial(x) -> Alien(x))", "all x. (Human(x) -> Human(x))", "all x. (From(x, Earth) -> Human(x))", "all x. (From(x, Mars) -> Alien(x))", "all x. (Extraterrestrial(x) -> Alien(x))", "all x. (Human(x) -> Human(x))", "all x. (From(x, Earth) -> Human(x))", "all x. (From(x, Mars) -> Alien(x))", "all x. (Extraterrestrial(x) -> Alien(x))", "all x. (Human(x) -> Human(x))", "all x. (From(x, Earth) -> Human(x))", "all x. (From(x, Mars) -> Alien(x))", "all x. (Extraterrestrial(x) -> Alien(x))", "all x. (Human(x) -> Human(x))", "all x. (From(x, Earth) -> Human(x))", "all x. (From(x, Mars) -> Alien(x))", "all x. (Extraterrestrial(x) -> Alien(x))", "all x. (Human(x) -> Human(x))", "all x. (From(x, Earth) -> Human(x))", "all x. (From(x, Mars) -> Alien(x))", "all x. (Extraterrestrial(x) -> Alien(x))", "all x. (Human(x) -> Human(x))", "all x. (From(x, Earth) -> Human(x))", "all x. (From(x, Mars) -> Alien(x))", "all x. (Extraterrestrial(x) -> Alien(x))", "all x. (Human(x) -> Human(x))", "all x. (From(x, Earth) -> Human(x))", "all x. (From(x, Mars) -> Alien(x))", "all x. (Extraterrestrial(x) -> Alien(x))", "all x. (Human(x) -> Human(x))", "all x. (From(x, Earth) -> Human(x))", "all x. (From(x, Mars) -> Alien(x))", "all x. (Extraterrestrial(x) -> Alien(x))", "all x. (Human(x) -> Human(x))", "all x. (From(x, Earth) -> Human(x))", "all x. (From(x, Mars) -> Alien(x))", "all x. (Extraterrestrial(x) -> Alien(x))", "all x. (Human(x) -> Human(x))", "all x. (From(x, Earth) -> Human(x))", "all x. (From(x, Mars) -> Alien(x))", "all x. (Extraterrestrial(x) -> Alien(x))", "all x. (Human(x) -> Human(x))", "all x. (From(x, Earth) -> Human(x))", "all x. (From(x, Mars) -> Alien(x))", "all x. (Extraterrestrial(x) -> Alien(x))", "all x. (Human(x) -> Human(x))", "all x. (From(x, Earth) -> Human(x))", "all x. (From(x, Mars) -> Alien(x))", "all x. (Extraterrestrial(x) -> Alien(x))", "all x. (Human(x) -> Human(x))", "all x. (From(x, Earth) -> Human(x))", "all x. (From(x, Mars) -> Alien(x))", "all x. (Extraterrestrial(x) -> Alien(x))", "all x. (Human(x) -> Human(x))", "all x. (From(x, Earth) -> Human(x))", "all x. (From(x, Mars) -> Alien(x))", "all x. (Extraterrestrial(x) -> Alien(x))", "all x. (Human(x) -> Human(x))", "all x. (From(x, Earth) -> Human(x))", "all x. (From(x, Mars) -> Alien(x))", "all x. (Extraterrestrial(x) -> Alien(x))", "all x. (Human(x) -> Human(x))", "all x. (From(x, Earth) -> Human(x))", "all x. (From(x, Mars) -> Alien(x))", "all x. (Extraterrestrial(x) -> Alien(x))", "all x. (Human(x) -> Human(x))", "all x. (From(x, Earth) -> Human(x))", "all x. (From(x, Mars) -> Alien(x))", "all x. (Extraterrestrial(x) -> Alien(x))", "all x. (Human(x) -> Human(x))", "all x. (From(x, Earth) -> Human(x))", "all x. (From(x, Mars) -> Alien(x))", "all x. (Extraterrestrial(x) -> Alien(x))", "all x. (Human(x) -> Human(x))", "all x. (From(x, Earth) -> Human(x))", "all x. (From(x, Mars) -> Alien(x))", "all x. (Extraterrestrial(x) -> Alien(x))", "all x. (Human(x) -> Human(x))", "all x. (From(x, Earth) -> Human(x))", "all x. (From(x, Mars) -> Alien(x))", "all x. (Extraterrestrial(x) -> Alien(x))", "all x. (Human(x) -> Human(x))", "all x. (From(x, Earth) -> Human(x))", "all x. (From(x, Mars) -> Alien(x))", "all x. (Extraterrestrial(x) -> Alien(x))", "all x. (Human(x) -> Human(x))", "all x. (From(x, Earth) -> Human(x))", "all x. (From(x, Mars) -> Alien(x))", "all x. (Extraterrestrial(x) -> Alien(x))", "all x. (Human(x) -> Human(x))", "all x. (From(x, Earth) -> Human(x))", "all x. (From(x, Mars) -> Alien(x))", "all x. (Extraterrestrial(x) -> Alien(x))", "all x. (Human(x) -> Human(x))", "all x. (From(x, Earth) -> Human(x))", "all x. (From(x, Mars) -> Alien(x))", "all x. (Extraterrestrial(x) -> Alien(x))", "all x. (Human(x) -> Human(x))", "all x. (From(x, Earth) -> Human(x))", "all x. (From(x, Mars) -> Alien(x))", "all x. (Extraterrestrial(x) -> Alien(x))", "all x. (Human(x) -> Human(x))", "all x. (From(x, Earth) -> Human(x))", "all x. (From(x, Mars) -> Alien(x))", "all x. (Extraterrestrial(x) -> Alien(x))", "all x. (Human(x) -> Human(x))", "all x. (From(x, Earth) -> Human(x))", "all x. (From(x, Mars) -> Alien(x))", "all x. (Extraterrestrial(x) -> Alien(x))", "all x. (Human(x) -> Human(x))", "all x. (From(x, Earth) -> Human(x))", "all x. (From(x, Mars) -> Alien(x))", "all x. (Extraterrestrial(x) -> Alien(x))", "all x. (Human(x) -> Human(x))", "all x. (From(x, Earth) -> Human(x))", "all x. (From(x, Mars) -> Alien(x))", "all x. (Extraterrestrial(x) -> Alien(x))", "all x. (Human(x) -> Human(x))", "all x. (From(x, Earth) -> Human(x))", "all x. (From(x, Mars) -> Alien(x))", "all x. (Extraterrestrial(x) -> Alien(x))", "all x. (Human(x) -> Human(x))", "all x. (From(x, Earth) -> Human(x))", "all x. (From(x, Mars) -> Alien(x))", "all x. (Extraterrestrial(x) -> Alien(x))", "all x. (Human(x) -> Human(x))", "all x. (From(x, Earth) -> Human(x))", "all x. (From(x, Mars) -> Alien(x))", "all x. (Extraterrestrial(x) -> Alien(x))", "all x. (Human(x) -> Human(x))", "all x. (From(x, Earth) -> Human(x))", "all x. (From(x, Mars) -> Alien(x))", "all x. (Extraterrestrial(x) -> Alien(x))", "all x. (Human(x) -> Human(x))", "all x. (From(x, Earth) -> Human(x))", "all x. (From(x, Mars) -> Alien(x))", "all x. (Extraterrestrial(x) -> Alien(x))", "all x. (Human(x) -> Human(x))", "all x. (From(x, Earth) -> Human(x))", "all x. (From(x, Mars) -> Alien(x))", "all x. (Extraterrestrial(x) -> Alien(x))", "all x. (Human(x) -> Human(x))", "all x. (From(x, Earth) -> Human(x))", "all x. (From(x, Mars) -> Alien(x))", "all x. (Extraterrestrial(x) -> Alien(x))", "all x. (Human(x) -> Human(x))", "all x. (From(x, Earth) -> Human(x))", "all x. (From(x, Mars) -> Alien(x))", "all x. (Extraterrestrial(x) -> Alien(x))", "all x. (Human(x) -> Human(x))", "all x. (From(x, Earth) -> Human(x))", "all x. (From(x, Mars) -> Alien(x))", "all x. (Extraterrestrial(x) -> Alien(x))", "all x. (Human(x) -> Human(x))", "all x. (From(x, Earth) -> Human(x))", "all x. (From(x, Mars) -> Alien(x))", "all x. (Extraterrestrial(x) -> Alien(x))", "all x. (Human(x) -> Human(x))", "all x. (From(x, Earth) -> Human(x))", "all x. (From(x, Mars) -> Alien(x))"], "conclusion": "all x", "error_type": "<class 'nltk.sem.logic.LogicalExpressionException'>", "error_message": "End of input found.  Expression expected.\nall x\n      ^", "stack_trace": "Traceback (most recent call last):\n  File \"/data/gpfs/projects/punim0478/bansaab/linc2/eval/tasks/owafoltask.py\", line 577, in _process_neurosymbolic\n    parsed = json.loads(gen)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/json/__init__.py\", line 346, in loads\n    return _default_decoder.decode(s)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/json/decoder.py\", line 337, in decode\n    obj, end = self.raw_decode(s, idx=_w(s, 0).end())\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/json/decoder.py\", line 355, in raw_decode\n    raise JSONDecodeError(\"Expecting value\", s, err.value) from None\njson.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/sem/logic.py\", line 154, in parse\n    result = self.process_next_expression(None)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/sem/logic.py\", line 290, in process_next_expression\n    accum = self.handle(tok, context)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/sem/logic.py\", line 312, in handle\n    return self.handle_quant(tok, context)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/sem/logic.py\", line 417, in handle_quant\n    raise ExpectedMoreTokensException(\nnltk.sem.logic.ExpectedMoreTokensException: End of input found.  Expression expected.\n\nThe above exception was the direct cause of the following exception:\n\nTraceback (most recent call last):\n  File \"/data/gpfs/projects/punim0478/bansaab/linc2/eval/tasks/utils.py\", line 215, in evaluate\n    c = read_expr(conclusion)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/sem/logic.py\", line 957, in fromstring\n    return cls._logic_parser.parse(s, signature)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/sem/logic.py\", line 159, in parse\n    raise LogicalExpressionException(None, msg) from e\nnltk.sem.logic.LogicalExpressionException: End of input found.  Expression expected.\nall x\n      ^\n"}
{"timestamp": "2025-09-16T18:40:44.448557", "premises": ["all x. (Alien(x) -> Extraterrestrial(x))", "all x. (From(x, Mars) -> Alien(x))", "all x. (Extraterrestrial(x) -> -Human(x))", "all x. (Human(x) -> From(x, Earth))", "all x. all y. (From(x, y) & Marvin(x) -> Marvin(y))", "all x. (From(x, Earth) -> -Marvin(x))", "all x. (From(x, Mars) -> -Marvin(x))", "all x. (Marvin(x) -> -From(x, Earth))", "all x. (Marvin(x) -> -From(x, Mars))", "all x. (Marvin(x) -> Extraterrestrial(x))", "all x. (Extraterrestrial(x) -> -Human(x))", "all x. (Human(x) -> From(x, Earth))", "all x. (From(x, Earth) -> -Marvin(x))", "all x. (From(x, Mars) -> -Marvin(x))", "all x. (Marvin(x) -> -From(x, Earth))", "all x. (Marvin(x) -> -From(x, Mars))", "all x. (Marvin(x) -> Extraterrestrial(x))", "all x. (Extraterrestrial(x) -> -Human(x))", "all x. (Human(x) -> From(x, Earth))", "all x. (From(x, Earth) -> -Marvin(x))", "all x. (From(x, Mars) -> -Marvin(x))", "all x. (Marvin(x) -> -From(x, Earth))", "all x. (Marvin(x) -> -From(x, Mars))", "all x. (Marvin(x) -> Extraterrestrial(x))", "all x. (Extraterrestrial(x) -> -Human(x))", "all x. (Human(x) -> From(x, Earth))", "all x. (From(x, Earth) -> -Marvin(x))", "all x. (From(x, Mars) -> -Marvin(x))", "all x. (Marvin(x) -> -From(x, Earth))", "all x. (Marvin(x) -> -From(x, Mars))", "all x. (Marvin(x) -> Extraterrestrial(x))", "all x. (Extraterrestrial(x) -> -Human(x))", "all x. (Human(x) -> From(x, Earth))", "all x. (From(x, Earth) -> -Marvin(x))", "all x. (From(x, Mars) -> -Marvin(x))", "all x. (Marvin(x) -> -From(x, Earth))", "all x. (Marvin(x) -> -From(x, Mars))", "all x. (Marvin(x) -> Extraterrestrial(x))", "all x. (Extraterrestrial(x) -> -Human(x))", "all x. (Human(x) -> From(x, Earth))", "all x. (From(x, Earth) -> -Marvin(x))", "all x. (From(x, Mars) -> -Marvin(x))", "all x. (Marvin(x) -> -From(x, Earth))", "all x. (Marvin(x) -> -From(x, Mars))", "all x. (Marvin(x) -> Extraterrestrial(x))", "all x. (Extraterrestrial(x) -> -Human(x))", "all x. (Human(x) -> From(x, Earth))", "all x. (From(x, Earth) -> -Marvin(x))", "all x. (From(x, Mars) -> -Marvin(x))", "all x. (Marvin(x) -> -From(x, Earth))", "all x. (Marvin(x) -> -From(x, Mars))", "all x. (Marvin(x) -> Extraterrestrial(x))", "all x. (Extraterrestrial(x) -> -Human(x))", "all x. (Human(x) -> From(x, Earth))", "all x. (From(x, Earth) -> -Marvin(x))", "all x. (From(x, Mars) -> -Marvin(x))", "all x. (Marvin(x) -> -From(x, Earth))", "all x. (Marvin(x) -> -From(x, Mars))", "all x. (Marvin(x) -> Extraterrestrial(x))", "all x. (Extraterrestrial(x) -> -Human(x))", "all x. (Human(x) -> From(x, Earth))", "all x. (From(x, Earth) -> -Marvin(x))", "all x. (From(x, Mars) -> -Marvin(x))", "all x. (Marvin(x) -> -From(x, Earth))", "all x. (Marvin(x) -> -From(x, Mars))", "all x. (Marvin(x) -> Extraterrestrial(x))", "all x. (Extraterrestrial(x) -> -Human(x))", "all x. (Human(x) -> From(x, Earth))", "all x. (From(x, Earth) -> -Marvin(x))", "all x. (From(x, Mars) -> -Marvin(x))", "all x. (Marvin(x) -> -From(x, Earth))", "all x. (Marvin(x) -> -From(x, Mars))", "all x. (Marvin(x) -> Extraterrestrial(x))", "all x. (Extraterrestrial(x) -> -Human(x))", "all x. (Human(x) -> From(x, Earth))", "all x. (From(x, Earth) -> -Marvin(x))", "all x. (From(x, Mars) -> -Marvin(x))", "all x. (Marvin(x) -> -From(x, Earth))", "all x. (Marvin(x) -> -From(x, Mars))", "all x. (Marvin(x) -> Extraterrestrial(x))", "all x. (Extraterrestrial(x) -> -Human(x))", "all x. (Human(x) -> From(x, Earth))", "all x. (From(x, Earth) -> -Marvin(x))", "all x. (From(x, Mars) -> -Marvin(x))", "all x. (Marvin(x) -> -From(x, Earth))", "all x. (Marvin(x) -> -From(x, Mars))", "all x. (Marvin(x) -> Extraterrestrial(x))", "all x. (Extraterrestrial(x) -> -Human(x))", "all x. (Human(x) -> From(x, Earth))", "all x. (From(x, Earth) -> -Marvin(x))", "all x. (From(x, Mars) -> -Marvin(x))", "all x. (Marvin(x) -> -From(x, Earth))", "all x. (Marvin(x) -> -From(x, Mars))", "all x. (Marvin(x) -> Extraterrestrial(x))", "all x. (Extraterrestrial(x) -> -Human(x))", "all x. (Human(x) -> From(x, Earth))", "all x. (From(x, Earth) -> -Marvin(x))", "all x. (From(x, Mars) -> -Marvin(x))", "all x. (Marvin(x) -> -From(x, Earth))", "all x. (Marvin(x) -> -From(x, Mars))", "all x. (Marvin(x) -> Extraterrestrial(x))", "all x. (Extraterrestrial(x) -> -Human(x))", "all x. (Human(x) -> From(x, Earth))", "all x. (From(x, Earth) -> -Marvin(x))", "all x. (From(x, Mars) -> -Marvin(x))", "all x. (Marvin(x) -> -From(x, Earth))", "all x. (Marvin(x) -> -From(x, Mars))", "all x. (Marvin(x) -> Extraterrestrial(x))", "all x. (Extraterrestrial(x) -> -Human(x))", "all x. (Human(x) -> From(x, Earth))", "all x. (From(x, Earth) -> -Marvin(x))", "all x. (From(x, Mars) -> -Marvin(x))", "all x. (Marvin(x) -> -From(x, Earth))", "all x. (Marvin(x) -> -From(x, Mars))", "all x. (Marvin(x) -> Extraterrestrial(x))", "all x. (Extraterrestrial(x) -> -Human(x))", "all x. (Human(x) -> From(x, Earth))", "all x. (From(x, Earth) -> -Marvin(x))", "all x. (From(x, Mars) -> -Marvin(x))", "all x. (Marvin(x) -> -From(x, Earth))", "all x. (Marvin(x) -> -From(x, Mars))", "all x. (Marvin(x) -> Extraterrestrial(x))", "all x. (Extraterrestrial(x) -> -Human(x))", "all x. (Human(x) -> From(x, Earth))", "all x. (From(x, Earth) -> -Marvin(x))", "all x. (From(x, Mars) -> -Marvin(x))", "all x. (Marvin(x) -> -From(x, Earth))", "all x. (Marvin(x) -> -From(x, Mars))", "all x. (Marvin(x) -> Extraterrestrial(x))", "all x. (Extraterrestrial(x) -> -Human(x))", "all x. (Human(x) -> From(x, Earth))", "all x. (From(x, Earth) -> -Marvin(x))", "all x. (From(x, Mars) -> -Marvin(x))", "all x. (Marvin(x) -> -From(x, Earth))", "all x. (Marvin(x) -> -From(x, Mars))", "all x. (Marvin(x) -> Extraterrestrial(x))", "all x. (Extraterrestrial(x) -> -Human(x))", "all x. (Human(x) -> From(x, Earth))", "all x. (From(x, Earth) -> -Marvin(x))", "all x. (From(x, Mars) -> -Marvin(x))", "all x. (Marvin(x) -> -From(x, Earth))", "all x. (Marvin(x) -> -From(x, Mars))", "all x. (Marvin(x) -> Extraterrestrial(x))", "all x. (Extraterrestrial(x) -> -Human(x))", "all x. (Human(x) -> From(x, Earth))", "all x. (From(x, Earth) -> -Marvin(x))", "all x. (From(x, Mars) -> -Marvin(x))", "all x. (Marvin(x) -> -From(x, Earth))", "all x. (Marvin(x) -> -From(x, Mars))", "all x. (Marvin(x) -> Extraterrestrial(x))", "all x. (Extraterrestrial(x) -> -Human(x))", "all x. (Human(x) -> From(x, Earth))", "all x. (From(x, Earth) -> -Marvin(x))", "all x. (From(x, Mars) -> -Marvin(x))", "all x. (Marvin(x) -> -From(x, Earth))", "all x. (Marvin(x) -> -From(x, Mars))", "all x. (Marvin(x) -> Extraterrestrial(x))", "all x. (Extraterrestrial(x) -> -Human(x))", "all x. (Human(x) -> From(x, Earth))", "all x. (From(x, Earth) -> -Marvin(x))", "all x. (From(x, Mars) -> -Marvin(x))", "all x. (Marvin(x) -> -From(x, Earth))", "all x. (Marvin(x) -> -From(x, Mars))", "all x. (Marvin(x) -> Extraterrestrial(x))", "all x. (Extraterrestrial(x) -> -Human(x))", "all x. (Human(x) -> From(x, Earth))", "all x. (From(x, Earth) -> -Marvin(x))", "all x. (From(x, Mars) -> -Marvin(x))", "all x. (Marvin(x) -> -From(x, Earth))", "all x. (Marvin(x) -> -From(x, Mars))", "all x. (Marvin(x) -> Extraterrestrial(x))", "all x. (Extraterrestrial(x) -> -Human(x))", "all x. (Human(x) -> From(x, Earth))", "all x. (From(x, Earth) -> -Marvin(x))", "all x. (From(x, Mars) -> -Marvin(x))", "all x. (Marvin(x) -> -From(x, Earth))", "all x. (Marvin(x) -> -From(x, Mars))", "all x. (Marvin(x) -> Extraterrestrial(x))", "all x. (Extraterrestrial(x) -> -Human(x))", "all x. (Human(x) -> From(x, Earth))", "all x. (From(x, Earth) -> -Marvin(x))", "all x. (From(x, Mars) -> -Marvin(x))", "all x. (Marvin(x) -> -From(x, Earth))", "all x. (Marvin(x) -> -From(x, Mars))", "all x. (Marvin(x) -> Extraterrestrial(x))", "all x. (Extraterrestrial(x) -> -Human(x))", "all x. (Human(x) -> From(x, Earth))", "all x. (From(x, Earth) -> -Marvin(x))", "all x. (From(x, Mars) -> -Marvin(x))", "all x. (Marvin(x) -> -From(x, Earth))", "all x. (Marvin(x) -> -From(x, Mars))", "all x. (Marvin(x) -> Extraterrestrial(x))", "all x. (Extraterrestrial(x) -> -Human(x))", "all x. (Human(x) -> From(x, Earth))", "all x. (From(x, Earth) -> -Marvin(x))", "all x. (From(x, Mars) -> -Marvin(x))", "all x. (Marvin(x) -> -From(x, Earth))", "all x. (Marvin(x) -> -From(x, Mars))", "all x. (Marvin(x) -> Extraterrestrial(x))", "all x. (Extraterrestrial(x) -> -Human(x))", "all x. (Human(x) -> From(x, Earth))", "all x. (From(x, Earth) -> -Marvin(x))", "all x. (From(x, Mars) -> -Marvin(x))", "all x. (Marvin(x) -> -From(x, Earth))", "all x. (Marvin(x) -> -From(x, Mars))", "all x. (Marvin(x) -> Extraterrestrial(x))", "all x. (Extraterrestrial(x) -> -Human(x))", "all x. (Human(x) -> From(x, Earth))", "all x. (From(x, Earth) -> -Marvin(x))", "all x. (From(x, Mars) -> -Marvin(x))", "all x. (Marvin(x) -> -From(x, Earth))", "all x. (Marvin(x) -> -From(x, Mars))", "all x. (Marvin(x) -> Extraterrestrial(x))", "all x. (Extraterrestrial(x) -> -Human(x))", "all x. (Human(x) -> From(x, Earth))", "all x. (From(x, Earth) -> -Marvin(x))", "all x. (From(x, Mars) -> -Marvin(x))", "all x. (Marvin(x) -> -From(x, Earth))", "all x. (Marvin(x) -> -From(x, Mars))", "all x. (Marvin(x) -> Extraterrestrial(x))", "all x. (Extraterrestrial(x) -> -Human(x))", "all x. (Human(x) -> From(x, Earth))", "all x. (From(x, Earth) -> -Marvin(x))", "all x. (From(x, Mars) -> -Marvin(x))", "all x. (Marvin(x) -> -From(x, Earth))", "all x. (Marvin(x) -> -From(x, Mars))", "all x. (Marvin(x) -> Extraterrestrial(x))", "all x. (Extraterrestrial(x) -> -Human(x))", "all x. (Human(x) -> From(x, Earth))", "all x. (From(x, Earth) -> -Marvin(x))", "all x. (From(x, Mars) -> -Marvin(x))", "all x. (Marvin(x) -> -From(x, Earth))", "all x. (Marvin(x) -> -From(x, Mars))", "all x. (Marvin(x) -> Extraterrestrial(x))", "all x. (Extraterrestrial(x) -> -Human(x))", "all x. (Human(x) -> From(x, Earth))", "all x. (From(x, Earth) -> -Marvin(x))", "all x. (From(x, Mars) -> -Marvin(x))", "all x. (Marvin(x) -> -From(x, Earth))", "all x. (Marvin(x) -> -From(x, Mars))", "all x. (Marvin(x) -> Extraterrestrial(x))", "all x. (Extraterrestrial(x) -> -Human(x))", "all x. (Human(x) -> From(x, Earth))", "all x. (From(x, Earth) -> -Marvin(x))", "all x. (From(x, Mars) -> -Marvin(x))", "all x. (Marvin(x) -> -From(x, Earth))", "all x. (Marvin(x) -> -From(x, Mars))", "all x. (Marvin(x) -> Extraterrestrial(x))", "all x. (Extraterrestrial(x) -> -Human(x))", "all x. (Human(x) -> From(x, Earth))", "all x. (From(x, Earth) -> -Marvin(x))", "all x. (From(x, Mars) -> -Marvin(x))", "all x. (Marvin(x) -> -From(x, Earth))", "all x. (Marvin(x) -> -From(x, Mars))", "all x. (Marvin(x) -> Extraterrestrial(x))", "all x. (Extraterrestrial(x) -> -Human(x))", "all x. (Human(x) -> From(x, Earth))", "all x. (From(x, Earth) -> -Marvin(x))", "all x. (From(x, Mars) -> -Marvin(x))", "all x. (Marvin(x) -> -From(x, Earth))", "all x. (Marvin(x) -> -From(x, Mars))", "all x. (Marvin(x) -> Extraterrestrial(x))", "all x. (Extraterrestrial(x) -> -Human(x))", "all x. (Human(x) -> From(x, Earth))", "all x. (From(x, Earth) -> -Marvin(x))", "all x. (From(x, Mars) -> -Marvin(x))", "all x. (Marvin(x) -> -From(x, Earth))", "all x. (Marvin(x) -> -From(x, Mars))", "all x. (Marvin(x) -> Extraterrestrial(x))", "all x. (Extraterrestrial(x) -> -Human(x))", "all x. (Human(x) -> From(x, Earth))", "all x. (From(x, Earth) -> -Marvin(x))", "all x. (From(x, Mars) -> -Marvin(x))", "all x. (Marvin(x) -> -From(x, Earth))", "all x. (Marvin(x) -> -From(x, Mars))", "all x. (Marvin(x) -> Extraterrestrial(x))", "all x. (Extraterrestrial(x) -> -Human(x))", "all x. (Human(x) -> From(x, Earth))", "all x. (From(x, Earth) -> -Marvin(x))", "all x. (From(x, Mars) -> -Marvin(x))", "all x. (Marvin(x) -> -From(x, Earth))", "all x. (Marvin(x) -> -From(x, Mars))", "all x. (Marvin(x) -> Extraterrestrial(x))", "all x. (Extraterrestrial(x) -> -Human(x))", "all x. (Human(x) -> From(x, Earth))", "all x. (From(x, Earth) -> -Marvin(x))", "all x. (From(x, Mars) -> -Marvin(x))", "all x. (Marvin(x) -> -From(x, Earth))", "all x. (Marvin(x) -> -From(x, Mars))", "all x. (Marvin(x) -> Extraterrestrial(x))", "all x. (Extraterrestrial(x) -> -Human(x))", "all x. (Human(x) -> From(x, Earth))", "all x. (From(x, Earth) -> -Marvin(x))", "all x. (From(x, Mars) -> -Marvin(x))", "all x. (Marvin(x) -> -From(x, Earth))", "all x. (Marvin(x) -> -From(x, Mars))", "all x. (Marvin(x) -> Extraterrestrial(x))", "all x. (Extraterrestrial(x) -> -Human(x))", "all x. (Human(x) -> From(x, Earth))", "all x. (From(x, Earth) -> -Marvin(x))", "all x. (From(x, Mars) -> -Marvin(x))", "all x. (Marvin(x) -> -From(x, Earth))"], "conclusion": "all x.(", "error_type": "<class 'nltk.sem.logic.LogicalExpressionException'>", "error_message": "End of input found.  Expression expected.\nall x.(\n       ^", "stack_trace": "Traceback (most recent call last):\n  File \"/data/gpfs/projects/punim0478/bansaab/linc2/eval/tasks/owafoltask.py\", line 577, in _process_neurosymbolic\n    parsed = json.loads(gen)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/json/__init__.py\", line 346, in loads\n    return _default_decoder.decode(s)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/json/decoder.py\", line 337, in decode\n    obj, end = self.raw_decode(s, idx=_w(s, 0).end())\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/json/decoder.py\", line 355, in raw_decode\n    raise JSONDecodeError(\"Expecting value\", s, err.value) from None\njson.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/sem/logic.py\", line 270, in token\n    tok = self._buffer[self._currentIndex]\nIndexError: list index out of range\n\nThe above exception was the direct cause of the following exception:\n\nTraceback (most recent call last):\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/sem/logic.py\", line 284, in process_next_expression\n    tok = self.token()\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/sem/logic.py\", line 276, in token\n    raise ExpectedMoreTokensException(self._currentIndex + 1) from e\nnltk.sem.logic.ExpectedMoreTokensException: End of input found.  More tokens expected.\n\nThe above exception was the direct cause of the following exception:\n\nTraceback (most recent call last):\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/sem/logic.py\", line 154, in parse\n    result = self.process_next_expression(None)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/sem/logic.py\", line 290, in process_next_expression\n    accum = self.handle(tok, context)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/sem/logic.py\", line 312, in handle\n    return self.handle_quant(tok, context)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/sem/logic.py\", line 427, in handle_quant\n    accum = self.process_next_expression(tok)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/sem/logic.py\", line 290, in process_next_expression\n    accum = self.handle(tok, context)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/sem/logic.py\", line 315, in handle\n    return self.handle_open(tok, context)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/sem/logic.py\", line 449, in handle_open\n    accum = self.process_next_expression(None)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/sem/logic.py\", line 286, in process_next_expression\n    raise ExpectedMoreTokensException(\nnltk.sem.logic.ExpectedMoreTokensException: End of input found.  Expression expected.\n\nThe above exception was the direct cause of the following exception:\n\nTraceback (most recent call last):\n  File \"/data/gpfs/projects/punim0478/bansaab/linc2/eval/tasks/utils.py\", line 215, in evaluate\n    c = read_expr(conclusion)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/sem/logic.py\", line 957, in fromstring\n    return cls._logic_parser.parse(s, signature)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/sem/logic.py\", line 159, in parse\n    raise LogicalExpressionException(None, msg) from e\nnltk.sem.logic.LogicalExpressionException: End of input found.  Expression expected.\nall x.(\n       ^\n"}
{"timestamp": "2025-09-16T18:41:33.961332", "premises": ["all x. (GrandSlamChampion(x) | OscarNominatedActor(x))", "all x. (GrandSlamChampion(x) -> ProfessionalTennisPlayer(x))", "all x. (OscarNominatedActor(x) -> Celebrity(x))", "all x. (ProfessionalTennisPlayer(x) -> Athlete(x))", "all x. (Celebrity(x) -> WellPaid(x))", "all x. (Athlete(x) -> Famous(x))", "all x. (WellPaid(x) -> LiveInTaxHavens(x))"], "conclusion": "Djokovic is famous and is an athlete, therefore Djokovic lives in well paid.", "error_type": "<class 'nltk.sem.logic.LogicalExpressionException'>", "error_message": "Unexpected token: 'is'.\nDjokovic is famous and is an athlete, therefore Djokovic lives in well paid.\n         ^", "stack_trace": "Traceback (most recent call last):\n  File \"/data/gpfs/projects/punim0478/bansaab/linc2/eval/tasks/owafoltask.py\", line 577, in _process_neurosymbolic\n    parsed = json.loads(gen)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/json/__init__.py\", line 346, in loads\n    return _default_decoder.decode(s)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/json/decoder.py\", line 337, in decode\n    obj, end = self.raw_decode(s, idx=_w(s, 0).end())\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/json/decoder.py\", line 355, in raw_decode\n    raise JSONDecodeError(\"Expecting value\", s, err.value) from None\njson.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/sem/logic.py\", line 156, in parse\n    raise UnexpectedTokenException(self._currentIndex + 1, self.token(0))\nnltk.sem.logic.UnexpectedTokenException: Unexpected token: 'is'.\n\nThe above exception was the direct cause of the following exception:\n\nTraceback (most recent call last):\n  File \"/data/gpfs/projects/punim0478/bansaab/linc2/eval/tasks/utils.py\", line 215, in evaluate\n    c = read_expr(conclusion)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/sem/logic.py\", line 957, in fromstring\n    return cls._logic_parser.parse(s, signature)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/sem/logic.py\", line 159, in parse\n    raise LogicalExpressionException(None, msg) from e\nnltk.sem.logic.LogicalExpressionException: Unexpected token: 'is'.\nDjokovic is famous and is an athlete, therefore Djokovic lives in well paid.\n         ^\n"}
{"timestamp": "2025-09-16T18:41:33.966460", "premises": ["all x. (GrandSlamChampion(x) -> Person(x)) | all x. (OscarNominatedActor(x) -> Person(x))", "all x. (GrandSlamChampion(x) -> ProfessionalTennisPlayer(x))", "all x. (OscarNominatedActor(x) -> Celebrity(x))", "all x. (ProfessionalTennisPlayer(x) -> Athlete(x))", "all x. (Celebrity(x) -> WellPaid(x))", "all x. (Athlete(x) -> Famous(x))", "all x. (WellPaid(x) -> LiveInTaxHaven(x))", "Djokovic is Famous & Djokovic is Athlete -> Djokovic lives in WellPaid", "Djokovic is a GrandSlamChampion -> Djokovic is a Person -> Djokovic is a ProfessionalTennisPlayer -> Djokovic is an Athlete -> Djokovic is WellPaid -> Djokovic lives in TaxHaven -> Djokovic is Famous -> Djokovic is an Athlete -> Djokovic is a GrandSlamChampion", "all x. (LaLiga(x) -> Points(x, 73))", "all x. (LaLiga(x) -> Points(x, 86))", "all x. (LaLiga(x) & LaLiga(y) -> Points(x, x) & Points(y, y) -> MorePointsFromGamesBetween(x, y) -> HigherRank(x, y))", "all x. (LaLiga(x) & LaLiga(y) -> Points(x, x) & Points(y, y) -> MorePointsFromGamesBetween(x, y) -> HigherRank(x, y))", "all x. (LaLiga(RealMadrid) & LaLiga(Barcelona) -> Points(RealMadrid, 3) & Points(Barcelona, 3))", "all x. (LaLiga(RealMadrid) & LaLiga(Barcelona) -> Points(RealMadrid, 3) & Points(Barcelona, 3) & MorePointsFromGamesBetween(RealMadrid, Barcelona) -> HigherRank(RealMadrid, Barcelona))"], "conclusion": "all x. (LaLiga(RealMadrid) & LaLiga(Barcelona) -> Points(RealMadrid, 86) & Points(Barcelona, 73) & MorePointsFromGamesBetween(RealMadrid, Barcelona) -> HigherRank(RealMadrid, Barcelona))", "error_type": "<class 'nltk.sem.logic.LogicalExpressionException'>", "error_message": "Unexpected token: 'is'.\nDjokovic is Famous & Djokovic is Athlete -> Djokovic lives in WellPaid\n         ^", "stack_trace": "Traceback (most recent call last):\n  File \"/data/gpfs/projects/punim0478/bansaab/linc2/eval/tasks/owafoltask.py\", line 577, in _process_neurosymbolic\n    parsed = json.loads(gen)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/json/__init__.py\", line 346, in loads\n    return _default_decoder.decode(s)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/json/decoder.py\", line 337, in decode\n    obj, end = self.raw_decode(s, idx=_w(s, 0).end())\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/json/decoder.py\", line 355, in raw_decode\n    raise JSONDecodeError(\"Expecting value\", s, err.value) from None\njson.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/sem/logic.py\", line 156, in parse\n    raise UnexpectedTokenException(self._currentIndex + 1, self.token(0))\nnltk.sem.logic.UnexpectedTokenException: Unexpected token: 'is'.\n\nThe above exception was the direct cause of the following exception:\n\nTraceback (most recent call last):\n  File \"/data/gpfs/projects/punim0478/bansaab/linc2/eval/tasks/utils.py\", line 216, in evaluate\n    p_list = [read_expr(p) for p in premises]\n  File \"/data/gpfs/projects/punim0478/bansaab/linc2/eval/tasks/utils.py\", line 216, in <listcomp>\n    p_list = [read_expr(p) for p in premises]\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/sem/logic.py\", line 957, in fromstring\n    return cls._logic_parser.parse(s, signature)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/sem/logic.py\", line 159, in parse\n    raise LogicalExpressionException(None, msg) from e\nnltk.sem.logic.LogicalExpressionException: Unexpected token: 'is'.\nDjokovic is Famous & Djokovic is Athlete -> Djokovic lives in WellPaid\n         ^\n"}
{"timestamp": "2025-09-16T18:41:33.978653", "premises": ["all x. (GrandSlamChampion(x) -> ProfessionalTennisPlayer(x))", "Djokovic(x) & Athletic(x) & Famous(x) -> Djokovic(x) & WellPaid(x) & LivesInTaxHavens(x)"], "conclusion": "GrandSlamChampion(Djokovic) & ProfessionalTennisPlayer(Djokovic) -> Djokovic is a Grand Slam champion.", "error_type": "<class 'nltk.sem.logic.LogicalExpressionException'>", "error_message": "Unexpected token: 'is'.\nGrandSlamChampion(Djokovic) & ProfessionalTennisPlayer(Djokovic) -> Djokovic is a Grand Slam champion.\n                                                                             ^", "stack_trace": "Traceback (most recent call last):\n  File \"/data/gpfs/projects/punim0478/bansaab/linc2/eval/tasks/owafoltask.py\", line 577, in _process_neurosymbolic\n    parsed = json.loads(gen)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/json/__init__.py\", line 346, in loads\n    return _default_decoder.decode(s)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/json/decoder.py\", line 337, in decode\n    obj, end = self.raw_decode(s, idx=_w(s, 0).end())\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/json/decoder.py\", line 355, in raw_decode\n    raise JSONDecodeError(\"Expecting value\", s, err.value) from None\njson.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/sem/logic.py\", line 156, in parse\n    raise UnexpectedTokenException(self._currentIndex + 1, self.token(0))\nnltk.sem.logic.UnexpectedTokenException: Unexpected token: 'is'.\n\nThe above exception was the direct cause of the following exception:\n\nTraceback (most recent call last):\n  File \"/data/gpfs/projects/punim0478/bansaab/linc2/eval/tasks/utils.py\", line 215, in evaluate\n    c = read_expr(conclusion)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/sem/logic.py\", line 957, in fromstring\n    return cls._logic_parser.parse(s, signature)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/sem/logic.py\", line 159, in parse\n    raise LogicalExpressionException(None, msg) from e\nnltk.sem.logic.LogicalExpressionException: Unexpected token: 'is'.\nGrandSlamChampion(Djokovic) & ProfessionalTennisPlayer(Djokovic) -> Djokovic is a Grand Slam champion.\n                                                                             ^\n"}
{"timestamp": "2025-09-16T18:41:33.979475", "premises": ["all x. (GrandSlamChampion(x) | OscarNominatedActor(x))", "all x. (GrandSlamChampion(x) -> ProfessionalTennisPlayer(x))", "all x. (OscarNominatedActor(x) -> Celebrity(x))", "all x. (ProfessionalTennisPlayer(x) -> Athlete(x))", "all x. (Celebrity(x) -> WellPaid(x))", "all x. (Athlete(x) -> Famous(x))", "all x. (WellPaid(x) -> LiveInTaxHavens(x))", "Djokovic is famous.", "Djokovic is an athlete."], "conclusion": "Djokovic lives in well paid.", "error_type": "<class 'nltk.sem.logic.LogicalExpressionException'>", "error_message": "Unexpected token: 'lives'.\nDjokovic lives in well paid.\n         ^", "stack_trace": "Traceback (most recent call last):\n  File \"/data/gpfs/projects/punim0478/bansaab/linc2/eval/tasks/owafoltask.py\", line 577, in _process_neurosymbolic\n    parsed = json.loads(gen)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/json/__init__.py\", line 346, in loads\n    return _default_decoder.decode(s)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/json/decoder.py\", line 337, in decode\n    obj, end = self.raw_decode(s, idx=_w(s, 0).end())\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/json/decoder.py\", line 355, in raw_decode\n    raise JSONDecodeError(\"Expecting value\", s, err.value) from None\njson.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/sem/logic.py\", line 156, in parse\n    raise UnexpectedTokenException(self._currentIndex + 1, self.token(0))\nnltk.sem.logic.UnexpectedTokenException: Unexpected token: 'lives'.\n\nThe above exception was the direct cause of the following exception:\n\nTraceback (most recent call last):\n  File \"/data/gpfs/projects/punim0478/bansaab/linc2/eval/tasks/utils.py\", line 215, in evaluate\n    c = read_expr(conclusion)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/sem/logic.py\", line 957, in fromstring\n    return cls._logic_parser.parse(s, signature)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/sem/logic.py\", line 159, in parse\n    raise LogicalExpressionException(None, msg) from e\nnltk.sem.logic.LogicalExpressionException: Unexpected token: 'lives'.\nDjokovic lives in well paid.\n         ^\n"}
{"timestamp": "2025-09-16T18:41:33.987631", "premises": ["all x. (GrandSlamChampion(x) -> ProfessionalTennisPlayer(x))", "all x. (OscarNominatedActor(x) -> Celebrity(x))", "all x. (ProfessionalTennisPlayer(x) -> Athlete(x))", "all x. (Celebrity(x) -> WellPaid(x))", "all x. (Athlete(x) -> Famous(x))", "all x. (WellPaid(x) -> LivesInTaxHavens(x))", "all x. (Famous(x) & Athlete(x) -> LivesInTaxHavens(x))", "Djokovic is famous and is an athlete.", "Famous(Djokovic) & Athlete(Djokovic)", "Djokovic is a Grand Slam champion."], "conclusion": "GrandSlamChampion(Djokovic)", "error_type": "<class 'nltk.sem.logic.LogicalExpressionException'>", "error_message": "Unexpected token: 'is'.\nDjokovic is famous and is an athlete.\n         ^", "stack_trace": "Traceback (most recent call last):\n  File \"/data/gpfs/projects/punim0478/bansaab/linc2/eval/tasks/owafoltask.py\", line 577, in _process_neurosymbolic\n    parsed = json.loads(gen)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/json/__init__.py\", line 346, in loads\n    return _default_decoder.decode(s)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/json/decoder.py\", line 337, in decode\n    obj, end = self.raw_decode(s, idx=_w(s, 0).end())\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/json/decoder.py\", line 355, in raw_decode\n    raise JSONDecodeError(\"Expecting value\", s, err.value) from None\njson.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/sem/logic.py\", line 156, in parse\n    raise UnexpectedTokenException(self._currentIndex + 1, self.token(0))\nnltk.sem.logic.UnexpectedTokenException: Unexpected token: 'is'.\n\nThe above exception was the direct cause of the following exception:\n\nTraceback (most recent call last):\n  File \"/data/gpfs/projects/punim0478/bansaab/linc2/eval/tasks/utils.py\", line 216, in evaluate\n    p_list = [read_expr(p) for p in premises]\n  File \"/data/gpfs/projects/punim0478/bansaab/linc2/eval/tasks/utils.py\", line 216, in <listcomp>\n    p_list = [read_expr(p) for p in premises]\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/sem/logic.py\", line 957, in fromstring\n    return cls._logic_parser.parse(s, signature)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/sem/logic.py\", line 159, in parse\n    raise LogicalExpressionException(None, msg) from e\nnltk.sem.logic.LogicalExpressionException: Unexpected token: 'is'.\nDjokovic is famous and is an athlete.\n         ^\n"}
{"timestamp": "2025-09-16T18:42:18.550443", "premises": ["all x. (GrandSlamChampion(x) -> ProfessionalTennisPlayer(x))", "all x. (OscarNominatedActor(x) -> Celebrity(x))", "all x. (ProfessionalTennisPlayer(x) -> Athlete(x))", "all x. (Celebrity(x) -> WellPaid(x))", "all x. (Athlete(x) -> Famous(x))", "all x. (WellPaid(x) -> LivesInTaxHaven(x))", "Djokovic is famous and is an athlete.", "Djokovic is a GrandSlamChampion.", "Djokovic is a ProfessionalTennisPlayer.", "Djokovic is an Athlete.", "Djokovic is a Celebrity.", "Djokovic is WellPaid."], "conclusion": "Djokovic lives in a TaxHaven.", "error_type": "<class 'nltk.sem.logic.LogicalExpressionException'>", "error_message": "Unexpected token: 'lives'.\nDjokovic lives in a TaxHaven.\n         ^", "stack_trace": "Traceback (most recent call last):\n  File \"/data/gpfs/projects/punim0478/bansaab/linc2/eval/tasks/owafoltask.py\", line 577, in _process_neurosymbolic\n    parsed = json.loads(gen)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/json/__init__.py\", line 346, in loads\n    return _default_decoder.decode(s)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/json/decoder.py\", line 337, in decode\n    obj, end = self.raw_decode(s, idx=_w(s, 0).end())\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/json/decoder.py\", line 355, in raw_decode\n    raise JSONDecodeError(\"Expecting value\", s, err.value) from None\njson.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/sem/logic.py\", line 156, in parse\n    raise UnexpectedTokenException(self._currentIndex + 1, self.token(0))\nnltk.sem.logic.UnexpectedTokenException: Unexpected token: 'lives'.\n\nThe above exception was the direct cause of the following exception:\n\nTraceback (most recent call last):\n  File \"/data/gpfs/projects/punim0478/bansaab/linc2/eval/tasks/utils.py\", line 215, in evaluate\n    c = read_expr(conclusion)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/sem/logic.py\", line 957, in fromstring\n    return cls._logic_parser.parse(s, signature)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/sem/logic.py\", line 159, in parse\n    raise LogicalExpressionException(None, msg) from e\nnltk.sem.logic.LogicalExpressionException: Unexpected token: 'lives'.\nDjokovic lives in a TaxHaven.\n         ^\n"}
{"timestamp": "2025-09-16T18:42:18.590879", "premises": ["all x. (Person(x) -> GrandSlamChampion(x) | OscarNominatedActor(x))", "Djokovic is famous and is an athlete, therefore Djokovic lives in a tax haven."], "conclusion": "Djokovic is famous and is an athlete, therefore Djokovic lives in a tax haven.", "error_type": "<class 'nltk.sem.logic.LogicalExpressionException'>", "error_message": "Unexpected token: 'is'.\nDjokovic is famous and is an athlete, therefore Djokovic lives in a tax haven.\n         ^", "stack_trace": "Traceback (most recent call last):\n  File \"/data/gpfs/projects/punim0478/bansaab/linc2/eval/tasks/owafoltask.py\", line 577, in _process_neurosymbolic\n    parsed = json.loads(gen)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/json/__init__.py\", line 346, in loads\n    return _default_decoder.decode(s)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/json/decoder.py\", line 337, in decode\n    obj, end = self.raw_decode(s, idx=_w(s, 0).end())\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/json/decoder.py\", line 355, in raw_decode\n    raise JSONDecodeError(\"Expecting value\", s, err.value) from None\njson.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/sem/logic.py\", line 156, in parse\n    raise UnexpectedTokenException(self._currentIndex + 1, self.token(0))\nnltk.sem.logic.UnexpectedTokenException: Unexpected token: 'is'.\n\nThe above exception was the direct cause of the following exception:\n\nTraceback (most recent call last):\n  File \"/data/gpfs/projects/punim0478/bansaab/linc2/eval/tasks/utils.py\", line 215, in evaluate\n    c = read_expr(conclusion)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/sem/logic.py\", line 957, in fromstring\n    return cls._logic_parser.parse(s, signature)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/sem/logic.py\", line 159, in parse\n    raise LogicalExpressionException(None, msg) from e\nnltk.sem.logic.LogicalExpressionException: Unexpected token: 'is'.\nDjokovic is famous and is an athlete, therefore Djokovic lives in a tax haven.\n         ^\n"}
{"timestamp": "2025-09-16T18:43:08.390624", "premises": ["all x. (GrandSlamChampion(x) -> ProfessionalTennisPlayer(x))", "all x. (OscarNominatedActor(x) -> Celebrity(x))", "all x. (ProfessionalTennisPlayer(x) -> Athlete(x))", "all x. (Celebrity(x) -> WellPaid(x))", "all x. (Athlete(x) -> Famous(x))", "all x. (WellPaid(x) -> LivesInTaxHaven(x))", "Djokovic is famous and is an athlete.", "Famous(Djokovic) & Athlete(Djokovic)", "Djokovic lives in a tax haven."], "conclusion": "LivesInTaxHaven(Djokovic)", "error_type": "<class 'nltk.sem.logic.LogicalExpressionException'>", "error_message": "Unexpected token: 'is'.\nDjokovic is famous and is an athlete.\n         ^", "stack_trace": "Traceback (most recent call last):\n  File \"/data/gpfs/projects/punim0478/bansaab/linc2/eval/tasks/owafoltask.py\", line 577, in _process_neurosymbolic\n    parsed = json.loads(gen)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/json/__init__.py\", line 346, in loads\n    return _default_decoder.decode(s)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/json/decoder.py\", line 337, in decode\n    obj, end = self.raw_decode(s, idx=_w(s, 0).end())\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/json/decoder.py\", line 355, in raw_decode\n    raise JSONDecodeError(\"Expecting value\", s, err.value) from None\njson.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/sem/logic.py\", line 156, in parse\n    raise UnexpectedTokenException(self._currentIndex + 1, self.token(0))\nnltk.sem.logic.UnexpectedTokenException: Unexpected token: 'is'.\n\nThe above exception was the direct cause of the following exception:\n\nTraceback (most recent call last):\n  File \"/data/gpfs/projects/punim0478/bansaab/linc2/eval/tasks/utils.py\", line 216, in evaluate\n    p_list = [read_expr(p) for p in premises]\n  File \"/data/gpfs/projects/punim0478/bansaab/linc2/eval/tasks/utils.py\", line 216, in <listcomp>\n    p_list = [read_expr(p) for p in premises]\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/sem/logic.py\", line 957, in fromstring\n    return cls._logic_parser.parse(s, signature)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/sem/logic.py\", line 159, in parse\n    raise LogicalExpressionException(None, msg) from e\nnltk.sem.logic.LogicalExpressionException: Unexpected token: 'is'.\nDjokovic is famous and is an athlete.\n         ^\n"}
{"timestamp": "2025-09-16T18:43:08.422726", "premises": ["all x. (GrandSlamChampion(x) -> ProfessionalTennisPlayer(x))", "all x. (OscarNominatedActor(x) -> Celebrity(x))", "all x. (ProfessionalTennisPlayer(x) -> Athlete(x))", "all x. (Celebrity(x) -> WellPaid(x))", "all x. (Athlete(x) -> Famous(x))", "all x. (WellPaid(x) -> LiveInTaxHaven(x))", "Djokovic is famous and is an athlete.", "Djokovic is a professional tennis player.", "Djokovic is well-paid.", "Djokovic lives in a tax haven."], "conclusion": "-LiveInTaxHaven(Djokovic)", "error_type": "<class 'nltk.sem.logic.LogicalExpressionException'>", "error_message": "Unexpected token: 'is'.\nDjokovic is famous and is an athlete.\n         ^", "stack_trace": "Traceback (most recent call last):\n  File \"/data/gpfs/projects/punim0478/bansaab/linc2/eval/tasks/owafoltask.py\", line 577, in _process_neurosymbolic\n    parsed = json.loads(gen)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/json/__init__.py\", line 346, in loads\n    return _default_decoder.decode(s)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/json/decoder.py\", line 337, in decode\n    obj, end = self.raw_decode(s, idx=_w(s, 0).end())\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/json/decoder.py\", line 355, in raw_decode\n    raise JSONDecodeError(\"Expecting value\", s, err.value) from None\njson.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/sem/logic.py\", line 156, in parse\n    raise UnexpectedTokenException(self._currentIndex + 1, self.token(0))\nnltk.sem.logic.UnexpectedTokenException: Unexpected token: 'is'.\n\nThe above exception was the direct cause of the following exception:\n\nTraceback (most recent call last):\n  File \"/data/gpfs/projects/punim0478/bansaab/linc2/eval/tasks/utils.py\", line 216, in evaluate\n    p_list = [read_expr(p) for p in premises]\n  File \"/data/gpfs/projects/punim0478/bansaab/linc2/eval/tasks/utils.py\", line 216, in <listcomp>\n    p_list = [read_expr(p) for p in premises]\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/sem/logic.py\", line 957, in fromstring\n    return cls._logic_parser.parse(s, signature)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/sem/logic.py\", line 159, in parse\n    raise LogicalExpressionException(None, msg) from e\nnltk.sem.logic.LogicalExpressionException: Unexpected token: 'is'.\nDjokovic is famous and is an athlete.\n         ^\n"}
{"timestamp": "2025-09-16T18:45:19.564576", "premises": ["DiamondMine is a professional wrestling stable, formed in WWE.", "RoderickStrong leads DiamondMine.", "DiamondMine includes the Creed Brothers, and IvyNile.", "Imperium has a feud with DiamondMine.", "RoderickStrong leads DiamondMine.", "DiamondMine includes the Creed Brothers, and IvyNile.", "Imperium has a feud with DiamondMine."], "conclusion": "RoderickStrong leads DiamondMine.", "error_type": "<class 'nltk.sem.logic.LogicalExpressionException'>", "error_message": "Unexpected token: 'leads'.\nRoderickStrong leads DiamondMine.\n               ^", "stack_trace": "Traceback (most recent call last):\n  File \"/data/gpfs/projects/punim0478/bansaab/linc2/eval/tasks/owafoltask.py\", line 577, in _process_neurosymbolic\n    parsed = json.loads(gen)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/json/__init__.py\", line 346, in loads\n    return _default_decoder.decode(s)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/json/decoder.py\", line 337, in decode\n    obj, end = self.raw_decode(s, idx=_w(s, 0).end())\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/json/decoder.py\", line 355, in raw_decode\n    raise JSONDecodeError(\"Expecting value\", s, err.value) from None\njson.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/sem/logic.py\", line 156, in parse\n    raise UnexpectedTokenException(self._currentIndex + 1, self.token(0))\nnltk.sem.logic.UnexpectedTokenException: Unexpected token: 'leads'.\n\nThe above exception was the direct cause of the following exception:\n\nTraceback (most recent call last):\n  File \"/data/gpfs/projects/punim0478/bansaab/linc2/eval/tasks/utils.py\", line 215, in evaluate\n    c = read_expr(conclusion)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/sem/logic.py\", line 957, in fromstring\n    return cls._logic_parser.parse(s, signature)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/sem/logic.py\", line 159, in parse\n    raise LogicalExpressionException(None, msg) from e\nnltk.sem.logic.LogicalExpressionException: Unexpected token: 'leads'.\nRoderickStrong leads DiamondMine.\n               ^\n"}
{"timestamp": "2025-09-16T18:45:19.583506", "premises": ["all x. (DiamondMine(x) -> ProfessionalWrestlingStable(x))", "all x. (Lead(DiamondMine, x) -> RoderickStrong(x))", "all x. (Include(DiamondMine, x) -> CreedBrothers(x) | IvyNile(x))", "all x. (Feud(Imperium, DiamondMine) -> Imperium(x) & DiamondMine(x))"], "conclusion": "all x. (ProfessionalWrestlingStable(x) & Lead(x, RoderickStrong))", "error_type": "<class 'nltk.inference.prover9.Prover9FatalException'>", "error_message": "(FATAL)\n%%ERROR: The following symbols are used with multiple arities: Imperium/1, Imperium/0, DiamondMine/1, DiamondMine/0, RoderickStrong/1, RoderickStrong/0.\n\n\nFatal error:  The following symbols are used with multiple arities: Imperium/1, Imperium/0, DiamondMine/1, DiamondMine/0, RoderickStrong/1, RoderickStrong/0", "stack_trace": "Traceback (most recent call last):\n  File \"/data/gpfs/projects/punim0478/bansaab/linc2/eval/tasks/owafoltask.py\", line 577, in _process_neurosymbolic\n    parsed = json.loads(gen)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/json/__init__.py\", line 346, in loads\n    return _default_decoder.decode(s)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/json/decoder.py\", line 337, in decode\n    obj, end = self.raw_decode(s, idx=_w(s, 0).end())\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/json/decoder.py\", line 355, in raw_decode\n    raise JSONDecodeError(\"Expecting value\", s, err.value) from None\njson.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"/data/gpfs/projects/punim0478/bansaab/linc2/eval/tasks/utils.py\", line 219, in evaluate\n    truth_value = prover.prove(c, p_list)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/inference/api.py\", line 37, in prove\n    return self._prove(goal, assumptions, verbose)[0]\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/inference/prover9.py\", line 327, in _prove\n    stdout, returncode = self._call_prover9(\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/inference/prover9.py\", line 370, in _call_prover9\n    raise Prover9FatalException(returncode, errormsg)\nnltk.inference.prover9.Prover9FatalException: (FATAL)\n%%ERROR: The following symbols are used with multiple arities: Imperium/1, Imperium/0, DiamondMine/1, DiamondMine/0, RoderickStrong/1, RoderickStrong/0.\n\n\nFatal error:  The following symbols are used with multiple arities: Imperium/1, Imperium/0, DiamondMine/1, DiamondMine/0, RoderickStrong/1, RoderickStrong/0\n"}
{"timestamp": "2025-09-16T18:45:19.586349", "premises": ["DiamondMine is a professional wrestling stable.", "all x. (Leads(x, DiamondMine) -> RoderickStrong(x))", "all x. (IncludedIn(x, DiamondMine) -> CreedBrothers(x) | IvyNile(x))", "all x. (FeudWith(x, Imperium) -> DiamondMine(x))"], "conclusion": "all x. (Leads(x, DiamondMine) -> RoderickStrong(x))", "error_type": "<class 'nltk.sem.logic.LogicalExpressionException'>", "error_message": "Unexpected token: 'is'.\nDiamondMine is a professional wrestling stable.\n            ^", "stack_trace": "Traceback (most recent call last):\n  File \"/data/gpfs/projects/punim0478/bansaab/linc2/eval/tasks/owafoltask.py\", line 577, in _process_neurosymbolic\n    parsed = json.loads(gen)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/json/__init__.py\", line 346, in loads\n    return _default_decoder.decode(s)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/json/decoder.py\", line 337, in decode\n    obj, end = self.raw_decode(s, idx=_w(s, 0).end())\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/json/decoder.py\", line 355, in raw_decode\n    raise JSONDecodeError(\"Expecting value\", s, err.value) from None\njson.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/sem/logic.py\", line 156, in parse\n    raise UnexpectedTokenException(self._currentIndex + 1, self.token(0))\nnltk.sem.logic.UnexpectedTokenException: Unexpected token: 'is'.\n\nThe above exception was the direct cause of the following exception:\n\nTraceback (most recent call last):\n  File \"/data/gpfs/projects/punim0478/bansaab/linc2/eval/tasks/utils.py\", line 216, in evaluate\n    p_list = [read_expr(p) for p in premises]\n  File \"/data/gpfs/projects/punim0478/bansaab/linc2/eval/tasks/utils.py\", line 216, in <listcomp>\n    p_list = [read_expr(p) for p in premises]\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/sem/logic.py\", line 957, in fromstring\n    return cls._logic_parser.parse(s, signature)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/sem/logic.py\", line 159, in parse\n    raise LogicalExpressionException(None, msg) from e\nnltk.sem.logic.LogicalExpressionException: Unexpected token: 'is'.\nDiamondMine is a professional wrestling stable.\n            ^\n"}
{"timestamp": "2025-09-16T18:45:19.583726", "premises": ["all x. (DiamondMine(x) -> ProfessionalWrestlingStable(x))", "all x. (Leads(x, DiamondMine) -> RoderickStrong(x))", "all x. (Includes(x, DiamondMine) -> CreedBrothers(x) | IvyNile(x))"], "conclusion": "all x. (Imperium(x) & FeudsWith(x, DiamondMine))", "error_type": "<class 'nltk.inference.prover9.Prover9FatalException'>", "error_message": "(FATAL)\n%%ERROR: The following symbols are used with multiple arities: DiamondMine/1, DiamondMine/0.\n\n\nFatal error:  The following symbols are used with multiple arities: DiamondMine/1, DiamondMine/0", "stack_trace": "Traceback (most recent call last):\n  File \"/data/gpfs/projects/punim0478/bansaab/linc2/eval/tasks/owafoltask.py\", line 577, in _process_neurosymbolic\n    parsed = json.loads(gen)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/json/__init__.py\", line 346, in loads\n    return _default_decoder.decode(s)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/json/decoder.py\", line 337, in decode\n    obj, end = self.raw_decode(s, idx=_w(s, 0).end())\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/json/decoder.py\", line 355, in raw_decode\n    raise JSONDecodeError(\"Expecting value\", s, err.value) from None\njson.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"/data/gpfs/projects/punim0478/bansaab/linc2/eval/tasks/utils.py\", line 219, in evaluate\n    truth_value = prover.prove(c, p_list)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/inference/api.py\", line 37, in prove\n    return self._prove(goal, assumptions, verbose)[0]\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/inference/prover9.py\", line 327, in _prove\n    stdout, returncode = self._call_prover9(\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/inference/prover9.py\", line 370, in _call_prover9\n    raise Prover9FatalException(returncode, errormsg)\nnltk.inference.prover9.Prover9FatalException: (FATAL)\n%%ERROR: The following symbols are used with multiple arities: DiamondMine/1, DiamondMine/0.\n\n\nFatal error:  The following symbols are used with multiple arities: DiamondMine/1, DiamondMine/0\n"}
{"timestamp": "2025-09-16T18:45:19.583636", "premises": ["all x. (DiamondMine(x) -> ProfessionalWrestlingStable(x))", "all x. (Leads(DiamondMine, RoderickStrong))", "all x. (DiamondMine(x) -> Includes(x, CreedBrothers) & Includes(x, IvyNile))", "all x. (Imperium(x) -> HasFeudWith(x, DiamondMine))"], "conclusion": "all x. (Leads(DiamondMine, RoderickStrong) & ProfessionalWrestlingStable(DiamondMine))", "error_type": "<class 'nltk.inference.prover9.Prover9FatalException'>", "error_message": "(FATAL)\n%%ERROR: The following symbols are used with multiple arities: DiamondMine/1, DiamondMine/0.\n\n\nFatal error:  The following symbols are used with multiple arities: DiamondMine/1, DiamondMine/0", "stack_trace": "Traceback (most recent call last):\n  File \"/data/gpfs/projects/punim0478/bansaab/linc2/eval/tasks/owafoltask.py\", line 577, in _process_neurosymbolic\n    parsed = json.loads(gen)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/json/__init__.py\", line 346, in loads\n    return _default_decoder.decode(s)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/json/decoder.py\", line 337, in decode\n    obj, end = self.raw_decode(s, idx=_w(s, 0).end())\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/json/decoder.py\", line 355, in raw_decode\n    raise JSONDecodeError(\"Expecting value\", s, err.value) from None\njson.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"/data/gpfs/projects/punim0478/bansaab/linc2/eval/tasks/utils.py\", line 219, in evaluate\n    truth_value = prover.prove(c, p_list)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/inference/api.py\", line 37, in prove\n    return self._prove(goal, assumptions, verbose)[0]\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/inference/prover9.py\", line 327, in _prove\n    stdout, returncode = self._call_prover9(\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/inference/prover9.py\", line 370, in _call_prover9\n    raise Prover9FatalException(returncode, errormsg)\nnltk.inference.prover9.Prover9FatalException: (FATAL)\n%%ERROR: The following symbols are used with multiple arities: DiamondMine/1, DiamondMine/0.\n\n\nFatal error:  The following symbols are used with multiple arities: DiamondMine/1, DiamondMine/0\n"}
{"timestamp": "2025-09-16T18:45:19.583836", "premises": ["exists x. (ProfessionalWrestlingStable(x) & Leads(x, RoderickStrong))", "all x. (CanFly(x) -> Bird(x))", "all x. (Can'tFly(x) -> Mammal(x))", "all x. (CanFly(x) -> Bird(x))", "all x. (Can'tFly(x) -> Mammal(x))", "all x. (CanFly(x) -> Bird(x))"], "conclusion": "all x. (Can'tFly(x) -> Mammal(x))", "error_type": "<class 'nltk.inference.prover9.Prover9FatalException'>", "error_message": "(FATAL)\n%%ERROR: A term cannot be constructed from the marked string:\n\n\n    all x (%%START ERROR%%Can'tFly(x) -> Mammal(x)%%END ERROR%%).\n\nFatal error:  sread_term error", "stack_trace": "Traceback (most recent call last):\n  File \"/data/gpfs/projects/punim0478/bansaab/linc2/eval/tasks/owafoltask.py\", line 577, in _process_neurosymbolic\n    parsed = json.loads(gen)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/json/__init__.py\", line 346, in loads\n    return _default_decoder.decode(s)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/json/decoder.py\", line 337, in decode\n    obj, end = self.raw_decode(s, idx=_w(s, 0).end())\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/json/decoder.py\", line 355, in raw_decode\n    raise JSONDecodeError(\"Expecting value\", s, err.value) from None\njson.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"/data/gpfs/projects/punim0478/bansaab/linc2/eval/tasks/utils.py\", line 219, in evaluate\n    truth_value = prover.prove(c, p_list)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/inference/api.py\", line 37, in prove\n    return self._prove(goal, assumptions, verbose)[0]\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/inference/prover9.py\", line 327, in _prove\n    stdout, returncode = self._call_prover9(\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/inference/prover9.py\", line 370, in _call_prover9\n    raise Prover9FatalException(returncode, errormsg)\nnltk.inference.prover9.Prover9FatalException: (FATAL)\n%%ERROR: A term cannot be constructed from the marked string:\n\n\n    all x (%%START ERROR%%Can'tFly(x) -> Mammal(x)%%END ERROR%%).\n\nFatal error:  sread_term error\n"}
{"timestamp": "2025-09-16T18:45:19.603962", "premises": ["all x. (DiamondMine(x) -> ProfessionalWrestlingStable(x))", "all x. (Lead(x, DiamondMine) -> RoderickStrong(x))", "all x. (IncludedIn(x, DiamondMine) -> (CreedBrothers(x) & IvyNile(x)))"], "conclusion": "all x. (HasFeudWith(x, DiamondMine) -> Imperium(x))", "error_type": "<class 'nltk.inference.prover9.Prover9FatalException'>", "error_message": "(FATAL)\n%%ERROR: The following symbols are used with multiple arities: DiamondMine/1, DiamondMine/0.\n\n\nFatal error:  The following symbols are used with multiple arities: DiamondMine/1, DiamondMine/0", "stack_trace": "Traceback (most recent call last):\n  File \"/data/gpfs/projects/punim0478/bansaab/linc2/eval/tasks/owafoltask.py\", line 577, in _process_neurosymbolic\n    parsed = json.loads(gen)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/json/__init__.py\", line 346, in loads\n    return _default_decoder.decode(s)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/json/decoder.py\", line 337, in decode\n    obj, end = self.raw_decode(s, idx=_w(s, 0).end())\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/json/decoder.py\", line 355, in raw_decode\n    raise JSONDecodeError(\"Expecting value\", s, err.value) from None\njson.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"/data/gpfs/projects/punim0478/bansaab/linc2/eval/tasks/utils.py\", line 219, in evaluate\n    truth_value = prover.prove(c, p_list)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/inference/api.py\", line 37, in prove\n    return self._prove(goal, assumptions, verbose)[0]\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/inference/prover9.py\", line 327, in _prove\n    stdout, returncode = self._call_prover9(\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/inference/prover9.py\", line 370, in _call_prover9\n    raise Prover9FatalException(returncode, errormsg)\nnltk.inference.prover9.Prover9FatalException: (FATAL)\n%%ERROR: The following symbols are used with multiple arities: DiamondMine/1, DiamondMine/0.\n\n\nFatal error:  The following symbols are used with multiple arities: DiamondMine/1, DiamondMine/0\n"}
{"timestamp": "2025-09-16T18:45:19.596837", "premises": ["all x. (ProfessionalWrestlingStable(x) -> DiamondMine(x))", "all x. (Leads(x, DiamondMine) -> RoderickStrong(x))", "all x. (CreedBrothers(x) -> DiamondMine(x))", "all x. (IvyNile(x) -> DiamondMine(x))", "all x. all y. (Feud(x, y) -> DiamondMine(x) & DiamondMine(y))", "all x. (ProfessionalWrestlingStable(x) -> DiamondMine(x))", "all x. (Leads(x, DiamondMine) -> RoderickStrong(x))", "all x. (CreedBrothers(x) -> DiamondMine(x))", "all x. (IvyNile(x) -> DiamondMine(x))"], "conclusion": "all x. all y. (Feud(x, y) -> DiamondMine(x) & DiamondMine(y))", "error_type": "<class 'nltk.inference.prover9.Prover9FatalException'>", "error_message": "(FATAL)\n%%ERROR: The following symbols are used with multiple arities: DiamondMine/1, DiamondMine/0.\n\n\nFatal error:  The following symbols are used with multiple arities: DiamondMine/1, DiamondMine/0", "stack_trace": "Traceback (most recent call last):\n  File \"/data/gpfs/projects/punim0478/bansaab/linc2/eval/tasks/owafoltask.py\", line 577, in _process_neurosymbolic\n    parsed = json.loads(gen)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/json/__init__.py\", line 346, in loads\n    return _default_decoder.decode(s)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/json/decoder.py\", line 337, in decode\n    obj, end = self.raw_decode(s, idx=_w(s, 0).end())\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/json/decoder.py\", line 355, in raw_decode\n    raise JSONDecodeError(\"Expecting value\", s, err.value) from None\njson.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"/data/gpfs/projects/punim0478/bansaab/linc2/eval/tasks/utils.py\", line 219, in evaluate\n    truth_value = prover.prove(c, p_list)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/inference/api.py\", line 37, in prove\n    return self._prove(goal, assumptions, verbose)[0]\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/inference/prover9.py\", line 327, in _prove\n    stdout, returncode = self._call_prover9(\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/inference/prover9.py\", line 370, in _call_prover9\n    raise Prover9FatalException(returncode, errormsg)\nnltk.inference.prover9.Prover9FatalException: (FATAL)\n%%ERROR: The following symbols are used with multiple arities: DiamondMine/1, DiamondMine/0.\n\n\nFatal error:  The following symbols are used with multiple arities: DiamondMine/1, DiamondMine/0\n"}
{"timestamp": "2025-09-16T18:45:19.615993", "premises": ["all x. (DiamondMine(x) -> ProfessionalWrestlingStable(x))", "all x. (Leads(x, DiamondMine) -> RoderickStrong(x))", "all x. all y. (Include(x, y) & DiamondMine(y) -> CreedBrothers(x) & IvyNile(x))", "all x. all y. (HasFeud(x, y) & Imperium(x) -> DiamondMine(y))"], "conclusion": "Leads(RoderickStrong, DiamondMine)", "error_type": "<class 'nltk.inference.prover9.Prover9FatalException'>", "error_message": "(FATAL)\n%%ERROR: The following symbols are used with multiple arities: DiamondMine/1, DiamondMine/0, RoderickStrong/1, RoderickStrong/0.\n\n\nFatal error:  The following symbols are used with multiple arities: DiamondMine/1, DiamondMine/0, RoderickStrong/1, RoderickStrong/0", "stack_trace": "Traceback (most recent call last):\n  File \"/data/gpfs/projects/punim0478/bansaab/linc2/eval/tasks/owafoltask.py\", line 577, in _process_neurosymbolic\n    parsed = json.loads(gen)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/json/__init__.py\", line 346, in loads\n    return _default_decoder.decode(s)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/json/decoder.py\", line 337, in decode\n    obj, end = self.raw_decode(s, idx=_w(s, 0).end())\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/json/decoder.py\", line 355, in raw_decode\n    raise JSONDecodeError(\"Expecting value\", s, err.value) from None\njson.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"/data/gpfs/projects/punim0478/bansaab/linc2/eval/tasks/utils.py\", line 219, in evaluate\n    truth_value = prover.prove(c, p_list)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/inference/api.py\", line 37, in prove\n    return self._prove(goal, assumptions, verbose)[0]\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/inference/prover9.py\", line 327, in _prove\n    stdout, returncode = self._call_prover9(\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/inference/prover9.py\", line 370, in _call_prover9\n    raise Prover9FatalException(returncode, errormsg)\nnltk.inference.prover9.Prover9FatalException: (FATAL)\n%%ERROR: The following symbols are used with multiple arities: DiamondMine/1, DiamondMine/0, RoderickStrong/1, RoderickStrong/0.\n\n\nFatal error:  The following symbols are used with multiple arities: DiamondMine/1, DiamondMine/0, RoderickStrong/1, RoderickStrong/0\n"}
{"timestamp": "2025-09-16T18:45:19.615885", "premises": ["exists x. (Leads(x, Diamond Mine) & ProfessionalWrestlingStable(x))", "exists x. (Leads(x, Diamond Mine) & RoderickStrong(x))", "exists x. (IsMemberOf(x, Diamond Mine) & CreedBrothers(x))", "exists x. (IsMemberOf(x, Diamond Mine) & IvyNile(x))", "exists x. (IsEnemyOf(x, Diamond Mine) & Imperium(x))", "exists x. (IsEnemyOf(x, Diamond Mine) & Imperium(x))", "exists x. (IsEnemyOf(x, Diamond Mine) & Imperium(x))", "exists x. (IsEnemyOf(x, Diamond Mine) & Imperium(x))", "exists x. (IsEnemyOf(x, Diamond Mine) & Imperium(x))", "exists x. (IsEnemyOf(x, Diamond Mine) & Imperium(x))", "exists x. (IsEnemyOf(x, Diamond Mine) & Imperium(x))", "exists x. (IsEnemyOf(x, Diamond Mine) & Imperium(x))", "exists x. (IsEnemyOf(x, Diamond Mine) & Imperium(x))", "exists x. (IsEnemyOf(x, Diamond Mine) & Imperium(x))", "exists x. (IsEnemyOf(x, Diamond Mine) & Imperium(x))", "exists x. (IsEnemyOf(x, Diamond Mine) & Imperium(x))", "exists x. (IsEnemyOf(x, Diamond Mine) & Imperium(x))", "exists x. (IsEnemyOf(x, Diamond Mine) & Imperium(x))", "exists x. (IsEnemyOf(x, Diamond Mine) & Imperium(x))", "exists x. (IsEnemyOf(x, Diamond Mine) & Imperium(x))", "exists x. (IsEnemyOf(x, Diamond Mine) & Imperium(x))", "exists x. (IsEnemyOf(x, Diamond Mine) & Imperium(x))", "exists x. (IsEnemyOf(x, Diamond Mine) & Imperium(x))", "exists x. (IsEnemyOf(x, Diamond Mine) & Imperium(x))", "exists x. (IsEnemyOf(x, Diamond Mine) & Imperium(x))", "exists x. (IsEnemyOf(x, Diamond Mine) & Imperium(x))", "exists x. (IsEnemyOf(x, Diamond Mine) & Imperium(x))", "exists x. (IsEnemyOf(x, Diamond Mine) & Imperium(x))", "exists x. (IsEnemyOf(x, Diamond Mine) & Imperium(x))", "exists x. (IsEnemyOf(x, Diamond Mine) & Imperium(x))", "exists x. (IsEnemyOf(x, Diamond Mine) & Imperium(x))", "exists x. (IsEnemyOf(x, Diamond Mine) & Imperium(x))", "exists x. (IsEnemyOf(x, Diamond Mine) & Imperium(x))", "exists x. (IsEnemyOf(x, Diamond Mine) & Imperium(x))", "exists x. (IsEnemyOf(x, Diamond Mine) & Imperium(x))", "exists x. (IsEnemyOf(x, Diamond Mine) & Imperium(x))", "exists x. (IsEnemyOf(x, Diamond Mine) & Imperium(x))", "exists x. (IsEnemyOf(x, Diamond Mine) & Imperium(x))", "exists x. (IsEnemyOf(x, Diamond Mine) & Imperium(x))", "exists x. (IsEnemyOf(x, Diamond Mine) & Imperium(x))", "exists x. (IsEnemyOf(x, Diamond Mine) & Imperium(x))", "exists x. (IsEnemyOf(x, Diamond Mine) & Imperium(x))", "exists x. (IsEnemyOf(x, Diamond Mine) & Imperium(x))", "exists x. (IsEnemyOf(x, Diamond Mine) & Imperium(x))", "exists x. (IsEnemyOf(x, Diamond Mine) & Imperium(x))", "exists x. (IsEnemyOf(x, Diamond Mine) & Imperium(x))", "exists x. (IsEnemyOf(x, Diamond Mine) & Imperium(x))", "exists x. (IsEnemyOf(x, Diamond Mine) & Imperium(x))", "exists x. (IsEnemyOf(x, Diamond Mine) & Imperium(x))", "exists x. (IsEnemyOf(x, Diamond Mine) & Imperium(x))", "exists x. (IsEnemyOf(x, Diamond Mine) & Imperium(x))", "exists x. (IsEnemyOf(x, Diamond Mine) & Imperium(x))", "exists x. (IsEnemyOf(x, Diamond Mine) & Imperium(x))", "exists x. (IsEnemyOf(x, Diamond Mine) & Imperium(x))", "exists x. (IsEnemyOf(x, Diamond Mine) & Imperium(x))", "exists x. (IsEnemyOf(x, Diamond Mine) & Imperium(x))", "exists x. (IsEnemyOf(x, Diamond Mine) & Imperium(x))", "exists x. (IsEnemyOf(x, Diamond Mine) & Imperium(x))", "exists x. (IsEnemyOf(x, Diamond Mine) & Imperium(x))", "exists x. (IsEnemyOf(x, Diamond Mine) & Imperium(x))", "exists x. (IsEnemyOf(x, Diamond Mine) & Imperium(x))", "exists x. (IsEnemyOf(x, Diamond Mine) & Imperium(x))", "exists x. (IsEnemyOf(x, Diamond Mine) & Imperium(x))", "exists x. (IsEnemyOf(x, Diamond Mine) & Imperium(x))", "exists x. (IsEnemyOf(x, Diamond Mine) & Imperium(x))", "exists x. (IsEnemyOf(x, Diamond Mine) & Imperium(x))", "exists x. (IsEnemyOf(x, Diamond Mine) & Imperium(x))", "exists x. (IsEnemyOf(x, Diamond Mine) & Imperium(x))", "exists x. (IsEnemyOf(x, Diamond Mine) & Imperium(x))", "exists x. (IsEnemyOf(x, Diamond Mine) & Imperium(x))", "exists x. (IsEnemyOf(x, Diamond Mine) & Imperium(x))", "exists x. (IsEnemyOf(x, Diamond Mine) & Imperium(x))", "exists x. (IsEnemyOf(x, Diamond Mine) & Imperium(x))", "exists x. (IsEnemyOf(x, Diamond Mine) & Imperium(x))", "exists x. (IsEnemyOf(x, Diamond Mine) & Imperium(x))", "exists x. (IsEnemyOf(x, Diamond Mine) & Imperium(x))", "exists x. (IsEnemyOf(x, Diamond Mine) & Imperium(x))", "exists x. (IsEnemyOf(x, Diamond Mine) & Imperium(x))", "exists x. (IsEnemyOf(x, Diamond Mine) & Imperium(x))", "exists x. (IsEnemyOf(x, Diamond Mine) & Imperium(x))", "exists x. (IsEnemyOf(x, Diamond Mine) & Imperium(x))", "exists x. (IsEnemyOf(x, Diamond Mine) & Imperium(x))", "exists x. (IsEnemyOf(x, Diamond Mine) & Imperium(x))", "exists x. (IsEnemyOf(x, Diamond Mine) & Imperium(x))", "exists x. (IsEnemyOf(x, Diamond Mine) & Imperium(x))", "exists x. (IsEnemyOf(x, Diamond Mine) & Imperium(x))", "exists x. (IsEnemyOf(x, Diamond Mine) & Imperium(x))", "exists x. (IsEnemyOf(x, Diamond Mine) & Imperium(x))", "exists x. (IsEnemyOf(x, Diamond Mine) & Imperium(x))", "exists x. (IsEnemyOf(x, Diamond Mine) & Imperium(x))", "exists x. (IsEnemyOf(x, Diamond Mine) & Imperium(x))", "exists x. (IsEnemyOf(x, Diamond Mine) & Imperium(x))", "exists x. (IsEnemyOf(x, Diamond Mine) & Imperium(x))", "exists x. (IsEnemyOf(x, Diamond Mine) & Imperium(x))", "exists x. (IsEnemyOf(x, Diamond Mine) & Imperium(x))", "exists x. (IsEnemyOf(x, Diamond Mine) & Imperium(x))", "exists x. (IsEnemyOf(x, Diamond Mine) & Imperium(x))", "exists x. (IsEnemyOf(x, Diamond Mine) & Imperium(x))", "exists x. (IsEnemyOf(x, Diamond Mine) & Imperium(x))", "exists x. (IsEnemyOf(x, Diamond Mine) & Imperium(x))", "exists x. (IsEnemyOf(x, Diamond Mine) & Imperium(x))", "exists x. (IsEnemyOf(x, Diamond Mine) & Imperium(x))", "exists x. (IsEnemyOf(x, Diamond Mine) & Imperium(x))", "exists x. (IsEnemyOf(x, Diamond Mine) & Imperium(x))", "exists x. (IsEnemyOf(x, Diamond Mine) & Imperium(x))", "exists x. (IsEnemyOf(x, Diamond Mine) & Imperium(x))", "exists x. (IsEnemyOf(x, Diamond Mine) & Imperium(x))", "exists x. (IsEnemyOf(x, Diamond Mine) & Imperium(x))", "exists x. (IsEnemyOf(x, Diamond Mine) & Imperium(x))", "exists x. (IsEnemyOf(x, Diamond Mine) & Imperium(x))", "exists x. (IsEnemyOf(x, Diamond Mine) & Imperium(x))", "exists x. (IsEnemyOf(x, Diamond Mine) & Imperium(x))", "exists x. (IsEnemyOf(x, Diamond Mine) & Imperium(x))", "exists x. (IsEnemyOf(x, Diamond Mine) & Imperium(x))", "exists x. (IsEnemyOf(x, Diamond Mine) & Imperium(x))", "exists x. (IsEnemyOf(x, Diamond Mine) & Imperium(x))", "exists x. (IsEnemyOf(x, Diamond Mine) & Imperium(x))", "exists x. (IsEnemyOf(x, Diamond Mine) & Imperium(x))", "exists x. (IsEnemyOf(x, Diamond Mine) & Imperium(x))", "exists x. (IsEnemyOf(x, Diamond Mine) & Imperium(x))", "exists x. (IsEnemyOf(x, Diamond Mine) & Imperium(x))", "exists x. (IsEnemyOf(x, Diamond Mine) & Imperium(x))", "exists x. (IsEnemyOf(x, Diamond Mine) & Imperium(x))", "exists x. (IsEnemyOf(x, Diamond Mine) & Imperium(x))", "exists x. (IsEnemyOf(x, Diamond Mine) & Imperium(x))", "exists x. (IsEnemyOf(x, Diamond Mine) & Imperium(x))", "exists x. (IsEnemyOf(x, Diamond Mine) & Imperium(x))", "exists x. (IsEnemyOf(x, Diamond Mine) & Imperium(x))", "exists x. (IsEnemyOf(x, Diamond Mine) & Imperium(x))", "exists x. (IsEnemyOf(x, Diamond Mine) & Imperium(x))", "exists x. (IsEnemyOf(x, Diamond Mine) & Imperium(x))", "exists x. (IsEnemyOf(x, Diamond Mine) & Imperium(x))", "exists x. (IsEnemyOf(x, Diamond Mine) & Imperium(x))", "exists x. (IsEnemyOf(x, Diamond Mine) & Imperium(x))", "exists x. (IsEnemyOf(x, Diamond Mine) & Imperium(x))", "exists x. (IsEnemyOf(x, Diamond Mine) & Imperium(x))", "exists x. (IsEnemyOf(x, Diamond Mine) & Imperium(x))", "exists x. (IsEnemyOf(x, Diamond Mine) & Imperium(x))", "exists x. (IsEnemyOf(x, Diamond Mine) & Imperium(x))", "exists x. (IsEnemyOf(x, Diamond Mine) & Imperium(x))", "exists x. (IsEnemyOf(x, Diamond Mine) & Imperium(x))", "exists x. (IsEnemyOf(x, Diamond Mine) & Imperium(x))", "exists x. (IsEnemyOf(x, Diamond Mine) & Imperium(x))", "exists x. (IsEnemyOf(x, Diamond Mine) & Imperium(x))", "exists x. (IsEnemyOf(x, Diamond Mine) & Imperium(x))", "exists x. (IsEnemyOf(x, Diamond Mine) & Imperium(x))", "exists x. (IsEnemyOf(x, Diamond Mine) & Imperium(x))", "exists x. (IsEnemyOf(x, Diamond Mine) & Imperium(x))", "exists x. (IsEnemyOf(x, Diamond Mine) & Imperium(x))", "exists x. (IsEnemyOf(x, Diamond Mine) & Imperium(x))", "exists x. (IsEnemyOf(x, Diamond Mine) & Imperium(x))", "exists x. (IsEnemyOf(x, Diamond Mine) & Imperium(x))", "exists x. (IsEnemyOf(x, Diamond Mine) & Imperium(x))", "exists x. (IsEnemyOf(x, Diamond Mine) & Imperium(x))", "exists x. (IsEnemyOf(x, Diamond Mine) & Imperium(x))", "exists x. (IsEnemyOf(x, Diamond Mine) & Imperium(x))", "exists x. (IsEnemyOf(x, Diamond Mine) & Imperium(x))", "exists x. (IsEnemyOf(x, Diamond Mine) & Imperium(x))", "exists x. (IsEnemyOf(x, Diamond Mine) & Imperium(x))", "exists x. (IsEnemyOf(x, Diamond Mine) & Imperium(x))", "exists x. (IsEnemyOf(x, Diamond Mine) & Imperium(x))", "exists x. (IsEnemyOf(x, Diamond Mine) & Imperium(x))", "exists x. (IsEnemyOf(x, Diamond Mine) & Imperium(x))", "exists x. (IsEnemyOf(x, Diamond Mine) & Imperium(x))", "exists x. (IsEnemyOf(x, Diamond Mine) & Imperium(x))", "exists x. (IsEnemyOf(x, Diamond Mine) & Imperium(x))", "exists x. (IsEnemyOf(x, Diamond Mine) & Imperium(x))", "exists x. (IsEnemyOf(x, Diamond Mine) & Imperium(x))", "exists x. (IsEnemyOf(x, Diamond Mine) & Imperium(x))", "exists x. (IsEnemyOf(x, Diamond Mine) & Imperium(x))", "exists x. (IsEnemyOf(x, Diamond Mine) & Imperium(x))", "exists x. (IsEnemyOf(x, Diamond Mine) & Imperium(x))", "exists x. (IsEnemyOf(x, Diamond Mine) & Imperium(x))", "exists x. (IsEnemyOf(x, Diamond Mine) & Imperium(x))", "exists x. (IsEnemyOf(x, Diamond Mine) & Imperium(x))", "exists x. (IsEnemyOf(x, Diamond Mine) & Imperium(x))", "exists x. (IsEnemyOf(x, Diamond Mine) & Imperium(x))", "exists x. (IsEnemyOf(x, Diamond Mine) & Imperium(x))", "exists x. (IsEnemyOf(x, Diamond Mine) & Imperium(x))", "exists x. (IsEnemyOf(x, Diamond Mine) & Imperium(x))", "exists x. (IsEnemyOf(x, Diamond Mine) & Imperium(x))", "exists x. (IsEnemyOf(x, Diamond Mine) & Imperium(x))", "exists x. (IsEnemyOf(x, Diamond Mine) & Imperium(x))", "exists x. (IsEnemyOf(x, Diamond Mine) & Imperium(x))", "exists x. (IsEnemyOf(x, Diamond Mine) & Imperium(x))", "exists x. (IsEnemyOf(x, Diamond Mine) & Imperium(x))", "exists x. (IsEnemyOf(x, Diamond Mine) & Imperium(x))", "exists x. (IsEnemyOf(x, Diamond Mine) & Imperium(x))", "exists x. (IsEnemyOf(x, Diamond Mine) & Imperium(x))", "exists x. (IsEnemyOf(x, Diamond Mine) & Imperium(x))", "exists x. (IsEnemyOf(x, Diamond Mine) & Imperium(x))", "exists x. (IsEnemyOf(x, Diamond Mine) & Imperium(x))", "exists x. (IsEnemyOf(x, Diamond Mine) & Imperium(x))", "exists x. (IsEnemyOf(x, Diamond Mine) & Imperium(x))", "exists x. (IsEnemyOf(x, Diamond Mine) & Imperium(x))", "exists x. (IsEnemyOf(x, Diamond Mine) & Imperium(x))", "exists x. (IsEnemyOf(x, Diamond Mine) & Imperium(x))", "exists x. (IsEnemyOf(x, Diamond Mine) & Imperium(x))", "exists x. (IsEnemyOf(x, Diamond Mine) & Imperium(x))", "exists x. (IsEnemyOf(x, Diamond Mine) & Imperium(x))", "exists x. (IsEnemyOf(x, Diamond Mine) & Imperium(x))", "exists x. (IsEnemyOf(x, Diamond Mine) & Imperium(x))", "exists x. (IsEnemyOf(x, Diamond Mine) & Imperium(x))", "exists x. (IsEnemyOf(x, Diamond Mine) & Imperium(x))", "exists x. (IsEnemyOf(x, Diamond Mine) & Imperium(x))", "exists x. (IsEnemyOf(x, Diamond Mine) & Imperium(x))", "exists x. (IsEnemyOf(x, Diamond Mine) & Imperium(x))", "exists x. (IsEnemyOf(x, Diamond Mine) & Imperium(x))", "exists x. (IsEnemyOf(x, Diamond Mine) & Imperium(x))", "exists x. (IsEnemyOf(x, Diamond Mine) & Imperium(x))", "exists x. (IsEnemyOf(x, Diamond Mine) & Imperium(x))", "exists x. (IsEnemyOf(x, Diamond Mine) & Imperium(x))", "exists x. (IsEnemyOf(x, Diamond Mine) & Imperium(x))", "exists x. (IsEnemyOf(x, Diamond Mine) & Imperium(x))", "exists x. (IsEnemyOf(x, Diamond Mine) & Imperium(x))", "exists x. (IsEnemyOf(x, Diamond Mine) & Imperium(x))", "exists x. (IsEnemyOf(x, Diamond Mine) & Imperium(x))", "exists x. (IsEnemyOf(x, Diamond Mine) & Imperium(x))", "exists x. (IsEnemyOf(x, Diamond Mine) & Imperium(x))", "exists x. (IsEnemyOf(x, Diamond Mine) & Imperium(x))", "exists x. (IsEnemyOf(x, Diamond Mine) & Imperium(x))", "exists x. (IsEnemyOf(x, Diamond Mine) & Imperium(x))", "exists x. (IsEnemyOf(x, Diamond Mine) & Imperium(x))", "exists x. (IsEnemyOf(x, Diamond Mine) & Imperium(x))", "exists x. (IsEnemyOf(x, Diamond Mine) & Imperium(x))", "exists x. (IsEnemyOf(x, Diamond Mine) & Imperium(x))", "exists x. (IsEnemyOf(x, Diamond Mine) & Imperium(x))", "exists x. (IsEnemyOf(x, Diamond Mine) & Imperium(x))", "exists x. (IsEnemyOf(x, Diamond Mine) & Imperium(x))", "exists x. (IsEnemyOf(x, Diamond Mine) & Imperium(x))", "exists x. (IsEnemyOf(x, Diamond Mine) & Imperium(x))", "exists x. (IsEnemyOf(x, Diamond Mine) & Imperium(x))", "exists x. (IsEnemyOf(x, Diamond Mine) & Imperium(x))", "exists x. (IsEnemyOf(x, Diamond Mine) & Imperium(x))", "exists x. (IsEnemyOf(x, Diamond Mine) & Imperium(x))", "exists x. (IsEnemyOf(x, Diamond Mine) & Imperium(x))", "exists x. (IsEnemyOf(x, Diamond Mine) & Imperium(x))", "exists x. (IsEnemyOf(x, Diamond Mine) & Imperium(x))", "exists x. (IsEnemyOf(x, Diamond Mine) & Imperium(x))", "exists x. (IsEnemyOf(x, Diamond Mine) & Imperium(x))", "exists x. (IsEnemyOf(x, Diamond Mine) & Imperium(x))", "exists x. (IsEnemyOf(x, Diamond Mine) & Imperium(x))", "exists x. (IsEnemyOf(x, Diamond Mine) & Imperium(x))", "exists x. (IsEnemyOf(x, Diamond Mine) & Imperium(x))", "exists x. (IsEnemyOf(x, Diamond Mine) & Imperium(x))", "exists x. x.(IsEnemyOf(x, Diamond Mine) & Imperium(x))", "exists x. (IsEnemyOf(x, Diamond Mine) & Imperium(x))", "exists x. (IsEnemyOf(x, Diamond Mine) & Imperium(x))", "exists x. (IsEnemyOf(x, Diamond Mine) & Imperium(x))", "exists x. (IsEnemyOf(x, Diamond Mine) & Imperium(x))", "exists x. (IsEnemyOf(x, Diamond Mine) & Imperium(x))", "exists x. (IsEnemyOf(x, Diamond Mine) & Imperium(x))", "exists x. (IsEnemyOf(x, Diamond Mine) & Imperium(x))", "exists x. (IsEnemyOf(x, Diamond Mine) & Imperium(x))", "exists x. (IsEnemyOf(x, Diamond Mine) & Imperium(x))", "exists x. (IsEnemyOf(x, Diamond Mine) & Imperium(x))", "exists x. (IsEnemyOf(x, Diamond Mine) & Imperium(x))", "exists x. (IsEnemyOf(x, Diamond Mine) & Imperium(x))", "exists x. (IsEnemyOf(x, Diamond Mine) & Imperium(x))", "exists x. (IsEnemyOf(x, Diamond Mine) & Imperium(x))", "exists x. (IsEnemyOf(x, Diamond Mine) & Imperium(x))", "exists x. (IsEnemyOf(x, Diamond Mine) & Imperium(x))", "exists x. (IsEnemyOf(x, Diamond Mine) & Imperium(x))", "exists x. (IsEnemyOf(x, Diamond Mine) & Imperium(x))", "exists x. (IsEnemyOf(x, Diamond Mine) & Imperium(x))", "exists x. (IsEnemyOf(x, Diamond Mine) & Imperium(x))", "exists x. (IsEnemyOf(x, Diamond Mine) & Imperium(x))", "exists x. (IsEnemyOf(x, Diamond Mine) & Imperium(x))", "exists x. (IsEnemyOf(x, Diamond Mine) & Imperium(x))", "exists x. (IsEnemyOf(x, Diamond Mine) & Imperium(x))", "exists x. (IsEnemyOf(x, Diamond Mine) & Imperium(x))", "exists x. (IsEnemyOf(x, Diamond Mine) & Imperium(x))", "exists x. (IsEnemyOf(x, Diamond Mine) & Imperium(x))", "exists x. (IsEnemyOf(x, Diamond Mine) & Imperium(x))", "exists x. (IsEnemyOf(x, Diamond Mine) & Imperium(x))", "exists x. (IsEnemyOf(x, Diamond Mine) & Imperium(x))", "exists x. (IsEnemyOf(x, Diamond Mine) & Imperium(x))", "exists x. (IsEnemyOf(x, Diamond Mine) & Imperium(x))", "exists x. (IsEnemyOf(x, Diamond Mine) & Imperium(x))", "exists x. (IsEnemyOf(x, Diamond Mine) & Imperium(x))", "exists x. (IsEnemyOf(x, Diamond Mine) & Imperium(x))", "exists x. (IsEnemyOf(x, Diamond Mine) & Imperium(x))", "exists x. (IsEnemyOf(x, Diamond Mine) & Imperium(x))", "exists x. (IsEnemyOf(x, Diamond Mine) & Imperium(x))", "exists x. (IsEnemyOf(x, Diamond Mine) & Imperium(x))", "exists x. (IsEnemyOf(x, Diamond Mine) & Imperium(x))", "exists x. (IsEnemyOf(x, Diamond Mine) & Imperium(x))", "exists x. (IsEnemyOf(x, Diamond Mine) & Imperium(x))", "exists x. (IsEnemyOf(x, Diamond Mine) & Imperium(x))", "exists x. (IsEnemyOf(x, Diamond Mine) & Imperium(x))", "exists x. (IsEnemyOf(x, Diamond Mine) & Imperium(x))", "exists x. (IsEnemyOf(x, Diamond Mine) & Imperium(x))", "exists x. (IsEnemyOf(x, Diamond Mine) & Imperium(x))", "exists x. (IsEnemyOf(x, Diamond Mine) & Imperium(x))", "exists x. (IsEnemyOf(x, Diamond Mine) & Imperium(x))", "exists x. (IsEnemyOf(x, Diamond Mine) & Imperium(x))", "exists x. (IsEnemyOf(x, Diamond Mine) & Imperium(x))", "exists x. (IsEnemyOf(x, Diamond Mine) & Imperium(x))", "exists x. (IsEnemyOf(x, Diamond Mine) & Imperium(x))", "exists x. (IsEnemyOf(x, Diamond Mine) & Imperium(x))", "exists x. (IsEnemyOf(x, Diamond Mine) & Imperium(x))", "exists x. (IsEnemyOf(x, Diamond Mine) & Imperium(x))", "exists x. (IsEnemyOf(x, Diamond Mine) & Imperium(x))", "exists x. (IsEnemyOf(x, Diamond Mine) & Imperium(x))", "exists x. (IsEnemyOf(x, Diamond Mine) & Imperium(x))", "exists x. (IsEnemyOf(x, Diamond Mine) & Imperium(x))", "exists x. (IsEnemyOf(x, Diamond Mine) & Imperium(x))", "exists x. (IsEnemyOf(x, Diamond Mine) & Imperium(x))", "exists x. (IsEnemyOf(x, Diamond Mine) & Imperium(x))", "exists x. (IsEnemyOf(x, Diamond Mine) & Imperium(x))", "exists x. (IsEnemyOf(x, Diamond Mine) & Imperium(x))", "exists x. (IsEnemyOf(x, Diamond Mine) & Imperium(x))", "exists x. (IsEnemyOf(x, Diamond Mine) & Imperium(x))", "exists x. (IsEnemyOf(x, Diamond Mine) & Imperium(x))", "exists x. (IsEnemyOf(x, Diamond Mine) & Imperium(x))", "exists x. (IsEnemyOf(x, Diamond Mine) & Imperium(x))", "exists x. (IsEnemyOf(x, Diamond Mine) & Imperium(x))", "exists x. (IsEnemyOf(x, Diamond Mine) & Imperium(x))", "exists x. (IsEnemyOf(x, Diamond Mine) & Imperium(x))", "exists x. (IsEnemyOf(x, Diamond Mine) & Imperium(x))", "exists x. (IsEnemyOf(x, Diamond Mine) & Imperium(x))", "exists x. (IsEnemyOf(x, Diamond Mine) & Imperium(x))", "exists x. (IsEnemyOf(x, Diamond Mine) & Imperium(x))", "exists x. (IsEnemyOf(x, Diamond Mine) & Imperium(x))", "exists x. (IsEnemyOf(x, Diamond Mine) & Imperium(x))", "exists x. (IsEnemyOf(x, Diamond Mine) & Imperium(x))", "exists x. (IsEnemyOf(x, Diamond Mine) & Imperium(x))", "exists x. (IsEnemyOf(x, Diamond Mine) & Imperium(x))", "exists x. (IsEnemyOf(x, Diamond Mine) & Imperium(x))", "exists x. (IsEnemyOf(x, Diamond Mine) & Imperium(x))", "exists x. (IsEnemyOf(x, Diamond Mine) & Imperium(x))", "exists x. (IsEnemyOf(x, Diamond Mine) & Imperium(x))", "exists x. (IsEnemyOf(x, Diamond Mine) & Imperium(x))", "exists x. (IsEnemyOf(x, Diamond Mine) & Imperium(x))", "exists x. (IsEnemyOf(x, Diamond Mine) & Imperium(x))", "exists x. (IsEnemyOf(x, Diamond Mine) & Imperium(x))", "exists x. (IsEnemyOf(x, Diamond Mine) & Imperium(x))", "exists x. (IsEnemyOf(x, Diamond Mine) & Imperium(x))", "exists x. (IsEnemyOf(x, Diamond Mine) & Imperium(x))", "exists x. (IsEnemyOf(x, Diamond Mine) & Imperium(x))"], "conclusion": "exists x. (IsEnemyOf(x, Diamond Mine) & Imperium(x))", "error_type": "<class 'nltk.sem.logic.LogicalExpressionException'>", "error_message": "Unexpected token: 'Mine'.  Expected token ')'.\nexists x. (IsEnemyOf(x, Diamond Mine) & Imperium(x))\n                                ^", "stack_trace": "Traceback (most recent call last):\n  File \"/data/gpfs/projects/punim0478/bansaab/linc2/eval/tasks/owafoltask.py\", line 577, in _process_neurosymbolic\n    parsed = json.loads(gen)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/json/__init__.py\", line 346, in loads\n    return _default_decoder.decode(s)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/json/decoder.py\", line 337, in decode\n    obj, end = self.raw_decode(s, idx=_w(s, 0).end())\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/json/decoder.py\", line 355, in raw_decode\n    raise JSONDecodeError(\"Expecting value\", s, err.value) from None\njson.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/sem/logic.py\", line 154, in parse\n    result = self.process_next_expression(None)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/sem/logic.py\", line 290, in process_next_expression\n    accum = self.handle(tok, context)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/sem/logic.py\", line 312, in handle\n    return self.handle_quant(tok, context)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/sem/logic.py\", line 427, in handle_quant\n    accum = self.process_next_expression(tok)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/sem/logic.py\", line 290, in process_next_expression\n    accum = self.handle(tok, context)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/sem/logic.py\", line 315, in handle\n    return self.handle_open(tok, context)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/sem/logic.py\", line 449, in handle_open\n    accum = self.process_next_expression(None)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/sem/logic.py\", line 290, in process_next_expression\n    accum = self.handle(tok, context)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/sem/logic.py\", line 303, in handle\n    return self.handle_variable(tok, context)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/sem/logic.py\", line 359, in handle_variable\n    self.assertNextToken(Tokens.CLOSE)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/sem/logic.py\", line 573, in assertNextToken\n    raise UnexpectedTokenException(self._currentIndex, tok, expected)\nnltk.sem.logic.UnexpectedTokenException: Unexpected token: 'Mine'.  Expected token ')'.\n\nThe above exception was the direct cause of the following exception:\n\nTraceback (most recent call last):\n  File \"/data/gpfs/projects/punim0478/bansaab/linc2/eval/tasks/utils.py\", line 215, in evaluate\n    c = read_expr(conclusion)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/sem/logic.py\", line 957, in fromstring\n    return cls._logic_parser.parse(s, signature)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/sem/logic.py\", line 159, in parse\n    raise LogicalExpressionException(None, msg) from e\nnltk.sem.logic.LogicalExpressionException: Unexpected token: 'Mine'.  Expected token ')'.\nexists x. (IsEnemyOf(x, Diamond Mine) & Imperium(x))\n                                ^\n"}
{"timestamp": "2025-09-16T18:46:24.277579", "premises": ["all x. (DiamondMine(x) -> ProfessionalWrestlingStable(x))", "all x. (Leads(DiamondMine, RoderickStrong) -> RoderickStrong(x))", "all x. (DiamondMine(x) -> (CreedBrothers(x) & IvyNile(x)))", "all x. (Imperium has feud with DiamondMine)"], "conclusion": "all x. (Leads(DiamondMine, RoderickStrong) -> RoderickStrong(x) & CreedBrothers(x))", "error_type": "<class 'nltk.sem.logic.LogicalExpressionException'>", "error_message": "Unexpected token: 'has'.  Expected token ')'.\nall x. (Imperium has feud with DiamondMine)\n                 ^", "stack_trace": "Traceback (most recent call last):\n  File \"/data/gpfs/projects/punim0478/bansaab/linc2/eval/tasks/owafoltask.py\", line 577, in _process_neurosymbolic\n    parsed = json.loads(gen)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/json/__init__.py\", line 346, in loads\n    return _default_decoder.decode(s)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/json/decoder.py\", line 337, in decode\n    obj, end = self.raw_decode(s, idx=_w(s, 0).end())\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/json/decoder.py\", line 355, in raw_decode\n    raise JSONDecodeError(\"Expecting value\", s, err.value) from None\njson.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/sem/logic.py\", line 154, in parse\n    result = self.process_next_expression(None)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/sem/logic.py\", line 290, in process_next_expression\n    accum = self.handle(tok, context)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/sem/logic.py\", line 312, in handle\n    return self.handle_quant(tok, context)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/sem/logic.py\", line 427, in handle_quant\n    accum = self.process_next_expression(tok)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/sem/logic.py\", line 290, in process_next_expression\n    accum = self.handle(tok, context)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/sem/logic.py\", line 315, in handle\n    return self.handle_open(tok, context)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/sem/logic.py\", line 450, in handle_open\n    self.assertNextToken(Tokens.CLOSE)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/sem/logic.py\", line 573, in assertNextToken\n    raise UnexpectedTokenException(self._currentIndex, tok, expected)\nnltk.sem.logic.UnexpectedTokenException: Unexpected token: 'has'.  Expected token ')'.\n\nThe above exception was the direct cause of the following exception:\n\nTraceback (most recent call last):\n  File \"/data/gpfs/projects/punim0478/bansaab/linc2/eval/tasks/utils.py\", line 216, in evaluate\n    p_list = [read_expr(p) for p in premises]\n  File \"/data/gpfs/projects/punim0478/bansaab/linc2/eval/tasks/utils.py\", line 216, in <listcomp>\n    p_list = [read_expr(p) for p in premises]\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/sem/logic.py\", line 957, in fromstring\n    return cls._logic_parser.parse(s, signature)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/sem/logic.py\", line 159, in parse\n    raise LogicalExpressionException(None, msg) from e\nnltk.sem.logic.LogicalExpressionException: Unexpected token: 'has'.  Expected token ')'.\nall x. (Imperium has feud with DiamondMine)\n                 ^\n"}
{"timestamp": "2025-09-16T18:46:24.290254", "premises": ["all x. (DiamondMine(x) -> WrestlingStable(x) & FormedIn(x, WWE))", "all x. (Leads(RoderickStrong, DiamondMine) -> DiamondMine(x))", "all x. all y. (IncludedIn(x, DiamondMine) & CreedBrothers(y) -> IvyNile(y))", "all x. all y. (FeudsWith(x, y) & DiamondMine(y))"], "conclusion": "all x. (Leads(RoderickStrong, DiamondMine) & CreedBrothers(x))", "error_type": "<class 'nltk.inference.prover9.Prover9FatalException'>", "error_message": "(FATAL)\n%%ERROR: The following symbols are used with multiple arities: DiamondMine/1, DiamondMine/0.\n\n\nFatal error:  The following symbols are used with multiple arities: DiamondMine/1, DiamondMine/0", "stack_trace": "Traceback (most recent call last):\n  File \"/data/gpfs/projects/punim0478/bansaab/linc2/eval/tasks/owafoltask.py\", line 577, in _process_neurosymbolic\n    parsed = json.loads(gen)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/json/__init__.py\", line 346, in loads\n    return _default_decoder.decode(s)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/json/decoder.py\", line 337, in decode\n    obj, end = self.raw_decode(s, idx=_w(s, 0).end())\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/json/decoder.py\", line 355, in raw_decode\n    raise JSONDecodeError(\"Expecting value\", s, err.value) from None\njson.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"/data/gpfs/projects/punim0478/bansaab/linc2/eval/tasks/utils.py\", line 219, in evaluate\n    truth_value = prover.prove(c, p_list)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/inference/api.py\", line 37, in prove\n    return self._prove(goal, assumptions, verbose)[0]\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/inference/prover9.py\", line 327, in _prove\n    stdout, returncode = self._call_prover9(\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/inference/prover9.py\", line 370, in _call_prover9\n    raise Prover9FatalException(returncode, errormsg)\nnltk.inference.prover9.Prover9FatalException: (FATAL)\n%%ERROR: The following symbols are used with multiple arities: DiamondMine/1, DiamondMine/0.\n\n\nFatal error:  The following symbols are used with multiple arities: DiamondMine/1, DiamondMine/0\n"}
{"timestamp": "2025-09-16T18:46:24.295540", "premises": ["DiamondMine is a professional wrestling stable, formed in WWE.", "RoderickStrong leads DiamondMine.", "DiamondMine includes CreedBrothers & IvyNile.", "Imperium has a feud with DiamondMine."], "conclusion": "RoderickStrong leads CreedBrothers.", "error_type": "<class 'nltk.sem.logic.LogicalExpressionException'>", "error_message": "Unexpected token: 'leads'.\nRoderickStrong leads CreedBrothers.\n               ^", "stack_trace": "Traceback (most recent call last):\n  File \"/data/gpfs/projects/punim0478/bansaab/linc2/eval/tasks/owafoltask.py\", line 577, in _process_neurosymbolic\n    parsed = json.loads(gen)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/json/__init__.py\", line 346, in loads\n    return _default_decoder.decode(s)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/json/decoder.py\", line 337, in decode\n    obj, end = self.raw_decode(s, idx=_w(s, 0).end())\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/json/decoder.py\", line 355, in raw_decode\n    raise JSONDecodeError(\"Expecting value\", s, err.value) from None\njson.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/sem/logic.py\", line 156, in parse\n    raise UnexpectedTokenException(self._currentIndex + 1, self.token(0))\nnltk.sem.logic.UnexpectedTokenException: Unexpected token: 'leads'.\n\nThe above exception was the direct cause of the following exception:\n\nTraceback (most recent call last):\n  File \"/data/gpfs/projects/punim0478/bansaab/linc2/eval/tasks/utils.py\", line 215, in evaluate\n    c = read_expr(conclusion)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/sem/logic.py\", line 957, in fromstring\n    return cls._logic_parser.parse(s, signature)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/sem/logic.py\", line 159, in parse\n    raise LogicalExpressionException(None, msg) from e\nnltk.sem.logic.LogicalExpressionException: Unexpected token: 'leads'.\nRoderickStrong leads CreedBrothers.\n               ^\n"}
{"timestamp": "2025-09-16T18:46:24.288544", "premises": ["diamondMine(x) -> professionalWrestlingStable(x)", "all x. (leads(x, DiamondMine) -> RoderickStrong(x))", "diamondMine(x) -> includes(x, CreedBrothers) & diamondMine(x) -> includes(x, IvyNile)", "imperium(x) -> hasFeud(x, diamondMine)"], "conclusion": "leads(RoderickStrong, CreedBrothers)", "error_type": "<class 'nltk.inference.prover9.Prover9FatalException'>", "error_message": "(FATAL)\n%%ERROR: The following symbols are used with multiple arities: diamondMine/1, diamondMine/0, RoderickStrong/1, RoderickStrong/0.\n\n\nFatal error:  The following symbols are used with multiple arities: diamondMine/1, diamondMine/0, RoderickStrong/1, RoderickStrong/0", "stack_trace": "Traceback (most recent call last):\n  File \"/data/gpfs/projects/punim0478/bansaab/linc2/eval/tasks/owafoltask.py\", line 577, in _process_neurosymbolic\n    parsed = json.loads(gen)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/json/__init__.py\", line 346, in loads\n    return _default_decoder.decode(s)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/json/decoder.py\", line 337, in decode\n    obj, end = self.raw_decode(s, idx=_w(s, 0).end())\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/json/decoder.py\", line 355, in raw_decode\n    raise JSONDecodeError(\"Expecting value\", s, err.value) from None\njson.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"/data/gpfs/projects/punim0478/bansaab/linc2/eval/tasks/utils.py\", line 219, in evaluate\n    truth_value = prover.prove(c, p_list)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/inference/api.py\", line 37, in prove\n    return self._prove(goal, assumptions, verbose)[0]\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/inference/prover9.py\", line 327, in _prove\n    stdout, returncode = self._call_prover9(\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/inference/prover9.py\", line 370, in _call_prover9\n    raise Prover9FatalException(returncode, errormsg)\nnltk.inference.prover9.Prover9FatalException: (FATAL)\n%%ERROR: The following symbols are used with multiple arities: diamondMine/1, diamondMine/0, RoderickStrong/1, RoderickStrong/0.\n\n\nFatal error:  The following symbols are used with multiple arities: diamondMine/1, diamondMine/0, RoderickStrong/1, RoderickStrong/0\n"}
{"timestamp": "2025-09-16T18:46:24.299204", "premises": ["DiamondMine is a wrestlingStable.", "RoderickStrong leads DiamondMine.", "DiamondMine includes CreedBrothers & IvyNile.", "Imperium hasFeud(DiamondMine)."], "conclusion": "RoderickStrong leads CreedBrothers.", "error_type": "<class 'nltk.sem.logic.LogicalExpressionException'>", "error_message": "Unexpected token: 'leads'.\nRoderickStrong leads CreedBrothers.\n               ^", "stack_trace": "Traceback (most recent call last):\n  File \"/data/gpfs/projects/punim0478/bansaab/linc2/eval/tasks/owafoltask.py\", line 577, in _process_neurosymbolic\n    parsed = json.loads(gen)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/json/__init__.py\", line 346, in loads\n    return _default_decoder.decode(s)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/json/decoder.py\", line 337, in decode\n    obj, end = self.raw_decode(s, idx=_w(s, 0).end())\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/json/decoder.py\", line 355, in raw_decode\n    raise JSONDecodeError(\"Expecting value\", s, err.value) from None\njson.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/sem/logic.py\", line 156, in parse\n    raise UnexpectedTokenException(self._currentIndex + 1, self.token(0))\nnltk.sem.logic.UnexpectedTokenException: Unexpected token: 'leads'.\n\nThe above exception was the direct cause of the following exception:\n\nTraceback (most recent call last):\n  File \"/data/gpfs/projects/punim0478/bansaab/linc2/eval/tasks/utils.py\", line 215, in evaluate\n    c = read_expr(conclusion)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/sem/logic.py\", line 957, in fromstring\n    return cls._logic_parser.parse(s, signature)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/sem/logic.py\", line 159, in parse\n    raise LogicalExpressionException(None, msg) from e\nnltk.sem.logic.LogicalExpressionException: Unexpected token: 'leads'.\nRoderickStrong leads CreedBrothers.\n               ^\n"}
{"timestamp": "2025-09-16T18:46:24.299502", "premises": ["diamondMine(x) -> Stable(x)", "diamondMine(x) -> Leads(x, RoderickStrong)", "diamondMine(x) -> Includes(x, CreedBrothers) & Includes(x, IvyNile)", "imperium(x) -> FeudsWith(x, diamondMine)"], "conclusion": "diamondMine(x) -> Leads(x, RoderickStrong) & diamondMine(x) -> Includes(x, CreedBrothers) -> Leads(x, CreedBrothers)", "error_type": "<class 'nltk.inference.prover9.Prover9FatalException'>", "error_message": "(FATAL)\n%%ERROR: The following symbols are used with multiple arities: diamondMine/1, diamondMine/0.\n\n\nFatal error:  The following symbols are used with multiple arities: diamondMine/1, diamondMine/0", "stack_trace": "Traceback (most recent call last):\n  File \"/data/gpfs/projects/punim0478/bansaab/linc2/eval/tasks/owafoltask.py\", line 577, in _process_neurosymbolic\n    parsed = json.loads(gen)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/json/__init__.py\", line 346, in loads\n    return _default_decoder.decode(s)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/json/decoder.py\", line 337, in decode\n    obj, end = self.raw_decode(s, idx=_w(s, 0).end())\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/json/decoder.py\", line 355, in raw_decode\n    raise JSONDecodeError(\"Expecting value\", s, err.value) from None\njson.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"/data/gpfs/projects/punim0478/bansaab/linc2/eval/tasks/utils.py\", line 219, in evaluate\n    truth_value = prover.prove(c, p_list)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/inference/api.py\", line 37, in prove\n    return self._prove(goal, assumptions, verbose)[0]\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/inference/prover9.py\", line 327, in _prove\n    stdout, returncode = self._call_prover9(\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/inference/prover9.py\", line 370, in _call_prover9\n    raise Prover9FatalException(returncode, errormsg)\nnltk.inference.prover9.Prover9FatalException: (FATAL)\n%%ERROR: The following symbols are used with multiple arities: diamondMine/1, diamondMine/0.\n\n\nFatal error:  The following symbols are used with multiple arities: diamondMine/1, diamondMine/0\n"}
{"timestamp": "2025-09-16T18:46:24.299773", "premises": ["all x. (DiamondMine(x) -> WrestlingStable(x) & FormedIn(x, WWE))", "all x. (Leads(x, DiamondMine) -> RoderickStrong(x))", "all x. (DiamondMine(x) -> Includes(x, CreedBrothers) & Includes(x, IvyNile))", "all x. (Imperium(x) -> FeudsWith(x, DiamondMine))"], "conclusion": "all x. (Leads(x, DiamondMine) -> RoderickStrong(x) & Includes(x, CreedBrothers))", "error_type": "<class 'nltk.inference.prover9.Prover9FatalException'>", "error_message": "(FATAL)\n%%ERROR: The following symbols are used with multiple arities: DiamondMine/1, DiamondMine/0.\n\n\nFatal error:  The following symbols are used with multiple arities: DiamondMine/1, DiamondMine/0", "stack_trace": "Traceback (most recent call last):\n  File \"/data/gpfs/projects/punim0478/bansaab/linc2/eval/tasks/owafoltask.py\", line 577, in _process_neurosymbolic\n    parsed = json.loads(gen)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/json/__init__.py\", line 346, in loads\n    return _default_decoder.decode(s)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/json/decoder.py\", line 337, in decode\n    obj, end = self.raw_decode(s, idx=_w(s, 0).end())\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/json/decoder.py\", line 355, in raw_decode\n    raise JSONDecodeError(\"Expecting value\", s, err.value) from None\njson.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"/data/gpfs/projects/punim0478/bansaab/linc2/eval/tasks/utils.py\", line 219, in evaluate\n    truth_value = prover.prove(c, p_list)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/inference/api.py\", line 37, in prove\n    return self._prove(goal, assumptions, verbose)[0]\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/inference/prover9.py\", line 327, in _prove\n    stdout, returncode = self._call_prover9(\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/inference/prover9.py\", line 370, in _call_prover9\n    raise Prover9FatalException(returncode, errormsg)\nnltk.inference.prover9.Prover9FatalException: (FATAL)\n%%ERROR: The following symbols are used with multiple arities: DiamondMine/1, DiamondMine/0.\n\n\nFatal error:  The following symbols are used with multiple arities: DiamondMine/1, DiamondMine/0\n"}
{"timestamp": "2025-09-16T18:46:24.300300", "premises": ["all x. (ProfessionalWrestlingStable(x) -> DiamondMine(x))", "all x. (Leads(RoderickStrong, DiamondMine(x)) -> x)", "all x. (DiamondMine(x) -> CreedBrothers(x) & IvyNile(x))", "all x. (DiamondMine(x) -> Imperium(x))"], "conclusion": "all x. (Leads(RoderickStrong, CreedBrothers(x)) -> x)", "error_type": "<class 'nltk.inference.prover9.Prover9FatalException'>", "error_message": "(FATAL)\n%%ERROR: The following symbols cannot be used as atomic formulas, because they are variables: x.\n\n\nFatal error:  The following symbols cannot be used as atomic formulas, because they are variables: x", "stack_trace": "Traceback (most recent call last):\n  File \"/data/gpfs/projects/punim0478/bansaab/linc2/eval/tasks/owafoltask.py\", line 577, in _process_neurosymbolic\n    parsed = json.loads(gen)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/json/__init__.py\", line 346, in loads\n    return _default_decoder.decode(s)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/json/decoder.py\", line 337, in decode\n    obj, end = self.raw_decode(s, idx=_w(s, 0).end())\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/json/decoder.py\", line 355, in raw_decode\n    raise JSONDecodeError(\"Expecting value\", s, err.value) from None\njson.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"/data/gpfs/projects/punim0478/bansaab/linc2/eval/tasks/utils.py\", line 219, in evaluate\n    truth_value = prover.prove(c, p_list)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/inference/api.py\", line 37, in prove\n    return self._prove(goal, assumptions, verbose)[0]\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/inference/prover9.py\", line 327, in _prove\n    stdout, returncode = self._call_prover9(\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/inference/prover9.py\", line 370, in _call_prover9\n    raise Prover9FatalException(returncode, errormsg)\nnltk.inference.prover9.Prover9FatalException: (FATAL)\n%%ERROR: The following symbols cannot be used as atomic formulas, because they are variables: x.\n\n\nFatal error:  The following symbols cannot be used as atomic formulas, because they are variables: x\n"}
{"timestamp": "2025-09-16T18:46:24.302590", "premises": ["all x. (ProfessionalWrestlingStable(x) -> DiamondMine(x))", "all x. (Leads(x, DiamondMine) -> RoderickStrong(x))", "all x. (IncludedIn(x, DiamondMine) -> CreedBrothers(x) | IvyNile(x))", "all x. (HasFeudWith(x, DiamondMine) -> Imperium(x))"], "conclusion": "all x. (Leads(x, DiamondMine) -> RoderickStrong(x) & all x. (CreedBrothers(x) -> RoderickStrong(x)))", "error_type": "<class 'nltk.inference.prover9.Prover9FatalException'>", "error_message": "(FATAL)\n%%ERROR: The following symbols are used with multiple arities: DiamondMine/1, DiamondMine/0.\n\n\nFatal error:  The following symbols are used with multiple arities: DiamondMine/1, DiamondMine/0", "stack_trace": "Traceback (most recent call last):\n  File \"/data/gpfs/projects/punim0478/bansaab/linc2/eval/tasks/owafoltask.py\", line 577, in _process_neurosymbolic\n    parsed = json.loads(gen)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/json/__init__.py\", line 346, in loads\n    return _default_decoder.decode(s)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/json/decoder.py\", line 337, in decode\n    obj, end = self.raw_decode(s, idx=_w(s, 0).end())\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/json/decoder.py\", line 355, in raw_decode\n    raise JSONDecodeError(\"Expecting value\", s, err.value) from None\njson.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"/data/gpfs/projects/punim0478/bansaab/linc2/eval/tasks/utils.py\", line 219, in evaluate\n    truth_value = prover.prove(c, p_list)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/inference/api.py\", line 37, in prove\n    return self._prove(goal, assumptions, verbose)[0]\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/inference/prover9.py\", line 327, in _prove\n    stdout, returncode = self._call_prover9(\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/inference/prover9.py\", line 370, in _call_prover9\n    raise Prover9FatalException(returncode, errormsg)\nnltk.inference.prover9.Prover9FatalException: (FATAL)\n%%ERROR: The following symbols are used with multiple arities: DiamondMine/1, DiamondMine/0.\n\n\nFatal error:  The following symbols are used with multiple arities: DiamondMine/1, DiamondMine/0\n"}
{"timestamp": "2025-09-16T18:53:17.304622", "premises": ["all x. (ProfessionalWrestlingStable(x) -> DiamondMine(x))", "all x. (ProfessionalWrestlingStable(x) -> DiamondMine(x))", "all x. all y. (MemberOf(x, DiamondMine) -> (CreedBrothers(y) | IvyNile(y)))", "all x. (FeudsWith(x, DiamondMine) -> Imperium(x))"], "conclusion": "exists x. (ProfessionalWrestlingStable(x) & FeudsWith(x, DiamondMine) & -IvyNile(x))", "error_type": "<class 'nltk.inference.prover9.Prover9FatalException'>", "error_message": "(FATAL)\n%%ERROR: The following symbols are used with multiple arities: DiamondMine/1, DiamondMine/0.\n\n\nFatal error:  The following symbols are used with multiple arities: DiamondMine/1, DiamondMine/0", "stack_trace": "Traceback (most recent call last):\n  File \"/data/gpfs/projects/punim0478/bansaab/linc2/eval/tasks/owafoltask.py\", line 577, in _process_neurosymbolic\n    parsed = json.loads(gen)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/json/__init__.py\", line 346, in loads\n    return _default_decoder.decode(s)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/json/decoder.py\", line 337, in decode\n    obj, end = self.raw_decode(s, idx=_w(s, 0).end())\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/json/decoder.py\", line 355, in raw_decode\n    raise JSONDecodeError(\"Expecting value\", s, err.value) from None\njson.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"/data/gpfs/projects/punim0478/bansaab/linc2/eval/tasks/utils.py\", line 219, in evaluate\n    truth_value = prover.prove(c, p_list)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/inference/api.py\", line 37, in prove\n    return self._prove(goal, assumptions, verbose)[0]\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/inference/prover9.py\", line 327, in _prove\n    stdout, returncode = self._call_prover9(\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/inference/prover9.py\", line 370, in _call_prover9\n    raise Prover9FatalException(returncode, errormsg)\nnltk.inference.prover9.Prover9FatalException: (FATAL)\n%%ERROR: The following symbols are used with multiple arities: DiamondMine/1, DiamondMine/0.\n\n\nFatal error:  The following symbols are used with multiple arities: DiamondMine/1, DiamondMine/0\n"}
{"timestamp": "2025-09-16T18:53:17.329397", "premises": ["DiamondMine(x) -> ProfessionalWrestlingStable(x)", "DiamondMine(x) -> Leads(x, RoderickStrong)", "DiamondMine(x) -> Includes(x, CreedBrothers)", "DiamondMine(x) -> Includes(x, IvyNile)", "Imperium has a feud with Diamond Mine.", "Imperium has a feud with DiamondMine", "Imperium doesn\u2019t have a feud with a professional wrestling stable that includes Ivy Nile."], "conclusion": "-Imperium has a feud with Diamond Mine -> -Imperium has a feud with a professional wrestling stable that includes Ivy Nile", "error_type": "<class 'nltk.sem.logic.LogicalExpressionException'>", "error_message": "Unexpected token: 'has'.\n-Imperium has a feud with Diamond Mine -> -Imperium has a feud with a professional wrestling stable that includes Ivy Nile\n          ^", "stack_trace": "Traceback (most recent call last):\n  File \"/data/gpfs/projects/punim0478/bansaab/linc2/eval/tasks/owafoltask.py\", line 577, in _process_neurosymbolic\n    parsed = json.loads(gen)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/json/__init__.py\", line 346, in loads\n    return _default_decoder.decode(s)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/json/decoder.py\", line 337, in decode\n    obj, end = self.raw_decode(s, idx=_w(s, 0).end())\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/json/decoder.py\", line 355, in raw_decode\n    raise JSONDecodeError(\"Expecting value\", s, err.value) from None\njson.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/sem/logic.py\", line 156, in parse\n    raise UnexpectedTokenException(self._currentIndex + 1, self.token(0))\nnltk.sem.logic.UnexpectedTokenException: Unexpected token: 'has'.\n\nThe above exception was the direct cause of the following exception:\n\nTraceback (most recent call last):\n  File \"/data/gpfs/projects/punim0478/bansaab/linc2/eval/tasks/utils.py\", line 215, in evaluate\n    c = read_expr(conclusion)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/sem/logic.py\", line 957, in fromstring\n    return cls._logic_parser.parse(s, signature)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/sem/logic.py\", line 159, in parse\n    raise LogicalExpressionException(None, msg) from e\nnltk.sem.logic.LogicalExpressionException: Unexpected token: 'has'.\n-Imperium has a feud with Diamond Mine -> -Imperium has a feud with a professional wrestling stable that includes Ivy Nile\n          ^\n"}
{"timestamp": "2025-09-16T18:53:17.331085", "premises": ["all x. all y. (Leads(x, y) -> DiamondMine(y))", "all x. all y. (Includes(x, y) -> DiamondMine(y))", "all x. all y. (FeudWith(x, y) -> DiamondMine(y))", "all x. (DiamondMine(x) -> IvyNile(x))", "all x. (Imperium(x) -> FeudWith(x, DiamondMine))", "all x. (DiamondMine(x) -> IvyNile(x)) & all x. (Imperium(x) -> FeudWith(x, DiamondMine))", "all x. (DiamondMine(x) -> IvyNile(x)) & -all x. (Imperium(x) -> FeudWith(x, DiamondMine))", "all x. (DiamondMine(x) -> IvyNile(x)) & -all x. (Imperium(x) -> FeudWith(x, DiamondMine))", "all x. (DiamondMine(x) -> IvyNile(x)) & -all x. (Imperium(x) -> FeudWith(x, DiamondMine))", "all x. (DiamondMine(x) -> IvyNile(x)) & -all x. (Imperium(x) -> FeudWith(x, DiamondMine))", "all x. (DiamondMine(x) -> IvyNile(x)) & -all x. (Imperium(x) -> FeudWith(x, DiamondMine))", "all x. (DiamondMine(x) -> IvyNile(x)) & -all x. (Imperium(x) -> FeudWith(x, DiamondMine))", "all x. (DiamondMine(x) -> IvyNile(x)) & -all x. (Imperium(x) -> FeudWith(x, DiamondMine))", "all x. (DiamondMine(x) -> IvyNile(x)) & -all x. (Imperium(x) -> FeudWith(x, DiamondMine))", "all x. (DiamondMine(x) -> IvyNile(x)) & -all x. (Imperium(x) -> FeudWith(x, DiamondMine))", "all x. (DiamondMine(x) -> IvyNile(x)) & -all x. (Imperium(x) -> FeudWith(x, DiamondMine))", "all x. (DiamondMine(x) -> IvyNile(x)) & -all x. (Imperium(x) -> FeudWith(x, DiamondMine))", "all x. (DiamondMine(x) -> IvyNile(x)) & -all x. (Imperium(x) -> FeudWith(x, DiamondMine))", "all x. (DiamondMine(x) -> IvyNile(x)) & -all x. (Imperium(x) -> FeudWith(x, DiamondMine))", "all x. (DiamondMine(x) -> IvyNile(x)) & -all x. (Imperium(x) -> FeudWith(x, DiamondMine))", "all x. (DiamondMine(x) -> IvyNile(x)) & -all x. (Imperium(x) -> FeudWith(x, DiamondMine))", "all x. (DiamondMine(x) -> IvyNile(x)) & -all x. (Imperium(x) -> FeudWith(x, DiamondMine))", "all x. (DiamondMine(x) -> IvyNile(x)) & -all x. (Imperium(x) -> FeudWith(x, DiamondMine))", "all x. (DiamondMine(x) -> IvyNile(x)) & -all x. (Imperium(x) -> FeudWith(x, DiamondMine))", "all x. (DiamondMine(x) -> IvyNile(x)) & -all x. (Imperium(x) -> FeudWith(x, DiamondMine))", "all x. (DiamondMine(x) -> IvyNile(x)) & -all x. (Imperium(x) -> FeudWith(x, DiamondMine))", "all x. (DiamondMine(x) -> IvyNile(x)) & -all x. (Imperium(x) -> FeudWith(x, DiamondMine))", "all x. (DiamondMine(x) -> IvyNile(x)) & -all x. (Imperium(x) -> FeudWith(x, DiamondMine))", "all x. (DiamondMine(x) -> IvyNile(x)) & -all x. (Imperium(x) -> FeudWith(x, DiamondMine))", "all x. (DiamondMine(x) -> IvyNile(x)) & -all x. (Imperium(x) -> FeudWith(x, DiamondMine))", "all x. (DiamondMine(x) -> IvyNile(x)) & -all x. (Imperium(x) -> FeudWith(x, DiamondMine))", "all x. (DiamondMine(x) -> IvyNile(x)) & -all x. (Imperium(x) -> FeudWith(x, DiamondMine))", "all x. (DiamondMine(x) -> IvyNile(x)) & -all x. (Imperium(x) -> FeudWith(x, DiamondMine))", "all x. (DiamondMine(x) -> IvyNile(x)) & -all x. (Imperium(x) -> FeudWith(x, DiamondMine))", "all x. (DiamondMine(x) -> IvyNile(x)) & -all x. (Imperium(x) -> FeudWith(x, DiamondMine))", "all x. (DiamondMine(x) -> IvyNile(x)) & -all x. (Imperium(x) -> FeudWith(x, DiamondMine))", "all x. (DiamondMine(x) -> IvyNile(x)) & -all x. (Imperium(x) -> FeudWith(x, DiamondMine))", "all x. (DiamondMine(x) -> IvyNile(x)) & -all x. (Imperium(x) -> FeudWith(x, DiamondMine))", "all x. (DiamondMine(x) -> IvyNile(x)) & -all x. (Imperium(x) -> FeudWith(x, DiamondMine))", "all x. (DiamondMine(x) -> IvyNile(x)) & -all x. (Imperium(x) -> FeudWith(x, DiamondMine))", "all x. (DiamondMine(x) -> IvyNile(x)) & -all x. (Imperium(x) -> FeudWith(x, DiamondMine))", "all x. (DiamondMine(x) -> IvyNile(x)) & -all x. (Imperium(x) -> FeudWith(x, DiamondMine))", "all x. (DiamondMine(x) -> IvyNile(x)) & -all x. (Imperium(x) -> FeudWith(x, DiamondMine))", "all x. (DiamondMine(x) -> IvyNile(x)) & -all x. (Imperium(x) -> FeudWith(x, DiamondMine))", "all x. (DiamondMine(x) -> IvyNile(x)) & -all x. (Imperium(x) -> FeudWith(x, DiamondMine))", "all x. (DiamondMine(x) -> IvyNile(x)) & -all x. (Imperium(x) -> FeudWith(x, DiamondMine))", "all x. (DiamondMine(x) -> IvyNile(x)) & -all x. (Imperium(x) -> FeudWith(x, DiamondMine))", "all x. (DiamondMine(x) -> IvyNile(x)) & -all x. (Imperium(x) -> FeudWith(x, DiamondMine))", "all x. (DiamondMine(x) -> IvyNile(x)) & -all x. (Imperium(x) -> FeudWith(x, DiamondMine))", "all x. (DiamondMine(x) -> IvyNile(x)) & -all x. (Imperium(x) -> FeudWith(x, DiamondMine))", "all x. (DiamondMine(x) -> IvyNile(x)) & -all x. (Imperium(x) -> FeudWith(x, DiamondMine))", "all x. (DiamondMine(x) -> IvyNile(x)) & -all x. (Imperium(x) -> FeudWith(x, DiamondMine))", "all x. (DiamondMine(x) -> IvyNile(x)) & -all x. (Imperium(x) -> FeudWith(x, DiamondMine))", "all x. (DiamondMine(x) -> IvyNile(x)) & -all x. (Imperium(x) -> FeudWith(x, DiamondMine))", "all x. (DiamondMine(x) -> IvyNile(x)) & -all x. (Imperium(x) -> FeudWith(x, DiamondMine))", "all x. (DiamondMine(x) -> IvyNile(x)) & -all x. (Imperium(x) -> FeudWith(x, DiamondMine))", "all x. (DiamondMine(x) -> IvyNile(x)) & -all x. (Imperium(x) -> FeudWith(x, DiamondMine))", "all x. (DiamondMine(x) -> IvyNile(x)) & -all x. (Imperium(x) -> FeudWith(x, DiamondMine))", "all x. (DiamondMine(x) -> IvyNile(x)) & -all x. (Imperium(x) -> FeudWith(x, DiamondMine))", "all x. (DiamondMine(x) -> IvyNile(x)) & -all x. (Imperium(x) -> FeudWith(x, DiamondMine))", "all x. (DiamondMine(x) -> IvyNile(x)) & -all x. (Imperium(x) -> FeudWith(x, DiamondMine))", "all x. (DiamondMine(x) -> IvyNile(x)) & -all x. (Imperium(x) -> FeudWith(x, DiamondMine))", "all x. (DiamondMine(x) -> IvyNile(x)) & -all x. (Imperium(x) -> FeudWith(x, DiamondMine))", "all x. (DiamondMine(x) -> IvyNile(x)) & -all x. (Imperium(x) -> FeudWith(x, DiamondMine))", "all x. (DiamondMine(x) -> IvyNile(x)) & -all x. (Imperium(x) -> FeudWith(x, DiamondMine))", "all x. (DiamondMine(x) -> IvyNile(x)) & -all x. (Imperium(x) -> FeudWith(x, DiamondMine))", "all x. (DiamondMine(x) -> IvyNile(x)) & -all x. (Imperium(x) -> FeudWith(x, DiamondMine))", "all x. (DiamondMine(x) -> IvyNile(x)) & -all x. (Imperium(x) -> FeudWith(x, DiamondMine))", "all x. (DiamondMine(x) -> IvyNile(x)) & -all x. (Imperium(x) -> FeudWith(x, DiamondMine))", "all x. (DiamondMine(x) -> IvyNile(x)) & -all x. (Imperium(x) -> FeudWith(x, DiamondMine))", "all x. (DiamondMine(x) -> IvyNile(x)) & -all x. (Imperium(x) -> FeudWith(x, DiamondMine))", "all x. (DiamondMine(x) -> IvyNile(x)) & -all x. (Imperium(x) -> FeudWith(x, DiamondMine))", "all x. (DiamondMine(x) -> IvyNile(x)) & -all x. (Imperium(x) -> FeudWith(x, DiamondMine))", "all x. (DiamondMine(x) -> IvyNile(x)) & -all x. (Imperium(x) -> FeudWith(x, DiamondMine))", "all x. (DiamondMine(x) -> IvyNile(x)) & -all x. (Imperium(x) -> FeudWith(x, DiamondMine))", "all x. (DiamondMine(x) -> IvyNile(x)) & -all x. (Imperium(x) -> FeudWith(x, DiamondMine))", "all x. (DiamondMine(x) -> IvyNile(x)) & -all x. (Imperium(x) -> FeudWith(x, DiamondMine))", "all x. (DiamondMine(x) -> IvyNile(x)) & -all x. (Imperium(x) -> FeudWith(x, DiamondMine))", "all x. (DiamondMine(x) -> IvyNile(x)) & -all x. (Imperium(x) -> FeudWith(x, DiamondMine))", "all x. (DiamondMine(x) -> IvyNile(x)) & -all x. (Imperium(x) -> FeudWith(x, DiamondMine))", "all x. (DiamondMine(x) -> IvyNile(x)) & -all x. (Imperium(x) -> FeudWith(x, DiamondMine))", "all x. (Imperium(x) -> FeudWith(x, DiamondMine))", "all x. (DiamondMine(x) -> IvyNile(x)) & -all x. (Imperium(x) -> FeudWith(x, DiamondMine))", "all x. (DiamondMine(x) -> IvyNile(x)) & -all x. (Imperium(x) -> FeudWith(x, DiamondMine))", "all x. (DiamondMine(x) -> IvyNile(x)) & -all x. (Imperium(x) -> FeudWith(x, DiamondMine))", "all x. (DiamondMine(x) -> IvyNile(x)) & -all x. (Imperium(x) -> FeudWith(x, DiamondMine))", "all x. (DiamondMine(x) -> IvyNile(x)) & -all x. (Imperium(x) -> FeudWith(x, DiamondMine))", "all x. (DiamondMine(x) -> IvyNile(x)) & -all x. (Imperium(x) -> FeudWith(x, DiamondMine))", "all x. (DiamondMine(x) -> IvyNile(x)) & -all x. (Imperium(x) -> FeudWith(x, DiamondMine))", "all x. (DiamondMine(x) -> IvyNile(x)) & -all x. (Imperium(x) -> FeudWith(x, DiamondMine))", "all x. (DiamondMine(x) -> IvyNile(x)) & -all x. (Imperium(x) -> FeudWith(x, DiamondMine))", "all x. (DiamondMine(x) -> IvyNile(x)) & -all x. (Imperium(x) -> FeudWith(x, DiamondMine))", "all x. (DiamondMine(x) -> IvyNile(x)) & -all x. (Imperium(x) -> FeudWith(x, DiamondMine))", "all x. (DiamondMine(x) -> IvyNile(x)) & -all x. (Imperium(x) -> FeudWith(x, DiamondMine))", "all x. (DiamondMine(x) -> IvyNile(x)) & -all x. (Imperium(x) -> FeudWith(x, DiamondMine))", "all x. (DiamondMine(x) -> IvyNile(x)) & -all x. (Imperium(x) -> FeudWith(x, DiamondMine))", "all x. (DiamondMine(x) -> IvyNile(x)) & -all x. (Imperium(x) -> FeudWith(x, DiamondMine))", "all x. (DiamondMine(x) -> IvyNile(x)) & -all x. (Imperium(x) -> FeudWith(x, DiamondMine))", "all x. (DiamondMine(x) -> IvyNile(x)) & -all x. (Imperium(x) -> FeudWith(x, DiamondMine))", "all x. (DiamondMine(x) -> IvyNile(x)) & -all x. (Imperium(x) -> FeudWith(x, DiamondMine))", "all x. (DiamondMine(x) -> IvyNile(x)) & -all x. (Imperium(x) -> FeudWith(x, DiamondMine))", "all x. (DiamondMine(x) -> IvyNile(x)) & -all x. (Imperium(x) -> FeudWith(x, DiamondMine))", "all x. (DiamondMine(x) -> IvyNile(x)) & -all x. (Imperium(x) -> FeudWith(x, DiamondMine))", "all x. (DiamondMine(x) -> IvyNile(x)) & -all x. (Imperium(x) -> FeudWith(x, DiamondMine))", "all x. (DiamondMine(x) -> IvyNile(x)) & -all x. (Imperium(x) -> FeudWith(x, DiamondMine))", "all x. (DiamondMine(x) -> IvyNile(x)) & -all x. (Imperium(x) -> FeudWith(x, DiamondMine))", "all x. (DiamondMine(x) -> IvyNile(x)) & -all x. (Imperium(x) -> FeudWith(x, DiamondMine))", "all x. (DiamondMine(x) -> IvyNile(x)) & -all x. (Imperium(x) -> FeudWith(x, DiamondMine))", "all x. (DiamondMine(x) -> IvyNile(x)) & -all x. (Imperium(x) -> FeudWith(x, DiamondMine))", "all x. (DiamondMine(x) -> IvyNile(x)) & -all x. (Imperium(x) -> FeudWith(x, DiamondMine))", "all x. (DiamondMine(x) -> IvyNile(x)) & -all x. (Imperium(x) -> FeudWith(x, DiamondMine))", "all x. (DiamondMine(x) -> IvyNile(x)) & -all x. (Imperium(x) -> FeudWith(x, DiamondMine))", "all x. (DiamondMine(x) -> IvyNile(x)) & -all x. (Imperium(x) -> FeudWith(x, DiamondMine))", "all x. (DiamondMine(x) -> IvyNile(x)) & -all x. (Imperium(x) -> FeudWith(x, DiamondMine))", "all x. (DiamondMine(x) -> IvyNile(x)) & -all x. (Imperium(x) -> FeudWith(x, DiamondMine))", "all x. (DiamondMine(x) -> IvyNile(x)) & -all x. (Imperium(x) -> FeudWith(x, DiamondMine))", "all x. (DiamondMine(x) -> IvyNile(x)) & -all x. (Imperium(x) -> FeudWith(x, DiamondMine))", "all x. (DiamondMine(x) -> IvyNile(x)) & -all x. (Imperium(x) -> FeudWith(x, DiamondMine))", "all x. (DiamondMine(x) -> IvyNile(x)) & -all x. (Imperium(x) -> FeudWith(x, DiamondMine))", "all x. (DiamondMine(x) -> IvyNile(x)) & -all x. (Imperium(x) -> FeudWith(x, DiamondMine))", "all x. (DiamondMine(x) -> IvyNile(x)) & -all x. (Imperium(x) -> FeudWith(x, DiamondMine))", "all x. (DiamondMine(x) -> IvyNile(x)) & -all x. (Imperium(x) -> FeudWith(x, DiamondMine))", "all x. (DiamondMine(x) -> IvyNile(x)) & -all x. (Imperium(x) -> FeudWith(x, DiamondMine))", "all x. (DiamondMine(x) -> IvyNile(x)) & -all x. (Imperium(x) -> FeudWith(x, DiamondMine))", "all x. (DiamondMine(x) -> IvyNile(x)) & -all x. (Imperium(x) -> FeudWith(x, DiamondMine))", "all x. (DiamondMine(x) -> IvyNile(x)) & -all x. (Imperium(x) -> FeudWith(x, DiamondMine))", "all x. (DiamondMine(x) -> IvyNile(x)) & -all x. (Imperium(x) -> FeudWith(x, DiamondMine))", "all x. (DiamondMine(x) -> IvyNile(x)) & -all x. (Imperium(x) -> FeudWith(x, DiamondMine))", "all x. (DiamondMine(x) -> IvyNile(x)) & -all x. (Imperium(x) -> FeudWith(x, DiamondMine))", "all x. (DiamondMine(x) -> IvyNile(x)) & -all x. (Imperium(x) -> FeudWith(x, DiamondMine))", "all x. (DiamondMine(x) -> IvyNile(x)) & -all x. (Imperium(x) -> FeudWith(x, DiamondMine))", "all x. (DiamondMine(x) -> IvyNile(x)) & -all x. (Imperium(x) -> FeudWith(x, DiamondMine))", "all x. (DiamondMine(x) -> IvyNile(x)) & -all x. (Imperium(x) -> FeudWith(x, DiamondMine))", "all x. (DiamondMine(x) -> IvyNile(x)) & -all x. (Imperium(x) -> FeudWith(x, DiamondMine))", "all x. (DiamondMine(x) -> IvyNile(x)) & -all x. (Imperium(x) -> FeudWith(x, DiamondMine))", "all x. (DiamondMine(x) -> IvyNile(x)) & -all x. (Imperium(x) -> FeudWith(x, DiamondMine))", "all x. (DiamondMine(x) -> IvyNile(x)) & -all x. (Imperium(x) -> FeudWith(x, DiamondMine))", "all x. (DiamondMine(x) -> IvyNile(x)) & -all x. (Imperium(x) -> FeudWith(x, DiamondMine))", "all x. (DiamondMine(x) -> IvyNile(x)) & -all x. (Imperium(x) -> FeudWith(x, DiamondMine))", "all x. (DiamondMine(x) -> IvyNile(x)) & -all x. (Imperium(x) -> FeudWith(x, DiamondMine))", "all x. (DiamondMine(x) -> IvyNile(x)) & -all x. (Imperium(x) -> FeudWith(x, DiamondMine))", "all x. (DiamondMine(x) -> IvyNile(x)) & -all x. (Imperium(x) -> FeudWith(x, DiamondMine))", "all x. (DiamondMine(x) -> IvyNile(x)) & -all x. (Imperium(x) -> FeudWith(x, DiamondMine))", "all x. (DiamondMine(x) -> IvyNile(x)) & -all x. (Imperium(x) -> FeudWith(x, DiamondMine))", "all x. (DiamondMine(x) -> IvyNile(x)) & -all x. (Imperium(x) -> FeudWith(x, DiamondMine))", "all x. (DiamondMine(x) -> IvyNile(x)) & -all x. (Imperium(x) -> FeudWith(x, DiamondMine))", "all x. (DiamondMine(x) -> IvyNile(x)) & -all x. (Imperium(x) -> FeudWith(x, DiamondMine))", "all x. (DiamondMine(x) -> IvyNile(x)) & -all x. (Imperium(x) -> FeudWith(x, DiamondMine))", "all x. (DiamondMine(x) -> IvyNile(x)) & -all x. (Imperium(x) -> FeudWith(x, DiamondMine))", "all x. (DiamondMine(x) -> IvyNile(x)) & -all x. (Imperium(x) -> FeudWith(x, DiamondMine))", "all x. (DiamondMine(x) -> IvyNile(x)) & -all x. (Imperium(x) -> FeudWith(x, DiamondMine))", "all x. (DiamondMine(x) -> IvyNile(x)) & -all x. (Imperium(x) -> FeudWith(x, DiamondMine))", "all x. (DiamondMine(x) -> IvyNile(x)) & -all x. (Imperium(x) -> FeudWith(x, DiamondMine))", "all x. (DiamondMine(x) -> IvyNile(x)) & -all x. (Imperium(x) -> FeudWith(x, DiamondMine))", "all x. (DiamondMine(x) -> IvyNile(x)) & -all x. (Imperium(x) -> FeudWith(x, DiamondMine))", "all x. (DiamondMine(x) -> IvyNile(x)) & -all x. (Imperium(x) -> FeudWith(x, DiamondMine))", "all x. (DiamondMine(x) -> IvyNile(x)) & -all x. (Imperium(x) -> FeudWith(x, DiamondMine))", "all x. (DiamondMine(x) -> IvyNile(x)) & -all x. (Imperium(x) -> FeudWith(x, DiamondMine))", "all x. (DiamondMine(x) -> IvyNile(x)) & -all x. (Imperium(x) -> FeudWith(x, DiamondMine))", "all x. (DiamondMine(x) -> IvyNile(x)) & -all x. (Imperium(x) -> FeudWith(x, DiamondMine))", "all x. (DiamondMine(x) -> IvyNile(x)) & -all x. (Imperium(x) -> FeudWith(x, DiamondMine))", "all x. (DiamondMine(x) -> IvyNile(x)) & -all x. (Imperium(x) -> FeudWith(x, DiamondMine))", "all x. (DiamondMine(x) -> IvyNile(x)) & -all x. (Imperium(x) -> FeudWith(x, DiamondMine))", "all x. (DiamondMine(x) -> IvyNile(x)) & -all x. (Imperium(x) -> FeudWith(x, DiamondMine))", "all x. (DiamondMine(x) -> IvyNile(x)) & -all x. (Imperium(x) -> FeudWith(x, DiamondMine))", "all x. (DiamondMine(x) -> IvyNile(x)) & -all x. (Imperium(x) -> FeudWith(x, DiamondMine))", "all x. (DiamondMine(x) -> IvyNile(x)) & -all x. (Imperium(x) -> FeudWith(x, DiamondMine))", "all x. (DiamondMine(x) -> IvyNile(x)) & -all x. (Imperium(x) -> FeudWith(x, DiamondMine))", "all x. (DiamondMine(x) -> IvyNile(x)) & -all x. (Imperium(x) -> FeudWith(x, DiamondMine))", "all x. (DiamondMine(x) -> IvyNile(x)) & -all x. (Imperium(x) -> FeudWith(x, DiamondMine))", "all x. (DiamondMine(x) -> IvyNile(x)) & -all x. (Imperium(x) -> FeudWith(x, DiamondMine))", "all x. (DiamondMine(x) -> IvyNile(x)) & -all x. (Imperium(x) -> FeudWith(x, DiamondMine))", "all x. (DiamondMine(x) -> IvyNile(x)) & -all x. (Imperium(x) -> FeudWith(x, DiamondMine))", "all x. (DiamondMine(x) -> IvyNile(x)) & -all x. (Imperium(x) -> FeudWith(x, DiamondMine))", "all x. (DiamondMine(x) -> IvyNile(x)) & -all x. (Imperium(x) -> FeudWith(x, DiamondMine))", "all x. (DiamondMine(x) -> IvyNile(x)) & -all x. (Imperium(x) -> FeudWith(x, DiamondMine))", "all x. (DiamondMine(x) -> IvyNile(x)) & -all x. (Imperium(x) -> FeudWith(x, DiamondMine))"], "conclusion": "all x", "error_type": "<class 'nltk.sem.logic.LogicalExpressionException'>", "error_message": "End of input found.  Expression expected.\nall x\n      ^", "stack_trace": "Traceback (most recent call last):\n  File \"/data/gpfs/projects/punim0478/bansaab/linc2/eval/tasks/owafoltask.py\", line 577, in _process_neurosymbolic\n    parsed = json.loads(gen)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/json/__init__.py\", line 346, in loads\n    return _default_decoder.decode(s)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/json/decoder.py\", line 337, in decode\n    obj, end = self.raw_decode(s, idx=_w(s, 0).end())\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/json/decoder.py\", line 355, in raw_decode\n    raise JSONDecodeError(\"Expecting value\", s, err.value) from None\njson.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/sem/logic.py\", line 154, in parse\n    result = self.process_next_expression(None)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/sem/logic.py\", line 290, in process_next_expression\n    accum = self.handle(tok, context)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/sem/logic.py\", line 312, in handle\n    return self.handle_quant(tok, context)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/sem/logic.py\", line 417, in handle_quant\n    raise ExpectedMoreTokensException(\nnltk.sem.logic.ExpectedMoreTokensException: End of input found.  Expression expected.\n\nThe above exception was the direct cause of the following exception:\n\nTraceback (most recent call last):\n  File \"/data/gpfs/projects/punim0478/bansaab/linc2/eval/tasks/utils.py\", line 215, in evaluate\n    c = read_expr(conclusion)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/sem/logic.py\", line 957, in fromstring\n    return cls._logic_parser.parse(s, signature)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/sem/logic.py\", line 159, in parse\n    raise LogicalExpressionException(None, msg) from e\nnltk.sem.logic.LogicalExpressionException: End of input found.  Expression expected.\nall x\n      ^\n"}
{"timestamp": "2025-09-16T18:53:17.333889", "premises": ["DiamondMine(x) -> ProfessionalWrestlingStable(x)", "Strong(x) -> Leads(x, DiamondMine)", "DiamondMine(x) -> Includes(x, CreedBrothers)", "DiamondMine(x) -> Includes(x, IvyNile)", "Imperium(x) -> HasFeud(x, DiamondMine)", "Imperium(x) -> Doesn'tHaveFeud(x, DiamondMine)", "Imperium(x) -> HasFeud(x, DiamondMine)", "Imperium(x) -> Doesn'tHaveFeud(x, DiamondMine)", "Imperium(x) -> HasFeud(x, DiamondMine)", "Imperium(x) -> Doesn'tHaveFeud(x, DiamondMine)", "Imperium(x) -> HasFeud(x, DiamondMine)", "Imperium(x) -> Doesn'tHaveFeud(x, DiamondMine)", "Imperium(x) -> HasFeud(x, DiamondMine)", "Imperium(x) -> Doesn'tHaveFeud(x, DiamondMine)", "Imperium(x) -> HasFeud(x, DiamondMine)", "Imperium(x) -> Doesn'tHaveFeud(x, DiamondMine)", "Imperium(x) -> HasFeud(x, DiamondMine)", "Imperium(x) -> Doesn'tHaveFeud(x, DiamondMine)", "Imperium(x) -> HasFeud(x, DiamondMine)", "Imperium(x) -> Doesn'tHaveFeud(x, DiamondMine)", "Imperium(x) -> HasFeud(x, DiamondMine)", "Imperium(x) -> Doesn'tHaveFeud(x, DiamondMine)", "Imperium(x) -> HasFeud(x, DiamondMine)", "Imperium(x) -> Doesn'tHaveFeud(x, DiamondMine)", "Imperium(x) -> HasFeud(x, DiamondMine)", "Imperium(x) -> Doesn'tHaveFeud(x, DiamondMine)", "Imperium(x) -> HasFeud(x, DiamondMine)", "Imperium(x) -> Doesn'tHaveFeud(x, DiamondMine)", "Imperium(x) -> HasFeud(x, DiamondMine)", "Imperium(x) -> Doesn'tHaveFeud(x, DiamondMine)", "Imperium(x) -> HasFeud(x, DiamondMine)", "Imperium(x) -> Doesn'tHaveFeud(x, DiamondMine)", "Imperium(x) -> HasFeud(x, DiamondMine)", "Imperium(x) -> Doesn'tHaveFeud(x, DiamondMine)", "Imperium(x) -> HasFeud(x, DiamondMine)", "Imperium(x) -> Doesn'tHaveFeud(x, DiamondMine)", "Imperium(x) -> HasFeud(x, DiamondMine)", "Imperium(x) -> Doesn'tHaveFeud(x, DiamondMine)", "Imperium(x) -> HasFeud(x, DiamondMine)", "Imperium(x) -> Doesn'tHaveFeud(x, DiamondMine)", "Imperium(x) -> HasFeud(x, DiamondMine)", "Imperium(x) -> Doesn'tHaveFeud(x, DiamondMine)", "Imperium(x) -> HasFeud(x, DiamondMine)", "Imperium(x) -> Doesn'tHaveFeud(x, DiamondMine)", "Imperium(x) -> HasFeud(x, DiamondMine)", "Imperium(x) -> Doesn'tHaveFeud(x, DiamondMine)", "Imperium(x) -> HasFeud(x, DiamondMine)", "Imperium(x) -> Doesn'tHaveFeud(x, DiamondMine)", "Imperium(x) -> HasFeud(x, DiamondMine)", "Imperium(x) -> Doesn'tHaveFeud(x, DiamondMine)", "Imperium(x) -> HasFeud(x, DiamondMine)", "Imperium(x) -> Doesn'tHaveFeud(x, DiamondMine)", "Imperium(x) -> HasFeud(x, DiamondMine)", "Imperium(x) -> Doesn'tHaveFeud(x, DiamondMine)", "Imperium(x) -> HasFeud(x, DiamondMine)", "Imperium(x) -> Doesn'tHaveFeud(x, DiamondMine)", "Imperium(x) -> HasFeud(x, DiamondMine)", "Imperium(x) -> Doesn'tHaveFeud(x, DiamondMine)", "Imperium(x) -> HasFeud(x, DiamondMine)", "Imperium(x) -> Doesn'tHaveFeud(x, DiamondMine)", "Imperium(x) -> HasFeud(x, DiamondMine)", "Imperium(x) -> Doesn'tHaveFeud(x, DiamondMine)", "Imperium(x) -> HasFeud(x, DiamondMine)", "Imperium(x) -> Doesn'tHaveFeud(x, DiamondMine)", "Imperium(x) -> HasFeud(x, DiamondMine)", "Imperium(x) -> Doesn'tHaveFeud(x, DiamondMine)", "Imperium(x) -> HasFeud(x, DiamondMine)", "Imperium(x) -> Doesn'tHaveFeud(x, DiamondMine)", "Imperium(x) -> HasFeud(x, DiamondMine)", "Imperium(x) -> Doesn'tHaveFeud(x, DiamondMine)", "Imperium(x) -> HasFeud(x, DiamondMine)", "Imperium(x) -> Doesn'tHaveFeud(x, DiamondMine)", "Imperium(x) -> HasFeud(x, DiamondMine)", "Imperium(x) -> Doesn'tHaveFeud(x, DiamondMine)", "Imperium(x) -> HasFeud(x, DiamondMine)", "Imperium(x) -> Doesn'tHaveFeud(x, DiamondMine)", "Imperium(x) -> HasFeud(x, DiamondMine)", "Imperium(x) -> Doesn'tHaveFeud(x, DiamondMine)", "Imperium(x) -> HasFeud(x, DiamondMine)", "Imperium(x) -> Doesn'tHaveFeud(x, DiamondMine)", "Imperium(x) -> HasFeud(x, DiamondMine)", "Imperium(x) -> Doesn'tHaveFeud(x, DiamondMine)", "Imperium(x) -> HasFeud(x, DiamondMine)", "Imperium(x) -> Doesn'tHaveFeud(x, DiamondMine)", "Imperium(x) -> HasFeud(x, DiamondMine)", "Imperium(x) -> Doesn'tHaveFeud(x, DiamondMine)", "Imperium(x) -> HasFeud(x, DiamondMine)", "Imperium(x) -> Doesn'tHaveFeud(x, DiamondMine)", "Imperium(x) -> HasFeud(x, DiamondMine)", "Imperium(x) -> Doesn'tHaveFeud(x, DiamondMine)", "Imperium(x) -> HasFeud(x, DiamondMine)", "Imperium(x) -> Doesn'tHaveFeud(x, DiamondMine)", "Imperium(x) -> HasFeud(x, DiamondMine)", "Imperium(x) -> Doesn'tHaveFeud(x, DiamondMine)", "Imperium(x) -> HasFeud(x, DiamondMine)", "Imperium(x) -> Doesn'tHaveFeud(x, DiamondMine)", "Imperium(x) -> HasFeud(x, DiamondMine)", "Imperium(x) -> Doesn'tHaveFeud(x, DiamondMine)", "Imperium(x) -> HasFeud(x, DiamondMine)", "Imperium(x) -> Doesn'tHaveFeud(x, DiamondMine)", "Imperium(x) -> HasFeud(x, DiamondMine)", "Imperium(x) -> Doesn'tHaveFeud(x, DiamondMine)", "Imperium(x) -> HasFeud(x, DiamondMine)", "Imperium(x) -> Doesn'tHaveFeud(x, DiamondMine)", "Imperium(x) -> HasFeud(x, DiamondMine)", "Imperium(x) -> Doesn'tHaveFeud(x, DiamondMine)", "Imperium(x) -> HasFeud(x, DiamondMine)", "Imperium(x) -> Doesn'tHaveFeud(x, DiamondMine)", "Imperium(x) -> HasFeud(x, DiamondMine)", "Imperium(x) -> Doesn'tHaveFeud(x, DiamondMine)", "Imperium(x) -> HasFeud(x, DiamondMine)", "Imperium(x) -> Doesn'tHaveFeud(x, DiamondMine)", "Imperium(x) -> HasFeud(x, DiamondMine)", "Imperium(x) -> Doesn'tHaveFeud(x, DiamondMine)", "Imperium(x) -> HasFeud(x, DiamondMine)", "Imperium(x) -> Doesn'tHaveFeud(x, DiamondMine)", "Imperium(x) -> HasFeud(x, DiamondMine)", "Imperium(x) -> Doesn'tHaveFeud(x, DiamondMine)", "Imperium(x) -> HasFeud(x, DiamondMine)", "Imperium(x) -> Doesn'tHaveFeud(x, DiamondMine)", "Imperium(x) -> HasFeud(x, DiamondMine)", "Imperium(x) -> Doesn'tHaveFeud(x, DiamondMine)", "Imperium(x) -> HasFeud(x, DiamondMine)", "Imperium(x) -> Doesn'tHaveFeud(x, DiamondMine)", "Imperium(x) -> HasFeud(x, DiamondMine)", "Imperium(x) -> Doesn'tHaveFeud(x, DiamondMine)", "Imperium(x) -> HasFeud(x, DiamondMine)", "Imperium(x) -> Doesn'tHaveFeud(x, DiamondMine)", "Imperium(x) -> HasFeud(x, DiamondMine)", "Imperium(x) -> Doesn'tHaveFeud(x, DiamondMine)", "Imperium(x) -> HasFeud(x, DiamondMine)", "Imperium(x) -> Doesn'tHaveFeud(x, DiamondMine)", "Imperium(x) -> HasFeud(x, DiamondMine)", "Imperium(x) -> Doesn'tHaveFeud(x, DiamondMine)", "Imperium(x) -> HasFeud(x, DiamondMine)", "Imperium(x) -> Doesn'tHaveFeud(x, DiamondMine)", "Imperium(x) -> HasFeud(x, DiamondMine)", "Imperium(x) -> Doesn'tHaveFeud(x, DiamondMine)", "Imperium(x) -> HasFeud(x, DiamondMine)", "Imperium(x) -> Doesn'tHaveFeud(x, DiamondMine)", "Imperium(x) -> HasFeud(x, DiamondMine)", "Imperium(x) -> Doesn'tHaveFeud(x, DiamondMine)", "Imperium(x) -> HasFeud(x, DiamondMine)", "Imperium(x) -> Doesn'tHaveFeud(x, DiamondMine)", "Imperium(x) -> HasFeud(x, DiamondMine)", "Imperium(x) -> Doesn'tHaveFeud(x, DiamondMine)", "Imperium(x) -> HasFeud(x, DiamondMine)", "Imperium(x) -> Doesn'tHaveFeud(x, DiamondMine)", "Imperium(x) -> HasFeud(x, DiamondMine)", "Imperium(x) -> Doesn'tHaveFeud(x, DiamondMine)", "Imperium(x) -> HasFeud(x, DiamondMine)", "Imperium(x) -> Doesn'tHaveFeud(x, DiamondMine)", "Imperium(x) -> HasFeud(x, DiamondMine)", "Imperium(x) -> Doesn'tHaveFeud(x, DiamondMine)", "Imperium(x) -> HasFeud(x, DiamondMine)", "Imperium(x) -> Doesn'tHaveFeud(x, DiamondMine)", "Imperium(x) -> HasFeud(x, DiamondMine)", "Imperium(x) -> Doesn'tHaveFeud(x, DiamondMine)", "Imperium(x) -> HasFeud(x, DiamondMine)", "Imperium(x) -> Doesn'tHaveFeud(x, DiamondMine)", "Imperium(x) -> HasFeud(x, DiamondMine)", "Imperium(x) -> Doesn'tHaveFeud(x, DiamondMine)", "Imperium(x) -> HasFeud(x, DiamondMine)", "Imperium(x) -> Doesn'tHaveFeud(x, DiamondMine)", "Imperium(x) -> HasFeud(x, DiamondMine)", "Imperium(x) -> Doesn'tHaveFeud(x, DiamondMine)", "Imperium(x) -> HasFeud(x, DiamondMine)", "Imperium(x) -> Doesn'tHaveFeud(x, DiamondMine)", "Imperium(x) -> HasFeud(x, DiamondMine)", "Imperium(x) -> Doesn'tHaveFeud(x, DiamondMine)", "Imperium(x) -> HasFeud(x, DiamondMine)", "Imperium(x) -> Doesn'tHaveFeud(x, DiamondMine)", "Imperium(x) -> HasFeud(x, DiamondMine)", "Imperium(x) -> Doesn'tHaveFeud(x, DiamondMine)", "Imperium(x) -> HasFeud(x, DiamondMine)", "Imperium(x) -> Doesn'tHaveFeud(x, DiamondMine)", "Imperium(x) -> HasFeud(x, DiamondMine)", "Imperium(x) -> Doesn'tHaveFeud(x, DiamondMine)", "Imperium(x) -> HasFeud(x, DiamondMine)", "Imperium(x) -> Doesn'tHaveFeud(x, DiamondMine)", "Imperium(x) -> HasFeud(x, DiamondMine)", "Imperium(x) -> Doesn'tHaveFeud(x, DiamondMine)", "Imperium(x) -> HasFeud(x, DiamondMine)", "Imperium(x) -> Doesn'tHaveFeud(x, DiamondMine)", "Imperium(x) -> HasFeud(x, DiamondMine)", "Imperium(x) -> Doesn'tHaveFeud(x, DiamondMine)", "Imperium(x) -> HasFeud(x, DiamondMine)", "Imperium(x) -> Doesn'tHaveFeud(x, DiamondMine)", "Imperium(x) -> HasFeud(x, DiamondMine)", "Imperium(x) -> Doesn'tHaveFeud(x, DiamondMine)", "Imperium(x) -> HasFeud(x, DiamondMine)", "Imperium(x) -> Doesn'tHaveFeud(x, DiamondMine)", "Imperium(x) -> HasFeud(x, DiamondMine)", "Imperium(x) -> Doesn'tHaveFeud(x, DiamondMine)", "Imperium(x) -> HasFeud(x, DiamondMine)", "Imperium(x) -> Doesn'tHaveFeud(x, DiamondMine)", "Imperium(x) -> HasFeud(x, DiamondMine)", "Imperium(x) -> Doesn'tHaveFeud(x, DiamondMine)", "Imperium(x) -> HasFeud(x, DiamondMine)", "Imperium(x) -> Doesn'tHaveFeud(x, DiamondMine)", "Imperium(x) -> HasFeud(x, DiamondMine)", "Imperium(x) -> Doesn'tHaveFeud(x, DiamondMine)", "Imperium(x) -> HasFeud(x, DiamondMine)", "Imperium(x) -> Doesn'tHaveFeud(x, DiamondMine)", "Imperium(x) -> HasFeud(x, DiamondMine)", "Imperium(x) -> Doesn'tHaveFeud(x, DiamondMine)", "Imperium(x) -> HasFeud(x, DiamondMine)", "Imperium(x) -> Doesn'tHaveFeud(x, DiamondMine)", "Imperium(x) -> HasFeud(x, DiamondMine)", "Imperium(x) -> Doesn'tHaveFeud(x, DiamondMine)", "Imperium(x) -> HasFeud(x, DiamondMine)", "Imperium(x) -> Doesn'tHaveFeud(x, DiamondMine)", "Imperium(x) -> HasFeud(x, DiamondMine)", "Imperium(x) -> Doesn'tHaveFeud(x, DiamondMine)", "Imperium(x) -> HasFeud(x, DiamondMine)", "Imperium(x) -> Doesn'tHaveFeud(x, DiamondMine)", "Imperium(x) -> HasFeud(x, DiamondMine)", "Imperium(x) -> Doesn'tHaveFeud(x, DiamondMine)", "Imperium(x) -> HasFeud(x, DiamondMine)", "Imperium(x) -> Doesn'tHaveFeud(x, DiamondMine)", "Imperium(x) -> HasFeud(x, DiamondMine)", "Imperium(x) -> Doesn'tHaveFeud(x, DiamondMine)", "Imperium(x) -> HasFeud(x, DiamondMine)", "Imperium(x) -> Doesn'tHaveFeud(x, DiamondMine)", "Imperium(x) -> HasFeud(x, DiamondMine)", "Imperium(x) -> Doesn'tHaveFeud(x, DiamondMine)", "Imperium(x) -> HasFeud(x, DiamondMine)", "Imperium(x) -> Doesn'tHaveFeud(x, DiamondMine)", "Imperium(x) -> HasFeud(x, DiamondMine)", "Imperium(x) -> Doesn'tHaveFeud(x, DiamondMine)", "Imperium(x) -> HasFeud(x, DiamondMine)", "Imperium(x) -> Doesn'tHaveFeud(x, DiamondMine)", "Imperium(x) -> HasFeud(x, DiamondMine)", "Imperium(x) -> Doesn'tHaveFeud(x, DiamondMine)", "Imperium(x) -> HasFeud(x, DiamondMine)", "Imperium(x) -> Doesn'tHaveFeud(x, DiamondMine)", "Imperium(x) -> HasFeud(x, DiamondMine)", "Imperium(x) -> Doesn'tHaveFeud(x, DiamondMine)", "Imperium(x) -> HasFeud(x, DiamondMine)", "Imperium(x) -> Doesn'tHaveFeud(x, DiamondMine)", "Imperium(x) -> HasFeud(x, DiamondMine)", "Imperium(x) -> Doesn'tHaveFeud(x, DiamondMine)", "Imperium(x) -> HasFeud(x, DiamondMine)", "Imperium(x) -> Doesn'tHaveFeud(x, DiamondMine)", "Imperium(x) -> HasFeud(x, DiamondMine)", "Imperium(x) -> Doesn'tHaveFeud(x, DiamondMine)", "Imperium(x) -> HasFeud(x, DiamondMine)", "Imperium(x) -> Doesn'tHaveFeud(x, DiamondMine)", "Imperium(x) -> HasFeud(x, DiamondMine)", "Imperium(x) -> Doesn'tHaveFeud(x, DiamondMine)", "Imperium(x) -> HasFeud(x, DiamondMine)", "Imperium(x) -> Doesn'tHaveFeud(x, DiamondMine)", "Imperium(x) -> HasFeud(x, DiamondMine)", "Imperium(x) -> Doesn'tHaveFeud(x, DiamondMine)", "Imperium(x) -> HasFeud(x, DiamondMine)", "Imperium(x) -> Doesn'tHaveFeud(x, DiamondMine)", "Imperium(x) -> HasFeud(x, DiamondMine)", "Imperium(x) -> Doesn'tHaveFeud(x, DiamondMine)", "Imperium(x) -> HasFeud(x, DiamondMine)", "Imperium(x) -> Doesn'tHaveFeud(x, DiamondMine)", "Imperium(x) -> HasFeud(x, DiamondMine)", "Imperium(x) -> Doesn'tHaveFeud(x, DiamondMine)", "Imperium(x) -> HasFeud(x, DiamondMine)", "Imperium(x) -> Doesn'tHaveFeud(x, DiamondMine)", "Imperium(x) -> HasFeud(x, DiamondMine)", "Imperium(x) -> Doesn'tHaveFeud(x, DiamondMine)", "Imperium(x) -> HasFeud(x, DiamondMine)", "Imperium(x) -> Doesn'tHaveFeud(x, DiamondMine)", "Imperium(x) -> HasFeud(x, DiamondMine)", "Imperium(x) -> Doesn'tHaveFeud(x, DiamondMine)", "Imperium(x) -> HasFeud(x, DiamondMine)", "Imperium(x) -> Doesn'tHaveFeud(x, DiamondMine)", "Imperium(x) -> HasFeud(x, DiamondMine)", "Imperium(x) -> Doesn'tHaveFeud(x, DiamondMine)", "Imperium(x) -> HasFeud(x, DiamondMine)", "Imperium(x) -> Doesn'tHaveFeud(x, DiamondMine)", "Imperium(x) -> HasFeud(x, DiamondMine)", "Imperium(x) -> Doesn'tHaveFeud(x, DiamondMine)", "Imperium(x) -> HasFeud(x, DiamondMine)", "Imperium(x) -> Doesn'tHaveFeud(x, DiamondMine)", "Imperium(x) -> HasFeud(x, DiamondMine)", "Imperium(x) -> Doesn'tHaveFeud(x, DiamondMine)", "Imperium(x) -> HasFeud(x, DiamondMine)", "Imperium(x) -> Doesn'tHaveFeud(x, DiamondMine)", "Imperium(x) -> HasFeud(x, DiamondMine)", "Imperium(x) -> Doesn'tHaveFeud(x, DiamondMine)", "Imperium(x) -> HasFeud(x, DiamondMine)", "Imperium(x) -> Doesn'tHaveFeud(x, DiamondMine)", "Imperium(x) -> HasFeud(x, DiamondMine)", "Imperium(x) -> Doesn'tHaveFeud(x, DiamondMine)", "Imperium(x) -> HasFeud(x, DiamondMine)", "Imperium(x) -> Doesn'tHaveFeud(x, DiamondMine)", "Imperium(x) -> HasFeud(x, DiamondMine)", "Imperium(x) -> Doesn'tHaveFeud(x, DiamondMine)", "Imperium(x) -> HasFeud(x, DiamondMine)", "Imperium(x) -> Doesn'tHaveFeud(x, DiamondMine)", "Imperium(x) -> HasFeud(x, DiamondMine)", "Imperium(x) -> Doesn'tHaveFeud(x, DiamondMine)", "Imperium(x) -> HasFeud(x, DiamondMine)", "Imperium(x) -> Doesn'tHaveFeud(x, DiamondMine)", "Imperium(x) -> HasFeud(x, DiamondMine)", "Imperium(x) -> Doesn'tHaveFeud(x, DiamondMine)", "Imperium(x) -> HasFeud(x, DiamondMine)", "Imperium(x) -> Doesn'tHaveFeud(x, DiamondMine)", "Imperium(x) -> HasFeud(x, DiamondMine)", "Imperium(x) -> Doesn'tHaveFeud(x, DiamondMine)", "Imperium(x) -> HasFeud(x, DiamondMine)", "Imperium(x) -> Doesn'tHaveFeud(x, DiamondMine)", "Imperium(x) -> HasFeud(x, DiamondMine)", "Imperium(x) -> Doesn'tHaveFeud(x, DiamondMine)", "Imperium(x) -> HasFeud(x, DiamondMine)", "Imperium(x) -> Doesn'tHaveFeud(x, DiamondMine)", "Imperium(x) -> HasFeud(x, DiamondMine)", "Imperium(x) -> Doesn'tHaveFeud(x, DiamondMine)", "Imperium(x) -> HasFeud(x, DiamondMine)", "Imperium(x) -> Doesn'tHaveFeud(x, DiamondMine)", "Imperium(x) -> HasFeud(x, DiamondMine)", "Imperium(x) -> Doesn'tHaveFeud(x, DiamondMine)", "Imperium(x) -> HasFeud(x, DiamondMine)", "Imperium(x) -> Doesn'tHaveFeud(x, DiamondMine)", "Imperium(x) -> HasFeud(x, DiamondMine)", "Imperium(x) -> Doesn'tHaveFeud(x, DiamondMine)", "Imperium(x) -> HasFeud(x, DiamondMine)", "Imperium(x) -> Doesn'tHaveFeud(x, DiamondMine)", "Imperium(x) -> HasFeud(x, DiamondMine)", "Imperium(x) -> Doesn'tHaveFeud(x, DiamondMine)", "Imperium(x) -> HasFeud(x, DiamondMine)", "Imperium(x) -> Doesn'tHaveFeud(x, DiamondMine)", "Imperium(x) -> HasFeud(x, DiamondMine)", "Imperium(x) -> Doesn'tHaveFeud(x, DiamondMine)", "Imperium(x) -> HasFeud(x, DiamondMine)", "Imperium(x) -> Doesn'tHaveFeud(x, DiamondMine)", "Imperium(x) -> HasFeud(x, DiamondMine)", "Imperium(x) -> Doesn'tHaveFeud(x, DiamondMine)", "Imperium(x) -> HasFeud(x, DiamondMine)", "Imperium(x) -> Doesn'tHaveFeud(x, DiamondMine)", "Imperium(x) -> HasFeud(x, DiamondMine)", "Imperium(x) -> Doesn'tHaveFeud(x, DiamondMine)", "Imperium(x) -> HasFeud(x, DiamondMine)", "Imperium(x) -> Doesn'tHaveFeud(x, DiamondMine)", "Imperium(x) -> HasFeud(x, DiamondMine)", "Imperium(x) -> Doesn'tHaveFeud(x, DiamondMine)", "Imperium(x) -> HasFeud(x, DiamondMine)", "Imperium(x) -> Doesn'tHaveFeud(x, DiamondMine)", "Imperium(x) -> HasFeud(x, DiamondMine)", "Imperium(x) -> Doesn'tHaveFeud(x, DiamondMine)", "Imperium(x) -> HasFeud(x, DiamondMine)", "Imperium(x) -> Doesn'tHaveFeud(x, DiamondMine)", "Imperium(x) -> HasFeud(x, DiamondMine)", "Imperium(x) -> Doesn'tHaveFeud(x, DiamondMine)", "Imperium(x) -> HasFeud(x, DiamondMine)", "Imperium(x) -> Doesn'tHaveFeud(x, DiamondMine)", "Imperium(x) -> HasFeud(x, DiamondMine)", "Imperium(x) -> Doesn'tHaveFeud(x, DiamondMine)", "Imperium(x) -> HasFeud(x, DiamondMine)", "Imperium(x) -> Doesn'tHaveFeud(x, DiamondMine)", "Imperium(x) -> HasFeud(x, DiamondMine)", "Imperium(x) -> Doesn'tHaveFeud(x, DiamondMine)", "Imperium(x) -> HasFeud(x, DiamondMine)", "Imperium(x) -> Doesn'tHaveFeud(x, DiamondMine)", "Imperium(x) -> HasFeud(x, DiamondMine)", "Imperium(x) -> Doesn'tHaveFeud(x, DiamondMine)", "Imperium(x) -> HasFeud(x, DiamondMine)", "Imperium(x) -> Doesn'tHaveFeud(x, DiamondMine)", "Imperium(x) -> HasFeud(x, DiamondMine)", "Imperium(x) -> Doesn'tHaveFeud(x, DiamondMine)", "Imperium(x) -> HasFeud(x, DiamondMine)", "Imperium(x) -> Doesn'tHaveFeud(x, DiamondMine)", "Imperium(x) -> HasFeud(x, DiamondMine)", "Imperium(x) -> Doesn'tHaveFeud(x, DiamondMine)", "Imperium(x) -> HasFeud(x, DiamondMine)", "Imperium(x) -> Doesn'tHaveFeud(x, DiamondMine)"], "conclusion": "Imperium(x) -> HasFeud(x, Diamond", "error_type": "<class 'nltk.sem.logic.LogicalExpressionException'>", "error_message": "End of input found.  Expected token ')'.\nImperium(x) -> HasFeud(x, Diamond\n                                 ^", "stack_trace": "Traceback (most recent call last):\n  File \"/data/gpfs/projects/punim0478/bansaab/linc2/eval/tasks/owafoltask.py\", line 577, in _process_neurosymbolic\n    parsed = json.loads(gen)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/json/__init__.py\", line 346, in loads\n    return _default_decoder.decode(s)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/json/decoder.py\", line 337, in decode\n    obj, end = self.raw_decode(s, idx=_w(s, 0).end())\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/json/decoder.py\", line 355, in raw_decode\n    raise JSONDecodeError(\"Expecting value\", s, err.value) from None\njson.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/sem/logic.py\", line 270, in token\n    tok = self._buffer[self._currentIndex]\nIndexError: list index out of range\n\nThe above exception was the direct cause of the following exception:\n\nTraceback (most recent call last):\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/sem/logic.py\", line 562, in assertNextToken\n    tok = self.token()\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/sem/logic.py\", line 276, in token\n    raise ExpectedMoreTokensException(self._currentIndex + 1) from e\nnltk.sem.logic.ExpectedMoreTokensException: End of input found.  More tokens expected.\n\nThe above exception was the direct cause of the following exception:\n\nTraceback (most recent call last):\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/sem/logic.py\", line 154, in parse\n    result = self.process_next_expression(None)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/sem/logic.py\", line 297, in process_next_expression\n    return self.attempt_adjuncts(accum, context)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/sem/logic.py\", line 323, in attempt_adjuncts\n    expression = self.attempt_BooleanExpression(expression, context)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/sem/logic.py\", line 485, in attempt_BooleanExpression\n    factory, expression, self.process_next_expression(tok)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/sem/logic.py\", line 290, in process_next_expression\n    accum = self.handle(tok, context)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/sem/logic.py\", line 303, in handle\n    return self.handle_variable(tok, context)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/sem/logic.py\", line 359, in handle_variable\n    self.assertNextToken(Tokens.CLOSE)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/sem/logic.py\", line 564, in assertNextToken\n    raise ExpectedMoreTokensException(\nnltk.sem.logic.ExpectedMoreTokensException: End of input found.  Expected token ')'.\n\nThe above exception was the direct cause of the following exception:\n\nTraceback (most recent call last):\n  File \"/data/gpfs/projects/punim0478/bansaab/linc2/eval/tasks/utils.py\", line 215, in evaluate\n    c = read_expr(conclusion)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/sem/logic.py\", line 957, in fromstring\n    return cls._logic_parser.parse(s, signature)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/sem/logic.py\", line 159, in parse\n    raise LogicalExpressionException(None, msg) from e\nnltk.sem.logic.LogicalExpressionException: End of input found.  Expected token ')'.\nImperium(x) -> HasFeud(x, Diamond\n                                 ^\n"}
{"timestamp": "2025-09-16T18:53:17.341689", "premises": ["all x. (ProfessionalWrestlingStable(x) -> DiamondMine(x) | DiamondMine(x) -> ProfessionalWrestlingStable(x))", "all x. (ProfessionalWrestlingStable(x) -> DiamondMine(x))", "all x. (Leads(x, DiamondMine) -> RoderickStrong(x))", "all x. (DiamondMine(x) -> CreedBrothers(x))", "all x. (DiamondMine(x) -> IvyNile(x))", "all x. (Imperium(x) -> DiamondMine(x))", "all x. (Imperium(x) -> -DiamondMine(x))"], "conclusion": "all x. (A(x) -> B(x))", "error_type": "<class 'nltk.inference.prover9.Prover9FatalException'>", "error_message": "(FATAL)\n%%ERROR: The following symbols are used with multiple arities: DiamondMine/1, DiamondMine/0.\n\n\nFatal error:  The following symbols are used with multiple arities: DiamondMine/1, DiamondMine/0", "stack_trace": "Traceback (most recent call last):\n  File \"/data/gpfs/projects/punim0478/bansaab/linc2/eval/tasks/owafoltask.py\", line 577, in _process_neurosymbolic\n    parsed = json.loads(gen)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/json/__init__.py\", line 346, in loads\n    return _default_decoder.decode(s)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/json/decoder.py\", line 337, in decode\n    obj, end = self.raw_decode(s, idx=_w(s, 0).end())\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/json/decoder.py\", line 355, in raw_decode\n    raise JSONDecodeError(\"Expecting value\", s, err.value) from None\njson.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"/data/gpfs/projects/punim0478/bansaab/linc2/eval/tasks/utils.py\", line 219, in evaluate\n    truth_value = prover.prove(c, p_list)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/inference/api.py\", line 37, in prove\n    return self._prove(goal, assumptions, verbose)[0]\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/inference/prover9.py\", line 327, in _prove\n    stdout, returncode = self._call_prover9(\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/inference/prover9.py\", line 370, in _call_prover9\n    raise Prover9FatalException(returncode, errormsg)\nnltk.inference.prover9.Prover9FatalException: (FATAL)\n%%ERROR: The following symbols are used with multiple arities: DiamondMine/1, DiamondMine/0.\n\n\nFatal error:  The following symbols are used with multiple arities: DiamondMine/1, DiamondMine/0\n"}
{"timestamp": "2025-09-16T18:53:17.350325", "premises": ["TEXT: Diamond Mine is a professional wrestling stable, formed in WWE.", "(professionalWrestlingStable(x) -> diamondMine(x))", "leader(diamondMine, strong)", "include(diamondMine, creedBrothers)", "include(diamondMine, ivyNile)", "feud(imperium, diamondMine)"], "conclusion": "-feud(imperium, diamondMine)", "error_type": "<class 'nltk.sem.logic.LogicalExpressionException'>", "error_message": "Unexpected token: 'Diamond'.\nTEXT: Diamond Mine is a professional wrestling stable, formed in WWE.\n      ^", "stack_trace": "Traceback (most recent call last):\n  File \"/data/gpfs/projects/punim0478/bansaab/linc2/eval/tasks/owafoltask.py\", line 577, in _process_neurosymbolic\n    parsed = json.loads(gen)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/json/__init__.py\", line 346, in loads\n    return _default_decoder.decode(s)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/json/decoder.py\", line 337, in decode\n    obj, end = self.raw_decode(s, idx=_w(s, 0).end())\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/json/decoder.py\", line 355, in raw_decode\n    raise JSONDecodeError(\"Expecting value\", s, err.value) from None\njson.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/sem/logic.py\", line 156, in parse\n    raise UnexpectedTokenException(self._currentIndex + 1, self.token(0))\nnltk.sem.logic.UnexpectedTokenException: Unexpected token: 'Diamond'.\n\nThe above exception was the direct cause of the following exception:\n\nTraceback (most recent call last):\n  File \"/data/gpfs/projects/punim0478/bansaab/linc2/eval/tasks/utils.py\", line 216, in evaluate\n    p_list = [read_expr(p) for p in premises]\n  File \"/data/gpfs/projects/punim0478/bansaab/linc2/eval/tasks/utils.py\", line 216, in <listcomp>\n    p_list = [read_expr(p) for p in premises]\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/sem/logic.py\", line 957, in fromstring\n    return cls._logic_parser.parse(s, signature)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/sem/logic.py\", line 159, in parse\n    raise LogicalExpressionException(None, msg) from e\nnltk.sem.logic.LogicalExpressionException: Unexpected token: 'Diamond'.\nTEXT: Diamond Mine is a professional wrestling stable, formed in WWE.\n      ^\n"}
{"timestamp": "2025-09-16T18:53:17.354571", "premises": ["exists x. (ProfessionalWrestlingStable(x) & DiamondMine(x))", "exists x. (Leads(x, DiamondMine))", "exists x. (MembersOf(x, DiamondMine) & CreedBrothers(x))", "exists x. (MembersOf(x, DiamondMine) & IvyNile(x))", "exists x. (Opponent(x, DiamondMine)) & exists y. (ProfessionalWrestlingStable(y) & Imperium(y))", "exists x. (Opponent(x, DiamondMine) & DiamondMine(x) & Imperium(y) & Opponent(y, DiamondMine))"], "conclusion": "exists x. (ProfessionalWrestlingStable(x) & DiamondMine(x) & IvyNile(x)) & exists y. (Opponent(y, DiamondMine) & Imperium(y))", "error_type": "<class 'nltk.inference.prover9.Prover9FatalException'>", "error_message": "(FATAL)\n%%ERROR: The following symbols are used with multiple arities: DiamondMine/1, DiamondMine/0.\n\n\nFatal error:  The following symbols are used with multiple arities: DiamondMine/1, DiamondMine/0", "stack_trace": "Traceback (most recent call last):\n  File \"/data/gpfs/projects/punim0478/bansaab/linc2/eval/tasks/owafoltask.py\", line 577, in _process_neurosymbolic\n    parsed = json.loads(gen)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/json/__init__.py\", line 346, in loads\n    return _default_decoder.decode(s)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/json/decoder.py\", line 337, in decode\n    obj, end = self.raw_decode(s, idx=_w(s, 0).end())\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/json/decoder.py\", line 355, in raw_decode\n    raise JSONDecodeError(\"Expecting value\", s, err.value) from None\njson.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"/data/gpfs/projects/punim0478/bansaab/linc2/eval/tasks/utils.py\", line 219, in evaluate\n    truth_value = prover.prove(c, p_list)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/inference/api.py\", line 37, in prove\n    return self._prove(goal, assumptions, verbose)[0]\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/inference/prover9.py\", line 327, in _prove\n    stdout, returncode = self._call_prover9(\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/inference/prover9.py\", line 370, in _call_prover9\n    raise Prover9FatalException(returncode, errormsg)\nnltk.inference.prover9.Prover9FatalException: (FATAL)\n%%ERROR: The following symbols are used with multiple arities: DiamondMine/1, DiamondMine/0.\n\n\nFatal error:  The following symbols are used with multiple arities: DiamondMine/1, DiamondMine/0\n"}
{"timestamp": "2025-09-16T18:53:17.361490", "premises": ["all x. (ProfessionalWrestlingStable(x) -> DiamondMine(x))", "all x. (Leads(x, DiamondMine) -> RoderickStrong(x))", "all x. (MemberOf(x, DiamondMine) -> CreedBrothers(x))", "all x. (MemberOf(x, DiamondMine) -> IvyNile(x))", "all x. (ProfessionalWrestlingStable(x) -> DiamondMine(x))", "all x. (HasFeudWith(x, DiamondMine) -> Imperium(x))", "all x. (Leads(x, DiamondMine) -> RoderickStrong(x))", "all x. (MemberOf(x, DiamondMine) -> CreedBrothers(x))", "all x. (MemberOf(x, DiamondMine) -> IvyNile(x))", "all x. (ProfessionalWrestlingStable(x) -> DiamondMine(x))", "all x. (HasFeudWith(x, DiamondMine) -> Imperium(x))", "all x. (Leads(x, DiamondMine) -> RoderickStrong(x))", "all x. (MemberOf(x, DiamondMine) -> CreedBrothers(x))", "all x. (MemberOf(x, DiamondMine) -> IvyNile(x))", "all x. (ProfessionalWrestlingStable(x) -> DiamondMine(x))", "all x. (HasFeudWith(x, DiamondMine) -> Imperium(x))", "all x. (Leads(x, DiamondMine) -> RoderickStrong(x))", "all x. (MemberOf(x, DiamondMine) -> CreedBrothers(x))", "all x. (MemberOf(x, DiamondMine) -> IvyNile(x))", "all x. (ProfessionalWrestlingStable(x) -> DiamondMine(x))", "all x. (HasFeudWith(x, DiamondMine) -> Imperium(x))", "all x. (Leads(x, DiamondMine) -> RoderickStrong(x))", "all x. (MemberOf(x, DiamondMine) -> CreedBrothers(x))", "all x. (MemberOf(x, DiamondMine) -> IvyNile(x))", "all x. (ProfessionalWrestlingStable(x) -> DiamondMine(x))", "all x. (HasFeudWith(x, DiamondMine) -> Imperium(x))", "all x. (Leads(x, DiamondMine) -> RoderickStrong(x))", "all x. (MemberOf(x, DiamondMine) -> CreedBrothers(x))", "all x. (MemberOf(x, DiamondMine) -> IvyNile(x))", "all x. (ProfessionalWrestlingStable(x) -> DiamondMine(x))", "all x. (HasFeudWith(x, DiamondMine) -> Imperium(x))", "all x. (Leads(x, DiamondMine) -> RoderickStrong(x))", "all x. (MemberOf(x, DiamondMine) -> CreedBrothers(x))", "all x. (MemberOf(x, DiamondMine) -> IvyNile(x))", "all x. (ProfessionalWrestlingStable(x) -> DiamondMine(x))", "all x. (HasFeudWith(x, DiamondMine) -> Imperium(x))", "all x. (Leads(x, DiamondMine) -> RoderickStrong(x))", "all x. (MemberOf(x, DiamondMine) -> CreedBrothers(x))", "all x. (MemberOf(x, DiamondMine) -> IvyNile(x))", "all x. (ProfessionalWrestlingStable(x) -> DiamondMine(x))", "all x. (HasFeudWith(x, DiamondMine) -> Imperium(x))", "all x. (Leads(x, DiamondMine) -> RoderickStrong(x))", "all x. (MemberOf(x, DiamondMine) -> CreedBrothers(x))", "all x. (MemberOf(x, DiamondMine) -> IvyNile(x))", "all x. (ProfessionalWrestlingStable(x) -> DiamondMine(x))", "all x. (HasFeudWith(x, DiamondMine) -> Imperium(x))", "all x. (Leads(x, DiamondMine) -> RoderickStrong(x))", "all x. (MemberOf(x, DiamondMine) -> CreedBrothers(x))", "all x. (MemberOf(x, DiamondMine) -> IvyNile(x))", "all x. (ProfessionalWrestlingStable(x) -> DiamondMine(x))", "all x. (HasFeudWith(x, DiamondMine) -> Imperium(x))", "all x. (Leads(x, DiamondMine) -> RoderickStrong(x))", "all x. (MemberOf(x, DiamondMine) -> CreedBrothers(x))", "all x. (MemberOf(x, DiamondMine) -> IvyNile(x))", "all x. (ProfessionalWrestlingStable(x) -> DiamondMine(x))", "all x. (HasFeudWith(x, DiamondMine) -> Imperium(x))", "all x. (Leads(x, DiamondMine) -> RoderickStrong(x))", "all x. (MemberOf(x, DiamondMine) -> CreedBrothers(x))", "all x. (MemberOf(x, DiamondMine) -> IvyNile(x))", "all x. (ProfessionalWrestlingStable(x) -> DiamondMine(x))", "all x. (HasFeudWith(x, DiamondMine) -> Imperium(x))", "all x. (Leads(x, DiamondMine) -> RoderickStrong(x))", "all x. (MemberOf(x, DiamondMine) -> CreedBrothers(x))", "all x. (MemberOf(x, DiamondMine) -> IvyNile(x))", "all x. (ProfessionalWrestlingStable(x) -> DiamondMine(x))", "all x. (HasFeudWith(x, DiamondMine) -> Imperium(x))", "all x. (Leads(x, DiamondMine) -> RoderickStrong(x))", "all x. (MemberOf(x, DiamondMine) -> CreedBrothers(x))", "all x. (MemberOf(x, DiamondMine) -> IvyNile(x))", "all x. (ProfessionalWrestlingStable(x) -> DiamondMine(x))", "all x. (HasFeudWith(x, DiamondMine) -> Imperium(x))", "all x. (Leads(x, DiamondMine) -> RoderickStrong(x))", "all x. (MemberOf(x, DiamondMine) -> CreedBrothers(x))", "all x. (MemberOf(x, DiamondMine) -> IvyNile(x))", "all x. (ProfessionalWrestlingStable(x) -> DiamondMine(x))", "all x. (HasFeudWith(x, DiamondMine) -> Imperium(x))", "all x. (Leads(x, DiamondMine) -> RoderickStrong(x))", "all x. (MemberOf(x, DiamondMine) -> CreedBrothers(x))", "all x. (MemberOf(x, DiamondMine) -> IvyNile(x))", "all x. (ProfessionalWrestlingStable(x) -> DiamondMine(x))", "all x. (HasFeudWith(x, DiamondMine) -> Imperium(x))", "all x. (Leads(x, DiamondMine) -> RoderickStrong(x))", "all x. (MemberOf(x, DiamondMine) -> CreedBrothers(x))", "all x. (MemberOf(x, DiamondMine) -> IvyNile(x))", "all x. (ProfessionalWrestlingStable(x) -> DiamondMine(x))", "all x. (HasFeudWith(x, DiamondMine) -> Imperium(x))", "all x. (Leads(x, DiamondMine) -> RoderickStrong(x))", "all x. (MemberOf(x, DiamondMine) -> CreedBrothers(x))", "all x. (MemberOf(x, DiamondMine) -> IvyNile(x))", "all x. (ProfessionalWrestlingStable(x) -> DiamondMine(x))", "all x. (HasFeudWith(x, DiamondMine) -> Imperium(x))", "all x. (Leads(x, DiamondMine) -> RoderickStrong(x))", "all x. (MemberOf(x, DiamondMine) -> CreedBrothers(x))", "all x. (MemberOf(x, DiamondMine) -> IvyNile(x))", "all x. (ProfessionalWrestlingStable(x) -> DiamondMine(x))", "all x. (HasFeudWith(x, DiamondMine) -> Imperium(x))", "all x. (Leads(x, DiamondMine) -> RoderickStrong(x))", "all x. (MemberOf(x, DiamondMine) -> CreedBrothers(x))", "all x. (MemberOf(x, DiamondMine) -> IvyNile(x))", "all x. (ProfessionalWrestlingStable(x) -> DiamondMine(x))", "all x. (HasFeudWith(x, DiamondMine) -> Imperium(x))", "all x. (Leads(x, DiamondMine) -> RoderickStrong(x))", "all x. (MemberOf(x, DiamondMine) -> CreedBrothers(x))", "all x. (MemberOf(x, DiamondMine) -> IvyNile(x))", "all x. (ProfessionalWrestlingStable(x) -> DiamondMine(x))", "all x. (HasFeudWith(x, DiamondMine) -> Imperium(x))", "all x. (Leads(x, DiamondMine) -> RoderickStrong(x))", "all x. (MemberOf(x, DiamondMine) -> CreedBrothers(x))", "all x. (MemberOf(x, DiamondMine) -> IvyNile(x))", "all x. (ProfessionalWrestlingStable(x) -> DiamondMine(x))", "all x. (HasFeudWith(x, DiamondMine) -> Imperium(x))", "all x. (Leads(x, DiamondMine) -> RoderickStrong(x))", "all x. (MemberOf(x, DiamondMine) -> CreedBrothers(x))", "all x. (MemberOf(x, DiamondMine) -> IvyNile(x))", "all x. (ProfessionalWrestlingStable(x) -> DiamondMine(x))", "all x. (HasFeudWith(x, DiamondMine) -> Imperium(x))", "all x. (Leads(x, DiamondMine) -> RoderickStrong(x))", "all x. (MemberOf(x, DiamondMine) -> CreedBrothers(x))", "all x. (MemberOf(x, DiamondMine) -> IvyNile(x))", "all x. (ProfessionalWrestlingStable(x) -> DiamondMine(x))", "all x. (HasFeudWith(x, DiamondMine) -> Imperium(x))", "all x. (Leads(x, DiamondMine) -> RoderickStrong(x))", "all x. (MemberOf(x, DiamondMine) -> CreedBrothers(x))", "all x. (MemberOf(x, DiamondMine) -> IvyNile(x))", "all x. (ProfessionalWrestlingStable(x) -> DiamondMine(x))", "all x. (HasFeudWith(x, DiamondMine) -> Imperium(x))", "all x. (Leads(x, DiamondMine) -> RoderickStrong(x))", "all x. (MemberOf(x, DiamondMine) -> CreedBrothers(x))", "all x. (MemberOf(x, DiamondMine) -> IvyNile(x))", "all x. (ProfessionalWrestlingStable(x) -> DiamondMine(x))", "all x. (HasFeudWith(x, DiamondMine) -> Imperium(x))", "all x. (Leads(x, DiamondMine) -> RoderickStrong(x))", "all x. (MemberOf(x, DiamondMine) -> CreedBrothers(x))", "all x. (MemberOf(x, DiamondMine) -> IvyNile(x))", "all x. (ProfessionalWrestlingStable(x) -> DiamondMine(x))", "all x. (HasFeudWith(x, DiamondMine) -> Imperium(x))", "all x. (Leads(x, DiamondMine) -> RoderickStrong(x))", "all x. (MemberOf(x, DiamondMine) -> CreedBrothers(x))", "all x. (MemberOf(x, DiamondMine) -> IvyNile(x))", "all x. (ProfessionalWrestlingStable(x) -> DiamondMine(x))", "all x. (HasFeudWith(x, DiamondMine) -> Imperium(x))", "all x. (Leads(x, DiamondMine) -> RoderickStrong(x))", "all x. (MemberOf(x, DiamondMine) -> CreedBrothers(x))", "all x. (MemberOf(x, DiamondMine) -> IvyNile(x))", "all x. (ProfessionalWrestlingStable(x) -> DiamondMine(x))", "all x. (HasFeudWith(x, DiamondMine) -> Imperium(x))", "all x. (Leads(x, DiamondMine) -> RoderickStrong(x))", "all x. (MemberOf(x, DiamondMine) -> CreedBrothers(x))", "all x. (MemberOf(x, DiamondMine) -> IvyNile(x))", "all x. (ProfessionalWrestlingStable(x) -> DiamondMine(x))", "all x. (HasFeudWith(x, DiamondMine) -> Imperium(x))", "all x. (Leads(x, DiamondMine) -> RoderickStrong(x))", "all x. (MemberOf(x, DiamondMine) -> CreedBrothers(x))", "all x. (MemberOf(x, DiamondMine) -> IvyNile(x))", "all x. (ProfessionalWrestlingStable(x) -> DiamondMine(x))", "all x. (HasFeudWith(x, DiamondMine) -> Imperium(x))", "all x. (Leads(x, DiamondMine) -> RoderickStrong(x))", "all x. (MemberOf(x, DiamondMine) -> CreedBrothers(x))", "all x. (MemberOf(x, DiamondMine) -> IvyNile(x))", "all x. (ProfessionalWrestlingStable(x) -> DiamondMine(x))", "all x. (HasFeudWith(x, DiamondMine) -> Imperium(x))", "all x. (Leads(x, DiamondMine) -> RoderickStrong(x))", "all x. (MemberOf(x, DiamondMine) -> CreedBrothers(x))", "all x. (MemberOf(x, DiamondMine) -> IvyNile(x))", "all x. (ProfessionalWrestlingStable(x) -> DiamondMine(x))", "all x. (HasFeudWith(x, DiamondMine) -> Imperium(x))", "all x. (Leads(x, DiamondMine) -> RoderickStrong(x))", "all x. (MemberOf(x, DiamondMine) -> CreedBrothers(x))", "all x. (MemberOf(x, DiamondMine) -> IvyNile(x))", "all x. (ProfessionalWrestlingStable(x) -> DiamondMine(x))", "all x. (HasFeudWith(x, DiamondMine) -> Imperium(x))", "all x. (Leads(x, DiamondMine) -> RoderickStrong(x))", "all x. (MemberOf(x, DiamondMine) -> CreedBrothers(x))", "all x. (MemberOf(x, DiamondMine) -> IvyNile(x))", "all x. (ProfessionalWrestlingStable(x) -> DiamondMine(x))", "all x. (HasFeudWith(x, DiamondMine) -> Imperium(x))", "all x. (Leads(x, DiamondMine) -> RoderickStrong(x))", "all x. (MemberOf(x, DiamondMine) -> CreedBrothers(x))", "all x. (MemberOf(x, DiamondMine) -> IvyNile(x))", "all x. (ProfessionalWrestlingStable(x) -> DiamondMine(x))", "all x. (HasFeudWith(x, DiamondMine) -> Imperium(x))", "all x. (Leads(x, DiamondMine) -> RoderickStrong(x))", "all x. (MemberOf(x, DiamondMine) -> CreedBrothers(x))", "all x. (MemberOf(x, DiamondMine) -> IvyNile(x))", "all x. (ProfessionalWrestlingStable(x) -> DiamondMine(x))", "all x. (HasFeudWith(x, DiamondMine) -> Imperium(x))", "all x. (Leads(x, DiamondMine) -> RoderickStrong(x))", "all x. (MemberOf(x, DiamondMine) -> CreedBrothers(x))", "all x. (MemberOf(x, DiamondMine) -> IvyNile(x))", "all x. (ProfessionalWrestlingStable(x) -> DiamondMine(x))", "all x. (HasFeudWith(x, DiamondMine) -> Imperium(x))", "all x. (Leads(x, DiamondMine) -> RoderickStrong(x))", "all x. (MemberOf(x, DiamondMine) -> CreedBrothers(x))", "all x. (MemberOf(x, DiamondMine) -> IvyNile(x))", "all x. (ProfessionalWrestlingStable(x) -> DiamondMine(x))", "all x. (HasFeudWith(x, DiamondMine) -> Imperium(x))", "all x. (Leads(x, DiamondMine) -> RoderickStrong(x))", "all x. (MemberOf(x, DiamondMine) -> CreedBrothers(x))", "all x. (MemberOf(x, DiamondMine) -> IvyNile(x))", "all x. (ProfessionalWrestlingStable(x) -> DiamondMine(x))", "all x. (HasFeudWith(x, DiamondMine) -> Imperium(x))", "all x. (Leads(x, DiamondMine) -> RoderickStrong(x))", "all x. (MemberOf(x, DiamondMine) -> CreedBrothers(x))", "all x. (MemberOf(x, DiamondMine) -> IvyNile(x))", "all x. (ProfessionalWrestlingStable(x) -> DiamondMine(x))", "all x. (HasFeudWith(x, DiamondMine) -> Imperium(x))", "all x. (Leads(x, DiamondMine) -> RoderickStrong(x))", "all x. (MemberOf(x, DiamondMine) -> CreedBrothers(x))", "all x. (MemberOf(x, DiamondMine) -> IvyNile(x))", "all x. (ProfessionalWrestlingStable(x) -> DiamondMine(x))", "all x. (HasFeudWith(x, DiamondMine) -> Imperium(x))", "all x. (Leads(x, DiamondMine) -> RoderickStrong(x))", "all x. (MemberOf(x, DiamondMine) -> CreedBrothers(x))", "all x. (MemberOf(x, DiamondMine) -> IvyNile(x))", "all x. (ProfessionalWrestlingStable(x) -> DiamondMine(x))", "all x. (HasFeudWith(x, DiamondMine) -> Imperium(x))", "all x. (Leads(x, DiamondMine) -> RoderickStrong(x))", "all x. (MemberOf(x, DiamondMine) -> CreedBrothers(x))", "all x. (MemberOf(x, DiamondMine) -> IvyNile(x))", "all x. (ProfessionalWrestlingStable(x) -> DiamondMine(x))", "all x. (HasFeudWith(x, DiamondMine) -> Imperium(x))", "all x. (Leads(x, DiamondMine) -> RoderickStrong(x))", "all x. (MemberOf(x, DiamondMine) -> CreedBrothers(x))", "all x. (MemberOf(x, DiamondMine) -> IvyNile(x))", "all x. (ProfessionalWrestlingStable(x) -> DiamondMine(x))", "all x. (HasFeudWith(x, DiamondMine) -> Imperium(x))", "all x. (Leads(x, DiamondMine) -> RoderickStrong(x))", "all x. (MemberOf(x, DiamondMine) -> CreedBrothers(x))", "all x. (MemberOf(x, DiamondMine) -> IvyNile(x))"], "conclusion": "all x", "error_type": "<class 'nltk.sem.logic.LogicalExpressionException'>", "error_message": "End of input found.  Expression expected.\nall x\n      ^", "stack_trace": "Traceback (most recent call last):\n  File \"/data/gpfs/projects/punim0478/bansaab/linc2/eval/tasks/owafoltask.py\", line 577, in _process_neurosymbolic\n    parsed = json.loads(gen)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/json/__init__.py\", line 346, in loads\n    return _default_decoder.decode(s)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/json/decoder.py\", line 337, in decode\n    obj, end = self.raw_decode(s, idx=_w(s, 0).end())\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/json/decoder.py\", line 355, in raw_decode\n    raise JSONDecodeError(\"Expecting value\", s, err.value) from None\njson.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/sem/logic.py\", line 154, in parse\n    result = self.process_next_expression(None)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/sem/logic.py\", line 290, in process_next_expression\n    accum = self.handle(tok, context)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/sem/logic.py\", line 312, in handle\n    return self.handle_quant(tok, context)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/sem/logic.py\", line 417, in handle_quant\n    raise ExpectedMoreTokensException(\nnltk.sem.logic.ExpectedMoreTokensException: End of input found.  Expression expected.\n\nThe above exception was the direct cause of the following exception:\n\nTraceback (most recent call last):\n  File \"/data/gpfs/projects/punim0478/bansaab/linc2/eval/tasks/utils.py\", line 215, in evaluate\n    c = read_expr(conclusion)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/sem/logic.py\", line 957, in fromstring\n    return cls._logic_parser.parse(s, signature)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/sem/logic.py\", line 159, in parse\n    raise LogicalExpressionException(None, msg) from e\nnltk.sem.logic.LogicalExpressionException: End of input found.  Expression expected.\nall x\n      ^\n"}
{"timestamp": "2025-09-16T18:53:17.362080", "premises": ["all x. (ProfessionalWrestlingStable(x) & FormedIn(x, WWE) & DiamondMine(x))", "all x. (Leads(x, DiamondMine) & RoderickStrong(x))", "all x. (Includes(x, DiamondMine) & CreedBrothers(x) & IvyNile(x))", "all x. (HasFeudWith(x, Imperium) & DiamondMine(x))"], "conclusion": "-HasFeudWith(Imperium, DiamondMine) & IvyNile(x)", "error_type": "<class 'nltk.inference.prover9.Prover9FatalException'>", "error_message": "(FATAL)\n%%ERROR: The following symbols are used with multiple arities: DiamondMine/1, DiamondMine/0.\n\n\nFatal error:  The following symbols are used with multiple arities: DiamondMine/1, DiamondMine/0", "stack_trace": "Traceback (most recent call last):\n  File \"/data/gpfs/projects/punim0478/bansaab/linc2/eval/tasks/owafoltask.py\", line 577, in _process_neurosymbolic\n    parsed = json.loads(gen)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/json/__init__.py\", line 346, in loads\n    return _default_decoder.decode(s)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/json/decoder.py\", line 337, in decode\n    obj, end = self.raw_decode(s, idx=_w(s, 0).end())\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/json/decoder.py\", line 355, in raw_decode\n    raise JSONDecodeError(\"Expecting value\", s, err.value) from None\njson.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"/data/gpfs/projects/punim0478/bansaab/linc2/eval/tasks/utils.py\", line 219, in evaluate\n    truth_value = prover.prove(c, p_list)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/inference/api.py\", line 37, in prove\n    return self._prove(goal, assumptions, verbose)[0]\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/inference/prover9.py\", line 327, in _prove\n    stdout, returncode = self._call_prover9(\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/inference/prover9.py\", line 370, in _call_prover9\n    raise Prover9FatalException(returncode, errormsg)\nnltk.inference.prover9.Prover9FatalException: (FATAL)\n%%ERROR: The following symbols are used with multiple arities: DiamondMine/1, DiamondMine/0.\n\n\nFatal error:  The following symbols are used with multiple arities: DiamondMine/1, DiamondMine/0\n"}
{"timestamp": "2025-09-16T18:53:17.364368", "premises": ["DiamondMine(x) -> ProfessionalWrestlingStable(x)", "RoderickStrong(x) -> Leads(x, DiamondMine)", "CreedBrothers(x) -> Includes(x, DiamondMine)", "IvyNile(x) -> Includes(x, DiamondMine)", "Imperium(y) -> HasFeudWith(y, DiamondMine)", "-Imperium(z) -> HasFeudWith(z, IvyNile)", "-Imperium(z) -> NoFeudWith(z, DiamondMine)", "DiamondMine(x) -> ProfessionalWrestlingStable(x)", "RoderickStrong(x) -> Leads(x, DiamondMine)", "CreedBrothers(x) -> Includes(x, DiamondMine)", "IvyNile(x) -> Includes(x, DiamondMine)", "Imperium(y) -> HasFeudWith(y, DiamondMine)", "-Imperium(z) -> HasFeudWith(z, IvyNile)"], "conclusion": "-Imperium(z) -> NoFeudWith(z, DiamondMine)", "error_type": "<class 'nltk.inference.prover9.Prover9FatalException'>", "error_message": "(FATAL)\n%%ERROR: The following symbols are used with multiple arities: IvyNile/1, IvyNile/0, DiamondMine/1, DiamondMine/0.\n\n\nFatal error:  The following symbols are used with multiple arities: IvyNile/1, IvyNile/0, DiamondMine/1, DiamondMine/0", "stack_trace": "Traceback (most recent call last):\n  File \"/data/gpfs/projects/punim0478/bansaab/linc2/eval/tasks/owafoltask.py\", line 577, in _process_neurosymbolic\n    parsed = json.loads(gen)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/json/__init__.py\", line 346, in loads\n    return _default_decoder.decode(s)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/json/decoder.py\", line 337, in decode\n    obj, end = self.raw_decode(s, idx=_w(s, 0).end())\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/json/decoder.py\", line 355, in raw_decode\n    raise JSONDecodeError(\"Expecting value\", s, err.value) from None\njson.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"/data/gpfs/projects/punim0478/bansaab/linc2/eval/tasks/utils.py\", line 219, in evaluate\n    truth_value = prover.prove(c, p_list)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/inference/api.py\", line 37, in prove\n    return self._prove(goal, assumptions, verbose)[0]\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/inference/prover9.py\", line 327, in _prove\n    stdout, returncode = self._call_prover9(\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/inference/prover9.py\", line 370, in _call_prover9\n    raise Prover9FatalException(returncode, errormsg)\nnltk.inference.prover9.Prover9FatalException: (FATAL)\n%%ERROR: The following symbols are used with multiple arities: IvyNile/1, IvyNile/0, DiamondMine/1, DiamondMine/0.\n\n\nFatal error:  The following symbols are used with multiple arities: IvyNile/1, IvyNile/0, DiamondMine/1, DiamondMine/0\n"}
{"timestamp": "2025-09-16T18:57:17.960871", "premises": ["all x. (MusicPiece(x) -> SymphonyNo9(x))", "all x. (Composer(x) -> WriteMusic(x))", "all x. (Composer(x) & WriteMusic(x, SymphonyNo9))", "all x. (Orchestra(x) & Premiere(x, SymphonyNo9))", "all x. (Orchestra(x) -> ViennaMusicSociety(x))", "all x. (Orchestra(x) & Lead(x, Beethoven))"], "conclusion": "all x. (Orchestra(x) -> Conductor(x))", "error_type": "<class 'nltk.inference.prover9.Prover9FatalException'>", "error_message": "(FATAL)\n%%ERROR: The following symbols are used with multiple arities: WriteMusic/2, WriteMusic/1, SymphonyNo9/1, SymphonyNo9/0.\n\n\nFatal error:  The following symbols are used with multiple arities: WriteMusic/2, WriteMusic/1, SymphonyNo9/1, SymphonyNo9/0", "stack_trace": "Traceback (most recent call last):\n  File \"/data/gpfs/projects/punim0478/bansaab/linc2/eval/tasks/owafoltask.py\", line 577, in _process_neurosymbolic\n    parsed = json.loads(gen)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/json/__init__.py\", line 346, in loads\n    return _default_decoder.decode(s)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/json/decoder.py\", line 337, in decode\n    obj, end = self.raw_decode(s, idx=_w(s, 0).end())\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/json/decoder.py\", line 355, in raw_decode\n    raise JSONDecodeError(\"Expecting value\", s, err.value) from None\njson.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"/data/gpfs/projects/punim0478/bansaab/linc2/eval/tasks/utils.py\", line 219, in evaluate\n    truth_value = prover.prove(c, p_list)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/inference/api.py\", line 37, in prove\n    return self._prove(goal, assumptions, verbose)[0]\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/inference/prover9.py\", line 327, in _prove\n    stdout, returncode = self._call_prover9(\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/inference/prover9.py\", line 370, in _call_prover9\n    raise Prover9FatalException(returncode, errormsg)\nnltk.inference.prover9.Prover9FatalException: (FATAL)\n%%ERROR: The following symbols are used with multiple arities: WriteMusic/2, WriteMusic/1, SymphonyNo9/1, SymphonyNo9/0.\n\n\nFatal error:  The following symbols are used with multiple arities: WriteMusic/2, WriteMusic/1, SymphonyNo9/1, SymphonyNo9/0\n"}
{"timestamp": "2025-09-16T18:57:17.961077", "premises": ["all x. (MusicPiece(x) -> SymphonyNo9(x))", "all x. (Composer(x) -> MusicPiece(x))", "Beethoven(x) -> MusicPiece(x) & SymphonyNo9(x)", "ViennaMusicSociety(x) -> MusicPiece(x) & SymphonyNo9(x)", "ViennaMusicSociety(x) -> Orchestra(x)", "Beethoven(x) -> Leads(x, ViennaMusicSociety)"], "conclusion": "Orchestra(x) -> Leads(x, Conductor)", "error_type": "<class 'nltk.inference.prover9.Prover9FatalException'>", "error_message": "(FATAL)\n%%ERROR: The following symbols are used with multiple arities: ViennaMusicSociety/1, ViennaMusicSociety/0.\n\n\nFatal error:  The following symbols are used with multiple arities: ViennaMusicSociety/1, ViennaMusicSociety/0", "stack_trace": "Traceback (most recent call last):\n  File \"/data/gpfs/projects/punim0478/bansaab/linc2/eval/tasks/owafoltask.py\", line 577, in _process_neurosymbolic\n    parsed = json.loads(gen)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/json/__init__.py\", line 346, in loads\n    return _default_decoder.decode(s)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/json/decoder.py\", line 337, in decode\n    obj, end = self.raw_decode(s, idx=_w(s, 0).end())\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/json/decoder.py\", line 355, in raw_decode\n    raise JSONDecodeError(\"Expecting value\", s, err.value) from None\njson.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"/data/gpfs/projects/punim0478/bansaab/linc2/eval/tasks/utils.py\", line 219, in evaluate\n    truth_value = prover.prove(c, p_list)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/inference/api.py\", line 37, in prove\n    return self._prove(goal, assumptions, verbose)[0]\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/inference/prover9.py\", line 327, in _prove\n    stdout, returncode = self._call_prover9(\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/inference/prover9.py\", line 370, in _call_prover9\n    raise Prover9FatalException(returncode, errormsg)\nnltk.inference.prover9.Prover9FatalException: (FATAL)\n%%ERROR: The following symbols are used with multiple arities: ViennaMusicSociety/1, ViennaMusicSociety/0.\n\n\nFatal error:  The following symbols are used with multiple arities: ViennaMusicSociety/1, ViennaMusicSociety/0\n"}
{"timestamp": "2025-09-16T18:57:17.947241", "premises": ["all x. (MusicPiece(x) -> Composer(x))", "all x. (MusicPiece(x) = Symphony No. 9)", "all x. (Composer(x) -> MusicPiece(x))", "all x. (MusicPiece(x) = Symphony No. 9) -> Beethoven(x)", "all x. (Premiered(x) = ViennaMusicSociety(x))", "all x. (Orchestra(x) -> ViennaMusicSociety(x))", "all x. (OrchestralLeader(x) = Beethoven(x))"], "conclusion": "all x. (Orchestras are led by conductors)", "error_type": "<class 'nltk.sem.logic.LogicalExpressionException'>", "error_message": "Unexpected token: 'are'.  Expected token ')'.\nall x. (Orchestras are led by conductors)\n                   ^", "stack_trace": "Traceback (most recent call last):\n  File \"/data/gpfs/projects/punim0478/bansaab/linc2/eval/tasks/owafoltask.py\", line 577, in _process_neurosymbolic\n    parsed = json.loads(gen)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/json/__init__.py\", line 346, in loads\n    return _default_decoder.decode(s)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/json/decoder.py\", line 337, in decode\n    obj, end = self.raw_decode(s, idx=_w(s, 0).end())\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/json/decoder.py\", line 355, in raw_decode\n    raise JSONDecodeError(\"Expecting value\", s, err.value) from None\njson.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/sem/logic.py\", line 154, in parse\n    result = self.process_next_expression(None)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/sem/logic.py\", line 290, in process_next_expression\n    accum = self.handle(tok, context)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/sem/logic.py\", line 312, in handle\n    return self.handle_quant(tok, context)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/sem/logic.py\", line 427, in handle_quant\n    accum = self.process_next_expression(tok)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/sem/logic.py\", line 290, in process_next_expression\n    accum = self.handle(tok, context)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/sem/logic.py\", line 315, in handle\n    return self.handle_open(tok, context)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/sem/logic.py\", line 450, in handle_open\n    self.assertNextToken(Tokens.CLOSE)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/sem/logic.py\", line 573, in assertNextToken\n    raise UnexpectedTokenException(self._currentIndex, tok, expected)\nnltk.sem.logic.UnexpectedTokenException: Unexpected token: 'are'.  Expected token ')'.\n\nThe above exception was the direct cause of the following exception:\n\nTraceback (most recent call last):\n  File \"/data/gpfs/projects/punim0478/bansaab/linc2/eval/tasks/utils.py\", line 215, in evaluate\n    c = read_expr(conclusion)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/sem/logic.py\", line 957, in fromstring\n    return cls._logic_parser.parse(s, signature)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/sem/logic.py\", line 159, in parse\n    raise LogicalExpressionException(None, msg) from e\nnltk.sem.logic.LogicalExpressionException: Unexpected token: 'are'.  Expected token ')'.\nall x. (Orchestras are led by conductors)\n                   ^\n"}
{"timestamp": "2025-09-16T18:57:17.982384", "premises": ["all x. (SymphonyNo9(x) -> MusicPiece(x))", "all x. (SymphonyNo9(x) -> MusicPiece(x))", "all x. (Composer(x) -> WriteMusicPiece(x))", "all x. (SymphonyNo9(x) -> Beethoven(x))", "all x. (ViennaMusicSociety(x) -> Premiere(x, SymphonyNo9))", "all x. (ViennaMusicSociety(x) -> Orchestra(x))", "all x. (Beethoven(x) -> Lead(x, ViennaMusicSociety))"], "conclusion": "all x. (Orchestra(x) -> LeadedBy(x, Conductor))", "error_type": "<class 'nltk.inference.prover9.Prover9FatalException'>", "error_message": "(FATAL)\n%%ERROR: The following symbols are used with multiple arities: ViennaMusicSociety/1, ViennaMusicSociety/0, SymphonyNo9/1, SymphonyNo9/0.\n\n\nFatal error:  The following symbols are used with multiple arities: ViennaMusicSociety/1, ViennaMusicSociety/0, SymphonyNo9/1, SymphonyNo9/0", "stack_trace": "Traceback (most recent call last):\n  File \"/data/gpfs/projects/punim0478/bansaab/linc2/eval/tasks/owafoltask.py\", line 577, in _process_neurosymbolic\n    parsed = json.loads(gen)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/json/__init__.py\", line 346, in loads\n    return _default_decoder.decode(s)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/json/decoder.py\", line 337, in decode\n    obj, end = self.raw_decode(s, idx=_w(s, 0).end())\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/json/decoder.py\", line 355, in raw_decode\n    raise JSONDecodeError(\"Expecting value\", s, err.value) from None\njson.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"/data/gpfs/projects/punim0478/bansaab/linc2/eval/tasks/utils.py\", line 219, in evaluate\n    truth_value = prover.prove(c, p_list)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/inference/api.py\", line 37, in prove\n    return self._prove(goal, assumptions, verbose)[0]\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/inference/prover9.py\", line 327, in _prove\n    stdout, returncode = self._call_prover9(\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/inference/prover9.py\", line 370, in _call_prover9\n    raise Prover9FatalException(returncode, errormsg)\nnltk.inference.prover9.Prover9FatalException: (FATAL)\n%%ERROR: The following symbols are used with multiple arities: ViennaMusicSociety/1, ViennaMusicSociety/0, SymphonyNo9/1, SymphonyNo9/0.\n\n\nFatal error:  The following symbols are used with multiple arities: ViennaMusicSociety/1, ViennaMusicSociety/0, SymphonyNo9/1, SymphonyNo9/0\n"}
{"timestamp": "2025-09-16T18:57:17.986032", "premises": ["all x. (SymphonyNo9(x) -> MusicPiece(x))", "all x. (Composer(x) -> MusicPiece(x))", "SymphonyNo9(Beethoven)", "ViennaMusicSociety(SymphonyNo9)", "ViennaMusicSociety is an orchestra.", "all x. (Orchestra(x) -> LedBy(x, Conductor))", "Beethoven leads the Vienna Music Society.", "all x. (Conductor(x) -> Leads(x, ViennaMusicSociety))"], "conclusion": "Beethoven is a composer.", "error_type": "<class 'nltk.sem.logic.LogicalExpressionException'>", "error_message": "Unexpected token: 'is'.\nBeethoven is a composer.\n          ^", "stack_trace": "Traceback (most recent call last):\n  File \"/data/gpfs/projects/punim0478/bansaab/linc2/eval/tasks/owafoltask.py\", line 577, in _process_neurosymbolic\n    parsed = json.loads(gen)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/json/__init__.py\", line 346, in loads\n    return _default_decoder.decode(s)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/json/decoder.py\", line 337, in decode\n    obj, end = self.raw_decode(s, idx=_w(s, 0).end())\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/json/decoder.py\", line 355, in raw_decode\n    raise JSONDecodeError(\"Expecting value\", s, err.value) from None\njson.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/sem/logic.py\", line 156, in parse\n    raise UnexpectedTokenException(self._currentIndex + 1, self.token(0))\nnltk.sem.logic.UnexpectedTokenException: Unexpected token: 'is'.\n\nThe above exception was the direct cause of the following exception:\n\nTraceback (most recent call last):\n  File \"/data/gpfs/projects/punim0478/bansaab/linc2/eval/tasks/utils.py\", line 215, in evaluate\n    c = read_expr(conclusion)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/sem/logic.py\", line 957, in fromstring\n    return cls._logic_parser.parse(s, signature)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/sem/logic.py\", line 159, in parse\n    raise LogicalExpressionException(None, msg) from e\nnltk.sem.logic.LogicalExpressionException: Unexpected token: 'is'.\nBeethoven is a composer.\n          ^\n"}
{"timestamp": "2025-09-16T18:57:17.973819", "premises": ["all x. (MusicPiece(x) -> Composer(x))", "all x. (Composer(x) -> MusicPiece(x))", "all x. (MusicPiece(x) -> Beethoven(x))", "all x. (Beethoven(x) -> MusicPiece(x))", "all x. (MusicPiece(x) -> ViennaMusicSociety(x))", "all x. (ViennaMusicSociety(x) -> MusicPiece(x))", "all x. (Beethoven(x) -> ViennaMusicSociety(x))", "all x. (ViennaMusicSociety(x) -> Beethoven(x))", "all x. (MusicPiece(x) -> ViennaMusicSociety(x))", "all x. (Beethoven(x) -> ViennaMusicSociety(x))", "all x. (ViennaMusicSociety(x) -> Beethoven(x))", "all x. (ViennaMusicSociety(x) -> Conductor(x))", "all x. (Beethoven(x) -> Conductor(x))", "all x. (Beethoven(x) -> ViennaMusicSociety(x))", "all x. (Conductor(x) -> ViennaMusicSociety(x))", "all x. (Beethoven(x) -> ViennaMusicSociety(x))", "all x. (ViennaMusicSociety(x) -> Beethoven(x))", "all x. (Beethoven(x) -> ViennaMusicSociety(x))", "all x. (Beethoven(x) -> ViennaMusicSociety(x))", "all x. (Beethoven(x) -> ViennaMusicSociety(x))", "all x. (Beethoven(x) -> ViennaMusicSociety(x))", "all x. (Beethoven(x) -> ViennaMusicSociety(x))", "all x. (Beethoven(x) -> ViennaMusicSociety(x))", "all x. (Beethoven(x) -> ViennaMusicSociety(x))", "all x. (Beethoven(x) -> ViennaMusicSociety(x))", "all x. (Beethoven(x) -> ViennaMusicSociety(x))", "all x. (Beethoven(x) -> ViennaMusicSociety(x))", "all x. (Beethoven(x) -> ViennaMusicSociety(x))", "all x. (Beethoven(x) -> ViennaMusicSociety(x))", "all x. (Beethoven(x) -> ViennaMusicSociety(x))", "all x. (Beethoven(x) -> ViennaMusicSociety(x))", "all x. (Beethoven(x) -> ViennaMusicSociety(x))", "all x. (Beethoven(x) -> ViennaMusicSociety(x))", "all x. (Beethoven(x) -> ViennaMusicSociety(x))", "all x. (Beethoven(x) -> ViennaMusicSociety(x))", "all x. (Beethoven(x) -> ViennaMusicSociety(x))", "all x. (Beethoven(x) -> ViennaMusicSociety(x))", "all x. (Beethoven(x) -> ViennaMusicSociety(x))", "all x. (Beethoven(x) -> ViennaMusicSociety(x))", "all x. (Beethoven(x) -> ViennaMusicSociety(x))", "all x. (Beethoven(x) -> ViennaMusicSociety(x))", "all x. (Beethoven(x) -> ViennaMusicSociety(x))", "all x. (Beethoven(x) -> ViennaMusicSociety(x))", "all x. (Beethoven(x) -> ViennaMusicSociety(x))", "all x. (Beethoven(x) -> ViennaMusicSociety(x))", "all x. (Beethoven(x) -> ViennaMusicSociety(x))", "all x. (Beethoven(x) -> ViennaMusicSociety(x))", "all x. (Beethoven(x) -> ViennaMusicSociety(x))", "all x. (Beethoven(x) -> ViennaMusicSociety(x))", "all x. (Beethoven(x) -> ViennaMusicSociety(x))", "all x. (Beethoven(x) -> ViennaMusicSociety(x))", "all x. (Beethoven(x) -> ViennaMusicSociety(x))", "all x. (Beethoven(x) -> ViennaMusicSociety(x))", "all x. (Beethoven(x) -> ViennaMusicSociety(x))", "all x. (Beethoven(x) -> ViennaMusicSociety(x))", "all x. (Beethoven(x) -> ViennaMusicSociety(x))", "all x. (Beethoven(x) -> ViennaMusicSociety(x))", "all x. (Beethoven(x) -> ViennaMusicSociety(x))", "all x. (Beethoven(x) -> ViennaMusicSociety(x))", "all x. (Beethoven(x) -> ViennaMusicSociety(x))", "all x. (Beethoven(x) -> ViennaMusicSociety(x))", "all x. (Beethoven(x) -> ViennaMusicSociety(x))", "all x. (Beethoven(x) -> ViennaMusicSociety(x))", "all x. (Beethoven(x) -> ViennaMusicSociety(x))", "all x. (Beethoven(x) -> ViennaMusicSociety(x))", "all x. (Beethoven(x) -> ViennaMusicSociety(x))", "all x. (Beethoven(x) -> ViennaMusicSociety(x))", "all x. (Beethoven(x) -> ViennaMusicSociety(x))", "all x. (Beethoven(x) -> ViennaMusicSociety(x))", "all x. (Beethoven(x) -> ViennaMusicSociety(x))", "all x. (Beethoven(x) -> ViennaMusicSociety(x))", "all x. (Beethoven(x) -> ViennaMusicSociety(x))", "all x. (Beethoven(x) -> ViennaMusicSociety(x))", "all x. (Beethoven(x) -> ViennaMusicSociety(x))", "all x. (Beethoven(x) -> ViennaMusicSociety(x))", "all x. (Beethoven(x) -> ViennaMusicSociety(x))", "all x. (Beethoven(x) -> ViennaMusicSociety(x))", "all x. (Beethoven(x) -> ViennaMusicSociety(x))", "all x. (Beethoven(x) -> ViennaMusicSociety(x))", "all x. (Beethoven(x) -> ViennaMusicSociety(x))", "all x. (Beethoven(x) -> ViennaMusicSociety(x))", "all x. (Beethoven(x) -> ViennaMusicSociety(x))", "all x. (Beethoven(x) -> ViennaMusicSociety(x))", "all x. (Beethoven(x) -> ViennaMusicSociety(x))", "all x. (Beethoven(x) -> ViennaMusicSociety(x))", "all x. (Beethoven(x) -> ViennaMusicSociety(x))", "all x. (Beethoven(x) -> ViennaMusicSociety(x))", "all x. (Beethoven(x) -> ViennaMusicSociety(x))", "all x. (Beethoven(x) -> ViennaMusicSociety(x))", "all x. (Beethoven(x) -> ViennaMusicSociety(x))", "all x. (Beethoven(x) -> ViennaMusicSociety(x))", "all x. (Beethoven(x) -> ViennaMusicSociety(x))", "all x. (Beethoven(x) -> ViennaMusicSociety(x))", "all x. (Beethoven(x) -> ViennaMusicSociety(x))", "all x. (Beethoven(x) -> ViennaMusicSociety(x))", "all x. (Beethoven(x) -> ViennaMusicSociety(x))", "all x. (Beethoven(x) -> ViennaMusicSociety(x))", "all x. (Beethoven(x) -> ViennaMusicSociety(x))", "all x. (Beethoven(x) -> ViennaMusicSociety(x))", "all x. (Beethoven(x) -> ViennaMusicSociety(x))", "all x. (Beethoven(x) -> ViennaMusicSociety(x))", "all x. (Beethoven(x) -> ViennaMusicSociety(x))", "all x. (Beethoven(x) -> ViennaMusicSociety(x))", "all x. (Beethoven(x) -> ViennaMusicSociety(x))", "all x. (Beethoven(x) -> ViennaMusicSociety(x))", "all x. (Beethoven(x) -> ViennaMusicSociety(x))", "all x. (Beethoven(x) -> ViennaMusicSociety(x))", "all x. (Beethoven(x) -> ViennaMusicSociety(x))", "all x. (Beethoven(x) -> ViennaMusicSociety(x))", "all x. (Beethoven(x) -> ViennaMusicSociety(x))", "all x. (Beethoven(x) -> ViennaMusicSociety(x))", "all x. (Beethoven(x) -> ViennaMusicSociety(x))", "all x. (Beethoven(x) -> ViennaMusicSociety(x))", "all x. (Beethoven(x) -> ViennaMusicSociety(x))", "all x. (Beethoven(x) -> ViennaMusicSociety(x))", "all x. (Beethoven(x) -> ViennaMusicSociety(x))", "all x. (Beethoven(x) -> ViennaMusicSociety(x))", "all x. (Beethoven(x) -> ViennaMusicSociety(x))", "all x. (Beethoven(x) -> ViennaMusicSociety(x))", "all x. (Beethoven(x) -> ViennaMusicSociety(x))", "all x. (Beethoven(x) -> ViennaMusicSociety(x))", "all x. (Beethoven(x) -> ViennaMusicSociety(x))", "all x. (Beethoven(x) -> ViennaMusicSociety(x))", "all x. (Beethoven(x) -> ViennaMusicSociety(x))", "all x. (Beethoven(x) -> ViennaMusicSociety(x))", "all x. (Beethoven(x) -> ViennaMusicSociety(x))", "all x. (Beethoven(x) -> ViennaMusicSociety(x))", "all x. (Beethoven(x) -> ViennaMusicSociety(x))", "all x. (Beethoven(x) -> ViennaMusicSociety(x))", "all x. (Beethoven(x) -> ViennaMusicSociety(x))", "all x. (Beethoven(x) -> ViennaMusicSociety(x))", "all x. (Beethoven(x) -> ViennaMusicSociety(x))", "all x. (Beethoven(x) -> ViennaMusicSociety(x))", "all x. (Beethoven(x) -> ViennaMusicSociety(x))", "all x. (Beethoven(x) -> ViennaMusicSociety(x))", "all x. (Beethoven(x) -> ViennaMusicSociety(x))", "all x. (Beethoven(x) -> ViennaMusicSociety(x))", "all x. (Beethoven(x) -> ViennaMusicSociety(x))", "all x. (Beethoven(x) -> ViennaMusicSociety(x))", "all x. (Beethoven(x) -> ViennaMusicSociety(x))", "all x. (Beethoven(x) -> ViennaMusicSociety(x))", "all x. (Beethoven(x) -> ViennaMusicSociety(x))", "all x. (Beethoven(x) -> ViennaMusicSociety(x))", "all x. (Beethoven(x) -> ViennaMusicSociety(x))", "all x. (Beethoven(x) -> ViennaMusicSociety(x))", "all x. (Beethoven(x) -> ViennaMusicSociety(x))", "all x. (Beethoven(x) -> ViennaMusicSociety(x))", "all x. (Beethoven(x) -> ViennaMusicSociety(x))", "all x. (Beethoven(x) -> ViennaMusicSociety(x))", "all x. (Beethoven(x) -> ViennaMusicSociety(x))", "all x. (Beethoven(x) -> ViennaMusicSociety(x))", "all x. (Beethoven(x) -> ViennaMusicSociety(x))", "all x. (Beethoven(x) -> ViennaMusicSociety(x))", "all x. (Beethoven(x) -> ViennaMusicSociety(x))", "all x. (Beethoven(x) -> ViennaMusicSociety(x))", "all x. (Beethoven(x) -> ViennaMusicSociety(x))", "all x. (Beethoven(x) -> ViennaMusicSociety(x))", "all x. (Beethoven(x) -> ViennaMusicSociety(x))", "all x. (Beethoven(x) -> ViennaMusicSociety(x))", "all x. (Beethoven(x) -> ViennaMusicSociety(x))", "all x. (Beethoven(x) -> ViennaMusicSociety(x))", "all x. (Beethoven(x) -> ViennaMusicSociety(x))", "all x. (Beethoven(x) -> ViennaMusicSociety(x))", "all x. (Beethoven(x) -> ViennaMusicSociety(x))", "all x. (Beethoven(x) -> ViennaMusicSociety(x))", "all x. (Beethoven(x) -> ViennaMusicSociety(x))", "all x. (Beethoven(x) -> ViennaMusicSociety(x))", "all x. (Beethoven(x) -> ViennaMusicSociety(x))", "all x. (Beethoven(x) -> ViennaMusicSociety(x))", "all x. (Beethoven(x) -> ViennaMusicSociety(x))", "all x. (Beethoven(x) -> ViennaMusicSociety(x))", "all x. (Beethoven(x) -> ViennaMusicSociety(x))", "all x. (Beethoven(x) -> ViennaMusicSociety(x))", "all x. (Beethoven(x) -> ViennaMusicSociety(x))", "all x. (Beethoven(x) -> ViennaMusicSociety(x))", "all x. (Beethoven(x) -> ViennaMusicSociety(x))", "all x. (Beethoven(x) -> ViennaMusicSociety(x))", "all x. (Beethoven(x) -> ViennaMusicSociety(x))", "all x. (Beethoven(x) -> ViennaMusicSociety(x))", "all x. (Beethoven(x) -> ViennaMusicSociety(x))", "all x. (Beethoven(x) -> ViennaMusicSociety(x))", "all x. (Beethoven(x) -> ViennaMusicSociety(x))", "all x. (Beethoven(x) -> ViennaMusicSociety(x))", "all x. (Beethoven(x) -> ViennaMusicSociety(x))", "all x. (Beethoven(x) -> ViennaMusicSociety(x))", "all x. (Beethoven(x) -> ViennaMusicSociety(x))", "all x. (Beethoven(x) -> ViennaMusicSociety(x))", "all x. (Beethoven(x) -> ViennaMusicSociety(x))", "all x. (Beethoven(x) -> ViennaMusicSociety(x))", "all x. (Beethoven(x) -> ViennaMusicSociety(x))", "all x. (Beethoven(x) -> ViennaMusicSociety(x))", "all x. (Beethoven(x) -> ViennaMusicSociety(x))", "all x. (Beethoven(x) -> ViennaMusicSociety(x))", "all x. (Beethoven(x) -> ViennaMusicSociety(x))", "all x. (Beethoven(x) -> ViennaMusicSociety(x))", "all x. (Beethoven(x) -> ViennaMusicSociety(x))", "all x. (Beethoven(x) -> ViennaMusicSociety(x))", "all x. (Beethoven(x) -> ViennaMusicSociety(x))", "all x. (Beethoven(x) -> ViennaMusicSociety(x))", "all x. (Beethoven(x) -> ViennaMusicSociety(x))", "all x. (Beethoven(x) -> ViennaMusicSociety(x))", "all x. (Beethoven(x) -> ViennaMusicSociety(x))", "all x. (Beethoven(x) -> ViennaMusicSociety(x))", "all x. (Beethoven(x) -> ViennaMusicSociety(x))", "all x. (Beethoven(x) -> ViennaMusicSociety(x))", "all x. (Beethoven(x) -> ViennaMusicSociety(x))", "all x. (Beethoven(x) -> ViennaMusicSociety(x))", "all x. (Beethoven(x) -> ViennaMusicSociety(x))", "all x. (Beethoven(x) -> ViennaMusicSociety(x))", "all x. (Beethoven(x) -> ViennaMusicSociety(x))", "all x. (Beethoven(x) -> ViennaMusicSociety(x))", "all x. (Beethoven(x) -> ViennaMusicSociety(x))", "all x. (Beethoven(x) -> ViennaMusicSociety(x))", "all x. (Beethoven(x) -> ViennaMusicSociety(x))", "all x. (Beethoven(x) -> ViennaMusicSociety(x))", "all x. (Beethoven(x) -> ViennaMusicSociety(x))", "all x. (Beethoven(x) -> ViennaMusicSociety(x))", "all x. (Beethoven(x) -> ViennaMusicSociety(x))", "all x. (Beethoven(x) -> ViennaMusicSociety(x))", "all x. (Beethoven(x) -> ViennaMusicSociety(x))", "all x. (Beethoven(x) -> ViennaMusicSociety(x))", "all x. (Beethoven(x) -> ViennaMusicSociety(x))", "all x. (Beethoven(x) -> ViennaMusicSociety(x))", "all x. (Beethoven(x) -> ViennaMusicSociety(x))", "all x. (Beethoven(x) -> ViennaMusicSociety(x))", "all x. (Beethoven(x) -> ViennaMusicSociety(x))", "all x. (Beethoven(x) -> ViennaMusicSociety(x))", "all x. (Beethoven(x) -> ViennaMusicSociety(x))", "all x. (Beethoven(x) -> ViennaMusicSociety(x))", "all x. (Beethoven(x) -> ViennaMusicSociety(x))", "all x. (Beethoven(x) -> ViennaMusicSociety(x))", "all x. (Beethoven(x) -> ViennaMusicSociety(x))", "all x. (Beethoven(x) -> ViennaMusicSociety(x))", "all x. (Beethoven(x) -> ViennaMusicSociety(x))", "all x. (Beethoven(x) -> ViennaMusicSociety(x))", "all x. (Beethoven(x) -> ViennaMusicSociety(x))", "all x. (Beethoven(x) -> ViennaMusicSociety(x))", "all x. (Beethoven(x) -> ViennaMusicSociety(x))", "all x. (Beethoven(x) -> ViennaMusicSociety(x))", "all x. (Beethoven(x) -> ViennaMusicSociety(x))", "all x. (Beethoven(x) -> ViennaMusicSociety(x))", "all x. (Beethoven(x) -> ViennaMusicSociety(x))", "all x. (Beethoven(x) -> ViennaMusicSociety(x))", "all x. (Beethoven(x) -> ViennaMusicSociety(x))", "all x. (Beethoven(x) -> ViennaMusicSociety(x))", "all x. (Beethoven(x) -> ViennaMusicSociety(x))", "all x. (Beethoven(x) -> ViennaMusicSociety(x))", "all x. (Beethoven(x) -> ViennaMusicSociety(x))", "all x. (Beethoven(x) -> ViennaMusicSociety(x))", "all x. (Beethoven(x) -> ViennaMusicSociety(x))", "all x. (Beethoven(x) -> ViennaMusicSociety(x))", "all x. (Beethoven(x) -> ViennaMusicSociety(x))", "all x. (Beethoven(x) -> ViennaMusicSociety(x))", "all x. (Beethoven(x) -> ViennaMusicSociety(x))", "all x. (Beethoven(x) -> ViennaMusicSociety(x))", "all x. (Beethoven(x) -> ViennaMusicSociety(x))", "all x. (Beethoven(x) -> ViennaMusicSociety(x))", "all x. (Beethoven(x) -> ViennaMusicSociety(x))", "all x. (Beethoven(x) -> ViennaMusicSociety(x))", "all x. (Beethoven(x) -> ViennaMusicSociety(x))", "all x. (Beethoven(x) -> ViennaMusicSociety(x))", "all x. (Beethoven(x) -> ViennaMusicSociety(x))", "all x. (Beethoven(x) -> ViennaMusicSociety(x))", "all x. (Beethoven(x) -> ViennaMusicSociety(x))", "all x. (Beethoven(x) -> ViennaMusicSociety(x))", "all x. (Beethoven(x) -> ViennaMusicSociety(x))", "all x. (Beethoven(x) -> ViennaMusicSociety(x))", "all x. (Beethoven(x) -> ViennaMusicSociety(x))", "all x. (Beethoven(x) -> ViennaMusicSociety(x))", "all x. (Beethoven(x) -> ViennaMusicSociety(x))", "all x. (Beethoven(x) -> ViennaMusicSociety(x))", "all x. (Beethoven(x) -> ViennaMusicSociety(x))", "all x. (Beethoven(x) -> ViennaMusicSociety(x))", "all x. (Beethoven(x) -> ViennaMusicSociety(x))", "all x. (Beethoven(x) -> ViennaMusicSociety(x))", "all x. (Beethoven(x) -> ViennaMusicSociety(x))", "all x. (Beethoven(x) -> ViennaMusicSociety(x))", "all x. (Beethoven(x) -> ViennaMusicSociety(x))", "all x. (Beethoven(x) -> ViennaMusicSociety(x))", "all x. (Beethoven(x) -> ViennaMusicSociety(x))", "all x. (Beethoven(x) -> ViennaMusicSociety(x))", "all x. (Beethoven(x) -> ViennaMusicSociety(x))", "all x. (Beethoven(x) -> ViennaMusicSociety(x))", "all x. (Beethoven(x) -> ViennaMusicSociety(x))", "all x. (Beethoven(x) -> ViennaMusicSociety(x))", "all x. (Beethoven(x) -> ViennaMusicSociety(x))", "all x. (Beethoven(x) -> ViennaMusicSociety(x))", "all x. (Beethoven(x) -> ViennaMusicSociety(x))", "all x. (Beethoven(x) -> ViennaMusicSociety(x))", "all x. (Beethoven(x) -> ViennaMusicSociety(x))", "all x. (Beethoven(x) -> ViennaMusicSociety(x))", "all x. (Beethoven(x) -> ViennaMusicSociety(x))", "all x. (Beethoven(x) -> ViennaMusicSociety(x))", "all x. (Beethoven(x) -> ViennaMusicSociety(x))", "all x. (Beethoven(x) -> ViennaMusicSociety(x))", "all x. (Beethoven(x) -> ViennaMusicSociety(x))", "all x. (Beethoven(x) -> ViennaMusicSociety(x))", "all x. (Beethoven(x) -> ViennaMusicSociety(x))", "all x. (Beethoven(x) -> ViennaMusicSociety(x))", "all x. (Beethoven(x) -> ViennaMusicSociety(x))", "all x. (Beethoven(x) -> ViennaMusicSociety(x))", "all x. (Beethoven(x) -> ViennaMusicSociety(x))", "all x. (Beethoven(x) -> ViennaMusicSociety(x))", "all x. (Beethoven(x) -> ViennaMusicSociety(x))", "all x. (Beethoven(x) -> ViennaMusicSociety(x))", "all x. (Beethoven(x) -> ViennaMusicSociety(x))", "all x. (Beethoven(x) -> ViennaMusicSociety(x))", "all x. (Beethoven(x) -> ViennaMusicSociety(x))", "all x. (Beethoven(x) -> ViennaMusicSociety(x))", "all x. (Beethoven(x) -> ViennaMusicSociety(x))", "all x. (Beethoven(x) -> ViennaMusicSociety(x))", "all x. (Beethoven(x) -> ViennaMusicSociety(x))", "all x. (Beethoven(x) -> ViennaMusicSociety(x))", "all x. (Beethoven(x) -> ViennaMusicSociety(x))", "all x. (Beethoven(x) -> ViennaMusicSociety(x))", "all x. (Beethoven(x) -> ViennaMusicSociety(x))", "all x. (Beethoven(x) -> ViennaMusicSociety(x))", "all x. (Beethoven(x) -> ViennaMusicSociety(x))", "all x. (Beethoven(x) -> ViennaMusicSociety(x))", "all x. (Beethoven(x) -> ViennaMusicSociety(x))", "all x. (Beethoven(x) -> ViennaMusicSociety(x))", "all x. (Beethoven(x) -> ViennaMusicSociety(x))", "all x. (Beethoven(x) -> ViennaMusicSociety(x))", "all x. (Beethoven(x) -> ViennaMusicSociety(x))", "all x. (Beethoven(x) -> ViennaMusicSociety(x))", "all x. x. (Beethoven(x) -> ViennaMusicSociety(x))", "all x. (Beethoven(x) -> ViennaMusicSociety(x))", "all x. (Beethoven(x) -> ViennaMusicSociety(x))", "all x. (Beethoven(x) -> ViennaMusicSociety(x))", "all x. (Beethoven(x) -> ViennaMusicSociety(x))", "all x. (Beethoven(x) -> ViennaMusicSociety(x))", "all x. (Beethoven(x) -> ViennaMusicSociety(x))", "all x. (Beethoven(x) -> ViennaMusicSociety(x))", "all x. (Beethoven(x) -> ViennaMusicSociety(x))", "all x. (Beethoven(x) -> ViennaMusicSociety(x))", "all x. (Beethoven(x) -> ViennaMusicSociety(x))", "all x. (Beethoven(x) -> ViennaMusicSociety(x))", "all x. (Beethoven(x) -> ViennaMusicSociety(x))", "all x. (Beethoven(x) -> ViennaMusicSociety(x))", "all x. (Beethoven(x) -> ViennaMusicSociety(x))", "all x. (Beethoven(x) -> ViennaMusicSociety(x))", "all x. (Beethoven(x) -> ViennaMusicSociety(x))", "all x. (Beethoven(x) -> ViennaMusicSociety(x))", "all x. (Beethoven(x) -> ViennaMusicSociety(x))", "all x. (Beethoven(x) -> ViennaMusicSociety(x))", "all x. (Beethoven(x) -> ViennaMusicSociety(x))", "all x. (Beethoven(x) -> ViennaMusicSociety(x))", "all x. (Beethoven(x) -> ViennaMusicSociety(x))", "all x. (Beethoven(x) -> ViennaMusicSociety(x))", "all x. (Beethoven(x) -> ViennaMusicSociety(x))", "all x. (Beethoven(x) -> ViennaMusicSociety(x))", "all x. (Beethoven(x) -> ViennaMusicSociety(x))", "all x. (Beethoven(x) -> ViennaMusicSociety(x))", "all x. (Beethoven(x) -> ViennaMusicSociety(x))", "all x. (Beethoven(x) -> ViennaMusicSociety(x))", "all x. (Beethoven(x) -> ViennaMusicSociety(x))"], "conclusion": "all", "error_type": "<class 'nltk.sem.logic.LogicalExpressionException'>", "error_message": "End of input found.  Variable and Expression expected following quantifier 'all'.\nall\n    ^", "stack_trace": "Traceback (most recent call last):\n  File \"/data/gpfs/projects/punim0478/bansaab/linc2/eval/tasks/owafoltask.py\", line 577, in _process_neurosymbolic\n    parsed = json.loads(gen)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/json/__init__.py\", line 346, in loads\n    return _default_decoder.decode(s)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/json/decoder.py\", line 337, in decode\n    obj, end = self.raw_decode(s, idx=_w(s, 0).end())\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/json/decoder.py\", line 355, in raw_decode\n    raise JSONDecodeError(\"Expecting value\", s, err.value) from None\njson.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/sem/logic.py\", line 154, in parse\n    result = self.process_next_expression(None)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/sem/logic.py\", line 290, in process_next_expression\n    accum = self.handle(tok, context)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/sem/logic.py\", line 312, in handle\n    return self.handle_quant(tok, context)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/sem/logic.py\", line 407, in handle_quant\n    raise ExpectedMoreTokensException(\nnltk.sem.logic.ExpectedMoreTokensException: End of input found.  Variable and Expression expected following quantifier 'all'.\n\nThe above exception was the direct cause of the following exception:\n\nTraceback (most recent call last):\n  File \"/data/gpfs/projects/punim0478/bansaab/linc2/eval/tasks/utils.py\", line 215, in evaluate\n    c = read_expr(conclusion)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/sem/logic.py\", line 957, in fromstring\n    return cls._logic_parser.parse(s, signature)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/sem/logic.py\", line 159, in parse\n    raise LogicalExpressionException(None, msg) from e\nnltk.sem.logic.LogicalExpressionException: End of input found.  Variable and Expression expected following quantifier 'all'.\nall\n    ^\n"}
{"timestamp": "2025-09-16T18:57:17.989969", "premises": ["all x. (SymphonyNo9(x) -> MusicPiece(x))", "all x. (Composer(x) -> MusicPiece(x))", "all x. (Wrote(Beethoven, SymphonyNo9) -> Beethoven(x))", "all x. (Premiered(SymphonyNo9, ViennaMusicSociety) -> ViennaMusicSociety(x))", "all x. (Orchestra(x) -> ViennaMusicSociety(x))", "all x. (Leads(Beethoven, ViennaMusicSociety) -> Beethoven(x))", "all x. (Conductor(x) -> Leads(x, ViennaMusicSociety))", "all x. (Beethoven(x) -> Composer(x))", "all x. (ViennaMusicSociety(x) -> Orchestras(x))", "all x. (Beethoven(x) -> Leads(x, ViennaMusicSociety))", "all x. (Conducts(x, ViennaMusicSociety) -> Leads(x, ViennaMusicSociety))"], "conclusion": "all x. (Beethoven(x) -> Conducts(x, ViennaMusicSociety))", "error_type": "<class 'nltk.inference.prover9.Prover9FatalException'>", "error_message": "(FATAL)\n%%ERROR: The following symbols are used with multiple arities: SymphonyNo9/1, SymphonyNo9/0, Beethoven/1, Beethoven/0, ViennaMusicSociety/1, ViennaMusicSociety/0.\n\n\nFatal error:  The following symbols are used with multiple arities: SymphonyNo9/1, SymphonyNo9/0, Beethoven/1, Beethoven/0, ViennaMusicSociety/1, ViennaMusicSociety/0", "stack_trace": "Traceback (most recent call last):\n  File \"/data/gpfs/projects/punim0478/bansaab/linc2/eval/tasks/owafoltask.py\", line 577, in _process_neurosymbolic\n    parsed = json.loads(gen)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/json/__init__.py\", line 346, in loads\n    return _default_decoder.decode(s)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/json/decoder.py\", line 337, in decode\n    obj, end = self.raw_decode(s, idx=_w(s, 0).end())\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/json/decoder.py\", line 355, in raw_decode\n    raise JSONDecodeError(\"Expecting value\", s, err.value) from None\njson.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"/data/gpfs/projects/punim0478/bansaab/linc2/eval/tasks/utils.py\", line 219, in evaluate\n    truth_value = prover.prove(c, p_list)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/inference/api.py\", line 37, in prove\n    return self._prove(goal, assumptions, verbose)[0]\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/inference/prover9.py\", line 327, in _prove\n    stdout, returncode = self._call_prover9(\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/inference/prover9.py\", line 370, in _call_prover9\n    raise Prover9FatalException(returncode, errormsg)\nnltk.inference.prover9.Prover9FatalException: (FATAL)\n%%ERROR: The following symbols are used with multiple arities: SymphonyNo9/1, SymphonyNo9/0, Beethoven/1, Beethoven/0, ViennaMusicSociety/1, ViennaMusicSociety/0.\n\n\nFatal error:  The following symbols are used with multiple arities: SymphonyNo9/1, SymphonyNo9/0, Beethoven/1, Beethoven/0, ViennaMusicSociety/1, ViennaMusicSociety/0\n"}
{"timestamp": "2025-09-16T18:57:17.990473", "premises": ["all x. (MusicPiece(x) -> SymphonyNo9(x))", "all x. (Composer(x) -> WriteMusic(x))", "all x. (Beethoven(x) -> WriteMusic(x) & SymphonyNo9(x))", "all x. (Premiered(ViennaMusicSociety, SymphonyNo9))", "all x. (Orchestra(x) -> ViennaMusicSociety(x))", "all x. (Leads(Beethoven, ViennaMusicSociety))"], "conclusion": "all x. (Orchestra(x) -> Leads(x, Conductor))", "error_type": "<class 'nltk.inference.prover9.Prover9FatalException'>", "error_message": "(FATAL)\n%%ERROR: The following symbols are used with multiple arities: Beethoven/1, Beethoven/0, SymphonyNo9/1, SymphonyNo9/0, ViennaMusicSociety/1, ViennaMusicSociety/0.\n\n\nFatal error:  The following symbols are used with multiple arities: Beethoven/1, Beethoven/0, SymphonyNo9/1, SymphonyNo9/0, ViennaMusicSociety/1, ViennaMusicSociety/0", "stack_trace": "Traceback (most recent call last):\n  File \"/data/gpfs/projects/punim0478/bansaab/linc2/eval/tasks/owafoltask.py\", line 577, in _process_neurosymbolic\n    parsed = json.loads(gen)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/json/__init__.py\", line 346, in loads\n    return _default_decoder.decode(s)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/json/decoder.py\", line 337, in decode\n    obj, end = self.raw_decode(s, idx=_w(s, 0).end())\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/json/decoder.py\", line 355, in raw_decode\n    raise JSONDecodeError(\"Expecting value\", s, err.value) from None\njson.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"/data/gpfs/projects/punim0478/bansaab/linc2/eval/tasks/utils.py\", line 219, in evaluate\n    truth_value = prover.prove(c, p_list)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/inference/api.py\", line 37, in prove\n    return self._prove(goal, assumptions, verbose)[0]\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/inference/prover9.py\", line 327, in _prove\n    stdout, returncode = self._call_prover9(\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/inference/prover9.py\", line 370, in _call_prover9\n    raise Prover9FatalException(returncode, errormsg)\nnltk.inference.prover9.Prover9FatalException: (FATAL)\n%%ERROR: The following symbols are used with multiple arities: Beethoven/1, Beethoven/0, SymphonyNo9/1, SymphonyNo9/0, ViennaMusicSociety/1, ViennaMusicSociety/0.\n\n\nFatal error:  The following symbols are used with multiple arities: Beethoven/1, Beethoven/0, SymphonyNo9/1, SymphonyNo9/0, ViennaMusicSociety/1, ViennaMusicSociety/0\n"}
{"timestamp": "2025-09-16T18:57:17.990976", "premises": ["all x. (SymphonyNo9(x) -> MusicPiece(x))", "all x. (Composer(x) -> Write(x, MusicPiece))", "Beethoven(x) -> SymphonyNo9(x)", "ViennaMusicSociety(x) -> Premiere(x, SymphonyNo9)", "ViennaMusicSociety(x) -> Orchestra(x)", "Beethoven(x) -> Lead(x, ViennaMusicSociety)"], "conclusion": "Orchestra(x) -> Lead(x, Conductor)", "error_type": "<class 'nltk.inference.prover9.Prover9FatalException'>", "error_message": "(FATAL)\n%%ERROR: The following symbols are used with multiple arities: ViennaMusicSociety/1, ViennaMusicSociety/0, SymphonyNo9/1, SymphonyNo9/0, MusicPiece/1, MusicPiece/0.\n\n\nFatal error:  The following symbols are used with multiple arities: ViennaMusicSociety/1, ViennaMusicSociety/0, SymphonyNo9/1, SymphonyNo9/0, MusicPiece/1, MusicPiece/0", "stack_trace": "Traceback (most recent call last):\n  File \"/data/gpfs/projects/punim0478/bansaab/linc2/eval/tasks/owafoltask.py\", line 577, in _process_neurosymbolic\n    parsed = json.loads(gen)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/json/__init__.py\", line 346, in loads\n    return _default_decoder.decode(s)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/json/decoder.py\", line 337, in decode\n    obj, end = self.raw_decode(s, idx=_w(s, 0).end())\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/json/decoder.py\", line 355, in raw_decode\n    raise JSONDecodeError(\"Expecting value\", s, err.value) from None\njson.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"/data/gpfs/projects/punim0478/bansaab/linc2/eval/tasks/utils.py\", line 219, in evaluate\n    truth_value = prover.prove(c, p_list)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/inference/api.py\", line 37, in prove\n    return self._prove(goal, assumptions, verbose)[0]\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/inference/prover9.py\", line 327, in _prove\n    stdout, returncode = self._call_prover9(\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/inference/prover9.py\", line 370, in _call_prover9\n    raise Prover9FatalException(returncode, errormsg)\nnltk.inference.prover9.Prover9FatalException: (FATAL)\n%%ERROR: The following symbols are used with multiple arities: ViennaMusicSociety/1, ViennaMusicSociety/0, SymphonyNo9/1, SymphonyNo9/0, MusicPiece/1, MusicPiece/0.\n\n\nFatal error:  The following symbols are used with multiple arities: ViennaMusicSociety/1, ViennaMusicSociety/0, SymphonyNo9/1, SymphonyNo9/0, MusicPiece/1, MusicPiece/0\n"}
{"timestamp": "2025-09-16T18:57:52.477015", "premises": ["all x. (MusicPiece(x) -> Beethoven(x) & ViennaMusicSociety(x) & ViennaMusicSocietyPremiered(x) & Orchestra(x))", "all x. (MusicPiece(x) -> SymphonyNo9(x))", "all x. (MusicPiece(x) -> Composer(x))", "all x. (MusicPiece(x) -> Beethoven(x) & SymphonyNo9(x))", "all x. (MusicPiece(x) -> ViennaMusicSociety(x) & ViennaMusicSocietyPremiered(x))", "all x. (MusicPiece(x) -> Orchestra(x))", "all x. (MusicPiece(x) -> Beethoven(x) & Lead(x, ViennaMusicSociety))", "all x. (MusicPiece(x) -> Orchestra(x) & Lead(x, Conductor))"], "conclusion": "all x. (MusicPiece(x) -> ViennaMusicSocietyPremiered(x) | ...)", "error_type": "<class 'nltk.sem.logic.LogicalExpressionException'>", "error_message": "Unexpected token: '.'.  Expression expected.\nall x. (MusicPiece(x) -> ViennaMusicSocietyPremiered(x) | ...)\n                                                          ^", "stack_trace": "Traceback (most recent call last):\n  File \"/data/gpfs/projects/punim0478/bansaab/linc2/eval/tasks/owafoltask.py\", line 577, in _process_neurosymbolic\n    parsed = json.loads(gen)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/json/__init__.py\", line 346, in loads\n    return _default_decoder.decode(s)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/json/decoder.py\", line 337, in decode\n    obj, end = self.raw_decode(s, idx=_w(s, 0).end())\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/json/decoder.py\", line 355, in raw_decode\n    raise JSONDecodeError(\"Expecting value\", s, err.value) from None\njson.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/sem/logic.py\", line 154, in parse\n    result = self.process_next_expression(None)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/sem/logic.py\", line 290, in process_next_expression\n    accum = self.handle(tok, context)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/sem/logic.py\", line 312, in handle\n    return self.handle_quant(tok, context)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/sem/logic.py\", line 427, in handle_quant\n    accum = self.process_next_expression(tok)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/sem/logic.py\", line 290, in process_next_expression\n    accum = self.handle(tok, context)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/sem/logic.py\", line 315, in handle\n    return self.handle_open(tok, context)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/sem/logic.py\", line 449, in handle_open\n    accum = self.process_next_expression(None)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/sem/logic.py\", line 297, in process_next_expression\n    return self.attempt_adjuncts(accum, context)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/sem/logic.py\", line 323, in attempt_adjuncts\n    expression = self.attempt_BooleanExpression(expression, context)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/sem/logic.py\", line 485, in attempt_BooleanExpression\n    factory, expression, self.process_next_expression(tok)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/sem/logic.py\", line 297, in process_next_expression\n    return self.attempt_adjuncts(accum, context)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/sem/logic.py\", line 323, in attempt_adjuncts\n    expression = self.attempt_BooleanExpression(expression, context)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/sem/logic.py\", line 485, in attempt_BooleanExpression\n    factory, expression, self.process_next_expression(tok)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/sem/logic.py\", line 293, in process_next_expression\n    raise UnexpectedTokenException(\nnltk.sem.logic.UnexpectedTokenException: Unexpected token: '.'.  Expression expected.\n\nThe above exception was the direct cause of the following exception:\n\nTraceback (most recent call last):\n  File \"/data/gpfs/projects/punim0478/bansaab/linc2/eval/tasks/utils.py\", line 215, in evaluate\n    c = read_expr(conclusion)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/sem/logic.py\", line 957, in fromstring\n    return cls._logic_parser.parse(s, signature)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/sem/logic.py\", line 159, in parse\n    raise LogicalExpressionException(None, msg) from e\nnltk.sem.logic.LogicalExpressionException: Unexpected token: '.'.  Expression expected.\nall x. (MusicPiece(x) -> ViennaMusicSocietyPremiered(x) | ...)\n                                                          ^\n"}
{"timestamp": "2025-09-16T18:57:52.489096", "premises": ["symphonyNo9 is a musicPiece."], "conclusion": "all x. (Composer(x) -> MusicPiece(x))", "error_type": "<class 'nltk.sem.logic.LogicalExpressionException'>", "error_message": "Unexpected token: 'is'.\nsymphonyNo9 is a musicPiece.\n            ^", "stack_trace": "Traceback (most recent call last):\n  File \"/data/gpfs/projects/punim0478/bansaab/linc2/eval/tasks/owafoltask.py\", line 577, in _process_neurosymbolic\n    parsed = json.loads(gen)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/json/__init__.py\", line 346, in loads\n    return _default_decoder.decode(s)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/json/decoder.py\", line 337, in decode\n    obj, end = self.raw_decode(s, idx=_w(s, 0).end())\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/json/decoder.py\", line 355, in raw_decode\n    raise JSONDecodeError(\"Expecting value\", s, err.value) from None\njson.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/sem/logic.py\", line 156, in parse\n    raise UnexpectedTokenException(self._currentIndex + 1, self.token(0))\nnltk.sem.logic.UnexpectedTokenException: Unexpected token: 'is'.\n\nThe above exception was the direct cause of the following exception:\n\nTraceback (most recent call last):\n  File \"/data/gpfs/projects/punim0478/bansaab/linc2/eval/tasks/utils.py\", line 216, in evaluate\n    p_list = [read_expr(p) for p in premises]\n  File \"/data/gpfs/projects/punim0478/bansaab/linc2/eval/tasks/utils.py\", line 216, in <listcomp>\n    p_list = [read_expr(p) for p in premises]\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/sem/logic.py\", line 957, in fromstring\n    return cls._logic_parser.parse(s, signature)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/sem/logic.py\", line 159, in parse\n    raise LogicalExpressionException(None, msg) from e\nnltk.sem.logic.LogicalExpressionException: Unexpected token: 'is'.\nsymphonyNo9 is a musicPiece.\n            ^\n"}
{"timestamp": "2025-09-16T18:57:52.489740", "premises": ["all x. (MusicPiece(x) -> SymphonyNo9(x))", "all x. (Composer(x) -> Write(x, MusicPiece))", "Beethoven(x) -> Write(x, SymphonyNo9)", "ViennaMusicSociety(x) -> Premiered(x, SymphonyNo9)", "ViennaMusicSociety(x) -> Orchestra(x)", "Beethoven(x) -> Leads(x, ViennaMusicSociety)", "Orchestra(x) -> Leads(x, Conductor)"], "conclusion": "exists x. (Orchestra(x) & Premiered(x, MusicPiece))", "error_type": "<class 'nltk.inference.prover9.Prover9FatalException'>", "error_message": "(FATAL)\n%%ERROR: The following symbols are used with multiple arities: ViennaMusicSociety/1, ViennaMusicSociety/0, SymphonyNo9/1, SymphonyNo9/0, MusicPiece/1, MusicPiece/0.\n\n\nFatal error:  The following symbols are used with multiple arities: ViennaMusicSociety/1, ViennaMusicSociety/0, SymphonyNo9/1, SymphonyNo9/0, MusicPiece/1, MusicPiece/0", "stack_trace": "Traceback (most recent call last):\n  File \"/data/gpfs/projects/punim0478/bansaab/linc2/eval/tasks/owafoltask.py\", line 577, in _process_neurosymbolic\n    parsed = json.loads(gen)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/json/__init__.py\", line 346, in loads\n    return _default_decoder.decode(s)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/json/decoder.py\", line 337, in decode\n    obj, end = self.raw_decode(s, idx=_w(s, 0).end())\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/json/decoder.py\", line 355, in raw_decode\n    raise JSONDecodeError(\"Expecting value\", s, err.value) from None\njson.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"/data/gpfs/projects/punim0478/bansaab/linc2/eval/tasks/utils.py\", line 219, in evaluate\n    truth_value = prover.prove(c, p_list)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/inference/api.py\", line 37, in prove\n    return self._prove(goal, assumptions, verbose)[0]\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/inference/prover9.py\", line 327, in _prove\n    stdout, returncode = self._call_prover9(\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/inference/prover9.py\", line 370, in _call_prover9\n    raise Prover9FatalException(returncode, errormsg)\nnltk.inference.prover9.Prover9FatalException: (FATAL)\n%%ERROR: The following symbols are used with multiple arities: ViennaMusicSociety/1, ViennaMusicSociety/0, SymphonyNo9/1, SymphonyNo9/0, MusicPiece/1, MusicPiece/0.\n\n\nFatal error:  The following symbols are used with multiple arities: ViennaMusicSociety/1, ViennaMusicSociety/0, SymphonyNo9/1, SymphonyNo9/0, MusicPiece/1, MusicPiece/0\n"}
{"timestamp": "2025-09-16T18:57:52.491769", "premises": ["TEXT: Symphony No. 9 is a music piece.", "all x. (MusicPiece(x) -> SymphonyNo9(x))", "all x. (Composer(x) -> WriteMusic(x))", "all x. (Beethoven(x) -> WriteSymphonyNo9(x))", "all x. (Premiered(ViennaMusicSociety, SymphonyNo9))", "all x. (Orchestra(x) -> ViennaMusicSociety(x))", "all x. (Leads(Beethoven, ViennaMusicSociety))"], "conclusion": "all x. (Leads(x) -> Conductor(x))", "error_type": "<class 'nltk.sem.logic.LogicalExpressionException'>", "error_message": "Unexpected token: 'Symphony'.\nTEXT: Symphony No. 9 is a music piece.\n      ^", "stack_trace": "Traceback (most recent call last):\n  File \"/data/gpfs/projects/punim0478/bansaab/linc2/eval/tasks/owafoltask.py\", line 577, in _process_neurosymbolic\n    parsed = json.loads(gen)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/json/__init__.py\", line 346, in loads\n    return _default_decoder.decode(s)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/json/decoder.py\", line 337, in decode\n    obj, end = self.raw_decode(s, idx=_w(s, 0).end())\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/json/decoder.py\", line 355, in raw_decode\n    raise JSONDecodeError(\"Expecting value\", s, err.value) from None\njson.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/sem/logic.py\", line 156, in parse\n    raise UnexpectedTokenException(self._currentIndex + 1, self.token(0))\nnltk.sem.logic.UnexpectedTokenException: Unexpected token: 'Symphony'.\n\nThe above exception was the direct cause of the following exception:\n\nTraceback (most recent call last):\n  File \"/data/gpfs/projects/punim0478/bansaab/linc2/eval/tasks/utils.py\", line 216, in evaluate\n    p_list = [read_expr(p) for p in premises]\n  File \"/data/gpfs/projects/punim0478/bansaab/linc2/eval/tasks/utils.py\", line 216, in <listcomp>\n    p_list = [read_expr(p) for p in premises]\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/sem/logic.py\", line 957, in fromstring\n    return cls._logic_parser.parse(s, signature)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/sem/logic.py\", line 159, in parse\n    raise LogicalExpressionException(None, msg) from e\nnltk.sem.logic.LogicalExpressionException: Unexpected token: 'Symphony'.\nTEXT: Symphony No. 9 is a music piece.\n      ^\n"}
{"timestamp": "2025-09-16T18:57:52.504470", "premises": ["all x. (MusicPiece(x) -> SymphonyNo9(x))", "all x. (Composer(x) -> MusicPiece(x))", "SymphonyNo9(Beethoven)", "ViennaMusicSociety(SymphonyNo9)", "ViennaMusicSociety is an orchestra.", "ViennaMusicSociety(SymphonyNo9)", "Beethoven leads the Vienna Music Society.", "ViennaMusicSociety is led by Beethoven.", "ViennaMusicSociety(SymphonyNo9)"], "conclusion": "Some orchestras premiered music pieces.", "error_type": "<class 'nltk.sem.logic.LogicalExpressionException'>", "error_message": "Unexpected token: 'orchestras'.\nSome orchestras premiered music pieces.\n     ^", "stack_trace": "Traceback (most recent call last):\n  File \"/data/gpfs/projects/punim0478/bansaab/linc2/eval/tasks/owafoltask.py\", line 577, in _process_neurosymbolic\n    parsed = json.loads(gen)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/json/__init__.py\", line 346, in loads\n    return _default_decoder.decode(s)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/json/decoder.py\", line 337, in decode\n    obj, end = self.raw_decode(s, idx=_w(s, 0).end())\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/json/decoder.py\", line 355, in raw_decode\n    raise JSONDecodeError(\"Expecting value\", s, err.value) from None\njson.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/sem/logic.py\", line 156, in parse\n    raise UnexpectedTokenException(self._currentIndex + 1, self.token(0))\nnltk.sem.logic.UnexpectedTokenException: Unexpected token: 'orchestras'.\n\nThe above exception was the direct cause of the following exception:\n\nTraceback (most recent call last):\n  File \"/data/gpfs/projects/punim0478/bansaab/linc2/eval/tasks/utils.py\", line 215, in evaluate\n    c = read_expr(conclusion)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/sem/logic.py\", line 957, in fromstring\n    return cls._logic_parser.parse(s, signature)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/sem/logic.py\", line 159, in parse\n    raise LogicalExpressionException(None, msg) from e\nnltk.sem.logic.LogicalExpressionException: Unexpected token: 'orchestras'.\nSome orchestras premiered music pieces.\n     ^\n"}
{"timestamp": "2025-09-16T18:57:52.505173", "premises": ["all x. (MusicPiece(x) -> SymphonyNo9(x))", "all x. (Composer(x) -> Write(x, MusicPiece))", "Beethoven(x) -> SymphonyNo9(x)", "ViennaMusicSociety(x) -> Premiere(x, SymphonyNo9)", "ViennaMusicSociety(x) -> Orchestra(x)", "Beethoven(x) -> Lead(x, ViennaMusicSociety)", "Orchestra(x) -> Conductor(x)"], "conclusion": "exists x. (Orchestra(x) -> Premiere(x, MusicPiece))", "error_type": "<class 'nltk.inference.prover9.Prover9FatalException'>", "error_message": "(FATAL)\n%%ERROR: The following symbols are used with multiple arities: ViennaMusicSociety/1, ViennaMusicSociety/0, SymphonyNo9/1, SymphonyNo9/0, MusicPiece/1, MusicPiece/0.\n\n\nFatal error:  The following symbols are used with multiple arities: ViennaMusicSociety/1, ViennaMusicSociety/0, SymphonyNo9/1, SymphonyNo9/0, MusicPiece/1, MusicPiece/0", "stack_trace": "Traceback (most recent call last):\n  File \"/data/gpfs/projects/punim0478/bansaab/linc2/eval/tasks/owafoltask.py\", line 577, in _process_neurosymbolic\n    parsed = json.loads(gen)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/json/__init__.py\", line 346, in loads\n    return _default_decoder.decode(s)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/json/decoder.py\", line 337, in decode\n    obj, end = self.raw_decode(s, idx=_w(s, 0).end())\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/json/decoder.py\", line 355, in raw_decode\n    raise JSONDecodeError(\"Expecting value\", s, err.value) from None\njson.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"/data/gpfs/projects/punim0478/bansaab/linc2/eval/tasks/utils.py\", line 219, in evaluate\n    truth_value = prover.prove(c, p_list)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/inference/api.py\", line 37, in prove\n    return self._prove(goal, assumptions, verbose)[0]\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/inference/prover9.py\", line 327, in _prove\n    stdout, returncode = self._call_prover9(\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/inference/prover9.py\", line 370, in _call_prover9\n    raise Prover9FatalException(returncode, errormsg)\nnltk.inference.prover9.Prover9FatalException: (FATAL)\n%%ERROR: The following symbols are used with multiple arities: ViennaMusicSociety/1, ViennaMusicSociety/0, SymphonyNo9/1, SymphonyNo9/0, MusicPiece/1, MusicPiece/0.\n\n\nFatal error:  The following symbols are used with multiple arities: ViennaMusicSociety/1, ViennaMusicSociety/0, SymphonyNo9/1, SymphonyNo9/0, MusicPiece/1, MusicPiece/0\n"}
{"timestamp": "2025-09-16T18:57:52.505793", "premises": ["all x. (MusicPiece(x) -> SymphonyNo9(x))", "all x. (MusicPiece(x) -> Composed(x, x))", "all x. (Composed(x, SymphonyNo9) -> Beethoven(x))", "all x. (Premiered(x, SymphonyNo9) -> ViennaMusicSociety(x))", "all x. (Orchestra(x) -> ViennaMusicSociety(x))", "all x. (Leads(x, ViennaMusicSociety) -> Beethoven(x))", "all x. (Leads(x, y) -> Conductor(x) & Orchestras(y))"], "conclusion": "exists x. exists y. (Orchestra(y) & Premiere(x, y)) & exists z. (Conductor(z) & Leads(z, y))", "error_type": "<class 'nltk.inference.prover9.Prover9FatalException'>", "error_message": "(FATAL)\n%%ERROR: The following symbols are used with multiple arities: ViennaMusicSociety/1, ViennaMusicSociety/0, SymphonyNo9/1, SymphonyNo9/0.\n\n\nFatal error:  The following symbols are used with multiple arities: ViennaMusicSociety/1, ViennaMusicSociety/0, SymphonyNo9/1, SymphonyNo9/0", "stack_trace": "Traceback (most recent call last):\n  File \"/data/gpfs/projects/punim0478/bansaab/linc2/eval/tasks/owafoltask.py\", line 577, in _process_neurosymbolic\n    parsed = json.loads(gen)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/json/__init__.py\", line 346, in loads\n    return _default_decoder.decode(s)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/json/decoder.py\", line 337, in decode\n    obj, end = self.raw_decode(s, idx=_w(s, 0).end())\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/json/decoder.py\", line 355, in raw_decode\n    raise JSONDecodeError(\"Expecting value\", s, err.value) from None\njson.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"/data/gpfs/projects/punim0478/bansaab/linc2/eval/tasks/utils.py\", line 219, in evaluate\n    truth_value = prover.prove(c, p_list)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/inference/api.py\", line 37, in prove\n    return self._prove(goal, assumptions, verbose)[0]\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/inference/prover9.py\", line 327, in _prove\n    stdout, returncode = self._call_prover9(\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/inference/prover9.py\", line 370, in _call_prover9\n    raise Prover9FatalException(returncode, errormsg)\nnltk.inference.prover9.Prover9FatalException: (FATAL)\n%%ERROR: The following symbols are used with multiple arities: ViennaMusicSociety/1, ViennaMusicSociety/0, SymphonyNo9/1, SymphonyNo9/0.\n\n\nFatal error:  The following symbols are used with multiple arities: ViennaMusicSociety/1, ViennaMusicSociety/0, SymphonyNo9/1, SymphonyNo9/0\n"}
{"timestamp": "2025-09-16T18:57:52.508830", "premises": ["all x. (MusicPiece(x) -> SymphonyNo9(x))", "all x. (Composer(x) -> Write(x, MusicPiece))", "all x. (Beethoven(x) -> Write(x, SymphonyNo9))", "all x. (ViennaMusicSociety(x) -> Premier(x, SymphonyNo9))", "all x. (ViennaMusicSociety(x) -> Orchestra(x))", "all x. (Beethoven(x) -> Lead(x, ViennaMusicSociety))", "all x. (Orchestra(x) -> LedBy(x, Conductor))"], "conclusion": "exists x. (Orchestra(x) & Premier(x, MusicPiece))", "error_type": "<class 'nltk.inference.prover9.Prover9FatalException'>", "error_message": "(FATAL)\n%%ERROR: The following symbols are used with multiple arities: ViennaMusicSociety/1, ViennaMusicSociety/0, SymphonyNo9/1, SymphonyNo9/0, MusicPiece/1, MusicPiece/0.\n\n\nFatal error:  The following symbols are used with multiple arities: ViennaMusicSociety/1, ViennaMusicSociety/0, SymphonyNo9/1, SymphonyNo9/0, MusicPiece/1, MusicPiece/0", "stack_trace": "Traceback (most recent call last):\n  File \"/data/gpfs/projects/punim0478/bansaab/linc2/eval/tasks/owafoltask.py\", line 577, in _process_neurosymbolic\n    parsed = json.loads(gen)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/json/__init__.py\", line 346, in loads\n    return _default_decoder.decode(s)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/json/decoder.py\", line 337, in decode\n    obj, end = self.raw_decode(s, idx=_w(s, 0).end())\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/json/decoder.py\", line 355, in raw_decode\n    raise JSONDecodeError(\"Expecting value\", s, err.value) from None\njson.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"/data/gpfs/projects/punim0478/bansaab/linc2/eval/tasks/utils.py\", line 219, in evaluate\n    truth_value = prover.prove(c, p_list)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/inference/api.py\", line 37, in prove\n    return self._prove(goal, assumptions, verbose)[0]\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/inference/prover9.py\", line 327, in _prove\n    stdout, returncode = self._call_prover9(\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/inference/prover9.py\", line 370, in _call_prover9\n    raise Prover9FatalException(returncode, errormsg)\nnltk.inference.prover9.Prover9FatalException: (FATAL)\n%%ERROR: The following symbols are used with multiple arities: ViennaMusicSociety/1, ViennaMusicSociety/0, SymphonyNo9/1, SymphonyNo9/0, MusicPiece/1, MusicPiece/0.\n\n\nFatal error:  The following symbols are used with multiple arities: ViennaMusicSociety/1, ViennaMusicSociety/0, SymphonyNo9/1, SymphonyNo9/0, MusicPiece/1, MusicPiece/0\n"}
{"timestamp": "2025-09-16T19:00:31.404739", "premises": ["all x. (MusicPiece(x) -> Composer(x))", "all x. (Composer(x) -> MusicPiece(x))", "all x. (MusicPiece(x) -> SymphonyNo9(x))", "all x. (SymphonyNo9(x) -> Beethoven(x))", "all x. (Beethoven(x) -> Leads(x, ViennaMusicSociety))", "all x. (Leads(x, ViennaMusicSociety) -> Orchestra(ViennaMusicSociety))", "all x. (Orchestra(x) -> LedBy(x, Conductor))", "all x. (Conductor(x) -> -Leads(x, ViennaMusicSociety))", "all x. (Conductor(x) -> -Orchestra(x))", "all x. (Conductor(x) -> -Leads(x, ViennaMusicSociety))", "all x. (Conductor(x) -> -LedBy(x, Conductor))", "all x. (Conductor(x) -> -Leads(x, ViennaMusicSociety))", "all x. (Conductor(x) -> -Orchestra(x))", "all x. (Conductor(x) -> -Leads(x, ViennaMusicSociety))", "all x. (Conductor(x) -> -LedBy(x, Conductor))", "all x. (Conductor(x) -> -Leads(x, ViennaMusicSociety))", "all x. (Conductor(x) -> -Orchestra(x))", "all x. (Conductor(x) -> -Leads(x, ViennaMusicSociety))", "all x. (Conductor(x) -> -LedBy(x, Conductor))", "all x. (Conductor(x) -> -Leads(x, ViennaMusicSociety))", "all x. (Conductor(x) -> -Orchestra(x))", "all x. (Conductor(x) -> -Leads(x, ViennaMusicSociety))", "all x. (Conductor(x) -> -LedBy(x, Conductor))", "all x. (Conductor(x) -> -Leads(x, ViennaMusicSociety))", "all x. (Conductor(x) -> -Orchestra(x))", "all x. (Conductor(x) -> -Leads(x, ViennaMusicSociety))", "all x. (Conductor(x) -> -LedBy(x, Conductor))", "all x. (Conductor(x) -> -Leads(x, ViennaMusicSociety))", "all x. (Conductor(x) -> -Orchestra(x))", "all x. (Conductor(x) -> -Leads(x, ViennaMusicSociety))", "all x. (Conductor(x) -> -LedBy(x, Conductor))", "all x. (Conductor(x) -> -Leads(x, ViennaMusicSociety))", "all x. (Conductor(x) -> -Orchestra(x))", "all x. (Conductor(x) -> -Leads(x, ViennaMusicSociety))", "all x. (Conductor(x) -> -LedBy(x, Conductor))", "all x. (Conductor(x) -> -Leads(x, ViennaMusicSociety))", "all x. (Conductor(x) -> -Orchestra(x))", "all x. (Conductor(x) -> -Leads(x, ViennaMusicSociety))", "all x. (Conductor(x) -> -LedBy(x, Conductor))", "all x. (Conductor(x) -> -Leads(x, ViennaMusicSociety))", "all x. (Conductor(x) -> -Orchestra(x))", "all x. (Conductor(x) -> -Leads(x, ViennaMusicSociety))", "all x. (Conductor(x) -> -LedBy(x, Conductor))", "all x. (Conductor(x) -> -Leads(x, ViennaMusicSociety))", "all x. (Conductor(x) -> -Orchestra(x))", "all x. (Conductor(x) -> -Leads(x, ViennaMusicSociety))", "all x. (Conductor(x) -> -LedBy(x, Conductor))", "all x. (Conductor(x) -> -Leads(x, ViennaMusicSociety))", "all x. (Conductor(x) -> -Orchestra(x))", "all x. (Conductor(x) -> -Leads(x, ViennaMusicSociety))", "all x. (Conductor(x) -> -LedBy(x, Conductor))", "all x. (Conductor(x) -> -Leads(x, ViennaMusicSociety))", "all x. (Conductor(x) -> -Orchestra(x))", "all x. (Conductor(x) -> -Leads(x, ViennaMusicSociety))", "all x. (Conductor(x) -> -LedBy(x, Conductor))", "all x. (Conductor(x) -> -Leads(x, ViennaMusicSociety))", "all x. (Conductor(x) -> -Orchestra(x))", "all x. (Conductor(x) -> -Leads(x, ViennaMusicSociety))", "all x. (Conductor(x) -> -LedBy(x, Conductor))", "all x. (Conductor(x) -> -Leads(x, ViennaMusicSociety))", "all x. (Conductor(x) -> -Orchestra(x))", "all x. (Conductor(x) -> -Leads(x, ViennaMusicSociety))", "all x. (Conductor(x) -> -LedBy(x, Conductor))", "all x. (Conductor(x) -> -Leads(x, ViennaMusicSociety))", "all x. (Conductor(x) -> -Orchestra(x))", "all x. (Conductor(x) -> -Leads(x, ViennaMusicSociety))", "all x. (Conductor(x) -> -LedBy(x, Conductor))", "all x. (Conductor(x) -> -Leads(x, ViennaMusicSociety))", "all x. (Conductor(x) -> -Orchestra(x))", "all x. (Conductor(x) -> -Leads(x, ViennaMusicSociety))", "all x. (Conductor(x) -> -LedBy(x, Conductor))", "all x. (Conductor(x) -> -Leads(x, ViennaMusicSociety))", "all x. (Conductor(x) -> -Orchestra(x))", "all x. (Conductor(x) -> -Leads(x, ViennaMusicSociety))", "all x. (Conductor(x) -> -LedBy(x, Conductor))", "all x. (Conductor(x) -> -Leads(x, ViennaMusicSociety))", "all x. (Conductor(x) -> -Orchestra(x))", "all x. (Conductor(x) -> -Leads(x, ViennaMusicSociety))", "all x. (Conductor(x) -> -LedBy(x, Conductor))", "all x. (Conductor(x) -> -Leads(x, ViennaMusicSociety))", "all x. (Conductor(x) -> -Orchestra(x))", "all x. (Conductor(x) -> -Leads(x, ViennaMusicSociety))", "all x. (Conductor(x) -> -LedBy(x, Conductor))", "all x. (Conductor(x) -> -Leads(x, ViennaMusicSociety))", "all x. (Conductor(x) -> -Orchestra(x))", "all x. (Conductor(x) -> -Leads(x, ViennaMusicSociety))", "all x. (Conductor(x) -> -LedBy(x, Conductor))", "all x. (Conductor(x) -> -Leads(x, ViennaMusicSociety))", "all x. (Conductor(x) -> -Orchestra(x))", "all x. (Conductor(x) -> -Leads(x, ViennaMusicSociety))", "all x. (Conductor(x) -> -LedBy(x, Conductor))", "all x. (Conductor(x) -> -Leads(x, ViennaMusicSociety))", "all x. (Conductor(x) -> -Orchestra(x))", "all x. (Conductor(x) -> -Leads(x, ViennaMusicSociety))", "all x. (Conductor(x) -> -LedBy(x, Conductor))", "all x. (Conductor(x) -> -Leads(x, ViennaMusicSociety))", "all x. (Conductor(x) -> -Orchestra(x))", "all x. (Conductor(x) -> -Leads(x, ViennaMusicSociety))", "all x. (Conductor(x) -> -LedBy(x, Conductor))", "all x. (Conductor(x) -> -Leads(x, ViennaMusicSociety))", "all x. (Conductor(x) -> -Orchestra(x))", "all x. (Conductor(x) -> -Leads(x, ViennaMusicSociety))", "all x. (Conductor(x) -> -LedBy(x, Conductor))", "all x. (Conductor(x) -> -Leads(x, ViennaMusicSociety))", "all x. (Conductor(x) -> -Orchestra(x))", "all x. (Conductor(x) -> -Leads(x, ViennaMusicSociety))", "all x. (Conductor(x) -> -LedBy(x, Conductor))", "all x. (Conductor(x) -> -Leads(x, ViennaMusicSociety))", "all x. (Conductor(x) -> -Orchestra(x))", "all x. (Conductor(x) -> -Leads(x, ViennaMusicSociety))", "all x. (Conductor(x) -> -LedBy(x, Conductor))", "all x. (Conductor(x) -> -Leads(x, ViennaMusicSociety))", "all x. (Conductor(x) -> -Orchestra(x))", "all x. (Conductor(x) -> -Leads(x, ViennaMusicSociety))", "all x. (Conductor(x) -> -LedBy(x, Conductor))", "all x. (Conductor(x) -> -Leads(x, ViennaMusicSociety))", "all x. (Conductor(x) -> -Orchestra(x))", "all x. (Conductor(x) -> -Leads(x, ViennaMusicSociety))", "all x. (Conductor(x) -> -LedBy(x, Conductor))", "all x. (Conductor(x) -> -Leads(x, ViennaMusicSociety))", "all x. (x -> exists y. ViennaMusicSociety(y) & (Conductor(x) -> Leads(x, y)))", "all x. (x -> exists y. ViennaMusicSociety(y) & (Conductor(x) -> Leads(x, y)))", "all x. (x -> exists y. ViennaMusicSociety(y) & (Conductor(x) -> Leads(x, y)))", "all x. (x -> exists y. ViennaMusicSociety(y) & (Conductor(x) -> Leads(x, y)))", "all x. (x -> exists y. ViennaMusicSociety(y) & (Conductor(x) -> Leads(x, y)))", "all x. (x -> exists y. ViennaMusicSociety(y) & (Conductor(x) -> Leads(x, y)))", "all x. (x -> exists y. ViennaMusicSociety(y) & (Conductor(x) -> Leads(x, y)))", "all x. (x -> exists y. ViennaMusicSociety(y) & (Conductor(x) -> Leads(x, y)))", "all x. (x -> exists y. ViennaMusicSociety(y) & (Conductor(x) -> Leads(x, y)))", "all x. (x -> exists y. ViennaMusicSociety(y) & (Conductor(x) -> Leads(x, y)))", "all x. (x -> exists y. ViennaMusicSociety(y) & (Conductor(x) -> Leads(x, y)))", "all x. (x -> exists y. ViennaMusicSociety(y) & (Conductor(x) -> Leads(x, y)))", "all x. (x -> exists y. ViennaMusicSociety(y) & (Conductor(x) -> Leads(x, y)))", "all x. (x -> exists y. ViennaMusicSociety(y) & (Conductor(x) -> Leads(x, y)))", "all x. (x -> exists y. ViennaMusicSociety(y) & (Conductor(x) -> Leads(x, y)))", "all x. (x -> exists y. ViennaMusicSociety(y) & (Conductor(x) -> Leads(x, y)))", "all x. (x -> exists y. ViennaMusicSociety(y) & (Conductor(x) -> Leads(x, y)))", "all x. (x -> exists y. ViennaMusicSociety(y) & (Conductor(x) -> Leads(x, y)))", "all x. (x -> exists y. ViennaMusicSociety(y) & (Conductor(x) -> Leads(x, y)))", "all x. (x -> exists y. ViennaMusicSociety(y) & (Conductor(x) -> Leads(x, y)))", "all x. (x -> exists y. ViennaMusicSociety(y) & (Conductor(x) -> Leads(x, y)))", "all x. (x -> exists y. ViennaMusicSociety(y) & (Conductor(x) -> Leads(x, y)))", "all x. (x -> exists y. ViennaMusicSociety(y) & (Conductor(x) -> Leads(x, y)))", "all x. (x -> exists y. ViennaMusicSociety(y) & (Conductor(x) -> Leads(x, y)))", "all x. (x -> exists y. ViennaMusicSociety(y) & (Conductor(x) -> Leads(x, y)))", "all x. (x -> exists y. ViennaMusicSociety(y) & (Conductor(x) -> Leads(x, y)))", "all x. (x -> exists y. ViennaMusicSociety(y) & (Conductor(x) -> Leads(x, y)))", "all x. (x -> exists y. ViennaMusicSociety(y) & (Conductor(x) -> Leads(x, y)))", "all x. (x -> exists y. ViennaMusicSociety(y) & (Conductor(x) -> Leads(x, y)))", "all x. (x -> exists y. ViennaMusicSociety(y) & (Conductor(x) -> Leads(x, y)))", "all x. (x -> exists y. ViennaMusicSociety(y) & (Conductor(x) -> Leads(x, y)))", "all x. (x -> exists y. ViennaMusicSociety(y) & (Conductor(x) -> Leads(x, y)))", "all x. (x -> exists y. ViennaMusicSociety(y) & (Conductor(x) -> Leads(x, y)))", "all x. (x -> exists y. ViennaMusicSociety(y) & (Conductor(x) -> Leads(x, y)))", "all x. (x -> exists y. ViennaMusicSociety(y) & (Conductor(x) -> Leads(x, y)))", "all x. (x -> exists y. ViennaMusicSociety(y) & (Conductor(x) -> Leads(x, y)))", "all x. (x -> exists y. ViennaMusicSociety(y) & (Conductor(x) -> Leads(x, y)))", "all x. (x -> exists y. ViennaMusicSociety(y) & (Conductor(x) -> Leads(x, y)))", "all x. (x -> exists y. ViennaMusicSociety(y) & (Conductor(x) -> Leads(x, y)))", "all x. (x -> exists y. ViennaMusicSociety(y) & (Conductor(x) -> Leads(x, y)))", "all x. (x -> exists y. ViennaMusicSociety(y) & (Conductor(x) -> Leads(x, y)))", "all x. (x -> exists y. ViennaMusicSociety(y) & (Conductor(x) -> Leads(x, y)))", "all x. (x -> exists y. ViennaMusicSociety(y) & (Conductor(x) -> Leads(x, y)))", "all x. (x -> exists y. ViennaMusicSociety(y) & (Conductor(x) -> Leads(x, y)))", "all x. (x -> exists y. ViennaMusicSociety(y) & (Conductor(x) -> Leads(x, y)))", "all x. (x -> exists y. ViennaMusicSociety(y) & (Conductor(x) -> Leads(x, y)))", "all x. (x -> exists y. ViennaMusicSociety(y) & (Conductor(x) -> Leads(x, y)))", "all x. (x -> exists y. ViennaMusicSociety(y) & (Conductor(x) -> Leads(x, y)))", "all x. (x -> exists y. ViennaMusicSociety(y) & (Conductor(x) -> Leads(x, y)))", "all x. (x -> exists y. ViennaMusicSociety(y) & (Conductor(x) -> Leads(x, y)))", "all x. (x -> exists y. ViennaMusicSociety(y) & (Conductor(x) -> Leads(x, y)))", "all x. (x -> exists y. ViennaMusicSociety(y) & (Conductor(x) -> Leads(x, y)))", "all x. (x -> exists y. ViennaMusicSociety(y) & (Conductor(x) -> Leads(x, y)))", "all x. (x -> exists y. ViennaMusicSociety(y) & (Conductor(x) -> Leads(x, y)))", "all x. (x -> exists y. ViennaMusicSociety(y) & (Conductor(x) -> Leads(x, y)))", "all x. (x -> exists y. ViennaMusicSociety(y) & (Conductor(x) -> Leads(x, y)))", "all x. (x -> exists y. ViennaMusicSociety(y) & (Conductor(x) -> Leads(x, y)))", "all x. (x -> exists y. ViennaMusicSociety(y) & (Conductor(x) -> Leads(x, y)))", "all x. (x -> exists y. ViennaMusicSociety(y) & (Conductor(x) -> Leads(x, y)))", "all x. (x -> exists y. ViennaMusicSociety(y) & (Conductor(x) -> Leads(x, y)))", "all x. (x -> exists y. ViennaMusicSociety(y) & (Conductor(x) -> Leads(x, y)))", "all x. (x -> exists y. ViennaMusicSociety(y) & (Conductor(x) -> Leads(x, y)))", "all x. (x -> exists y. ViennaMusicSociety(y) & (Conductor(x) -> Leads(x, y)))", "all x. (x -> exists y. ViennaMusicSociety(y) & (Conductor(x) -> Leads(x, y)))", "all x. (x -> exists y. ViennaMusicSociety(y) & (Conductor(x) -> Leads(x, y)))", "all x. (x -> exists y. ViennaMusicSociety(y) & (Conductor(x) -> Leads(x, y)))", "all x. (x -> exists y. ViennaMusicSociety(y) & (Conductor(x) -> Leads(x, y)))", "all x. (x -> exists y. ViennaMusicSociety(y) & (Conductor(x) -> Leads(x, y)))", "all x. (x -> exists y. ViennaMusicSociety(y) & (Conductor(x) -> Leads(x, y)))", "all x. (x -> exists y. ViennaMusicSociety(y) & (Conductor(x) -> Leads(x, y)))", "all x. (x -> exists y. ViennaMusicSociety(y) & (Conductor(x) -> Leads(x, y)))", "all x. (x -> exists y. ViennaMusicSociety(y) & (Conductor(x) -> Leads(x, y)))", "all x. (x -> exists y. ViennaMusicSociety(y) & (Conductor(x) -> Leads(x, y)))", "all x. (x -> exists y. ViennaMusicSociety(y) & (Conductor(x) -> Leads(x, y)))", "all x. (x -> exists y. ViennaMusicSociety(y) & (Conductor(x) -> Leads(x, y)))", "all x. (x -> exists y. ViennaMusicSociety(y) & (Conductor(x) -> Leads(x, y)))", "all x. (x -> exists y. ViennaMusicSociety(y) & (Conductor(x) -> Leads(x, y)))", "all x. (x -> exists y. ViennaMusicSociety(y) & (Conductor(x) -> Leads(x, y)))", "all x. (x -> exists y. ViennaMusicSociety(y) & (Conductor(x) -> Leads(x, y)))", "all x. (x -> exists y. ViennaMusicSociety(y) & (Conductor(x) -> Leads(x, y)))", "all x. (x -> exists y. ViennaMusicSociety(y) & (Conductor(x) -> Leads(x, y)))", "all x. (x -> exists y. ViennaMusicSociety(y) & (Conductor(x) -> Leads(x, y)))", "all x. (x -> exists y. ViennaMusicSociety(y) & (Conductor(x) -> Leads(x, y)))", "all x. (x -> exists y. ViennaMusicSociety(y) & (Conductor(x) -> Leads(x, y)))", "all x. (x -> exists y. ViennaMusicSociety(y) & (Conductor(x) -> Leads(x, y)))", "all x. (x -> exists y. ViennaMusicSociety(y) & (Conductor(x) -> Leads(x, y)))", "all x. (x -> exists y. ViennaMusicSociety(y) & (Conductor(x) -> Leads(x, y)))", "all x. (x -> exists y. ViennaMusicSociety(y) & (Conductor(x) -> Leads(x, y)))", "all x. (x -> exists y. ViennaMusicSociety(y) & (Conductor(x) -> Leads(x, y)))", "all x. (x -> exists y. ViennaMusicSociety(y) & (Conductor(x) -> Leads(x, y)))", "all x. (x -> exists y. ViennaMusicSociety(y) & (Conductor(x) -> Leads(x, y)))", "all x. (x -> exists y. ViennaMusicSociety(y) & (Conductor(x) -> Leads(x, y)))", "all x. (x -> exists y. ViennaMusicSociety(y) & (Conductor(x) -> Leads(x, y)))", "all x. (x -> exists y. ViennaMusicSociety(y) & (Conductor(x) -> Leads(x, y)))", "all x. (x -> exists y. ViennaMusicSociety(y) & (Conductor(x) -> Leads(x, y)))", "all x. (x -> exists y. ViennaMusicSociety(y) & (Conductor(x) -> Leads(x, y)))", "all x. (x -> exists y. ViennaMusicSociety(y) & (Conductor(x) -> Leads(x, y)))", "all x. (x -> exists y. ViennaMusicSociety(y) & (Conductor(x) -> Leads(x, y)))", "all x. (x -> exists y. ViennaMusicSociety(y) & (Conductor(x) -> Leads(x, y)))", "all x. (x -> exists y. ViennaMusicSociety(y) & (Conductor(x) -> Leads(x, y)))", "all x. (x -> exists y. ViennaMusicSociety(y) & (Conductor(x) -> Leads(x, y)))", "all x. (x -> exists y. ViennaMusicSociety(y) & (Conductor(x) -> Leads(x, y)))", "all x. (x -> exists y. ViennaMusicSociety(y) -> (x -> exists z. ViennaMusicSociety(z) & (Conductor(z) -> Leads(z, y))))", "all x. (x -> exists y. ViennaMusicSociety(y) & (Conductor(x) -> Leads(x, y)))", "all x. (x -> exists y. ViennaMusicSociety(y) & (Conductor(x) -> Leads(x, y)))", "all x. (x -> exists y. ViennaMusicSociety(y) & (Conductor(x) -> Leads(x, y)))", "all x. (x -> exists y. ViennaMusicSociety(y) & (Conductor(x) -> Leads(x, y)))", "all x. (x -> exists y. ViennaMusicSociety(y) & (Conductor(x) -> Leads(x, y)))", "all x. (x -> exists y. ViennaMusicSociety(y) & (Conductor(x) -> Leads(x, y)))", "all x. (x -> exists y. ViennaMusicSociety(y) & (Conductor(x) -> Leads(x, y)))", "all x. (x -> exists y. ViennaMusicSociety(y) & (Conductor(x) -> Leads(x, y)))", "all x. (x -> exists y. ViennaMusicSociety(y) & (Conductor(x) -> Leads(x, y)))", "all x. (x -> exists y. ViennaMusicSociety(y) & (Conductor(x) -> Leads(x, y)))", "all x. (x -> exists y. ViennaMusicSociety(y) & (Conductor(x) -> Leads(x, y)))", "all x. (x -> exists y. ViennaMusicSociety(y) & (Conductor(x) -> Leads(x, y)))", "all x. (x -> exists y. ViennaMusicSociety(y) & (Conductor(x) -> Leads(x, y)))", "all x. (x -> exists y. ViennaMusicSociety(y) & (Conductor(x) -> Leads(x, y)))", "all x. (x -> exists y. ViennaMusicSociety(y) & (Conductor(x) -> Leads(x, y)))", "all x. (x -> exists y. ViennaMusicSociety(y) & (Conductor(x) -> Leads(x, y)))", "all x. (x -> exists y. ViennaMusicSociety(y) & (Conductor(x) -> Leads(x, y)))", "all x. (x -> exists y. ViennaMusicSociety(y) & (Conductor(x) -> Leads(x, y)))", "all x. (x -> exists y. ViennaMusicSociety(y) & (Conductor(x) -> Leads(x, y)))", "all x. (x -> exists y. ViennaMusicSociety(y) & (Conductor(x) -> Leads(x, y)))", "all x. (x -> exists y. ViennaMusicSociety(y) & (Conductor(x) -> Leads(x, y)))", "all x. (x -> exists y. ViennaMusicSociety(y) & (Conductor(x) -> Leads(x, y)))", "all x. (x -> exists y. ViennaMusicSociety(y) & (Conductor(x) -> Leads(x, y)))", "all x. (x -> exists y. ViennaMusicSociety(y) & (Conductor(x) -> Leads(x, y)))", "all x. (x -> exists y. ViennaMusicSociety(y) & (Conductor(x) -> Leads(x, y)))", "all x. (x -> exists y. ViennaMusicSociety(y) & (Conductor(x) -> Leads(x, y)))", "all x. (x -> exists y. ViennaMusicSociety(y) & (Conductor(x) -> Leads(x, y)))", "all x. (x -> exists y. ViennaMusicSociety(y) & (Conductor(x) -> Leads(x, y)))", "all x. (x -> exists y. ViennaMusicSociety(y) & (Conductor(x) -> Leads(x, y)))", "all x. (x -> exists y. ViennaMusicSociety(y) & (Conductor(x) -> Leads(x, y)))", "all x. (x -> exists y. ViennaMusicSociety(y) & (Conductor(x) -> Leads(x, y)))", "all x. (x -> exists y. ViennaMusicSociety(y) & (Conductor(x) -> Leads(x, y)))", "all x. (x -> exists y. ViennaMusicSociety(y) & (Conductor(x) -> Leads(x, y)))", "all x. (x -> exists y. ViennaMusicSociety(y) & (Conductor(x) -> Leads(x, y)))", "all x. (x -> exists y. ViennaMusicSociety(y) & (Conductor(x) -> Leads(x, y)))", "all x. (x -> exists y. ViennaMusicSociety(y) & (Conductor(x) -> Leads(x, y)))"], "conclusion": "all x. (x -> exists y. ViennaMusicSoc", "error_type": "<class 'nltk.sem.logic.LogicalExpressionException'>", "error_message": "End of input found.  Expected token ')'.\nall x. (x -> exists y. ViennaMusicSoc\n                                     ^", "stack_trace": "Traceback (most recent call last):\n  File \"/data/gpfs/projects/punim0478/bansaab/linc2/eval/tasks/owafoltask.py\", line 577, in _process_neurosymbolic\n    parsed = json.loads(gen)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/json/__init__.py\", line 346, in loads\n    return _default_decoder.decode(s)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/json/decoder.py\", line 337, in decode\n    obj, end = self.raw_decode(s, idx=_w(s, 0).end())\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/json/decoder.py\", line 355, in raw_decode\n    raise JSONDecodeError(\"Expecting value\", s, err.value) from None\njson.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/sem/logic.py\", line 270, in token\n    tok = self._buffer[self._currentIndex]\nIndexError: list index out of range\n\nThe above exception was the direct cause of the following exception:\n\nTraceback (most recent call last):\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/sem/logic.py\", line 562, in assertNextToken\n    tok = self.token()\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/sem/logic.py\", line 276, in token\n    raise ExpectedMoreTokensException(self._currentIndex + 1) from e\nnltk.sem.logic.ExpectedMoreTokensException: End of input found.  More tokens expected.\n\nThe above exception was the direct cause of the following exception:\n\nTraceback (most recent call last):\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/sem/logic.py\", line 154, in parse\n    result = self.process_next_expression(None)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/sem/logic.py\", line 290, in process_next_expression\n    accum = self.handle(tok, context)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/sem/logic.py\", line 312, in handle\n    return self.handle_quant(tok, context)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/sem/logic.py\", line 427, in handle_quant\n    accum = self.process_next_expression(tok)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/sem/logic.py\", line 290, in process_next_expression\n    accum = self.handle(tok, context)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/sem/logic.py\", line 315, in handle\n    return self.handle_open(tok, context)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/sem/logic.py\", line 450, in handle_open\n    self.assertNextToken(Tokens.CLOSE)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/sem/logic.py\", line 564, in assertNextToken\n    raise ExpectedMoreTokensException(\nnltk.sem.logic.ExpectedMoreTokensException: End of input found.  Expected token ')'.\n\nThe above exception was the direct cause of the following exception:\n\nTraceback (most recent call last):\n  File \"/data/gpfs/projects/punim0478/bansaab/linc2/eval/tasks/utils.py\", line 215, in evaluate\n    c = read_expr(conclusion)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/sem/logic.py\", line 957, in fromstring\n    return cls._logic_parser.parse(s, signature)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/sem/logic.py\", line 159, in parse\n    raise LogicalExpressionException(None, msg) from e\nnltk.sem.logic.LogicalExpressionException: End of input found.  Expected token ')'.\nall x. (x -> exists y. ViennaMusicSoc\n                                     ^\n"}
{"timestamp": "2025-09-16T19:00:31.423562", "premises": ["all x. (MusicPiece(x) -> Beethoven(x) & ViennaMusicSociety(x) & (Premiered(ViennaMusicSociety, x) | Leads(Beethoven, x)))", "all x. (Composer(x) -> MusicPiece(x))", "all x. (Beethoven(x) -> MusicPiece(x))", "all x. (Premiered(ViennaMusicSociety, x) -> MusicPiece(x))", "all x. (Leads(Beethoven, x) -> MusicPiece(x))", "all x. (Orchestra(x) -> Leads(x))", "all x. (Beethoven(x) -> Conductor(x))"], "conclusion": "all x. (Conductor(x) -> Leads(x))", "error_type": "<class 'nltk.inference.prover9.Prover9FatalException'>", "error_message": "(FATAL)\n%%ERROR: The following symbols are used with multiple arities: Leads/2, Leads/1, Beethoven/1, Beethoven/0, ViennaMusicSociety/1, ViennaMusicSociety/0.\n\n\nFatal error:  The following symbols are used with multiple arities: Leads/2, Leads/1, Beethoven/1, Beethoven/0, ViennaMusicSociety/1, ViennaMusicSociety/0", "stack_trace": "Traceback (most recent call last):\n  File \"/data/gpfs/projects/punim0478/bansaab/linc2/eval/tasks/owafoltask.py\", line 577, in _process_neurosymbolic\n    parsed = json.loads(gen)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/json/__init__.py\", line 346, in loads\n    return _default_decoder.decode(s)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/json/decoder.py\", line 337, in decode\n    obj, end = self.raw_decode(s, idx=_w(s, 0).end())\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/json/decoder.py\", line 355, in raw_decode\n    raise JSONDecodeError(\"Expecting value\", s, err.value) from None\njson.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"/data/gpfs/projects/punim0478/bansaab/linc2/eval/tasks/utils.py\", line 219, in evaluate\n    truth_value = prover.prove(c, p_list)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/inference/api.py\", line 37, in prove\n    return self._prove(goal, assumptions, verbose)[0]\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/inference/prover9.py\", line 327, in _prove\n    stdout, returncode = self._call_prover9(\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/inference/prover9.py\", line 370, in _call_prover9\n    raise Prover9FatalException(returncode, errormsg)\nnltk.inference.prover9.Prover9FatalException: (FATAL)\n%%ERROR: The following symbols are used with multiple arities: Leads/2, Leads/1, Beethoven/1, Beethoven/0, ViennaMusicSociety/1, ViennaMusicSociety/0.\n\n\nFatal error:  The following symbols are used with multiple arities: Leads/2, Leads/1, Beethoven/1, Beethoven/0, ViennaMusicSociety/1, ViennaMusicSociety/0\n"}
{"timestamp": "2025-09-16T19:00:31.415461", "premises": ["all x. (Dispensable(x) -> A(x))", "all x. (EnvironmentFriendly(x) -> A(x))", "all x. (Woodware(x) -> A(x))", "all x. (Paper(x) -> A(x))", "all x. (Worksheet(x) -> A(x))", "(Paper(Worksheet) & -EnvironmentFriendly(Worksheet)) | (-Paper(Worksheet) & EnvironmentFriendly(Worksheet))"], "conclusion": "-Dispensable(A)", "error_type": "<class 'nltk.inference.prover9.Prover9FatalException'>", "error_message": "(FATAL)\n%%ERROR: The following symbols are used with multiple arities: Worksheet/1, Worksheet/0, A/1, A/0.\n\n\nFatal error:  The following symbols are used with multiple arities: Worksheet/1, Worksheet/0, A/1, A/0", "stack_trace": "Traceback (most recent call last):\n  File \"/data/gpfs/projects/punim0478/bansaab/linc2/eval/tasks/owafoltask.py\", line 577, in _process_neurosymbolic\n    parsed = json.loads(gen)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/json/__init__.py\", line 346, in loads\n    return _default_decoder.decode(s)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/json/decoder.py\", line 337, in decode\n    obj, end = self.raw_decode(s, idx=_w(s, 0).end())\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/json/decoder.py\", line 355, in raw_decode\n    raise JSONDecodeError(\"Expecting value\", s, err.value) from None\njson.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"/data/gpfs/projects/punim0478/bansaab/linc2/eval/tasks/utils.py\", line 219, in evaluate\n    truth_value = prover.prove(c, p_list)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/inference/api.py\", line 37, in prove\n    return self._prove(goal, assumptions, verbose)[0]\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/inference/prover9.py\", line 327, in _prove\n    stdout, returncode = self._call_prover9(\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/inference/prover9.py\", line 370, in _call_prover9\n    raise Prover9FatalException(returncode, errormsg)\nnltk.inference.prover9.Prover9FatalException: (FATAL)\n%%ERROR: The following symbols are used with multiple arities: Worksheet/1, Worksheet/0, A/1, A/0.\n\n\nFatal error:  The following symbols are used with multiple arities: Worksheet/1, Worksheet/0, A/1, A/0\n"}
{"timestamp": "2025-09-16T19:00:31.419087", "premises": ["all x. (MusicPiece(x) -> SymphonyNo9(x))", "all x. (Composer(x) -> MusicPiece(x))", "all x. (MusicPiece(x) -> Beethoven(x))", "all x. (Premiered(x, SymphonyNo9) -> ViennaMusicSociety(x))", "all x. (Orchestra(x) -> ViennaMusicSociety(x))", "all x. (Leads(x, ViennaMusicSociety) -> Beethoven(x))", "all x. (Orchestra(x) -> Conductor(x))", "all x. (Leads(x, ViennaMusicSociety) -> Conductor(x))"], "conclusion": "all x. (Beethoven(x) -> NotConductor(x))", "error_type": "<class 'nltk.inference.prover9.Prover9FatalException'>", "error_message": "(FATAL)\n%%ERROR: The following symbols are used with multiple arities: ViennaMusicSociety/1, ViennaMusicSociety/0, SymphonyNo9/1, SymphonyNo9/0.\n\n\nFatal error:  The following symbols are used with multiple arities: ViennaMusicSociety/1, ViennaMusicSociety/0, SymphonyNo9/1, SymphonyNo9/0", "stack_trace": "Traceback (most recent call last):\n  File \"/data/gpfs/projects/punim0478/bansaab/linc2/eval/tasks/owafoltask.py\", line 577, in _process_neurosymbolic\n    parsed = json.loads(gen)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/json/__init__.py\", line 346, in loads\n    return _default_decoder.decode(s)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/json/decoder.py\", line 337, in decode\n    obj, end = self.raw_decode(s, idx=_w(s, 0).end())\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/json/decoder.py\", line 355, in raw_decode\n    raise JSONDecodeError(\"Expecting value\", s, err.value) from None\njson.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"/data/gpfs/projects/punim0478/bansaab/linc2/eval/tasks/utils.py\", line 219, in evaluate\n    truth_value = prover.prove(c, p_list)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/inference/api.py\", line 37, in prove\n    return self._prove(goal, assumptions, verbose)[0]\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/inference/prover9.py\", line 327, in _prove\n    stdout, returncode = self._call_prover9(\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/inference/prover9.py\", line 370, in _call_prover9\n    raise Prover9FatalException(returncode, errormsg)\nnltk.inference.prover9.Prover9FatalException: (FATAL)\n%%ERROR: The following symbols are used with multiple arities: ViennaMusicSociety/1, ViennaMusicSociety/0, SymphonyNo9/1, SymphonyNo9/0.\n\n\nFatal error:  The following symbols are used with multiple arities: ViennaMusicSociety/1, ViennaMusicSociety/0, SymphonyNo9/1, SymphonyNo9/0\n"}
{"timestamp": "2025-09-16T19:00:31.439724", "premises": ["all x. (MusicPiece(x) -> SymphonyNo9(x))", "all x. (Composer(x) -> WriteMusic(x))", "all x. (Composer(Beethoven) -> WriteMusic(Beethoven, SymphonyNo9))", "all x. (Orchestra(ViennaMusicSociety) -> Premiere(ViennaMusicSociety, SymphonyNo9))", "all x. (Orchestra(x) -> ViennaMusicSociety(x))", "all x. (Leads(Beethoven, ViennaMusicSociety) -> Conductor(Beethoven))", "all x. (Orchestra(x) -> Leads(Conductor, x))", "-Conductor(Beethoven)", "all x. (MusicPiece(x) -> SymphonyNo9(x))", "all x. (Composer(x) -> WriteMusic(x))", "all x. (Composer(Beethoven) -> WriteMusic(Beethoven, SymphonyNo9))", "all x. (Orchestra(ViennaMusicSociety) -> Premiere(ViennaMusicSociety, SymphonyNo9))", "all x. (Orchestra(x) -> ViennaMusicSociety(x))", "all x. (Leads(Beethoven, ViennaMusicSociety) -> Conductor(Beethoven))", "all x. (Orchestra(x) -> Leads(Conductor, x))", "-Conductor(Beethoven)", "all x. (BornIn(x, Unitedstates) -> AmericanCitizen(x))", "all x. (AmericanCitizen(x) -> HaveBirthCertificate(x))", "all x. (AmericanCitizen(x) -> HaveSocialSecurityNumber(x))", "all x. (AmericanCitizen(x) -> HaveDriverLicense(x))", "all x. (HaveBirthCertificate(x) & HaveSocialSecurityNumber(x) & HaveDriverLicense(x) -> AmericanCitizen(x))", "all x. (BornIn(x, Unitedstates) -> AmericanCitizen(x))", "all x. (AmericanCitizen(x) -> HaveBirthCertificate(x))", "all x. (AmericanCitizen(x) -> HaveSocialSecurityNumber(x))", "all x. (AmericanCitizen(x) -> HaveDriverLicense(x))", "all x. (HaveBirthCertificate(x) & HaveSocialSecurityNumber(x) & HaveDriverLicense(x) -> AmericanCitizen(x))", "all x. (BornIn(x, Unitedstates) -> AmericanCitizen(x))", "all x. (AmericanCitizen(x) -> HaveBirthCertificate(x))", "all x. (AmericanCitizen(x) -> HaveSocialSecurityNumber(x))", "all x. (AmericanCitizen(x) -> HaveDriverLicense(x))", "all x. (AmericanCitizen(x) -> HavePassport(x))", "all x. (HaveBirthCertificate(x) & HaveSocialSecurityNumber(x) & HaveDriverLicense(x) & HavePassport(x) -> CitizenOfUnitedStates(x))", "all x. (BornIn(x, Unitedstates) -> AmericanCitizen(x))", "all x. (AmericanCitizen(x) -> HaveBirthCertificate(x))", "all x. (AmericanCitizen(x) -> HaveSocialSecurityNumber(x))", "all x. (AmericanCitizen(x) -> HaveDriverLicense(x))", "all x. (AmericanCitizen(x) -> HavePassport(x))"], "conclusion": "all x. (HaveBirthCertificate(x) & HaveSocialSecurityNumber(x) & HaveDriverLicense(x) & HavePassport(x) -> CitizenOfUnitedStates(x))", "error_type": "<class 'nltk.inference.prover9.Prover9FatalException'>", "error_message": "(FATAL)\n%%ERROR: The following symbols are used with multiple arities: WriteMusic/2, WriteMusic/1, Conductor/1, Conductor/0, ViennaMusicSociety/1, ViennaMusicSociety/0, SymphonyNo9/1, SymphonyNo9/0.\n\n\nFatal error:  The following symbols are used with multiple arities: WriteMusic/2, WriteMusic/1, Conductor/1, Conductor/0, ViennaMusicSociety/1, ViennaMusicSociety/0, SymphonyNo9/1, SymphonyNo9/0", "stack_trace": "Traceback (most recent call last):\n  File \"/data/gpfs/projects/punim0478/bansaab/linc2/eval/tasks/owafoltask.py\", line 577, in _process_neurosymbolic\n    parsed = json.loads(gen)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/json/__init__.py\", line 346, in loads\n    return _default_decoder.decode(s)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/json/decoder.py\", line 337, in decode\n    obj, end = self.raw_decode(s, idx=_w(s, 0).end())\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/json/decoder.py\", line 355, in raw_decode\n    raise JSONDecodeError(\"Expecting value\", s, err.value) from None\njson.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"/data/gpfs/projects/punim0478/bansaab/linc2/eval/tasks/utils.py\", line 219, in evaluate\n    truth_value = prover.prove(c, p_list)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/inference/api.py\", line 37, in prove\n    return self._prove(goal, assumptions, verbose)[0]\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/inference/prover9.py\", line 327, in _prove\n    stdout, returncode = self._call_prover9(\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/inference/prover9.py\", line 370, in _call_prover9\n    raise Prover9FatalException(returncode, errormsg)\nnltk.inference.prover9.Prover9FatalException: (FATAL)\n%%ERROR: The following symbols are used with multiple arities: WriteMusic/2, WriteMusic/1, Conductor/1, Conductor/0, ViennaMusicSociety/1, ViennaMusicSociety/0, SymphonyNo9/1, SymphonyNo9/0.\n\n\nFatal error:  The following symbols are used with multiple arities: WriteMusic/2, WriteMusic/1, Conductor/1, Conductor/0, ViennaMusicSociety/1, ViennaMusicSociety/0, SymphonyNo9/1, SymphonyNo9/0\n"}
{"timestamp": "2025-09-16T19:00:31.450093", "premises": ["all x. all y. (MusicPiece(x) -> Composer(x))", "SymphonyNo9(x) -> MusicPiece(x)", "Composer(x) -> MusicPiece(x)", "all x. (Composer(x) & SymphonyNo9(x) -> Beethoven(x))", "all x. (MusicPiece(x) & ViennaMusicSocietyPremiered(x) -> ViennaMusicSociety(x))", "all x. (MusicPiece(x) & ViennaMusicSociety(x) -> Orchestra(x))", "all x. (MusicPiece(x) & Orchestra(x) -> Conductor(x))", "all x. (MusicPiece(x) & Orchestra(x) -> Conductor(x))"], "conclusion": "-Conductor(Beethoven)", "error_type": "<class 'nltk.inference.prover9.Prover9FatalException'>", "error_message": "(FATAL)\n%%ERROR: The following symbols are used with multiple arities: Beethoven/1, Beethoven/0.\n\n\nFatal error:  The following symbols are used with multiple arities: Beethoven/1, Beethoven/0", "stack_trace": "Traceback (most recent call last):\n  File \"/data/gpfs/projects/punim0478/bansaab/linc2/eval/tasks/owafoltask.py\", line 577, in _process_neurosymbolic\n    parsed = json.loads(gen)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/json/__init__.py\", line 346, in loads\n    return _default_decoder.decode(s)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/json/decoder.py\", line 337, in decode\n    obj, end = self.raw_decode(s, idx=_w(s, 0).end())\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/json/decoder.py\", line 355, in raw_decode\n    raise JSONDecodeError(\"Expecting value\", s, err.value) from None\njson.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"/data/gpfs/projects/punim0478/bansaab/linc2/eval/tasks/utils.py\", line 219, in evaluate\n    truth_value = prover.prove(c, p_list)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/inference/api.py\", line 37, in prove\n    return self._prove(goal, assumptions, verbose)[0]\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/inference/prover9.py\", line 327, in _prove\n    stdout, returncode = self._call_prover9(\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/inference/prover9.py\", line 370, in _call_prover9\n    raise Prover9FatalException(returncode, errormsg)\nnltk.inference.prover9.Prover9FatalException: (FATAL)\n%%ERROR: The following symbols are used with multiple arities: Beethoven/1, Beethoven/0.\n\n\nFatal error:  The following symbols are used with multiple arities: Beethoven/1, Beethoven/0\n"}
{"timestamp": "2025-09-16T19:00:31.452300", "premises": ["all x. (MusicPiece(x) -> SymphonyNo9(x))", "all x. (Composer(x) -> Write(x, MusicPiece))", "Beethoven(x) -> Write(x, SymphonyNo9)", "ViennaMusicSociety(x) -> Premiered(x, SymphonyNo9)", "ViennaMusicSociety(x) -> Orchestra(x)", "Beethoven(x) -> Leads(x, ViennaMusicSociety)", "Orchestra(x) -> Leads(x, Conductor)"], "conclusion": "-Beethoven(x) -> Leads(x, Conductor)", "error_type": "<class 'nltk.inference.prover9.Prover9FatalException'>", "error_message": "(FATAL)\n%%ERROR: The following symbols are used with multiple arities: ViennaMusicSociety/1, ViennaMusicSociety/0, SymphonyNo9/1, SymphonyNo9/0, MusicPiece/1, MusicPiece/0.\n\n\nFatal error:  The following symbols are used with multiple arities: ViennaMusicSociety/1, ViennaMusicSociety/0, SymphonyNo9/1, SymphonyNo9/0, MusicPiece/1, MusicPiece/0", "stack_trace": "Traceback (most recent call last):\n  File \"/data/gpfs/projects/punim0478/bansaab/linc2/eval/tasks/owafoltask.py\", line 577, in _process_neurosymbolic\n    parsed = json.loads(gen)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/json/__init__.py\", line 346, in loads\n    return _default_decoder.decode(s)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/json/decoder.py\", line 337, in decode\n    obj, end = self.raw_decode(s, idx=_w(s, 0).end())\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/json/decoder.py\", line 355, in raw_decode\n    raise JSONDecodeError(\"Expecting value\", s, err.value) from None\njson.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"/data/gpfs/projects/punim0478/bansaab/linc2/eval/tasks/utils.py\", line 219, in evaluate\n    truth_value = prover.prove(c, p_list)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/inference/api.py\", line 37, in prove\n    return self._prove(goal, assumptions, verbose)[0]\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/inference/prover9.py\", line 327, in _prove\n    stdout, returncode = self._call_prover9(\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/inference/prover9.py\", line 370, in _call_prover9\n    raise Prover9FatalException(returncode, errormsg)\nnltk.inference.prover9.Prover9FatalException: (FATAL)\n%%ERROR: The following symbols are used with multiple arities: ViennaMusicSociety/1, ViennaMusicSociety/0, SymphonyNo9/1, SymphonyNo9/0, MusicPiece/1, MusicPiece/0.\n\n\nFatal error:  The following symbols are used with multiple arities: ViennaMusicSociety/1, ViennaMusicSociety/0, SymphonyNo9/1, SymphonyNo9/0, MusicPiece/1, MusicPiece/0\n"}
{"timestamp": "2025-09-16T19:01:10.723901", "premises": ["all x. (DesignStyle(x) -> Timeless(x))", "all x. (MassProductDesign(x) -> -Timeless(x))", "(ZahaHadidDesignStyle OR KellyWearstlerDesignStyle)", "all x. (DesignStyle(x) -> Evocative(x))", "all x. (DesignStyle(x) -> Dreamy(x))", "(Timeless(MaxDesign) -> MassProductDesign(MaxDesign) & Evocative(MaxDesign))"], "conclusion": "MassProductDesign(MaxDesign)", "error_type": "<class 'nltk.sem.logic.LogicalExpressionException'>", "error_message": "Unexpected token: 'OR'.  Expected token ')'.\n(ZahaHadidDesignStyle OR KellyWearstlerDesignStyle)\n                      ^", "stack_trace": "Traceback (most recent call last):\n  File \"/data/gpfs/projects/punim0478/bansaab/linc2/eval/tasks/owafoltask.py\", line 577, in _process_neurosymbolic\n    parsed = json.loads(gen)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/json/__init__.py\", line 346, in loads\n    return _default_decoder.decode(s)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/json/decoder.py\", line 337, in decode\n    obj, end = self.raw_decode(s, idx=_w(s, 0).end())\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/json/decoder.py\", line 355, in raw_decode\n    raise JSONDecodeError(\"Expecting value\", s, err.value) from None\njson.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/sem/logic.py\", line 154, in parse\n    result = self.process_next_expression(None)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/sem/logic.py\", line 290, in process_next_expression\n    accum = self.handle(tok, context)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/sem/logic.py\", line 315, in handle\n    return self.handle_open(tok, context)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/sem/logic.py\", line 450, in handle_open\n    self.assertNextToken(Tokens.CLOSE)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/sem/logic.py\", line 573, in assertNextToken\n    raise UnexpectedTokenException(self._currentIndex, tok, expected)\nnltk.sem.logic.UnexpectedTokenException: Unexpected token: 'OR'.  Expected token ')'.\n\nThe above exception was the direct cause of the following exception:\n\nTraceback (most recent call last):\n  File \"/data/gpfs/projects/punim0478/bansaab/linc2/eval/tasks/utils.py\", line 216, in evaluate\n    p_list = [read_expr(p) for p in premises]\n  File \"/data/gpfs/projects/punim0478/bansaab/linc2/eval/tasks/utils.py\", line 216, in <listcomp>\n    p_list = [read_expr(p) for p in premises]\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/sem/logic.py\", line 957, in fromstring\n    return cls._logic_parser.parse(s, signature)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/sem/logic.py\", line 159, in parse\n    raise LogicalExpressionException(None, msg) from e\nnltk.sem.logic.LogicalExpressionException: Unexpected token: 'OR'.  Expected token ')'.\n(ZahaHadidDesignStyle OR KellyWearstlerDesignStyle)\n                      ^\n"}
{"timestamp": "2025-09-16T19:01:10.735032", "premises": ["all x. (DesignStyle(x) & Timeless(x))", "all x. (DesignStyle(x) & MassProduct(x) -> -Timeless(x))", "(ZahaHadidDesignStyle() | KellyWearstlerDesignStyle())", "all x. (DesignStyle(x) & Evocative(x))", "all x. (DesignStyle(x) & Dreamy(x))", "(Timeless(MaxDesign) -> MassProduct(MaxDesign) & Evocative(MaxDesign))"], "conclusion": "MassProduct(MaxDesign)", "error_type": "<class 'nltk.sem.logic.LogicalExpressionException'>", "error_message": "Unexpected token: ')'.  Expression expected.\n(ZahaHadidDesignStyle() | KellyWearstlerDesignStyle())\n                      ^", "stack_trace": "Traceback (most recent call last):\n  File \"/data/gpfs/projects/punim0478/bansaab/linc2/eval/tasks/owafoltask.py\", line 577, in _process_neurosymbolic\n    parsed = json.loads(gen)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/json/__init__.py\", line 346, in loads\n    return _default_decoder.decode(s)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/json/decoder.py\", line 337, in decode\n    obj, end = self.raw_decode(s, idx=_w(s, 0).end())\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/json/decoder.py\", line 355, in raw_decode\n    raise JSONDecodeError(\"Expecting value\", s, err.value) from None\njson.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/sem/logic.py\", line 154, in parse\n    result = self.process_next_expression(None)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/sem/logic.py\", line 290, in process_next_expression\n    accum = self.handle(tok, context)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/sem/logic.py\", line 315, in handle\n    return self.handle_open(tok, context)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/sem/logic.py\", line 449, in handle_open\n    accum = self.process_next_expression(None)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/sem/logic.py\", line 290, in process_next_expression\n    accum = self.handle(tok, context)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/sem/logic.py\", line 303, in handle\n    return self.handle_variable(tok, context)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/sem/logic.py\", line 352, in handle_variable\n    accum, self.process_next_expression(APP)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/sem/logic.py\", line 293, in process_next_expression\n    raise UnexpectedTokenException(\nnltk.sem.logic.UnexpectedTokenException: Unexpected token: ')'.  Expression expected.\n\nThe above exception was the direct cause of the following exception:\n\nTraceback (most recent call last):\n  File \"/data/gpfs/projects/punim0478/bansaab/linc2/eval/tasks/utils.py\", line 216, in evaluate\n    p_list = [read_expr(p) for p in premises]\n  File \"/data/gpfs/projects/punim0478/bansaab/linc2/eval/tasks/utils.py\", line 216, in <listcomp>\n    p_list = [read_expr(p) for p in premises]\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/sem/logic.py\", line 957, in fromstring\n    return cls._logic_parser.parse(s, signature)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/sem/logic.py\", line 159, in parse\n    raise LogicalExpressionException(None, msg) from e\nnltk.sem.logic.LogicalExpressionException: Unexpected token: ')'.  Expression expected.\n(ZahaHadidDesignStyle() | KellyWearstlerDesignStyle())\n                      ^\n"}
{"timestamp": "2025-09-16T19:05:13.378478", "premises": ["all x. (ZahaHadidDesignStyle(x) -> Timeless(x))", "all x. (MassProductDesign(x) -> NotTimeless(x))", "or(ZahaHadidDesignStyle(x), KellyWearstlerDesignStyle(x))", "all x. (KellyWearstlerDesignStyle(x) -> Evocative(x))", "all x. (KellyWearstlerDesignStyle(x) -> Dreamy(x))", "if(Timeless(x), MassProductDesign(x), Evocative(x) & Dreamy(x))"], "conclusion": "MaxDesign(x) -> (Timeless(x) | MassProductDesign(x) | Evocative(x) | Dreamy(x))", "error_type": "<class 'nltk.sem.logic.LogicalExpressionException'>", "error_message": "Unexpected token: 'or'.  Expression expected.\nor(ZahaHadidDesignStyle(x), KellyWearstlerDesignStyle(x))\n^", "stack_trace": "Traceback (most recent call last):\n  File \"/data/gpfs/projects/punim0478/bansaab/linc2/eval/tasks/owafoltask.py\", line 577, in _process_neurosymbolic\n    parsed = json.loads(gen)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/json/__init__.py\", line 346, in loads\n    return _default_decoder.decode(s)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/json/decoder.py\", line 337, in decode\n    obj, end = self.raw_decode(s, idx=_w(s, 0).end())\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/json/decoder.py\", line 355, in raw_decode\n    raise JSONDecodeError(\"Expecting value\", s, err.value) from None\njson.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/sem/logic.py\", line 154, in parse\n    result = self.process_next_expression(None)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/sem/logic.py\", line 293, in process_next_expression\n    raise UnexpectedTokenException(\nnltk.sem.logic.UnexpectedTokenException: Unexpected token: 'or'.  Expression expected.\n\nThe above exception was the direct cause of the following exception:\n\nTraceback (most recent call last):\n  File \"/data/gpfs/projects/punim0478/bansaab/linc2/eval/tasks/utils.py\", line 216, in evaluate\n    p_list = [read_expr(p) for p in premises]\n  File \"/data/gpfs/projects/punim0478/bansaab/linc2/eval/tasks/utils.py\", line 216, in <listcomp>\n    p_list = [read_expr(p) for p in premises]\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/sem/logic.py\", line 957, in fromstring\n    return cls._logic_parser.parse(s, signature)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/sem/logic.py\", line 159, in parse\n    raise LogicalExpressionException(None, msg) from e\nnltk.sem.logic.LogicalExpressionException: Unexpected token: 'or'.  Expression expected.\nor(ZahaHadidDesignStyle(x), KellyWearstlerDesignStyle(x))\n^\n"}
{"timestamp": "2025-09-16T19:05:13.379183", "premises": ["all x. (DesignStyle(x) -> Timeless(x))", "all x. (Timeless(x) -> MassProductDesign(x))", "all x. (Timeless(x) -> Evocative(x))", "all x. (DesignStyle(x) -> Timeless(x) | DesignStyle(x) -> Evocative(x) | DesignStyle(x) -> Dreamy(x))", "all x. (Evocative(x) -> Dreamy(x))", "all x. (Dreamy(x) -> MassProductDesign(x))", "all x. (MassProductDesign(x) -> Timeless(x))", "all x. (Evocative(x) & Dreamy(x) -> Timeless(x))", "all x. (Evocative(x) & Dreamy(x) -> MassProductDesign(x))", "all x. (Evocative(x) & Dreamy(x) -> Timeless(x))", "all x. (Evocative(x) & Dreamy(x) -> MassProductDesign(x))", "all x. (Evocative(x) & Dreamy(x) -> Timeless(x))", "all x. (Evocative(x) & Dreamy(x) -> MassProductDesign(x))", "all x. (Evocative(x) & Dreamy(x) -> Timeless(x))", "all x. (Evocative(x) & Dreamy(x) -> MassProductDesign(x))", "all x. (Evocative(x) & Dreamy(x) -> Timeless(x))", "all x. (Evocative(x) & Dreamy(x) -> MassProductDesign(x))", "all x. (Evocative(x) & Dreamy(x) -> Timeless(x))", "all x. (Evocative(x) & Dreamy(x) -> MassProductDesign(x))", "all x. (Evocative(x) & Dreamy(x) -> Timeless(x))", "all x. (Evocative(x) & Dreamy(x) -> MassProductDesign(x))", "all x. (Evocative(x) & Dreamy(x) -> Timeless(x))", "all x. (Evocative(x) & Dreamy(x) -> MassProductDesign(x))", "all x. (Evocative(x) & Dreamy(x) -> Timeless(x))", "all x. (Evocative(x) & Dreamy(x) -> MassProductDesign(x))", "all x. (Evocative(x) & Dreamy(x) -> Timeless(x))", "all x. (Evocative(x) & Dreamy(x) -> MassProductDesign(x))", "all x. (Evocative(x) & Dreamy(x) -> Timeless(x))", "all x. (Evocative(x) & Dreamy(x) -> MassProductDesign(x))", "all x. (Evocative(x) & Dreamy(x) -> Timeless(x))", "all x. (Evocative(x) & Dreamy(x) -> MassProductDesign(x))", "all x. (Evocative(x) & Dreamy(x) -> Timeless(x))", "all x. (Evocative(x) & Dreamy(x) -> MassProductDesign(x))", "all x. (Evocative(x) & Dreamy(x) -> Timeless(x))", "all x. (Evocative(x) & Dreamy(x) -> MassProductDesign(x))", "all x. (Evocative(x) & Dreamy(x) -> Timeless(x))", "all x. (Evocative(x) & Dreamy(x) -> MassProductDesign(x))", "all x. (Evocative(x) & Dreamy(x) -> Timeless(x))", "all x. (Evocative(x) & Dreamy(x) -> MassProductDesign(x))", "all x. (Evocative(x) & Dreamy(x) -> Timeless(x))", "all x. (Evocative(x) & Dreamy(x) -> MassProductDesign(x))", "all x. (Evocative(x) & Dreamy(x) -> Timeless(x))", "all x. (Evocative(x) & Dreamy(x) -> MassProductDesign(x))", "all x. (Evocative(x) & Dreamy(x) -> Timeless(x))", "all x. (Evocative(x) & Dreamy(x) -> MassProductDesign(x))", "all x. (Evocative(x) & Dreamy(x) -> Timeless(x))", "all x. (Evocative(x) & Dreamy(x) -> MassProductDesign(x))", "all x. (Evocative(x) & Dreamy(x) -> Timeless(x))", "all x. (Evocative(x) & Dreamy(x) -> MassProductDesign(x))", "all x. (Evocative(x) & Dreamy(x) -> Timeless(x))", "all x. (Evocative(x) & Dreamy(x) -> MassProductDesign(x))", "all x. (Evocative(x) & Dreamy(x) -> Timeless(x))", "all x. (Evocative(x) & Dreamy(x) -> MassProductDesign(x))", "all x. (Evocative(x) & Dreamy(x) -> Timeless(x))", "all x. (Evocative(x) & Dreamy(x) -> MassProductDesign(x))", "all x. (Evocative(x) & Dreamy(x) -> Timeless(x))", "all x. (Evocative(x) & Dreamy(x) -> MassProductDesign(x))", "all x. (Evocative(x) & Dreamy(x) -> Timeless(x))", "all x. (Evocative(x) & Dreamy(x) -> MassProductDesign(x))", "all x. (Evocative(x) & Dreamy(x) -> Timeless(x))", "all x. (Evocative(x) & Dreamy(x) -> MassProductDesign(x))", "all x. (Evocative(x) & Dreamy(x) -> Timeless(x))", "all x. (Evocative(x) & Dreamy(x) -> MassProductDesign(x))", "all x. (Evocative(x) & Dreamy(x) -> Timeless(x))", "all x. (Evocative(x) & Dreamy(x) -> MassProductDesign(x))", "all x. (Evocative(x) & Dreamy(x) -> Timeless(x))", "all x. (Evocative(x) & Dreamy(x) -> MassProductDesign(x))", "all x. (Evocative(x) & Dreamy(x) -> Timeless(x))", "all x. (Evocative(x) & Dreamy(x) -> MassProductDesign(x))", "all x. (Evocative(x) & Dreamy(x) -> Timeless(x))", "all x. (Evocative(x) & Dreamy(x) -> MassProductDesign(x))", "all x. (Evocative(x) & Dreamy(x) -> Timeless(x))", "all x. (Evocative(x) & Dreamy(x) -> MassProductDesign(x))", "all x. (Evocative(x) & Dreamy(x) -> Timeless(x))", "all x. (Evocative(x) & Dreamy(x) -> MassProductDesign(x))", "all x. (Evocative(x) & Dreamy(x) -> Timeless(x))", "all x. (Evocative(x) & Dreamy(x) -> MassProductDesign(x))", "all x. (Evocative(x) & Dreamy(x) -> Timeless(x))", "all x. (Evocative(x) & Dreamy(x) -> MassProductDesign(x))", "all x. (Evocative(x) & Dreamy(x) -> Timeless(x))", "all x. (Evocative(x) & Dreamy(x) -> MassProductDesign(x))", "all x. (Evocative(x) & Dreamy(x) -> Timeless(x))", "all x. (Evocative(x) & Dreamy(x) -> MassProductDesign(x))", "all x. (Evocative(x) & Dreamy(x) -> Timeless(x))", "all x. (Evocative(x) & Dreamy(x) -> MassProductDesign(x))", "all x. (Evocative(x) & Dreamy(x) -> Timeless(x))", "all x. (Evocative(x) & Dreamy(x) -> MassProductDesign(x))", "all x. (Evocative(x) & Dreamy(x) -> Timeless(x))", "all x. (Evocative(x) & Dreamy(x) -> MassProductDesign(x))", "all x. (Evocative(x) & Dreamy(x) -> Timeless(x))", "all x. (Evocative(x) & Dreamy(x) -> MassProductDesign(x))", "all x. (Evocative(x) & Dreamy(x) -> Timeless(x))", "all x. (Evocative(x) & Dreamy(x) -> MassProductDesign(x))", "all x. (Evocative(x) & Dreamy(x) -> Timeless(x))", "all x. (Evocative(x) & Dreamy(x) -> MassProductDesign(x))", "all x. (Evocative(x) & Dreamy(x) -> Timeless(x))", "all x. (Evocative(x) & Dreamy(x) -> MassProductDesign(x))", "all x. (Evocative(x) & Dreamy(x) -> Timeless(x))", "all x. (Evocative(x) & Dreamy(x) -> MassProductDesign(x))", "all x. (Evocative(x) & Dreamy(x) -> Timeless(x))", "all x. (Evocative(x) & Dreamy(x) -> MassProductDesign(x))", "all x. (Evocative(x) & Dreamy(x) -> Timeless(x))", "all x. (Evocative(x) & Dreamy(x) -> MassProductDesign(x))", "all x. (Evocative(x) & Dreamy(x) -> Timeless(x))", "all x. (Evocative(x) -> Dreamy(x) & Timeless(x))", "all x. (Evocative(x) -> Dreamy(x) & MassProductDesign(x))", "all x. (Evocative(x) -> Dreamy(x) & Timeless(x))", "all x. (Evocative(x) -> Dreamy(x) & MassProductDesign(x))", "all x. (Evocative(x) -> Dreamy(x) & Timeless(x))", "all x. (Evocative(x) -> Dreamy(x) & MassProductDesign(x))", "all x. (Evocative(x) -> Dreamy(x) & Timeless(x))", "all x. (Evocative(x) -> Dreamy(x) & MassProductDesign(x))", "all x. (Evocative(x) -> Dreamy(x) & Timeless(x))", "all x. (Evocative(x) -> Dreamy(x) & MassProductDesign(x))", "all x. (Evocative(x) -> Dreamy(x) & Timeless(x))", "all x. (Evocative(x) -> Dreamy(x) & MassProductDesign(x))", "all x. (Evocative(x) -> Dreamy(x) & Timeless(x))", "all x. (Evocative(x) -> Dreamy(x) & MassProductDesign(x))", "all x. (Evocative(x) -> Dreamy(x) & Timeless(x))", "all x. (Evocative(x) -> Dreamy(x) & MassProductDesign(x))", "all x. (Evocative(x) -> Dreamy(x) & Timeless(x))", "all x. (Evocative(x) -> Dreamy(x) & MassProductDesign(x))", "all x. (Evocative(x) -> Dreamy(x) & Timeless(x))", "all x. (Evocative(x) -> Dreamy(x) & MassProductDesign(x))", "all x. (Evocative(x) -> Dreamy(x) & Timeless(x))", "all x. (Evocative(x) -> Dreamy(x) & MassProductDesign(x))", "all x. (Evocative(x) -> Dreamy(x) & Timeless(x))", "all x. (Evocative(x) -> Dreamy(x) & MassProductDesign(x))", "all x. (Evocative(x) -> Dreamy(x) & Timeless(x))", "all x. (Evocative(x) -> Dreamy(x) & MassProductDesign(x))", "all x. (Evocative(x) -> Dreamy(x) & Timeless(x))", "all x. (Evocative(x) -> Dreamy(x) & MassProductDesign(x))", "all x. (Evocative(x) -> Dreamy(x) & Timeless(x))", "all x. (Evocative(x) -> Dreamy(x) & MassProductDesign(x))", "all x. (Evocative(x) -> Dreamy(x) & Timeless(x))", "all x. (Evocative(x) -> Dreamy(x) & MassProductDesign(x))", "all x. (Evocative(x) -> Dreamy(x) & Timeless(x))", "all x. (Evocative(x) -> Dreamy(x) -> MassProductDesign(x))", "all x. (Evocative(x) -> Dreamy(x) -> Timeless(x))", "all x. (Evocative(x) -> Dreamy(x) -> MassProductDesign(x))", "all x. (Evocative(x) -> Dreamy(x) -> Timeless(x))", "all x. (Evocative(x) -> Dreamy(x) -> MassProductDesign(x))", "all x. (Evocative(x) -> Dreamy(x) -> Timeless(x))", "all x. (Evocative(x) -> Dreamy(x) -> MassProductDesign(x))", "all x. (Evocative(x) -> Dreamy(x) -> Timeless(x))", "all x. (Evocative(x) -> Dreamy(x) -> MassProductDesign(x))", "all x. (Evocative(x) -> Dreamy(x) -> Timeless(x))", "all x. (Evocative(x) -> Dreamy(x) -> MassProductDesign(x))", "all x. (Evocative(x) -> Dreamy(x) -> Timeless(x))", "all x. (Evocative(x) -> Dreamy(x) -> MassProductDesign(x))", "all x. (Evocative(x) -> Dreamy(x) -> Timeless(x))", "all x. (Evocative(x) -> Dreamy(x) -> MassProductDesign(x))", "all x. (Evocative(x) -> Dreamy(x) -> Timeless(x))", "all x. (Evocative(x) -> Dreamy(x) -> MassProductDesign(x))", "all x. (Evocative(x) -> Dreamy(x) -> Timeless(x))", "all x. (Evocative(x) -> Dreamy(x) -> MassProductDesign(x))", "all x. (Evocative(x) -> Dreamy(x) -> Timeless(x))", "all x. (Evocative(x) -> Dreamy(x) -> MassProductDesign(x))", "all x. (Evocative(x) -> Dreamy(x) -> Timeless(x))", "all x. (Evocative(x) -> Dreamy(x) -> MassProductDesign(x))", "all x. (Evocative(x) -> Dreamy(x) -> Timeless(x))", "all x. (Evocative(x) -> Dreamy(x) -> MassProductDesign(x))", "all x. (Evocative(x) -> Dreamy(x) -> Timeless(x))", "all x. (Evocative(x) -> Dreamy(x) -> MassProductDesign(x))", "all x. (Evocative(x) -> Dreamy(x) -> Timeless(x))", "all x. (Evocative(x) -> Dreamy(x) -> MassProductDesign(x))", "all x. (Evocative(x) -> Dreamy(x) -> Timeless(x))", "all x. (Evocative(x) -> Dreamy(x) -> MassProductDesign(x))", "all x. (Evocative(x) -> Dreamy(x) -> Timeless(x))", "all x. (Evocative(x) -> Dreamy(x) -> MassProductDesign(x))", "all x. (Evocative(x) -> Dreamy(x) -> Timeless(x))", "all x. (Evocative(x) -> Dreamy(x) -> MassProductDesign(x))", "all x. (Evocative(x) -> Dreamy(x) -> Timeless(x))", "all x. (Evocative(x) -> Dreamy(x) -> MassProductDesign(x))", "all x. (Evocative(x) -> Dreamy(x) -> Timeless(x))", "all x. (Evocative(x) -> Dreamy(x) -> MassProductDesign(x))", "all x. (Evocative(x) -> Dreamy(x) -> Timeless(x))", "all x. (Evocative(x) -> Dreamy(x) -> MassProductDesign(x))", "all x. (Evocative(x) -> Dreamy(x) -> Timeless(x))", "all x. (Evocative(x) -> Dreamy(x) -> MassProductDesign(x))", "all x. (Evocative(x) -> Dreamy(x) -> Timeless(x))", "all x. (Evocative(x) -> Dreamy(x) -> MassProductDesign(x))", "all x. (Evocative(x) -> Dreamy(x) -> Timeless(x))", "all x. (Evocative(x) -> Dreamy(x) -> MassProductDesign(x))", "all x. (Evocative(x) -> Dreamy(x) -> Timeless(x))", "all x. (Evocative(x) -> Dreamy(x) -> MassProductDesign(x))", "all x. (Evocative(x) -> Dreamy(x) -> Timeless(x))", "all x. (Evocative(x) -> Dreamy(x) -> MassProductDesign(x))", "all x. (Evocative(x) -> Dreamy(x) -> Timeless(x))", "all x. (Evocative(x) -> Dreamy(x) -> MassProductDesign(x))", "all x. (Evocative(x) -> Dreamy(x) -> Timeless(x))", "all x. (Evocative(x) -> Dreamy(x) -> MassProductDesign(x))", "all x. (Evocative(x) -> Dreamy(x) -> Timeless(x))", "all x. (Evocative(x) -> Dreamy(x) -> MassProductDesign(x))", "all x. (Evocative(x) -> Dreamy(x) -> Timeless(x))", "all x. (Evocative(x) -> Dreamy(x) -> MassProductDesign(x))", "all x. (Evocative(x) -> Dreamy(x) -> Timeless(x))", "all x. (Evocative(x) -> Dreamy(x) -> MassProductDesign(x))", "all x. (Evocative(x) -> Dreamy(x) -> Timeless(x))", "all x. (Evocative(x) -> Dreamy(x) -> MassProductDesign(x))", "all x. (Evocative(x) -> Dreamy(x) -> Timeless(x))", "all x. (Evocative(x) -> Dreamy(x) -> MassProductDesign(x))", "all x. (Evocative(x) -> Dreamy(x) -> Timeless(x))", "all x. (Evocative(x) -> Dreamy(x) -> MassProductDesign(x))", "all x. (Evocative(x) -> Dreamy(x) -> Timeless(x))", "all x. (Evocative(x) -> Dreamy(x) -> MassProductDesign(x))", "all x. (Evocative(x) -> Dreamy(x) -> Timeless(x))", "all x. (Evocative(x) -> Dreamy(x) -> MassProductDesign(x))", "all x. (Evocative(x) -> Dreamy(x) -> Timeless(x))", "all x. (Evocative(x) -> Dreamy(x) -> MassProductDesign(x))", "all x. (Evocative(x) -> Dreamy(x) -> Timeless(x))", "all x. (Evocative(x) -> Dreamy(x) -> MassProductDesign(x))", "all x. (Evocative(x) -> Dreamy(x) -> Timeless(x))", "all x. (Evocative(x) -> Dreamy(x) -> MassProductDesign(x))", "all x. (Evocative(x) -> Dreamy(x) -> Timeless(x))", "all x. (Evocative(x) -> Dreamy(x) -> MassProductDesign(x))", "all x. (Evocative(x) -> Dreamy(x) -> Timeless(x))", "all x. (Evocative(x) -> Dreamy(x) -> MassProductDesign(x))", "all x. (Evocative(x) -> Dreamy(x) -> Timeless(x))", "all x. (Evocative(x) -> Dreamy(x) -> MassProductDesign(x))", "all x. (Evocative(x) -> Dreamy(x) -> Timeless(x))", "all x. (Evocative(x) -> Dreamy(x) -> MassProductDesign(x))", "all x. (Evocative(x) -> Dreamy(x) -> Timeless(x))", "all x. (Evocative(x) -> Dreamy(x) -> MassProductDesign(x))", "all x. (Evocative(x) -> Dreamy(x) -> Timeless(x))", "all x. (Evocative(x) -> Dreamy(x) -> MassProductDesign(x))", "all x. (Evocative(x) -> Dreamy(x) -> Timeless(x))", "all x. (Evocative(x) -> Dreamy(x) -> MassProductDesign(x))", "all x. (Evocative(x) -> Dreamy(x) -> Timeless(x))", "all x. (Evocative(x) -> Dreamy(x) -> MassProductDesign(x))", "all x. (Evocative(x) -> Dreamy(x) -> Timeless(x))", "all x. (Evocative(x) -> Dreamy(x) -> MassProductDesign(x))", "all x. (Evocative(x) -> Dreamy(x) -> Timeless(x))", "all x. (Evocative(x) -> Dreamy(x) -> MassProductDesign(x))", "all x. (Evocative(x) -> Dreamy(x) -> Timeless(x))", "all x. (Evocative(x) -> Dreamy(x) -> MassProductDesign(x))", "all x. (Evocative(x) -> Dreamy(x) -> Timeless(x))", "all x. (Evocative(x) -> Dreamy(x) -> MassProductDesign(x))", "all x. (Evocative(x) -> Dreamy(x) -> Timeless(x))", "all x. (Evocative(x) -> Dreamy(x) -> MassProductDesign(x))", "all x. (Evocative(x) -> Dreamy(x) -> Timeless(x))", "all x. (Evocative(x) -> Dreamy(x) -> MassProductDesign(x))", "all x. (Evocative(x) -> Dreamy(x) -> Timeless(x))", "all x. (Evocative(x) -> Dreamy(x) -> MassProductDesign(x))", "all x. (Evocative(x) -> Dreamy(x) -> Timeless(x))", "all x. (Evocative(x) -> Dreamy(x) -> MassProductDesign(x))", "all x. (Evocative(x) -> Dreamy(x) -> Timeless(x))", "all x. (Evocative(x) -> Dreamy(x) -> MassProductDesign(x))", "all x. (Evocative(x) -> Dreamy(x) -> Timeless(x))", "all x. (Evocative(x) -> Dreamy(x) -> MassProductDesign(x))", "all x. (Evocative(x) -> Dreamy(x) -> Timeless(x))", "all x. (Evocative(x) -> Dreamy(x) -> MassProductDesign(x))", "all x. (Evocative(x) -> Dreamy(x) -> Timeless(x))", "all x. (Evocative(x) -> Dreamy(x) -> MassProductDesign(x))", "all x. (Evocative(x) -> Dreamy(x) -> Timeless(x))", "all x. (Evocative(x) -> Dreamy(x) -> MassProductDesign(x))", "all x. (Evocative(x) -> Dreamy(x) -> Timeless(x))", "all x. (Evocative(x) -> Dreamy(x) -> MassProductDesign(x))", "all x. (Evocative(x) -> Dreamy(x) -> Timeless(x))", "all x. (Evocative(x) -> Dreamy(x) -> MassProductDesign(x))", "all x. (Evocative(x) -> Dreamy(x) -> Timeless(x))", "all x. (Evocative(x) -> Dreamy(x) -> MassProductDesign(x))", "all x. (Evocative(x) -> Dreamy(x) -> Timeless(x))", "all x. (Evocative(x) -> Dreamy(x) -> MassProductDesign(x))", "all x. (Evocative(x) -> Dreamy(x) -> Timeless(x))", "all x. (Evocative(x) -> Dreamy(x) -> MassProductDesign(x))", "all x. (Evocative(x) -> Dreamy(x) -> Timeless(x))", "all x. (Evocative(x) -> Dreamy(x) -> MassProductDesign(x))", "all x. (Evocative(x) -> Dreamy(x) -> Timeless(x))", "all x. (Evocative(x) -> Dreamy(x) -> MassProductDesign(x))", "all x. (Evocative(x) -> Dreamy(x) -> Timeless(x))", "all x. (Evocative(x) -> Dreamy(x) -> MassProductDesign(x))", "all x. (Evocative(x) -> Dreamy(x) -> Timeless(x))", "all x. (Evocative(x) -> Dreamy(x) -> MassProductDesign(x))", "all x. (Evocative(x) -> Dreamy(x) -> Timeless(x))", "all x. (Evocative(x) -> Dreamy(x) -> MassProductDesign(x))", "all x. (Evocative(x) -> Dreamy(x) -> Timeless(x))", "all x. (Evocative(x) -> Dreamy(x) -> MassProductDesign(x))", "all x. (Evocative(x) -> Dreamy(x) -> Timeless(x))", "all x. (Evocative(x) -> Dreamy(x) -> MassProductDesign(x))", "all x. (Evocative(x) -> Dreamy(x) -> Timeless(x))", "all x. (Evocative(x) -> Dreamy(x) -> MassProductDesign(x))", "all x. (Evocative(x) -> Dreamy(x) -> Timeless(x))", "all x. (Evocative(x) -> Dreamy(x) -> MassProductDesign(x))", "all x. (Evocative(x) -> Dreamy(x) -> Timeless(x))", "all x. (Evocative(x) -> Dreamy(x) -> MassProductDesign(x))", "all x. (Evocative(x) -> Dreamy(x) -> Timeless(x))", "all x. (Evocative(x) -> Dreamy(x) -> MassProductDesign(x))", "all x. (Evocative(x) -> Dreamy(x) -> Timeless(x))", "all x. (Evocative(x) -> Dreamy(x) -> MassProductDesign(x))", "all x. (Evocative(x) -> Dreamy(x) -> Timeless(x))", "all x. (Evocative(x) -> Dreamy(x) -> MassProductDesign(x))", "all x. (Evocative(x) -> Dreamy(x) -> Timeless(x))", "all x. (Evocative(x) -> Dreamy(x) -> MassProductDesign(x))", "all x. (Evocative(x) -> Dreamy(x) -> Timeless(x))", "all x. (Evocative(x) -> Dreamy(x) -> MassProductDesign(x))", "all x. (Evocative(x) -> Dreamy(x) -> Timeless(x))", "all x. (Evocative(x) -> Dreamy(x) -> MassProductDesign(x))", "all x. (Evocative(x) -> Dreamy(x) -> Timeless(x))", "all x. (Evocative(x) -> Dreamy(x) -> MassProductDesign(x))", "all x. (Evocative(x) -> Dreamy(x) -> Timeless(x))", "all x. (Evocative(x) -> Dreamy(x) -> MassProductDesign(x))", "all x. (Evocative(x) -> Dreamy(x) -> Timeless(x))", "all x. (Evocative(x) -> Dreamy(x) -> MassProductDesign(x))", "all x. (Evocative(x) -> Dreamy(x) -> Timeless(x))", "all x. (Evocative(x) -> Dreamy(x) -> MassProductDesign(x))", "all x. (Evocative(x) -> Dreamy(x) -> Timeless(x))", "all x. (Evocative(x) -> Dreamy(x) -> MassProductDesign(x))", "all x. (Evocative(x) -> Dreamy(x) -> Timeless(x))"], "conclusion": "all x. (Evocative(x) -> Dreamy(x) -> MassProductDesign(x))", "error_type": "<class 'nltk.sem.logic.LogicalExpressionException'>", "error_message": "End of input found.  Expression expected.\nall x. (Evocative(x) -> Dreamy(x) -> Timeless(x))\n                              ^", "stack_trace": "Traceback (most recent call last):\n  File \"/data/gpfs/projects/punim0478/bansaab/linc2/eval/tasks/owafoltask.py\", line 577, in _process_neurosymbolic\n    parsed = json.loads(gen)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/json/__init__.py\", line 346, in loads\n    return _default_decoder.decode(s)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/json/decoder.py\", line 337, in decode\n    obj, end = self.raw_decode(s, idx=_w(s, 0).end())\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/json/decoder.py\", line 355, in raw_decode\n    raise JSONDecodeError(\"Expecting value\", s, err.value) from None\njson.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/sem/logic.py\", line 154, in parse\n    result = self.process_next_expression(None)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/sem/logic.py\", line 290, in process_next_expression\n    accum = self.handle(tok, context)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/sem/logic.py\", line 312, in handle\n    return self.handle_quant(tok, context)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/sem/logic.py\", line 417, in handle_quant\n    raise ExpectedMoreTokensException(\nnltk.sem.logic.ExpectedMoreTokensException: End of input found.  Expression expected.\n\nThe above exception was the direct cause of the following exception:\n\nTraceback (most recent call last):\n  File \"/data/gpfs/projects/punim0478/bansaab/linc2/eval/tasks/utils.py\", line 216, in evaluate\n    p_list = [read_expr(p) for p in premises]\n  File \"/data/gpfs/projects/punim0478/bansaab/linc2/eval/tasks/utils.py\", line 216, in <listcomp>\n    p_list = [read_expr(p) for p in premises]\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/sem/logic.py\", line 957, in fromstring\n    return cls._logic_parser.parse(s, signature)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/sem/logic.py\", line 159, in parse\n    raise LogicalExpressionException(None, msg) from e\nnltk.sem.logic.LogicalExpressionException: End of input found.  Expression expected.\nall x. (Evocative(x) -> Dreamy(x) -> Timeless(x))\n                              ^\n"}
{"timestamp": "2025-09-16T19:05:13.392444", "premises": ["all x. (DesignStyle(x) & Timeless(x))", "all x. (DesignStyle(x) & NotTimeless(x))", "all x. (DesignStyle(x) & (ZahaHadid(x) | KellyWearstler(x)))", "all x. (DesignStyle(x) & Evocative(x))", "all x. (DesignStyle(x) & Dreamy(x))", "all x. (Timeless(x) & Max(x) -> MassProductDesign(x) & Evocative(x))"], "conclusion": "(Evocative(Max(x)) & Dreamy(Max(x)))", "error_type": "<class 'nltk.inference.prover9.Prover9FatalException'>", "error_message": "(FATAL)\n%%ERROR: The following symbols/arities are used as both relation and function symbols: Max/1.\n\n\nFatal error:  The following symbols/arities are used as both relation and function symbols: Max/1", "stack_trace": "Traceback (most recent call last):\n  File \"/data/gpfs/projects/punim0478/bansaab/linc2/eval/tasks/owafoltask.py\", line 577, in _process_neurosymbolic\n    parsed = json.loads(gen)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/json/__init__.py\", line 346, in loads\n    return _default_decoder.decode(s)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/json/decoder.py\", line 337, in decode\n    obj, end = self.raw_decode(s, idx=_w(s, 0).end())\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/json/decoder.py\", line 355, in raw_decode\n    raise JSONDecodeError(\"Expecting value\", s, err.value) from None\njson.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"/data/gpfs/projects/punim0478/bansaab/linc2/eval/tasks/utils.py\", line 219, in evaluate\n    truth_value = prover.prove(c, p_list)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/inference/api.py\", line 37, in prove\n    return self._prove(goal, assumptions, verbose)[0]\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/inference/prover9.py\", line 327, in _prove\n    stdout, returncode = self._call_prover9(\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/inference/prover9.py\", line 370, in _call_prover9\n    raise Prover9FatalException(returncode, errormsg)\nnltk.inference.prover9.Prover9FatalException: (FATAL)\n%%ERROR: The following symbols/arities are used as both relation and function symbols: Max/1.\n\n\nFatal error:  The following symbols/arities are used as both relation and function symbols: Max/1\n"}
{"timestamp": "2025-09-16T19:05:13.378965", "premises": ["all x. (DesignStyle(x) -> Timeless(x)) & all x. (DesignStyle(x) -> MassProduct) -> -Timeless(x)", "all x. (DesignStyle(x) -> Timeless(x)) & all x. (DesignStyle(x) -> Evocative) -> -Timeless(x)", "all x. (DesignStyle(x) -> Timeless(x)) & all x. (DesignStyle(x) -> Dreamy) -> -Timeless(x)", "all x. (DesignStyle(x) -> Timeless(x)) & all x. (DesignStyle(x) -> MassProduct) -> -Timeless(x)", "all x. (DesignStyle(x) -> Timeless(x)) & all x. (DesignStyle(x) -> Evocative) -> -Timeless(x)", "all x. (DesignStyle(x) -> Timeless(x)) & all x. (DesignStyle(x) -> Dreamy) -> -Timeless(x)", "exists x. (DesignStyle(x) & Timeless(x))", "exists x. (DesignStyle(x) & MassProduct)", "exists x. (DesignStyle(x) & Evocative)", "exists x. (DesignStyle(x) & Dreamy)", "exists x. (DesignStyle(x) & Timeless(x))", "exists x. (DesignStyle(x) & MassProduct)", "exists x. (DesignStyle(x) & Evocative)", "exists x. (DesignStyle(x) & Dreamy)", "exists x. (DesignStyle(x) & Timeless(x))", "exists x. (DesignStyle(x) & MassProduct)", "exists x. (DesignStyle(x) & Evocative)", "exists x. (DesignStyle(x) & Dreamy)", "exists x. (DesignStyle(x) & Timeless(x))", "exists x. (DesignStyle(x) & MassProduct)", "exists x. (DesignStyle(x) & Evocative)", "exists x. (DesignStyle(x) & Dreamy)", "exists x. (DesignStyle(x) & Timeless(x))", "exists x. (DesignStyle(x) & MassProduct)", "exists x. (DesignStyle(x) & Evocative)", "exists x. (DesignStyle(x) & Dreamy)", "exists x. (DesignStyle(x) & Timeless(x))", "exists x. (DesignStyle(x) & MassProduct)", "exists x. (DesignStyle(x) & Evocative)", "exists x. (DesignStyle(x) & Dreamy)", "exists x. (DesignStyle(x) & Timeless(x))", "exists x. (DesignStyle(x) & MassProduct)", "exists x. (DesignStyle(x) & Evocative)", "exists x. (DesignStyle(x) & Dreamy)", "exists x. (DesignStyle(x) & Timeless(x))", "exists x. (DesignStyle(x) & MassProduct)", "exists x. (DesignStyle(x) & Evocative)", "exists x. (DesignStyle(x) & Dreamy)", "exists x. (DesignStyle(x) & Timeless(x))", "exists x. (DesignStyle(x) & MassProduct)", "exists x. (DesignStyle(x) & Evocative)", "exists x. (DesignStyle(x) & Dreamy)", "exists x. (DesignStyle(x) & Timeless(x))", "exists x. (DesignStyle(x) & MassProduct)", "exists x. (DesignStyle(x) & Evocative)", "exists x. (DesignStyle(x) & Dreamy)", "exists x. (DesignStyle(x) & Timeless(x))", "exists x. (DesignStyle(x) & MassProduct)", "exists x. (DesignStyle(x) & Evocative)", "exists x. (DesignStyle(x) & Dreamy)", "exists x. (DesignStyle(x) & Timeless(x))", "exists x. (DesignStyle(x) & MassProduct)", "exists x. (DesignStyle(x) & Evocative)", "exists x. (DesignStyle(x) & Dreamy)", "exists x. (DesignStyle(x) & Timeless(x))", "exists x. (DesignStyle(x) & MassProduct)", "exists x. (DesignStyle(x) & Evocative)", "exists x. (DesignStyle(x) & Dreamy)", "exists x. (DesignStyle(x) & Timeless(x))", "exists x. (DesignStyle(x) & MassProduct)", "exists x. (DesignStyle(x) & Evocative)", "exists x. (DesignStyle(x) & Dreamy)", "exists x. (DesignStyle(x) & Timeless(x))", "exists x. (DesignStyle(x) & MassProduct)", "exists x. (DesignStyle(x) & Evocative)", "exists x. (DesignStyle(x) & Dreamy)", "exists x. (DesignStyle(x) & Timeless(x))", "exists x. (DesignStyle(x) & MassProduct)", "exists x. (DesignStyle(x) & Evocative)", "exists x. (DesignStyle(x) & Dreamy)", "exists x. (DesignStyle(x) & Timeless(x))", "exists x. (DesignStyle(x) & MassProduct)", "exists x. (DesignStyle(x) & Evocative)", "exists x. (DesignStyle(x) & Dreamy)", "exists x. (DesignStyle(x) & Timeless(x))", "exists x. (DesignStyle(x) & MassProduct)", "exists x. (DesignStyle(x) & Evocative)", "exists x. (DesignStyle(x) & Dreamy)", "exists x. (DesignStyle(x) & Timeless(x))", "exists x. (DesignStyle(x) & MassProduct)", "exists x. (DesignStyle(x) & Evocative)", "exists x. (DesignStyle(x) & Dreamy)", "exists x. (DesignStyle(x) & Timeless(x))", "exists x. (DesignStyle(x) & MassProduct)", "exists x. (DesignStyle(x) & Evocative)", "exists x. (DesignStyle(x) & Dreamy)", "exists x. (DesignStyle(x) & Timeless(x))", "exists x. (DesignStyle(x) & MassProduct)", "exists x. (DesignStyle(x) & Evocative)", "exists x. (DesignStyle(x) & Dreamy)", "exists x. (DesignStyle(x) & Timeless(x))", "exists x. (DesignStyle(x) & MassProduct)", "exists x. (DesignStyle(x) & Evocative)", "exists x. (DesignStyle(x) & Dreamy)", "exists x. (DesignStyle(x) & Timeless(x))", "exists x. (DesignStyle(x) & MassProduct)", "exists x. (DesignStyle(x) & Evocative)", "exists x. (DesignStyle(x) & Dreamy)", "exists x. (DesignStyle(x) & Timeless(x))", "exists x. (DesignStyle(x) & MassProduct)", "exists x. (DesignStyle(x) & Evocative)", "exists x. (DesignStyle(x) & Dreamy)", "exists x. (DesignStyle(x) & Timeless(x))", "exists x. (DesignStyle(x) & MassProduct)", "exists x. (DesignStyle(x) & Evocative)", "exists x. (DesignStyle(x) & Dreamy)", "exists x. (DesignStyle(x) & Timeless(x))", "exists x. (DesignStyle(x) & MassProduct)", "exists x. (DesignStyle(x) & Evocative)", "exists x. (DesignStyle(x) & Dreamy)", "exists x. (DesignStyle(x) & Timeless(x))", "exists x. (DesignStyle(x) & MassProduct)", "exists x. (DesignStyle(x) & Evocative)", "exists x. (DesignStyle(x) & Dreamy)", "exists x. (DesignStyle(x) & Timeless(x))", "exists x. (DesignStyle(x) & MassProduct)", "exists x. (DesignStyle(x) & Evocative)", "exists x. (DesignStyle(x) & Dreamy)", "exists x. (DesignStyle(x) & Timeless(x))", "exists x. (DesignStyle(x) & MassProduct)", "exists x. (DesignStyle(x) & Evocative)", "exists x. (DesignStyle(x) & Dreamy)", "exists x. (DesignStyle(x) & Timeless(x))", "exists x. (DesignStyle(x) & MassProduct)", "exists x. (DesignStyle(x) & Evocative)", "exists x. (DesignStyle(x) & Dreamy)", "exists x. (DesignStyle(x) & Timeless(x))", "exists x. (DesignStyle(x) & MassProduct)", "exists x. (DesignStyle(x) & Evocative)", "exists x. (DesignStyle(x) & Dreamy)", "exists x. (DesignStyle(x) & Timeless(x))", "exists x. (DesignStyle(x) & MassProduct)", "exists x. (DesignStyle(x) & Evocative)", "exists x. (DesignStyle(x) & Dreamy)", "exists x. (DesignStyle(x) & Timeless(x))", "exists x. (DesignStyle(x) & MassProduct)", "exists x. (DesignStyle(x) & Evocative)", "exists x. (DesignStyle(x) & Dreamy)", "exists x. (DesignStyle(x) & Timeless(x))", "exists x. (DesignStyle(x) & MassProduct)", "exists x. (DesignStyle(x) & Evocative)", "exists x. (DesignStyle(x) & Dreamy)", "exists x. (DesignStyle(x) & Timeless(x))", "exists x. (DesignStyle(x) & MassProduct)", "exists x. (DesignStyle(x) & Evocative)", "exists x. (DesignStyle(x) & Dreamy)", "exists x. (DesignStyle(x) & Timeless(x))", "exists x. (DesignStyle(x) & MassProduct)", "exists x. (DesignStyle(x) & Evocative)", "exists x. (DesignStyle(x) & Dreamy)", "exists x. (DesignStyle(x) & Timeless(x))", "exists x. (DesignStyle(x) & MassProduct)", "exists x. (DesignStyle(x) & Evocative)", "exists x. (DesignStyle(x) & Dreamy)", "exists x. (DesignStyle(x) & Timeless(x))", "exists x. (DesignStyle(x) & MassProduct)", "exists x. (DesignStyle(x) & Evocative)", "exists x. (DesignStyle(x) & Dreamy)", "exists x. (DesignStyle(x) & Timeless(x))", "exists x. (DesignStyle(x) & MassProduct)", "exists x. (DesignStyle(x) & Evocative)", "exists x. (DesignStyle(x) & Dreamy)", "exists x. (DesignStyle(x) & Timeless(x))", "exists x. (DesignStyle(x) & MassProduct)", "exists x. (DesignStyle(x) & Evocative)", "exists x. (DesignStyle(x) & Dreamy)", "exists x. (DesignStyle(x) & Timeless(x))", "exists x. (DesignStyle(x) & MassProduct)", "exists x. (DesignStyle(x) & Evocative)", "exists x. (DesignStyle(x) & Dreamy)", "exists x. (DesignStyle(x) & Timeless(x))", "exists x. (DesignStyle(x) & MassProduct)", "exists x. (DesignStyle(x) & Evocative)", "exists x. (DesignStyle(x) & Dreamy)", "exists x. (DesignStyle(x) & Timeless(x))", "exists x. (DesignStyle(x) & MassProduct)", "exists x. (DesignStyle(x) & Evocative)", "exists x. (DesignStyle(x) & Dreamy)", "exists x. (DesignStyle(x) & Timeless(x))", "exists x. (DesignStyle(x) & MassProduct)", "exists x. (DesignStyle(x) & Evocative)", "exists x. (DesignStyle(x) & Dreamy)", "exists x. (DesignStyle(x) & Timeless(x))", "exists x. (DesignStyle(x) & MassProduct)", "exists x. (DesignStyle(x) & Evocative)", "exists x. (DesignStyle(x) & Dreamy)", "exists x. (DesignStyle(x) & Timeless(x))", "exists x. (DesignStyle(x) & MassProduct)", "exists x. (DesignStyle(x) & Evocative)", "exists x. (DesignStyle(x) & Dreamy)", "exists x. (DesignStyle(x) & Timeless(x))", "exists x. (DesignStyle(x) & MassProduct)", "exists x. (DesignStyle(x) & Evocative)", "exists x. (DesignStyle(x) & Dreamy)", "exists x. (DesignStyle(x) & Timeless(x))", "exists x. (DesignStyle(x) & MassProduct)", "exists x. (DesignStyle(x) & Evocative)", "exists x. (DesignStyle(x) & Dreamy)", "exists x. (DesignStyle(x) & Timeless(x))", "exists x. (DesignStyle(x) & MassProduct)", "exists x. (DesignStyle(x) & Evocative)", "exists x. (DesignStyle(x) & Dreamy)", "exists x. (DesignStyle(x) & Timeless(x))", "exists x. (DesignStyle(x) & MassProduct)", "exists x. (DesignStyle(x) & Evocative)", "exists x. (DesignStyle(x) & Dreamy)", "exists x. (DesignStyle(x) & Timeless(x))", "exists x. (DesignStyle(x) & MassProduct)", "exists x. (DesignStyle(x) & Evocative)", "exists x. (DesignStyle(x) & Dreamy)", "exists x. (DesignStyle(x) & Timeless(x))", "exists x. (DesignStyle(x) & MassProduct)", "exists x. (DesignStyle(x) & Evocative)", "exists x. (DesignStyle(x) & Dreamy)", "exists x. (DesignStyle(x) & Timeless(x))", "exists x. (DesignStyle(x) & MassProduct)", "exists x. (DesignStyle(x) & Evocative)", "exists x. (DesignStyle(x) & Dreamy)", "exists x. (DesignStyle(x) & Timeless(x))", "exists x. (DesignStyle(x) & MassProduct)", "exists x. (DesignStyle(x) & Evocative)", "exists x. (DesignStyle(x) & Dreamy)", "exists x. (DesignStyle(x) & Timeless(x))", "exists x. (DesignStyle(x) & MassProduct)", "exists x. (DesignStyle(x) & Evocative)", "exists x. (DesignStyle(x) & Dreamy)", "exists x. (DesignStyle(x) & Timeless(x))", "exists x. (DesignStyle(x) & MassProduct)", "exists x. (DesignStyle(x) & Evocative)", "exists x. (DesignStyle(x) & Dreamy)", "exists x. (DesignStyle(x) & Timeless(x))", "exists x. (DesignStyle(x) & MassProduct)", "exists x. (DesignStyle(x) & Evocative)", "exists x. (DesignStyle(x) & Dreamy)", "exists x. (DesignStyle(x) & Timeless(x))", "exists x. (DesignStyle(x) & MassProduct)", "exists x. (DesignStyle(x) & Evocative)", "exists x. (DesignStyle(x) & Dreamy)", "exists x. (DesignStyle(x) & Timeless(x))", "exists x. (DesignStyle(x) & MassProduct)", "exists x. (DesignStyle(x) & Evocative)", "exists x. (DesignStyle(x) & Dreamy)", "exists x. (DesignStyle(x) & Timeless(x))", "exists x. (DesignStyle(x) & MassProduct)", "exists x. (DesignStyle(x) & Evocative)", "exists x. (DesignStyle(x) & Dreamy)", "exists x. (DesignStyle(x) & Timeless(x))", "exists x. (DesignStyle(x) & MassProduct)", "exists x. (DesignStyle(x) & Evocative)", "exists x. (DesignStyle(x) & Dreamy)", "exists x. (DesignStyle(x) & Timeless(x))", "exists x. (DesignStyle(x) & MassProduct)", "exists x. (DesignStyle(x) & Evocative)", "exists x. (DesignStyle(x) & Dreamy)", "exists x. (DesignStyle(x) & Timeless(x))", "exists x. (DesignStyle(x) & MassProduct)", "exists x. (DesignStyle(x) & Evocative)", "exists x. (DesignStyle(x) & Dreamy)", "exists x. (DesignStyle(x) & Timeless(x))", "exists x. (DesignStyle(x) & MassProduct)", "exists x. (DesignStyle(x) & Evocative)", "exists x. (DesignStyle(x) & Dreamy)", "exists x. (DesignStyle(x) & Timeless(x))", "exists x. (DesignStyle(x) & MassProduct)", "exists x. (DesignStyle(x) & Evocative)", "exists x. (DesignStyle(x) & Dreamy)", "exists x. (DesignStyle(x) & Timeless(x))", "exists x. (DesignStyle(x) & MassProduct)", "exists x. (DesignStyle(x) & Evocative)", "exists x. (DesignStyle(x) & Dreamy)", "exists x. (DesignStyle(x) & Timeless(x))", "exists x. (DesignStyle(x) & MassProduct)", "exists x. (DesignStyle(x) & Evocative)", "exists x. (DesignStyle(x) & Dreamy)", "exists x. (DesignStyle(x) & Timeless(x))", "exists x. (DesignStyle(x) & MassProduct)", "exists x. (DesignStyle(x) & Evocative)", "exists x. (DesignStyle(x) & Dreamy)", "exists x. (DesignStyle(x) & Timeless(x))", "exists x. (DesignStyle(x) & MassProduct)", "exists x. (DesignStyle(x) & Evocative)", "exists x. (DesignStyle(x) & Dreamy)", "exists x. (DesignStyle(x) & Timeless(x))", "exists x. (DesignStyle(x) & MassProduct)", "exists x. (DesignStyle(x) & Evocative)", "exists x. (DesignStyle(x) & Dreamy)", "exists x. (DesignStyle(x) & Timeless(x))", "exists x. (DesignStyle(x) & MassProduct)", "exists x. (DesignStyle(x) & Evocative)", "exists x. (DesignStyle(x) & Dreamy)", "exists x. (DesignStyle(x) & Timeless(x))", "exists x. (DesignStyle(x) & MassProduct)", "exists x. (DesignStyle(x) & Evocative)", "exists x. (DesignStyle(x) & Dreamy)", "exists x. (DesignStyle(x) & Timeless(x))", "exists x. (DesignStyle(x) & MassProduct)", "exists x. (DesignStyle(x) & Evocative)", "exists x. (DesignStyle(x) & Dreamy)", "exists x. (DesignStyle(x) & Timeless(x))", "exists x. (DesignStyle(x) & MassProduct)", "exists x. (DesignStyle(x) & Evocative)", "exists x. (DesignStyle(x) & Dreamy)", "exists x. (DesignStyle(x) & Timeless(x))", "exists x. (DesignStyle(x) & MassProduct)", "exists x. (DesignStyle(x) & Evocative)", "exists x. (DesignStyle(x) & Dreamy)", "exists x. (DesignStyle(x) & Timeless(x))", "exists x. (DesignStyle(x) & MassProduct)", "exists x. (DesignStyle(x) & Evocative)", "exists x. (DesignStyle(x) & Dreamy)", "exists x. (DesignStyle(x) & Timeless(x))", "exists x. (DesignStyle(x) & MassProduct)", "exists x. (DesignStyle(x) & Evocative)", "exists x. (DesignStyle(x) & Dreamy)", "exists x. (DesignStyle(x) & Timeless(x))", "exists x. (DesignStyle(x) & MassProduct)", "exists x. (DesignStyle(x) & Evocative)", "exists x. (DesignStyle(x) & Dreamy)", "exists x. (DesignStyle(x) & Timeless(x))", "exists x. (DesignStyle(x) & MassProduct)", "exists x. (DesignStyle(x) & Evocative)", "exists x. (DesignStyle(x) & Dreamy)", "exists x. (DesignStyle(x) & Timeless(x))", "exists x. (DesignStyle(x) & MassProduct)", "exists x. (DesignStyle(x) & Evocative)", "exists x. (DesignStyle(x) & Dreamy)", "exists x. (DesignStyle(x) & Timeless(x))", "exists x. (DesignStyle(x) & MassProduct)", "exists x. (DesignStyle(x) & Evocative)", "exists x. (DesignStyle(x) & Dreamy)", "exists x. (DesignStyle(x) & Timeless(x))", "exists x. (DesignStyle(x) & MassProduct)", "exists x. (DesignStyle(x) & Evocative)", "exists x. (DesignStyle(x) & Dreamy)", "exists x. (DesignStyle(x) & Timeless(x))", "exists x. (DesignStyle(x) & MassProduct)", "exists x. (DesignStyle(x) & Evocative)", "exists x. (DesignStyle(x) & Dreamy)", "exists x. (DesignStyle(x) & Timeless(x))", "exists x. (DesignStyle(x) & MassProduct)", "exists x. (DesignStyle(x) & Evocative)", "exists x. (DesignStyle(x) & Dreamy)", "exists x. (DesignStyle(x) & Timeless(x))", "exists x. (DesignStyle(x) & MassProduct)", "exists x. (DesignStyle(x) & Evocative)", "exists x. (DesignStyle(x) & Dreamy)", "exists x. (DesignStyle(x) & Timeless(x))", "exists x. (DesignStyle(x) & MassProduct)", "exists x. (DesignStyle(x) & Evocative)", "exists x. (DesignStyle(x) & Dreamy)", "exists x. (DesignStyle(x) & Timeless(x))", "exists x. (DesignStyle(x) & MassProduct)", "exists x. (DesignStyle(x) & Evocative)", "exists x. (DesignStyle(x) & Dreamy)", "exists x. (DesignStyle(x) & Timeless(x))", "exists x. (DesignStyle(x) & MassProduct)", "exists x. (DesignStyle(x) & Evocative)", "exists x. (DesignStyle(x) & Dreamy)", "exists x. (DesignStyle(x) & Timeless(x))", "exists x. (DesignStyle(x) & MassProduct)", "exists x. (DesignStyle(x) & Evocative)", "exists x. (DesignStyle(x) & Dreamy)", "exists x. (DesignStyle(x) & Timeless(x))", "exists x. (DesignStyle(x) & MassProduct)", "exists x. (DesignStyle(x) & Evocative)", "exists x. (DesignStyle(x) & Dreamy)", "exists x. (DesignStyle(x) & Timeless(x))", "exists x. (DesignStyle(x) & MassProduct)", "exists x. (DesignStyle(x) & Evocative)", "exists x. (DesignStyle(x) & Dreamy)", "exists x. (DesignStyle(x) & Timeless(x))", "exists x. (DesignStyle(x) & MassProduct)", "exists x. (DesignStyle(x) & Evocative)", "exists x. (DesignStyle(x) & Dreamy)", "exists x. (DesignStyle(x) & Timeless(x))", "exists x. (DesignStyle(x) & MassProduct)", "exists x. (DesignStyle(x) & Evocative)", "exists x. (DesignStyle(x) & Dreamy)", "exists x. (DesignStyle(x) & Timeless(x))", "exists x. (DesignStyle(x) & MassProduct)", "exists x. (DesignStyle(x) & Evocative)", "exists x. (DesignStyle(x) & Dreamy)", "exists x. (DesignStyle(x) & Timeless(x))", "exists x. (DesignStyle(x) & MassProduct)", "exists x. (DesignStyle(x) & Evocative)", "exists x. (DesignStyle(x) & Dreamy)", "exists x. (DesignStyle(x) & Timeless(x))", "exists x. (DesignStyle(x) & MassProduct)", "exists x. (DesignStyle(x) & Evocative)", "exists x. (DesignStyle(x) & Dreamy)", "exists x. (DesignStyle(x) & Timeless(x))", "exists x. (DesignStyle(x) & MassProduct)", "exists x. (DesignStyle(x) & Evocative)", "exists x. (DesignStyle(x) & Dreamy)", "exists x. (DesignStyle(x) & Timeless(x))", "exists x. (DesignStyle(x) & MassProduct)", "exists x. (DesignStyle(x) & Evocative)", "exists x. (DesignStyle(x) & Dreamy)", "exists x. (DesignStyle(x) & Timeless(x))", "exists x. (DesignStyle(x) & MassProduct)", "exists x. (DesignStyle(x) & Evocative)", "exists x. (DesignStyle(x) & Dreamy)", "exists x. (DesignStyle(x) & Timeless(x))", "exists x. (DesignStyle(x) & MassProduct)", "exists x. (DesignStyle(x) & Evocative)", "exists x. (DesignStyle(x) & Dreamy)", "exists x. (DesignStyle(x) & Timeless(x))", "exists x. (DesignStyle(x) & MassProduct)", "exists x. (DesignStyle(x) & Evocative)", "exists x. (DesignStyle(x) & Dreamy)", "exists x. (DesignStyle(x) & Timeless(x))", "exists x. (DesignStyle(x) & MassProduct)", "exists x. (DesignStyle(x) & Evocative)", "exists x. (DesignStyle(x) & Dreamy)", "exists x. (DesignStyle(x) & Timeless(x))", "exists x. (DesignStyle(x) & MassProduct)", "exists x. (DesignStyle(x) & Evocative)", "exists x. (DesignStyle(x) & Dreamy)", "exists x. (DesignStyle(x) & Timeless(x))", "exists x. (DesignStyle(x) & MassProduct)", "exists x. (DesignStyle(x) & Evocative)", "exists x. (DesignStyle(x) & Dreamy)", "exists x. (DesignStyle(x) & Timeless(x))", "exists x. (DesignStyle(x) & MassProduct)", "exists x. (DesignStyle(x) & Evocative)", "exists x. (DesignStyle(x) & Dreamy)", "exists x. (DesignStyle(x) & Timeless(x))", "exists x. (DesignStyle(x) & MassProduct)", "exists x. (DesignStyle(x) & Evocative)", "exists x. (DesignStyle(x) & Dreamy)", "exists x. (DesignStyle(x) & Timeless(x))", "exists x. (DesignStyle(x) & MassProduct)", "exists x. (DesignStyle(x) & Evocative)", "exists x. (DesignStyle(x) & Dreamy)", "exists x. (DesignStyle(x) & Timeless(x))"], "conclusion": "exists x. (DesignStyle(x) &", "error_type": "<class 'nltk.sem.logic.LogicalExpressionException'>", "error_message": "End of input found.  Expression expected.\nexists x. (DesignStyle(x) &\n                           ^", "stack_trace": "Traceback (most recent call last):\n  File \"/data/gpfs/projects/punim0478/bansaab/linc2/eval/tasks/owafoltask.py\", line 577, in _process_neurosymbolic\n    parsed = json.loads(gen)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/json/__init__.py\", line 346, in loads\n    return _default_decoder.decode(s)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/json/decoder.py\", line 337, in decode\n    obj, end = self.raw_decode(s, idx=_w(s, 0).end())\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/json/decoder.py\", line 355, in raw_decode\n    raise JSONDecodeError(\"Expecting value\", s, err.value) from None\njson.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/sem/logic.py\", line 270, in token\n    tok = self._buffer[self._currentIndex]\nIndexError: list index out of range\n\nThe above exception was the direct cause of the following exception:\n\nTraceback (most recent call last):\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/sem/logic.py\", line 284, in process_next_expression\n    tok = self.token()\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/sem/logic.py\", line 276, in token\n    raise ExpectedMoreTokensException(self._currentIndex + 1) from e\nnltk.sem.logic.ExpectedMoreTokensException: End of input found.  More tokens expected.\n\nThe above exception was the direct cause of the following exception:\n\nTraceback (most recent call last):\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/sem/logic.py\", line 154, in parse\n    result = self.process_next_expression(None)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/sem/logic.py\", line 290, in process_next_expression\n    accum = self.handle(tok, context)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/sem/logic.py\", line 312, in handle\n    return self.handle_quant(tok, context)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/sem/logic.py\", line 427, in handle_quant\n    accum = self.process_next_expression(tok)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/sem/logic.py\", line 290, in process_next_expression\n    accum = self.handle(tok, context)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/sem/logic.py\", line 315, in handle\n    return self.handle_open(tok, context)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/sem/logic.py\", line 449, in handle_open\n    accum = self.process_next_expression(None)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/sem/logic.py\", line 297, in process_next_expression\n    return self.attempt_adjuncts(accum, context)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/sem/logic.py\", line 323, in attempt_adjuncts\n    expression = self.attempt_BooleanExpression(expression, context)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/sem/logic.py\", line 485, in attempt_BooleanExpression\n    factory, expression, self.process_next_expression(tok)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/sem/logic.py\", line 286, in process_next_expression\n    raise ExpectedMoreTokensException(\nnltk.sem.logic.ExpectedMoreTokensException: End of input found.  Expression expected.\n\nThe above exception was the direct cause of the following exception:\n\nTraceback (most recent call last):\n  File \"/data/gpfs/projects/punim0478/bansaab/linc2/eval/tasks/utils.py\", line 215, in evaluate\n    c = read_expr(conclusion)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/sem/logic.py\", line 957, in fromstring\n    return cls._logic_parser.parse(s, signature)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/sem/logic.py\", line 159, in parse\n    raise LogicalExpressionException(None, msg) from e\nnltk.sem.logic.LogicalExpressionException: End of input found.  Expression expected.\nexists x. (DesignStyle(x) &\n                           ^\n"}
{"timestamp": "2025-09-16T19:09:50.641203", "premises": ["all x. (DesignStyle(x) -> Timeless(x))", "all x. (MassProduct(x) -> -Timeless(x))", "(DesignStyle(ZahaHadid) | DesignStyle(KellyWearstler)) | (DesignStyle(KellyWearstler) & DesignStyle(ZahaHadid))", "all x. (DesignStyle(x) -> Evocative(x))", "all x. (DesignStyle(x) -> Dreamy(x))", "(Timeless(Max) & MassProduct(Max)) | (Evocative(Max) & Dreamy(Max))", "all x. (Timeless(x) -> -MassProduct(x))", "all x. (Evocative(x) -> -MassProduct(x))", "all x. (Dreamy(x) -> -MassProduct(x))", "all x. (DesignStyle(x) -> Timeless(x))", "all x. (MassProduct(x) -> -Timeless(x))", "(DesignStyle(ZahaHadid) | DesignStyle(KellyWearstler)) | (DesignStyle(KellyWearstler) & DesignStyle(ZahaHadid))", "all x. (DesignStyle(x) -> Evocative(x))", "all x. (DesignStyle(x) -> Dreamy(x))", "(Timeless(Max) & MassProduct(Max)) | (Evocative(Max) & Dreamy(Max))", "all x. (Timeless(x) -> -MassProduct(x))", "all x. (Evocative(x) -> -MassProduct(x))", "all x. (Dreamy(x) -> -MassProduct(x))", "all x. (DesignStyle(x) -> Timeless(x))", "all x. (MassProduct(x) -> -Timeless(x))", "(DesignStyle(ZahaHadid) | DesignStyle(KellyWearstler)) | (DesignStyle(KellyWearstler) & DesignStyle(ZahaHadid))", "all x. (DesignStyle(x) -> Evocative(x))", "all x. (DesignStyle(x) -> Dreamy(x))", "(Timeless(Max) & MassProduct(Max)) | (Evocative(Max) & Dreamy(Max))", "all x. (Timeless(x) -> -MassProduct(x))", "all x. (Evocative(x) -> -MassProduct(x))"], "conclusion": "all x. (Dreamy(x) -> -MassProduct(x))", "error_type": "<class 'KeyError'>", "error_message": "26", "stack_trace": "Traceback (most recent call last):\n  File \"/data/gpfs/projects/punim0478/bansaab/linc2/eval/tasks/owafoltask.py\", line 577, in _process_neurosymbolic\n    parsed = json.loads(gen)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/json/__init__.py\", line 346, in loads\n    return _default_decoder.decode(s)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/json/decoder.py\", line 337, in decode\n    obj, end = self.raw_decode(s, idx=_w(s, 0).end())\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/json/decoder.py\", line 355, in raw_decode\n    raise JSONDecodeError(\"Expecting value\", s, err.value) from None\njson.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/sem/logic.py\", line 270, in token\n    tok = self._buffer[self._currentIndex]\nIndexError: list index out of range\n\nThe above exception was the direct cause of the following exception:\n\nTraceback (most recent call last):\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/sem/logic.py\", line 284, in process_next_expression\n    tok = self.token()\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/sem/logic.py\", line 276, in token\n    raise ExpectedMoreTokensException(self._currentIndex + 1) from e\nnltk.sem.logic.ExpectedMoreTokensException: End of input found.  More tokens expected.\n\nThe above exception was the direct cause of the following exception:\n\nTraceback (most recent call last):\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/sem/logic.py\", line 154, in parse\n    result = self.process_next_expression(None)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/sem/logic.py\", line 286, in process_next_expression\n    raise ExpectedMoreTokensException(\nnltk.sem.logic.ExpectedMoreTokensException: End of input found.  Expression expected.\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"/data/gpfs/projects/punim0478/bansaab/linc2/eval/tasks/utils.py\", line 216, in evaluate\n    p_list = [read_expr(p) for p in premises]\n  File \"/data/gpfs/projects/punim0478/bansaab/linc2/eval/tasks/utils.py\", line 216, in <listcomp>\n    p_list = [read_expr(p) for p in premises]\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/sem/logic.py\", line 957, in fromstring\n    return cls._logic_parser.parse(s, signature)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/sem/logic.py\", line 158, in parse\n    msg = \"{}\\n{}\\n{}^\".format(e, data, \" \" * mapping[e.index - 1])\nKeyError: 26\n"}
{"timestamp": "2025-09-16T19:09:50.662323", "premises": ["all x. (DesignStyle(x) & Timeless(x))", "all x. (DesignStyle(x) & MassProduct(x) -> -Timeless(x))", "(ZahaHadidDesignStyle | KellyWearstlerDesignStyle)", "all x. (DesignStyle(x) & KellyWearstler(x) -> Evocative(x))", "all x. (DesignStyle(x) & KellyWearstler(x) -> Dreamy(x))", "(MaxDesignStyle -> Timeless(MaxDesignStyle)) & (MaxDesignStyle -> MassProduct(MaxDesignStyle)) & (MaxDesignStyle -> Evocative(MaxDesignStyle))"], "conclusion": "(MaxDesignStyle -> Evocative(MaxDesignStyle)) | (MaxDesignStyle -> Dreamy(MaxDesignStyle))", "error_type": "<class 'nltk.inference.prover9.Prover9FatalException'>", "error_message": "(FATAL)\n%%ERROR: The following symbols/arities are used as both relation and function symbols: MaxDesignStyle/0.\n\n\nFatal error:  The following symbols/arities are used as both relation and function symbols: MaxDesignStyle/0", "stack_trace": "Traceback (most recent call last):\n  File \"/data/gpfs/projects/punim0478/bansaab/linc2/eval/tasks/owafoltask.py\", line 577, in _process_neurosymbolic\n    parsed = json.loads(gen)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/json/__init__.py\", line 346, in loads\n    return _default_decoder.decode(s)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/json/decoder.py\", line 337, in decode\n    obj, end = self.raw_decode(s, idx=_w(s, 0).end())\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/json/decoder.py\", line 355, in raw_decode\n    raise JSONDecodeError(\"Expecting value\", s, err.value) from None\njson.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"/data/gpfs/projects/punim0478/bansaab/linc2/eval/tasks/utils.py\", line 219, in evaluate\n    truth_value = prover.prove(c, p_list)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/inference/api.py\", line 37, in prove\n    return self._prove(goal, assumptions, verbose)[0]\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/inference/prover9.py\", line 327, in _prove\n    stdout, returncode = self._call_prover9(\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/inference/prover9.py\", line 370, in _call_prover9\n    raise Prover9FatalException(returncode, errormsg)\nnltk.inference.prover9.Prover9FatalException: (FATAL)\n%%ERROR: The following symbols/arities are used as both relation and function symbols: MaxDesignStyle/0.\n\n\nFatal error:  The following symbols/arities are used as both relation and function symbols: MaxDesignStyle/0\n"}
{"timestamp": "2025-09-16T19:09:50.664841", "premises": ["all x. (ZahaHadid(x) -> Timeless(x))", "all x. (MassProduct(x) -> -Timeless(x))", "(ZahaHadid(x) | KellyWearstler(x)) -> (Timeless(x) | -Evocative(x))", "all x. (KellyWearstler(x) -> Evocative(x))", "all x. (KellyWearstler(x) -> Dreamy(x))", "all x. (Timeless(x) -> MassProduct(x))", "all x. (Evocative(x) -> MassProduct(x))", "all x. (Dreamy(x) -> MassProduct(x))", "all x. (Max(x) -> (Timeless(x) | -Evocative(x) | -Dreamy(x)))", "all x. (Max(x) -> (MassProduct(x) | -Evocative(x) | -Dreamy(x)))", "all x. (Max(x) -> (Evocative(x) | -Dreamy(x)))", "all x. (Max(x) -> (Dreamy(x) | -Evocative(x)))", "all x. (Max(x) -> (Evocative(x) | -Dreamy(x)))", "all x. (Max(x) -> (Dreamy(x) | -Evocative(x)))", "all x. (Max(x) -> (Evocative(x) | -Dreamy(x)))", "all x. (Max(x) -> (Dreamy(x) | -Evocative(x)))", "all x. (Max(x) -> (Evocative(x) | -Dreamy(x)))", "all x. (Max(x) -> (Dreamy(x) | -Evocative(x)))", "all x. (Max(x) -> (Evocative(x) | -Dreamy(x)))", "all x. (Max(x) -> (Dreamy(x) | -Evocative(x)))", "all x. (Max(x) -> (Evocative(x) | -Dreamy(x)))", "all x. (Max(x) -> (Dreamy(x) | -Evocative(x)))", "all x. (Max(x) -> (Evocative(x) | -Dreamy(x)))", "all x. (Max(x) -> (Dreamy(x) | -Evocative(x)))", "all x. (Max(x) -> (Evocative(x) | -Dreamy(x)))", "all x. (Max(x) -> (Dreamy(x) | -Evocative(x)))", "all x. (Max(x) -> (Evocative(x) | -Dreamy(x)))", "all x. (Max(x) -> (Dreamy(x) | -Evocative(x)))", "all x. (Max(x) -> (Evocative(x) | -Dreamy(x)))", "all x. (Max(x) -> (Dreamy(x) | -Evocative(x)))", "all x. (Max(x) -> (Evocative(x) | -Dreamy(x)))", "all x. (Max(x) -> (Dreamy(x) | -Evocative(x)))", "all x. (Max(x) -> (Evocative(x) | -Dreamy(x)))", "all x. (Max(x) -> (Dreamy(x) | -Evocative(x)))", "all x. (Max(x) -> (Evocative(x) | -Dreamy(x)))", "all x. (Max(x) -> (Dreamy(x) | -Evocative(x)))", "all x. (Max(x) -> (Evocative(x) | -Dreamy(x)))", "all x. (Max(x) -> (Dreamy(x) | -Evocative(x)))", "all x. (Max(x) -> (Evocative(x) | -Dreamy(x)))", "all x. (Max(x) -> (Dreamy(x) | -Evocative(x)))", "all x. (Max(x) -> (Evocative(x) | -Dreamy(x)))", "all x. (Max(x) -> (Dreamy(x) | -Evocative(x)))", "all x. (Max(x) -> (Evocative(x) | -Dreamy(x)))", "all x. (Max(x) -> (Dreamy(x) | -Evocative(x)))", "all x. (Max(x) -> (Evocative(x) | -Dreamy(x)))", "all x. (Max(x) -> (Dreamy(x) | -Evocative(x)))", "all x. (Max(x) -> (Evocative(x) | -Dreamy(x)))", "all x. (Max(x) -> (Dreamy(x) | -Evocative(x)))", "all x. (Max(x) -> (Evocative(x) | -Dreamy(x)))", "all x. (Max(x) -> (Dreamy(x) | -Evocative(x)))", "all x. (Max(x) -> (Evocative(x) | -Dreamy(x)))", "all x. (Max(x) -> (Dreamy(x) | -Evocative(x)))", "all x. (Max(x) -> (Evocative(x) | -Dreamy(x)))", "all x. (Max(x) -> (Dreamy(x) | -Evocative(x)))", "all x. (Max(x) -> (Evocative(x) | -Dreamy(x)))", "all x. (Max(x) -> (Dreamy(x) | -Evocative(x)))", "all x. (Max(x) -> (Evocative(x) | -Dreamy(x)))", "all x. (Max(x) -> (Dreamy(x) | -Evocative(x)))", "all x. (Max(x) -> (Evocative(x) | -Dreamy(x)))", "all x. (Max(x) -> (Dreamy(x) | -Evocative(x)))", "all x. (Max(x) -> (Evocative(x) | -Dreamy(x)))", "all x. (Max(x) -> (Dreamy(x) | -Evocative(x)))", "all x. (Max(x) -> (Evocative(x) | -Dreamy(x)))", "all x. (Max(x) -> (Dreamy(x) | -Evocative(x)))", "all x. (Max(x) -> (Evocative(x) | -Dreamy(x)))", "all x. (Max(x) -> (Dreamy(x) | -Evocative(x)))", "all x. (Max(x) -> (Evocative(x) | -Dreamy(x)))", "all x. (Max(x) -> (Dreamy(x) | -Evocative(x)))", "all x. (Max(x) -> (Evocative(x) | -Dreamy(x)))", "all x. (Max(x) -> (Dreamy(x) | -Evocative(x)))", "all x. (Max(x) -> (Evocative(x) | -Dreamy(x)))", "all x. (Max(x) -> (Dreamy(x) | -Evocative(x)))", "all x. (Max(x) -> (Evocative(x) | -Dreamy(x)))", "all x. (Max(x) -> (Dreamy(x) | -Evocative(x)))", "all x. (Max(x) -> (Evocative(x) | -Dreamy(x)))", "all x. (Max(x) -> (Dreamy(x) | -Evocative(x)))", "all x. (Max(x) -> (Evocative(x) | -Dreamy(x)))", "all x. (Max(x) -> (Dreamy(x) | -Evocative(x)))", "all x. (Max(x) -> (Evocative(x) | -Dreamy(x)))", "all x. (Max(x) -> (Dreamy(x) | -Evocative(x)))", "all x. (Max(x) -> (Evocative(x) | -Dreamy(x)))", "all x. (Max(x) -> (Dreamy(x) | -Evocative(x)))", "all x. (Max(x) -> (Evocative(x) | -Dreamy(x)))", "all x. (Max(x) -> (Dreamy(x) | -Evocative(x)))", "all x. (Max(x) -> (Evocative(x) | -Dreamy(x)))", "all x. (Max(x) -> (Dreamy(x) | -Evocative(x)))", "all x. (Max(x) -> (Evocative(x) | -Dreamy(x)))", "all x. (Max(x) -> (Dreamy(x) | -Evocative(x)))", "all x. (Max(x) -> (Evocative(x) | -Dreamy(x)))", "all x. (Max(x) -> (Dreamy(x) | -Evocative(x)))", "all x. (Max(x) -> (Evocative(x) | -Dreamy(x)))", "all x. (Max(x) -> (Dreamy(x) | -Evocative(x)))", "all x. (Max(x) -> (Evocative(x) | -Dreamy(x)))", "all x. (Max(x) -> (Dreamy(x) | -Evocative(x)))", "all x. (Max(x) -> (Evocative(x) | -Dreamy(x)))", "all x. (Max(x) -> (Dreamy(x) | -Evocative(x)))", "all x. (Max(x) -> (Evocative(x) | -Dreamy(x)))", "all x. (Max(x) -> (Dreamy(x) | -Evocative(x)))", "all x. (Max(x) -> (Evocative(x) | -Dreamy(x)))", "all x. (Max(x) -> (Dreamy(x) | -Evocative(x)))", "all x. (Max(x) -> (Evocative(x) | -Dreamy(x)))", "all x. (Max(x) -> (Dreamy(x) | -Evocative(x)))", "all x. (Max(x) -> (Evocative(x) | -Dreamy(x)))", "all x. (Max(x) -> (Dreamy(x) | -Evocative(x)))", "all x. (Max(x) -> (Evocative(x) | -Dreamy(x)))", "all x. (Max(x) -> (Dreamy(x) | -Evocative(x)))", "all x. (Max(x) -> (Evocative(x) | -Dreamy(x)))", "all x. (Max(x) -> (Dreamy(x) | -Evocative(x)))", "all x. (Max(x) -> (Evocative(x) | -Dreamy(x)))", "all x. (Max(x) -> (Dreamy(x) | -Evocative(x)))", "all x. (Max(x) -> (Evocative(x) | -Dreamy(x)))", "all x. (Max(x) -> (Dreamy(x) | -Evocative(x)))", "all x. (Max(x) -> (Evocative(x) | -Dreamy(x)))", "all x. (Max(x) -> (Dreamy(x) | -Evocative(x)))", "all x. (Max(x) -> (Evocative(x) | -Dreamy(x)))", "all x. (Max(x) -> (Dreamy(x) | -Evocative(x)))", "all x. (Max(x) -> (Evocative(x) | -Dreamy(x)))", "all x. (Max(x) -> (Dreamy(x) | -Evocative(x)))", "all x. (Max(x) -> (Evocative(x) | -Dreamy(x)))", "all x. (Max(x) -> (Dreamy(x) | -Evocative(x)))", "all x. (Max(x) -> (Evocative(x) | -Dreamy(x)))", "all x. (Max(x) -> (Evocative(x) | -Dreamy(x)))", "all x. (Max(x) -> (Dreamy(x) | -Evocative(x)))", "all x. (Max(x) -> (Evocative(x) | -Dreamy(x)))", "all x. (Max(x) -> (Dreamy(x) | -Evocative(x)))", "all x. (Max(x) -> (Evocative(x) | -Dreamy(x)))", "all x. (Max(x) -> (Dreamy(x) | -Evocative(x)))", "all x. (Max(x) -> (Evocative(x) | -Dreamy(x)))", "all x. (Max(x) -> (Dreamy(x) | -Evocative(x)))", "all x. (Max(x) -> (Evocative(x) | -Dreamy(x)))", "all x. (Max(x) -> (Dreamy(x) | -Evocative(x)))", "all x. (Max(x) -> (Evocative(x) | -Dreamy(x)))", "all x. (Max(x) -> (Dreamy(x) | -Evocative(x)))", "all x. (Max(x) -> (Evocative(x) | -Dreamy(x)))", "all x. (Max(x) -> (Evocative(x) | -Dreamy(x)))", "all x. (Max(x) -> (Evocative(x) | -Dreamy(x)))", "all x. (Max(x) -> (Evocative(x) | -Dreamy(x)))", "all x. (Max(x) -> (Dreamy(x) | -Evocative(x)))", "all x. (Max(x) -> (Evocative(x) | -Dreamy(x)))", "all x. (Max(x) -> (Evocative(x) | -Dreamy(x)))", "all x. (Max(x) -> (Evocative(x) | -Dreamy(x)))", "all x. (Max(x) -> (Evocative(x) | -Dreamy(x)))", "all x. (Max(x) -> (Evocative(x) | -Dreamy(x)))", "all x. (Max(x) -> (Evocative(x) | -Dreamy(x)))", "all x. (Max(x) -> (Evocative(x) | -Dreamy(x)))", "all x. (Max(x) -> (Evocative(x) | -Dreamy(x)))", "all x. (Max(x) -> (Evocative(x) | -Dreamy(x)))", "all x. (Max(x) -> (Evocative(x) | -Dreamy(x)))", "all x. (Max(x) -> (Evocative(x) | -Dreamy(x)))", "all x. (Max(x) -> (Evocative(x) | -Dreamy(x)))", "all x. (Max(x) -> (Evocative(x) | -Dreamy(x)))", "all x. (Max(x) -> (Evocative(x) | -Dreamy(x)))", "all x. (Max(x) -> (Evocative(x) | -Dreamy(x)))", "all x. (Max(x) -> (Evocative(x) | -Dreamy(x)))", "all x. (Max(x) -> (Evocative(x) | -Dreamy(x)))", "all x. (Max(x) -> (Evocative(x) | -Dreamy(x)))", "all x. (Max(x) -> (Evocative(x) | -Dreamy(x)))", "all x. (Max(x) -> (Evocative(x) | -Dreamy(x)))", "all x. (Max(x) -> (Evocative(x) | -Dreamy(x)))", "all x. (Max(x) -> (Evocative(x) | -Dreamy(x)))", "all x. (Max(x) -> (Evocative(x) | -Dreamy(x)))", "all x. (Max(x) -> (Evocative(x) | -Dreamy(x)))", "all x. (Max(x) -> (Evocative(x) | -Dreamy(x)))", "all x. (Max(x) -> (Evocative(x) | -Dreamy(x)))", "all x. (Max(x) -> (Evocative(x) | -Dreamy(x)))", "all x. (Max(x) -> (Evocative(x) | -Dreamy(x)))", "all x. (Max(x) -> (Evocative(x) | -Dreamy(x)))", "all x. (Max(x) -> (Evocative(x) | -Dreamy(x)))", "all x. (Max(x) -> (Evocative(x) | -Dreamy(x)))", "all x. (Max(x) -> (Evocative(x) | -Dreamy(x)))", "all x. (Max(x) -> (Evocative(x) | -Dreamy(x)))", "all x. (Max(x) -> (Evocative(x) | -Dreamy(x)))", "all x. (Max(x) -> (Evocative(x) | -Dreamy(x)))", "all x. (Max(x) -> (Evocative(x) | -Dreamy(x)))", "all x. (Max(x) -> (Evocative(x) | -Dreamy(x)))", "all x. (Max(x) -> (Evocative(x) | -Dreamy(x)))", "all x. (Max(x) -> (Evocative(x) | -Dreamy(x)))", "all x. (Max(x) -> (Evocative(x) | -Dreamy(x)))", "all x. (Max(x) -> (Evocative(x) | -Dreamy(x)))", "all x. (Max(x) -> (Evocative(x) | -Dreamy(x)))", "all x. (Max(x) -> (Evocative(x) | -Dreamy(x)))", "all x. (Max(x) -> (Evocative(x) | -Dreamy(x)))", "all x. (Max(x) -> (Evocative(x) | -Dreamy(x)))", "all x. (Max(x) -> (Evocative(x) | -Dreamy(x)))", "all x. (Max(x) -> (Evocative(x) | -Dreamy(x)))", "all x. (Max(x) -> (Evocative(x) | -Dreamy(x)))", "all x. (Max(x) -> (Evocative(x) | -Dreamy(x)))", "all x. (Max(x) -> (Evocative(x) | -Dreamy(x)))", "all x. (Max(x) -> (Evocative(x) | -Dreamy(x)))", "all x. (Max(x) -> (Evocative(x) | -Dreamy(x)))", "all x. (Max(x) -> (Evocative(x) | -Dreamy(x)))", "all x. (Max(x) -> (Evocative(x) | -Dreamy(x)))", "all x. (Max(x) -> (Evocative(x) | -Dreamy(x)))", "all x. (Max(x) -> (Evocative(x) | -Dreamy(x)))", "all x. (Max(x) -> (Evocative(x) | -Dreamy(x)))", "all x. (Max(x) -> (Evocative(x) | -Dreamy(x)))", "all x. (Max(x) -> (Evocative(x) | -Dreamy(x)))", "all x. (Max(x) -> (Evocative(x) | -Dreamy(x)))", "all x. (Max(x) -> (Evocative(x) | -Dreamy(x)))", "all x. (Max(x) -> (Evocative(x) | -Dreamy(x)))", "all x. (Max(x) -> (Evocative(x) | -Dreamy(x)))", "all x. (Max(x) -> (Evocative(x) | -Dreamy(x)))", "all x. (Max(x) -> (Evocative(x) | -Dreamy(x)))", "all x. (Max(x) -> (Evocative(x) | -Dreamy(x)))", "all x. (Max(x) -> (Evocative(x) | -Dreamy(x)))", "all x. (Max(x) -> (Evocative(x) | -Dreamy(x)))", "all x. (Max(x) -> (Evocative(x) | -Dreamy(x)))", "all x. (Max(x) -> (Evocative(x) | -Dreamy(x)))", "all x. (Max(x) -> (Evocative(x) | -Dreamy(x)))", "all x. (Max(x) -> (Evocative(x) | -Dreamy(x)))", "all x. (Max(x) -> (Evocative(x) | -Dreamy(x)))", "all x. (Max(x) -> (Evocative(x) | -Dreamy(x)))", "all x. (Max(x) -> (Evocative(x) | -Dreamy(x)))", "all x. (Max(x) -> (Evocative(x) | -Dreamy(x)))", "all x. (Max(x) -> (Evocative(x) | -Dreamy(x)))", "all x. (Max(x) -> (Evocative(x) | -Dreamy(x)))", "all x. (Max(x) -> (Evocative(x) | -Dreamy(x)))", "all x. (Max(x) -> (Evocative(x) | -Dreamy(x)))", "all x. (Max(x) -> (Evocative(x) | -Dreamy(x)))", "all x. (Max(x) -> (Evocative(x) | -Dreamy(x)))", "all x. (Max(x) -> (Evocative(x) | -Dreamy(x)))", "all x. (Max(x) -> (Evocative(x) | -Dreamy(x)))", "all x. (Max(x) -> (Evocative(x) | -Dreamy(x)))", "all x. (Max(x) -> (Evocative(x) | -Dreamy(x)))", "all x. (Max(x) -> (Evocative(x) | -Dreamy(x)))", "all x. (Max(x) -> (Evocative(x) | -Dreamy(x)))", "all x. (Max(x) -> (Evocative(x) | -Dreamy(x)))", "all x. (Max(x) -> (Evocative(x) | -Dreamy(x)))", "all x. (Max(x) -> (Evocative(x) | -Dreamy(x)))", "all x. (Max(x) -> (Evocative(x) | -Dreamy(x)))", "all x. (Max(x) -> (Evocative(x) | -Dreamy(x)))", "all x. (Max(x) -> (Evocative(x) | -Dreamy(x)))", "all x. (Max(x) -> (Evocative(x) | -Dreamy(x)))", "all x. (Max(x) -> (Evocative(x) | -Dreamy(x)))", "all x. (Max(x) -> (Evocative(x) | -Dreamy(x)))", "all x. (Max(x) -> (Evocative(x) | -Dreamy(x)))", "all x. (Max(x) -> (Evocative(x) | -Dreamy(x)))", "all x. (Max(x) -> (Evocative(x) | -Dreamy(x)))", "all x. (Max(x) -> (Evocative(x) | -Dreamy(x)))", "all x. (Max(x) -> (Evocative(x) | -Dreamy(x)))", "all x. (Max(x) -> (Evocative(x) | -Dreamy(x)))", "all x. (Max(x) -> (Evocative(x) | -Dreamy(x)))", "all x. (Max(x) -> (Evocative(x) | -Dreamy(x)))", "all x. (Max(x) -> (Evocative(x) | -Dreamy(x)))", "all x. (Max(x) -> (Evocative(x) | -Dreamy(x)))", "all x. (Max(x) -> (Evocative(x) | -Dreamy(x)))", "all x. (Max(x) -> (Evocative(x) | -Dreamy(x)))", "all x. (Max(x) -> (Evocative(x) | -Dreamy(x)))", "all x. (Max(x) -> (Evocative(x) | -Dreamy(x)))", "all x. (Max(x) -> (Evocative(x) | -Dreamy(x)))", "all x. (Max(x) -> (Evocative(x) | -Dreamy(x)))", "all x. (Max(x) -> (Evocative(x) | -Dreamy(x)))", "all x. (Max(x) -> (Evocative(x) | -Dreamy(x)))", "all x. (Max(x) -> (Evocative(x) | -Dreamy(x)))", "all x. (Max(x) -> (Evocative(x) | -Dreamy(x)))", "all x. (Max(x) -> (Evocative(x) | -Dreamy(x)))", "all x. (Max(x) -> (Evocative(x) | -Dreamy(x)))", "all x. (Max(x) -> (Evocative(x) | -Dreamy(x)))", "all x. (Max(x) -> (Evocative(x) | -Dreamy(x)))", "all x. (Max(x) -> (Evocative(x) | -Dreamy(x)))", "all x. (Max(x) -> (Evocative(x) | -Dreamy(x)))", "all x. (Max(x) -> (Evocative(x) | -Dreamy(x)))", "all x. (Max(x) -> (Evocative(x) | -Dreamy(x)))", "all x. (Max(x) -> (Evocative(x) | -Dreamy(x)))", "all x. (Max(x) -> (Evocative(x) | -Dreamy(x)))", "all x. (Max(x) -> (Evocative(x) | -Dreamy(x)))", "all x. (Max(x) -> (Evocative(x) | -Dreamy(x)))", "all x. (Max(x) -> (Evocative(x) | -Dreamy(x)))", "all x. (Max(x) -> (Evocative(x) | -Dreamy(x)))", "all x. (Max(x) -> (Evocative(x) | -Dreamy(x)))", "all x. (Max(x) -> (Evocative(x) | -Dreamy(x)))", "all x. (Max(x) -> (Evocative(x) | -Dreamy(x)))", "all x. (Max(x) -> (Evocative(x) | -Dreamy(x)))", "all x. (Max(x) -> (Evocative(x) | -Dreamy(x)))", "all x. (Max(x) -> (Evocative(x) | -Dreamy(x)))", "all x. (Max(x) -> (Evocative(x) | -Dreamy(x)))", "all x. (Max(x) -> (Evocative(x) | -Dreamy(x)))", "all x. (Max(x) -> (Evocative(x) | -Dreamy(x)))", "all x. (Max(x) -> (Evocative(x) | -Dreamy(x)))", "all x. (Max(x) -> (Evocative(x) | -Dreamy(x)))", "all x. (Max(x) -> (Evocative(x) | -Dreamy(x)))", "all x. (Max(x) -> (Evocative(x) | -Dreamy(x)))", "all x. (Max(x) -> (Evocative(x) | -Dreamy(x)))", "all x. (Max(x) -> (Evocative(x) | -Dreamy(x)))", "all x. (Max(x) -> (Evocative(x) | -Dreamy(x)))", "all x. (Max(x) -> (Evocative(x) | -Dreamy(x)))", "all x. (Max(x) -> (Evocative(x) | -Dreamy(x)))", "all x. (Max(x) -> (Evocative(x) | -Dreamy(x)))", "all x. (Max(x) -> (Evocative(x) | -Dreamy(x)))", "all x. (Max(x) -> (Evocative(x) | -Dreamy(x)))", "all x. (Max(x) -> (Evocative(x) | -Dreamy(x)))", "all x. (Max(x) -> (Evocative(x) | -Dreamy(x)))", "all x. (Max(x) -> (Evocative(x) | -Dreamy(x)))"], "conclusion": "all x. (Max(x) -> (", "error_type": "<class 'nltk.sem.logic.LogicalExpressionException'>", "error_message": "End of input found.  Expression expected.\nall x. (Max(x) -> (\n                   ^", "stack_trace": "Traceback (most recent call last):\n  File \"/data/gpfs/projects/punim0478/bansaab/linc2/eval/tasks/owafoltask.py\", line 577, in _process_neurosymbolic\n    parsed = json.loads(gen)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/json/__init__.py\", line 346, in loads\n    return _default_decoder.decode(s)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/json/decoder.py\", line 337, in decode\n    obj, end = self.raw_decode(s, idx=_w(s, 0).end())\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/json/decoder.py\", line 355, in raw_decode\n    raise JSONDecodeError(\"Expecting value\", s, err.value) from None\njson.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/sem/logic.py\", line 270, in token\n    tok = self._buffer[self._currentIndex]\nIndexError: list index out of range\n\nThe above exception was the direct cause of the following exception:\n\nTraceback (most recent call last):\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/sem/logic.py\", line 284, in process_next_expression\n    tok = self.token()\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/sem/logic.py\", line 276, in token\n    raise ExpectedMoreTokensException(self._currentIndex + 1) from e\nnltk.sem.logic.ExpectedMoreTokensException: End of input found.  More tokens expected.\n\nThe above exception was the direct cause of the following exception:\n\nTraceback (most recent call last):\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/sem/logic.py\", line 154, in parse\n    result = self.process_next_expression(None)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/sem/logic.py\", line 290, in process_next_expression\n    accum = self.handle(tok, context)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/sem/logic.py\", line 312, in handle\n    return self.handle_quant(tok, context)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/sem/logic.py\", line 427, in handle_quant\n    accum = self.process_next_expression(tok)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/sem/logic.py\", line 290, in process_next_expression\n    accum = self.handle(tok, context)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/sem/logic.py\", line 315, in handle\n    return self.handle_open(tok, context)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/sem/logic.py\", line 449, in handle_open\n    accum = self.process_next_expression(None)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/sem/logic.py\", line 297, in process_next_expression\n    return self.attempt_adjuncts(accum, context)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/sem/logic.py\", line 323, in attempt_adjuncts\n    expression = self.attempt_BooleanExpression(expression, context)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/sem/logic.py\", line 485, in attempt_BooleanExpression\n    factory, expression, self.process_next_expression(tok)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/sem/logic.py\", line 290, in process_next_expression\n    accum = self.handle(tok, context)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/sem/logic.py\", line 315, in handle\n    return self.handle_open(tok, context)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/sem/logic.py\", line 449, in handle_open\n    accum = self.process_next_expression(None)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/sem/logic.py\", line 286, in process_next_expression\n    raise ExpectedMoreTokensException(\nnltk.sem.logic.ExpectedMoreTokensException: End of input found.  Expression expected.\n\nThe above exception was the direct cause of the following exception:\n\nTraceback (most recent call last):\n  File \"/data/gpfs/projects/punim0478/bansaab/linc2/eval/tasks/utils.py\", line 215, in evaluate\n    c = read_expr(conclusion)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/sem/logic.py\", line 957, in fromstring\n    return cls._logic_parser.parse(s, signature)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/sem/logic.py\", line 159, in parse\n    raise LogicalExpressionException(None, msg) from e\nnltk.sem.logic.LogicalExpressionException: End of input found.  Expression expected.\nall x. (Max(x) -> (\n                   ^\n"}
{"timestamp": "2025-09-16T19:14:16.420185", "premises": ["all x. (RankedHighly(x, Women'sTennisAssociation) -> AmongMostActivePlayers(x, MajorTennis))", "all x. (LostTo(x, Iga \u015awi\u0105tek) -> RankedHighly(x, Women'sTennisAssociation))", "all x. (FemaleTennisPlayer(x) & AtRolandGarros2022(x) -> LostTo(x, Iga \u015awi\u0105tek))", "all x. (FemaleTennisPlayer(x) | MaleTennisPlayer(x) & AtRolandGarros2022(x))", "all x. (MaleTennisPlayer(x) & AtRolandGarros2022(x) -> LostTo(x, Rafael Nadal))", "((RankedHighly(Coco Gauff, Women'sTennisAssociation) | LostTo(Coco Gauff, Rafael Nadal)) & -MaleTennisPlayer(Coco Gauff) & AtRolandGarros2022(Coco Gauff))"], "conclusion": "all x. (RankedHighly(Coco Gauff, Women'sTennisAssociation) -> AmongMostActivePlayers(x, MajorTennis))", "error_type": "<class 'nltk.sem.logic.LogicalExpressionException'>", "error_message": "Unexpected token: 'Gauff'.  Expected token ')'.\nall x. (RankedHighly(Coco Gauff, Women'sTennisAssociation) -> AmongMostActivePlayers(x, MajorTennis))\n                          ^", "stack_trace": "Traceback (most recent call last):\n  File \"/data/gpfs/projects/punim0478/bansaab/linc2/eval/tasks/owafoltask.py\", line 577, in _process_neurosymbolic\n    parsed = json.loads(gen)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/json/__init__.py\", line 346, in loads\n    return _default_decoder.decode(s)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/json/decoder.py\", line 337, in decode\n    obj, end = self.raw_decode(s, idx=_w(s, 0).end())\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/json/decoder.py\", line 355, in raw_decode\n    raise JSONDecodeError(\"Expecting value\", s, err.value) from None\njson.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/sem/logic.py\", line 154, in parse\n    result = self.process_next_expression(None)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/sem/logic.py\", line 290, in process_next_expression\n    accum = self.handle(tok, context)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/sem/logic.py\", line 312, in handle\n    return self.handle_quant(tok, context)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/sem/logic.py\", line 427, in handle_quant\n    accum = self.process_next_expression(tok)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/sem/logic.py\", line 290, in process_next_expression\n    accum = self.handle(tok, context)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/sem/logic.py\", line 315, in handle\n    return self.handle_open(tok, context)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/sem/logic.py\", line 449, in handle_open\n    accum = self.process_next_expression(None)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/sem/logic.py\", line 290, in process_next_expression\n    accum = self.handle(tok, context)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/sem/logic.py\", line 303, in handle\n    return self.handle_variable(tok, context)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/sem/logic.py\", line 359, in handle_variable\n    self.assertNextToken(Tokens.CLOSE)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/sem/logic.py\", line 573, in assertNextToken\n    raise UnexpectedTokenException(self._currentIndex, tok, expected)\nnltk.sem.logic.UnexpectedTokenException: Unexpected token: 'Gauff'.  Expected token ')'.\n\nThe above exception was the direct cause of the following exception:\n\nTraceback (most recent call last):\n  File \"/data/gpfs/projects/punim0478/bansaab/linc2/eval/tasks/utils.py\", line 215, in evaluate\n    c = read_expr(conclusion)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/sem/logic.py\", line 957, in fromstring\n    return cls._logic_parser.parse(s, signature)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/sem/logic.py\", line 159, in parse\n    raise LogicalExpressionException(None, msg) from e\nnltk.sem.logic.LogicalExpressionException: Unexpected token: 'Gauff'.  Expected token ')'.\nall x. (RankedHighly(Coco Gauff, Women'sTennisAssociation) -> AmongMostActivePlayers(x, MajorTennis))\n                          ^\n"}
{"timestamp": "2025-09-16T19:14:16.421574", "premises": ["all x. all y. (RankedHighly(x) & WomensTennisAssociation(x) -> ActiveInMajorTennis(x))", "all x. (LostTo(x, Iga \u015awi\u0105tek) -> RankedHighly(x))", "all x. all y. (From(x, y) & RolandGarros2022(y) -> Female(x) & LostTo(x, Iga \u015awi\u0105tek))", "all x. (RolandGarros2022(x) -> EitherFemale(x) | Male(x))", "all x. (RolandGarros2022(x) -> Male(x) & LostTo(x, Rafael Nadal))", "all x. (RankedHighly(x) | LostTo(x, Rafael Nadal) -> CocoGauff(x))", "not CocoGauff(x) -> Male(x) & RolandGarros2022(x)", "CocoGauff(x) -> not Male(x) & RolandGarros2022(x)"], "conclusion": "not Male(x) & RolandGarros2022(x) -> ActiveInMajorTennis(x)", "error_type": "<class 'nltk.sem.logic.LogicalExpressionException'>", "error_message": "Unexpected token: '\u015awi\u0105tek'.  Expected token ')'.\nall x. (LostTo(x, Iga \u015awi\u0105tek) -> RankedHighly(x))\n                      ^", "stack_trace": "Traceback (most recent call last):\n  File \"/data/gpfs/projects/punim0478/bansaab/linc2/eval/tasks/owafoltask.py\", line 577, in _process_neurosymbolic\n    parsed = json.loads(gen)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/json/__init__.py\", line 346, in loads\n    return _default_decoder.decode(s)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/json/decoder.py\", line 337, in decode\n    obj, end = self.raw_decode(s, idx=_w(s, 0).end())\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/json/decoder.py\", line 355, in raw_decode\n    raise JSONDecodeError(\"Expecting value\", s, err.value) from None\njson.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/sem/logic.py\", line 154, in parse\n    result = self.process_next_expression(None)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/sem/logic.py\", line 290, in process_next_expression\n    accum = self.handle(tok, context)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/sem/logic.py\", line 312, in handle\n    return self.handle_quant(tok, context)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/sem/logic.py\", line 427, in handle_quant\n    accum = self.process_next_expression(tok)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/sem/logic.py\", line 290, in process_next_expression\n    accum = self.handle(tok, context)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/sem/logic.py\", line 315, in handle\n    return self.handle_open(tok, context)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/sem/logic.py\", line 449, in handle_open\n    accum = self.process_next_expression(None)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/sem/logic.py\", line 290, in process_next_expression\n    accum = self.handle(tok, context)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/sem/logic.py\", line 303, in handle\n    return self.handle_variable(tok, context)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/sem/logic.py\", line 359, in handle_variable\n    self.assertNextToken(Tokens.CLOSE)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/sem/logic.py\", line 573, in assertNextToken\n    raise UnexpectedTokenException(self._currentIndex, tok, expected)\nnltk.sem.logic.UnexpectedTokenException: Unexpected token: '\u015awi\u0105tek'.  Expected token ')'.\n\nThe above exception was the direct cause of the following exception:\n\nTraceback (most recent call last):\n  File \"/data/gpfs/projects/punim0478/bansaab/linc2/eval/tasks/utils.py\", line 216, in evaluate\n    p_list = [read_expr(p) for p in premises]\n  File \"/data/gpfs/projects/punim0478/bansaab/linc2/eval/tasks/utils.py\", line 216, in <listcomp>\n    p_list = [read_expr(p) for p in premises]\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/sem/logic.py\", line 957, in fromstring\n    return cls._logic_parser.parse(s, signature)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/sem/logic.py\", line 159, in parse\n    raise LogicalExpressionException(None, msg) from e\nnltk.sem.logic.LogicalExpressionException: Unexpected token: '\u015awi\u0105tek'.  Expected token ')'.\nall x. (LostTo(x, Iga \u015awi\u0105tek) -> RankedHighly(x))\n                      ^\n"}
{"timestamp": "2025-09-16T19:14:16.422913", "premises": ["all x. (RankedHighly(x, Women'sTennisAssociation) -> AmongMostActivePlayersInMajorTennis(x))", "all x. (LostTo(x, Iga \u015awi\u0105tek) -> RankedHighly(x, Women'sTennisAssociation))", "all x. (FemaleTennisPlayer(x) & At(x, Roland Garros 2022) -> LostTo(x, Iga \u015awi\u0105tek))", "(FemaleTennisPlayer(x) & At(x, Roland Garros 2022)) | (MaleTennisPlayer(x) & At(x, Roland Garros 2022))", "all x. (MaleTennisPlayer(x) & At(x, Roland Garros 2022) -> LostTo(x, Rafael Nadal))"], "conclusion": "all x. ((RankedHighly(x, Women'sTennisAssociation) | LostTo(x, Rafael Nadal)) & -MaleTennisPlayer(x) & At(x, Roland Garros 2022))", "error_type": "<class 'nltk.sem.logic.LogicalExpressionException'>", "error_message": "Unexpected token: 'Nadal'.  Expected token ')'.\nall x. ((RankedHighly(x, Women'sTennisAssociation) | LostTo(x, Rafael Nadal)) & -MaleTennisPlayer(x) & At(x, Roland Garros 2022))\n                                                                      ^", "stack_trace": "Traceback (most recent call last):\n  File \"/data/gpfs/projects/punim0478/bansaab/linc2/eval/tasks/owafoltask.py\", line 577, in _process_neurosymbolic\n    parsed = json.loads(gen)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/json/__init__.py\", line 346, in loads\n    return _default_decoder.decode(s)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/json/decoder.py\", line 337, in decode\n    obj, end = self.raw_decode(s, idx=_w(s, 0).end())\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/json/decoder.py\", line 355, in raw_decode\n    raise JSONDecodeError(\"Expecting value\", s, err.value) from None\njson.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/sem/logic.py\", line 154, in parse\n    result = self.process_next_expression(None)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/sem/logic.py\", line 290, in process_next_expression\n    accum = self.handle(tok, context)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/sem/logic.py\", line 312, in handle\n    return self.handle_quant(tok, context)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/sem/logic.py\", line 427, in handle_quant\n    accum = self.process_next_expression(tok)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/sem/logic.py\", line 290, in process_next_expression\n    accum = self.handle(tok, context)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/sem/logic.py\", line 315, in handle\n    return self.handle_open(tok, context)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/sem/logic.py\", line 449, in handle_open\n    accum = self.process_next_expression(None)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/sem/logic.py\", line 290, in process_next_expression\n    accum = self.handle(tok, context)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/sem/logic.py\", line 315, in handle\n    return self.handle_open(tok, context)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/sem/logic.py\", line 449, in handle_open\n    accum = self.process_next_expression(None)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/sem/logic.py\", line 297, in process_next_expression\n    return self.attempt_adjuncts(accum, context)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/sem/logic.py\", line 323, in attempt_adjuncts\n    expression = self.attempt_BooleanExpression(expression, context)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/sem/logic.py\", line 485, in attempt_BooleanExpression\n    factory, expression, self.process_next_expression(tok)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/sem/logic.py\", line 290, in process_next_expression\n    accum = self.handle(tok, context)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/sem/logic.py\", line 303, in handle\n    return self.handle_variable(tok, context)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/sem/logic.py\", line 359, in handle_variable\n    self.assertNextToken(Tokens.CLOSE)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/sem/logic.py\", line 573, in assertNextToken\n    raise UnexpectedTokenException(self._currentIndex, tok, expected)\nnltk.sem.logic.UnexpectedTokenException: Unexpected token: 'Nadal'.  Expected token ')'.\n\nThe above exception was the direct cause of the following exception:\n\nTraceback (most recent call last):\n  File \"/data/gpfs/projects/punim0478/bansaab/linc2/eval/tasks/utils.py\", line 215, in evaluate\n    c = read_expr(conclusion)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/sem/logic.py\", line 957, in fromstring\n    return cls._logic_parser.parse(s, signature)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/sem/logic.py\", line 159, in parse\n    raise LogicalExpressionException(None, msg) from e\nnltk.sem.logic.LogicalExpressionException: Unexpected token: 'Nadal'.  Expected token ')'.\nall x. ((RankedHighly(x, Women'sTennisAssociation) | LostTo(x, Rafael Nadal)) & -MaleTennisPlayer(x) & At(x, Roland Garros 2022))\n                                                                      ^\n"}
{"timestamp": "2025-09-16T19:14:16.442636", "premises": ["all x. (RankedHighlyByWTA(x) -> ActiveInMajorTennis(x))", "Coco Gauff is a player who is ranked highly by the Women's Tennis Association or a player who lost to Rafael Nadal.", "all x. (CocoGauff(x) -> (RankedHighlyByWTA(x) | LostTo(x, Rafael Nadal)))", "Coco Gauff is not a male tennis player at Roland Garros 2022.", "all x. (CocoGauff(x) -> (FemaleTennisPlayersAtRolandGarros2022(x) | MaleTennisPlayersAtRolandGarros2022(x)))", "Coco Gauff is among the most active players in major tennis."], "conclusion": "all x. (RankedHighlyByWTA(x) -> ActiveInMajorTennis(x)) & all x. (LostTo(x, Iga \u015awi\u0105tek) -> RankedHighlyByWTA(x)) & all x. (FemaleTennisPlayersAtRolandGarros2022(x) -> LostTo(x, Iga \u015awi\u0105tek)) & all x. (MaleTennisPlayersAtRolandGarros2022(x) -> LostTo(x, Rafael Nadal)) & all x. (CocoGauff(x) -> (RankedHighlyByWTA(x) | LostTo(x, Rafael Nadal))) & all x. (CocoGauff(x) -> (FemaleTennisPlayersAtRolandGarros2022(x) | MaleTennisPlayersAtRolandGarros2022(x)))", "error_type": "<class 'nltk.sem.logic.LogicalExpressionException'>", "error_message": "Unexpected token: '\u015awi\u0105tek'.  Expected token ')'.\nall x. (RankedHighlyByWTA(x) -> ActiveInMajorTennis(x)) & all x. (LostTo(x, Iga \u015awi\u0105tek) -> RankedHighlyByWTA(x)) & all x. (FemaleTennisPlayersAtRolandGarros2022(x) -> LostTo(x, Iga \u015awi\u0105tek)) & all x. (MaleTennisPlayersAtRolandGarros2022(x) -> LostTo(x, Rafael Nadal)) & all x. (CocoGauff(x) -> (RankedHighlyByWTA(x) | LostTo(x, Rafael Nadal))) & all x. (CocoGauff(x) -> (FemaleTennisPlayersAtRolandGarros2022(x) | MaleTennisPlayersAtRolandGarros2022(x)))\n                                                                                ^", "stack_trace": "Traceback (most recent call last):\n  File \"/data/gpfs/projects/punim0478/bansaab/linc2/eval/tasks/owafoltask.py\", line 577, in _process_neurosymbolic\n    parsed = json.loads(gen)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/json/__init__.py\", line 346, in loads\n    return _default_decoder.decode(s)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/json/decoder.py\", line 337, in decode\n    obj, end = self.raw_decode(s, idx=_w(s, 0).end())\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/json/decoder.py\", line 355, in raw_decode\n    raise JSONDecodeError(\"Expecting value\", s, err.value) from None\njson.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/sem/logic.py\", line 154, in parse\n    result = self.process_next_expression(None)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/sem/logic.py\", line 297, in process_next_expression\n    return self.attempt_adjuncts(accum, context)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/sem/logic.py\", line 323, in attempt_adjuncts\n    expression = self.attempt_BooleanExpression(expression, context)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/sem/logic.py\", line 485, in attempt_BooleanExpression\n    factory, expression, self.process_next_expression(tok)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/sem/logic.py\", line 290, in process_next_expression\n    accum = self.handle(tok, context)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/sem/logic.py\", line 312, in handle\n    return self.handle_quant(tok, context)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/sem/logic.py\", line 427, in handle_quant\n    accum = self.process_next_expression(tok)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/sem/logic.py\", line 290, in process_next_expression\n    accum = self.handle(tok, context)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/sem/logic.py\", line 315, in handle\n    return self.handle_open(tok, context)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/sem/logic.py\", line 449, in handle_open\n    accum = self.process_next_expression(None)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/sem/logic.py\", line 290, in process_next_expression\n    accum = self.handle(tok, context)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/sem/logic.py\", line 303, in handle\n    return self.handle_variable(tok, context)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/sem/logic.py\", line 359, in handle_variable\n    self.assertNextToken(Tokens.CLOSE)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/sem/logic.py\", line 573, in assertNextToken\n    raise UnexpectedTokenException(self._currentIndex, tok, expected)\nnltk.sem.logic.UnexpectedTokenException: Unexpected token: '\u015awi\u0105tek'.  Expected token ')'.\n\nThe above exception was the direct cause of the following exception:\n\nTraceback (most recent call last):\n  File \"/data/gpfs/projects/punim0478/bansaab/linc2/eval/tasks/utils.py\", line 215, in evaluate\n    c = read_expr(conclusion)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/sem/logic.py\", line 957, in fromstring\n    return cls._logic_parser.parse(s, signature)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/sem/logic.py\", line 159, in parse\n    raise LogicalExpressionException(None, msg) from e\nnltk.sem.logic.LogicalExpressionException: Unexpected token: '\u015awi\u0105tek'.  Expected token ')'.\nall x. (RankedHighlyByWTA(x) -> ActiveInMajorTennis(x)) & all x. (LostTo(x, Iga \u015awi\u0105tek) -> RankedHighlyByWTA(x)) & all x. (FemaleTennisPlayersAtRolandGarros2022(x) -> LostTo(x, Iga \u015awi\u0105tek)) & all x. (MaleTennisPlayersAtRolandGarros2022(x) -> LostTo(x, Rafael Nadal)) & all x. (CocoGauff(x) -> (RankedHighlyByWTA(x) | LostTo(x, Rafael Nadal))) & all x. (CocoGauff(x) -> (FemaleTennisPlayersAtRolandGarros2022(x) | MaleTennisPlayersAtRolandGarros2022(x)))\n                                                                                ^\n"}
{"timestamp": "2025-09-16T19:14:16.423546", "premises": ["all x. (RankedHighly(x) -> AmongMostActivePlayersInMajorTennis(x))"], "conclusion": "RankedHighly(Coco Gauff) or LostTo(Coco Gauff, Rafael Nadal)", "error_type": "<class 'nltk.sem.logic.LogicalExpressionException'>", "error_message": "Unexpected token: 'Gauff'.  Expected token ')'.\nRankedHighly(Coco Gauff) or LostTo(Coco Gauff, Rafael Nadal)\n                  ^", "stack_trace": "Traceback (most recent call last):\n  File \"/data/gpfs/projects/punim0478/bansaab/linc2/eval/tasks/owafoltask.py\", line 577, in _process_neurosymbolic\n    parsed = json.loads(gen)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/json/__init__.py\", line 346, in loads\n    return _default_decoder.decode(s)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/json/decoder.py\", line 337, in decode\n    obj, end = self.raw_decode(s, idx=_w(s, 0).end())\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/json/decoder.py\", line 355, in raw_decode\n    raise JSONDecodeError(\"Expecting value\", s, err.value) from None\njson.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/sem/logic.py\", line 154, in parse\n    result = self.process_next_expression(None)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/sem/logic.py\", line 290, in process_next_expression\n    accum = self.handle(tok, context)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/sem/logic.py\", line 303, in handle\n    return self.handle_variable(tok, context)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/sem/logic.py\", line 359, in handle_variable\n    self.assertNextToken(Tokens.CLOSE)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/sem/logic.py\", line 573, in assertNextToken\n    raise UnexpectedTokenException(self._currentIndex, tok, expected)\nnltk.sem.logic.UnexpectedTokenException: Unexpected token: 'Gauff'.  Expected token ')'.\n\nThe above exception was the direct cause of the following exception:\n\nTraceback (most recent call last):\n  File \"/data/gpfs/projects/punim0478/bansaab/linc2/eval/tasks/utils.py\", line 215, in evaluate\n    c = read_expr(conclusion)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/sem/logic.py\", line 957, in fromstring\n    return cls._logic_parser.parse(s, signature)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/sem/logic.py\", line 159, in parse\n    raise LogicalExpressionException(None, msg) from e\nnltk.sem.logic.LogicalExpressionException: Unexpected token: 'Gauff'.  Expected token ')'.\nRankedHighly(Coco Gauff) or LostTo(Coco Gauff, Rafael Nadal)\n                  ^\n"}
{"timestamp": "2025-09-16T19:14:16.424899", "premises": ["all x. ((RankedHighly(x) & Women'sTennisAssociation(x)) -> ActiveInMajorTennis(x))", "all x. ((RankedHighly(x) & Women'sTennisAssociation(x)) -> ActiveInMajorTennis(x))", "all x. ((LostTo(x, Iga \u015awi\u0105tek) & RankedHighly(x)) -> Women'sTennisAssociation(x))", "all x. ((Female(x) & RolandGarros2022(x)) -> LostTo(x, Iga \u015awi\u0105tek))", "all x. ((Female(x) & RolandGarros2022(x)) | (Male(x) & RolandGarros2022(x)))", "all x. ((Male(x) & RolandGarros2022(x)) -> LostTo(x, Rafael Nadal))"], "conclusion": "all x. ((RankedHighly(x) & Women'sTennisAssociation(x)) | ((LostTo(x, Rafael Nadal) & Women'sTennisAssociation(x)) | (Female(x) & RolandGarros2022(x))))", "error_type": "<class 'nltk.sem.logic.LogicalExpressionException'>", "error_message": "Unexpected token: 'Nadal'.  Expected token ')'.\nall x. ((RankedHighly(x) & Women'sTennisAssociation(x)) | ((LostTo(x, Rafael Nadal) & Women'sTennisAssociation(x)) | (Female(x) & RolandGarros2022(x))))\n                                                                             ^", "stack_trace": "Traceback (most recent call last):\n  File \"/data/gpfs/projects/punim0478/bansaab/linc2/eval/tasks/owafoltask.py\", line 577, in _process_neurosymbolic\n    parsed = json.loads(gen)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/json/__init__.py\", line 346, in loads\n    return _default_decoder.decode(s)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/json/decoder.py\", line 337, in decode\n    obj, end = self.raw_decode(s, idx=_w(s, 0).end())\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/json/decoder.py\", line 355, in raw_decode\n    raise JSONDecodeError(\"Expecting value\", s, err.value) from None\njson.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/sem/logic.py\", line 154, in parse\n    result = self.process_next_expression(None)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/sem/logic.py\", line 290, in process_next_expression\n    accum = self.handle(tok, context)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/sem/logic.py\", line 312, in handle\n    return self.handle_quant(tok, context)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/sem/logic.py\", line 427, in handle_quant\n    accum = self.process_next_expression(tok)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/sem/logic.py\", line 290, in process_next_expression\n    accum = self.handle(tok, context)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/sem/logic.py\", line 315, in handle\n    return self.handle_open(tok, context)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/sem/logic.py\", line 449, in handle_open\n    accum = self.process_next_expression(None)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/sem/logic.py\", line 297, in process_next_expression\n    return self.attempt_adjuncts(accum, context)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/sem/logic.py\", line 323, in attempt_adjuncts\n    expression = self.attempt_BooleanExpression(expression, context)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/sem/logic.py\", line 485, in attempt_BooleanExpression\n    factory, expression, self.process_next_expression(tok)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/sem/logic.py\", line 290, in process_next_expression\n    accum = self.handle(tok, context)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/sem/logic.py\", line 315, in handle\n    return self.handle_open(tok, context)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/sem/logic.py\", line 449, in handle_open\n    accum = self.process_next_expression(None)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/sem/logic.py\", line 290, in process_next_expression\n    accum = self.handle(tok, context)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/sem/logic.py\", line 315, in handle\n    return self.handle_open(tok, context)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/sem/logic.py\", line 449, in handle_open\n    accum = self.process_next_expression(None)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/sem/logic.py\", line 290, in process_next_expression\n    accum = self.handle(tok, context)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/sem/logic.py\", line 303, in handle\n    return self.handle_variable(tok, context)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/sem/logic.py\", line 359, in handle_variable\n    self.assertNextToken(Tokens.CLOSE)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/sem/logic.py\", line 573, in assertNextToken\n    raise UnexpectedTokenException(self._currentIndex, tok, expected)\nnltk.sem.logic.UnexpectedTokenException: Unexpected token: 'Nadal'.  Expected token ')'.\n\nThe above exception was the direct cause of the following exception:\n\nTraceback (most recent call last):\n  File \"/data/gpfs/projects/punim0478/bansaab/linc2/eval/tasks/utils.py\", line 215, in evaluate\n    c = read_expr(conclusion)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/sem/logic.py\", line 957, in fromstring\n    return cls._logic_parser.parse(s, signature)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/sem/logic.py\", line 159, in parse\n    raise LogicalExpressionException(None, msg) from e\nnltk.sem.logic.LogicalExpressionException: Unexpected token: 'Nadal'.  Expected token ')'.\nall x. ((RankedHighly(x) & Women'sTennisAssociation(x)) | ((LostTo(x, Rafael Nadal) & Women'sTennisAssociation(x)) | (Female(x) & RolandGarros2022(x))))\n                                                                             ^\n"}
{"timestamp": "2025-09-16T19:14:16.449922", "premises": ["all x. all y. (RankedHighly(x) & Women'sTennisAssociation(x) -> AmongMostActivePlayersInMajorTennis(x))", "all x. all y. (RankedHighly(x) & Women'sTennisAssociation(x) -> AmongMostActivePlayersInMajorTennis(x))", "all x. (LostTo(x, IgaSwiatkowska) -> RankedHighly(x))", "all x. (PlayedAtRolandGarros2022(x) & Female(x) -> LostTo(x, IgaSwiatkowska))", "all x. (PlayedAtRolandGarros2022(x) & Female(x) | PlayedAtRolandGarros2022(x) & Male(x))", "all x. (PlayedAtRolandGarros2022(x) & Male(x) -> LostTo(x, RafaelNadal))"], "conclusion": "all x. (RankedHighly(x) | LostTo(x, RafaelNadal) -> NotMalePlayerAtRolandGarros2022(x))", "error_type": "<class 'nltk.inference.prover9.Prover9FatalException'>", "error_message": "(FATAL)\n%%ERROR: A term cannot be constructed from the marked string:\n\n\n    all x all y ((%%START ERROR%%RankedHighly(x) & Women'sTennisAssociation(x)%%END ERROR%%) -> AmongMostActivePlayersInMajorTennis(x)).\n\nFatal error:  sread_term error", "stack_trace": "Traceback (most recent call last):\n  File \"/data/gpfs/projects/punim0478/bansaab/linc2/eval/tasks/owafoltask.py\", line 577, in _process_neurosymbolic\n    parsed = json.loads(gen)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/json/__init__.py\", line 346, in loads\n    return _default_decoder.decode(s)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/json/decoder.py\", line 337, in decode\n    obj, end = self.raw_decode(s, idx=_w(s, 0).end())\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/json/decoder.py\", line 355, in raw_decode\n    raise JSONDecodeError(\"Expecting value\", s, err.value) from None\njson.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"/data/gpfs/projects/punim0478/bansaab/linc2/eval/tasks/utils.py\", line 219, in evaluate\n    truth_value = prover.prove(c, p_list)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/inference/api.py\", line 37, in prove\n    return self._prove(goal, assumptions, verbose)[0]\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/inference/prover9.py\", line 327, in _prove\n    stdout, returncode = self._call_prover9(\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/inference/prover9.py\", line 370, in _call_prover9\n    raise Prover9FatalException(returncode, errormsg)\nnltk.inference.prover9.Prover9FatalException: (FATAL)\n%%ERROR: A term cannot be constructed from the marked string:\n\n\n    all x all y ((%%START ERROR%%RankedHighly(x) & Women'sTennisAssociation(x)%%END ERROR%%) -> AmongMostActivePlayersInMajorTennis(x)).\n\nFatal error:  sread_term error\n"}
{"timestamp": "2025-09-16T19:14:16.451675", "premises": ["all x. all y. (Women'sTennisAssociationRankedHigh(x) & Women'sTennisAssociationRankedHigh(y) & RankedByWTA(x, y) -> ActiveInMajorTennis(x) & ActiveInMajorTennis(y))"], "conclusion": "all x. all y. (Women'sTennisAssociationRankedHigh(x) & Women'sTennisAssociationRankedHigh(y) & RankedByWTA(x, y) -> ActiveInMajorTennis(x) & ActiveInMajorTennis(y))", "error_type": "<class 'nltk.inference.prover9.Prover9FatalException'>", "error_message": "(FATAL)\n%%ERROR: A term cannot be constructed from the marked string:\n\n\n    all x all y (((%%START ERROR%%Women'sTennisAssociationRankedHigh(x) & Women'sTennisAssociationRankedHigh(y)%%END ERROR%%) & RankedByWTA(x,y)) -> (ActiveInMajorTennis(x) & ActiveInMajorTennis(y))).\n\nFatal error:  sread_term error", "stack_trace": "Traceback (most recent call last):\n  File \"/data/gpfs/projects/punim0478/bansaab/linc2/eval/tasks/owafoltask.py\", line 577, in _process_neurosymbolic\n    parsed = json.loads(gen)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/json/__init__.py\", line 346, in loads\n    return _default_decoder.decode(s)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/json/decoder.py\", line 337, in decode\n    obj, end = self.raw_decode(s, idx=_w(s, 0).end())\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/json/decoder.py\", line 355, in raw_decode\n    raise JSONDecodeError(\"Expecting value\", s, err.value) from None\njson.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"/data/gpfs/projects/punim0478/bansaab/linc2/eval/tasks/utils.py\", line 219, in evaluate\n    truth_value = prover.prove(c, p_list)\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/inference/api.py\", line 37, in prove\n    return self._prove(goal, assumptions, verbose)[0]\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/inference/prover9.py\", line 327, in _prove\n    stdout, returncode = self._call_prover9(\n  File \"/home/bansaab/.conda/envs/neurosymbolic/lib/python3.10/site-packages/nltk/inference/prover9.py\", line 370, in _call_prover9\n    raise Prover9FatalException(returncode, errormsg)\nnltk.inference.prover9.Prover9FatalException: (FATAL)\n%%ERROR: A term cannot be constructed from the marked string:\n\n\n    all x all y (((%%START ERROR%%Women'sTennisAssociationRankedHigh(x) & Women'sTennisAssociationRankedHigh(y)%%END ERROR%%) & RankedByWTA(x,y)) -> (ActiveInMajorTennis(x) & ActiveInMajorTennis(y))).\n\nFatal error:  sread_term error\n"}
